// Arctic Combat (3369) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

#include "../SDK.hpp"

namespace Classes
{
//---------------------------------------------------------------------------
//Functions
//---------------------------------------------------------------------------

// Function Engine.wWeaponBaseParams.GetCrosshairType
// (Defined, Public)
// Parameters:
// struct FString                 szValue                        (Parm, NeedCtorLink)
// TEnumAsByte<ECrosshairType>    ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<ECrosshairType> UwWeaponBaseParams::GetCrosshairType(const struct FString& szValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponBaseParams.GetCrosshairType");

	UwWeaponBaseParams_GetCrosshairType_Params params;
	params.szValue = szValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponBaseParams.GetReloadType
// (Defined, Public)
// Parameters:
// struct FString                 szValue                        (Parm, NeedCtorLink)
// TEnumAsByte<EReloadType>       ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EReloadType> UwWeaponBaseParams::GetReloadType(const struct FString& szValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponBaseParams.GetReloadType");

	UwWeaponBaseParams_GetReloadType_Params params;
	params.szValue = szValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponBaseParams.GetProjMoveType
// (Defined, Public)
// Parameters:
// struct FString                 szValue                        (Parm, NeedCtorLink)
// TEnumAsByte<EProjMoveType>     ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EProjMoveType> UwWeaponBaseParams::GetProjMoveType(const struct FString& szValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponBaseParams.GetProjMoveType");

	UwWeaponBaseParams_GetProjMoveType_Params params;
	params.szValue = szValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponBaseParams.GetBulletType
// (Defined, Public)
// Parameters:
// struct FString                 szValue                        (Parm, NeedCtorLink)
// TEnumAsByte<EBulletType>       ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EBulletType> UwWeaponBaseParams::GetBulletType(const struct FString& szValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponBaseParams.GetBulletType");

	UwWeaponBaseParams_GetBulletType_Params params;
	params.szValue = szValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponManager.PrecacheSound
// (Defined, Static, Public)

void UwWeaponManager::STATIC_PrecacheSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.PrecacheSound");

	UwWeaponManager_PrecacheSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.PrecacheMaterials
// (Defined, Static, Public)
// Parameters:
// class ALevelInfo*              Level                          (Parm)

void UwWeaponManager::STATIC_PrecacheMaterials(class ALevelInfo* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.PrecacheMaterials");

	UwWeaponManager_PrecacheMaterials_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.PrecacheClasses
// (Defined, Static, Public)

void UwWeaponManager::STATIC_PrecacheClasses()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.PrecacheClasses");

	UwWeaponManager_PrecacheClasses_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.GetBaseParam
// (Defined, Event, Public)
// Parameters:
// int                            id                             (Parm)
// class UwWeaponBaseParams*      ReturnValue                    (Parm, OutParm, ReturnParm)

class UwWeaponBaseParams* UwWeaponManager::GetBaseParam(int id)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.GetBaseParam");

	UwWeaponManager_GetBaseParam_Params params;
	params.id = id;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponManager.AddWeaponExParams
// (Defined, Protected)
// Parameters:
// class UBTNetExcelData*         excelWeapon                    (Parm)
// bool                           bCheat                         (OptionalParm, Parm)
// class AwWeapon*                Weapon                         (OptionalParm, Parm)

void UwWeaponManager::AddWeaponExParams(class UBTNetExcelData* excelWeapon, bool bCheat, class AwWeapon* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.AddWeaponExParams");

	UwWeaponManager_AddWeaponExParams_Params params;
	params.excelWeapon = excelWeapon;
	params.bCheat = bCheat;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.AddWeaponParams
// (Defined, Protected)
// Parameters:
// class UBTNetExcelData*         excelWeapon                    (Parm)
// bool                           bCheat                         (OptionalParm, Parm)
// class AwWeapon*                Weapon                         (OptionalParm, Parm)

void UwWeaponManager::AddWeaponParams(class UBTNetExcelData* excelWeapon, bool bCheat, class AwWeapon* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.AddWeaponParams");

	UwWeaponManager_AddWeaponParams_Params params;
	params.excelWeapon = excelWeapon;
	params.bCheat = bCheat;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.LoadWeaponParams
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)
// bool                           bCheat                         (OptionalParm, Parm)
// class AwWeapon*                Weapon                         (OptionalParm, Parm)

void UwWeaponManager::LoadWeaponParams(const struct FString& strExcelFileName, bool bCheat, class AwWeapon* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.LoadWeaponParams");

	UwWeaponManager_LoadWeaponParams_Params params;
	params.strExcelFileName = strExcelFileName;
	params.bCheat = bCheat;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.AddWeaponRecoilParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwWeaponManager::AddWeaponRecoilParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.AddWeaponRecoilParams");

	UwWeaponManager_AddWeaponRecoilParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.LoadWeaponRecoilParams
// (Defined, Public)

void UwWeaponManager::LoadWeaponRecoilParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.LoadWeaponRecoilParams");

	UwWeaponManager_LoadWeaponRecoilParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.GetRes
// (Defined, Public)
// Parameters:
// struct FString                 szRes                          (Parm, NeedCtorLink)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UwWeaponManager::GetRes(const struct FString& szRes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.GetRes");

	UwWeaponManager_GetRes_Params params;
	params.szRes = szRes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponManager.InitWeaponPrecacheClasses
// (Defined, Event, Public)

void UwWeaponManager::InitWeaponPrecacheClasses()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.InitWeaponPrecacheClasses");

	UwWeaponManager_InitWeaponPrecacheClasses_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.LoadWeaponRes
// (Defined, Event, Public)

void UwWeaponManager::LoadWeaponRes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.LoadWeaponRes");

	UwWeaponManager_LoadWeaponRes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.IsUseWeapon_InGame
// (Defined, Public)
// Parameters:
// int                            iGameMode                      (Parm)
// int                            iWeaponID                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwWeaponManager::IsUseWeapon_InGame(int iGameMode, int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.IsUseWeapon_InGame");

	UwWeaponManager_IsUseWeapon_InGame_Params params;
	params.iGameMode = iGameMode;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponManager.DestroyScript
// (Defined, Event, Public)

void UwWeaponManager::DestroyScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.DestroyScript");

	UwWeaponManager_DestroyScript_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponManager.InitScript
// (Defined, Event, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwWeaponManager::InitScript(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponManager.InitScript");

	UwWeaponManager_InitScript_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ObjectPool.Shrink
// (Defined, Simulated, Public)

void UObjectPool::Shrink()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ObjectPool.Shrink");

	UObjectPool_Shrink_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ObjectPool.FreeObjectDupCheck
// (Simulated, Native, Public)
// Parameters:
// class UObject*                 obj                            (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UObjectPool::FreeObjectDupCheck(class UObject* obj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ObjectPool.FreeObjectDupCheck");

	UObjectPool_FreeObjectDupCheck_Params params;
	params.obj = obj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ObjectPool.FreeObject
// (Defined, Simulated, Public)
// Parameters:
// class UObject*                 obj                            (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UObjectPool::FreeObject(class UObject* obj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ObjectPool.FreeObject");

	UObjectPool_FreeObject_Params params;
	params.obj = obj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ObjectPool.AllocateObject
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  ObjectClass                    (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UObjectPool::AllocateObject(class UClass* ObjectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ObjectPool.AllocateObject");

	UObjectPool_AllocateObject_Params params;
	params.ObjectClass = ObjectClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ObjectPool.PopObject
// (Simulated, Native, Public)
// Parameters:
// class UClass*                  ObjectClass                    (Parm)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* UObjectPool::PopObject(class UClass* ObjectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ObjectPool.PopObject");

	UObjectPool_PopObject_Params params;
	params.ObjectClass = ObjectClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.OnEndRound
// (Defined, Public)

void AActor::OnEndRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnEndRound");

	AActor_OnEndRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.OnBeginRound
// (Defined, Public)

void AActor::OnBeginRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnBeginRound");

	AActor_OnBeginRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SunLightDirectionUpdate
// (Defined, Event, Public)
// Parameters:
// struct FVector                 direction                      (Parm)

void AActor::SunLightDirectionUpdate(const struct FVector& direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SunLightDirectionUpdate");

	AActor_SunLightDirectionUpdate_Params params;
	params.direction = direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BlocksShotAt
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::BlocksShotAt(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BlocksShotAt");

	AActor_BlocksShotAt_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PawnBaseDied
// (Public)

void AActor::PawnBaseDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PawnBaseDied");

	AActor_PawnBaseDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RecoverFromHostChange
// (Defined, Public)

void AActor::RecoverFromHostChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RecoverFromHostChange");

	AActor_RecoverFromHostChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetAngleH
// (Defined, Public)
// Parameters:
// struct FVector                 V                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetAngleH(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAngleH");

	AActor_GetAngleH_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetDotH
// (Defined, Public)
// Parameters:
// struct FVector                 V                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetDotH(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDotH");

	AActor_GetDotH_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsStationary
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsStationary");

	AActor_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.InitBot
// (Defined, Public)
// Parameters:
// int                            Grade                          (Parm)

void AActor::InitBot(int Grade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.InitBot");

	AActor_InitBot_Params params;
	params.Grade = Grade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.rpclog
// (Defined, Event, Public)
// Parameters:
// struct FString                 rpc                            (Parm, CoerceParm, NeedCtorLink)

void AActor::rpclog(const struct FString& rpc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.rpclog");

	AActor_rpclog_Params params;
	params.rpc = rpc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.dblog
// (Defined, Event, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)

void AActor::dblog(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.dblog");

	AActor_dblog_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.crlog
// (Defined, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)

void AActor::crlog(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.crlog");

	AActor_crlog_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.clog
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)

void AActor::clog(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.clog");

	AActor_clog_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ctlog
// (Defined, Event, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)

void AActor::ctlog(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ctlog");

	AActor_ctlog_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.alllog
// (Defined, Event, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)

void AActor::alllog(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.alllog");

	AActor_alllog_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.NotifyLocalPlayerTeamReceived
// (Public)

void AActor::NotifyLocalPlayerTeamReceived()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifyLocalPlayerTeamReceived");

	AActor_NotifyLocalPlayerTeamReceived_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.NotifyLocalPlayerDead
// (Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AActor::NotifyLocalPlayerDead(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NotifyLocalPlayerDead");

	AActor_NotifyLocalPlayerDead_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetDelayedDamageInstigatorController
// (Public)
// Parameters:
// class AController*             C                              (Parm)

void AActor::SetDelayedDamageInstigatorController(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDelayedDamageInstigatorController");

	AActor_SetDelayedDamageInstigatorController_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TeamLink
// (Defined, Public)
// Parameters:
// int                            TeamNum                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TeamLink(int TeamNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TeamLink");

	AActor_TeamLink_Params params;
	params.TeamNum = TeamNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SelfTriggered
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SelfTriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SelfTriggered");

	AActor_SelfTriggered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.EffectIsRelevant
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 SpawnLocation                  (Parm)
// bool                           bForceDedicated                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EffectIsRelevant");

	AActor_EffectIsRelevant_Params params;
	params.SpawnLocation = SpawnLocation;
	params.bForceDedicated = bForceDedicated;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CheckMaxEffectDistance
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CheckMaxEffectDistance(class APlayerController* P, const struct FVector& SpawnLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckMaxEffectDistance");

	AActor_CheckMaxEffectDistance_Params params;
	params.P = P;
	params.SpawnLocation = SpawnLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetOverlayMaterial
// (Defined, Simulated, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          Time                           (Parm)
// bool                           bOverride                      (Parm)

void AActor::SetOverlayMaterial(class UMaterial* mat, float Time, bool bOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOverlayMaterial");

	AActor_SetOverlayMaterial_Params params;
	params.mat = mat;
	params.Time = Time;
	params.bOverride = bOverride;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Crash
// (Defined, Static, Public)

void AActor::STATIC_Crash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Crash");

	AActor_Crash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetCollisionExtent
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetCollisionExtent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetCollisionExtent");

	AActor_GetCollisionExtent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.CanSplash
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CanSplash");

	AActor_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayTeleportEffect
// (Public)
// Parameters:
// bool                           bOut                           (Parm)
// bool                           bSound                         (Parm)

void AActor::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayTeleportEffect");

	AActor_PlayTeleportEffect_Params params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsInPain
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsInPain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInPain");

	AActor_IsInPain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsInVolume
// (Defined, Public)
// Parameters:
// class AVolume*                 aVolume                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsInVolume(class AVolume* aVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsInVolume");

	AActor_IsInVolume_Params params;
	params.aVolume = aVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.UntriggerEvent
// (Defined, Public)
// Parameters:
// struct FName                   EventName                      (Parm)
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AActor::UntriggerEvent(const struct FName& EventName, class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UntriggerEvent");

	AActor_UntriggerEvent_Params params;
	params.EventName = EventName;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TriggerEvent
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   EventName                      (Parm)
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AActor::TriggerEvent(const struct FName& EventName, class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TriggerEvent");

	AActor_TriggerEvent_Params params;
	params.EventName = EventName;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Reset
// (Public)

void AActor::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Reset");

	AActor_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StartInterpolation
// (Defined, Simulated, Public)

void AActor::StartInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StartInterpolation");

	AActor_StartInterpolation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TouchingActor
// (Final, Defined, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TouchingActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TouchingActor");

	AActor_TouchingActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.NearSpot
// (Final, Defined, Simulated, Public)
// Parameters:
// struct FVector                 Spot                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::NearSpot(const struct FVector& Spot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.NearSpot");

	AActor_NearSpot_Params params;
	params.Spot = Spot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AActor::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DisplayDebug");

	AActor_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.Actor.GetDebugName
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetDebugName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetDebugName");

	AActor_GetDebugName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetGRI
// (Public)
// Parameters:
// class AGameReplicationInfo*    GRI                            (Parm)

void AActor::SetGRI(class AGameReplicationInfo* GRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetGRI");

	AActor_SetGRI_Params params;
	params.GRI = GRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MatchStarting
// (Public)

void AActor::MatchStarting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MatchStarting");

	AActor_MatchStarting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetLocalString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetLocalString");

	AActor_GetLocalString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetDefaultDisplayProperties
// (Defined, Public)

void AActor::SetDefaultDisplayProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDefaultDisplayProperties");

	AActor_SetDefaultDisplayProperties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetDisplayProperties
// (Defined, Public)
// Parameters:
// TEnumAsByte<ERenderStyle>      NewStyle                       (Parm)
// class UMaterial*               NewTexture                     (Parm)
// bool                           bLighting                      (Parm)

void AActor::SetDisplayProperties(TEnumAsByte<ERenderStyle> NewStyle, class UMaterial* NewTexture, bool bLighting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDisplayProperties");

	AActor_SetDisplayProperties_Params params;
	params.NewStyle = NewStyle;
	params.NewTexture = NewTexture;
	params.bLighting = bLighting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetHumanReadableName");

	AActor_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.POVChanged
// (Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// bool                           bBehindViewChanged             (Parm)

void AActor::POVChanged(class APlayerController* PC, bool bBehindViewChanged)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.POVChanged");

	AActor_POVChanged_Params params;
	params.PC = PC;
	params.bBehindViewChanged = bBehindViewChanged;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BecomeViewTarget
// (Public)

void AActor::BecomeViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BecomeViewTarget");

	AActor_BecomeViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TravelPostAccept
// (Event, Public)

void AActor::TravelPostAccept()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TravelPostAccept");

	AActor_TravelPostAccept_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TravelPreAccept
// (Event, Public)

void AActor::TravelPreAccept()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TravelPreAccept");

	AActor_TravelPreAccept_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CheckForErrors
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckForErrors");

	AActor_CheckForErrors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.HurtRadius
// (Defined, Simulated, Public)
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)

void AActor::HurtRadius(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HurtRadius");

	AActor_HurtRadius_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PrecacheAnnouncer
// (Simulated, Public)
// Parameters:
// class AAnnouncerVoice*         V                              (Parm)
// bool                           bRewardSounds                  (Parm)

void AActor::PrecacheAnnouncer(class AAnnouncerVoice* V, bool bRewardSounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PrecacheAnnouncer");

	AActor_PrecacheAnnouncer_Params params;
	params.V = V;
	params.bRewardSounds = bRewardSounds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UpdateAnnouncements
// (Simulated, Public)

void AActor::UpdateAnnouncements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UpdateAnnouncements");

	AActor_UpdateAnnouncements_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UpdatePrecacheSkeletalMeshes
// (Defined, Simulated, Public)

void AActor::UpdatePrecacheSkeletalMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UpdatePrecacheSkeletalMeshes");

	AActor_UpdatePrecacheSkeletalMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UpdatePrecacheStaticMeshes
// (Defined, Simulated, Public)

void AActor::UpdatePrecacheStaticMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UpdatePrecacheStaticMeshes");

	AActor_UpdatePrecacheStaticMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UpdatePrecacheMaterials
// (Defined, Simulated, Public)

void AActor::UpdatePrecacheMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UpdatePrecacheMaterials");

	AActor_UpdatePrecacheMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostNetBeginPlay
// (Event, Public)

void AActor::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostNetBeginPlay");

	AActor_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetGRIInitialState
// (Defined, Simulated, Event, Public)

void AActor::SetGRIInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetGRIInitialState");

	AActor_SetGRIInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetInitialState
// (Defined, Simulated, Event, Public)

void AActor::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetInitialState");

	AActor_SetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostBeginPlay
// (Event, Public)

void AActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostBeginPlay");

	AActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BroadcastLocalizedMessage
// (Defined, Event, Public)
// Parameters:
// class UClass*                  MessageClass                   (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AActor::BroadcastLocalizedMessage(class UClass* MessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BroadcastLocalizedMessage");

	AActor_BroadcastLocalizedMessage_Params params;
	params.MessageClass = MessageClass;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceBegin
// (Defined, Public)

void AActor::ForceBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceBegin");

	AActor_ForceBegin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreBeginPlay
// (Defined, Event, Public)

void AActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreBeginPlay");

	AActor_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RenderTexture
// (Event, Public)
// Parameters:
// class UScriptedTexture*        Tex                            (Parm)

void AActor::RenderTexture(class UScriptedTexture* Tex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RenderTexture");

	AActor_RenderTexture_Params params;
	params.Tex = Tex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RenderOverlays
// (Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AActor::RenderOverlays(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RenderOverlays");

	AActor_RenderOverlays_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RecoverFromBadStateCode
// (Event, Public)

void AActor::RecoverFromBadStateCode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RecoverFromBadStateCode");

	AActor_RecoverFromBadStateCode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Multiply_ColorFloat
// (Final, Native, Operator, Static, Public)
// Parameters:
// struct FColor                  A                              (Parm)
// float                          B                              (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor AActor::STATIC_Multiply_ColorFloat(const struct FColor& A, float B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Multiply_ColorFloat");

	AActor_Multiply_ColorFloat_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Add_ColorColor
// (Final, Native, Operator, Static, Public)
// Parameters:
// struct FColor                  A                              (Parm)
// struct FColor                  B                              (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor AActor::STATIC_Add_ColorColor(const struct FColor& A, const struct FColor& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Add_ColorColor");

	AActor_Add_ColorColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Multiply_FloatColor
// (Final, Native, Operator, Static, Public)
// Parameters:
// float                          A                              (Parm)
// struct FColor                  B                              (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor AActor::STATIC_Multiply_FloatColor(float A, const struct FColor& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Multiply_FloatColor");

	AActor_Multiply_FloatColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Subtract_ColorColor
// (Final, Native, Operator, Static, Public)
// Parameters:
// struct FColor                  A                              (Parm)
// struct FColor                  B                              (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor AActor::STATIC_Subtract_ColorColor(const struct FColor& A, const struct FColor& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Subtract_ColorColor");

	AActor_Subtract_ColorColor_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IterateObjectArray
// (Final, Iterator, Native, Public)
// Parameters:
// TArray<class UObject*>         ObjectArray                    (Parm, NeedCtorLink)
// class UClass*                  baseClass                      (Parm)
// class UObject*                 Object                         (Parm, OutParm)

void AActor::IterateObjectArray(TArray<class UObject*> ObjectArray, class UClass* baseClass, class UObject** Object)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IterateObjectArray");

	AActor_IterateObjectArray_Params params;
	params.ObjectArray = ObjectArray;
	params.baseClass = baseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Object != nullptr)
		*Object = params.Object;
}


// Function Engine.Actor.IterateActorArray
// (Final, Iterator, Native, Public)
// Parameters:
// TArray<class AActor*>          ActorArray                     (Parm, NeedCtorLink)
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// struct FName                   MatchTag                       (OptionalParm, Parm)

void AActor::IterateActorArray(TArray<class AActor*> ActorArray, class UClass* baseClass, const struct FName& MatchTag, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IterateActorArray");

	AActor_IterateActorArray_Params params;
	params.ActorArray = ActorArray;
	params.baseClass = baseClass;
	params.MatchTag = MatchTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.CollidingActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 loc                            (OptionalParm, Parm)

void AActor::CollidingActors(class UClass* baseClass, float Radius, const struct FVector& loc, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CollidingActors");

	AActor_CollidingActors_Params params;
	params.baseClass = baseClass;
	params.Radius = Radius;
	params.loc = loc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.VisibleCollidingActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 loc                            (OptionalParm, Parm)
// bool                           bIgnoreHidden                  (OptionalParm, Parm)

void AActor::VisibleCollidingActors(class UClass* baseClass, float Radius, const struct FVector& loc, bool bIgnoreHidden, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleCollidingActors");

	AActor_VisibleCollidingActors_Params params;
	params.baseClass = baseClass;
	params.Radius = Radius;
	params.loc = loc;
	params.bIgnoreHidden = bIgnoreHidden;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.VisibleActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (OptionalParm, Parm)
// struct FVector                 loc                            (OptionalParm, Parm)

void AActor::VisibleActors(class UClass* baseClass, float Radius, const struct FVector& loc, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.VisibleActors");

	AActor_VisibleActors_Params params;
	params.baseClass = baseClass;
	params.Radius = Radius;
	params.loc = loc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.RadiusActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// float                          Radius                         (Parm)
// struct FVector                 loc                            (OptionalParm, Parm)

void AActor::RadiusActors(class UClass* baseClass, float Radius, const struct FVector& loc, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RadiusActors");

	AActor_RadiusActors_Params params;
	params.baseClass = baseClass;
	params.Radius = Radius;
	params.loc = loc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.TraceActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// struct FVector                 HitLoc                         (Parm, OutParm)
// struct FVector                 HitNorm                        (Parm, OutParm)
// struct FVector                 End                            (Parm)
// struct FVector                 Start                          (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)

void AActor::TraceActors(class UClass* baseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceActors");

	AActor_TraceActors_Params params;
	params.baseClass = baseClass;
	params.End = End;
	params.Start = Start;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
	if (HitLoc != nullptr)
		*HitLoc = params.HitLoc;
	if (HitNorm != nullptr)
		*HitNorm = params.HitNorm;
}


// Function Engine.Actor.TouchingActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::TouchingActors(class UClass* baseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TouchingActors");

	AActor_TouchingActors_Params params;
	params.baseClass = baseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.BasedActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::BasedActors(class UClass* baseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BasedActors");

	AActor_BasedActors_Params params;
	params.baseClass = baseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.ChildActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AActor::ChildActors(class UClass* baseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChildActors");

	AActor_ChildActors_Params params;
	params.baseClass = baseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.DynamicActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// struct FName                   MatchTag                       (OptionalParm, Parm)

void AActor::DynamicActors(class UClass* baseClass, const struct FName& MatchTag, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DynamicActors");

	AActor_DynamicActors_Params params;
	params.baseClass = baseClass;
	params.MatchTag = MatchTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.AllActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)
// struct FName                   MatchTag                       (OptionalParm, Parm)

void AActor::AllActors(class UClass* baseClass, const struct FName& MatchTag, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllActors");

	AActor_AllActors_Params params;
	params.baseClass = baseClass;
	params.MatchTag = MatchTag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.Actor.MoveCacheEntry
// (Final, Native, Public)
// Parameters:
// struct FString                 Guid                           (Parm, NeedCtorLink)
// struct FString                 NewFilename                    (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::MoveCacheEntry(const struct FString& Guid, const struct FString& NewFilename)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MoveCacheEntry");

	AActor_MoveCacheEntry_Params params;
	params.Guid = Guid;
	params.NewFilename = NewFilename;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetCacheEntry
// (Final, Native, Public)
// Parameters:
// int                            Num                            (Parm)
// struct FString                 Guid                           (Parm, OutParm, NeedCtorLink)
// struct FString                 fileName                       (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::GetCacheEntry(int Num, struct FString* Guid, struct FString* fileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetCacheEntry");

	AActor_GetCacheEntry_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Guid != nullptr)
		*Guid = params.Guid;
	if (fileName != nullptr)
		*fileName = params.fileName;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAllIntDesc
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 MetaClass                      (Parm, NeedCtorLink)
// TArray<struct FString>         Entry                          (Parm, OutParm, NeedCtorLink)
// TArray<struct FString>         Description                    (Parm, OutParm, NeedCtorLink)

void AActor::STATIC_GetAllIntDesc(const struct FString& MetaClass, TArray<struct FString>* Entry, TArray<struct FString>* Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAllIntDesc");

	AActor_GetAllIntDesc_Params params;
	params.MetaClass = MetaClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Entry != nullptr)
		*Entry = params.Entry;
	if (Description != nullptr)
		*Description = params.Description;
}


// Function Engine.Actor.GetAllInt
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 MetaClass                      (Parm, NeedCtorLink)
// TArray<struct FString>         Entries                        (Parm, NeedCtorLink)

void AActor::STATIC_GetAllInt(const struct FString& MetaClass, TArray<struct FString> Entries)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAllInt");

	AActor_GetAllInt_Params params;
	params.MetaClass = MetaClass;
	params.Entries = Entries;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetNextIntDesc
// (Final, Native, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)
// int                            Num                            (Parm)
// struct FString                 Entry                          (Parm, OutParm, NeedCtorLink)
// struct FString                 Description                    (Parm, OutParm, NeedCtorLink)

void AActor::GetNextIntDesc(const struct FString& ClassName, int Num, struct FString* Entry, struct FString* Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetNextIntDesc");

	AActor_GetNextIntDesc_Params params;
	params.ClassName = ClassName;
	params.Num = Num;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Entry != nullptr)
		*Entry = params.Entry;
	if (Description != nullptr)
		*Description = params.Description;
}


// Function Engine.Actor.GetNextInt
// (Final, Native, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)
// int                            Num                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetNextInt(const struct FString& ClassName, int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetNextInt");

	AActor_GetNextInt_Params params;
	params.ClassName = ClassName;
	params.Num = Num;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetURLMap
// (Final, Native, Public)
// Parameters:
// bool                           bIncludeOptions                (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetURLMap(bool bIncludeOptions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetURLMap");

	AActor_GetURLMap_Params params;
	params.bIncludeOptions = bIncludeOptions;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetNextSkin
// (Final, Native, Public)
// Parameters:
// struct FString                 Prefix                         (Parm, NeedCtorLink)
// struct FString                 CurrentSkin                    (Parm, NeedCtorLink)
// int                            Dir                            (Parm)
// struct FString                 SkinName                       (Parm, OutParm, NeedCtorLink)
// struct FString                 SkinDesc                       (Parm, OutParm, NeedCtorLink)

void AActor::GetNextSkin(const struct FString& Prefix, const struct FString& CurrentSkin, int Dir, struct FString* SkinName, struct FString* SkinDesc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetNextSkin");

	AActor_GetNextSkin_Params params;
	params.Prefix = Prefix;
	params.CurrentSkin = CurrentSkin;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SkinName != nullptr)
		*SkinName = params.SkinName;
	if (SkinDesc != nullptr)
		*SkinDesc = params.SkinDesc;
}


// Function Engine.Actor.GetMapName
// (Final, Native, Public)
// Parameters:
// struct FString                 NameEnding                     (Parm, NeedCtorLink)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            Dir                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetMapName(const struct FString& NameEnding, const struct FString& MapName, int Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetMapName");

	AActor_GetMapName_Params params;
	params.NameEnding = NameEnding;
	params.MapName = MapName;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AddToPackageMap
// (Final, Native, Public)
// Parameters:
// struct FString                 PackageName                    (OptionalParm, Parm, NeedCtorLink)

void AActor::AddToPackageMap(const struct FString& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AddToPackageMap");

	AActor_AddToPackageMap_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ResetStaticFilterState
// (Final, Native, Public)

void AActor::ResetStaticFilterState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ResetStaticFilterState");

	AActor_ResetStaticFilterState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BeginPlay
// (Event, Public)

void AActor::BeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BeginPlay");

	AActor_BeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostTeleport
// (Event, Public)
// Parameters:
// class ATeleporter*             OutTeleporter                  (Parm)

void AActor::PostTeleport(class ATeleporter* OutTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTeleport");

	AActor_PostTeleport_Params params;
	params.OutTeleporter = OutTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreTeleport
// (Event, Public)
// Parameters:
// class ATeleporter*             InTeleporter                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PreTeleport(class ATeleporter* InTeleporter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreTeleport");

	AActor_PreTeleport_Params params;
	params.InTeleporter = InTeleporter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SuggestFallVelocity
// (Final, Native, Public)
// Parameters:
// struct FVector                 Destination                    (Parm)
// struct FVector                 Start                          (Parm)
// float                          MaxZ                           (Parm)
// float                          MaxXYSpeed                     (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::SuggestFallVelocity(const struct FVector& Destination, const struct FVector& Start, float MaxZ, float MaxXYSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SuggestFallVelocity");

	AActor_SuggestFallVelocity_Params params;
	params.Destination = Destination;
	params.Start = Start;
	params.MaxZ = MaxZ;
	params.MaxXYSpeed = MaxXYSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayerCanSeeMe
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PlayerCanSeeMe()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayerCanSeeMe");

	AActor_PlayerCanSeeMe_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.MakeNoise
// (Final, Native, Public)
// Parameters:
// float                          Loudness                       (Parm)

void AActor::MakeNoise(float Loudness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MakeNoise");

	AActor_MakeNoise_Params params;
	params.Loudness = Loudness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ForceFeedbackSupported
// (Final, Native, Public)
// Parameters:
// bool                           Enable                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::ForceFeedbackSupported(bool Enable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ForceFeedbackSupported");

	AActor_ForceFeedbackSupported_Params params;
	params.Enable = Enable;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.ChangeBaseParamsFeedbackEffect
// (Final, Native, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)
// float                          DirectionX                     (OptionalParm, Parm)
// float                          DirectionY                     (OptionalParm, Parm)
// float                          Gain                           (OptionalParm, Parm)

void AActor::ChangeBaseParamsFeedbackEffect(const struct FString& EffectName, float DirectionX, float DirectionY, float Gain)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChangeBaseParamsFeedbackEffect");

	AActor_ChangeBaseParamsFeedbackEffect_Params params;
	params.EffectName = EffectName;
	params.DirectionX = DirectionX;
	params.DirectionY = DirectionY;
	params.Gain = Gain;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ChangeSpringFeedbackEffect
// (Final, Native, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)
// float                          CenterX                        (Parm)
// float                          CenterY                        (Parm)

void AActor::ChangeSpringFeedbackEffect(const struct FString& EffectName, float CenterX, float CenterY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ChangeSpringFeedbackEffect");

	AActor_ChangeSpringFeedbackEffect_Params params;
	params.EffectName = EffectName;
	params.CenterX = CenterX;
	params.CenterY = CenterY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopFeedbackEffect
// (Final, Native, Public)
// Parameters:
// struct FString                 EffectName                     (OptionalParm, Parm, NeedCtorLink)

void AActor::StopFeedbackEffect(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopFeedbackEffect");

	AActor_StopFeedbackEffect_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlayFeedbackEffect
// (Final, Native, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)

void AActor::PlayFeedbackEffect(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayFeedbackEffect");

	AActor_PlayFeedbackEffect_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetSoundDuration
// (Final, Native, Public)
// Parameters:
// struct FString                 Sound                          (Parm, NeedCtorLink)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetSoundDuration(const struct FString& Sound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetSoundDuration");

	AActor_GetSoundDuration_Params params;
	params.Sound = Sound;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsSoundPlayingUseID
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SoundID                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsSoundPlayingUseID(int SoundID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsSoundPlayingUseID");

	AActor_IsSoundPlayingUseID_Params params;
	params.SoundID = SoundID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopSoundUseID
// (Final, Simulated, Native, Public)
// Parameters:
// int                            SoundID                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::StopSoundUseID(int SoundID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopSoundUseID");

	AActor_StopSoundUseID_Params params;
	params.SoundID = SoundID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopLoopSoundByActor
// (Final, Simulated, Native, Public)

void AActor::StopLoopSoundByActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopLoopSoundByActor");

	AActor_StopLoopSoundByActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopAllSoundByActor
// (Final, Simulated, Native, Public)

void AActor::StopAllSoundByActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopAllSoundByActor");

	AActor_StopAllSoundByActor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopAllSound
// (Final, Simulated, Native, Public)

void AActor::StopAllSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopAllSound");

	AActor_StopAllSound_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopSound
// (Final, Simulated, Native, Public)
// Parameters:
// TEnumAsByte<ESoundSlot>        Slot                           (Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)

void AActor::StopSound(TEnumAsByte<ESoundSlot> Slot, bool bNoOverride)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopSound");

	AActor_StopSound_Params params;
	params.Slot = Slot;
	params.bNoOverride = bNoOverride;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FmodDemoPlaySound
// (Net, Simulated, Native, Event, Public)
// Parameters:
// struct FString                 SoundName                      (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)

void AActor::FmodDemoPlaySound(const struct FString& SoundName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FmodDemoPlaySound");

	AActor_FmodDemoPlaySound_Params params;
	params.SoundName = SoundName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FmodPlaySoundLocal
// (Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)
// struct FVector                 soundLocation                  (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::FmodPlaySoundLocal(const struct FString& fileName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, const struct FVector& soundLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FmodPlaySoundLocal");

	AActor_FmodPlaySoundLocal_Params params;
	params.fileName = fileName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;
	params.soundLocation = soundLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FmodServerSpecPlaySound
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::FmodServerSpecPlaySound(const struct FString& fileName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FmodServerSpecPlaySound");

	AActor_FmodServerSpecPlaySound_Params params;
	params.fileName = fileName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FmodPlaySoundUseID
// (Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::FmodPlaySoundUseID(const struct FString& fileName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FmodPlaySoundUseID");

	AActor_FmodPlaySoundUseID_Params params;
	params.fileName = fileName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FmodSpecPlaySound
// (Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::FmodSpecPlaySound(const struct FString& fileName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FmodSpecPlaySound");

	AActor_FmodSpecPlaySound_Params params;
	params.fileName = fileName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FmodPlayOwnedSound
// (Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::FmodPlayOwnedSound(const struct FString& fileName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FmodPlayOwnedSound");

	AActor_FmodPlayOwnedSound_Params params;
	params.fileName = fileName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FmodPlaySound
// (Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::FmodPlaySound(const struct FString& fileName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FmodPlaySound");

	AActor_FmodPlaySound_Params params;
	params.fileName = fileName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PostLoadSavedGame
// (Event, Public)

void AActor::PostLoadSavedGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostLoadSavedGame");

	AActor_PostLoadSavedGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PreSaveGame
// (Event, Public)

void AActor::PreSaveGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PreSaveGame");

	AActor_PreSaveGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetTimer
// (Final, Native, Public)
// Parameters:
// float                          NewTimerRate                   (Parm)
// bool                           bLoop                          (Parm)

void AActor::SetTimer(float NewTimerRate, bool bLoop)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetTimer");

	AActor_SetTimer_Params params;
	params.NewTimerRate = NewTimerRate;
	params.bLoop = bLoop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TornOff
// (Event, Public)

void AActor::TornOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TornOff");

	AActor_TornOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroy
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::Destroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroy");

	AActor_Destroy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Spawn
// (Final, Native, Public)
// Parameters:
// class UClass*                  SpawnClass                     (Parm)
// class AActor*                  SpawnOwner                     (OptionalParm, Parm)
// struct FName                   SpawnTag                       (OptionalParm, Parm)
// struct FVector                 SpawnLocation                  (OptionalParm, Parm)
// struct FRotator                SpawnRotation                  (OptionalParm, Parm)
// bool                           bNoCollisionFail               (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bNoCollisionFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Spawn");

	AActor_Spawn_Params params;
	params.SpawnClass = SpawnClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;
	params.bNoCollisionFail = bNoCollisionFail;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TraceThisActorHitPart
// (Final, Native, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// unsigned char                  HitCollisionPart               (Parm, OutParm)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// bool                           bSkipHead                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TraceThisActorHitPart(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, bool bSkipHead, struct FVector* HitLocation, struct FVector* HitNormal, unsigned char* HitCollisionPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceThisActorHitPart");

	AActor_TraceThisActorHitPart_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.Extent = Extent;
	params.bSkipHead = bSkipHead;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitCollisionPart != nullptr)
		*HitCollisionPart = params.HitCollisionPart;

	return params.ReturnValue;
}


// Function Engine.Actor.TraceThisActor
// (Final, Native, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TraceThisActor(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TraceThisActor");

	AActor_TraceThisActor_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;

	return params.ReturnValue;
}


// Function Engine.Actor.FastTrace
// (Final, Native, Public)
// Parameters:
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FastTrace");

	AActor_FastTrace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.MultiTrace
// (Final, Native, Public)
// Parameters:
// class UBtrTraceResult*         BtrResult                      (Parm, OutParm)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// bool                           bTraceActors                   (OptionalParm, Parm)
// bool                           bTraceMaterial                 (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)

void AActor::MultiTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, bool bTraceMaterial, const struct FVector& Extent, class UBtrTraceResult** BtrResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MultiTrace");

	AActor_MultiTrace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.bTraceActors = bTraceActors;
	params.bTraceMaterial = bTraceMaterial;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (BtrResult != nullptr)
		*BtrResult = params.BtrResult;
}


// Function Engine.Actor.Trace
// (Final, Native, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// bool                           bTraceActors                   (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// class UMaterial*               Material                       (OptionalParm, Parm, OutParm)
// TEnumAsByte<ECollisionPartsType> CollPart                       (OptionalParm, Parm, OutParm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material, TEnumAsByte<ECollisionPartsType>* CollPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Trace");

	AActor_Trace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.bTraceActors = bTraceActors;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (Material != nullptr)
		*Material = params.Material;
	if (CollPart != nullptr)
		*CollPart = params.CollPart;

	return params.ReturnValue;
}


// Function Engine.Actor.GetNameFromStr
// (Native, Public)
// Parameters:
// struct FString                 strName                        (Parm, NeedCtorLink)
// struct FName                   retName                        (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::GetNameFromStr(const struct FString& strName, struct FName* retName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetNameFromStr");

	AActor_GetNameFromStr_Params params;
	params.strName = strName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (retName != nullptr)
		*retName = params.retName;

	return params.ReturnValue;
}


// Function Engine.Actor.TakeHeadRoundBullet
// (Net, NetReliable, Event, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// int                            WeaponType                     (Parm)

void AActor::TakeHeadRoundBullet(const struct FVector& HitLocation, int WeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeHeadRoundBullet");

	AActor_TakeHeadRoundBullet_Params params;
	params.HitLocation = HitLocation;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HealDamage
// (Public)
// Parameters:
// int                            Amount                         (Parm)
// class AController*             Healer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HealDamage");

	AActor_HealDamage_Params params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TakeDamage
// (Event, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   EventInstigator                (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AActor::TakeDamage(int Damage, class APawn* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TakeDamage");

	AActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.EventInstigator = EventInstigator;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KilledBy
// (Event, Public)
// Parameters:
// class APawn*                   EventInstigator                (Parm)

void AActor::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KilledBy");

	AActor_KilledBy_Params params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FellOutOfWorld
// (Defined, Simulated, Event, Public)
// Parameters:
// TEnumAsByte<EeKillZType>       KillType                       (Parm)

void AActor::FellOutOfWorld(TEnumAsByte<EeKillZType> KillType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FellOutOfWorld");

	AActor_FellOutOfWorld_Params params;
	params.KillType = KillType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UsedBy
// (Event, Public)
// Parameters:
// class APawn*                   User                           (Parm)

void AActor::UsedBy(class APawn* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UsedBy");

	AActor_UsedBy_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EndedRotation
// (Event, Public)

void AActor::EndedRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EndedRotation");

	AActor_EndedRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FinishedInterpolation
// (Defined, Event, Public)

void AActor::FinishedInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishedInterpolation");

	AActor_FinishedInterpolation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RanInto
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RanInto");

	AActor_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachedBy
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachedBy");

	AActor_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EncroachingOn
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EncroachingOn");

	AActor_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SpecialHandling
// (Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AActor::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SpecialHandling");

	AActor_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Detach
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Detach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Detach");

	AActor_Detach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Attach
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Attach(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Attach");

	AActor_Attach_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BaseChange
// (Event, Public)

void AActor::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BaseChange");

	AActor_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Bump
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Bump(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Bump");

	AActor_Bump_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnTouch
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnTouch");

	AActor_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostTouch
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostTouch");

	AActor_PostTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Touch
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Touch");

	AActor_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PhysicsVolumeChange
// (Event, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)

void AActor::PhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PhysicsVolumeChange");

	AActor_PhysicsVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ZoneChange
// (Event, Public)
// Parameters:
// class AZoneInfo*               NewZone                        (Parm)

void AActor::ZoneChange(class AZoneInfo* NewZone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ZoneChange");

	AActor_ZoneChange_Params params;
	params.NewZone = NewZone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Landed
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)

void AActor::Landed(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Landed");

	AActor_Landed_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Falling
// (Event, Public)

void AActor::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Falling");

	AActor_Falling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  HitWall                        (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void AActor::HitWall(const struct FVector& HitNormal, class AActor* HitWall, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HitWall");

	AActor_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.HitWall = HitWall;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Timer
// (Event, Public)

void AActor::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Timer");

	AActor_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TimerPop
// (Simulated, Public)
// Parameters:
// class AVolumeTimer*            t                              (Parm)

void AActor::TimerPop(class AVolumeTimer* t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TimerPop");

	AActor_TimerPop_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.EndEvent
// (Event, Public)

void AActor::EndEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EndEvent");

	AActor_EndEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BeginEvent
// (Event, Public)

void AActor::BeginEvent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BeginEvent");

	AActor_BeginEvent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnTrigger
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AActor::UnTrigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnTrigger");

	AActor_UnTrigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Trigger
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AActor::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Trigger");

	AActor_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClientTrigger
// (Event, Public)

void AActor::ClientTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClientTrigger");

	AActor_ClientTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PostNetReceive
// (Event, Public)

void AActor::PostNetReceive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PostNetReceive");

	AActor_PostNetReceive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Tick
// (Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AActor::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Tick");

	AActor_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LostChild
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::LostChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LostChild");

	AActor_LostChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GainedChild
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::GainedChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GainedChild");

	AActor_GainedChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CheckLifeSpanReplicated
// (Defined, Simulated, Public)

void AActor::CheckLifeSpanReplicated()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CheckLifeSpanReplicated");

	AActor_CheckLifeSpanReplicated_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.RegisterDestroyListener
// (Defined, Public)
// Parameters:
// class UObject*                 o                              (Parm)

void AActor::RegisterDestroyListener(class UObject* o)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.RegisterDestroyListener");

	AActor_RegisterDestroyListener_Params params;
	params.o = o;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Destroyed
// (Defined, Event, Public)

void AActor::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Destroyed");

	AActor_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsPenetrate
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsPenetrate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPenetrate");

	AActor_IsPenetrate_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetMusicDuration
// (Final, Native, Public)
// Parameters:
// int                            SongHandle                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::GetMusicDuration(int SongHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetMusicDuration");

	AActor_GetMusicDuration_Params params;
	params.SongHandle = SongHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopAllMusicAndClearQueue
// (Final, Native, Public)
// Parameters:
// float                          FadeOutTime                    (OptionalParm, Parm)

void AActor::StopAllMusicAndClearQueue(float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopAllMusicAndClearQueue");

	AActor_StopAllMusicAndClearQueue_Params params;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopAllMusic
// (Final, Native, Public)
// Parameters:
// float                          FadeOutTime                    (OptionalParm, Parm)

void AActor::StopAllMusic(float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopAllMusic");

	AActor_StopAllMusic_Params params;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopMusic
// (Final, Native, Public)
// Parameters:
// int                            SongHandle                     (Parm)
// float                          FadeOutTime                    (OptionalParm, Parm)

void AActor::StopMusic(int SongHandle, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopMusic");

	AActor_StopMusic_Params params;
	params.SongHandle = SongHandle;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsPlayingMusic
// (Final, Native, Public)
// Parameters:
// int                            SongHandle                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsPlayingMusic(int SongHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPlayingMusic");

	AActor_IsPlayingMusic_Params params;
	params.SongHandle = SongHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayMusic
// (Final, Native, Public)
// Parameters:
// struct FString                 Song                           (Parm, NeedCtorLink)
// float                          FadeInTime                     (OptionalParm, Parm)
// float                          InitialSeekTime                (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::PlayMusic(const struct FString& Song, float FadeInTime, float InitialSeekTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayMusic");

	AActor_PlayMusic_Params params;
	params.Song = Song;
	params.FadeInTime = FadeInTime;
	params.InitialSeekTime = InitialSeekTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PauseStream
// (Final, Native, Public)
// Parameters:
// int                            Handle                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PauseStream(int Handle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PauseStream");

	AActor_PauseStream_Params params;
	params.Handle = Handle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AdjustVolume
// (Final, Native, Public)
// Parameters:
// int                            Handle                         (Parm)
// float                          NewVolume                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::AdjustVolume(int Handle, float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AdjustVolume");

	AActor_AdjustVolume_Params params;
	params.Handle = Handle;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SeekStream
// (Final, Native, Public)
// Parameters:
// int                            Handle                         (Parm)
// float                          Seconds                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::SeekStream(int Handle, float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SeekStream");

	AActor_SeekStream_Params params;
	params.Handle = Handle;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopStream
// (Final, Native, Public)
// Parameters:
// int                            Handle                         (Parm)
// float                          FadeOutTime                    (OptionalParm, Parm)

void AActor::StopStream(int Handle, float FadeOutTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopStream");

	AActor_StopStream_Params params;
	params.Handle = Handle;
	params.FadeOutTime = FadeOutTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlayStream
// (Final, Native, Public)
// Parameters:
// struct FString                 Song                           (Parm, NeedCtorLink)
// bool                           UseMusicVolume                 (OptionalParm, Parm)
// float                          Volume                         (OptionalParm, Parm)
// float                          FadeInTime                     (OptionalParm, Parm)
// float                          SeekTime                       (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::PlayStream(const struct FString& Song, bool UseMusicVolume, float Volume, float FadeInTime, float SeekTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayStream");

	AActor_PlayStream_Params params;
	params.Song = Song;
	params.UseMusicVolume = UseMusicVolume;
	params.Volume = Volume;
	params.FadeInTime = FadeInTime;
	params.SeekTime = SeekTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AllowMusicPlayback
// (Final, Native, Public)
// Parameters:
// bool                           Allow                          (Parm)

void AActor::AllowMusicPlayback(bool Allow)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AllowMusicPlayback");

	AActor_AllowMusicPlayback_Params params;
	params.Allow = Allow;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.UnClock
// (Final, Native, Public)
// Parameters:
// float                          Time                           (Parm, OutParm)

void AActor::UnClock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UnClock");

	AActor_UnClock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.Clock
// (Final, Native, Public)
// Parameters:
// float                          Time                           (Parm, OutParm)

void AActor::Clock(float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Clock");

	AActor_Clock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.Actor.KUpdateState
// (Event, Public)
// Parameters:
// struct FKRigidBodyState        NewState                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::KUpdateState(struct FKRigidBodyState* NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KUpdateState");

	AActor_KUpdateState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewState != nullptr)
		*NewState = params.NewState;

	return params.ReturnValue;
}


// Function Engine.Actor.KApplyForce
// (Event, Public)
// Parameters:
// struct FVector                 Force                          (Parm, OutParm)
// struct FVector                 Torque                         (Parm, OutParm)

void AActor::KApplyForce(struct FVector* Force, struct FVector* Torque)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KApplyForce");

	AActor_KApplyForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Force != nullptr)
		*Force = params.Force;
	if (Torque != nullptr)
		*Torque = params.Torque;
}


// Function Engine.Actor.KSkelConvulse
// (Event, Public)

void AActor::KSkelConvulse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSkelConvulse");

	AActor_KSkelConvulse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KVelDropBelow
// (Event, Public)

void AActor::KVelDropBelow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KVelDropBelow");

	AActor_KVelDropBelow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KImpact
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 pos                            (Parm)
// struct FVector                 impactVel                      (Parm)
// struct FVector                 impactNorm                     (Parm)

void AActor::KImpact(class AActor* Other, const struct FVector& pos, const struct FVector& impactVel, const struct FVector& impactNorm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KImpact");

	AActor_KImpact_Params params;
	params.Other = Other;
	params.pos = pos;
	params.impactVel = impactVel;
	params.impactNorm = impactNorm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KIsRagdollAvailable
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::KIsRagdollAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KIsRagdollAvailable");

	AActor_KIsRagdollAvailable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KMakeRagdollAvailable
// (Final, Native, Public)

void AActor::KMakeRagdollAvailable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KMakeRagdollAvailable");

	AActor_KMakeRagdollAvailable_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KRemoveAllBoneLifters
// (Final, Native, Public)

void AActor::KRemoveAllBoneLifters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KRemoveAllBoneLifters");

	AActor_KRemoveAllBoneLifters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KRemoveLifterFromBone
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)

void AActor::KRemoveLifterFromBone(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KRemoveLifterFromBone");

	AActor_KRemoveLifterFromBone_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KAddBoneLifter
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FInterpCurve            LiftVel                        (Parm, NeedCtorLink)
// float                          LateralFriction                (Parm)
// struct FInterpCurve            Softness                       (Parm, NeedCtorLink)

void AActor::KAddBoneLifter(const struct FName& BoneName, const struct FInterpCurve& LiftVel, float LateralFriction, const struct FInterpCurve& Softness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KAddBoneLifter");

	AActor_KAddBoneLifter_Params params;
	params.BoneName = BoneName;
	params.LiftVel = LiftVel;
	params.LateralFriction = LateralFriction;
	params.Softness = Softness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KScaleJointLimits
// (Final, Native, Public)
// Parameters:
// float                          Scale                          (Parm)
// float                          stiffness                      (Parm)

void AActor::KScaleJointLimits(float Scale, float stiffness)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KScaleJointLimits");

	AActor_KScaleJointLimits_Params params;
	params.Scale = Scale;
	params.stiffness = stiffness;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KFreezeRagdoll
// (Final, Native, Public)

void AActor::KFreezeRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KFreezeRagdoll");

	AActor_KFreezeRagdoll_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetSkelMass
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::KGetSkelMass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetSkelMass");

	AActor_KGetSkelMass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KSetSkelVel
// (Final, Native, Public)
// Parameters:
// struct FVector                 Velocity                       (Parm)
// struct FVector                 AngVelocity                    (OptionalParm, Parm)
// bool                           AddToCurrent                   (OptionalParm, Parm)

void AActor::KSetSkelVel(const struct FVector& Velocity, const struct FVector& AngVelocity, bool AddToCurrent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetSkelVel");

	AActor_KSetSkelVel_Params params;
	params.Velocity = Velocity;
	params.AngVelocity = AngVelocity;
	params.AddToCurrent = AddToCurrent;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KEnableCollision
// (Final, Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::KEnableCollision(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KEnableCollision");

	AActor_KEnableCollision_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KDisableCollision
// (Final, Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AActor::KDisableCollision(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KDisableCollision");

	AActor_KDisableCollision_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetActorGravScale
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::KGetActorGravScale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetActorGravScale");

	AActor_KGetActorGravScale_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KSetActorGravScale
// (Final, Native, Public)
// Parameters:
// float                          ActorGravScale                 (Parm)

void AActor::KSetActorGravScale(float ActorGravScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetActorGravScale");

	AActor_KSetActorGravScale_Params params;
	params.ActorGravScale = ActorGravScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KSetBlockKarma
// (Final, Native, Public)
// Parameters:
// bool                           newBlock                       (Parm)

void AActor::KSetBlockKarma(bool newBlock)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetBlockKarma");

	AActor_KSetBlockKarma_Params params;
	params.newBlock = newBlock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KSetStayUprightParams
// (Final, Native, Public)
// Parameters:
// float                          stiffness                      (Parm)
// float                          damping                        (Parm)

void AActor::KSetStayUprightParams(float stiffness, float damping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetStayUprightParams");

	AActor_KSetStayUprightParams_Params params;
	params.stiffness = stiffness;
	params.damping = damping;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KSetStayUpright
// (Final, Native, Public)
// Parameters:
// bool                           stayUpright                    (Parm)
// bool                           allowRotate                    (Parm)

void AActor::KSetStayUpright(bool stayUpright, bool allowRotate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetStayUpright");

	AActor_KSetStayUpright_Params params;
	params.stayUpright = stayUpright;
	params.allowRotate = allowRotate;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KAddAngularImpulse
// (Final, Native, Public)
// Parameters:
// struct FVector                 AngImpulse                     (Parm)

void AActor::KAddAngularImpulse(const struct FVector& AngImpulse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KAddAngularImpulse");

	AActor_KAddAngularImpulse_Params params;
	params.AngImpulse = AngImpulse;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KAddImpulse
// (Final, Native, Public)
// Parameters:
// struct FVector                 Impulse                        (Parm)
// struct FVector                 Position                       (Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void AActor::KAddImpulse(const struct FVector& Impulse, const struct FVector& Position, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KAddImpulse");

	AActor_KAddImpulse_Params params;
	params.Impulse = Impulse;
	params.Position = Position;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KIsAwake
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::KIsAwake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KIsAwake");

	AActor_KIsAwake_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KWake
// (Final, Native, Public)

void AActor::KWake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KWake");

	AActor_KWake_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetImpactThreshold
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::KGetImpactThreshold()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetImpactThreshold");

	AActor_KGetImpactThreshold_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KSetImpactThreshold
// (Final, Native, Public)
// Parameters:
// float                          thresh                         (Parm)

void AActor::KSetImpactThreshold(float thresh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetImpactThreshold");

	AActor_KSetImpactThreshold_Params params;
	params.thresh = thresh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetCOMPosition
// (Final, Native, Public)
// Parameters:
// struct FVector                 pos                            (Parm, OutParm)

void AActor::KGetCOMPosition(struct FVector* pos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetCOMPosition");

	AActor_KGetCOMPosition_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (pos != nullptr)
		*pos = params.pos;
}


// Function Engine.Actor.KGetCOMOffset
// (Final, Native, Public)
// Parameters:
// struct FVector                 offset                         (Parm, OutParm)

void AActor::KGetCOMOffset(struct FVector* offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetCOMOffset");

	AActor_KGetCOMOffset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (offset != nullptr)
		*offset = params.offset;
}


// Function Engine.Actor.KSetCOMOffset
// (Final, Native, Public)
// Parameters:
// struct FVector                 offset                         (Parm)

void AActor::KSetCOMOffset(const struct FVector& offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetCOMOffset");

	AActor_KSetCOMOffset_Params params;
	params.offset = offset;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetRestitution
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::KGetRestitution()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetRestitution");

	AActor_KGetRestitution_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KSetRestitution
// (Final, Native, Public)
// Parameters:
// float                          rest                           (Parm)

void AActor::KSetRestitution(float rest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetRestitution");

	AActor_KSetRestitution_Params params;
	params.rest = rest;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetFriction
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::KGetFriction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetFriction");

	AActor_KGetFriction_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KSetFriction
// (Final, Native, Public)
// Parameters:
// float                          friction                       (Parm)

void AActor::KSetFriction(float friction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetFriction");

	AActor_KSetFriction_Params params;
	params.friction = friction;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetDampingProps
// (Final, Native, Public)
// Parameters:
// float                          lindamp                        (Parm, OutParm)
// float                          angdamp                        (Parm, OutParm)

void AActor::KGetDampingProps(float* lindamp, float* angdamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetDampingProps");

	AActor_KGetDampingProps_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (lindamp != nullptr)
		*lindamp = params.lindamp;
	if (angdamp != nullptr)
		*angdamp = params.angdamp;
}


// Function Engine.Actor.KSetDampingProps
// (Final, Native, Public)
// Parameters:
// float                          lindamp                        (Parm)
// float                          angdamp                        (Parm)

void AActor::KSetDampingProps(float lindamp, float angdamp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetDampingProps");

	AActor_KSetDampingProps_Params params;
	params.lindamp = lindamp;
	params.angdamp = angdamp;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetInertiaTensor
// (Final, Native, Public)
// Parameters:
// struct FVector                 it1                            (Parm, OutParm)
// struct FVector                 it2                            (Parm, OutParm)

void AActor::KGetInertiaTensor(struct FVector* it1, struct FVector* it2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetInertiaTensor");

	AActor_KGetInertiaTensor_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (it1 != nullptr)
		*it1 = params.it1;
	if (it2 != nullptr)
		*it2 = params.it2;
}


// Function Engine.Actor.KSetInertiaTensor
// (Final, Native, Public)
// Parameters:
// struct FVector                 it1                            (Parm)
// struct FVector                 it2                            (Parm)

void AActor::KSetInertiaTensor(const struct FVector& it1, const struct FVector& it2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetInertiaTensor");

	AActor_KSetInertiaTensor_Params params;
	params.it1 = it1;
	params.it2 = it2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetMass
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AActor::KGetMass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetMass");

	AActor_KGetMass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KSetMass
// (Final, Native, Public)
// Parameters:
// float                          Mass                           (Parm)

void AActor::KSetMass(float Mass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetMass");

	AActor_KSetMass_Params params;
	params.Mass = Mass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KRBVecFromVector
// (Final, Native, Public)
// Parameters:
// struct FVector                 V                              (Parm)
// struct FKRBVec                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FKRBVec AActor::KRBVecFromVector(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KRBVecFromVector");

	AActor_KRBVecFromVector_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KRBVecToVector
// (Final, Native, Public)
// Parameters:
// struct FKRBVec                 RBvec                          (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::KRBVecToVector(const struct FKRBVec& RBvec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KRBVecToVector");

	AActor_KRBVecToVector_Params params;
	params.RBvec = RBvec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KDrawRigidBodyState
// (Final, Native, Public)
// Parameters:
// struct FKRigidBodyState        RBstate                        (Parm)
// bool                           AltColour                      (Parm)

void AActor::KDrawRigidBodyState(const struct FKRigidBodyState& RBstate, bool AltColour)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KDrawRigidBodyState");

	AActor_KDrawRigidBodyState_Params params;
	params.RBstate = RBstate;
	params.AltColour = AltColour;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetRigidBodyState
// (Final, Native, Public)
// Parameters:
// struct FKRigidBodyState        RBstate                        (Parm, OutParm)

void AActor::KGetRigidBodyState(struct FKRigidBodyState* RBstate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetRigidBodyState");

	AActor_KGetRigidBodyState_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RBstate != nullptr)
		*RBstate = params.RBstate;
}


// Function Engine.Actor.KGetRBQuaternion
// (Final, Native, Public)
// Parameters:
// struct FQuat                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FQuat AActor::KGetRBQuaternion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetRBQuaternion");

	AActor_KGetRBQuaternion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.KSetSimParams
// (Final, Native, Public)
// Parameters:
// struct FKSimParams             SimParams                      (Parm)

void AActor::KSetSimParams(const struct FKSimParams& SimParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KSetSimParams");

	AActor_KSetSimParams_Params params;
	params.SimParams = SimParams;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.KGetSimParams
// (Final, Native, Public)
// Parameters:
// struct FKSimParams             SimParams                      (Parm, OutParm)

void AActor::KGetSimParams(struct FKSimParams* SimParams)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.KGetSimParams");

	AActor_KGetSimParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SimParams != nullptr)
		*SimParams = params.SimParams;
}


// Function Engine.Actor.OnlyAffectPawns
// (Final, Native, Public)
// Parameters:
// bool                           B                              (Parm)

void AActor::OnlyAffectPawns(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.OnlyAffectPawns");

	AActor_OnlyAffectPawns_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetPhysics
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)

void AActor::SetPhysics(TEnumAsByte<EPhysics> newPhysics)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetPhysics");

	AActor_SetPhysics_Params params;
	params.newPhysics = newPhysics;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FinishInterpolation
// (Final, Latent, Native, Public)

void AActor::FinishInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishInterpolation");

	AActor_FinishInterpolation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DebugUnclock
// (Final, Native, Public)

void AActor::DebugUnclock()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugUnclock");

	AActor_DebugUnclock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DebugClock
// (Final, Native, Public)

void AActor::DebugClock()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DebugClock");

	AActor_DebugClock_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ClearStayingDebugLines
// (Final, Native, Public)

void AActor::ClearStayingDebugLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ClearStayingDebugLines");

	AActor_ClearStayingDebugLines_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugSphere
// (Final, Native, Public)
// Parameters:
// struct FVector                 Base                           (Parm)
// float                          Radius                         (Parm)
// int                            NumDivisions                   (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)

void AActor::DrawDebugSphere(const struct FVector& Base, float Radius, int NumDivisions, unsigned char R, unsigned char G, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugSphere");

	AActor_DrawDebugSphere_Params params;
	params.Base = Base;
	params.Radius = Radius;
	params.NumDivisions = NumDivisions;
	params.R = R;
	params.G = G;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugCircle
// (Final, Native, Public)
// Parameters:
// struct FVector                 Base                           (Parm)
// struct FVector                 X                              (Parm)
// struct FVector                 Y                              (Parm)
// float                          Radius                         (Parm)
// int                            NumSides                       (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)

void AActor::DrawDebugCircle(const struct FVector& Base, const struct FVector& X, const struct FVector& Y, float Radius, int NumSides, unsigned char R, unsigned char G, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugCircle");

	AActor_DrawDebugCircle_Params params;
	params.Base = Base;
	params.X = X;
	params.Y = Y;
	params.Radius = Radius;
	params.NumSides = NumSides;
	params.R = R;
	params.G = G;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawStayingDebugLine
// (Final, Native, Public)
// Parameters:
// struct FVector                 LineStart                      (Parm)
// struct FVector                 LineEnd                        (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)

void AActor::DrawStayingDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawStayingDebugLine");

	AActor_DrawStayingDebugLine_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.R = R;
	params.G = G;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DrawDebugLine
// (Final, Native, Public)
// Parameters:
// struct FVector                 LineStart                      (Parm)
// struct FVector                 LineEnd                        (Parm)
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)

void AActor::DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, unsigned char R, unsigned char G, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DrawDebugLine");

	AActor_DrawDebugLine_Params params;
	params.LineStart = LineStart;
	params.LineEnd = LineEnd;
	params.R = R;
	params.G = G;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetRenderBoundingSphere
// (Final, Native, Public)
// Parameters:
// struct FPlane                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FPlane AActor::GetRenderBoundingSphere()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRenderBoundingSphere");

	AActor_GetRenderBoundingSphere_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetUrlOption
// (Final, Native, Public)
// Parameters:
// struct FString                 Option                         (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetUrlOption(const struct FString& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetUrlOption");

	AActor_GetUrlOption_Params params;
	params.Option = Option;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.UpdateURL
// (Final, Native, Public)
// Parameters:
// struct FString                 NewOption                      (Parm, NeedCtorLink)
// struct FString                 NewValue                       (Parm, NeedCtorLink)
// bool                           bSaveDefault                   (Parm)

void AActor::UpdateURL(const struct FString& NewOption, const struct FString& NewValue, bool bSaveDefault)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.UpdateURL");

	AActor_UpdateURL_Params params;
	params.NewOption = NewOption;
	params.NewValue = NewValue;
	params.bSaveDefault = bSaveDefault;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetClosestBone
// (Final, Native, Public)
// Parameters:
// struct FVector                 loc                            (Parm)
// struct FVector                 ray                            (Parm)
// float                          boneDist                       (Parm, OutParm)
// struct FName                   BiasBone                       (OptionalParm, Parm)
// float                          BiasDistance                   (OptionalParm, Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName AActor::GetClosestBone(const struct FVector& loc, const struct FVector& ray, const struct FName& BiasBone, float BiasDistance, float* boneDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetClosestBone");

	AActor_GetClosestBone_Params params;
	params.loc = loc;
	params.ray = ray;
	params.BiasBone = BiasBone;
	params.BiasDistance = BiasDistance;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (boneDist != nullptr)
		*boneDist = params.boneDist;

	return params.ReturnValue;
}


// Function Engine.Actor.AnimIsInGroup
// (Final, Native, Public)
// Parameters:
// int                            Channel                        (Parm)
// struct FName                   GroupName                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::AnimIsInGroup(int Channel, const struct FName& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimIsInGroup");

	AActor_AnimIsInGroup_Params params;
	params.Channel = Channel;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetAnimParams
// (Final, Native, Public)
// Parameters:
// int                            Channel                        (Parm)
// struct FName                   OutSeqName                     (Parm, OutParm)
// float                          OutAnimFrame                   (Parm, OutParm)
// float                          OutAnimRate                    (Parm, OutParm)

void AActor::GetAnimParams(int Channel, struct FName* OutSeqName, float* OutAnimFrame, float* OutAnimRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetAnimParams");

	AActor_GetAnimParams_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutSeqName != nullptr)
		*OutSeqName = params.OutSeqName;
	if (OutAnimFrame != nullptr)
		*OutAnimFrame = params.OutAnimFrame;
	if (OutAnimRate != nullptr)
		*OutAnimRate = params.OutAnimRate;
}


// Function Engine.Actor.SetBoneRotation
// (Final, Simulated, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FRotator                BoneTurn                       (OptionalParm, Parm)
// int                            Space                          (OptionalParm, Parm)
// float                          Alpha                          (OptionalParm, Parm)

void AActor::SetBoneRotation(const struct FName& BoneName, const struct FRotator& BoneTurn, int Space, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBoneRotation");

	AActor_SetBoneRotation_Params params;
	params.BoneName = BoneName;
	params.BoneTurn = BoneTurn;
	params.Space = Space;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBoneLocation
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FVector                 BoneTrans                      (OptionalParm, Parm)
// float                          Alpha                          (OptionalParm, Parm)

void AActor::SetBoneLocation(const struct FName& BoneName, const struct FVector& BoneTrans, float Alpha)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBoneLocation");

	AActor_SetBoneLocation_Params params;
	params.BoneName = BoneName;
	params.BoneTrans = BoneTrans;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBoneDirection
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FRotator                BoneTurn                       (Parm)
// struct FVector                 BoneTrans                      (OptionalParm, Parm)
// float                          Alpha                          (OptionalParm, Parm)
// int                            Space                          (OptionalParm, Parm)

void AActor::SetBoneDirection(const struct FName& BoneName, const struct FRotator& BoneTurn, const struct FVector& BoneTrans, float Alpha, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBoneDirection");

	AActor_SetBoneDirection_Params params;
	params.BoneName = BoneName;
	params.BoneTurn = BoneTurn;
	params.BoneTrans = BoneTrans;
	params.Alpha = Alpha;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBoneScale
// (Final, Native, Public)
// Parameters:
// int                            Slot                           (Parm)
// float                          BoneScale                      (OptionalParm, Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)

void AActor::SetBoneScale(int Slot, float BoneScale, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBoneScale");

	AActor_SetBoneScale_Params params;
	params.Slot = Slot;
	params.BoneScale = BoneScale;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LockRootMotion
// (Final, Native, Public)
// Parameters:
// int                            Lock                           (Parm)

void AActor::LockRootMotion(int Lock)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LockRootMotion");

	AActor_LockRootMotion_Params params;
	params.Lock = Lock;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.DetachFromBone
// (Final, Native, Public)
// Parameters:
// class AActor*                  Attachment                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::DetachFromBone(class AActor* Attachment)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.DetachFromBone");

	AActor_DetachFromBone_Params params;
	params.Attachment = Attachment;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AttachToBone
// (Final, Native, Public)
// Parameters:
// class AActor*                  Attachment                     (Parm)
// struct FName                   BoneName                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::AttachToBone(class AActor* Attachment, const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AttachToBone");

	AActor_AttachToBone_Params params;
	params.Attachment = Attachment;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetRootRotationDelta
// (Final, Native, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AActor::GetRootRotationDelta()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRootRotationDelta");

	AActor_GetRootRotationDelta_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetRootLocationDelta
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetRootLocationDelta()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRootLocationDelta");

	AActor_GetRootLocationDelta_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetRootRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AActor::GetRootRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRootRotation");

	AActor_GetRootRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetRootLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AActor::GetRootLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetRootLocation");

	AActor_GetRootLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBoneRotation
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// int                            Space                          (OptionalParm, Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AActor::GetBoneRotation(const struct FName& BoneName, int Space)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBoneRotation");

	AActor_GetBoneRotation_Params params;
	params.BoneName = BoneName;
	params.Space = Space;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetBoneCoords
// (Final, Native, Public)
// Parameters:
// struct FName                   BoneName                       (Parm)
// struct FCoords                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoords AActor::GetBoneCoords(const struct FName& BoneName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetBoneCoords");

	AActor_GetBoneCoords_Params params;
	params.BoneName = BoneName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.AnimBlendToAlpha
// (Final, Native, Public)
// Parameters:
// int                            Stage                          (Parm)
// float                          TargetAlpha                    (Parm)
// float                          TimeInterval                   (Parm)

void AActor::AnimBlendToAlpha(int Stage, float TargetAlpha, float TimeInterval)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimBlendToAlpha");

	AActor_AnimBlendToAlpha_Params params;
	params.Stage = Stage;
	params.TargetAlpha = TargetAlpha;
	params.TimeInterval = TimeInterval;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AnimBlendParams
// (Final, Native, Public)
// Parameters:
// int                            Stage                          (Parm)
// float                          BlendAlpha                     (OptionalParm, Parm)
// float                          InTime                         (OptionalParm, Parm)
// float                          OutTime                        (OptionalParm, Parm)
// struct FName                   BoneName                       (OptionalParm, Parm)
// bool                           bGlobalPose                    (OptionalParm, Parm)

void AActor::AnimBlendParams(int Stage, float BlendAlpha, float InTime, float OutTime, const struct FName& BoneName, bool bGlobalPose)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimBlendParams");

	AActor_AnimBlendParams_Params params;
	params.Stage = Stage;
	params.BlendAlpha = BlendAlpha;
	params.InTime = InTime;
	params.OutTime = OutTime;
	params.BoneName = BoneName;
	params.bGlobalPose = bGlobalPose;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.BoneRefresh
// (Final, Native, Public)

void AActor::BoneRefresh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.BoneRefresh");

	AActor_BoneRefresh_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LinkMesh
// (Final, Simulated, Native, Public)
// Parameters:
// class UMesh*                   NewMesh                        (Parm)
// bool                           bKeepAnim                      (OptionalParm, Parm)

void AActor::LinkMesh(class UMesh* NewMesh, bool bKeepAnim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LinkMesh");

	AActor_LinkMesh_Params params;
	params.NewMesh = NewMesh;
	params.bKeepAnim = bKeepAnim;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LinkSkelAnim
// (Final, Simulated, Native, Public)
// Parameters:
// class UMeshAnimation*          Anim                           (Parm)
// class UMesh*                   NewMesh                        (OptionalParm, Parm)

void AActor::LinkSkelAnim(class UMeshAnimation* Anim, class UMesh* NewMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LinkSkelAnim");

	AActor_LinkSkelAnim_Params params;
	params.Anim = Anim;
	params.NewMesh = NewMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.GetNotifyChannel
// (Final, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AActor::GetNotifyChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetNotifyChannel");

	AActor_GetNotifyChannel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.EnableChannelNotify
// (Final, Native, Public)
// Parameters:
// int                            Channel                        (Parm)
// int                            Switch                         (Parm)

void AActor::EnableChannelNotify(int Channel, int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.EnableChannelNotify");

	AActor_EnableChannelNotify_Params params;
	params.Channel = Channel;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AnimEnd
// (Event, Public)
// Parameters:
// int                            Channel                        (Parm)

void AActor::AnimEnd(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimEnd");

	AActor_AnimEnd_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.LIPSincAnimEnd
// (Event, Public)

void AActor::LIPSincAnimEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LIPSincAnimEnd");

	AActor_LIPSincAnimEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CurrentLIPSincAnim
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::CurrentLIPSincAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CurrentLIPSincAnim");

	AActor_CurrentLIPSincAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsPlayingLIPSincAnim
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsPlayingLIPSincAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsPlayingLIPSincAnim");

	AActor_IsPlayingLIPSincAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.HasLIPSincAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   LIPSincAnimName                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::HasLIPSincAnim(const struct FName& LIPSincAnimName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HasLIPSincAnim");

	AActor_HasLIPSincAnim_Params params;
	params.LIPSincAnimName = LIPSincAnimName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.StopLIPSincAnim
// (Final, Native, Public)

void AActor::StopLIPSincAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopLIPSincAnim");

	AActor_StopLIPSincAnim_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.PlayLIPSincAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   LIPSincAnimName                (Parm)
// float                          Volume                         (OptionalParm, Parm)
// float                          Radius                         (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)

void AActor::PlayLIPSincAnim(const struct FName& LIPSincAnimName, float Volume, float Radius, float Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayLIPSincAnim");

	AActor_PlayLIPSincAnim_Params params;
	params.LIPSincAnimName = LIPSincAnimName;
	params.Volume = Volume;
	params.Radius = Radius;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AnimStopLooping
// (Final, Native, Public)
// Parameters:
// int                            Channel                        (OptionalParm, Parm)

void AActor::AnimStopLooping(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AnimStopLooping");

	AActor_AnimStopLooping_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsTweening
// (Final, Native, Public)
// Parameters:
// int                            Channel                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsTweening(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsTweening");

	AActor_IsTweening_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetAnimFrame
// (Final, Native, Public)
// Parameters:
// float                          Time                           (Parm)
// int                            Channel                        (OptionalParm, Parm)
// int                            UnitFlag                       (OptionalParm, Parm)

void AActor::SetAnimFrame(float Time, int Channel, int UnitFlag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetAnimFrame");

	AActor_SetAnimFrame_Params params;
	params.Time = Time;
	params.Channel = Channel;
	params.UnitFlag = UnitFlag;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.FreezeAnimAt
// (Final, Native, Public)
// Parameters:
// float                          Time                           (Parm)
// int                            Channel                        (OptionalParm, Parm)

void AActor::FreezeAnimAt(float Time, int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FreezeAnimAt");

	AActor_FreezeAnimAt_Params params;
	params.Time = Time;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.StopAnimating
// (Final, Native, Public)
// Parameters:
// bool                           ClearAllButBase                (OptionalParm, Parm)

void AActor::StopAnimating(bool ClearAllButBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.StopAnimating");

	AActor_StopAnimating_Params params;
	params.ClearAllButBase = ClearAllButBase;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.HasAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::HasAnim(const struct FName& Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.HasAnim");

	AActor_HasAnim_Params params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.FinishAnim
// (Final, Latent, Native, Public)
// Parameters:
// int                            Channel                        (OptionalParm, Parm)

void AActor::FinishAnim(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.FinishAnim");

	AActor_FinishAnim_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.IsAnimating
// (Final, Native, Public)
// Parameters:
// int                            Channel                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsAnimating(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsAnimating");

	AActor_IsAnimating_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.TweenAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)
// float                          Time                           (Parm)
// int                            Channel                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::TweenAnim(const struct FName& Sequence, float Time, int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TweenAnim");

	AActor_TweenAnim_Params params;
	params.Sequence = Sequence;
	params.Time = Time;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.LoopAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          TweenTime                      (OptionalParm, Parm)
// int                            Channel                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::LoopAnim(const struct FName& Sequence, float Rate, float TweenTime, int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.LoopAnim");

	AActor_LoopAnim_Params params;
	params.Sequence = Sequence;
	params.Rate = Rate;
	params.TweenTime = TweenTime;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.PlayAnim
// (Final, Native, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)
// float                          Rate                           (OptionalParm, Parm)
// float                          TweenTime                      (OptionalParm, Parm)
// int                            Channel                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::PlayAnim(const struct FName& Sequence, float Rate, float TweenTime, int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.PlayAnim");

	AActor_PlayAnim_Params params;
	params.Sequence = Sequence;
	params.Rate = Rate;
	params.TweenTime = TweenTime;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.GetMeshName
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::GetMeshName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.GetMeshName");

	AActor_GetMeshName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.IsJoinedTo
// (Final, Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::IsJoinedTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.IsJoinedTo");

	AActor_IsJoinedTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetOwner
// (Final, Native, Public)
// Parameters:
// class AActor*                  NewOwner                       (Parm)

void AActor::SetOwner(class AActor* NewOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetOwner");

	AActor_SetOwner_Params params;
	params.NewOwner = NewOwner;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBase
// (Final, Native, Public)
// Parameters:
// class AActor*                  NewBase                        (Parm)
// struct FVector                 NewFloor                       (OptionalParm, Parm)

void AActor::SetBase(class AActor* NewBase, const struct FVector& NewFloor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBase");

	AActor_SetBase_Params params;
	params.NewBase = NewBase;
	params.NewFloor = NewFloor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetBaseMaterial
// (Final, Native, Public)
// Parameters:
// class UMaterial*               NewBaseMaterial                (Parm)

void AActor::SetBaseMaterial(class UMaterial* NewBaseMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetBaseMaterial");

	AActor_SetBaseMaterial_Params params;
	params.NewBaseMaterial = NewBaseMaterial;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.AutonomousPhysics
// (Final, Native, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm)

void AActor::AutonomousPhysics(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.AutonomousPhysics");

	AActor_AutonomousPhysics_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.MoveSmooth
// (Final, Native, Public)
// Parameters:
// struct FVector                 Delta                          (Parm)
// bool                           TestCollide                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::MoveSmooth(const struct FVector& Delta, bool TestCollide)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.MoveSmooth");

	AActor_MoveSmooth_Params params;
	params.Delta = Delta;
	params.TestCollide = TestCollide;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRelativeLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRelativeLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeLocation");

	AActor_SetRelativeLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRelativeRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRelativeRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRelativeRotation");

	AActor_SetRelativeRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetRotation");

	AActor_SetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetLocation(const struct FVector& NewLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetLocation");

	AActor_SetLocation_Params params;
	params.NewLocation = NewLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Move
// (Final, Native, Public)
// Parameters:
// struct FVector                 Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::Move(const struct FVector& Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Move");

	AActor_Move_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetDrawType
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<EDrawType>         NewDrawType                    (Parm)

void AActor::SetDrawType(TEnumAsByte<EDrawType> NewDrawType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawType");

	AActor_SetDrawType_Params params;
	params.NewDrawType = NewDrawType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetStaticMesh
// (Final, Native, Public)
// Parameters:
// class UStaticMesh*             NewStaticMesh                  (Parm)

void AActor::SetStaticMesh(class UStaticMesh* NewStaticMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetStaticMesh");

	AActor_SetStaticMesh_Params params;
	params.NewStaticMesh = NewStaticMesh;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetDrawScale3D
// (Final, Native, Public)
// Parameters:
// struct FVector                 NewScale3D                     (Parm)

void AActor::SetDrawScale3D(const struct FVector& NewScale3D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale3D");

	AActor_SetDrawScale3D_Params params;
	params.NewScale3D = NewScale3D;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetDrawScale
// (Final, Native, Public)
// Parameters:
// float                          NewScale                       (Parm)

void AActor::SetDrawScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetDrawScale");

	AActor_SetDrawScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.SetCollisionSize
// (Final, Native, Public)
// Parameters:
// float                          NewRadius                      (Parm)
// float                          NewHeight                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::SetCollisionSize(float NewRadius, float NewHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollisionSize");

	AActor_SetCollisionSize_Params params;
	params.NewRadius = NewRadius;
	params.NewHeight = NewHeight;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.SetCollision
// (Final, Native, Public)
// Parameters:
// bool                           NewColActors                   (OptionalParm, Parm)
// bool                           NewBlockActors                 (OptionalParm, Parm)
// bool                           NewBlockPlayers                (OptionalParm, Parm)

void AActor::SetCollision(bool NewColActors, bool NewBlockActors, bool NewBlockPlayers)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.SetCollision");

	AActor_SetCollision_Params params;
	params.NewColActors = NewColActors;
	params.NewBlockActors = NewBlockActors;
	params.NewBlockPlayers = NewBlockPlayers;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.Sleep
// (Final, Latent, Native, Public)
// Parameters:
// float                          Seconds                        (Parm)

void AActor::Sleep(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Sleep");

	AActor_Sleep_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ShouldBeHidden
// (Final, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AActor::STATIC_ShouldBeHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ShouldBeHidden");

	AActor_ShouldBeHidden_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Actor.Error
// (Final, Native, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void AActor::Error(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.Error");

	AActor_Error_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.TextToSpeech
// (Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// float                          Volume                         (Parm)

void AActor::TextToSpeech(const struct FString& Text, float Volume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.TextToSpeech");

	AActor_TextToSpeech_Params params;
	params.Text = Text;
	params.Volume = Volume;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.CopyObjectToClipboard
// (Native, Public)
// Parameters:
// class UObject*                 obj                            (Parm)

void AActor::CopyObjectToClipboard(class UObject* obj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.CopyObjectToClipboard");

	AActor_CopyObjectToClipboard_Params params;
	params.obj = obj;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Actor.ConsoleCommand
// (Native, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// bool                           bWriteToLog                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AActor::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Actor.ConsoleCommand");

	AActor_ConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAILevelBase.ClearReferences
// (Public)

void AwAILevelBase::ClearReferences()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAILevelBase.ClearReferences");

	AwAILevelBase_ClearReferences_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAILevelBase.KillBotsTeam
// (Public)
// Parameters:
// int                            Num                            (Parm)
// int                            inTeam                         (Parm)

void AwAILevelBase::KillBotsTeam(int Num, int inTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAILevelBase.KillBotsTeam");

	AwAILevelBase_KillBotsTeam_Params params;
	params.Num = Num;
	params.inTeam = inTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAILevelBase.KillBots
// (Public)
// Parameters:
// int                            Num                            (Parm)

void AwAILevelBase::KillBots(int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAILevelBase.KillBots");

	AwAILevelBase_KillBots_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAILevelBase.KillBot
// (Public)
// Parameters:
// class AAIController*           Bot                            (Parm)

void AwAILevelBase::KillBot(class AAIController* Bot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAILevelBase.KillBot");

	AwAILevelBase_KillBot_Params params;
	params.Bot = Bot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAILevelBase.Initialize
// (Public)

void AwAILevelBase::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAILevelBase.Initialize");

	AwAILevelBase_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.IsNewDefenceMode
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsNewDefenceMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsNewDefenceMode");

	UwMatchMaker_IsNewDefenceMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetDefenceGameInfo
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::GetDefenceGameInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetDefenceGameInfo");

	UwMatchMaker_GetDefenceGameInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SendUpdateUserPerformenceInfo
// (Defined, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            MinFps                         (Parm)
// int                            MaxFps                         (Parm)
// int                            AvgFps                         (Parm)
// int                            MinPing                        (Parm)
// int                            MaxPing                        (Parm)
// int                            AvgPing                        (Parm)

void UwMatchMaker::SendUpdateUserPerformenceInfo(int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendUpdateUserPerformenceInfo");

	UwMatchMaker_SendUpdateUserPerformenceInfo_Params params;
	params.UserID = UserID;
	params.MinFps = MinFps;
	params.MaxFps = MaxFps;
	params.AvgFps = AvgFps;
	params.MinPing = MinPing;
	params.MaxPing = MaxPing;
	params.AvgPing = AvgPing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SetLastBuyItemInfo
// (Defined, Public)
// Parameters:
// struct FString                 ItemName                       (Parm, NeedCtorLink)
// int                            ItemType                       (Parm)
// int                            ItemGrade                      (Parm)
// int                            ItemID                         (Parm)

void UwMatchMaker::SetLastBuyItemInfo(const struct FString& ItemName, int ItemType, int ItemGrade, int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetLastBuyItemInfo");

	UwMatchMaker_SetLastBuyItemInfo_Params params;
	params.ItemName = ItemName;
	params.ItemType = ItemType;
	params.ItemGrade = ItemGrade;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.IsPCBangItem
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsPCBangItem(class UwItemBoxHK* ItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsPCBangItem");

	UwMatchMaker_IsPCBangItem_Params params;
	params.ItemInfo = ItemInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.CheckUsingItem
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::CheckUsingItem(class UwItemBoxHK* ItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.CheckUsingItem");

	UwMatchMaker_CheckUsingItem_Params params;
	params.ItemInfo = ItemInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsPlayingPCBangPlus
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsPlayingPCBangPlus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsPlayingPCBangPlus");

	UwMatchMaker_IsPlayingPCBangPlus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsPlayingPCBang
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsPlayingPCBang()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsPlayingPCBang");

	UwMatchMaker_IsPlayingPCBang_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetAASLevel
// (Defined, Public)
// Parameters:
// unsigned char                  _level                         (Parm)

void UwMatchMaker::SetAASLevel(unsigned char _level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetAASLevel");

	UwMatchMaker_SetAASLevel_Params params;
	params._level = _level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetIsAASLevel
// (Defined, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char UwMatchMaker::GetIsAASLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetIsAASLevel");

	UwMatchMaker_GetIsAASLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsSDRespawn
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsSDRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsSDRespawn");

	UwMatchMaker_IsSDRespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsFriendlyUser
// (Defined, Public)
// Parameters:
// struct FString                 CharName                       (Parm, NeedCtorLink)
// struct FString                 ClanName                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsFriendlyUser(const struct FString& CharName, const struct FString& ClanName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsFriendlyUser");

	UwMatchMaker_IsFriendlyUser_Params params;
	params.CharName = CharName;
	params.ClanName = ClanName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsBlockUser
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsBlockUser(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsBlockUser");

	UwMatchMaker_IsBlockUser_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.UpdateBlockList
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateBlockList(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateBlockList");

	UwMatchMaker_UpdateBlockList_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdatePCBangList
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdatePCBangList(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdatePCBangList");

	UwMatchMaker_UpdatePCBangList_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateClanList
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateClanList(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateClanList");

	UwMatchMaker_UpdateClanList_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateFriendList
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateFriendList(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateFriendList");

	UwMatchMaker_UpdateFriendList_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ReplaceBlockNickName
// (Defined, Public)
// Parameters:
// struct FString                 old_name                       (Parm, NeedCtorLink)
// struct FString                 new_name                       (Parm, NeedCtorLink)

void UwMatchMaker::ReplaceBlockNickName(const struct FString& old_name, const struct FString& new_name)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ReplaceBlockNickName");

	UwMatchMaker_ReplaceBlockNickName_Params params;
	params.old_name = old_name;
	params.new_name = new_name;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddBlockList
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)

void UwMatchMaker::AddBlockList(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddBlockList");

	UwMatchMaker_AddBlockList_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SetBlockListCount
// (Defined, Public)
// Parameters:
// int                            cnt                            (Parm)

void UwMatchMaker::SetBlockListCount(int cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetBlockListCount");

	UwMatchMaker_SetBlockListCount_Params params;
	params.cnt = cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ClearBlockList
// (Defined, Public)

void UwMatchMaker::ClearBlockList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClearBlockList");

	UwMatchMaker_ClearBlockList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddClanList
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// unsigned char                  IsLogOn                        (Parm)
// int                            Level                          (Parm)
// int                            ClanGrade                      (Parm)
// int                            ClanWin                        (Parm)
// int                            ClanLose                       (Parm)
// int                            LevelMarkID                    (Parm)
// int                            TitleMarkID                    (Parm)

void UwMatchMaker::AddClanList(const struct FString& UserName, unsigned char IsLogOn, int Level, int ClanGrade, int ClanWin, int ClanLose, int LevelMarkID, int TitleMarkID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddClanList");

	UwMatchMaker_AddClanList_Params params;
	params.UserName = UserName;
	params.IsLogOn = IsLogOn;
	params.Level = Level;
	params.ClanGrade = ClanGrade;
	params.ClanWin = ClanWin;
	params.ClanLose = ClanLose;
	params.LevelMarkID = LevelMarkID;
	params.TitleMarkID = TitleMarkID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SetClanListCount
// (Defined, Public)
// Parameters:
// int                            cnt                            (Parm)

void UwMatchMaker::SetClanListCount(int cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetClanListCount");

	UwMatchMaker_SetClanListCount_Params params;
	params.cnt = cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ClearClanList
// (Defined, Public)

void UwMatchMaker::ClearClanList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClearClanList");

	UwMatchMaker_ClearClanList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddPCBangList2
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// unsigned char                  IsLogOn                        (Parm)
// int                            ClanMark                       (Parm)
// int                            ClanBG                         (Parm)
// int                            ClanBL                         (Parm)
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            Level                          (Parm)
// int                            ClanGrade                      (Parm)
// int                            ClanWin                        (Parm)
// int                            ClanLose                       (Parm)
// int                            IsLookForClan                  (Parm)
// int                            ClanLevel                      (Parm)
// int                            LevelMarkID                    (Parm)
// int                            TitleMarkID                    (Parm)
// int                            Reserved1                      (Parm)
// int                            Reserved2                      (Parm)
// int                            Reserved3                      (Parm)

void UwMatchMaker::AddPCBangList2(const struct FString& UserName, unsigned char IsLogOn, int ClanMark, int ClanBG, int ClanBL, const struct FString& ClanName, int Level, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddPCBangList2");

	UwMatchMaker_AddPCBangList2_Params params;
	params.UserName = UserName;
	params.IsLogOn = IsLogOn;
	params.ClanMark = ClanMark;
	params.ClanBG = ClanBG;
	params.ClanBL = ClanBL;
	params.ClanName = ClanName;
	params.Level = Level;
	params.ClanGrade = ClanGrade;
	params.ClanWin = ClanWin;
	params.ClanLose = ClanLose;
	params.IsLookForClan = IsLookForClan;
	params.ClanLevel = ClanLevel;
	params.LevelMarkID = LevelMarkID;
	params.TitleMarkID = TitleMarkID;
	params.Reserved1 = Reserved1;
	params.Reserved2 = Reserved2;
	params.Reserved3 = Reserved3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddPCBangList
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// int                            ClanMark                       (Parm)
// int                            ClanBG                         (Parm)
// int                            ClanBL                         (Parm)
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            Level                          (Parm)
// struct FString                 ServerName                     (Parm, NeedCtorLink)
// struct FString                 ServerShortName                (Parm, NeedCtorLink)
// struct FString                 ServerIP                       (Parm, NeedCtorLink)
// int                            serverPort                     (Parm)
// int                            CurPos                         (Parm)
// int                            ChannelNum                     (Parm)
// struct FString                 ChannelNickName                (Parm, NeedCtorLink)
// int                            RoomNum                        (Parm)
// int                            ClanGrade                      (Parm)
// int                            ClanWin                        (Parm)
// int                            ClanLose                       (Parm)
// int                            IsLookForClan                  (Parm)
// int                            ClanLevel                      (Parm)
// int                            LevelMarkID                    (Parm)
// int                            TitleMarkID                    (Parm)
// int                            Reserved1                      (Parm)
// int                            Reserved2                      (Parm)
// int                            Reserved3                      (Parm)

void UwMatchMaker::AddPCBangList(const struct FString& UserName, int ClanMark, int ClanBG, int ClanBL, const struct FString& ClanName, int Level, const struct FString& ServerName, const struct FString& ServerShortName, const struct FString& ServerIP, int serverPort, int CurPos, int ChannelNum, const struct FString& ChannelNickName, int RoomNum, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddPCBangList");

	UwMatchMaker_AddPCBangList_Params params;
	params.UserName = UserName;
	params.ClanMark = ClanMark;
	params.ClanBG = ClanBG;
	params.ClanBL = ClanBL;
	params.ClanName = ClanName;
	params.Level = Level;
	params.ServerName = ServerName;
	params.ServerShortName = ServerShortName;
	params.ServerIP = ServerIP;
	params.serverPort = serverPort;
	params.CurPos = CurPos;
	params.ChannelNum = ChannelNum;
	params.ChannelNickName = ChannelNickName;
	params.RoomNum = RoomNum;
	params.ClanGrade = ClanGrade;
	params.ClanWin = ClanWin;
	params.ClanLose = ClanLose;
	params.IsLookForClan = IsLookForClan;
	params.ClanLevel = ClanLevel;
	params.LevelMarkID = LevelMarkID;
	params.TitleMarkID = TitleMarkID;
	params.Reserved1 = Reserved1;
	params.Reserved2 = Reserved2;
	params.Reserved3 = Reserved3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.RemovePCBangList
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)

void UwMatchMaker::RemovePCBangList(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.RemovePCBangList");

	UwMatchMaker_RemovePCBangList_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SetPCBangListCount
// (Defined, Public)
// Parameters:
// int                            cnt                            (Parm)

void UwMatchMaker::SetPCBangListCount(int cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetPCBangListCount");

	UwMatchMaker_SetPCBangListCount_Params params;
	params.cnt = cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ClearPCBangList
// (Defined, Public)

void UwMatchMaker::ClearPCBangList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClearPCBangList");

	UwMatchMaker_ClearPCBangList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddFriendList
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// unsigned char                  IsLogOn                        (Parm)
// int                            ClanMark                       (Parm)
// int                            ClanBG                         (Parm)
// int                            ClanBL                         (Parm)
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            Level                          (Parm)
// unsigned char                  IsLookForClan                  (Parm)
// int                            ClanLevel                      (Parm)
// int                            LevelMarkID                    (Parm)

void UwMatchMaker::AddFriendList(const struct FString& UserName, unsigned char IsLogOn, int ClanMark, int ClanBG, int ClanBL, const struct FString& ClanName, int Level, unsigned char IsLookForClan, int ClanLevel, int LevelMarkID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddFriendList");

	UwMatchMaker_AddFriendList_Params params;
	params.UserName = UserName;
	params.IsLogOn = IsLogOn;
	params.ClanMark = ClanMark;
	params.ClanBG = ClanBG;
	params.ClanBL = ClanBL;
	params.ClanName = ClanName;
	params.Level = Level;
	params.IsLookForClan = IsLookForClan;
	params.ClanLevel = ClanLevel;
	params.LevelMarkID = LevelMarkID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SetFriendListCount
// (Defined, Public)
// Parameters:
// int                            cnt                            (Parm)

void UwMatchMaker::SetFriendListCount(int cnt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetFriendListCount");

	UwMatchMaker_SetFriendListCount_Params params;
	params.cnt = cnt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ClearFriendList
// (Defined, Public)

void UwMatchMaker::ClearFriendList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClearFriendList");

	UwMatchMaker_ClearFriendList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.IsDisconnectedUser
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsDisconnectedUser()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsDisconnectedUser");

	UwMatchMaker_IsDisconnectedUser_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetDisconnectedUser
// (Defined, Public)
// Parameters:
// bool                           bSet                           (Parm)
// int                            UserID                         (OptionalParm, Parm)

void UwMatchMaker::SetDisconnectedUser(bool bSet, int UserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetDisconnectedUser");

	UwMatchMaker_SetDisconnectedUser_Params params;
	params.bSet = bSet;
	params.UserID = UserID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetHostPoint
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetHostPoint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetHostPoint");

	UwMatchMaker_GetHostPoint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.CalculateHostPoint
// (Defined, Public)
// Parameters:
// bool                           bInGame                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::CalculateHostPoint(bool bInGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.CalculateHostPoint");

	UwMatchMaker_CalculateHostPoint_Params params;
	params.bInGame = bInGame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ReceivedPing
// (Defined, Public)
// Parameters:
// struct FString                 fromAddr                       (Parm, NeedCtorLink)
// int                            msec                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::ReceivedPing(const struct FString& fromAddr, int msec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ReceivedPing");

	UwMatchMaker_ReceivedPing_Params params;
	params.fromAddr = fromAddr;
	params.msec = msec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.OnRecivedPing
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)
// struct FString                 fromAddr                       (Parm, NeedCtorLink)
// int                            msec                           (Parm)

void UwMatchMaker::OnRecivedPing(class UwMatchMaker* MM, const struct FString& fromAddr, int msec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.OnRecivedPing");

	UwMatchMaker_OnRecivedPing_Params params;
	params.MM = MM;
	params.fromAddr = fromAddr;
	params.msec = msec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ReceivedPingHK
// (Defined, Public)
// Parameters:
// struct FString                 fromAddr                       (Parm, NeedCtorLink)
// int                            msec                           (Parm)

void UwMatchMaker::ReceivedPingHK(const struct FString& fromAddr, int msec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ReceivedPingHK");

	UwMatchMaker_ReceivedPingHK_Params params;
	params.fromAddr = fromAddr;
	params.msec = msec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ClearReceivedPingHK
// (Defined, Public)

void UwMatchMaker::ClearReceivedPingHK()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClearReceivedPingHK");

	UwMatchMaker_ClearReceivedPingHK_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetLastestPingValue
// (Defined, Public)
// Parameters:
// struct FString                 fromAddr                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetLastestPingValue(const struct FString& fromAddr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetLastestPingValue");

	UwMatchMaker_GetLastestPingValue_Params params;
	params.fromAddr = fromAddr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SendPingHK
// (Defined, Public)
// Parameters:
// struct FString                 fromAddr                       (Parm, NeedCtorLink)

void UwMatchMaker::SendPingHK(const struct FString& fromAddr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendPingHK");

	UwMatchMaker_SendPingHK_Params params;
	params.fromAddr = fromAddr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SendPingToClient
// (Defined, Public)

void UwMatchMaker::SendPingToClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendPingToClient");

	UwMatchMaker_SendPingToClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.DrawOtherLoadingState
// (Defined, Event, Public)
// Parameters:
// int                            UserID                         (Parm)
// unsigned char                  bLoadingState                  (Parm)

void UwMatchMaker::DrawOtherLoadingState(int UserID, unsigned char bLoadingState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.DrawOtherLoadingState");

	UwMatchMaker_DrawOtherLoadingState_Params params;
	params.UserID = UserID;
	params.bLoadingState = bLoadingState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.OnReqSuccessStartGame
// (Public, Delegate)
// Parameters:
// int                            Step                           (Parm)

void UwMatchMaker::OnReqSuccessStartGame(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.OnReqSuccessStartGame");

	UwMatchMaker_OnReqSuccessStartGame_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ReqSuccessStartGame
// (Defined, Event, Public)
// Parameters:
// int                            Step                           (Parm)

void UwMatchMaker::ReqSuccessStartGame(int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ReqSuccessStartGame");

	UwMatchMaker_ReqSuccessStartGame_Params params;
	params.Step = Step;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetItemDurabilityInfo
// (Defined, Public)
// Parameters:
// TArray<int>                    OwnerID                        (Parm, OutParm, NeedCtorLink)
// TArray<int>                    PlayedNumber                   (Parm, OutParm, NeedCtorLink)
// TArray<int>                    PlayedRound                    (Parm, OutParm, NeedCtorLink)
// TArray<struct FBtrDouble>      UniqueItemID                   (Parm, OutParm, NeedCtorLink)
// TArray<int>                    UsingTime                      (Parm, OutParm, NeedCtorLink)
// TArray<int>                    PlayedCount                    (Parm, OutParm, NeedCtorLink)

void UwMatchMaker::GetItemDurabilityInfo(TArray<int>* OwnerID, TArray<int>* PlayedNumber, TArray<int>* PlayedRound, TArray<struct FBtrDouble>* UniqueItemID, TArray<int>* UsingTime, TArray<int>* PlayedCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetItemDurabilityInfo");

	UwMatchMaker_GetItemDurabilityInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OwnerID != nullptr)
		*OwnerID = params.OwnerID;
	if (PlayedNumber != nullptr)
		*PlayedNumber = params.PlayedNumber;
	if (PlayedRound != nullptr)
		*PlayedRound = params.PlayedRound;
	if (UniqueItemID != nullptr)
		*UniqueItemID = params.UniqueItemID;
	if (UsingTime != nullptr)
		*UsingTime = params.UsingTime;
	if (PlayedCount != nullptr)
		*PlayedCount = params.PlayedCount;
}


// Function Engine.wMatchMaker.ForceGameOver
// (Defined, Event, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ForceGameOver(class APlayerReplicationInfo* Winner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ForceGameOver");

	UwMatchMaker_ForceGameOver_Params params;
	params.Winner = Winner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ProcessPendingChangeNewHostOrChangeNewGuest
// (Defined, Public)

void UwMatchMaker::ProcessPendingChangeNewHostOrChangeNewGuest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ProcessPendingChangeNewHostOrChangeNewGuest");

	UwMatchMaker_ProcessPendingChangeNewHostOrChangeNewGuest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.PendingChangeNewGuest
// (Defined, Public)
// Parameters:
// struct FString                 hostAddress                    (Parm, NeedCtorLink)

void UwMatchMaker::PendingChangeNewGuest(const struct FString& hostAddress)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.PendingChangeNewGuest");

	UwMatchMaker_PendingChangeNewGuest_Params params;
	params.hostAddress = hostAddress;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.PendingChangeHost
// (Defined, Public)
// Parameters:
// int                            ClientNum                      (Parm)

void UwMatchMaker::PendingChangeHost(int ClientNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.PendingChangeHost");

	UwMatchMaker_PendingChangeHost_Params params;
	params.ClientNum = ClientNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SetChangeHostMessageFlag
// (Defined, Public)

void UwMatchMaker::SetChangeHostMessageFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetChangeHostMessageFlag");

	UwMatchMaker_SetChangeHostMessageFlag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ChangeNewGuest
// (Defined, Public)
// Parameters:
// struct FString                 HostIP                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ChangeNewGuest(const struct FString& HostIP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ChangeNewGuest");

	UwMatchMaker_ChangeNewGuest_Params params;
	params.HostIP = HostIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ChangeHost
// (Defined, Public)
// Parameters:
// int                            ClientNum                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ChangeHost(int ClientNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ChangeHost");

	UwMatchMaker_ChangeHost_Params params;
	params.ClientNum = ClientNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetChangingHostFlag
// (Defined, Event, Public)
// Parameters:
// bool                           flag                           (Parm)

void UwMatchMaker::SetChangingHostFlag(bool flag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetChangingHostFlag");

	UwMatchMaker_SetChangingHostFlag_Params params;
	params.flag = flag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ResetChangingHostGuest
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ResetChangingHostGuest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ResetChangingHostGuest");

	UwMatchMaker_ResetChangingHostGuest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsLoading
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsLoading");

	UwMatchMaker_IsLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.EndLoading
// (Defined, Event, Public)

void UwMatchMaker::EndLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.EndLoading");

	UwMatchMaker_EndLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.StartLoading
// (Defined, Event, Public)

void UwMatchMaker::StartLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.StartLoading");

	UwMatchMaker_StartLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetMiniMapInfoImage
// (Defined, Event, Public)
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* UwMatchMaker::GetMiniMapInfoImage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetMiniMapInfoImage");

	UwMatchMaker_GetMiniMapInfoImage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetLoadingImage
// (Defined, Event, Public)
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* UwMatchMaker::GetLoadingImage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetLoadingImage");

	UwMatchMaker_GetLoadingImage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.InitializeMapSettings_DS_Server
// (Defined, Event, Public)

void UwMatchMaker::InitializeMapSettings_DS_Server()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.InitializeMapSettings_DS_Server");

	UwMatchMaker_InitializeMapSettings_DS_Server_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.InitializeMapSettings
// (Defined, Public)

void UwMatchMaker::InitializeMapSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.InitializeMapSettings");

	UwMatchMaker_InitializeMapSettings_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ClearConsole
// (Defined, Public)

void UwMatchMaker::ClearConsole()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClearConsole");

	UwMatchMaker_ClearConsole_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.EndMatch
// (Defined, Event, Public)
// Parameters:
// bool                           bForceEndMatch                 (OptionalParm, Parm)

void UwMatchMaker::EndMatch(bool bForceEndMatch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.EndMatch");

	UwMatchMaker_EndMatch_Params params;
	params.bForceEndMatch = bForceEndMatch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ResetGameFlag
// (Defined, Public)

void UwMatchMaker::ResetGameFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ResetGameFlag");

	UwMatchMaker_ResetGameFlag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetTeamCount
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetTeamCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetTeamCount");

	UwMatchMaker_GetTeamCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetGameModeNum
// (Defined, Public)
// Parameters:
// struct FString                 szGameClassName                (Parm, NeedCtorLink)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char UwMatchMaker::GetGameModeNum(const struct FString& szGameClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetGameModeNum");

	UwMatchMaker_GetGameModeNum_Params params;
	params.szGameClassName = szGameClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetCurMatchState
// (Defined, Public)
// Parameters:
// struct FMatchState             kState                         (Parm)

void UwMatchMaker::SetCurMatchState(const struct FMatchState& kState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetCurMatchState");

	UwMatchMaker_SetCurMatchState_Params params;
	params.kState = kState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.IsHost
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsHost(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsHost");

	UwMatchMaker_IsHost_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetNewHost
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)

void UwMatchMaker::SetNewHost(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetNewHost");

	UwMatchMaker_SetNewHost_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetUserClanNameByUserName
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::GetUserClanNameByUserName(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetUserClanNameByUserName");

	UwMatchMaker_GetUserClanNameByUserName_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetUserLevelMarkIDByUserName
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetUserLevelMarkIDByUserName(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetUserLevelMarkIDByUserName");

	UwMatchMaker_GetUserLevelMarkIDByUserName_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ReplaceUserName
// (Defined, Public)
// Parameters:
// struct FString                 OldName                        (Parm, NeedCtorLink)
// struct FString                 NewName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ReplaceUserName(const struct FString& OldName, const struct FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ReplaceUserName");

	UwMatchMaker_ReplaceUserName_Params params;
	params.OldName = OldName;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetUserGradeByUserName
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetUserGradeByUserName(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetUserGradeByUserName");

	UwMatchMaker_GetUserGradeByUserName_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetUIDByUserName
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetUIDByUserName(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetUIDByUserName");

	UwMatchMaker_GetUIDByUserName_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetUserInfoByUserName
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// class UwMatchUserInfo*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UwMatchUserInfo* UwMatchMaker::GetUserInfoByUserName(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetUserInfoByUserName");

	UwMatchMaker_GetUserInfoByUserName_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetUserInfoByUID
// (Defined, Public)
// Parameters:
// int                            UserID                         (Parm)
// class UwMatchUserInfo*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UwMatchUserInfo* UwMatchMaker::GetUserInfoByUID(int UserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetUserInfoByUID");

	UwMatchMaker_GetUserInfoByUID_Params params;
	params.UserID = UserID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetMyTeam
// (Defined, Public)
// Parameters:
// int                            iTeam                          (Parm)

void UwMatchMaker::SetMyTeam(int iTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetMyTeam");

	UwMatchMaker_SetMyTeam_Params params;
	params.iTeam = iTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetMyNetworkCheckFailedMsg
// (Defined, Public)
// Parameters:
// int                            LoadingStep                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::GetMyNetworkCheckFailedMsg(int LoadingStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetMyNetworkCheckFailedMsg");

	UwMatchMaker_GetMyNetworkCheckFailedMsg_Params params;
	params.LoadingStep = LoadingStep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetHostNetworkCheckFailedMsg
// (Defined, Public)
// Parameters:
// int                            LoadingStep                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::GetHostNetworkCheckFailedMsg(int LoadingStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetHostNetworkCheckFailedMsg");

	UwMatchMaker_GetHostNetworkCheckFailedMsg_Params params;
	params.LoadingStep = LoadingStep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.FailedNetworkChecking
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::FailedNetworkChecking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.FailedNetworkChecking");

	UwMatchMaker_FailedNetworkChecking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.StartNetworkChecking
// (Defined, Public)
// Parameters:
// int                            ClientsCount                   (Parm)
// bool                           bConnectGame                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::StartNetworkChecking(int ClientsCount, bool bConnectGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.StartNetworkChecking");

	UwMatchMaker_StartNetworkChecking_Params params;
	params.ClientsCount = ClientsCount;
	params.bConnectGame = bConnectGame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SendPingToChannelServer
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SendPingToChannelServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendPingToChannelServer");

	UwMatchMaker_SendPingToChannelServer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SendPingToOtherUser
// (Defined, Event, Public)
// Parameters:
// struct FString                 toAddr                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SendPingToOtherUser(const struct FString& toAddr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendPingToOtherUser");

	UwMatchMaker_SendPingToOtherUser_Params params;
	params.toAddr = toAddr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SendText
// (Defined, Event, Public)
// Parameters:
// struct FString                 d_ip                           (Parm, NeedCtorLink)
// int                            d_port                         (Parm)
// struct FString                 dText                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SendText(const struct FString& d_ip, int d_port, const struct FString& dText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendText");

	UwMatchMaker_SendText_Params params;
	params.d_ip = d_ip;
	params.d_port = d_port;
	params.dText = dText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SendErrorReportC
// (Defined, Public)
// Parameters:
// int                            Code                           (Parm)
// int                            windowtype                     (Parm)
// struct FString                 ct                             (Parm, NeedCtorLink)

void UwMatchMaker::SendErrorReportC(int Code, int windowtype, const struct FString& ct)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendErrorReportC");

	UwMatchMaker_SendErrorReportC_Params params;
	params.Code = Code;
	params.windowtype = windowtype;
	params.ct = ct;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SendErrorReportS
// (Defined, Public)
// Parameters:
// int                            Code                           (Parm)
// struct FString                 ct                             (Parm, NeedCtorLink)

void UwMatchMaker::SendErrorReportS(int Code, const struct FString& ct)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SendErrorReportS");

	UwMatchMaker_SendErrorReportS_Params params;
	params.Code = Code;
	params.ct = ct;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.CreatePingChecker
// (Defined, Event, Public)
// Parameters:
// class UBTPingCheckerLinker*    ReturnValue                    (Parm, OutParm, ReturnParm)

class UBTPingCheckerLinker* UwMatchMaker::CreatePingChecker()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.CreatePingChecker");

	UwMatchMaker_CreatePingChecker_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetHostBlocking
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::GetHostBlocking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetHostBlocking");

	UwMatchMaker_GetHostBlocking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetHostBlocking
// (Defined, Event, Public)
// Parameters:
// bool                           Blocking                       (Parm)

void UwMatchMaker::SetHostBlocking(bool Blocking)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetHostBlocking");

	UwMatchMaker_SetHostBlocking_Params params;
	params.Blocking = Blocking;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.MakeHSResponseData
// (Native, Public)
// Parameters:
// TArray<unsigned char>          Data                           (Parm, NeedCtorLink)
// TArray<unsigned char>          Result                         (Parm, OutParm, NeedCtorLink)

void UwMatchMaker::MakeHSResponseData(TArray<unsigned char> Data, TArray<unsigned char>* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.MakeHSResponseData");

	UwMatchMaker_MakeHSResponseData_Params params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Result != nullptr)
		*Result = params.Result;
}


// Function Engine.wMatchMaker.AddServerIP
// (Defined, Event, Public)
// Parameters:
// struct FString                 ServerIP                       (Parm, NeedCtorLink)

void UwMatchMaker::AddServerIP(const struct FString& ServerIP)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddServerIP");

	UwMatchMaker_AddServerIP_Params params;
	params.ServerIP = ServerIP;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.TenProtectRelease
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectRelease");

	UwMatchMaker_TenProtectRelease_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectCreate
// (Native, Public)
// Parameters:
// int                            QQUserID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectCreate(int QQUserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectCreate");

	UwMatchMaker_TenProtectCreate_Params params;
	params.QQUserID = QQUserID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectDProtoEncrypt
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectDProtoEncrypt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectDProtoEncrypt");

	UwMatchMaker_TenProtectDProtoEncrypt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectDProtoDecrypt
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectDProtoDecrypt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectDProtoDecrypt");

	UwMatchMaker_TenProtectDProtoDecrypt_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectUpdate_AntiBot
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectUpdate_AntiBot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectUpdate_AntiBot");

	UwMatchMaker_TenProtectUpdate_AntiBot_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectStopLocalCheck
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectStopLocalCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectStopLocalCheck");

	UwMatchMaker_TenProtectStopLocalCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectStartLocalOnceCheck
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectStartLocalOnceCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectStartLocalOnceCheck");

	UwMatchMaker_TenProtectStartLocalOnceCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectSendInitData
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectSendInitData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectSendInitData");

	UwMatchMaker_TenProtectSendInitData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.TenProtectSetInitData
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::TenProtectSetInitData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.TenProtectSetInitData");

	UwMatchMaker_TenProtectSetInitData_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetParamsExcelPathFileName
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::GetParamsExcelPathFileName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetParamsExcelPathFileName");

	UwMatchMaker_GetParamsExcelPathFileName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetParamsFileName
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::GetParamsFileName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetParamsFileName");

	UwMatchMaker_GetParamsFileName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetClientVersion
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetClientVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetClientVersion");

	UwMatchMaker_GetClientVersion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ConsoleCmd_DS
// (Native, Public)
// Parameters:
// struct FString                 strCmd                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ConsoleCmd_DS(const struct FString& strCmd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ConsoleCmd_DS");

	UwMatchMaker_ConsoleCmd_DS_Params params;
	params.strCmd = strCmd;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ForceSetLoadingStep
// (Native, Public)
// Parameters:
// int                            LoadingStep                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ForceSetLoadingStep(int LoadingStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ForceSetLoadingStep");

	UwMatchMaker_ForceSetLoadingStep_Params params;
	params.LoadingStep = LoadingStep;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.StartHolePunchingClient
// (Native, Public)
// Parameters:
// int                            GameType                       (Parm)
// int                            ReqStartUserID                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::StartHolePunchingClient(int GameType, int ReqStartUserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.StartHolePunchingClient");

	UwMatchMaker_StartHolePunchingClient_Params params;
	params.GameType = GameType;
	params.ReqStartUserID = ReqStartUserID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.StartHolePunchingHost
// (Native, Public)
// Parameters:
// int                            GameType                       (Parm)
// int                            ReqStartUserID                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::StartHolePunchingHost(int GameType, int ReqStartUserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.StartHolePunchingHost");

	UwMatchMaker_StartHolePunchingHost_Params params;
	params.GameType = GameType;
	params.ReqStartUserID = ReqStartUserID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetTcpTimeOutInTempReset
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SetTcpTimeOutInTempReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetTcpTimeOutInTempReset");

	UwMatchMaker_SetTcpTimeOutInTempReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetTcpTimeOutInGame
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SetTcpTimeOutInGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetTcpTimeOutInGame");

	UwMatchMaker_SetTcpTimeOutInGame_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetTcpTimeOutInUI
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SetTcpTimeOutInUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetTcpTimeOutInUI");

	UwMatchMaker_SetTcpTimeOutInUI_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ForceDisconnectGameWithErrMessage
// (Native, Public)
// Parameters:
// struct FString                 strErrMsg                      (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ForceDisconnectGameWithErrMessage(const struct FString& strErrMsg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ForceDisconnectGameWithErrMessage");

	UwMatchMaker_ForceDisconnectGameWithErrMessage_Params params;
	params.strErrMsg = strErrMsg;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetUDPConnectionTimeLimit
// (Native, Public)
// Parameters:
// float                          fLimitSec                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SetUDPConnectionTimeLimit(float fLimitSec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetUDPConnectionTimeLimit");

	UwMatchMaker_SetUDPConnectionTimeLimit_Params params;
	params.fLimitSec = fLimitSec;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsCompletedLoading
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsCompletedLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsCompletedLoading");

	UwMatchMaker_IsCompletedLoading_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.CheckHolePunchingResult
// (Native, Public)
// Parameters:
// int                            Result                         (Parm)
// unsigned char                  Phrase                         (Parm)
// int                            InterventionUserID             (Parm)
// unsigned char                  Intervention                   (Parm)
// TArray<int>                    FailedUserIDs                  (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::CheckHolePunchingResult(int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, TArray<int> FailedUserIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.CheckHolePunchingResult");

	UwMatchMaker_CheckHolePunchingResult_Params params;
	params.Result = Result;
	params.Phrase = Phrase;
	params.InterventionUserID = InterventionUserID;
	params.Intervention = Intervention;
	params.FailedUserIDs = FailedUserIDs;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.GetStrLoadingState
// (Native, Public)
// Parameters:
// unsigned char                  bState                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::GetStrLoadingState(unsigned char bState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetStrLoadingState");

	UwMatchMaker_GetStrLoadingState_Params params;
	params.bState = bState;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.PrintLoadingMsg
// (Native, Public)
// Parameters:
// struct FLoadingMessageItem     Item                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::PrintLoadingMsg(const struct FLoadingMessageItem& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.PrintLoadingMsg");

	UwMatchMaker_PrintLoadingMsg_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.MakeMD5
// (Native, Public)
// Parameters:
// struct FString                 strsrc                         (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwMatchMaker::MakeMD5(const struct FString& strsrc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.MakeMD5");

	UwMatchMaker_MakeMD5_Params params;
	params.strsrc = strsrc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.DestoryLoadingStater
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::DestoryLoadingStater()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.DestoryLoadingStater");

	UwMatchMaker_DestoryLoadingStater_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.CreateLoadingStater
// (Native, Public)
// Parameters:
// struct FString                 LoginName                      (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::CreateLoadingStater(const struct FString& LoginName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.CreateLoadingStater");

	UwMatchMaker_CreateLoadingStater_Params params;
	params.LoginName = LoginName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.LowRelayServerOff
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::LowRelayServerOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.LowRelayServerOff");

	UwMatchMaker_LowRelayServerOff_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.LowRelayServerOn
// (Native, Public)
// Parameters:
// struct FString                 RelayServerIP                  (Parm, NeedCtorLink)
// int                            RelayServerPortNum             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::LowRelayServerOn(const struct FString& RelayServerIP, int RelayServerPortNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.LowRelayServerOn");

	UwMatchMaker_LowRelayServerOn_Params params;
	params.RelayServerIP = RelayServerIP;
	params.RelayServerPortNum = RelayServerPortNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.LowChangeClient
// (Native, Public)
// Parameters:
// struct FString                 HostAddr                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::LowChangeClient(const struct FString& HostAddr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.LowChangeClient");

	UwMatchMaker_LowChangeClient_Params params;
	params.HostAddr = HostAddr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.LowChangeServer
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::LowChangeServer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.LowChangeServer");

	UwMatchMaker_LowChangeServer_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ForceDisconnectUDPConnectionClientSide
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ForceDisconnectUDPConnectionClientSide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ForceDisconnectUDPConnectionClientSide");

	UwMatchMaker_ForceDisconnectUDPConnectionClientSide_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ForceDisconnectUDPConnectionHostSide
// (Native, Public)
// Parameters:
// int                            UserID                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ForceDisconnectUDPConnectionHostSide(int UserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ForceDisconnectUDPConnectionHostSide");

	UwMatchMaker_ForceDisconnectUDPConnectionHostSide_Params params;
	params.UserID = UserID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.StartTickCheck
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::StartTickCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.StartTickCheck");

	UwMatchMaker_StartTickCheck_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetNatTypeToEngine
// (Native, Public)
// Parameters:
// int                            NatType                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::SetNatTypeToEngine(int NatType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetNatTypeToEngine");

	UwMatchMaker_SetNatTypeToEngine_Params params;
	params.NatType = NatType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.ClientInitNatChecker
// (Native, Public)
// Parameters:
// int                            HostUserID                     (Parm)
// struct FString                 HostIP                         (Parm, NeedCtorLink)
// int                            hostPortNum                    (Parm)
// unsigned char                  NatType                        (Parm)
// unsigned char                  Intervention                   (Parm)
// struct FString                 HostInnerIP                    (Parm, NeedCtorLink)
// int                            HostInnerPort                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::ClientInitNatChecker(int HostUserID, const struct FString& HostIP, int hostPortNum, unsigned char NatType, unsigned char Intervention, const struct FString& HostInnerIP, int HostInnerPort)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClientInitNatChecker");

	UwMatchMaker_ClientInitNatChecker_Params params;
	params.HostUserID = HostUserID;
	params.HostIP = HostIP;
	params.hostPortNum = hostPortNum;
	params.NatType = NatType;
	params.Intervention = Intervention;
	params.HostInnerIP = HostInnerIP;
	params.HostInnerPort = HostInnerPort;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.HostInitNatChecker
// (Native, Public)
// Parameters:
// int                            ClientUserID                   (Parm)
// struct FString                 ClientIP                       (Parm, NeedCtorLink)
// int                            clientPortNum                  (Parm)
// unsigned char                  NatType                        (Parm)
// unsigned char                  Intervention_Own               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::HostInitNatChecker(int ClientUserID, const struct FString& ClientIP, int clientPortNum, unsigned char NatType, unsigned char Intervention_Own)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.HostInitNatChecker");

	UwMatchMaker_HostInitNatChecker_Params params;
	params.ClientUserID = ClientUserID;
	params.ClientIP = ClientIP;
	params.clientPortNum = clientPortNum;
	params.NatType = NatType;
	params.Intervention_Own = Intervention_Own;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.NatServerAddrStoreToEngine
// (Native, Public)
// Parameters:
// struct FString                 natServerIP1                   (Parm, NeedCtorLink)
// int                            natServerPortNum1              (Parm)
// struct FString                 natServerIP2                   (Parm, NeedCtorLink)
// int                            natServerPortNum2              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::NatServerAddrStoreToEngine(const struct FString& natServerIP1, int natServerPortNum1, const struct FString& natServerIP2, int natServerPortNum2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.NatServerAddrStoreToEngine");

	UwMatchMaker_NatServerAddrStoreToEngine_Params params;
	params.natServerIP1 = natServerIP1;
	params.natServerPortNum1 = natServerPortNum1;
	params.natServerIP2 = natServerIP2;
	params.natServerPortNum2 = natServerPortNum2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.StartMatch
// (Native, Public)
// Parameters:
// int                            GameRoomNum                    (Parm)
// bool                           bHost                          (Parm)
// struct FString                 szHostAddr                     (OptionalParm, Parm, NeedCtorLink)
// int                            hostPortNum                    (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::StartMatch(int GameRoomNum, bool bHost, const struct FString& szHostAddr, int hostPortNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.StartMatch");

	UwMatchMaker_StartMatch_Params params;
	params.GameRoomNum = GameRoomNum;
	params.bHost = bHost;
	params.szHostAddr = szHostAddr;
	params.hostPortNum = hostPortNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.UpdateQuest_WinnerInBotMode
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            RecodeType                     (Parm)

void UwMatchMaker::UpdateQuest_WinnerInBotMode(int Level, int RecodeType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_WinnerInBotMode");

	UwMatchMaker_UpdateQuest_WinnerInBotMode_Params params;
	params.Level = Level;
	params.RecodeType = RecodeType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_RoundCompletedInBotMode
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            CompletedRound                 (Parm)

void UwMatchMaker::UpdateQuest_RoundCompletedInBotMode(int Level, int CompletedRound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_RoundCompletedInBotMode");

	UwMatchMaker_UpdateQuest_RoundCompletedInBotMode_Params params;
	params.Level = Level;
	params.CompletedRound = CompletedRound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_MatchCompletedInBotMode
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)

void UwMatchMaker::UpdateQuest_MatchCompletedInBotMode(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_MatchCompletedInBotMode");

	UwMatchMaker_UpdateQuest_MatchCompletedInBotMode_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_SprintTime
// (Defined, Public)
// Parameters:
// int                            sec                            (Parm)

void UwMatchMaker::UpdateQuest_SprintTime(int sec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_SprintTime");

	UwMatchMaker_UpdateQuest_SprintTime_Params params;
	params.sec = sec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_AcquireTrophy
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)

void UwMatchMaker::UpdateQuest_AcquireTrophy(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_AcquireTrophy");

	UwMatchMaker_UpdateQuest_AcquireTrophy_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_MatchEndInBotMode
// (Defined, Public)
// Parameters:
// int                            difficult                      (Parm)
// int                            Map                            (Parm)

void UwMatchMaker::UpdateQuest_MatchEndInBotMode(int difficult, int Map)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_MatchEndInBotMode");

	UwMatchMaker_UpdateQuest_MatchEndInBotMode_Params params;
	params.difficult = difficult;
	params.Map = Map;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_KillInBotMode
// (Defined, Public)
// Parameters:
// int                            difficult                      (Parm)
// int                            Map                            (Parm)

void UwMatchMaker::UpdateQuest_KillInBotMode(int difficult, int Map)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_KillInBotMode");

	UwMatchMaker_UpdateQuest_KillInBotMode_Params params;
	params.difficult = difficult;
	params.Map = Map;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_MatchEnd
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            Map                            (Parm)

void UwMatchMaker::UpdateQuest_MatchEnd(int Mode, int Map)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_MatchEnd");

	UwMatchMaker_UpdateQuest_MatchEnd_Params params;
	params.Mode = Mode;
	params.Map = Map;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_CombatTime
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            Map                            (Parm)
// int                            Min                            (Parm)

void UwMatchMaker::UpdateQuest_CombatTime(int Mode, int Map, int Min)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_CombatTime");

	UwMatchMaker_UpdateQuest_CombatTime_Params params;
	params.Mode = Mode;
	params.Map = Map;
	params.Min = Min;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_ExecTime
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            Map                            (Parm)
// int                            Min                            (Parm)

void UwMatchMaker::UpdateQuest_ExecTime(int Mode, int Map, int Min)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_ExecTime");

	UwMatchMaker_UpdateQuest_ExecTime_Params params;
	params.Mode = Mode;
	params.Map = Map;
	params.Min = Min;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_Death
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_Death(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_Death");

	UwMatchMaker_UpdateQuest_Death_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_Assist
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_Assist(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_Assist");

	UwMatchMaker_UpdateQuest_Assist_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_15Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_15Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_15Kill");

	UwMatchMaker_UpdateQuest_15Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_10Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_10Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_10Kill");

	UwMatchMaker_UpdateQuest_10Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_9Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_9Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_9Kill");

	UwMatchMaker_UpdateQuest_9Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_8Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_8Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_8Kill");

	UwMatchMaker_UpdateQuest_8Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_7Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_7Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_7Kill");

	UwMatchMaker_UpdateQuest_7Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_6Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_6Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_6Kill");

	UwMatchMaker_UpdateQuest_6Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_5Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_5Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_5Kill");

	UwMatchMaker_UpdateQuest_5Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_4Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_4Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_4Kill");

	UwMatchMaker_UpdateQuest_4Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_3Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_3Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_3Kill");

	UwMatchMaker_UpdateQuest_3Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_2Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_2Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_2Kill");

	UwMatchMaker_UpdateQuest_2Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_MeeleAttackKill
// (Defined, Public)

void UwMatchMaker::UpdateQuest_MeeleAttackKill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_MeeleAttackKill");

	UwMatchMaker_UpdateQuest_MeeleAttackKill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_HeadshotKill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_HeadshotKill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_HeadshotKill");

	UwMatchMaker_UpdateQuest_HeadshotKill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_AimedKill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_AimedKill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_AimedKill");

	UwMatchMaker_UpdateQuest_AimedKill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest_Kill
// (Defined, Public)
// Parameters:
// int                            WeaponType                     (Parm)
// int                            weaponID                       (Parm)

void UwMatchMaker::UpdateQuest_Kill(int WeaponType, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest_Kill");

	UwMatchMaker_UpdateQuest_Kill_Params params;
	params.WeaponType = WeaponType;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.QuestLog
// (Public, Delegate)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)

void UwMatchMaker::QuestLog(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.QuestLog");

	UwMatchMaker_QuestLog_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GetNextQuestID
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::GetNextQuestID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GetNextQuestID");

	UwMatchMaker_GetNextQuestID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.UpdateTutorial
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)
// int                            AddCount                       (Parm)

void UwMatchMaker::UpdateTutorial(int QuestID, int AddCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateTutorial");

	UwMatchMaker_UpdateTutorial_Params params;
	params.QuestID = QuestID;
	params.AddCount = AddCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuest
// (Defined, Public)
// Parameters:
// int                            MissionType                    (Parm)
// int                            MissionOption1                 (Parm)
// int                            MissionOption2                 (Parm)
// int                            AddCount                       (Parm)

void UwMatchMaker::UpdateQuest(int MissionType, int MissionOption1, int MissionOption2, int AddCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuest");

	UwMatchMaker_UpdateQuest_Params params;
	params.MissionType = MissionType;
	params.MissionOption1 = MissionOption1;
	params.MissionOption2 = MissionOption2;
	params.AddCount = AddCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.CheckMissionProgress
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// int                            AddCount                       (Parm)

void UwMatchMaker::CheckMissionProgress(int i, int AddCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.CheckMissionProgress");

	UwMatchMaker_CheckMissionProgress_Params params;
	params.i = i;
	params.AddCount = AddCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AccomplishMission100Percent
// (Defined, Public, Delegate)
// Parameters:
// struct FString                 MissionDesc                    (Parm, NeedCtorLink)
// int                            cur                            (Parm)
// int                            Max                            (Parm)

void UwMatchMaker::AccomplishMission100Percent(const struct FString& MissionDesc, int cur, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AccomplishMission100Percent");

	UwMatchMaker_AccomplishMission100Percent_Params params;
	params.MissionDesc = MissionDesc;
	params.cur = cur;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AccomplishMission75Percent
// (Defined, Public, Delegate)
// Parameters:
// struct FString                 MissionDesc                    (Parm, NeedCtorLink)
// int                            cur                            (Parm)
// int                            Max                            (Parm)

void UwMatchMaker::AccomplishMission75Percent(const struct FString& MissionDesc, int cur, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AccomplishMission75Percent");

	UwMatchMaker_AccomplishMission75Percent_Params params;
	params.MissionDesc = MissionDesc;
	params.cur = cur;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AccomplishMission50Percent
// (Defined, Public, Delegate)
// Parameters:
// struct FString                 MissionDesc                    (Parm, NeedCtorLink)
// int                            cur                            (Parm)
// int                            Max                            (Parm)

void UwMatchMaker::AccomplishMission50Percent(const struct FString& MissionDesc, int cur, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AccomplishMission50Percent");

	UwMatchMaker_AccomplishMission50Percent_Params params;
	params.MissionDesc = MissionDesc;
	params.cur = cur;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AccomplishMission25Percent
// (Public, Delegate)
// Parameters:
// struct FString                 MissionDesc                    (Parm, NeedCtorLink)
// int                            cur                            (Parm)
// int                            Max                            (Parm)

void UwMatchMaker::AccomplishMission25Percent(const struct FString& MissionDesc, int cur, int Max)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AccomplishMission25Percent");

	UwMatchMaker_AccomplishMission25Percent_Params params;
	params.MissionDesc = MissionDesc;
	params.cur = cur;
	params.Max = Max;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.GenerateMissionList
// (Defined, Public)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwMatchMaker::GenerateMissionList(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.GenerateMissionList");

	UwMatchMaker_GenerateMissionList_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SortQuestList
// (Defined, Public)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwMatchMaker::SortQuestList(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SortQuestList");

	UwMatchMaker_SortQuestList_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.FindQuest
// (Defined, Public)
// Parameters:
// int                            nQuestID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchMaker::FindQuest(int nQuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.FindQuest");

	UwMatchMaker_FindQuest_Params params;
	params.nQuestID = nQuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.RemoveDailyQuestArray
// (Defined, Public)
// Parameters:
// TArray<int>                    QuestID                        (Parm, NeedCtorLink)

void UwMatchMaker::RemoveDailyQuestArray(TArray<int> QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.RemoveDailyQuestArray");

	UwMatchMaker_RemoveDailyQuestArray_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddDailyQuestArray
// (Defined, Public)
// Parameters:
// TArray<int>                    QuestID                        (Parm, NeedCtorLink)

void UwMatchMaker::AddDailyQuestArray(TArray<int> QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddDailyQuestArray");

	UwMatchMaker_AddDailyQuestArray_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.RemoveDailyQuest
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)

void UwMatchMaker::RemoveDailyQuest(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.RemoveDailyQuest");

	UwMatchMaker_RemoveDailyQuest_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddDailyQuest
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)

void UwMatchMaker::AddDailyQuest(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddDailyQuest");

	UwMatchMaker_AddDailyQuest_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.RemoveQuestArray
// (Defined, Public)
// Parameters:
// TArray<int>                    QuestID                        (Parm, NeedCtorLink)

void UwMatchMaker::RemoveQuestArray(TArray<int> QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.RemoveQuestArray");

	UwMatchMaker_RemoveQuestArray_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddQuestArray
// (Defined, Public)
// Parameters:
// TArray<int>                    QuestID                        (Parm, NeedCtorLink)

void UwMatchMaker::AddQuestArray(TArray<int> QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddQuestArray");

	UwMatchMaker_AddQuestArray_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.RemoveQuest
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)

void UwMatchMaker::RemoveQuest(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.RemoveQuest");

	UwMatchMaker_RemoveQuest_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddQuest
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)

void UwMatchMaker::AddQuest(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddQuest");

	UwMatchMaker_AddQuest_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.IsEnableAltTab
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsEnableAltTab()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsEnableAltTab");

	UwMatchMaker_IsEnableAltTab_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.SetCurSubPos
// (Defined, Public)
// Parameters:
// int                            CurSubPos                      (Parm)

void UwMatchMaker::SetCurSubPos(int CurSubPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetCurSubPos");

	UwMatchMaker_SetCurSubPos_Params params;
	params.CurSubPos = CurSubPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.SetCurpos
// (Defined, Public)
// Parameters:
// int                            CurPos                         (Parm)
// int                            CurSubPos                      (OptionalParm, Parm)

void UwMatchMaker::SetCurpos(int CurPos, int CurSubPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.SetCurpos");

	UwMatchMaker_SetCurpos_Params params;
	params.CurPos = CurPos;
	params.CurSubPos = CurSubPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.IsClanGrade
// (Defined, Public)
// Parameters:
// int                            Grade                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsClanGrade(int Grade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsClanGrade");

	UwMatchMaker_IsClanGrade_Params params;
	params.Grade = Grade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsClanMember
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsClanMember()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsClanMember");

	UwMatchMaker_IsClanMember_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.RI_Clear
// (Defined, Public)

void UwMatchMaker::RI_Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.RI_Clear");

	UwMatchMaker_RI_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.PI_LeavelRoom
// (Defined, Public)

void UwMatchMaker::PI_LeavelRoom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.PI_LeavelRoom");

	UwMatchMaker_PI_LeavelRoom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.RemoveGMList
// (Defined, Public)
// Parameters:
// int                            GMUID                          (Parm)

void UwMatchMaker::RemoveGMList(int GMUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.RemoveGMList");

	UwMatchMaker_RemoveGMList_Params params;
	params.GMUID = GMUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.AddGMList
// (Defined, Public)
// Parameters:
// int                            GMUID                          (Parm)

void UwMatchMaker::AddGMList(int GMUID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.AddGMList");

	UwMatchMaker_AddGMList_Params params;
	params.GMUID = GMUID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.ClearGMList
// (Defined, Public)

void UwMatchMaker::ClearGMList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.ClearGMList");

	UwMatchMaker_ClearGMList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.PI_EnterRoom
// (Defined, Public)
// Parameters:
// int                            RoomID                         (Parm)
// int                            TeamID                         (Parm)

void UwMatchMaker::PI_EnterRoom(int RoomID, int TeamID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.PI_EnterRoom");

	UwMatchMaker_PI_EnterRoom_Params params;
	params.RoomID = RoomID;
	params.TeamID = TeamID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.PI_LeaveChannel
// (Defined, Public)

void UwMatchMaker::PI_LeaveChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.PI_LeaveChannel");

	UwMatchMaker_PI_LeaveChannel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.PI_EnterChannel
// (Defined, Public)
// Parameters:
// int                            ServerGroupID                  (Parm)
// struct FString                 ServerGroupName                (Parm, NeedCtorLink)
// int                            ServerID                       (Parm)
// struct FString                 ServerName                     (Parm, NeedCtorLink)
// int                            ChannelID                      (Parm)
// struct FString                 ChannelName                    (Parm, NeedCtorLink)
// bool                           bClanWarChannel                (OptionalParm, Parm)
// bool                           IsDedicatedServer              (OptionalParm, Parm)
// bool                           IsInNovcieChannel              (OptionalParm, Parm)

void UwMatchMaker::PI_EnterChannel(int ServerGroupID, const struct FString& ServerGroupName, int ServerID, const struct FString& ServerName, int ChannelID, const struct FString& ChannelName, bool bClanWarChannel, bool IsDedicatedServer, bool IsInNovcieChannel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.PI_EnterChannel");

	UwMatchMaker_PI_EnterChannel_Params params;
	params.ServerGroupID = ServerGroupID;
	params.ServerGroupName = ServerGroupName;
	params.ServerID = ServerID;
	params.ServerName = ServerName;
	params.ChannelID = ChannelID;
	params.ChannelName = ChannelName;
	params.bClanWarChannel = bClanWarChannel;
	params.IsDedicatedServer = IsDedicatedServer;
	params.IsInNovcieChannel = IsInNovcieChannel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateCharInfoAndReqClanUserList
// (Defined, Public)

void UwMatchMaker::UpdateCharInfoAndReqClanUserList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateCharInfoAndReqClanUserList");

	UwMatchMaker_UpdateCharInfoAndReqClanUserList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateQuestList
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateQuestList(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateQuestList");

	UwMatchMaker_UpdateQuestList_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateRecv_CharInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateRecv_CharInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateRecv_CharInfo");

	UwMatchMaker_UpdateRecv_CharInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdatePositionInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdatePositionInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdatePositionInfo");

	UwMatchMaker_UpdatePositionInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateClanInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateClanInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateClanInfo");

	UwMatchMaker_UpdateClanInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateMoneyInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateMoneyInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateMoneyInfo");

	UwMatchMaker_UpdateMoneyInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateEquipItemInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateEquipItemInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateEquipItemInfo");

	UwMatchMaker_UpdateEquipItemInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateRankingInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateRankingInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateRankingInfo");

	UwMatchMaker_UpdateRankingInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateCharInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateCharInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateCharInfo");

	UwMatchMaker_UpdateCharInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdateGameRoomInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdateGameRoomInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdateGameRoomInfo");

	UwMatchMaker_UpdateGameRoomInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.UpdatePCBangInfo
// (Public, Delegate)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMatchMaker::UpdatePCBangInfo(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.UpdatePCBangInfo");

	UwMatchMaker_UpdatePCBangInfo_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.CMDHK
// (Public, Delegate)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 Param1                         (OptionalParm, Parm, NeedCtorLink)
// struct FString                 Param2                         (OptionalParm, Parm, NeedCtorLink)
// struct FString                 param3                         (OptionalParm, Parm, NeedCtorLink)

void UwMatchMaker::CMDHK(int Index, const struct FString& Param1, const struct FString& Param2, const struct FString& param3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.CMDHK");

	UwMatchMaker_CMDHK_Params params;
	params.Index = Index;
	params.Param1 = Param1;
	params.Param2 = Param2;
	params.param3 = param3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchMaker.IsChannelRestrictionMaps
// (Defined, Public)
// Parameters:
// int                            MapNum                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsChannelRestrictionMaps(int MapNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsChannelRestrictionMaps");

	UwMatchMaker_IsChannelRestrictionMaps_Params params;
	params.MapNum = MapNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchMaker.IsChannelRestrictionModes
// (Defined, Public)
// Parameters:
// int                            ModeNum                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMatchMaker::IsChannelRestrictionModes(int ModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchMaker.IsChannelRestrictionModes");

	UwMatchMaker_IsChannelRestrictionModes_Params params;
	params.ModeNum = ModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.DamageLog
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Victim                         (Parm)
// float                          fDam                           (Parm)
// float                          fDist                          (Parm)
// TEnumAsByte<ECollisionPartsType> CParts                         (Parm)

void UwWeaponFire::DamageLog(class APawn* Victim, float fDam, float fDist, TEnumAsByte<ECollisionPartsType> CParts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.DamageLog");

	UwWeaponFire_DamageLog_Params params;
	params.Victim = Victim;
	params.fDam = fDam;
	params.fDist = fDist;
	params.CParts = CParts;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.MakeFireNoise
// (Defined, Public)

void UwWeaponFire::MakeFireNoise()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.MakeFireNoise");

	UwWeaponFire_MakeFireNoise_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.SetSpreadStance
// (Defined, Public)
// Parameters:
// TEnumAsByte<ESpreadStance>     ss                             (Parm)

void UwWeaponFire::SetSpreadStance(TEnumAsByte<ESpreadStance> ss)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.SetSpreadStance");

	UwWeaponFire_SetSpreadStance_Params params;
	params.ss = ss;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.wLoadOut
// (Defined, Simulated, Public)

void UwWeaponFire::wLoadOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.wLoadOut");

	UwWeaponFire_wLoadOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.Trace
// (Defined, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// struct FVector                 TraceEnd                       (Parm)
// struct FVector                 TraceStart                     (OptionalParm, Parm)
// bool                           bTraceActors                   (OptionalParm, Parm)
// struct FVector                 Extent                         (OptionalParm, Parm)
// class UMaterial*               Material                       (OptionalParm, Parm, OutParm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UwWeaponFire::Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.Trace");

	UwWeaponFire_Trace_Params params;
	params.TraceEnd = TraceEnd;
	params.TraceStart = TraceStart;
	params.bTraceActors = bTraceActors;
	params.Extent = Extent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (Material != nullptr)
		*Material = params.Material;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.Spawn
// (Defined, Public)
// Parameters:
// class UClass*                  SpawnClass                     (Parm)
// class AActor*                  SpawnOwner                     (OptionalParm, Parm)
// struct FName                   SpawnTag                       (OptionalParm, Parm)
// struct FVector                 SpawnLocation                  (OptionalParm, Parm)
// struct FRotator                SpawnRotation                  (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* UwWeaponFire::Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const struct FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.Spawn");

	UwWeaponFire_Spawn_Params params;
	params.SpawnClass = SpawnClass;
	params.SpawnOwner = SpawnOwner;
	params.SpawnTag = SpawnTag;
	params.SpawnLocation = SpawnLocation;
	params.SpawnRotation = SpawnRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.MaxRange
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwWeaponFire::MaxRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.MaxRange");

	UwWeaponFire_MaxRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void UwWeaponFire::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.DisplayDebug");

	UwWeaponFire_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.wWeaponFire.GetFireStart
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 X                              (Parm)
// struct FVector                 Y                              (Parm)
// struct FVector                 Z                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UwWeaponFire::GetFireStart(const struct FVector& X, const struct FVector& Y, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.GetFireStart");

	UwWeaponFire_GetFireStart_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.AdjustAim
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// float                          InAimError                     (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator UwWeaponFire::AdjustAim(const struct FVector& Start, float InAimError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.AdjustAim");

	UwWeaponFire_AdjustAim_Params params;
	params.Start = Start;
	params.InAimError = InAimError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.PlayFireEnd
// (Defined, Public)

void UwWeaponFire::PlayFireEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.PlayFireEnd");

	UwWeaponFire_PlayFireEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.PlayFiring
// (Defined, Public)

void UwWeaponFire::PlayFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.PlayFiring");

	UwWeaponFire_PlayFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.PlayStartHold
// (Defined, Public)

void UwWeaponFire::PlayStartHold()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.PlayStartHold");

	UwWeaponFire_PlayStartHold_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.PlayPreFire
// (Defined, Public)

void UwWeaponFire::PlayPreFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.PlayPreFire");

	UwWeaponFire_PlayPreFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.ServerPlayFiring
// (Defined, Public)

void UwWeaponFire::ServerPlayFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.ServerPlayFiring");

	UwWeaponFire_ServerPlayFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.AllowFire
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwWeaponFire::AllowFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.AllowFire");

	UwWeaponFire_AllowFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.ModeHoldFire
// (Defined, Event, Public)

void UwWeaponFire::ModeHoldFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.ModeHoldFire");

	UwWeaponFire_ModeHoldFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.ModeDoFire
// (Defined, Event, Public)

void UwWeaponFire::ModeDoFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.ModeDoFire");

	UwWeaponFire_ModeDoFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.SyncRandSeed
// (Defined, Simulated, Public)

void UwWeaponFire::SyncRandSeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.SyncRandSeed");

	UwWeaponFire_SyncRandSeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.ModeTick
// (Event, Public)
// Parameters:
// float                          dt                             (Parm)

void UwWeaponFire::ModeTick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.ModeTick");

	UwWeaponFire_ModeTick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.IsFiring
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwWeaponFire::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.IsFiring");

	UwWeaponFire_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.StopFiring
// (Defined, Public)

void UwWeaponFire::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.StopFiring");

	UwWeaponFire_StopFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.StartFiring
// (Defined, Public)

void UwWeaponFire::StartFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.StartFiring");

	UwWeaponFire_StartFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.Update
// (Defined, Public)
// Parameters:
// float                          dt                             (Parm)

void UwWeaponFire::Update(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.Update");

	UwWeaponFire_Update_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.StopForceFeedback
// (Defined, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)

void UwWeaponFire::StopForceFeedback(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.StopForceFeedback");

	UwWeaponFire_StopForceFeedback_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.ClientPlayForceFeedback
// (Defined, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)

void UwWeaponFire::ClientPlayForceFeedback(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.ClientPlayForceFeedback");

	UwWeaponFire_ClientPlayForceFeedback_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.ShakeView
// (Defined, Public)

void UwWeaponFire::ShakeView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.ShakeView");

	UwWeaponFire_ShakeView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.StartMuzzleSmoke
// (Defined, Public)

void UwWeaponFire::StartMuzzleSmoke()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.StartMuzzleSmoke");

	UwWeaponFire_StartMuzzleSmoke_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.FlashMuzzleFlash
// (Defined, Public)

void UwWeaponFire::FlashMuzzleFlash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.FlashMuzzleFlash");

	UwWeaponFire_FlashMuzzleFlash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.DrawMuzzleFlash
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UwWeaponFire::DrawMuzzleFlash(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.DrawMuzzleFlash");

	UwWeaponFire_DrawMuzzleFlash_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.DoFireEffectForClient
// (Defined, Public)

void UwWeaponFire::DoFireEffectForClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.DoFireEffectForClient");

	UwWeaponFire_DoFireEffectForClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.DoFireEffect
// (Defined, Public)

void UwWeaponFire::DoFireEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.DoFireEffect");

	UwWeaponFire_DoFireEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.AllowEffects
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwWeaponFire::AllowEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.AllowEffects");

	UwWeaponFire_AllowEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponFire.InitEffects
// (Defined, Simulated, Public)

void UwWeaponFire::InitEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.InitEffects");

	UwWeaponFire_InitEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.DestroyEffects
// (Defined, Simulated, Public)

void UwWeaponFire::DestroyEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.DestroyEffects");

	UwWeaponFire_DestroyEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.PostBeginPlay
// (Defined, Simulated, Public)

void UwWeaponFire::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.PostBeginPlay");

	UwWeaponFire_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.SetInitialState
// (Defined, Simulated, Event, Public)

void UwWeaponFire::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.SetInitialState");

	UwWeaponFire_SetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.PostNetBeginPlay
// (Simulated, Public)

void UwWeaponFire::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.PostNetBeginPlay");

	UwWeaponFire_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.BeginPlay
// (Simulated, Public)

void UwWeaponFire::BeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.BeginPlay");

	UwWeaponFire_BeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.PreBeginPlay
// (Simulated, Public)

void UwWeaponFire::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.PreBeginPlay");

	UwWeaponFire_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.Timer
// (Event, Public)

void UwWeaponFire::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.Timer");

	UwWeaponFire_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponFire.SetTimer
// (Defined, Simulated, Public)
// Parameters:
// float                          NewTimerRate                   (Parm)
// bool                           bLoop                          (Parm)

void UwWeaponFire::SetTimer(float NewTimerRate, bool bLoop)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponFire.SetTimer");

	UwWeaponFire_SetTimer_Params params;
	params.NewTimerRate = NewTimerRate;
	params.bLoop = bLoop;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BtrTraceResult.clearResultArray
// (Defined, Event, Public)

void UBtrTraceResult::clearResultArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BtrTraceResult.clearResultArray");

	UBtrTraceResult_clearResultArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BtrTraceResult.getResult
// (Defined, Event, Public)
// Parameters:
// struct FResultData             Data                           (Parm, OutParm)
// int                            Index                          (Parm)

void UBtrTraceResult::getResult(int Index, struct FResultData* Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BtrTraceResult.getResult");

	UBtrTraceResult_getResult_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Data != nullptr)
		*Data = params.Data;
}


// Function Engine.BtrTraceResult.addResult
// (Native, Public)
// Parameters:
// struct FResultData             Data                           (Parm)

void UBtrTraceResult::addResult(const struct FResultData& Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BtrTraceResult.addResult");

	UBtrTraceResult_addResult_Params params;
	params.Data = Data;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.MakeFireNoise
// (Defined, Public)

void UwInstantFire::MakeFireNoise()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.MakeFireNoise");

	UwInstantFire_MakeFireNoise_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void UwInstantFire::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DisplayDebug");

	UwInstantFire_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.wInstantFire.CalcSpread
// (Defined, Public)

void UwInstantFire::CalcSpread()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.CalcSpread");

	UwInstantFire_CalcSpread_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.SetSpreadStance
// (Defined, Public)
// Parameters:
// TEnumAsByte<ESpreadStance>     ss                             (Parm)

void UwInstantFire::SetSpreadStance(TEnumAsByte<ESpreadStance> ss)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.SetSpreadStance");

	UwInstantFire_SetSpreadStance_Params params;
	params.ss = ss;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.StartMuzzleSmoke
// (Defined, Public)

void UwInstantFire::StartMuzzleSmoke()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.StartMuzzleSmoke");

	UwInstantFire_StartMuzzleSmoke_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DrawMuzzleFlash
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UwInstantFire::DrawMuzzleFlash(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DrawMuzzleFlash");

	UwInstantFire_DrawMuzzleFlash_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DestroyEffects
// (Defined, Simulated, Public)

void UwInstantFire::DestroyEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DestroyEffects");

	UwInstantFire_DestroyEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.InitEffects
// (Defined, Simulated, Public)

void UwInstantFire::InitEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.InitEffects");

	UwInstantFire_InitEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.wLoadOut
// (Defined, Simulated, Public)

void UwInstantFire::wLoadOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.wLoadOut");

	UwInstantFire_wLoadOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.FlashMuzzleFlash
// (Defined, Public)

void UwInstantFire::FlashMuzzleFlash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.FlashMuzzleFlash");

	UwInstantFire_FlashMuzzleFlash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DoTrace
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)

void UwInstantFire::DoTrace(const struct FVector& Start, const struct FRotator& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DoTrace");

	UwInstantFire_DoTrace_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DoTraceForClient
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)

void UwInstantFire::DoTraceForClient(const struct FVector& Start, const struct FRotator& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DoTraceForClient");

	UwInstantFire_DoTraceForClient_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DoFireEffectForClient
// (Defined, Public)

void UwInstantFire::DoFireEffectForClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DoFireEffectForClient");

	UwInstantFire_DoFireEffectForClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DoTraceNative
// (Native, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)

void UwInstantFire::DoTraceNative(const struct FVector& Start, const struct FRotator& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DoTraceNative");

	UwInstantFire_DoTraceNative_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.DoFireEffect
// (Defined, Public)

void UwInstantFire::DoFireEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.DoFireEffect");

	UwInstantFire_DoFireEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.ModeTick
// (Defined, Event, Public)
// Parameters:
// float                          dt                             (Parm)

void UwInstantFire::ModeTick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.ModeTick");

	UwInstantFire_ModeTick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.MaxRange
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwInstantFire::MaxRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.MaxRange");

	UwInstantFire_MaxRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wInstantFire.ServerPlayFiring
// (Defined, Public)

void UwInstantFire::ServerPlayFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.ServerPlayFiring");

	UwInstantFire_ServerPlayFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.PlayFiring
// (Defined, Public)

void UwInstantFire::PlayFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.PlayFiring");

	UwInstantFire_PlayFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wInstantFire.AllowFire
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwInstantFire::AllowFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.AllowFire");

	UwInstantFire_AllowFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wInstantFire.ModeDoFire
// (Defined, Event, Public)

void UwInstantFire::ModeDoFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wInstantFire.ModeDoFire");

	UwInstantFire_ModeDoFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCapsuleRewardParam.SetRewardType
// (Defined, Public)
// Parameters:
// struct FString                 _type                          (Parm, NeedCtorLink)

void UwCapsuleRewardParam::SetRewardType(const struct FString& _type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCapsuleRewardParam.SetRewardType");

	UwCapsuleRewardParam_SetRewardType_Params params;
	params._type = _type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMapInfo.CopyTo
// (Defined, Public)
// Parameters:
// class UwMapInfo*               Dest                           (Parm)

void UwMapInfo::CopyTo(class UwMapInfo* Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapInfo.CopyTo");

	UwMapInfo_CopyTo_Params params;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wQuestParam.IsEnabledEventQuest
// (Defined, Public)
// Parameters:
// struct FBtrDouble              CurrentTime                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwQuestParam::IsEnabledEventQuest(const struct FBtrDouble& CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wQuestParam.IsEnabledEventQuest");

	UwQuestParam_IsEnabledEventQuest_Params params;
	params.CurrentTime = CurrentTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wQuestParam.IsEventQuest
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwQuestParam::IsEventQuest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wQuestParam.IsEventQuest");

	UwQuestParam_IsEventQuest_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.DrawTextPaddingOffsetRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FText                   Text                           (Parm, NeedCtorLink)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawTextPaddingOffsetRatio(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextPaddingOffsetRatio");

	UBTCustomDrawHK_DrawTextPaddingOffsetRatio_Params params;
	params.C = C;
	params.Text = Text;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawTextArrayRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// TArray<struct FText>           textArray                      (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// TEnumAsByte<ETextArrayDrawType> tadt                           (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBTCustomDrawHK::STATIC_DrawTextArrayRatio(class UCanvas* C, TArray<struct FText> textArray, TEnumAsByte<EDrawType> dt, TEnumAsByte<ETextArrayDrawType> tadt, float tL, float tT, float tR, float tB, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextArrayRatio");

	UBTCustomDrawHK_DrawTextArrayRatio_Params params;
	params.C = C;
	params.textArray = textArray;
	params.dt = dt;
	params.tadt = tadt;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.DrawStringPaddingOffsetRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          FontSize                       (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawStringPaddingOffsetRatio(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float FontSize, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawStringPaddingOffsetRatio");

	UBTCustomDrawHK_DrawStringPaddingOffsetRatio_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.FontSize = FontSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.BackShadowColor = BackShadowColor;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawStringRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawStringRatio(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawStringRatio");

	UBTCustomDrawHK_DrawStringRatio_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawTextCacheRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FText                   Text                           (Parm, NeedCtorLink)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawTextCacheRatio(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextCacheRatio");

	UBTCustomDrawHK_DrawTextCacheRatio_Params params;
	params.C = C;
	params.Text = Text;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawImagePaddingCacheRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawImagePaddingCacheRatio(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, int Level, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImagePaddingCacheRatio");

	UBTCustomDrawHK_DrawImagePaddingCacheRatio_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageCacheRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawImageCacheRatio(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageCacheRatio");

	UBTCustomDrawHK_DrawImageCacheRatio_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImagePaddingOffsetRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImagePaddingOffsetRatio(class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImagePaddingOffsetRatio");

	UBTCustomDrawHK_DrawImagePaddingOffsetRatio_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImagePaddingRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImagePaddingRatio(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImagePaddingRatio");

	UBTCustomDrawHK_DrawImagePaddingRatio_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawTextRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FText                   Text                           (Parm, NeedCtorLink)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawTextRatio(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextRatio");

	UBTCustomDrawHK_DrawTextRatio_Params params;
	params.C = C;
	params.Text = Text;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawImageRatio
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageRatio(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageRatio");

	UBTCustomDrawHK_DrawImageRatio_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.Get_0x0A_RemoveString
// (Defined, Static, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBTCustomDrawHK::STATIC_Get_0x0A_RemoveString(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.Get_0x0A_RemoveString");

	UBTCustomDrawHK_Get_0x0A_RemoveString_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.GetNumberString
// (Defined, Static, Public)
// Parameters:
// int                            Num                            (Parm)
// bool                           fixedsize                      (OptionalParm, Parm)
// int                            fixedlen                       (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBTCustomDrawHK::STATIC_GetNumberString(int Num, bool fixedsize, int fixedlen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.GetNumberString");

	UBTCustomDrawHK_GetNumberString_Params params;
	params.Num = Num;
	params.fixedsize = fixedsize;
	params.fixedlen = fixedlen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.IsInBox
// (Defined, Static, Public)
// Parameters:
// float                          boxx1                          (Parm)
// float                          boxx2                          (Parm)
// float                          boxy1                          (Parm)
// float                          boxy2                          (Parm)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBTCustomDrawHK::STATIC_IsInBox(float boxx1, float boxx2, float boxy1, float boxy2, float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.IsInBox");

	UBTCustomDrawHK_IsInBox_Params params;
	params.boxx1 = boxx1;
	params.boxx2 = boxx2;
	params.boxy1 = boxy1;
	params.boxy2 = boxy2;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.IsInFloatBox
// (Defined, Static, Public)
// Parameters:
// struct FFloatBox               Box                            (Parm)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBTCustomDrawHK::STATIC_IsInFloatBox(const struct FFloatBox& Box, float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.IsInFloatBox");

	UBTCustomDrawHK_IsInFloatBox_Params params;
	params.Box = Box;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.GetRatioIndex
// (Defined, Static, Public)
// Parameters:
// int                            width                          (Parm)
// int                            Height                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBTCustomDrawHK::STATIC_GetRatioIndex(int width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.GetRatioIndex");

	UBTCustomDrawHK_GetRatioIndex_Params params;
	params.width = width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeIntClass
// (Defined, Static, Public)
// Parameters:
// int                            A                              (Parm)
// class UIntClass*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UIntClass* UBTCustomDrawHK::STATIC_MakeIntClass(int A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeIntClass");

	UBTCustomDrawHK_MakeIntClass_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.FormatStringDiviedArray
// (Defined, Static, Public)
// Parameters:
// struct FString                 original                       (Parm, NeedCtorLink)
// TArray<struct FString>         args                           (Parm, NeedCtorLink)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> UBTCustomDrawHK::STATIC_FormatStringDiviedArray(const struct FString& original, TArray<struct FString> args)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.FormatStringDiviedArray");

	UBTCustomDrawHK_FormatStringDiviedArray_Params params;
	params.original = original;
	params.args = args;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.SplitString
// (Defined, Static, Public)
// Parameters:
// struct FString                 original                       (Parm, NeedCtorLink)
// TArray<struct FString>         temp                           (Parm, OutParm, NeedCtorLink)
// int                            ExceptDivideMode               (Parm)
// struct FString                 divider1                       (Parm, NeedCtorLink)
// struct FString                 divider2                       (OptionalParm, Parm, NeedCtorLink)
// struct FString                 divider3                       (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBTCustomDrawHK::STATIC_SplitString(const struct FString& original, int ExceptDivideMode, const struct FString& divider1, const struct FString& divider2, const struct FString& divider3, TArray<struct FString>* temp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.SplitString");

	UBTCustomDrawHK_SplitString_Params params;
	params.original = original;
	params.ExceptDivideMode = ExceptDivideMode;
	params.divider1 = divider1;
	params.divider2 = divider2;
	params.divider3 = divider3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (temp != nullptr)
		*temp = params.temp;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.FormatStringArray
// (Defined, Static, Public)
// Parameters:
// struct FString                 original                       (Parm, NeedCtorLink)
// TArray<struct FString>         args                           (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBTCustomDrawHK::STATIC_FormatStringArray(const struct FString& original, TArray<struct FString> args)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.FormatStringArray");

	UBTCustomDrawHK_FormatStringArray_Params params;
	params.original = original;
	params.args = args;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.FormatString
// (Defined, Static, Public)
// Parameters:
// struct FString                 original                       (Parm, NeedCtorLink)
// struct FString                 arg0                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg1                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg2                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg3                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg4                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg5                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg6                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg7                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 arg8                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBTCustomDrawHK::STATIC_FormatString(const struct FString& original, const struct FString& arg0, const struct FString& arg1, const struct FString& arg2, const struct FString& arg3, const struct FString& arg4, const struct FString& arg5, const struct FString& arg6, const struct FString& arg7, const struct FString& arg8)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.FormatString");

	UBTCustomDrawHK_FormatString_Params params;
	params.original = original;
	params.arg0 = arg0;
	params.arg1 = arg1;
	params.arg2 = arg2;
	params.arg3 = arg3;
	params.arg4 = arg4;
	params.arg5 = arg5;
	params.arg6 = arg6;
	params.arg7 = arg7;
	params.arg8 = arg8;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeResizeBox
// (Defined, Static, Public)
// Parameters:
// struct FFloatBox               inBox                          (Parm)
// int                            resizeX                        (Parm)
// int                            resizeY                        (OptionalParm, Parm)
// struct FFloatBox               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBox UBTCustomDrawHK::STATIC_MakeResizeBox(const struct FFloatBox& inBox, int resizeX, int resizeY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeResizeBox");

	UBTCustomDrawHK_MakeResizeBox_Params params;
	params.inBox = inBox;
	params.resizeX = resizeX;
	params.resizeY = resizeY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeEmptyBox
// (Defined, Static, Public)
// Parameters:
// struct FFloatBox               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBox UBTCustomDrawHK::STATIC_MakeEmptyBox()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeEmptyBox");

	UBTCustomDrawHK_MakeEmptyBox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeFloatBox
// (Defined, Static, Public)
// Parameters:
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// struct FFloatBox               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBox UBTCustomDrawHK::STATIC_MakeFloatBox(float X1, float Y1, float X2, float Y2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeFloatBox");

	UBTCustomDrawHK_MakeFloatBox_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.HasString
// (Defined, Static, Public)
// Parameters:
// struct FString                 Check                          (Parm, NeedCtorLink)
// struct FString                 word                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBTCustomDrawHK::STATIC_HasString(const struct FString& Check, const struct FString& word)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.HasString");

	UBTCustomDrawHK_HasString_Params params;
	params.Check = Check;
	params.word = word;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.SplitTextBounds
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// TArray<struct FString>         tarray                         (Parm, OutParm, NeedCtorLink)
// struct FString                 Text                           (Parm, NeedCtorLink)
// int                            FontSize                       (Parm)
// float                          clientWidth                    (Parm)

void UBTCustomDrawHK::STATIC_SplitTextBounds(class UCanvas* C, const struct FString& Text, int FontSize, float clientWidth, TArray<struct FString>* tarray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.SplitTextBounds");

	UBTCustomDrawHK_SplitTextBounds_Params params;
	params.C = C;
	params.Text = Text;
	params.FontSize = FontSize;
	params.clientWidth = clientWidth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (tarray != nullptr)
		*tarray = params.tarray;
}


// Function Engine.BTCustomDrawHK.DrawImageStretchedHK
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageStretchedHK(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageStretchedHK");

	UBTCustomDrawHK_DrawImageStretchedHK_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageStretchedCache
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawImageStretchedCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageStretchedCache");

	UBTCustomDrawHK_DrawImageStretchedCache_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageStretched
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageStretched(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageStretched");

	UBTCustomDrawHK_DrawImageStretched_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageStretchedWithClipArea
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          cL                             (Parm)
// float                          ct                             (Parm)
// float                          cR                             (Parm)
// float                          cb                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageStretchedWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageStretchedWithClipArea");

	UBTCustomDrawHK_DrawImageStretchedWithClipArea_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.cL = cL;
	params.ct = ct;
	params.cR = cR;
	params.cb = cb;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageScaleCache
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawImageScaleCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageScaleCache");

	UBTCustomDrawHK_DrawImageScaleCache_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageScale
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageScale(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageScale");

	UBTCustomDrawHK_DrawImageScale_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageScaleWithClipArea
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          cL                             (Parm)
// float                          ct                             (Parm)
// float                          cR                             (Parm)
// float                          cb                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageScaleWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageScaleWithClipArea");

	UBTCustomDrawHK_DrawImageScaleWithClipArea_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.cL = cL;
	params.ct = ct;
	params.cR = cR;
	params.cb = cb;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageOriginalWithClipArea
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          cL                             (Parm)
// float                          ct                             (Parm)
// float                          cR                             (Parm)
// float                          cb                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageOriginalWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageOriginalWithClipArea");

	UBTCustomDrawHK_DrawImageOriginalWithClipArea_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.cL = cL;
	params.ct = ct;
	params.cR = cR;
	params.cb = cb;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageWithClipArea
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          cL                             (Parm)
// float                          ct                             (Parm)
// float                          cR                             (Parm)
// float                          cb                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageWithClipArea");

	UBTCustomDrawHK_DrawImageWithClipArea_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.cL = cL;
	params.ct = ct;
	params.cR = cR;
	params.cb = cb;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageOriginalCache
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawImageOriginalCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageOriginalCache");

	UBTCustomDrawHK_DrawImageOriginalCache_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageOriginal
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageOriginal(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageOriginal");

	UBTCustomDrawHK_DrawImageOriginal_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageCache
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawImageCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageCache");

	UBTCustomDrawHK_DrawImageCache_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImage_Alpha
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          Alpha                          (Parm)

void UBTCustomDrawHK::STATIC_DrawImage_Alpha(class UCanvas* C, float tL, float tT, float tR, float tB, float Alpha, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImage_Alpha");

	UBTCustomDrawHK_DrawImage_Alpha_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Alpha = Alpha;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImage
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImage(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImage");

	UBTCustomDrawHK_DrawImage_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImagePaddingCache
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawImagePaddingCache(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, int Level, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImagePaddingCache");

	UBTCustomDrawHK_DrawImagePaddingCache_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImagePadding
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImagePadding(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImagePadding");

	UBTCustomDrawHK_DrawImagePadding_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImagePaddingOffset
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImagePaddingOffset(class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImagePaddingOffset");

	UBTCustomDrawHK_DrawImagePaddingOffset_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingOffsetAndClipping
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)
// float                          cL                             (Parm)
// float                          ct                             (Parm)
// float                          cR                             (Parm)
// float                          cb                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageScaleAllAndPaddingOffsetAndClipping(class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, float cL, float ct, float cR, float cb, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingOffsetAndClipping");

	UBTCustomDrawHK_DrawImageScaleAllAndPaddingOffsetAndClipping_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.cL = cL;
	params.ct = ct;
	params.cR = cR;
	params.cb = cb;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingAndClipping
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FImage                  img                            (Parm, OutParm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)
// float                          cL                             (Parm)
// float                          ct                             (Parm)
// float                          cR                             (Parm)
// float                          cb                             (Parm)

void UBTCustomDrawHK::STATIC_DrawImageScaleAllAndPaddingAndClipping(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, float cL, float ct, float cR, float cb, struct FImage* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingAndClipping");

	UBTCustomDrawHK_DrawImageScaleAllAndPaddingAndClipping_Params params;
	params.C = C;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.cL = cL;
	params.ct = ct;
	params.cR = cR;
	params.cb = cb;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (img != nullptr)
		*img = params.img;
}


// Function Engine.BTCustomDrawHK.DrawEllipsisStringPaddingOffset
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          FontSize                       (Parm)
// float                          widthPerc                      (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawEllipsisStringPaddingOffset(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, const struct FColor& BackShadowColor, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawEllipsisStringPaddingOffset");

	UBTCustomDrawHK_DrawEllipsisStringPaddingOffset_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.FontSize = FontSize;
	params.widthPerc = widthPerc;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.BackShadowColor = BackShadowColor;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawEllipsisStringPadding
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          FontSize                       (Parm)
// float                          widthPerc                      (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawEllipsisStringPadding(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, const struct FColor& BackShadowColor, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawEllipsisStringPadding");

	UBTCustomDrawHK_DrawEllipsisStringPadding_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.FontSize = FontSize;
	params.widthPerc = widthPerc;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.BackShadowColor = BackShadowColor;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawCullingString
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          widthPerc                      (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// bool                           cullRight                      (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawCullingString(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float widthPerc, float tL, float tT, float tR, float tB, bool cullRight, const struct FColor& BackShadowColor, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawCullingString");

	UBTCustomDrawHK_DrawCullingString_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.widthPerc = widthPerc;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.cullRight = cullRight;
	params.BackShadowColor = BackShadowColor;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawEllipsisString
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          widthPerc                      (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawEllipsisString(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float widthPerc, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawEllipsisString");

	UBTCustomDrawHK_DrawEllipsisString_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.widthPerc = widthPerc;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.GetDrawStringFloatBoxOLD
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// struct FFloatBox               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBox UBTCustomDrawHK::STATIC_GetDrawStringFloatBoxOLD(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.GetDrawStringFloatBoxOLD");

	UBTCustomDrawHK_GetDrawStringFloatBoxOLD_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.GetDrawStringFloatBoxLH
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// struct FFloatBox               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBox UBTCustomDrawHK::STATIC_GetDrawStringFloatBoxLH(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.GetDrawStringFloatBoxLH");

	UBTCustomDrawHK_GetDrawStringFloatBoxLH_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.GetDrawStringFloatBox
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// struct FFloatBox               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBox UBTCustomDrawHK::STATIC_GetDrawStringFloatBox(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.GetDrawStringFloatBox");

	UBTCustomDrawHK_GetDrawStringFloatBox_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.DrawStringCache
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawStringCache(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawStringCache");

	UBTCustomDrawHK_DrawStringCache_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawString
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawString(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawString");

	UBTCustomDrawHK_DrawString_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawStringModulateAlpha
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawStringModulateAlpha(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawStringModulateAlpha");

	UBTCustomDrawHK_DrawStringModulateAlpha_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawString_UseModulateColor
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          fntSize                        (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)
// bool                           bUseModulateColor              (OptionalParm, Parm)
// struct FPlane                  mColor                         (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawString_UseModulateColor(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, const struct FPlane& mColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawString_UseModulateColor");

	UBTCustomDrawHK_DrawString_UseModulateColor_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.fntSize = fntSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.BackShadowColor = BackShadowColor;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;
	params.bUseModulateColor = bUseModulateColor;
	params.mColor = mColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawStringPaddingOffset
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          FontSize                       (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawStringPaddingOffset(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float FontSize, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawStringPaddingOffset");

	UBTCustomDrawHK_DrawStringPaddingOffset_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.FontSize = FontSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.BackShadowColor = BackShadowColor;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawStringPadding
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// float                          FontSize                       (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)
// struct FColor                  BackShadowColor                (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawStringPadding(class UCanvas* C, const struct FString& Text, TEnumAsByte<EDrawType> dt, float FontSize, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, const struct FColor& BackShadowColor, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawStringPadding");

	UBTCustomDrawHK_DrawStringPadding_Params params;
	params.C = C;
	params.Text = Text;
	params.dt = dt;
	params.FontSize = FontSize;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;
	params.BackShadowColor = BackShadowColor;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawTextArray
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// TArray<struct FText>           textArray                      (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// TEnumAsByte<ETextArrayDrawType> tadt                           (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UBTCustomDrawHK::STATIC_DrawTextArray(class UCanvas* C, TArray<struct FText> textArray, TEnumAsByte<EDrawType> dt, TEnumAsByte<ETextArrayDrawType> tadt, float tL, float tT, float tR, float tB, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextArray");

	UBTCustomDrawHK_DrawTextArray_Params params;
	params.C = C;
	params.textArray = textArray;
	params.dt = dt;
	params.tadt = tadt;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.DrawTextCache
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FText                   Text                           (Parm, NeedCtorLink)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawTextCache(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextCache");

	UBTCustomDrawHK_DrawTextCache_Params params;
	params.C = C;
	params.Text = Text;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawText_UseModulateColor
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FText                   Text                           (Parm, NeedCtorLink)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)
// bool                           bUseModulateColor              (OptionalParm, Parm)
// struct FPlane                  mColor                         (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawText_UseModulateColor(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, const struct FPlane& mColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawText_UseModulateColor");

	UBTCustomDrawHK_DrawText_UseModulateColor_Params params;
	params.C = C;
	params.Text = Text;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;
	params.bUseModulateColor = bUseModulateColor;
	params.mColor = mColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawText
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FText                   Text                           (Parm, NeedCtorLink)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            PresetIndex                    (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UBTCustomDrawHK::STATIC_DrawText(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawText");

	UBTCustomDrawHK_DrawText_Params params;
	params.C = C;
	params.Text = Text;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.PresetIndex = PresetIndex;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawTextPaddingOffset
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FText                   Text                           (Parm, NeedCtorLink)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// int                            pL                             (Parm)
// int                            pT                             (Parm)
// int                            pR                             (Parm)
// int                            pB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawTextPaddingOffset(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextPaddingOffset");

	UBTCustomDrawHK_DrawTextPaddingOffset_Params params;
	params.C = C;
	params.Text = Text;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.DrawTextArrayPadding
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// TArray<struct FText>           textArray                      (Parm, NeedCtorLink)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// TEnumAsByte<ETextArrayDrawType> tadt                           (Parm)
// float                          tL                             (Parm)
// float                          tT                             (Parm)
// float                          tR                             (Parm)
// float                          tB                             (Parm)
// float                          pL                             (Parm)
// float                          pT                             (Parm)
// float                          pR                             (Parm)
// float                          pB                             (Parm)

void UBTCustomDrawHK::STATIC_DrawTextArrayPadding(class UCanvas* C, TArray<struct FText> textArray, TEnumAsByte<EDrawType> dt, TEnumAsByte<ETextArrayDrawType> tadt, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.DrawTextArrayPadding");

	UBTCustomDrawHK_DrawTextArrayPadding_Params params;
	params.C = C;
	params.textArray = textArray;
	params.dt = dt;
	params.tadt = tadt;
	params.tL = tL;
	params.tT = tT;
	params.tR = tR;
	params.tB = tB;
	params.pL = pL;
	params.pT = pT;
	params.pR = pR;
	params.pB = pB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTCustomDrawHK.ToDollarString
// (Defined, Static, Public)
// Parameters:
// struct FString                 money                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBTCustomDrawHK::STATIC_ToDollarString(const struct FString& money)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.ToDollarString");

	UBTCustomDrawHK_ToDollarString_Params params;
	params.money = money;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.ToWonString
// (Defined, Static, Public)
// Parameters:
// struct FString                 money                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UBTCustomDrawHK::STATIC_ToWonString(const struct FString& money)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.ToWonString");

	UBTCustomDrawHK_ToWonString_Params params;
	params.money = money;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeColorRGB
// (Defined, Static, Public)
// Parameters:
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor UBTCustomDrawHK::STATIC_MakeColorRGB(unsigned char R, unsigned char G, unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeColorRGB");

	UBTCustomDrawHK_MakeColorRGB_Params params;
	params.R = R;
	params.G = G;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeImageColor
// (Defined, Static, Public)
// Parameters:
// int                            width                          (Parm)
// int                            Height                         (Parm)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// class UMaterial*               img                            (Parm)
// struct FColor                  frontColor                     (Parm)
// struct FColor                  BackShadowColor                (Parm)
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UBTCustomDrawHK::STATIC_MakeImageColor(int width, int Height, TEnumAsByte<EDrawType> dt, class UMaterial* img, const struct FColor& frontColor, const struct FColor& BackShadowColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeImageColor");

	UBTCustomDrawHK_MakeImageColor_Params params;
	params.width = width;
	params.Height = Height;
	params.dt = dt;
	params.img = img;
	params.frontColor = frontColor;
	params.BackShadowColor = BackShadowColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeImage
// (Defined, Static, Public)
// Parameters:
// int                            width                          (Parm)
// int                            Height                         (Parm)
// TEnumAsByte<EDrawType>         dt                             (Parm)
// class UMaterial*               img                            (Parm)
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UBTCustomDrawHK::STATIC_MakeImage(int width, int Height, TEnumAsByte<EDrawType> dt, class UMaterial* img)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeImage");

	UBTCustomDrawHK_MakeImage_Params params;
	params.width = width;
	params.Height = Height;
	params.dt = dt;
	params.img = img;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeTextColor
// (Defined, Static, Public)
// Parameters:
// int                            fntSize                        (Parm)
// TEnumAsByte<EDrawType>         fntDrawType                    (Parm)
// struct FString                 txt                            (Parm, NeedCtorLink)
// struct FColor                  frontColor                     (Parm)
// struct FColor                  BackShadowColor                (Parm)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FText UBTCustomDrawHK::STATIC_MakeTextColor(int fntSize, TEnumAsByte<EDrawType> fntDrawType, const struct FString& txt, const struct FColor& frontColor, const struct FColor& BackShadowColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeTextColor");

	UBTCustomDrawHK_MakeTextColor_Params params;
	params.fntSize = fntSize;
	params.fntDrawType = fntDrawType;
	params.txt = txt;
	params.frontColor = frontColor;
	params.BackShadowColor = BackShadowColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTCustomDrawHK.MakeText
// (Defined, Static, Public)
// Parameters:
// int                            fntSize                        (Parm)
// TEnumAsByte<EDrawType>         fntDrawType                    (Parm)
// struct FString                 txt                            (Parm, NeedCtorLink)
// struct FText                   ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FText UBTCustomDrawHK::STATIC_MakeText(int fntSize, TEnumAsByte<EDrawType> fntDrawType, const struct FString& txt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTCustomDrawHK.MakeText");

	UBTCustomDrawHK_MakeText_Params params;
	params.fntSize = fntSize;
	params.fntDrawType = fntDrawType;
	params.txt = txt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddCapsuleRewardParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddCapsuleRewardParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddCapsuleRewardParams");

	UwGameManager_AddCapsuleRewardParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadCapsuleRewardParameters
// (Defined, Public)

void UwGameManager::LoadCapsuleRewardParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadCapsuleRewardParameters");

	UwGameManager_LoadCapsuleRewardParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.IsAlienMasterType
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::STATIC_IsAlienMasterType(TEnumAsByte<EAlienModeType> eObjType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsAlienMasterType");

	UwGameManager_IsAlienMasterType_Params params;
	params.eObjType = eObjType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsAlienType
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::STATIC_IsAlienType(TEnumAsByte<EAlienModeType> eObjType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsAlienType");

	UwGameManager_IsAlienType_Params params;
	params.eObjType = eObjType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsAlienHostType
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::STATIC_IsAlienHostType(TEnumAsByte<EAlienModeType> eObjType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsAlienHostType");

	UwGameManager_IsAlienHostType_Params params;
	params.eObjType = eObjType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsAlienTeamType
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::STATIC_IsAlienTeamType(TEnumAsByte<EAlienModeType> eObjType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsAlienTeamType");

	UwGameManager_IsAlienTeamType_Params params;
	params.eObjType = eObjType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsHumanTeamType
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::STATIC_IsHumanTeamType(TEnumAsByte<EAlienModeType> eObjType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsHumanTeamType");

	UwGameManager_IsHumanTeamType_Params params;
	params.eObjType = eObjType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsHumanType
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::STATIC_IsHumanType(TEnumAsByte<EAlienModeType> eObjType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsHumanType");

	UwGameManager_IsHumanType_Params params;
	params.eObjType = eObjType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsHeroType
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::STATIC_IsHeroType(TEnumAsByte<EAlienModeType> eObjType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsHeroType");

	UwGameManager_IsHeroType_Params params;
	params.eObjType = eObjType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsUseSkill_InGame
// (Defined, Public)
// Parameters:
// int                            iGameMode                      (Parm)
// int                            iItemID                        (Parm)
// unsigned char                  byModeItem                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsUseSkill_InGame(int iGameMode, int iItemID, unsigned char* byModeItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsUseSkill_InGame");

	UwGameManager_IsUseSkill_InGame_Params params;
	params.iGameMode = iGameMode;
	params.iItemID = iItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (byModeItem != nullptr)
		*byModeItem = params.byModeItem;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsUseItem_InGame
// (Defined, Public)
// Parameters:
// int                            iGameMode                      (Parm)
// int                            iItemID                        (Parm)
// unsigned char                  byModeItem                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsUseItem_InGame(int iGameMode, int iItemID, unsigned char* byModeItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsUseItem_InGame");

	UwGameManager_IsUseItem_InGame_Params params;
	params.iGameMode = iGameMode;
	params.iItemID = iItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (byModeItem != nullptr)
		*byModeItem = params.byModeItem;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetAlienModeAttackBuff
// (Defined, Public)
// Parameters:
// int                            iWeaponType                    (Parm)
// int                            Damage                         (Parm)
// int                            AttackLevel                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetAlienModeAttackBuff(int iWeaponType, int Damage, int AttackLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetAlienModeAttackBuff");

	UwGameManager_GetAlienModeAttackBuff_Params params;
	params.iWeaponType = iWeaponType;
	params.Damage = Damage;
	params.AttackLevel = AttackLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetSkillTypeMax
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::STATIC_GetSkillTypeMax()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetSkillTypeMax");

	UwGameManager_GetSkillTypeMax_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.EquipOnlyModeItem
// (Defined, Public)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)
// class UwItemBoxHK*             ItemInfo                       (Parm)
// class UwItemBoxInstanceHK*     instanceInfo                   (Parm)

void UwGameManager::EquipOnlyModeItem(class UwMatchMaker* MM, class UwItemBoxHK* ItemInfo, class UwItemBoxInstanceHK* instanceInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.EquipOnlyModeItem");

	UwGameManager_EquipOnlyModeItem_Params params;
	params.MM = MM;
	params.ItemInfo = ItemInfo;
	params.instanceInfo = instanceInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetItemSlotByItemType
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// unsigned char                  byTeamIndex                    (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetItemSlotByItemType(class UwItemBoxHK* ItemInfo, unsigned char byTeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemSlotByItemType");

	UwGameManager_GetItemSlotByItemType_Params params;
	params.ItemInfo = ItemInfo;
	params.byTeamIndex = byTeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckOnlyModeItem
// (Defined, Public)
// Parameters:
// unsigned char                  byModeItem                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckOnlyModeItem(unsigned char byModeItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckOnlyModeItem");

	UwGameManager_CheckOnlyModeItem_Params params;
	params.byModeItem = byModeItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckBlackbox_Key
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckBlackbox_Key(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckBlackbox_Key");

	UwGameManager_CheckBlackbox_Key_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckCapsule_Coupon
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckCapsule_Coupon(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckCapsule_Coupon");

	UwGameManager_CheckCapsule_Coupon_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckBlackbox
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckBlackbox(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckBlackbox");

	UwGameManager_CheckBlackbox_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckCapsuleItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckCapsuleItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckCapsuleItem");

	UwGameManager_CheckCapsuleItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckSpCharItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckSpCharItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckSpCharItem");

	UwGameManager_CheckSpCharItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckAccessoryItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckAccessoryItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckAccessoryItem");

	UwGameManager_CheckAccessoryItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckFaceItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckFaceItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckFaceItem");

	UwGameManager_CheckFaceItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckHeadItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckHeadItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckHeadItem");

	UwGameManager_CheckHeadItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckThrowingWeapon
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckThrowingWeapon(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckThrowingWeapon");

	UwGameManager_CheckThrowingWeapon_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckCamouflage
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckCamouflage(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckCamouflage");

	UwGameManager_CheckCamouflage_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckPouch
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckPouch(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckPouch");

	UwGameManager_CheckPouch_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckBackPack
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckBackPack(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckBackPack");

	UwGameManager_CheckBackPack_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckLvMark
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckLvMark(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckLvMark");

	UwGameManager_CheckLvMark_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckRandBoxItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckRandBoxItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckRandBoxItem");

	UwGameManager_CheckRandBoxItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckUseItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckUseItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckUseItem");

	UwGameManager_CheckUseItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckItemBox
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckItemBox(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckItemBox");

	UwGameManager_CheckItemBox_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckSkillItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckSkillItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckSkillItem");

	UwGameManager_CheckSkillItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckPistolItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckPistolItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckPistolItem");

	UwGameManager_CheckPistolItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckMGItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckMGItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckMGItem");

	UwGameManager_CheckMGItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckSGItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckSGItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckSGItem");

	UwGameManager_CheckSGItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckSRItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckSRItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckSRItem");

	UwGameManager_CheckSRItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckSMGItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckSMGItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckSMGItem");

	UwGameManager_CheckSMGItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckARItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckARItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckARItem");

	UwGameManager_CheckARItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckEquipQuickSlotItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckEquipQuickSlotItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckEquipQuickSlotItem");

	UwGameManager_CheckEquipQuickSlotItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckMainQuickSlotItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckMainQuickSlotItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckMainQuickSlotItem");

	UwGameManager_CheckMainQuickSlotItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckQuickSlotItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckQuickSlotItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckQuickSlotItem");

	UwGameManager_CheckQuickSlotItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckSubWeaponItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckSubWeaponItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckSubWeaponItem");

	UwGameManager_CheckSubWeaponItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckMainWeaponItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckMainWeaponItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckMainWeaponItem");

	UwGameManager_CheckMainWeaponItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CheckWeaponItem
// (Defined, Public)
// Parameters:
// int                            iItemType                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CheckWeaponItem(int iItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CheckWeaponItem");

	UwGameManager_CheckWeaponItem_Params params;
	params.iItemType = iItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetEAXEffect
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 strEffectClassName             (Parm, NeedCtorLink)
// class UI3DL2Listener*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UI3DL2Listener* UwGameManager::GetEAXEffect(const struct FString& strEffectClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetEAXEffect");

	UwGameManager_GetEAXEffect_Params params;
	params.strEffectClassName = strEffectClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLevelImageString
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            LevelMarkID                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameManager::GetLevelImageString(int Level, int LevelMarkID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevelImageString");

	UwGameManager_GetLevelImageString_Params params;
	params.Level = Level;
	params.LevelMarkID = LevelMarkID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLevelImageCoordi
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            LevelMarkID                    (OptionalParm, Parm)
// struct FFloatBox               ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBox UwGameManager::GetLevelImageCoordi(int Level, int LevelMarkID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevelImageCoordi");

	UwGameManager_GetLevelImageCoordi_Params params;
	params.Level = Level;
	params.LevelMarkID = LevelMarkID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanLevelImages
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameManager::GetClanLevelImages(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanLevelImages");

	UwGameManager_GetClanLevelImages_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLevelByLevelMarkID
// (Defined, Public)
// Parameters:
// int                            LevelMarkID                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetLevelByLevelMarkID(int LevelMarkID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevelByLevelMarkID");

	UwGameManager_GetLevelByLevelMarkID_Params params;
	params.LevelMarkID = LevelMarkID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLevel
// (Defined, Public)
// Parameters:
// int                            Exp                            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetLevel(int Exp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevel");

	UwGameManager_GetLevel_Params params;
	params.Exp = Exp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.LoadSupplyRandomTable
// (Defined, Public)

void UwGameManager::LoadSupplyRandomTable()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadSupplyRandomTable");

	UwGameManager_LoadSupplyRandomTable_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadMapInfos
// (Defined, Public)

void UwGameManager::LoadMapInfos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadMapInfos");

	UwGameManager_LoadMapInfos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetPaintingItemIDbyPaintingID
// (Defined, Public)
// Parameters:
// int                            PaintingID                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetPaintingItemIDbyPaintingID(int PaintingID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPaintingItemIDbyPaintingID");

	UwGameManager_GetPaintingItemIDbyPaintingID_Params params;
	params.PaintingID = PaintingID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetPaintGroupParamsIndex
// (Defined, Public)
// Parameters:
// int                            PaintingID                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetPaintGroupParamsIndex(int PaintingID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPaintGroupParamsIndex");

	UwGameManager_GetPaintGroupParamsIndex_Params params;
	params.PaintingID = PaintingID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetPaintGroupParam
// (Defined, Public)
// Parameters:
// int                            iPaintingID                    (Parm)
// class UwPaintGroupParam*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UwPaintGroupParam* UwGameManager::GetPaintGroupParam(int iPaintingID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPaintGroupParam");

	UwGameManager_GetPaintGroupParam_Params params;
	params.iPaintingID = iPaintingID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetPaintingUIIcon
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameManager::GetPaintingUIIcon(int iItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPaintingUIIcon");

	UwGameManager_GetPaintingUIIcon_Params params;
	params.iItemID = iItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddPaintGroupParam_NullData
// (Defined, Public)

void UwGameManager::AddPaintGroupParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddPaintGroupParam_NullData");

	UwGameManager_AddPaintGroupParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddPaintGroupParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddPaintGroupParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddPaintGroupParams");

	UwGameManager_AddPaintGroupParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadPaintGroupParameters
// (Defined, Public)

void UwGameManager::LoadPaintGroupParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadPaintGroupParameters");

	UwGameManager_LoadPaintGroupParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetPartsGroupPainting
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// int                            iPartsID                       (Parm)
// bool                           bThird                         (OptionalParm, Parm)
// int                            iPainting_Item_ID              (OptionalParm, Parm)
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* UwGameManager::GetPartsGroupPainting(int iItemID, int iPartsID, bool bThird, int iPainting_Item_ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPartsGroupPainting");

	UwGameManager_GetPartsGroupPainting_Params params;
	params.iItemID = iItemID;
	params.iPartsID = iPartsID;
	params.bThird = bThird;
	params.iPainting_Item_ID = iPainting_Item_ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetDefaultAddPartsGroupParam
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// class UwPartsGroupParam*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UwPartsGroupParam* UwGameManager::GetDefaultAddPartsGroupParam(int iItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetDefaultAddPartsGroupParam");

	UwGameManager_GetDefaultAddPartsGroupParam_Params params;
	params.iItemID = iItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetAddPartsGroupParam
// (Defined, Public)
// Parameters:
// int                            iPartsGrouplID                 (Parm)
// class UwPartsGroupParam*       ReturnValue                    (Parm, OutParm, ReturnParm)

class UwPartsGroupParam* UwGameManager::GetAddPartsGroupParam(int iPartsGrouplID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetAddPartsGroupParam");

	UwGameManager_GetAddPartsGroupParam_Params params;
	params.iPartsGrouplID = iPartsGrouplID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddAddPartsGroupParam_NullData
// (Defined, Public)

void UwGameManager::AddAddPartsGroupParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddAddPartsGroupParam_NullData");

	UwGameManager_AddAddPartsGroupParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddAddPartsGroupParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddAddPartsGroupParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddAddPartsGroupParams");

	UwGameManager_AddAddPartsGroupParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadAddPartsGroupParameters
// (Defined, Public)

void UwGameManager::LoadAddPartsGroupParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadAddPartsGroupParameters");

	UwGameManager_LoadAddPartsGroupParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddItemBoxParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddItemBoxParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddItemBoxParams");

	UwGameManager_AddItemBoxParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddItemBoxParam_NullData
// (Defined, Public)

void UwGameManager::AddItemBoxParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddItemBoxParam_NullData");

	UwGameManager_AddItemBoxParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadItemBoxParameters
// (Defined, Public)

void UwGameManager::LoadItemBoxParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadItemBoxParameters");

	UwGameManager_LoadItemBoxParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetClanMark128
// (Defined, Public)
// Parameters:
// int                            clanmarkid                     (Parm)
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UwGameManager::GetClanMark128(int clanmarkid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanMark128");

	UwGameManager_GetClanMark128_Params params;
	params.clanmarkid = clanmarkid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanMark32
// (Defined, Public)
// Parameters:
// int                            clanmarkid                     (Parm)
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UwGameManager::GetClanMark32(int clanmarkid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanMark32");

	UwGameManager_GetClanMark32_Params params;
	params.clanmarkid = clanmarkid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetMyClanBL
// (Defined, Public)
// Parameters:
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UwGameManager::GetMyClanBL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMyClanBL");

	UwGameManager_GetMyClanBL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetMyClanBG
// (Defined, Public)
// Parameters:
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UwGameManager::GetMyClanBG()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMyClanBG");

	UwGameManager_GetMyClanBG_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetMyClanPattern
// (Defined, Public)
// Parameters:
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UwGameManager::GetMyClanPattern()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMyClanPattern");

	UwGameManager_GetMyClanPattern_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindClanMarkIndex
// (Defined, Public)
// Parameters:
// int                            clanmarkid                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::FindClanMarkIndex(int clanmarkid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindClanMarkIndex");

	UwGameManager_FindClanMarkIndex_Params params;
	params.clanmarkid = clanmarkid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindClanMarkParams
// (Defined, Public)
// Parameters:
// int                            clanmarkid                     (Parm)
// class UwClanMarkParam*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UwClanMarkParam* UwGameManager::FindClanMarkParams(int clanmarkid)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindClanMarkParams");

	UwGameManager_FindClanMarkParams_Params params;
	params.clanmarkid = clanmarkid;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddClanMarkParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddClanMarkParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddClanMarkParams");

	UwGameManager_AddClanMarkParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddClanMarkParam_NullData
// (Defined, Public)

void UwGameManager::AddClanMarkParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddClanMarkParam_NullData");

	UwGameManager_AddClanMarkParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadModeDOAParameters
// (Defined, Public)

void UwGameManager::LoadModeDOAParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadModeDOAParameters");

	UwGameManager_LoadModeDOAParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetRandBoxItems
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            RandNum                        (Parm)
// TArray<int>                    ItemIDs                        (Parm, OutParm, NeedCtorLink)
// TArray<int>                    PartIDs                        (Parm, OutParm, NeedCtorLink)
// TArray<int>                    BestItemIDs                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::GetRandBoxItems(int ItemID, int RandNum, TArray<int>* ItemIDs, TArray<int>* PartIDs, TArray<int>* BestItemIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetRandBoxItems");

	UwGameManager_GetRandBoxItems_Params params;
	params.ItemID = ItemID;
	params.RandNum = RandNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ItemIDs != nullptr)
		*ItemIDs = params.ItemIDs;
	if (PartIDs != nullptr)
		*PartIDs = params.PartIDs;
	if (BestItemIDs != nullptr)
		*BestItemIDs = params.BestItemIDs;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetRandBoxItemsCount
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetRandBoxItemsCount(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetRandBoxItemsCount");

	UwGameManager_GetRandBoxItemsCount_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetItemBoxItems
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            RandNum                        (Parm)
// TArray<int>                    ItemIDs                        (Parm, OutParm, NeedCtorLink)
// TArray<int>                    PartIDs                        (Parm, OutParm, NeedCtorLink)
// TArray<int>                    BestItemIDs                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::GetItemBoxItems(int ItemID, int RandNum, TArray<int>* ItemIDs, TArray<int>* PartIDs, TArray<int>* BestItemIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemBoxItems");

	UwGameManager_GetItemBoxItems_Params params;
	params.ItemID = ItemID;
	params.RandNum = RandNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ItemIDs != nullptr)
		*ItemIDs = params.ItemIDs;
	if (PartIDs != nullptr)
		*PartIDs = params.PartIDs;
	if (BestItemIDs != nullptr)
		*BestItemIDs = params.BestItemIDs;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetItemBoxItemsCount
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetItemBoxItemsCount(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemBoxItemsCount");

	UwGameManager_GetItemBoxItemsCount_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddRandBoxParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddRandBoxParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddRandBoxParams");

	UwGameManager_AddRandBoxParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddRandBoxParam_NullData
// (Defined, Public)

void UwGameManager::AddRandBoxParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddRandBoxParam_NullData");

	UwGameManager_AddRandBoxParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadRandBoxParameters
// (Defined, Public)

void UwGameManager::LoadRandBoxParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadRandBoxParameters");

	UwGameManager_LoadRandBoxParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetLastDailyQuestID
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetLastDailyQuestID(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLastDailyQuestID");

	UwGameManager_GetLastDailyQuestID_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetPrevDailyQuestID
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetPrevDailyQuestID(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPrevDailyQuestID");

	UwGameManager_GetPrevDailyQuestID_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetDailyQuestIDFromTypeAndStep
// (Defined, Public)
// Parameters:
// int                            ServerTime                     (Parm)
// int                            DailyQuestType                 (Parm)
// int                            Step                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetDailyQuestIDFromTypeAndStep(int ServerTime, int DailyQuestType, int Step)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetDailyQuestIDFromTypeAndStep");

	UwGameManager_GetDailyQuestIDFromTypeAndStep_Params params;
	params.ServerTime = ServerTime;
	params.DailyQuestType = DailyQuestType;
	params.Step = Step;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetDailyQuestRewardItemCount
// (Defined, Public)
// Parameters:
// int                            RewardID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetDailyQuestRewardItemCount(int RewardID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetDailyQuestRewardItemCount");

	UwGameManager_GetDailyQuestRewardItemCount_Params params;
	params.RewardID = RewardID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetDailyQuestType
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetDailyQuestType(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetDailyQuestType");

	UwGameManager_GetDailyQuestType_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddDailyQuestRewardParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddDailyQuestRewardParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddDailyQuestRewardParams");

	UwGameManager_AddDailyQuestRewardParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddDailyQuestParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddDailyQuestParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddDailyQuestParams");

	UwGameManager_AddDailyQuestParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddDailyQuestParam_NullData
// (Defined, Public)

void UwGameManager::AddDailyQuestParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddDailyQuestParam_NullData");

	UwGameManager_AddDailyQuestParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadDailyQuestRewardParameters
// (Defined, Public)

void UwGameManager::LoadDailyQuestRewardParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadDailyQuestRewardParameters");

	UwGameManager_LoadDailyQuestRewardParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadDailyQuestParameters
// (Defined, Public)

void UwGameManager::LoadDailyQuestParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadDailyQuestParameters");

	UwGameManager_LoadDailyQuestParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.TimeStringToBtrTime
// (Defined, Public)
// Parameters:
// struct FString                 strInTime                      (Parm, NeedCtorLink)
// struct FBtrTime                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBtrTime UwGameManager::TimeStringToBtrTime(const struct FString& strInTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.TimeStringToBtrTime");

	UwGameManager_TimeStringToBtrTime_Params params;
	params.strInTime = strInTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.HasEnableEventQuest
// (Defined, Public)
// Parameters:
// struct FBtrDouble              ServerTime                     (Parm)
// class UwMatchMaker*            wMM                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::HasEnableEventQuest(const struct FBtrDouble& ServerTime, class UwMatchMaker* wMM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.HasEnableEventQuest");

	UwGameManager_HasEnableEventQuest_Params params;
	params.ServerTime = ServerTime;
	params.wMM = wMM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLinkQuestMaxStep
// (Defined, Public)
// Parameters:
// int                            LinkQuestID                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetLinkQuestMaxStep(int LinkQuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLinkQuestMaxStep");

	UwGameManager_GetLinkQuestMaxStep_Params params;
	params.LinkQuestID = LinkQuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLinkQuestInfo
// (Defined, Public)
// Parameters:
// int                            LinkQuestID                    (Parm)
// int                            LinkQuestStep                  (Parm)
// class UwQuestParam*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwQuestParam* UwGameManager::GetLinkQuestInfo(int LinkQuestID, int LinkQuestStep)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLinkQuestInfo");

	UwGameManager_GetLinkQuestInfo_Params params;
	params.LinkQuestID = LinkQuestID;
	params.LinkQuestStep = LinkQuestStep;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetQuestInfoIndex
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetQuestInfoIndex(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetQuestInfoIndex");

	UwGameManager_GetQuestInfoIndex_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetQuestInfoFromIndex
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// class UwQuestParam*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwQuestParam* UwGameManager::GetQuestInfoFromIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetQuestInfoFromIndex");

	UwGameManager_GetQuestInfoFromIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetQuestInfo
// (Defined, Public)
// Parameters:
// int                            QuestID                        (Parm)
// class UwQuestParam*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwQuestParam* UwGameManager::GetQuestInfo(int QuestID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetQuestInfo");

	UwGameManager_GetQuestInfo_Params params;
	params.QuestID = QuestID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetItemType
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// class UwItemBoxInstanceHK*     instanceInfo                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetItemType(class UwItemBoxHK* ItemInfo, class UwItemBoxInstanceHK* instanceInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemType");

	UwGameManager_GetItemType_Params params;
	params.ItemInfo = ItemInfo;
	params.instanceInfo = instanceInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsEnableWeaponModify
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsEnableWeaponModify(class UwItemBoxHK* ItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsEnableWeaponModify");

	UwGameManager_IsEnableWeaponModify_Params params;
	params.ItemInfo = ItemInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddQuestParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddQuestParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddQuestParams");

	UwGameManager_AddQuestParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddQuestParam_NullData
// (Defined, Public)

void UwGameManager::AddQuestParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddQuestParam_NullData");

	UwGameManager_AddQuestParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadQuestParameters
// (Defined, Public)

void UwGameManager::LoadQuestParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadQuestParameters");

	UwGameManager_LoadQuestParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetPromotionItems
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// TArray<class UwPromotionParam*> arrItems                       (Parm, OutParm, NeedCtorLink)

void UwGameManager::GetPromotionItems(int Level, TArray<class UwPromotionParam*>* arrItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPromotionItems");

	UwGameManager_GetPromotionItems_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (arrItems != nullptr)
		*arrItems = params.arrItems;
}


// Function Engine.wGameManager.GetPromotionItemsCount
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetPromotionItemsCount(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPromotionItemsCount");

	UwGameManager_GetPromotionItemsCount_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddPromotionParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddPromotionParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddPromotionParams");

	UwGameManager_AddPromotionParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddPromotionParam_NullData
// (Defined, Public)

void UwGameManager::AddPromotionParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddPromotionParam_NullData");

	UwGameManager_AddPromotionParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadPromotionParameters
// (Defined, Public)

void UwGameManager::LoadPromotionParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadPromotionParameters");

	UwGameManager_LoadPromotionParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddClanLevelInfoParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddClanLevelInfoParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddClanLevelInfoParams");

	UwGameManager_AddClanLevelInfoParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddClanLevelInfoParam_NullData
// (Defined, Public)

void UwGameManager::AddClanLevelInfoParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddClanLevelInfoParam_NullData");

	UwGameManager_AddClanLevelInfoParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadClanLevelInfoParams
// (Defined, Public)

void UwGameManager::LoadClanLevelInfoParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadClanLevelInfoParams");

	UwGameManager_LoadClanLevelInfoParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddLevelInfoParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddLevelInfoParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddLevelInfoParams");

	UwGameManager_AddLevelInfoParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddLevelInfoParam_NullData
// (Defined, Public)

void UwGameManager::AddLevelInfoParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddLevelInfoParam_NullData");

	UwGameManager_AddLevelInfoParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadLevelInfoParams
// (Defined, Public)

void UwGameManager::LoadLevelInfoParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadLevelInfoParams");

	UwGameManager_LoadLevelInfoParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetSkillParam
// (Defined, Public)
// Parameters:
// int                            iSkillID                       (Parm)
// class UwSkillBaseParam*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UwSkillBaseParam* UwGameManager::GetSkillParam(int iSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetSkillParam");

	UwGameManager_GetSkillParam_Params params;
	params.iSkillID = iSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddSkillParam_NullData
// (Defined, Public)

void UwGameManager::AddSkillParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddSkillParam_NullData");

	UwGameManager_AddSkillParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddSkillParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddSkillParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddSkillParams");

	UwGameManager_AddSkillParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadSkillParameters
// (Defined, Public)

void UwGameManager::LoadSkillParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadSkillParameters");

	UwGameManager_LoadSkillParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetItemResourceStaticMesh
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// bool                           b3rd                           (Parm)
// unsigned char                  byTeam                         (OptionalParm, Parm)
// unsigned char                  byCase                         (OptionalParm, Parm)
// class UStaticMesh*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UStaticMesh* UwGameManager::GetItemResourceStaticMesh(int iItemID, bool b3rd, unsigned char byTeam, unsigned char byCase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemResourceStaticMesh");

	UwGameManager_GetItemResourceStaticMesh_Params params;
	params.iItemID = iItemID;
	params.b3rd = b3rd;
	params.byTeam = byTeam;
	params.byCase = byCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetItemResourceMesh
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// bool                           b3rd                           (Parm)
// unsigned char                  byTeam                         (OptionalParm, Parm)
// unsigned char                  byCase                         (OptionalParm, Parm)
// class UMesh*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UMesh* UwGameManager::GetItemResourceMesh(int iItemID, bool b3rd, unsigned char byTeam, unsigned char byCase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemResourceMesh");

	UwGameManager_GetItemResourceMesh_Params params;
	params.iItemID = iItemID;
	params.b3rd = b3rd;
	params.byTeam = byTeam;
	params.byCase = byCase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.PrecacheItemResources
// (Defined, Public)
// Parameters:
// class ALevelInfo*              Level                          (Parm)

void UwGameManager::PrecacheItemResources(class ALevelInfo* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.PrecacheItemResources");

	UwGameManager_PrecacheItemResources_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetItemResourceParam
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// class UwItemResourceParam*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemResourceParam* UwGameManager::GetItemResourceParam(int iItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemResourceParam");

	UwGameManager_GetItemResourceParam_Params params;
	params.iItemID = iItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddItemResourceParam_NullData
// (Defined, Public)

void UwGameManager::AddItemResourceParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddItemResourceParam_NullData");

	UwGameManager_AddItemResourceParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddItemResourceParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)

void UwGameManager::AddItemResourceParams(class UBTNetGameData* GameData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddItemResourceParams");

	UwGameManager_AddItemResourceParams_Params params;
	params.GameData = GameData;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadItemResourceParams
// (Defined, Public)

void UwGameManager::LoadItemResourceParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadItemResourceParams");

	UwGameManager_LoadItemResourceParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetItemParam
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// class UwItemBaseParam*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBaseParam* UwGameManager::GetItemParam(int iItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemParam");

	UwGameManager_GetItemParam_Params params;
	params.iItemID = iItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddItemParam_NullData
// (Defined, Public)

void UwGameManager::AddItemParam_NullData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddItemParam_NullData");

	UwGameManager_AddItemParam_NullData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddItemParams
// (Defined, Public)
// Parameters:
// class UBTNetGameData*          GameData                       (Parm)
// class UwWeaponManager*         weaponManager                  (Parm)

void UwGameManager::AddItemParams(class UBTNetGameData* GameData, class UwWeaponManager* weaponManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddItemParams");

	UwGameManager_AddItemParams_Params params;
	params.GameData = GameData;
	params.weaponManager = weaponManager;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadItemParameters
// (Defined, Public)
// Parameters:
// class UwWeaponManager*         weaponManager                  (Parm)

void UwGameManager::LoadItemParameters(class UwWeaponManager* weaponManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadItemParameters");

	UwGameManager_LoadItemParameters_Params params;
	params.weaponManager = weaponManager;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.DestroyScript
// (Defined, Event, Public)

void UwGameManager::DestroyScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.DestroyScript");

	UwGameManager_DestroyScript_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.ContainsBadNicks
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)
// struct FString                 badword                        (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ContainsBadNicks(const struct FString& S, struct FString* badword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ContainsBadNicks");

	UwGameManager_ContainsBadNicks_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (badword != nullptr)
		*badword = params.badword;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FilterBadWords
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::FilterBadWords(struct FString* S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FilterBadWords");

	UwGameManager_FilterBadWords_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (S != nullptr)
		*S = params.S;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ContainsBadWords
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)
// struct FString                 badword                        (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ContainsBadWords(const struct FString& S, struct FString* badword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ContainsBadWords");

	UwGameManager_ContainsBadWords_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (badword != nullptr)
		*badword = params.badword;

	return params.ReturnValue;
}


// Function Engine.wGameManager.LoadBadwords
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadBadwords(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadBadwords");

	UwGameManager_LoadBadwords_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetAlienCharParamByShopId
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// class UwAlienCharParam*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAlienCharParam* UwGameManager::GetAlienCharParamByShopId(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetAlienCharParamByShopId");

	UwGameManager_GetAlienCharParamByShopId_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetAlienCharParam
// (Defined, Public)
// Parameters:
// unsigned char                  bySkinID                       (Parm)
// class UwAlienCharParam*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAlienCharParam* UwGameManager::GetAlienCharParam(unsigned char bySkinID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetAlienCharParam");

	UwGameManager_GetAlienCharParam_Params params;
	params.bySkinID = bySkinID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetAlienGameAttackBuff
// (Defined, Public)
// Parameters:
// unsigned char                  Level                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwGameManager::GetAlienGameAttackBuff(unsigned char Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetAlienGameAttackBuff");

	UwGameManager_GetAlienGameAttackBuff_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetMaxHeroCount
// (Defined, Public)
// Parameters:
// int                            iPlayerCount                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetMaxHeroCount(int iPlayerCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMaxHeroCount");

	UwGameManager_GetMaxHeroCount_Params params;
	params.iPlayerCount = iPlayerCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetMaxHostAlienCount
// (Defined, Public)
// Parameters:
// int                            iPlayerCount                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetMaxHostAlienCount(int iPlayerCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMaxHostAlienCount");

	UwGameManager_GetMaxHostAlienCount_Params params;
	params.iPlayerCount = iPlayerCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetStartAlienHP
// (Defined, Public)
// Parameters:
// TEnumAsByte<EAlienModeType>    eObjType                       (Parm)
// int                            bySkinID                       (Parm)
// int                            iPlayerCount                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetStartAlienHP(TEnumAsByte<EAlienModeType> eObjType, int bySkinID, int iPlayerCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetStartAlienHP");

	UwGameManager_GetStartAlienHP_Params params;
	params.eObjType = eObjType;
	params.bySkinID = bySkinID;
	params.iPlayerCount = iPlayerCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.LoadAlienGameInfo
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadAlienGameInfo(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadAlienGameInfo");

	UwGameManager_LoadAlienGameInfo_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadAlienGameCharParams
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadAlienGameCharParams(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadAlienGameCharParams");

	UwGameManager_LoadAlienGameCharParams_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadAlienGameRandomBoxParam
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadAlienGameRandomBoxParam(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadAlienGameRandomBoxParam");

	UwGameManager_LoadAlienGameRandomBoxParam_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadAlienGameParam
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::LoadAlienGameParam(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadAlienGameParam");

	UwGameManager_LoadAlienGameParam_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.LoadDefenceRewardParam
// (Defined, Public)

void UwGameManager::LoadDefenceRewardParam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadDefenceRewardParam");

	UwGameManager_LoadDefenceRewardParam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadDefenceShopParam
// (Defined, Public)

void UwGameManager::LoadDefenceShopParam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadDefenceShopParam");

	UwGameManager_LoadDefenceShopParam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetDefenceGameRoundCount2
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            MapID                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetDefenceGameRoundCount2(int Level, int MapID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetDefenceGameRoundCount2");

	UwGameManager_GetDefenceGameRoundCount2_Params params;
	params.Level = Level;
	params.MapID = MapID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetDefenceGameBotGradeList2
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            MapID                          (Parm)
// int                            Round                          (Parm)
// TArray<int>                    GradeList                      (Parm, OutParm, NeedCtorLink)

void UwGameManager::GetDefenceGameBotGradeList2(int Level, int MapID, int Round, TArray<int>* GradeList)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetDefenceGameBotGradeList2");

	UwGameManager_GetDefenceGameBotGradeList2_Params params;
	params.Level = Level;
	params.MapID = MapID;
	params.Round = Round;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GradeList != nullptr)
		*GradeList = params.GradeList;
}


// Function Engine.wGameManager.GetDefenceGamePrams2
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            MapID                          (Parm)
// int                            Round                          (Parm)
// TArray<int>                    DelayTime                      (Parm, OutParm, NeedCtorLink)
// TArray<int>                    RegenLoc                       (Parm, OutParm, NeedCtorLink)
// TArray<int>                    Grade                          (Parm, OutParm, NeedCtorLink)
// TArray<int>                    Unit                           (Parm, OutParm, NeedCtorLink)

void UwGameManager::GetDefenceGamePrams2(int Level, int MapID, int Round, TArray<int>* DelayTime, TArray<int>* RegenLoc, TArray<int>* Grade, TArray<int>* Unit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetDefenceGamePrams2");

	UwGameManager_GetDefenceGamePrams2_Params params;
	params.Level = Level;
	params.MapID = MapID;
	params.Round = Round;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (DelayTime != nullptr)
		*DelayTime = params.DelayTime;
	if (RegenLoc != nullptr)
		*RegenLoc = params.RegenLoc;
	if (Grade != nullptr)
		*Grade = params.Grade;
	if (Unit != nullptr)
		*Unit = params.Unit;
}


// Function Engine.wGameManager.LoadDefenceGameInfo
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadDefenceGameInfo(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadDefenceGameInfo");

	UwGameManager_LoadDefenceGameInfo_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadClanMarkParameters
// (Defined, Public)

void UwGameManager::LoadClanMarkParameters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadClanMarkParameters");

	UwGameManager_LoadClanMarkParameters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetLevelDefenceGameParam
// (Defined, Public)
// Parameters:
// int                            iLevel                         (Parm)
// TArray<class UwDefenceGameParam*> params                         (Parm, OutParm, NeedCtorLink)

void UwGameManager::GetLevelDefenceGameParam(int iLevel, TArray<class UwDefenceGameParam*>* params)
{
	/* FIX COMPILING
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevelDefenceGameParam");

	UwGameManager_GetLevelDefenceGameParam_Params params;
	params.iLevel = iLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (params != nullptr)
		*params = params.params;
	*/
}


// Function Engine.wGameManager.SetLevelDefenceGameParam
// (Defined, Public)
// Parameters:
// int                            iLevel                         (Parm)
// TArray<class UwDefenceGameParam*> params                         (Parm, NeedCtorLink)

void UwGameManager::SetLevelDefenceGameParam(int iLevel, TArray<class UwDefenceGameParam*> params)
{
	/*
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetLevelDefenceGameParam");

	UwGameManager_SetLevelDefenceGameParam_Params params;
	params.iLevel = iLevel;
	params.params = params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
	*/
}


// Function Engine.wGameManager.LoadNPCActionGroup
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadNPCActionGroup(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadNPCActionGroup");

	UwGameManager_LoadNPCActionGroup_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadNPCItemGroup
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadNPCItemGroup(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadNPCItemGroup");

	UwGameManager_LoadNPCItemGroup_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadNPCNameGroup
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadNPCNameGroup(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadNPCNameGroup");

	UwGameManager_LoadNPCNameGroup_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadNPC
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadNPC(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadNPC");

	UwGameManager_LoadNPC_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadNPCSpawn
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadNPCSpawn(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadNPCSpawn");

	UwGameManager_LoadNPCSpawn_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetMaterial
// (Defined, Public)
// Parameters:
// struct FString                 str                            (Parm, NeedCtorLink)
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* UwGameManager::GetMaterial(const struct FString& str)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMaterial");

	UwGameManager_GetMaterial_Params params;
	params.str = str;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.LoadLevelTextures
// (Defined, Public)

void UwGameManager::LoadLevelTextures()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadLevelTextures");

	UwGameManager_LoadLevelTextures_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.InitPrecacheItems
// (Defined, Event, Public)

void UwGameManager::InitPrecacheItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.InitPrecacheItems");

	UwGameManager_InitPrecacheItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.InitHK
// (Defined, Event, Public)

void UwGameManager::InitHK()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.InitHK");

	UwGameManager_InitHK_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadWeaponCustomPartsParameters
// (Defined, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadWeaponCustomPartsParameters(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadWeaponCustomPartsParameters");

	UwGameManager_LoadWeaponCustomPartsParameters_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadWeaponCustomInfoParameters
// (Defined, Protected)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwGameManager::LoadWeaponCustomInfoParameters(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadWeaponCustomInfoParameters");

	UwGameManager_LoadWeaponCustomInfoParameters_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetWeaponCustomInfoParam
// (Defined, Public)
// Parameters:
// int                            iInItemID                      (Parm)
// class UwWeaponCustomInfoParam* ReturnValue                    (Parm, OutParm, ReturnParm)

class UwWeaponCustomInfoParam* UwGameManager::GetWeaponCustomInfoParam(int iInItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWeaponCustomInfoParam");

	UwGameManager_GetWeaponCustomInfoParam_Params params;
	params.iInItemID = iInItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetWeaponCustomPartsParamByUnionedPartID
// (Defined, Public)
// Parameters:
// int                            iInUnionedPartID               (Parm)
// class UwWeaponCustomPartsParam* ReturnValue                    (Parm, OutParm, ReturnParm)

class UwWeaponCustomPartsParam* UwGameManager::GetWeaponCustomPartsParamByUnionedPartID(int iInUnionedPartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWeaponCustomPartsParamByUnionedPartID");

	UwGameManager_GetWeaponCustomPartsParamByUnionedPartID_Params params;
	params.iInUnionedPartID = iInUnionedPartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetWeaponCustomPartsParamByItemID
// (Defined, Public)
// Parameters:
// int                            iInItemID                      (Parm)
// class UwWeaponCustomPartsParam* ReturnValue                    (Parm, OutParm, ReturnParm)

class UwWeaponCustomPartsParam* UwGameManager::GetWeaponCustomPartsParamByItemID(int iInItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWeaponCustomPartsParamByItemID");

	UwGameManager_GetWeaponCustomPartsParamByItemID_Params params;
	params.iInItemID = iInItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.InitScript
// (Defined, Event, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)
// class UwWeaponManager*         weaponManager                  (Parm)

void UwGameManager::InitScript(const struct FString& strExcelFileName, class UwWeaponManager* weaponManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.InitScript");

	UwGameManager_InitScript_Params params;
	params.strExcelFileName = strExcelFileName;
	params.weaponManager = weaponManager;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetWeaponCustomPartsIndex
// (Native, Public)
// Parameters:
// int                            iUnionedPartID                 (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetWeaponCustomPartsIndex(int iUnionedPartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWeaponCustomPartsIndex");

	UwGameManager_GetWeaponCustomPartsIndex_Params params;
	params.iUnionedPartID = iUnionedPartID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetWeaponCustomPartsIndex
// (Native, Public)
// Parameters:
// int                            iUnionedPartID                 (Parm)
// int                            iArrayIndex                    (Parm)

void UwGameManager::SetWeaponCustomPartsIndex(int iUnionedPartID, int iArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetWeaponCustomPartsIndex");

	UwGameManager_SetWeaponCustomPartsIndex_Params params;
	params.iUnionedPartID = iUnionedPartID;
	params.iArrayIndex = iArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetWeaponCustomInfoIndex
// (Native, Public)
// Parameters:
// int                            iItemIndex                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetWeaponCustomInfoIndex(int iItemIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWeaponCustomInfoIndex");

	UwGameManager_GetWeaponCustomInfoIndex_Params params;
	params.iItemIndex = iItemIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetWeaponCustomInfoIndex
// (Native, Public)
// Parameters:
// int                            iItemIndex                     (Parm)
// int                            iArrayIndex                    (Parm)

void UwGameManager::SetWeaponCustomInfoIndex(int iItemIndex, int iArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetWeaponCustomInfoIndex");

	UwGameManager_SetWeaponCustomInfoIndex_Params params;
	params.iItemIndex = iItemIndex;
	params.iArrayIndex = iArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetPartsGroupArrayIndex
// (Native, Public)
// Parameters:
// int                            iPartsGroupIndex               (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetPartsGroupArrayIndex(int iPartsGroupIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetPartsGroupArrayIndex");

	UwGameManager_GetPartsGroupArrayIndex_Params params;
	params.iPartsGroupIndex = iPartsGroupIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetPartsGroupIndex
// (Native, Public)
// Parameters:
// int                            iPartsGroupIndex               (Parm)
// int                            iArrayIndex                    (Parm)

void UwGameManager::SetPartsGroupIndex(int iPartsGroupIndex, int iArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetPartsGroupIndex");

	UwGameManager_SetPartsGroupIndex_Params params;
	params.iPartsGroupIndex = iPartsGroupIndex;
	params.iArrayIndex = iArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetSkillArrayIndex
// (Native, Public)
// Parameters:
// int                            iSkillIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetSkillArrayIndex(int iSkillIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetSkillArrayIndex");

	UwGameManager_GetSkillArrayIndex_Params params;
	params.iSkillIndex = iSkillIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetSkillIndex
// (Native, Public)
// Parameters:
// int                            iSkillIndex                    (Parm)
// int                            iArrayIndex                    (Parm)

void UwGameManager::SetSkillIndex(int iSkillIndex, int iArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetSkillIndex");

	UwGameManager_SetSkillIndex_Params params;
	params.iSkillIndex = iSkillIndex;
	params.iArrayIndex = iArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetItemArrayIndex
// (Native, Public)
// Parameters:
// int                            iItemIndex                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetItemArrayIndex(int iItemIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetItemArrayIndex");

	UwGameManager_GetItemArrayIndex_Params params;
	params.iItemIndex = iItemIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetItemIndex
// (Native, Public)
// Parameters:
// int                            iItemIndex                     (Parm)
// int                            iArrayIndex                    (Parm)

void UwGameManager::SetItemIndex(int iItemIndex, int iArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetItemIndex");

	UwGameManager_SetItemIndex_Params params;
	params.iItemIndex = iItemIndex;
	params.iArrayIndex = iArrayIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetUniqueID
// (Defined, Public)
// Parameters:
// int                            nItemID                        (Parm)
// struct FBtrDouble              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBtrDouble UwGameManager::GetUniqueID(int nItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetUniqueID");

	UwGameManager_GetUniqueID_Params params;
	params.nItemID = nItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetSubWeaponUniqueID
// (Defined, Public)
// Parameters:
// struct FBtrDouble              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBtrDouble UwGameManager::GetSubWeaponUniqueID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetSubWeaponUniqueID");

	UwGameManager_GetSubWeaponUniqueID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetMainWeaponUniqueID
// (Defined, Public)
// Parameters:
// struct FBtrDouble              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBtrDouble UwGameManager::GetMainWeaponUniqueID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMainWeaponUniqueID");

	UwGameManager_GetMainWeaponUniqueID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetSubWeaponID
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetSubWeaponID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetSubWeaponID");

	UwGameManager_GetSubWeaponID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetMainWeaponID
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetMainWeaponID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetMainWeaponID");

	UwGameManager_GetMainWeaponID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ClearInstanceItem
// (Defined, Public)

void UwGameManager::ClearInstanceItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ClearInstanceItem");

	UwGameManager_ClearInstanceItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.FindInstanceItemIDBySlotPos
// (Defined, Public)
// Parameters:
// int                            SlotPos                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::FindInstanceItemIDBySlotPos(int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceItemIDBySlotPos");

	UwGameManager_FindInstanceItemIDBySlotPos_Params params;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindInstanceItemBySlotPos
// (Defined, Public)
// Parameters:
// int                            SlotPos                        (Parm)
// class UwItemBoxInstanceHK*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxInstanceHK* UwGameManager::FindInstanceItemBySlotPos(int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceItemBySlotPos");

	UwGameManager_FindInstanceItemBySlotPos_Params params;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindInstanceItemReturnIndexByUniqueSkillID
// (Defined, Public)
// Parameters:
// int                            UniqueSkillID                  (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::FindInstanceItemReturnIndexByUniqueSkillID(int UniqueSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceItemReturnIndexByUniqueSkillID");

	UwGameManager_FindInstanceItemReturnIndexByUniqueSkillID_Params params;
	params.UniqueSkillID = UniqueSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindInstanceItemReturnIndex
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::FindInstanceItemReturnIndex(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceItemReturnIndex");

	UwGameManager_FindInstanceItemReturnIndex_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.RemoveInstanceItemByUniqueSkillID
// (Defined, Public)
// Parameters:
// int                            UniqueSkillID                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::RemoveInstanceItemByUniqueSkillID(int UniqueSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.RemoveInstanceItemByUniqueSkillID");

	UwGameManager_RemoveInstanceItemByUniqueSkillID_Params params;
	params.UniqueSkillID = UniqueSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.RemoveInstanceItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::RemoveInstanceItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.RemoveInstanceItem");

	UwGameManager_RemoveInstanceItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindFirstInstanceItemByItemType
// (Defined, Public)
// Parameters:
// int                            ItemType                       (Parm)
// class UwItemBoxInstanceHK*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxInstanceHK* UwGameManager::FindFirstInstanceItemByItemType(int ItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindFirstInstanceItemByItemType");

	UwGameManager_FindFirstInstanceItemByItemType_Params params;
	params.ItemType = ItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindInstanceSkillItemReturnIndex
// (Defined, Public)
// Parameters:
// int                            UniqueID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::FindInstanceSkillItemReturnIndex(int UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceSkillItemReturnIndex");

	UwGameManager_FindInstanceSkillItemReturnIndex_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindFirstInstanceItemByItemID
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// class UwItemBoxInstanceHK*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxInstanceHK* UwGameManager::FindFirstInstanceItemByItemID(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindFirstInstanceItemByItemID");

	UwGameManager_FindFirstInstanceItemByItemID_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindInstanceSkillItem
// (Defined, Public)
// Parameters:
// int                            UniqueID                       (Parm)
// class UwItemBoxInstanceHK*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxInstanceHK* UwGameManager::FindInstanceSkillItem(int UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceSkillItem");

	UwGameManager_FindInstanceSkillItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindInstanceItemSameWeapon
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            PartID                         (Parm)
// class UwItemBoxInstanceHK*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxInstanceHK* UwGameManager::FindInstanceItemSameWeapon(int ItemID, int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceItemSameWeapon");

	UwGameManager_FindInstanceItemSameWeapon_Params params;
	params.ItemID = ItemID;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindInstanceItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// class UwItemBoxInstanceHK*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxInstanceHK* UwGameManager::FindInstanceItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindInstanceItem");

	UwGameManager_FindInstanceItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetInstance_SkillSlotPos
// (Defined, Public)
// Parameters:
// int                            SkillUniqueID                  (Parm)
// int                            SlotPos                        (Parm)

void UwGameManager::SetInstance_SkillSlotPos(int SkillUniqueID, int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetInstance_SkillSlotPos");

	UwGameManager_SetInstance_SkillSlotPos_Params params;
	params.SkillUniqueID = SkillUniqueID;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.ChangeInstance_SkillSlotPos
// (Defined, Public)
// Parameters:
// int                            SkillUniqueID                  (Parm)
// int                            SlotPos                        (Parm)

void UwGameManager::ChangeInstance_SkillSlotPos(int SkillUniqueID, int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_SkillSlotPos");

	UwGameManager_ChangeInstance_SkillSlotPos_Params params;
	params.SkillUniqueID = SkillUniqueID;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.SetInstance_ItemSlotPos
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            SlotPos                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::SetInstance_ItemSlotPos(const struct FBtrDouble& UniqueID, int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetInstance_ItemSlotPos");

	UwGameManager_SetInstance_ItemSlotPos_Params params;
	params.UniqueID = UniqueID;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ChangeInstance_ItemSlotPos
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            SlotPos                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ChangeInstance_ItemSlotPos(const struct FBtrDouble& UniqueID, int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_ItemSlotPos");

	UwGameManager_ChangeInstance_ItemSlotPos_Params params;
	params.UniqueID = UniqueID;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ChangeInstance_StackCount
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            StackCount                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ChangeInstance_StackCount(const struct FBtrDouble& UniqueID, int StackCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_StackCount");

	UwGameManager_ChangeInstance_StackCount_Params params;
	params.UniqueID = UniqueID;
	params.StackCount = StackCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ChangeInstance_ItemReduceDurability
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            dur                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ChangeInstance_ItemReduceDurability(const struct FBtrDouble& UniqueID, int dur)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_ItemReduceDurability");

	UwGameManager_ChangeInstance_ItemReduceDurability_Params params;
	params.UniqueID = UniqueID;
	params.dur = dur;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ChangeInstance_ItemDamageDegree
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            dd                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ChangeInstance_ItemDamageDegree(const struct FBtrDouble& UniqueID, int dd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_ItemDamageDegree");

	UwGameManager_ChangeInstance_ItemDamageDegree_Params params;
	params.UniqueID = UniqueID;
	params.dd = dd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ChangeInstance_ItemDurability
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            dur                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ChangeInstance_ItemDurability(const struct FBtrDouble& UniqueID, int dur)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_ItemDurability");

	UwGameManager_ChangeInstance_ItemDurability_Params params;
	params.UniqueID = UniqueID;
	params.dur = dur;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ChangeInstance_DefaultWeapon
// (Defined, Public)
// Parameters:
// int                            SlotPos                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::ChangeInstance_DefaultWeapon(int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_DefaultWeapon");

	UwGameManager_ChangeInstance_DefaultWeapon_Params params;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ChangeInstance_ItemLeftTime
// (Defined, Public)
// Parameters:
// struct FBtrDouble              CurrentTime                    (Parm)

void UwGameManager::ChangeInstance_ItemLeftTime(const struct FBtrDouble& CurrentTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeInstance_ItemLeftTime");

	UwGameManager_ChangeInstance_ItemLeftTime_Params params;
	params.CurrentTime = CurrentTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddInstanceItem
// (Defined, Public)
// Parameters:
// class UwItemBoxInstanceHK*     Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::AddInstanceItem(class UwItemBoxInstanceHK* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddInstanceItem");

	UwGameManager_AddInstanceItem_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddCashItem
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm, OutParm)
// class UwItemBoxInstanceHK*     instanceInfo                   (Parm, OutParm)
// struct FString                 strEndDate                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::AddCashItem(const struct FString& strEndDate, class UwItemBoxHK** ItemInfo, class UwItemBoxInstanceHK** instanceInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddCashItem");

	UwGameManager_AddCashItem_Params params;
	params.strEndDate = strEndDate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ItemInfo != nullptr)
		*ItemInfo = params.ItemInfo;
	if (instanceInfo != nullptr)
		*instanceInfo = params.instanceInfo;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddInstanceItemByParameter
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// struct FBtrDouble              UniqueID                       (Parm)
// int                            UniqueSkillID                  (Parm)
// int                            SlotPos                        (Parm)
// int                            ItemState                      (Parm)
// int                            Durability                     (Parm)
// int                            PartID                         (OptionalParm, Parm)
// int                            PaintID                        (OptionalParm, Parm)
// int                            StackCount                     (OptionalParm, Parm)
// int                            DamageDegree                   (OptionalParm, Parm)
// struct FBtrDouble              UntilTime                      (OptionalParm, Parm)
// bool                           bStackAdd                      (OptionalParm, Parm)
// int                            TradeCount                     (OptionalParm, Parm)
// class UwItemBoxInstanceHK*     ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxInstanceHK* UwGameManager::AddInstanceItemByParameter(int ItemID, const struct FBtrDouble& UniqueID, int UniqueSkillID, int SlotPos, int ItemState, int Durability, int PartID, int PaintID, int StackCount, int DamageDegree, const struct FBtrDouble& UntilTime, bool bStackAdd, int TradeCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddInstanceItemByParameter");

	UwGameManager_AddInstanceItemByParameter_Params params;
	params.ItemID = ItemID;
	params.UniqueID = UniqueID;
	params.UniqueSkillID = UniqueSkillID;
	params.SlotPos = SlotPos;
	params.ItemState = ItemState;
	params.Durability = Durability;
	params.PartID = PartID;
	params.PaintID = PaintID;
	params.StackCount = StackCount;
	params.DamageDegree = DamageDegree;
	params.UntilTime = UntilTime;
	params.bStackAdd = bStackAdd;
	params.TradeCount = TradeCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddInstanceSkillItemFromSkillBoxList
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::AddInstanceSkillItemFromSkillBoxList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddInstanceSkillItemFromSkillBoxList");

	UwGameManager_AddInstanceSkillItemFromSkillBoxList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsShowInventory
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsShowInventory(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsShowInventory");

	UwGameManager_IsShowInventory_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsShowStore
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsShowStore(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsShowStore");

	UwGameManager_IsShowStore_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindUIItemReturnIndex
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::FindUIItemReturnIndex(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindUIItemReturnIndex");

	UwGameManager_FindUIItemReturnIndex_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindUIItem
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// class UwItemBoxHK*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UwItemBoxHK* UwGameManager::FindUIItem(int ItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindUIItem");

	UwGameManager_FindUIItem_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddUIItem
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::AddUIItem(class UwItemBoxHK* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddUIItem");

	UwGameManager_AddUIItem_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.CompareLE_UIShowItemLists
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             L                              (Parm)
// class UwItemBoxHK*             R                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::CompareLE_UIShowItemLists(class UwItemBoxHK* L, class UwItemBoxHK* R)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.CompareLE_UIShowItemLists");

	UwGameManager_CompareLE_UIShowItemLists_Params params;
	params.L = L;
	params.R = R;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetQuickSlotBox_Skill
// (Defined, Public)
// Parameters:
// int                            DispOrder                      (Parm)
// int                            SlotPos                        (Parm)
// int                            SkillID                        (Parm)
// int                            UniqueSkillID                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::SetQuickSlotBox_Skill(int DispOrder, int SlotPos, int SkillID, int UniqueSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetQuickSlotBox_Skill");

	UwGameManager_SetQuickSlotBox_Skill_Params params;
	params.DispOrder = DispOrder;
	params.SlotPos = SlotPos;
	params.SkillID = SkillID;
	params.UniqueSkillID = UniqueSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetQuickSlotBox_Item
// (Defined, Public)
// Parameters:
// int                            DispOrder                      (Parm)
// int                            SlotPos                        (Parm)
// int                            ItemID                         (Parm)
// struct FBtrDouble              UniqueID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::SetQuickSlotBox_Item(int DispOrder, int SlotPos, int ItemID, const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetQuickSlotBox_Item");

	UwGameManager_SetQuickSlotBox_Item_Params params;
	params.DispOrder = DispOrder;
	params.SlotPos = SlotPos;
	params.ItemID = ItemID;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.RemoveQuickSlotItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)

void UwGameManager::RemoveQuickSlotItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.RemoveQuickSlotItem");

	UwGameManager_RemoveQuickSlotItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.SetQuickSlotBox_ID
// (Defined, Public)
// Parameters:
// int                            DispOrder                      (Parm)
// int                            QuickSlotID                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::SetQuickSlotBox_ID(int DispOrder, int QuickSlotID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetQuickSlotBox_ID");

	UwGameManager_SetQuickSlotBox_ID_Params params;
	params.DispOrder = DispOrder;
	params.QuickSlotID = QuickSlotID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetQuickSlotBox_Name
// (Defined, Public)
// Parameters:
// int                            DispOrder                      (Parm)
// struct FString                 QSName                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::SetQuickSlotBox_Name(int DispOrder, const struct FString& QSName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetQuickSlotBox_Name");

	UwGameManager_SetQuickSlotBox_Name_Params params;
	params.DispOrder = DispOrder;
	params.QSName = QSName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AllocateQuickSlotBoxList
// (Defined, Public)
// Parameters:
// int                            Len                            (Parm)

void UwGameManager::AllocateQuickSlotBoxList(int Len)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AllocateQuickSlotBoxList");

	UwGameManager_AllocateQuickSlotBoxList_Params params;
	params.Len = Len;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.ClearQuickSlotBoxList
// (Defined, Public)

void UwGameManager::ClearQuickSlotBoxList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ClearQuickSlotBoxList");

	UwGameManager_ClearQuickSlotBoxList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.ReplaceQuickSkillSlotItem
// (Defined, Public)
// Parameters:
// int                            SkillID                        (Parm)
// int                            UniqueSkillID                  (Parm)

void UwGameManager::ReplaceQuickSkillSlotItem(int SkillID, int UniqueSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ReplaceQuickSkillSlotItem");

	UwGameManager_ReplaceQuickSkillSlotItem_Params params;
	params.SkillID = SkillID;
	params.UniqueSkillID = UniqueSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.RemoveQuickSlotBoxSkillItem
// (Defined, Public)
// Parameters:
// int                            UniqueID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::RemoveQuickSlotBoxSkillItem(int UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.RemoveQuickSlotBoxSkillItem");

	UwGameManager_RemoveQuickSlotBoxSkillItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetQuickSlotIndexOfBoxSkillItem
// (Defined, Public)
// Parameters:
// int                            UniqueSkillID                  (Parm)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> UwGameManager::GetQuickSlotIndexOfBoxSkillItem(int UniqueSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetQuickSlotIndexOfBoxSkillItem");

	UwGameManager_GetQuickSlotIndexOfBoxSkillItem_Params params;
	params.UniqueSkillID = UniqueSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsQuickSlotBoxSkillItem
// (Defined, Public)
// Parameters:
// int                            UniqueSkillID                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsQuickSlotBoxSkillItem(int UniqueSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsQuickSlotBoxSkillItem");

	UwGameManager_IsQuickSlotBoxSkillItem_Params params;
	params.UniqueSkillID = UniqueSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ReplaceQuickSlotBoxItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              OldUniqueID                    (Parm)
// int                            ItemID                         (Parm)
// struct FBtrDouble              NewUniqueID                    (Parm)

void UwGameManager::ReplaceQuickSlotBoxItem(const struct FBtrDouble& OldUniqueID, int ItemID, const struct FBtrDouble& NewUniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ReplaceQuickSlotBoxItem");

	UwGameManager_ReplaceQuickSlotBoxItem_Params params;
	params.OldUniqueID = OldUniqueID;
	params.ItemID = ItemID;
	params.NewUniqueID = NewUniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetQuickSlotIndexOfBoxItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetQuickSlotIndexOfBoxItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetQuickSlotIndexOfBoxItem");

	UwGameManager_GetQuickSlotIndexOfBoxItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsQuickSlotBoxItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsQuickSlotBoxItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsQuickSlotBoxItem");

	UwGameManager_IsQuickSlotBoxItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.RemoveQuickSlotBoxItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::RemoveQuickSlotBoxItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.RemoveQuickSlotBoxItem");

	UwGameManager_RemoveQuickSlotBoxItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddUISkillBox
// (Defined, Public)
// Parameters:
// unsigned char                  SlotPos                        (Parm)
// int                            SkillID                        (Parm)
// int                            UniqueSkillID                  (Parm)
// struct FBtrDouble              UntilTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::AddUISkillBox(unsigned char SlotPos, int SkillID, int UniqueSkillID, const struct FBtrDouble& UntilTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddUISkillBox");

	UwGameManager_AddUISkillBox_Params params;
	params.SlotPos = SlotPos;
	params.SkillID = SkillID;
	params.UniqueSkillID = UniqueSkillID;
	params.UntilTime = UntilTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetSkillBox_SlotPos
// (Defined, Public)
// Parameters:
// int                            SkillUniqueID                  (Parm)
// int                            SlotPos                        (Parm)

void UwGameManager::SetSkillBox_SlotPos(int SkillUniqueID, int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetSkillBox_SlotPos");

	UwGameManager_SetSkillBox_SlotPos_Params params;
	params.SkillUniqueID = SkillUniqueID;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.ChangeSkillBox_SlotPos
// (Defined, Public)
// Parameters:
// int                            SkillUniqueID                  (Parm)
// int                            SlotPos                        (Parm)

void UwGameManager::ChangeSkillBox_SlotPos(int SkillUniqueID, int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ChangeSkillBox_SlotPos");

	UwGameManager_ChangeSkillBox_SlotPos_Params params;
	params.SkillUniqueID = SkillUniqueID;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.FindSkillBoxBySlotPos
// (Defined, Public)
// Parameters:
// int                            SlotPos                        (Parm)
// class UwSkillBoxHK*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwSkillBoxHK* UwGameManager::FindSkillBoxBySlotPos(int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindSkillBoxBySlotPos");

	UwGameManager_FindSkillBoxBySlotPos_Params params;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.FindSkillBox
// (Defined, Public)
// Parameters:
// int                            UniqueSkillID                  (Parm)
// class UwSkillBoxHK*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwSkillBoxHK* UwGameManager::FindSkillBox(int UniqueSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.FindSkillBox");

	UwGameManager_FindSkillBox_Params params;
	params.UniqueSkillID = UniqueSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.ClearSkillBoxList
// (Defined, Public)

void UwGameManager::ClearSkillBoxList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ClearSkillBoxList");

	UwGameManager_ClearSkillBoxList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LoadUILists
// (Defined, Public)

void UwGameManager::LoadUILists()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LoadUILists");

	UwGameManager_LoadUILists_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.IsEnableRemovePart
// (Defined, Public)
// Parameters:
// class UwItemBaseParam*         Inip                           (Parm)
// TEnumAsByte<EItemType>         InType                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::IsEnableRemovePart(class UwItemBaseParam* Inip, TEnumAsByte<EItemType> InType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsEnableRemovePart");

	UwGameManager_IsEnableRemovePart_Params params;
	params.Inip = Inip;
	params.InType = InType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsUsablePartItem
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// int                            iPartsArrayIndex               (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::IsUsablePartItem(int iItemID, int iPartsArrayIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsUsablePartItem");

	UwGameManager_IsUsablePartItem_Params params;
	params.iItemID = iItemID;
	params.iPartsArrayIndex = iPartsArrayIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.IsExistShopItemList
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::IsExistShopItemList(int iItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsExistShopItemList");

	UwGameManager_IsExistShopItemList_Params params;
	params.iItemID = iItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanLevelMarkInfo
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            ClanPattern                    (Parm, OutParm)
// int                            ClanBG                         (Parm, OutParm)
// int                            ClanBL                         (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::GetClanLevelMarkInfo(const struct FString& ClanName, int* ClanPattern, int* ClanBG, int* ClanBL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanLevelMarkInfo");

	UwGameManager_GetClanLevelMarkInfo_Params params;
	params.ClanName = ClanName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ClanPattern != nullptr)
		*ClanPattern = params.ClanPattern;
	if (ClanBG != nullptr)
		*ClanBG = params.ClanBG;
	if (ClanBL != nullptr)
		*ClanBL = params.ClanBL;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanLevelImage
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// struct FImage                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FImage UwGameManager::GetClanLevelImage(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanLevelImage");

	UwGameManager_GetClanLevelImage_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanLevelTexture
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// class UTexture*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UTexture* UwGameManager::GetClanLevelTexture(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanLevelTexture");

	UwGameManager_GetClanLevelTexture_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanLevelName
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameManager::GetClanLevelName(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanLevelName");

	UwGameManager_GetClanLevelName_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanEndExp
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetClanEndExp(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanEndExp");

	UwGameManager_GetClanEndExp_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetClanStartExp
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetClanStartExp(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClanStartExp");

	UwGameManager_GetClanStartExp_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLevelTexture
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            LevelMarkID                    (OptionalParm, Parm)
// class UTexture*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UTexture* UwGameManager::GetLevelTexture(int Level, int LevelMarkID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevelTexture");

	UwGameManager_GetLevelTexture_Params params;
	params.Level = Level;
	params.LevelMarkID = LevelMarkID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLevelImage
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            LevelMarkID                    (Parm)
// struct FImage                  LevelImage                     (Parm, OutParm)

void UwGameManager::GetLevelImage(int Level, int LevelMarkID, struct FImage* LevelImage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevelImage");

	UwGameManager_GetLevelImage_Params params;
	params.Level = Level;
	params.LevelMarkID = LevelMarkID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (LevelImage != nullptr)
		*LevelImage = params.LevelImage;
}


// Function Engine.wGameManager.GetLevelName
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameManager::GetLevelName(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLevelName");

	UwGameManager_GetLevelName_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetEndExp
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetEndExp(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetEndExp");

	UwGameManager_GetEndExp_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetStartExp
// (Defined, Public)
// Parameters:
// int                            Level                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetStartExp(int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetStartExp");

	UwGameManager_GetStartExp_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.dele_UpdateEventTimer
// (Public, Delegate)
// Parameters:
// int                            EventType                      (Parm)
// struct FBtrDouble              EventTime                      (Parm)

void UwGameManager::dele_UpdateEventTimer(int EventType, const struct FBtrDouble& EventTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.dele_UpdateEventTimer");

	UwGameManager_dele_UpdateEventTimer_Params params;
	params.EventType = EventType;
	params.EventTime = EventTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.NextEventTime
// (Defined, Public)
// Parameters:
// struct FBtrDouble              t                              (Parm)
// struct FBtrDouble              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBtrDouble UwGameManager::NextEventTime(const struct FBtrDouble& t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.NextEventTime");

	UwGameManager_NextEventTime_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.UpdateEventTimer
// (Defined, Public)
// Parameters:
// struct FBtrDouble              st                             (Parm)
// int                            msec                           (OptionalParm, Parm)

void UwGameManager::UpdateEventTimer(const struct FBtrDouble& st, int msec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateEventTimer");

	UwGameManager_UpdateEventTimer_Params params;
	params.st = st;
	params.msec = msec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.LogEventTimerList
// (Defined, Public)
// Parameters:
// int                            AddItemIndex                   (OptionalParm, Parm)

void UwGameManager::LogEventTimerList(int AddItemIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.LogEventTimerList");

	UwGameManager_LogEventTimerList_Params params;
	params.AddItemIndex = AddItemIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetEventTimerCount
// (Defined, Public)
// Parameters:
// int                            EventType                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetEventTimerCount(int EventType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetEventTimerCount");

	UwGameManager_GetEventTimerCount_Params params;
	params.EventType = EventType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetLeftEventTime
// (Defined, Public)
// Parameters:
// int                            EventType                      (Parm)
// struct FBtrDouble              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBtrDouble UwGameManager::GetLeftEventTime(int EventType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetLeftEventTime");

	UwGameManager_GetLeftEventTime_Params params;
	params.EventType = EventType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.RemoveEventTimer
// (Defined, Public)
// Parameters:
// int                            EventType                      (Parm)

void UwGameManager::RemoveEventTimer(int EventType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.RemoveEventTimer");

	UwGameManager_RemoveEventTimer_Params params;
	params.EventType = EventType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddEventTimerCount
// (Defined, Public)
// Parameters:
// int                            EventType                      (Parm)

void UwGameManager::AddEventTimerCount(int EventType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddEventTimerCount");

	UwGameManager_AddEventTimerCount_Params params;
	params.EventType = EventType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddEventTimer
// (Defined, Public)
// Parameters:
// int                            EventType                      (Parm)
// struct FBtrDouble              EventTime                      (Parm)
// class UDelegateEventTimer*     EventDelegate                  (OptionalParm, Parm)
// int                            EventMSec                      (OptionalParm, Parm)

void UwGameManager::AddEventTimer(int EventType, const struct FBtrDouble& EventTime, class UDelegateEventTimer* EventDelegate, int EventMSec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddEventTimer");

	UwGameManager_AddEventTimer_Params params;
	params.EventType = EventType;
	params.EventTime = EventTime;
	params.EventDelegate = EventDelegate;
	params.EventMSec = EventMSec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.IsBlockedItemIdx
// (Defined, Public)
// Parameters:
// struct FBtrDouble              D                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameManager::IsBlockedItemIdx(const struct FBtrDouble& D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.IsBlockedItemIdx");

	UwGameManager_IsBlockedItemIdx_Params params;
	params.D = D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.AddBlockedItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              D                              (Parm)

void UwGameManager::AddBlockedItem(const struct FBtrDouble& D)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddBlockedItem");

	UwGameManager_AddBlockedItem_Params params;
	params.D = D;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.ClearBlockedItem
// (Defined, Public)

void UwGameManager::ClearBlockedItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.ClearBlockedItem");

	UwGameManager_ClearBlockedItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.AddEventTimerHMS
// (Defined, Public)
// Parameters:
// int                            EventType                      (Parm)
// int                            Hour                           (Parm)
// int                            Min                            (Parm)
// int                            sec                            (Parm)
// class UDelegateEventTimer*     EventDelegate                  (OptionalParm, Parm)
// int                            msec                           (OptionalParm, Parm)

void UwGameManager::AddEventTimerHMS(int EventType, int Hour, int Min, int sec, class UDelegateEventTimer* EventDelegate, int msec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.AddEventTimerHMS");

	UwGameManager_AddEventTimerHMS_Params params;
	params.EventType = EventType;
	params.Hour = Hour;
	params.Min = Min;
	params.sec = sec;
	params.EventDelegate = EventDelegate;
	params.msec = msec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetClientTime
// (Defined, Public)
// Parameters:
// bool                           bUpdate                        (OptionalParm, Parm)
// struct FBtrDouble              ReturnValue                    (Parm, OutParm, ReturnParm)

struct FBtrDouble UwGameManager::GetClientTime(bool bUpdate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetClientTime");

	UwGameManager_GetClientTime_Params params;
	params.bUpdate = bUpdate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.UpdateClientTime
// (Defined, Public)

void UwGameManager::UpdateClientTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateClientTime");

	UwGameManager_UpdateClientTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.SetServerTime
// (Defined, Public)
// Parameters:
// struct FBtrDouble              S                              (Parm)

void UwGameManager::SetServerTime(const struct FBtrDouble& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetServerTime");

	UwGameManager_SetServerTime_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.UpdateQuickSlotBoxList
// (Public, Delegate)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwGameManager::UpdateQuickSlotBoxList(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateQuickSlotBoxList");

	UwGameManager_UpdateQuickSlotBoxList_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.UpdateSkillBoxList
// (Public, Delegate)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwGameManager::UpdateSkillBoxList(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateSkillBoxList");

	UwGameManager_UpdateSkillBoxList_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.UpdateWebzenItemList
// (Public, Delegate)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwGameManager::UpdateWebzenItemList(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateWebzenItemList");

	UwGameManager_UpdateWebzenItemList_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.UpdateItemList
// (Public, Delegate)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwGameManager::UpdateItemList(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateItemList");

	UwGameManager_UpdateItemList_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.UpdateWebzenShopItemList
// (Public, Delegate)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwGameManager::UpdateWebzenShopItemList(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateWebzenShopItemList");

	UwGameManager_UpdateWebzenShopItemList_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.UpdateWebzenShopVerInfo
// (Public, Delegate)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwGameManager::UpdateWebzenShopVerInfo(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateWebzenShopVerInfo");

	UwGameManager_UpdateWebzenShopVerInfo_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.UpdateServerTime
// (Public, Delegate)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)

void UwGameManager::UpdateServerTime(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.UpdateServerTime");

	UwGameManager_UpdateServerTime_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.DownloadWebzenShopItemList
// (Native, Public)
// Parameters:
// int                            Year                           (Parm)
// int                            YearId                         (Parm)
// int                            salescode                      (Parm)

void UwGameManager::DownloadWebzenShopItemList(int Year, int YearId, int salescode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.DownloadWebzenShopItemList");

	UwGameManager_DownloadWebzenShopItemList_Params params;
	params.Year = Year;
	params.YearId = YearId;
	params.salescode = salescode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameManager.GetGP20ProductNo
// (Defined, Public)
// Parameters:
// int                            ProductCode                    (Parm)
// int                            ProductCost                    (Parm)
// unsigned char                  SaleType                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameManager::GetGP20ProductNo(int ProductCode, int ProductCost, unsigned char SaleType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetGP20ProductNo");

	UwGameManager_GetGP20ProductNo_Params params;
	params.ProductCode = ProductCode;
	params.ProductCost = ProductCost;
	params.SaleType = SaleType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.SetGP20CashItemInfo
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// int                            cashType                       (Parm)
// class UwItemBoxCashHK*         cashItemInfo                   (Parm, OutParm)

void UwGameManager::SetGP20CashItemInfo(class UwItemBoxHK* ItemInfo, int cashType, class UwItemBoxCashHK** cashItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.SetGP20CashItemInfo");

	UwGameManager_SetGP20CashItemInfo_Params params;
	params.ItemInfo = ItemInfo;
	params.cashType = cashType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (cashItemInfo != nullptr)
		*cashItemInfo = params.cashItemInfo;
}


// Function Engine.wGameManager.GetGP20ProductFromCode
// (Defined, Public)
// Parameters:
// int                            ProductCode                    (Parm)
// int                            iResult                        (Parm, OutParm)
// class UwGP20Product*           ReturnValue                    (Parm, OutParm, ReturnParm)

class UwGP20Product* UwGameManager::GetGP20ProductFromCode(int ProductCode, int* iResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetGP20ProductFromCode");

	UwGameManager_GetGP20ProductFromCode_Params params;
	params.ProductCode = ProductCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (iResult != nullptr)
		*iResult = params.iResult;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetWebzenShopPackage2
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            iResult                        (Parm, OutParm)
// struct FWebzenShopPackage      ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FWebzenShopPackage UwGameManager::GetWebzenShopPackage2(int ItemID, int* iResult)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWebzenShopPackage2");

	UwGameManager_GetWebzenShopPackage2_Params params;
	params.ItemID = ItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (iResult != nullptr)
		*iResult = params.iResult;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetWebzenShopProduct
// (Defined, Public)
// Parameters:
// int                            ProductSeq                     (Parm)
// int                            PriceSeq                       (Parm)
// struct FWebzenShopProduct      ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FWebzenShopProduct UwGameManager::GetWebzenShopProduct(int ProductSeq, int PriceSeq)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWebzenShopProduct");

	UwGameManager_GetWebzenShopProduct_Params params;
	params.ProductSeq = ProductSeq;
	params.PriceSeq = PriceSeq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameManager.GetWebzenShopPackage
// (Defined, Public)
// Parameters:
// int                            ProductSeq                     (Parm)
// int                            PriceSeq                       (Parm)
// struct FWebzenShopPackage      ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FWebzenShopPackage UwGameManager::GetWebzenShopPackage(int ProductSeq, int PriceSeq)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameManager.GetWebzenShopPackage");

	UwGameManager_GetWebzenShopPackage_Params params;
	params.ProductSeq = ProductSeq;
	params.PriceSeq = PriceSeq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wCharacterManager.RemoveBasePlayers
// (Defined, Event, Public)

void UwCharacterManager::RemoveBasePlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.RemoveBasePlayers");

	UwCharacterManager_RemoveBasePlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.AddBasePlayers
// (Defined, Event, Public)

void UwCharacterManager::AddBasePlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.AddBasePlayers");

	UwCharacterManager_AddBasePlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.InitMyPlayer
// (Defined, Event, Public)

void UwCharacterManager::InitMyPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.InitMyPlayer");

	UwCharacterManager_InitMyPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.LoadCacheMoveParam
// (Defined, Public)

void UwCharacterManager::LoadCacheMoveParam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.LoadCacheMoveParam");

	UwCharacterManager_LoadCacheMoveParam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.LoadPartsData
// (Defined, Public)

void UwCharacterManager::LoadPartsData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.LoadPartsData");

	UwCharacterManager_LoadPartsData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.GetPartsById
// (Final, Defined, Public)
// Parameters:
// int                            iID                            (Parm)
// struct FPlayerPartsInfo        ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FPlayerPartsInfo UwCharacterManager::GetPartsById(int iID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.GetPartsById");

	UwCharacterManager_GetPartsById_Params params;
	params.iID = iID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wCharacterManager.GetPlayerSetTest
// (Final, Defined, Public)
// Parameters:
// struct FString                 TestName                       (Parm, NeedCtorLink)
// struct FPlayerSet              ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FPlayerSet UwCharacterManager::GetPlayerSetTest(const struct FString& TestName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.GetPlayerSetTest");

	UwCharacterManager_GetPlayerSetTest_Params params;
	params.TestName = TestName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wCharacterManager.GetMyStatus
// (Final, Defined, Public)
// Parameters:
// class UwMyPlayerStatus*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UwMyPlayerStatus* UwCharacterManager::GetMyStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.GetMyStatus");

	UwCharacterManager_GetMyStatus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wCharacterManager.DestroyScript
// (Defined, Event, Public)

void UwCharacterManager::DestroyScript()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.DestroyScript");

	UwCharacterManager_DestroyScript_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.InitScript
// (Defined, Event, Public)
// Parameters:
// struct FString                 strExcelFileName               (Parm, NeedCtorLink)

void UwCharacterManager::InitScript(const struct FString& strExcelFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.InitScript");

	UwCharacterManager_InitScript_Params params;
	params.strExcelFileName = strExcelFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.InitNative
// (Final, Native, Static, Public)

void UwCharacterManager::STATIC_InitNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.InitNative");

	UwCharacterManager_InitNative_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wCharacterManager.Get
// (Final, Native, Static, Public)
// Parameters:
// class AActor*                  P                              (Parm)

void UwCharacterManager::STATIC_Get(class AActor* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wCharacterManager.Get");

	UwCharacterManager_Get_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.SetQSlotList
// (Defined, Public)
// Parameters:
// TArray<int>                    QSlotID                        (Parm, NeedCtorLink)
// TArray<struct FString>         QSlotName                      (Parm, NeedCtorLink)
// TArray<unsigned char>          QSlotDispOrder                 (Parm, NeedCtorLink)
// TArray<struct FBtrDouble>      MWItemID                       (Parm, NeedCtorLink)
// TArray<struct FBtrDouble>      PistolItemID                   (Parm, NeedCtorLink)
// TArray<struct FBtrDouble>      TWItemID1                      (Parm, NeedCtorLink)
// TArray<struct FBtrDouble>      TWItemID2                      (Parm, NeedCtorLink)
// TArray<int>                    Skill1                         (Parm, NeedCtorLink)
// TArray<int>                    Skill2                         (Parm, NeedCtorLink)
// TArray<int>                    Skill3                         (Parm, NeedCtorLink)
// TArray<int>                    Skill4                         (Parm, NeedCtorLink)

void UwMyPlayerStatus::SetQSlotList(TArray<int> QSlotID, TArray<struct FString> QSlotName, TArray<unsigned char> QSlotDispOrder, TArray<struct FBtrDouble> MWItemID, TArray<struct FBtrDouble> PistolItemID, TArray<struct FBtrDouble> TWItemID1, TArray<struct FBtrDouble> TWItemID2, TArray<int> Skill1, TArray<int> Skill2, TArray<int> Skill3, TArray<int> Skill4)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.SetQSlotList");

	UwMyPlayerStatus_SetQSlotList_Params params;
	params.QSlotID = QSlotID;
	params.QSlotName = QSlotName;
	params.QSlotDispOrder = QSlotDispOrder;
	params.MWItemID = MWItemID;
	params.PistolItemID = PistolItemID;
	params.TWItemID1 = TWItemID1;
	params.TWItemID2 = TWItemID2;
	params.Skill1 = Skill1;
	params.Skill2 = Skill2;
	params.Skill3 = Skill3;
	params.Skill4 = Skill4;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.SetSkillListEnd
// (Defined, Public)

void UwMyPlayerStatus::SetSkillListEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.SetSkillListEnd");

	UwMyPlayerStatus_SetSkillListEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.SetSkillList
// (Defined, Public)
// Parameters:
// TArray<int>                    UniqueSkillID                  (Parm, NeedCtorLink)
// TArray<int>                    SkillID                        (Parm, NeedCtorLink)
// TArray<struct FBtrDouble>      UntilTime                      (Parm, NeedCtorLink)
// TArray<unsigned char>          SlotPosition                   (Parm, NeedCtorLink)

void UwMyPlayerStatus::SetSkillList(TArray<int> UniqueSkillID, TArray<int> SkillID, TArray<struct FBtrDouble> UntilTime, TArray<unsigned char> SlotPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.SetSkillList");

	UwMyPlayerStatus_SetSkillList_Params params;
	params.UniqueSkillID = UniqueSkillID;
	params.SkillID = SkillID;
	params.UntilTime = UntilTime;
	params.SlotPosition = SlotPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.SetSkillListStart
// (Defined, Public)
// Parameters:
// int                            Count                          (Parm)

void UwMyPlayerStatus::SetSkillListStart(int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.SetSkillListStart");

	UwMyPlayerStatus_SetSkillListStart_Params params;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.SetItemListEnd
// (Defined, Public)

void UwMyPlayerStatus::SetItemListEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.SetItemListEnd");

	UwMyPlayerStatus_SetItemListEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.SetItemList
// (Defined, Public)
// Parameters:
// TArray<struct FBtrDouble>      UniqueID                       (Parm, NeedCtorLink)
// TArray<int>                    ItemID                         (Parm, NeedCtorLink)
// TArray<int>                    ItemType                       (Parm, NeedCtorLink)
// TArray<int>                    Durability                     (Parm, NeedCtorLink)
// TArray<struct FBtrDouble>      UntilTime                      (Parm, NeedCtorLink)
// TArray<int>                    SlotPosition                   (Parm, NeedCtorLink)
// TArray<int>                    AddPartsID                     (Parm, NeedCtorLink)
// TArray<int>                    DamageDegree                   (Parm, NeedCtorLink)
// TArray<unsigned char>          ItemState                      (Parm, NeedCtorLink)
// TArray<int>                    StackCount                     (Parm, NeedCtorLink)
// TArray<int>                    PaintID                        (Parm, NeedCtorLink)

void UwMyPlayerStatus::SetItemList(TArray<struct FBtrDouble> UniqueID, TArray<int> ItemID, TArray<int> ItemType, TArray<int> Durability, TArray<struct FBtrDouble> UntilTime, TArray<int> SlotPosition, TArray<int> AddPartsID, TArray<int> DamageDegree, TArray<unsigned char> ItemState, TArray<int> StackCount, TArray<int> PaintID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.SetItemList");

	UwMyPlayerStatus_SetItemList_Params params;
	params.UniqueID = UniqueID;
	params.ItemID = ItemID;
	params.ItemType = ItemType;
	params.Durability = Durability;
	params.UntilTime = UntilTime;
	params.SlotPosition = SlotPosition;
	params.AddPartsID = AddPartsID;
	params.DamageDegree = DamageDegree;
	params.ItemState = ItemState;
	params.StackCount = StackCount;
	params.PaintID = PaintID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.SetItemListStart
// (Defined, Public)
// Parameters:
// int                            Count                          (Parm)

void UwMyPlayerStatus::SetItemListStart(int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.SetItemListStart");

	UwMyPlayerStatus_SetItemListStart_Params params;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.RemoveQuickSlotSkillItem
// (Defined, Public)
// Parameters:
// int                            UniqueID                       (Parm)

void UwMyPlayerStatus::RemoveQuickSlotSkillItem(int UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.RemoveQuickSlotSkillItem");

	UwMyPlayerStatus_RemoveQuickSlotSkillItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.RemoveQuickSlotItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)

void UwMyPlayerStatus::RemoveQuickSlotItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.RemoveQuickSlotItem");

	UwMyPlayerStatus_RemoveQuickSlotItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.RemoveItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)

void UwMyPlayerStatus::RemoveItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.RemoveItem");

	UwMyPlayerStatus_RemoveItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMyPlayerStatus.IsQuickSlotSkillItem
// (Defined, Public)
// Parameters:
// int                            UniqueID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMyPlayerStatus::IsQuickSlotSkillItem(int UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.IsQuickSlotSkillItem");

	UwMyPlayerStatus_IsQuickSlotSkillItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMyPlayerStatus.IsQuickSlotItem
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMyPlayerStatus::IsQuickSlotItem(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.IsQuickSlotItem");

	UwMyPlayerStatus_IsQuickSlotItem_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMyPlayerStatus.FindSkillItemIndexByUniqueID
// (Defined, Public)
// Parameters:
// int                            UniqueID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMyPlayerStatus::FindSkillItemIndexByUniqueID(int UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.FindSkillItemIndexByUniqueID");

	UwMyPlayerStatus_FindSkillItemIndexByUniqueID_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMyPlayerStatus.FindItemIndexByUniqueID
// (Defined, Public)
// Parameters:
// struct FBtrDouble              UniqueID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMyPlayerStatus::FindItemIndexByUniqueID(const struct FBtrDouble& UniqueID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.FindItemIndexByUniqueID");

	UwMyPlayerStatus_FindItemIndexByUniqueID_Params params;
	params.UniqueID = UniqueID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMyPlayerStatus.FindItemIDBySlotPos
// (Defined, Public)
// Parameters:
// int                            SlotPos                        (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMyPlayerStatus::FindItemIDBySlotPos(int SlotPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMyPlayerStatus.FindItemIDBySlotPos");

	UwMyPlayerStatus_FindItemIDBySlotPos_Params params;
	params.SlotPos = SlotPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBtrIni.RegistMap
// (Event, Public)

void UwBtrIni::RegistMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBtrIni.RegistMap");

	UwBtrIni_RegistMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wBtrIni.AddBoolToMap
// (Native, Public)
// Parameters:
// struct FString                 key                            (Parm, NeedCtorLink)
// bool                           Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwBtrIni::AddBoolToMap(const struct FString& key, bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBtrIni.AddBoolToMap");

	UwBtrIni_AddBoolToMap_Params params;
	params.key = key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBtrIni.AddFloatToMap
// (Native, Public)
// Parameters:
// struct FString                 key                            (Parm, NeedCtorLink)
// float                          Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwBtrIni::AddFloatToMap(const struct FString& key, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBtrIni.AddFloatToMap");

	UwBtrIni_AddFloatToMap_Params params;
	params.key = key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBtrIni.AddIntToMap
// (Native, Public)
// Parameters:
// struct FString                 key                            (Parm, NeedCtorLink)
// int                            Value                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwBtrIni::AddIntToMap(const struct FString& key, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBtrIni.AddIntToMap");

	UwBtrIni_AddIntToMap_Params params;
	params.key = key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBtrIni.AddStringToMap
// (Native, Public)
// Parameters:
// struct FString                 key                            (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwBtrIni::AddStringToMap(const struct FString& key, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBtrIni.AddStringToMap");

	UwBtrIni_AddStringToMap_Params params;
	params.key = key;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.HandleDebugExec
// (Defined, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// struct FString                 Param                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamBase::HandleDebugExec(const struct FString& Command, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.HandleDebugExec");

	UStreamBase_HandleDebugExec_Params params;
	params.Command = Command;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.CompareNames
// (Defined, Static, Public)
// Parameters:
// struct FString                 NameA                          (Parm, NeedCtorLink)
// struct FString                 NameB                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamBase::STATIC_CompareNames(const struct FString& NameA, const struct FString& NameB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.CompareNames");

	UStreamBase_CompareNames_Params params;
	params.NameA = NameA;
	params.NameB = NameB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.ConvertToFileType
// (Final, Defined, Event, Static, Public)
// Parameters:
// struct FString                 Extension                      (Parm, NeedCtorLink)
// TEnumAsByte<EFileType>         ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFileType> UStreamBase::STATIC_ConvertToFileType(const struct FString& Extension)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.ConvertToFileType");

	UStreamBase_ConvertToFileType_Params params;
	params.Extension = Extension;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.ConvertToFileExtension
// (Final, Defined, Event, Static, Public)
// Parameters:
// TEnumAsByte<EFileType>         Type                           (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamBase::STATIC_ConvertToFileExtension(TEnumAsByte<EFileType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.ConvertToFileExtension");

	UStreamBase_ConvertToFileExtension_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.FormatTimeDisplay
// (Final, Defined, Static, Public)
// Parameters:
// float                          Seconds                        (Parm, CoerceParm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamBase::STATIC_FormatTimeDisplay(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.FormatTimeDisplay");

	UStreamBase_FormatTimeDisplay_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.RevInStr
// (Final, Defined, Static, Public)
// Parameters:
// struct FString                 Src                            (Parm, NeedCtorLink)
// struct FString                 Match                          (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamBase::STATIC_RevInStr(const struct FString& Src, const struct FString& Match)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.RevInStr");

	UStreamBase_RevInStr_Params params;
	params.Src = Src;
	params.Match = Match;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.ParseDirectories
// (Final, Defined, Event, Static, Public)
// Parameters:
// struct FString                 InPath                         (Parm, OutParm, NeedCtorLink)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> UStreamBase::STATIC_ParseDirectories(struct FString* InPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.ParseDirectories");

	UStreamBase_ParseDirectories_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InPath != nullptr)
		*InPath = params.InPath;

	return params.ReturnValue;
}


// Function Engine.StreamBase.ParseExtension
// (Final, Defined, Event, Static, Public)
// Parameters:
// struct FString                 FileNameWithExtension          (Parm, OutParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamBase::STATIC_ParseExtension(struct FString* FileNameWithExtension)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.ParseExtension");

	UStreamBase_ParseExtension_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FileNameWithExtension != nullptr)
		*FileNameWithExtension = params.FileNameWithExtension;

	return params.ReturnValue;
}


// Function Engine.StreamBase.ParsePath
// (Final, Defined, Event, Static, Public)
// Parameters:
// struct FString                 InPath                         (Parm, NeedCtorLink)
// struct FFilePath               ParsedPath                     (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamBase::STATIC_ParsePath(const struct FString& InPath, struct FFilePath* ParsedPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.ParsePath");

	UStreamBase_ParsePath_Params params;
	params.InPath = InPath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ParsedPath != nullptr)
		*ParsedPath = params.ParsedPath;

	return params.ReturnValue;
}


// Function Engine.StreamBase.HasExtension
// (Final, Defined, Event, Static, Public)
// Parameters:
// struct FString                 Test                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamBase::STATIC_HasExtension(const struct FString& Test)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.HasExtension");

	UStreamBase_HasExtension_Params params;
	params.Test = Test;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.GetPathRoot
// (Final, Defined, Event, Static, Public)
// Parameters:
// struct FString                 InPath                         (Parm, OutParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamBase::STATIC_GetPathRoot(struct FString* InPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.GetPathRoot");

	UStreamBase_GetPathRoot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (InPath != nullptr)
		*InPath = params.InPath;

	return params.ReturnValue;
}


// Function Engine.StreamBase.IsCaseSensitive
// (Final, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamBase::STATIC_IsCaseSensitive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.IsCaseSensitive");

	UStreamBase_IsCaseSensitive_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.GetPathSeparator
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamBase::STATIC_GetPathSeparator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.GetPathSeparator");

	UStreamBase_GetPathSeparator_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamBase.MultiplyEqual_StrStr
// (Final, Native, Operator, Static, Public)
// Parameters:
// struct FString                 A                              (Parm, OutParm, NeedCtorLink)
// struct FString                 B                              (Parm, CoerceParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamBase::STATIC_MultiplyEqual_StrStr(const struct FString& B, struct FString* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.MultiplyEqual_StrStr");

	UStreamBase_MultiplyEqual_StrStr_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (A != nullptr)
		*A = params.A;

	return params.ReturnValue;
}


// Function Engine.StreamBase.Multiply_StrStr
// (Final, Native, Operator, Static, Public)
// Parameters:
// struct FString                 A                              (Parm, CoerceParm, NeedCtorLink)
// struct FString                 B                              (Parm, CoerceParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamBase::STATIC_Multiply_StrStr(const struct FString& A, const struct FString& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamBase.Multiply_StrStr");

	UStreamBase_Multiply_StrStr_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamTag.DumpTag
// (Final, Native, Public)

void UStreamTag::DumpTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamTag.DumpTag");

	UStreamTag_DumpTag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamTag.DumpScriptTag
// (Defined, Public)

void UStreamTag::DumpScriptTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamTag.DumpScriptTag");

	UStreamTag_DumpScriptTag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamTag.OnRefresh
// (Public, Delegate)

void UStreamTag::OnRefresh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamTag.OnRefresh");

	UStreamTag_OnRefresh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Stream.DumpTags
// (Defined, Public)

void UStream::DumpTags()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.DumpTags");

	UStream_DumpTags_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Stream.DumpScriptTag
// (Defined, Public)

void UStream::DumpScriptTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.DumpScriptTag");

	UStream_DumpScriptTag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Stream.SetHandle
// (Defined, Event, Public)
// Parameters:
// int                            NewHandle                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStream::SetHandle(int NewHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.SetHandle");

	UStream_SetHandle_Params params;
	params.NewHandle = NewHandle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetSongTitle
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStream::GetSongTitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetSongTitle");

	UStream_GetSongTitle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetFullName
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStream::GetFullName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetFullName");

	UStream_GetFullName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetPath
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStream::GetPath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetPath");

	UStream_GetPath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetExtension
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStream::GetExtension()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetExtension");

	UStream_GetExtension_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetFileName
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStream::GetFileName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetFileName");

	UStream_GetFileName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetDirectory
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStream::GetDirectory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetDirectory");

	UStream_GetDirectory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetType
// (Defined, Public)
// Parameters:
// TEnumAsByte<EFileType>         ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EFileType> UStream::GetType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetType");

	UStream_GetType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetTag
// (Defined, Public)
// Parameters:
// class UStreamTag*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamTag* UStream::GetTag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetTag");

	UStream_GetTag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.GetHandle
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStream::GetHandle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.GetHandle");

	UStream_GetHandle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.IsReadOnly
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStream::IsReadOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.IsReadOnly");

	UStream_IsReadOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.LoadID3Tag
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStream::LoadID3Tag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.LoadID3Tag");

	UStream_LoadID3Tag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Stream.SaveID3Tag
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStream::SaveID3Tag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Stream.SaveID3Tag");

	UStream_SaveID3Tag_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.HandleDebugExec
// (Defined, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// struct FString                 Param                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInterface::HandleDebugExec(const struct FString& Command, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.HandleDebugExec");

	UStreamInterface_HandleDebugExec_Params params;
	params.Command = Command;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.ChangeDirectory
// (Defined, Public)
// Parameters:
// struct FString                 DirectoryName                  (Parm, NeedCtorLink)

void UStreamInterface::ChangeDirectory(const struct FString& DirectoryName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.ChangeDirectory");

	UStreamInterface_ChangeDirectory_Params params;
	params.DirectoryName = DirectoryName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInterface.GetCurrentDirectory
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamInterface::GetCurrentDirectory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.GetCurrentDirectory");

	UStreamInterface_GetCurrentDirectory_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.LoadPlaylist
// (Final, Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// TArray<struct FString>         Lines                          (Parm, OutParm, NeedCtorLink)
// bool                           bStrict                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInterface::LoadPlaylist(const struct FString& fileName, bool bStrict, TArray<struct FString>* Lines)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.LoadPlaylist");

	UStreamInterface_LoadPlaylist_Params params;
	params.fileName = fileName;
	params.bStrict = bStrict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Lines != nullptr)
		*Lines = params.Lines;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.ValidFile
// (Final, Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInterface::ValidFile(const struct FString& fileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.ValidFile");

	UStreamInterface_ValidFile_Params params;
	params.fileName = fileName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.CreateStream
// (Final, Native, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// bool                           bStrict                        (OptionalParm, Parm)
// class UStream*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UStream* UStreamInterface::CreateStream(const struct FString& fileName, bool bStrict)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.CreateStream");

	UStreamInterface_CreateStream_Params params;
	params.fileName = fileName;
	params.bStrict = bStrict;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.ValidDirectory
// (Final, Native, Public)
// Parameters:
// struct FString                 DirectoryPath                  (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInterface::ValidDirectory(const struct FString& DirectoryPath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.ValidDirectory");

	UStreamInterface_ValidDirectory_Params params;
	params.DirectoryPath = DirectoryPath;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.RemoveDirectory
// (Final, Native, Public)
// Parameters:
// struct FString                 DirectoryName                  (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInterface::RemoveDirectory(const struct FString& DirectoryName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.RemoveDirectory");

	UStreamInterface_RemoveDirectory_Params params;
	params.DirectoryName = DirectoryName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.CreateDirectory
// (Final, Native, Public)
// Parameters:
// struct FString                 DirectoryName                  (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamInterface::CreateDirectory(const struct FString& DirectoryName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.CreateDirectory");

	UStreamInterface_CreateDirectory_Params params;
	params.DirectoryName = DirectoryName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.GetDirectoryContents
// (Final, Native, Public)
// Parameters:
// TArray<struct FString>         contents                       (Parm, OutParm, NeedCtorLink)
// struct FString                 DirectoryName                  (OptionalParm, Parm, NeedCtorLink)
// TEnumAsByte<EFileType>         FileType                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInterface::GetDirectoryContents(const struct FString& DirectoryName, TEnumAsByte<EFileType> FileType, TArray<struct FString>* contents)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.GetDirectoryContents");

	UStreamInterface_GetDirectoryContents_Params params;
	params.DirectoryName = DirectoryName;
	params.FileType = FileType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (contents != nullptr)
		*contents = params.contents;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.GetDriveLetters
// (Final, Native, Public)
// Parameters:
// TArray<struct FString>         Letters                        (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInterface::GetDriveLetters(TArray<struct FString>* Letters)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.GetDriveLetters");

	UStreamInterface_GetDriveLetters_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Letters != nullptr)
		*Letters = params.Letters;

	return params.ReturnValue;
}


// Function Engine.StreamInterface.GetBaseDirectory
// (Final, Native, Private)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamInterface::GetBaseDirectory()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInterface.GetBaseDirectory");

	UStreamInterface_GetBaseDirectory_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interactions.IsMouseKey
// (Defined, Static, Public)
// Parameters:
// unsigned char                  key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteractions::STATIC_IsMouseKey(unsigned char key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interactions.IsMouseKey");

	UInteractions_IsMouseKey_Params params;
	params.key = key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interactions.IsKeyboardKey
// (Defined, Static, Public)
// Parameters:
// unsigned char                  key                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteractions::STATIC_IsKeyboardKey(unsigned char key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interactions.IsKeyboardKey");

	UInteractions_IsKeyboardKey_Params params;
	params.key = key;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interactions.GetFriendlyName
// (Defined, Static, Public)
// Parameters:
// TEnumAsByte<EInputKey>         iKey                           (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UInteractions::STATIC_GetFriendlyName(TEnumAsByte<EInputKey> iKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interactions.GetFriendlyName");

	UInteractions_GetFriendlyName_Params params;
	params.iKey = iKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.OnIME_Notify
// (Event, Public)
// Parameters:
// int                            Type                           (Parm)
// int                            LangID                         (Parm)
// struct FString                 strText                        (Parm, NeedCtorLink)
// int                            StartPos                       (Parm)
// int                            Size                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::OnIME_Notify(int Type, int LangID, const struct FString& strText, int StartPos, int Size)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.OnIME_Notify");

	UInteraction_OnIME_Notify_Params params;
	params.Type = Type;
	params.LangID = LangID;
	params.strText = strText;
	params.StartPos = StartPos;
	params.Size = Size;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.EnableInteraction
// (Defined, Event, Public)

void UInteraction::EnableInteraction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.EnableInteraction");

	UInteraction_EnableInteraction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.DisableInteraction
// (Defined, Event, Public)

void UInteraction::DisableInteraction()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.DisableInteraction");

	UInteraction_DisableInteraction_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyMusicChange
// (Event, Public)

void UInteraction::NotifyMusicChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyMusicChange");

	UInteraction_NotifyMusicChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.StreamFinished
// (Public)
// Parameters:
// int                            Handle                         (Parm)
// TEnumAsByte<EStreamFinishReason> Reason                         (Parm)

void UInteraction::StreamFinished(int Handle, TEnumAsByte<EStreamFinishReason> Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.StreamFinished");

	UInteraction_StreamFinished_Params params;
	params.Handle = Handle;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Tick
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UInteraction::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Tick");

	UInteraction_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.SetFocus
// (Defined, Public)

void UInteraction::SetFocus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.SetFocus");

	UInteraction_SetFocus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.PostRender
// (Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UInteraction::PostRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.PostRender");

	UInteraction_PostRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.PreRender
// (Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void UInteraction::PreRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.PreRender");

	UInteraction_PreRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.KeyEvent
// (Defined, Public)
// Parameters:
// TEnumAsByte<EInputKey>         key                            (Parm, OutParm)
// TEnumAsByte<EInputAction>      Action                         (Parm, OutParm)
// float                          Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::KeyEvent(float Delta, TEnumAsByte<EInputKey>* key, TEnumAsByte<EInputAction>* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.KeyEvent");

	UInteraction_KeyEvent_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (key != nullptr)
		*key = params.key;
	if (Action != nullptr)
		*Action = params.Action;

	return params.ReturnValue;
}


// Function Engine.Interaction.KeyType
// (Defined, Public)
// Parameters:
// TEnumAsByte<EInputKey>         key                            (Parm, OutParm)
// struct FString                 Unicode                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::KeyType(const struct FString& Unicode, TEnumAsByte<EInputKey>* key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.KeyType");

	UInteraction_KeyType_Params params;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (key != nullptr)
		*key = params.key;

	return params.ReturnValue;
}


// Function Engine.Interaction.Message
// (Defined, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// float                          MsgLife                        (Parm)

void UInteraction::Message(const struct FString& Msg, float MsgLife)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Message");

	UInteraction_Message_Params params;
	params.Msg = Msg;
	params.MsgLife = MsgLife;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.NotifyLevelChange
// (Event, Public)

void UInteraction::NotifyLevelChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.NotifyLevelChange");

	UInteraction_NotifyLevelChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.Initialized
// (Event, Public)

void UInteraction::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Initialized");

	UInteraction_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Interaction.ScreenToWorld
// (Native, Public)
// Parameters:
// struct FVector                 Location                       (Parm)
// struct FVector                 CameraLocation                 (OptionalParm, Parm)
// struct FRotator                CameraRotation                 (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UInteraction::ScreenToWorld(const struct FVector& Location, const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.ScreenToWorld");

	UInteraction_ScreenToWorld_Params params;
	params.Location = Location;
	params.CameraLocation = CameraLocation;
	params.CameraRotation = CameraRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.WorldToScreen
// (Native, Public)
// Parameters:
// struct FVector                 Location                       (Parm)
// struct FVector                 CameraLocation                 (OptionalParm, Parm)
// struct FRotator                CameraRotation                 (OptionalParm, Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UInteraction::WorldToScreen(const struct FVector& Location, const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.WorldToScreen");

	UInteraction_WorldToScreen_Params params;
	params.Location = Location;
	params.CameraLocation = CameraLocation;
	params.CameraRotation = CameraRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.ConsoleCommand
// (Native, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteraction::ConsoleCommand(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.ConsoleCommand");

	UInteraction_ConsoleCommand_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Interaction.Initialize
// (Native, Public)

void UInteraction::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Interaction.Initialize");

	UInteraction_Initialize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.streamdebug
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// struct FString                 Param                          (Parm, NeedCtorLink)

void UStreamInteraction::streamdebug(const struct FString& Command, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.streamdebug");

	UStreamInteraction_streamdebug_Params params;
	params.Command = Command;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.PC
// (Defined, Protected)
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* UStreamInteraction::PC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.PC");

	UStreamInteraction_PC_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.KillMusic
// (Defined, Protected)

void UStreamInteraction::KillMusic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.KillMusic");

	UStreamInteraction_KillMusic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.ClearSongInfo
// (Defined, Public)

void UStreamInteraction::ClearSongInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.ClearSongInfo");

	UStreamInteraction_ClearSongInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.HasPlayer
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInteraction::HasPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.HasPlayer");

	UStreamInteraction_HasPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.IsPlaying
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInteraction::IsPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.IsPlaying");

	UStreamInteraction_IsPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.GetStreamDuration
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UStreamInteraction::GetStreamDuration()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.GetStreamDuration");

	UStreamInteraction_GetStreamDuration_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.GetStreamVolume
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UStreamInteraction::GetStreamVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.GetStreamVolume");

	UStreamInteraction_GetStreamVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.GetStreamPosition
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UStreamInteraction::GetStreamPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.GetStreamPosition");

	UStreamInteraction_GetStreamPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.PlayStream
// (Defined, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// int                            SeekSeconds                    (OptionalParm, Parm)

void UStreamInteraction::PlayStream(const struct FString& fileName, int SeekSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.PlayStream");

	UStreamInteraction_PlayStream_Params params;
	params.fileName = fileName;
	params.SeekSeconds = SeekSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.Seek
// (Defined, Public)
// Parameters:
// float                          SeekSeconds                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInteraction::Seek(float SeekSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.Seek");

	UStreamInteraction_Seek_Params params;
	params.SeekSeconds = SeekSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.SeekStream
// (Defined, Exec, Public)
// Parameters:
// float                          Seconds                        (Parm)

void UStreamInteraction::SeekStream(float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.SeekStream");

	UStreamInteraction_SeekStream_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.SetMusicVolume
// (Defined, Exec, Public)
// Parameters:
// float                          NewVolume                      (Parm)

void UStreamInteraction::SetMusicVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.SetMusicVolume");

	UStreamInteraction_SetMusicVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.StopSong
// (Defined, Exec, Public)

void UStreamInteraction::StopSong()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.StopSong");

	UStreamInteraction_StopSong_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.PlaySong
// (Defined, Exec, Public)
// Parameters:
// struct FString                 SongName                       (Parm, NeedCtorLink)
// float                          InitialTime                    (Parm)

void UStreamInteraction::PlaySong(const struct FString& SongName, float InitialTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.PlaySong");

	UStreamInteraction_PlaySong_Params params;
	params.SongName = SongName;
	params.InitialTime = InitialTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.PauseSong
// (Defined, Exec, Public)

void UStreamInteraction::PauseSong()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.PauseSong");

	UStreamInteraction_PauseSong_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.PrevSong
// (Defined, Exec, Public)
// Parameters:
// bool                           bForce                         (OptionalParm, Parm)

void UStreamInteraction::PrevSong(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.PrevSong");

	UStreamInteraction_PrevSong_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.NextSong
// (Defined, Exec, Public)
// Parameters:
// bool                           bForce                         (OptionalParm, Parm)

void UStreamInteraction::NextSong(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.NextSong");

	UStreamInteraction_NextSong_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.CurrentHandle
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamInteraction::CurrentHandle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.CurrentHandle");

	UStreamInteraction_CurrentHandle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.GetCurrentStream
// (Defined, Exec, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamInteraction::GetCurrentStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.GetCurrentStream");

	UStreamInteraction_GetCurrentStream_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.NotifyLevelChange
// (Defined, Event, Public)

void UStreamInteraction::NotifyLevelChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.NotifyLevelChange");

	UStreamInteraction_NotifyLevelChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.StreamFinished
// (Defined, Public)
// Parameters:
// int                            Handle                         (Parm)
// TEnumAsByte<EStreamFinishReason> Reason                         (Parm)

void UStreamInteraction::StreamFinished(int Handle, TEnumAsByte<EStreamFinishReason> Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.StreamFinished");

	UStreamInteraction_StreamFinished_Params params;
	params.Handle = Handle;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.SetStreamAttachment
// (Defined, Public)
// Parameters:
// class UStream*                 StreamObj                      (Parm)

void UStreamInteraction::SetStreamAttachment(class UStream* StreamObj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.SetStreamAttachment");

	UStreamInteraction_SetStreamAttachment_Params params;
	params.StreamObj = StreamObj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.IsPaused
// (Final, Native, Public)
// Parameters:
// int                            SongHandle                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamInteraction::IsPaused(int SongHandle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.IsPaused");

	UStreamInteraction_IsPaused_Params params;
	params.SongHandle = SongHandle;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UStreamInteraction::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.Tick");

	UStreamInteraction_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.QueueNextSong
// (Defined, Public)

void UStreamInteraction::QueueNextSong()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.QueueNextSong");

	UStreamInteraction_QueueNextSong_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.CreatePlaylistManager
// (Defined, Public)
// Parameters:
// class UStreamPlaylistManager*  ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamPlaylistManager* UStreamInteraction::CreatePlaylistManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.CreatePlaylistManager");

	UStreamInteraction_CreatePlaylistManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.CreateFileManager
// (Defined, Public)
// Parameters:
// class UStreamInterface*        ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamInterface* UStreamInteraction::CreateFileManager()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.CreateFileManager");

	UStreamInteraction_CreateFileManager_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamInteraction.Initialized
// (Defined, Event, Public)

void UStreamInteraction::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.Initialized");

	UStreamInteraction_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.OnAdjustVolume
// (Public, Delegate)
// Parameters:
// float                          NewVolume                      (Parm)

void UStreamInteraction::OnAdjustVolume(float NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.OnAdjustVolume");

	UStreamInteraction_OnAdjustVolume_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.OnStreamingStopped
// (Public, Delegate)

void UStreamInteraction::OnStreamingStopped()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.OnStreamingStopped");

	UStreamInteraction_OnStreamingStopped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamInteraction.OnStreamChanged
// (Public, Delegate)
// Parameters:
// struct FString                 NewStreamFileName              (Parm, NeedCtorLink)

void UStreamInteraction::OnStreamChanged(const struct FString& NewStreamFileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamInteraction.OnStreamChanged");

	UStreamInteraction_OnStreamChanged_Params params;
	params.NewStreamFileName = NewStreamFileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Spline.NextSplineRot
// (Final, Simulated, Native, Public)
// Parameters:
// float                          dt                             (Parm)
// struct FRotator                D                              (Parm, OutParm)
// struct FRotator                V                              (Parm, OutParm)
// struct FRotator                A                              (Parm, OutParm)
// float                          outdt                          (Parm, OutParm)
// bool                           bSmoothDt                      (OptionalParm, Parm)
// bool                           bAccumDeltas                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USpline::NextSplineRot(float dt, bool bSmoothDt, bool bAccumDeltas, struct FRotator* D, struct FRotator* V, struct FRotator* A, float* outdt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Spline.NextSplineRot");

	USpline_NextSplineRot_Params params;
	params.dt = dt;
	params.bSmoothDt = bSmoothDt;
	params.bAccumDeltas = bAccumDeltas;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (D != nullptr)
		*D = params.D;
	if (V != nullptr)
		*V = params.V;
	if (A != nullptr)
		*A = params.A;
	if (outdt != nullptr)
		*outdt = params.outdt;

	return params.ReturnValue;
}


// Function Engine.Spline.NextSplinePos
// (Final, Simulated, Native, Public)
// Parameters:
// float                          dt                             (Parm)
// struct FVector                 D                              (Parm, OutParm)
// struct FVector                 V                              (Parm, OutParm)
// struct FVector                 A                              (Parm, OutParm)
// float                          outdt                          (Parm, OutParm)
// bool                           bSmoothDt                      (OptionalParm, Parm)
// bool                           bAccumDeltas                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USpline::NextSplinePos(float dt, bool bSmoothDt, bool bAccumDeltas, struct FVector* D, struct FVector* V, struct FVector* A, float* outdt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Spline.NextSplinePos");

	USpline_NextSplinePos_Params params;
	params.dt = dt;
	params.bSmoothDt = bSmoothDt;
	params.bAccumDeltas = bAccumDeltas;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (D != nullptr)
		*D = params.D;
	if (V != nullptr)
		*V = params.V;
	if (A != nullptr)
		*A = params.A;
	if (outdt != nullptr)
		*outdt = params.outdt;

	return params.ReturnValue;
}


// Function Engine.Spline.InitSplineRot
// (Final, Simulated, Native, Public)
// Parameters:
// float                          t0                             (Parm)
// struct FRotator                d0                             (Parm)
// struct FRotator                v0                             (Parm)
// float                          t1                             (Parm)
// struct FRotator                d1                             (Parm)
// struct FRotator                v1                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USpline::InitSplineRot(float t0, const struct FRotator& d0, const struct FRotator& v0, float t1, const struct FRotator& d1, const struct FRotator& v1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Spline.InitSplineRot");

	USpline_InitSplineRot_Params params;
	params.t0 = t0;
	params.d0 = d0;
	params.v0 = v0;
	params.t1 = t1;
	params.d1 = d1;
	params.v1 = v1;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Spline.InitSplinePath
// (Final, Simulated, Native, Public)
// Parameters:
// float                          t0                             (Parm)
// struct FVector                 d0                             (Parm)
// struct FVector                 v0                             (Parm)
// float                          t1                             (Parm)
// struct FVector                 d1                             (Parm)
// struct FVector                 v1                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool USpline::InitSplinePath(float t0, const struct FVector& d0, const struct FVector& v0, float t1, const struct FVector& d1, const struct FVector& v1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Spline.InitSplinePath");

	USpline_InitSplinePath_Params params;
	params.t0 = t0;
	params.d0 = d0;
	params.v0 = v0;
	params.t1 = t1;
	params.d1 = d1;
	params.v1 = v1;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBTLoadingScreenDrawer.DrawLoadingScreen
// (Defined, Event, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void UwBTLoadingScreenDrawer::DrawLoadingScreen(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.DrawLoadingScreen");

	UwBTLoadingScreenDrawer_DrawLoadingScreen_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wBTLoadingScreenDrawer.ClearOtherLoadingState
// (Defined, Event, Public)

void UwBTLoadingScreenDrawer::ClearOtherLoadingState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.ClearOtherLoadingState");

	UwBTLoadingScreenDrawer_ClearOtherLoadingState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wBTLoadingScreenDrawer.UpdateOtherLoadingState
// (Defined, Event, Public)
// Parameters:
// struct FLoadingMessageItem     Item                           (Parm, NeedCtorLink)
// struct FString                 strMsg                         (Parm, NeedCtorLink)

void UwBTLoadingScreenDrawer::UpdateOtherLoadingState(const struct FLoadingMessageItem& Item, const struct FString& strMsg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.UpdateOtherLoadingState");

	UwBTLoadingScreenDrawer_UpdateOtherLoadingState_Params params;
	params.Item = Item;
	params.strMsg = strMsg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wBTLoadingScreenDrawer.UpdateMyLoadingState
// (Defined, Event, Public)
// Parameters:
// struct FString                 LoadingState                   (Parm, NeedCtorLink)

void UwBTLoadingScreenDrawer::UpdateMyLoadingState(const struct FString& LoadingState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.UpdateMyLoadingState");

	UwBTLoadingScreenDrawer_UpdateMyLoadingState_Params params;
	params.LoadingState = LoadingState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wBTLoadingScreenDrawer.UpdateProgress
// (Defined, Event, Public)
// Parameters:
// int                            CurrenetProgress               (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwBTLoadingScreenDrawer::UpdateProgress(int CurrenetProgress)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.UpdateProgress");

	UwBTLoadingScreenDrawer_UpdateProgress_Params params;
	params.CurrenetProgress = CurrenetProgress;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBTLoadingScreenDrawer.DestroyBackGroundImage
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwBTLoadingScreenDrawer::DestroyBackGroundImage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.DestroyBackGroundImage");

	UwBTLoadingScreenDrawer_DestroyBackGroundImage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBTLoadingScreenDrawer.CreateBackGroundImage
// (Defined, Event, Public)
// Parameters:
// class UwMatchMaker*            MatchMaker                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwBTLoadingScreenDrawer::CreateBackGroundImage(class UwMatchMaker* MatchMaker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.CreateBackGroundImage");

	UwBTLoadingScreenDrawer_CreateBackGroundImage_Params params;
	params.MatchMaker = MatchMaker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wBTLoadingScreenDrawer.Initialize
// (Defined, Event, Public)

void UwBTLoadingScreenDrawer::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.Initialize");

	UwBTLoadingScreenDrawer_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wBTLoadingScreenDrawer.RemoveFromRoot
// (Native, Public)
// Parameters:
// class UMaterial*               Image                          (Parm)

void UwBTLoadingScreenDrawer::RemoveFromRoot(class UMaterial* Image)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.RemoveFromRoot");

	UwBTLoadingScreenDrawer_RemoveFromRoot_Params params;
	params.Image = Image;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wBTLoadingScreenDrawer.AddToRoot
// (Native, Public)
// Parameters:
// class UMaterial*               Image                          (Parm)

void UwBTLoadingScreenDrawer::AddToRoot(class UMaterial* Image)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wBTLoadingScreenDrawer.AddToRoot");

	UwBTLoadingScreenDrawer_AddToRoot_Params params;
	params.Image = Image;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Info.GetDescriptionText
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInfo::STATIC_GetDescriptionText(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Info.GetDescriptionText");

	AInfo_GetDescriptionText_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Info.GetSecurityLevel
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AInfo::STATIC_GetSecurityLevel(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Info.GetSecurityLevel");

	AInfo_GetSecurityLevel_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Info.AllowClassRemoval
// (Defined, Event, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInfo::STATIC_AllowClassRemoval()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Info.AllowClassRemoval");

	AInfo_AllowClassRemoval_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Info.AcceptPlayInfoProperty
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropertyName                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInfo::STATIC_AcceptPlayInfoProperty(const struct FString& PropertyName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Info.AcceptPlayInfoProperty");

	AInfo_AcceptPlayInfoProperty_Params params;
	params.PropertyName = PropertyName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Info.FillPlayInfo
// (Defined, Static, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void AInfo::STATIC_FillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Info.FillPlayInfo");

	AInfo_FillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerChatManager.ChatDebug
// (Simulated, Public)

void APlayerChatManager::ChatDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.ChatDebug");

	APlayerChatManager_ChatDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerChatManager.Count
// (Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerChatManager::Count()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.Count");

	APlayerChatManager_Count_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.GetPlayerRestriction
// (Defined, Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char APlayerChatManager::GetPlayerRestriction(int PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.GetPlayerRestriction");

	APlayerChatManager_GetPlayerRestriction_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.ClientIsBanned
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 PlayerHash                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::ClientIsBanned(const struct FString& PlayerHash)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.ClientIsBanned");

	APlayerChatManager_ClientIsBanned_Params params;
	params.PlayerHash = PlayerHash;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.IsBanned
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::IsBanned(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.IsBanned");

	APlayerChatManager_IsBanned_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.ClearRestrictionID
// (Defined, Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// unsigned char                  Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::ClearRestrictionID(int PlayerID, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.ClearRestrictionID");

	APlayerChatManager_ClearRestrictionID_Params params;
	params.PlayerID = PlayerID;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.ClearRestriction
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 PlayerHash                     (Parm, NeedCtorLink)
// unsigned char                  Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::ClearRestriction(const struct FString& PlayerHash, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.ClearRestriction");

	APlayerChatManager_ClearRestriction_Params params;
	params.PlayerHash = PlayerHash;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.AddRestrictionID
// (Defined, Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// unsigned char                  Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::AddRestrictionID(int PlayerID, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.AddRestrictionID");

	APlayerChatManager_AddRestrictionID_Params params;
	params.PlayerID = PlayerID;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.AddRestriction
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 PlayerHash                     (Parm, NeedCtorLink)
// unsigned char                  Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::AddRestriction(const struct FString& PlayerHash, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.AddRestriction");

	APlayerChatManager_AddRestriction_Params params;
	params.PlayerHash = PlayerHash;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.SetRestrictionID
// (Defined, Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// unsigned char                  Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::SetRestrictionID(int PlayerID, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.SetRestrictionID");

	APlayerChatManager_SetRestrictionID_Params params;
	params.PlayerID = PlayerID;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.SetRestriction
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 PlayerHash                     (Parm, NeedCtorLink)
// unsigned char                  Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::SetRestriction(const struct FString& PlayerHash, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.SetRestriction");

	APlayerChatManager_SetRestriction_Params params;
	params.PlayerHash = PlayerHash;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.AcceptVoice
// (Defined, Event, Public)
// Parameters:
// class APlayerReplicationInfo*  Sender                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::AcceptVoice(class APlayerReplicationInfo* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.AcceptVoice");

	APlayerChatManager_AcceptVoice_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.AcceptSpeech
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Sender                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::AcceptSpeech(class APlayerReplicationInfo* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.AcceptSpeech");

	APlayerChatManager_AcceptSpeech_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.AcceptLocalized
// (Defined, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 obj                            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::AcceptLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.AcceptLocalized");

	APlayerChatManager_AcceptLocalized_Params params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.obj = obj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.AcceptText
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Sender                         (Parm)
// struct FString                 Msg                            (Parm, OutParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerChatManager::AcceptText(class APlayerReplicationInfo* Sender, const struct FName& Type, struct FString* Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.AcceptText");

	APlayerChatManager_AcceptText_Params params;
	params.Sender = Sender;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Msg != nullptr)
		*Msg = params.Msg;

	return params.ReturnValue;
}


// Function Engine.PlayerChatManager.UnTrackPlayer
// (Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)

void APlayerChatManager::UnTrackPlayer(int PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.UnTrackPlayer");

	APlayerChatManager_UnTrackPlayer_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerChatManager.TrackNewPlayer
// (Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// struct FString                 PlayerHash                     (Parm, NeedCtorLink)
// struct FString                 PlayerAddress                  (Parm, NeedCtorLink)

void APlayerChatManager::TrackNewPlayer(int PlayerID, const struct FString& PlayerHash, const struct FString& PlayerAddress)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.TrackNewPlayer");

	APlayerChatManager_TrackNewPlayer_Params params;
	params.PlayerID = PlayerID;
	params.PlayerHash = PlayerHash;
	params.PlayerAddress = PlayerAddress;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerChatManager.ReceiveBanInfo
// (Simulated, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerChatManager::ReceiveBanInfo(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.ReceiveBanInfo");

	APlayerChatManager_ReceiveBanInfo_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerChatManager.PostBeginPlay
// (Defined, Event, Public)

void APlayerChatManager::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerChatManager.PostBeginPlay");

	APlayerChatManager_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatRoom.NotifyTeamChange
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// int                            NewTeamIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::NotifyTeamChange(class APlayerReplicationInfo* PRI, int NewTeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.NotifyTeamChange");

	AVoiceChatRoom_NotifyTeamChange_Params params;
	params.PRI = PRI;
	params.NewTeamIndex = NewTeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.RemoveChild
// (Defined, Simulated, Public)
// Parameters:
// class AVoiceChatRoom*          Child                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::RemoveChild(class AVoiceChatRoom* Child)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.RemoveChild");

	AVoiceChatRoom_RemoveChild_Params params;
	params.Child = Child;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.AddChild
// (Defined, Simulated, Public)
// Parameters:
// class AVoiceChatRoom*          NewChild                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::AddChild(class AVoiceChatRoom* NewChild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.AddChild");

	AVoiceChatRoom_AddChild_Params params;
	params.NewChild = NewChild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.SetChannelPassword
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 InPassword                     (Parm, NeedCtorLink)

void AVoiceChatRoom::SetChannelPassword(const struct FString& InPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.SetChannelPassword");

	AVoiceChatRoom_SetChannelPassword_Params params;
	params.InPassword = InPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatRoom.SetMemberMask
// (Simulated, Public)
// Parameters:
// int                            NewMask                        (Parm)

void AVoiceChatRoom::SetMemberMask(int NewMask)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.SetMemberMask");

	AVoiceChatRoom_SetMemberMask_Params params;
	params.NewMask = NewMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatRoom.SetTeam
// (Defined, Simulated, Public)
// Parameters:
// int                            NewTeam                        (Parm)

void AVoiceChatRoom::SetTeam(int NewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.SetTeam");

	AVoiceChatRoom_SetTeam_Params params;
	params.NewTeam = NewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatRoom.RemoveMember
// (Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AVoiceChatRoom::RemoveMember(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.RemoveMember");

	AVoiceChatRoom_RemoveMember_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatRoom.AddMember
// (Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AVoiceChatRoom::AddMember(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.AddMember");

	AVoiceChatRoom_AddMember_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatRoom.LeaveChannel
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  LeavingPRI                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::LeaveChannel(class APlayerReplicationInfo* LeavingPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.LeaveChannel");

	AVoiceChatRoom_LeaveChannel_Params params;
	params.LeavingPRI = LeavingPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.JoinChannel
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  NewPRI                         (Parm)
// struct FString                 InPassword                     (Parm, NeedCtorLink)
// TEnumAsByte<EJoinChatResult>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EJoinChatResult> AVoiceChatRoom::JoinChannel(class APlayerReplicationInfo* NewPRI, const struct FString& InPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.JoinChannel");

	AVoiceChatRoom_JoinChannel_Params params;
	params.NewPRI = NewPRI;
	params.InPassword = InPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.IsMember
// (Defined, Simulated, Event, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// bool                           bNoCascade                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::IsMember(class APlayerReplicationInfo* PRI, bool bNoCascade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.IsMember");

	AVoiceChatRoom_IsMember_Params params;
	params.PRI = PRI;
	params.bNoCascade = bNoCascade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.IsFull
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::IsFull()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.IsFull");

	AVoiceChatRoom_IsFull_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.CanJoinChannel
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::CanJoinChannel(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.CanJoinChannel");

	AVoiceChatRoom_CanJoinChannel_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.IsPrivateChannel
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::IsPrivateChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.IsPrivateChannel");

	AVoiceChatRoom_IsPrivateChannel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.IsTeamChannel
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::IsTeamChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.IsTeamChannel");

	AVoiceChatRoom_IsTeamChannel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.IsPublicChannel
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::IsPublicChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.IsPublicChannel");

	AVoiceChatRoom_IsPublicChannel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.GetTeam
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatRoom::GetTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.GetTeam");

	AVoiceChatRoom_GetTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.GetTitle
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVoiceChatRoom::GetTitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.GetTitle");

	AVoiceChatRoom_GetTitle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.ValidMask
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatRoom::ValidMask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.ValidMask");

	AVoiceChatRoom_ValidMask_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.GetPassword
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVoiceChatRoom::GetPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.GetPassword");

	AVoiceChatRoom_GetPassword_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.GetMask
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatRoom::GetMask()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.GetMask");

	AVoiceChatRoom_GetMask_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.GetMaxChatters
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatRoom::GetMaxChatters()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.GetMaxChatters");

	AVoiceChatRoom_GetMaxChatters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatRoom.GetMembers
// (Simulated, Public)
// Parameters:
// TArray<class APlayerReplicationInfo*> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class APlayerReplicationInfo*> AVoiceChatRoom::GetMembers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatRoom.GetMembers");

	AVoiceChatRoom_GetMembers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetTitle
// (Defined, Simulated, Public)
// Parameters:
// class AVoiceChatRoom*          Room                           (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVoiceChatReplicationInfo::GetTitle(class AVoiceChatRoom* Room)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetTitle");

	AVoiceChatReplicationInfo_GetTitle_Params params;
	params.Room = Room;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetMask
// (Defined, Simulated, Public)
// Parameters:
// class AVoiceChatRoom*          Room                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatReplicationInfo::GetMask(class AVoiceChatRoom* Room)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetMask");

	AVoiceChatReplicationInfo_GetMask_Params params;
	params.Room = Room;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.SetMask
// (Defined, Public)
// Parameters:
// class AVoiceChatRoom*          Room                           (Parm)
// int                            NewMask                        (Parm)

void AVoiceChatReplicationInfo::SetMask(class AVoiceChatRoom* Room, int NewMask)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.SetMask");

	AVoiceChatReplicationInfo_SetMask_Params params;
	params.Room = Room;
	params.NewMask = NewMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.ValidRoom
// (Defined, Simulated, Public)
// Parameters:
// class AVoiceChatRoom*          Room                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatReplicationInfo::ValidRoom(class AVoiceChatRoom* Room)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.ValidRoom");

	AVoiceChatReplicationInfo_ValidRoom_Params params;
	params.Room = Room;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetCodecInfo
// (Defined, Static, Public)
// Parameters:
// struct FString                 Codec                          (Parm, NeedCtorLink)
// struct FString                 CodecName                      (Parm, OutParm, NeedCtorLink)
// struct FString                 CodecDescription               (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatReplicationInfo::STATIC_GetCodecInfo(const struct FString& Codec, struct FString* CodecName, struct FString* CodecDescription)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetCodecInfo");

	AVoiceChatReplicationInfo_GetCodecInfo_Params params;
	params.Codec = Codec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CodecName != nullptr)
		*CodecName = params.CodecName;
	if (CodecDescription != nullptr)
		*CodecDescription = params.CodecDescription;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetInstalledCodecs
// (Defined, Static, Public)
// Parameters:
// TArray<struct FString>         Codecs                         (Parm, OutParm, NeedCtorLink)

void AVoiceChatReplicationInfo::STATIC_GetInstalledCodecs(TArray<struct FString>* Codecs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetInstalledCodecs");

	AVoiceChatReplicationInfo_GetInstalledCodecs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Codecs != nullptr)
		*Codecs = params.Codecs;
}


// Function Engine.VoiceChatReplicationInfo.GetDescriptionText
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVoiceChatReplicationInfo::STATIC_GetDescriptionText(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetDescriptionText");

	AVoiceChatReplicationInfo_GetDescriptionText_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.FillPlayInfo
// (Defined, Static, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void AVoiceChatReplicationInfo::STATIC_FillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.FillPlayInfo");

	AVoiceChatReplicationInfo_FillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.CheckChannels
// (Defined, Simulated, Private)

void AVoiceChatReplicationInfo::CheckChannels()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.CheckChannels");

	AVoiceChatReplicationInfo_CheckChannels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.DestroyVoiceChannel
// (Simulated, Protected)
// Parameters:
// class AVoiceChatRoom*          Channel                        (Parm)

void AVoiceChatReplicationInfo::DestroyVoiceChannel(class AVoiceChatRoom* Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.DestroyVoiceChannel");

	AVoiceChatReplicationInfo_DestroyVoiceChannel_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.CreateNewVoiceChannel
// (Defined, Simulated, Protected)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (OptionalParm, Parm)
// class AVoiceChatRoom*          ReturnValue                    (Parm, OutParm, ReturnParm)

class AVoiceChatRoom* AVoiceChatReplicationInfo::CreateNewVoiceChannel(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.CreateNewVoiceChannel");

	AVoiceChatReplicationInfo_CreateNewVoiceChannel_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.IsMember
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  TestPRI                        (Parm)
// int                            ChannelIndex                   (Parm)
// bool                           bNoCascade                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatReplicationInfo::IsMember(class APlayerReplicationInfo* TestPRI, int ChannelIndex, bool bNoCascade)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.IsMember");

	AVoiceChatReplicationInfo_IsMember_Params params;
	params.TestPRI = TestPRI;
	params.ChannelIndex = ChannelIndex;
	params.bNoCascade = bNoCascade;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetPlayerChannelCount
// (Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatReplicationInfo::GetPlayerChannelCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetPlayerChannelCount");

	AVoiceChatReplicationInfo_GetPlayerChannelCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetPublicChannelCount
// (Simulated, Public)
// Parameters:
// bool                           bSingleTeam                    (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatReplicationInfo::GetPublicChannelCount(bool bSingleTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetPublicChannelCount");

	AVoiceChatReplicationInfo_GetPublicChannelCount_Params params;
	params.bSingleTeam = bSingleTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetPlayerChannels
// (Simulated, Public)
// Parameters:
// TArray<class AVoiceChatRoom*>  ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AVoiceChatRoom*> AVoiceChatReplicationInfo::GetPlayerChannels()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetPlayerChannels");

	AVoiceChatReplicationInfo_GetPlayerChannels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetPublicChannels
// (Simulated, Public)
// Parameters:
// TArray<class AVoiceChatRoom*>  ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AVoiceChatRoom*> AVoiceChatReplicationInfo::GetPublicChannels()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetPublicChannels");

	AVoiceChatReplicationInfo_GetPublicChannels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetChannels
// (Simulated, Public)
// Parameters:
// TArray<class AVoiceChatRoom*>  ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AVoiceChatRoom*> AVoiceChatReplicationInfo::GetChannels()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetChannels");

	AVoiceChatReplicationInfo_GetChannels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetDefaultChannel
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVoiceChatReplicationInfo::GetDefaultChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetDefaultChannel");

	AVoiceChatReplicationInfo_GetDefaultChannel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetMemberChannels
// (Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> AVoiceChatReplicationInfo::GetMemberChannels(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetMemberChannels");

	AVoiceChatReplicationInfo_GetMemberChannels_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetChannelMembersAt
// (Simulated, Public)
// Parameters:
// int                            Index                          (Parm)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> AVoiceChatReplicationInfo::GetChannelMembersAt(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetChannelMembersAt");

	AVoiceChatReplicationInfo_GetChannelMembersAt_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetChannelMembers
// (Simulated, Public)
// Parameters:
// struct FString                 ChatRoomName                   (Parm, NeedCtorLink)
// int                            TeamIndex                      (OptionalParm, Parm)
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> AVoiceChatReplicationInfo::GetChannelMembers(const struct FString& ChatRoomName, int TeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetChannelMembers");

	AVoiceChatReplicationInfo_GetChannelMembers_Params params;
	params.ChatRoomName = ChatRoomName;
	params.TeamIndex = TeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetChannelAt
// (Defined, Simulated, Public)
// Parameters:
// int                            Index                          (Parm)
// class AVoiceChatRoom*          ReturnValue                    (Parm, OutParm, ReturnParm)

class AVoiceChatRoom* AVoiceChatReplicationInfo::GetChannelAt(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetChannelAt");

	AVoiceChatReplicationInfo_GetChannelAt_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetChannel
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ChatRoomName                   (Parm, NeedCtorLink)
// int                            TeamIndex                      (OptionalParm, Parm)
// class AVoiceChatRoom*          ReturnValue                    (Parm, OutParm, ReturnParm)

class AVoiceChatRoom* AVoiceChatReplicationInfo::GetChannel(const struct FString& ChatRoomName, int TeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetChannel");

	AVoiceChatReplicationInfo_GetChannel_Params params;
	params.ChatRoomName = ChatRoomName;
	params.TeamIndex = TeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetChannelIndex
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FString                 ChannelTitle                   (Parm, NeedCtorLink)
// int                            TeamIndex                      (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatReplicationInfo::GetChannelIndex(const struct FString& ChannelTitle, int TeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetChannelIndex");

	AVoiceChatReplicationInfo_GetChannelIndex_Params params;
	params.ChannelTitle = ChannelTitle;
	params.TeamIndex = TeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.GetChannelCount
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVoiceChatReplicationInfo::GetChannelCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.GetChannelCount");

	AVoiceChatReplicationInfo_GetChannelCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.NotifyTeamChange
// (Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// int                            TeamIndex                      (Parm)

void AVoiceChatReplicationInfo::NotifyTeamChange(class APlayerReplicationInfo* PRI, int TeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.NotifyTeamChange");

	AVoiceChatReplicationInfo_NotifyTeamChange_Params params;
	params.PRI = PRI;
	params.TeamIndex = TeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.RemoveVoiceChannel
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatReplicationInfo::RemoveVoiceChannel(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.RemoveVoiceChannel");

	AVoiceChatReplicationInfo_RemoveVoiceChannel_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.AddVoiceChannel
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (OptionalParm, Parm)
// class AVoiceChatRoom*          ReturnValue                    (Parm, OutParm, ReturnParm)

class AVoiceChatRoom* AVoiceChatReplicationInfo::AddVoiceChannel(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.AddVoiceChannel");

	AVoiceChatReplicationInfo_AddVoiceChannel_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.LeaveChannel
// (Defined, Public)
// Parameters:
// struct FString                 ChannelTitle                   (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  PRI                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatReplicationInfo::LeaveChannel(const struct FString& ChannelTitle, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.LeaveChannel");

	AVoiceChatReplicationInfo_LeaveChannel_Params params;
	params.ChannelTitle = ChannelTitle;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.JoinChannelAt
// (Defined, Public)
// Parameters:
// int                            ChannelIndex                   (Parm)
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 Password                       (Parm, NeedCtorLink)
// TEnumAsByte<EJoinChatResult>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EJoinChatResult> AVoiceChatReplicationInfo::JoinChannelAt(int ChannelIndex, class APlayerReplicationInfo* PRI, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.JoinChannelAt");

	AVoiceChatReplicationInfo_JoinChannelAt_Params params;
	params.ChannelIndex = ChannelIndex;
	params.PRI = PRI;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.JoinChannel
// (Defined, Public)
// Parameters:
// struct FString                 ChannelTitle                   (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 Password                       (Parm, NeedCtorLink)
// TEnumAsByte<EJoinChatResult>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EJoinChatResult> AVoiceChatReplicationInfo::JoinChannel(const struct FString& ChannelTitle, class APlayerReplicationInfo* PRI, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.JoinChannel");

	AVoiceChatReplicationInfo_JoinChannel_Params params;
	params.ChannelTitle = ChannelTitle;
	params.PRI = PRI;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.CanJoinChannel
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ChannelTitle                   (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  PRI                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVoiceChatReplicationInfo::CanJoinChannel(const struct FString& ChannelTitle, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.CanJoinChannel");

	AVoiceChatReplicationInfo_CanJoinChannel_Params params;
	params.ChannelTitle = ChannelTitle;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VoiceChatReplicationInfo.RemoveVoiceChatter
// (Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AVoiceChatReplicationInfo::RemoveVoiceChatter(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.RemoveVoiceChatter");

	AVoiceChatReplicationInfo_RemoveVoiceChatter_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.AddVoiceChatter
// (Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  NewPRI                         (Parm)

void AVoiceChatReplicationInfo::AddVoiceChatter(class APlayerReplicationInfo* NewPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.AddVoiceChatter");

	AVoiceChatReplicationInfo_AddVoiceChatter_Params params;
	params.NewPRI = NewPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.InitChannels
// (Simulated, Public)

void AVoiceChatReplicationInfo::InitChannels()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.InitChannels");

	AVoiceChatReplicationInfo_InitChannels_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.PostNetBeginPlay
// (Defined, Simulated, Event, Public)

void AVoiceChatReplicationInfo::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.PostNetBeginPlay");

	AVoiceChatReplicationInfo_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.PostBeginPlay
// (Defined, Event, Public)

void AVoiceChatReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.PostBeginPlay");

	AVoiceChatReplicationInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VoiceChatReplicationInfo.Timer
// (Defined, Event, Public)

void AVoiceChatReplicationInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VoiceChatReplicationInfo.Timer");

	AVoiceChatReplicationInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VertMeshActor.PostBeginPlay
// (Defined, Simulated, Public)

void AVertMeshActor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VertMeshActor.PostBeginPlay");

	AVertMeshActor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleEmitter.Reset
// (Native, Public)

void UParticleEmitter::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleEmitter.Reset");

	UParticleEmitter_Reset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleEmitter.Trigger
// (Native, Public)

void UParticleEmitter::Trigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleEmitter.Trigger");

	UParticleEmitter_Trigger_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ParticleEmitter.SpawnParticle
// (Native, Public)
// Parameters:
// int                            Amount                         (Parm)

void UParticleEmitter::SpawnParticle(int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ParticleEmitter.SpawnParticle");

	UParticleEmitter_SpawnParticle_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TrailEmitter.ResetTrail
// (Final, Native, Public)

void UTrailEmitter::ResetTrail()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TrailEmitter.ResetTrail");

	UTrailEmitter_ResetTrail_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Material.MaterialVSize
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaterial::MaterialVSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Material.MaterialVSize");

	UMaterial_MaterialVSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Material.MaterialUSize
// (Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaterial::MaterialUSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Material.MaterialUSize");

	UMaterial_MaterialUSize_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Material.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UMaterial::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Material.Trigger");

	UMaterial_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Material.Reset
// (Defined, Public)

void UMaterial::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Material.Reset");

	UMaterial_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TerrainInfo.PokeTerrain
// (Final, Native, Public)
// Parameters:
// struct FVector                 WorldLocation                  (Parm)
// int                            Radius                         (Parm)
// int                            MaxDepth                       (Parm)

void ATerrainInfo::PokeTerrain(const struct FVector& WorldLocation, int Radius, int MaxDepth)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TerrainInfo.PokeTerrain");

	ATerrainInfo_PokeTerrain_Params params;
	params.WorldLocation = WorldLocation;
	params.Radius = Radius;
	params.MaxDepth = MaxDepth;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetCollisionSizeEx
// (Defined, Public)
// Parameters:
// float                          fRadius                        (Parm)
// float                          fHeight                        (Parm)

void APawn::SetCollisionSizeEx(float fRadius, float fHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetCollisionSizeEx");

	APawn_SetCollisionSizeEx_Params params;
	params.fRadius = fRadius;
	params.fHeight = fHeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AdjustCollisionSize
// (Defined, Public)

void APawn::AdjustCollisionSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustCollisionSize");

	APawn_AdjustCollisionSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetBaseStaminaTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetBaseStaminaTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBaseStaminaTime");

	APawn_GetBaseStaminaTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Set1stFov
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APawn::Set1stFov(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Set1stFov");

	APawn_Set1stFov_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetInfiniteAmmoTutorial
// (Defined, Public)
// Parameters:
// bool                           bDeleteGranade                 (OptionalParm, Parm)
// int                            iGranadeCount                  (OptionalParm, Parm)

void APawn::SetInfiniteAmmoTutorial(bool bDeleteGranade, int iGranadeCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetInfiniteAmmoTutorial");

	APawn_SetInfiniteAmmoTutorial_Params params;
	params.bDeleteGranade = bDeleteGranade;
	params.iGranadeCount = iGranadeCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanQuickWeaponChange
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanQuickWeaponChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanQuickWeaponChange");

	APawn_CanQuickWeaponChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetRemoveWeaponSkill
// (Public)
// Parameters:
// class AwWeapon*                W                              (Parm)

void APawn::SetRemoveWeaponSkill(class AwWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetRemoveWeaponSkill");

	APawn_SetRemoveWeaponSkill_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetWeaponQuickChange
// (Public)
// Parameters:
// bool                           bOn                            (Parm)

void APawn::SetWeaponQuickChange(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWeaponQuickChange");

	APawn_SetWeaponQuickChange_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetWeaponQuickReload
// (Public)
// Parameters:
// bool                           bOn                            (Parm)

void APawn::SetWeaponQuickReload(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWeaponQuickReload");

	APawn_SetWeaponQuickReload_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetWeaponQuickAimZoom
// (Public)
// Parameters:
// bool                           bOn                            (Parm)

void APawn::SetWeaponQuickAimZoom(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetWeaponQuickAimZoom");

	APawn_SetWeaponQuickAimZoom_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddWeaponFillAmmoAndMagazine
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::AddWeaponFillAmmoAndMagazine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddWeaponFillAmmoAndMagazine");

	APawn_AddWeaponFillAmmoAndMagazine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddWeaponMagazine
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::AddWeaponMagazine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddWeaponMagazine");

	APawn_AddWeaponMagazine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsEnableBombSetting
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsEnableBombSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsEnableBombSetting");

	APawn_IsEnableBombSetting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetWeaponAttachmentInfo
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  byFlashCount                   (Parm, OutParm)
// unsigned char                  byFiringMode                   (Parm, OutParm)

void APawn::GetWeaponAttachmentInfo(unsigned char* byFlashCount, unsigned char* byFiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponAttachmentInfo");

	APawn_GetWeaponAttachmentInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (byFlashCount != nullptr)
		*byFlashCount = params.byFlashCount;
	if (byFiringMode != nullptr)
		*byFiringMode = params.byFiringMode;
}


// Function Engine.Pawn.QuickTurn
// (Defined, Simulated, Public)

void APawn::QuickTurn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.QuickTurn");

	APawn_QuickTurn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDesiredRotationCheck
// (Defined, Public)
// Parameters:
// bool                           Yaw                            (Parm)
// bool                           Pitch                          (OptionalParm, Parm)
// bool                           Roll                           (OptionalParm, Parm)

void APawn::SetDesiredRotationCheck(bool Yaw, bool Pitch, bool Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDesiredRotationCheck");

	APawn_SetDesiredRotationCheck_Params params;
	params.Yaw = Yaw;
	params.Pitch = Pitch;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerRefreshCollisionHash
// (Defined, Net, NetReliable, Public)

void APawn::ServerRefreshCollisionHash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerRefreshCollisionHash");

	APawn_ServerRefreshCollisionHash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddWeapon
// (Defined, Public)
// Parameters:
// struct FBtrDouble              iUniqueID                      (Parm)
// int                            iWeaponID                      (Parm)
// int                            iAddPartsID                    (Parm)
// bool                           bPickupChange                  (OptionalParm, Parm)
// int                            iPainting_Item_ID              (OptionalParm, Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* APawn::AddWeapon(const struct FBtrDouble& iUniqueID, int iWeaponID, int iAddPartsID, bool bPickupChange, int iPainting_Item_ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddWeapon");

	APawn_AddWeapon_Params params;
	params.iUniqueID = iUniqueID;
	params.iWeaponID = iWeaponID;
	params.iAddPartsID = iAddPartsID;
	params.bPickupChange = bPickupChange;
	params.iPainting_Item_ID = iPainting_Item_ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddWeaponFromSkill
// (Defined, Public)
// Parameters:
// struct FBtrDouble              iUniqueID                      (Parm)
// int                            iWeaponID                      (Parm)

void APawn::AddWeaponFromSkill(const struct FBtrDouble& iUniqueID, int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddWeaponFromSkill");

	APawn_AddWeaponFromSkill_Params params;
	params.iUniqueID = iUniqueID;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerAddWeapon
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FBtrDouble              iUniqueID                      (Parm)
// int                            iWeaponID                      (Parm)

void APawn::ServerAddWeapon(const struct FBtrDouble& iUniqueID, int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerAddWeapon");

	APawn_ServerAddWeapon_Params params;
	params.iUniqueID = iUniqueID;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UAVScan
// (Defined, Simulated, Public)

void APawn::UAVScan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UAVScan");

	APawn_UAVScan_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetCurHealth
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::GetCurHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetCurHealth");

	APawn_GetCurHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetMaxHealth
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetMaxHealth()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMaxHealth");

	APawn_GetMaxHealth_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.UpdateLastKnownPosAndTime
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FVector                 loc                            (Parm)
// float                          Time                           (Parm)

void APawn::UpdateLastKnownPosAndTime(const struct FVector& loc, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateLastKnownPosAndTime");

	APawn_UpdateLastKnownPosAndTime_Params params;
	params.loc = loc;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CalcRadioMessageTime
// (Defined, Simulated, Public)

void APawn::CalcRadioMessageTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CalcRadioMessageTime");

	APawn_CalcRadioMessageTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MakeRadioMessage
// (Defined, Simulated, Public)

void APawn::MakeRadioMessage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MakeRadioMessage");

	APawn_MakeRadioMessage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CalcFireNoiseTime
// (Defined, Simulated, Event, Public)

void APawn::CalcFireNoiseTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CalcFireNoiseTime");

	APawn_CalcFireNoiseTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MakeFireNoise
// (Defined, Simulated, Public)

void APawn::MakeFireNoise()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MakeFireNoise");

	APawn_MakeFireNoise_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetEaxEffect
// (Defined, Simulated, Public)
// Parameters:
// class UI3DL2Listener*          EAXEffect                      (Parm)
// float                          fTime                          (Parm)

void APawn::SetEaxEffect(class UI3DL2Listener* EAXEffect, float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetEaxEffect");

	APawn_SetEaxEffect_Params params;
	params.EAXEffect = EAXEffect;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddSpecificBoneRotator
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   nameBone                       (Parm)

void APawn::AddSpecificBoneRotator(const struct FName& nameBone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddSpecificBoneRotator");

	APawn_AddSpecificBoneRotator_Params params;
	params.nameBone = nameBone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateSpecificBoneRotation
// (Defined, Protected)
// Parameters:
// float                          fElapsedTime                   (Parm)

void APawn::UpdateSpecificBoneRotation(float fElapsedTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateSpecificBoneRotation");

	APawn_UpdateSpecificBoneRotation_Params params;
	params.fElapsedTime = fElapsedTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Tick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          Delta                          (Parm)

void APawn::Tick(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Tick");

	APawn_Tick_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetTypeOfWeapon
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// unsigned char                  ty                             (Parm)

void APawn::ServerSetTypeOfWeapon(unsigned char ty)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetTypeOfWeapon");

	APawn_ServerSetTypeOfWeapon_Params params;
	params.ty = ty;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetWaitingPreAnimMode
// (Defined, Public)
// Parameters:
// bool                           bWaiting                       (Parm)

void APawn::ClientSetWaitingPreAnimMode(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetWaitingPreAnimMode");

	APawn_ClientSetWaitingPreAnimMode_Params params;
	params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetWaitingPreAnimMode
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bWaiting                       (Parm)

void APawn::ServerSetWaitingPreAnimMode(bool bWaiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetWaitingPreAnimMode");

	APawn_ServerSetWaitingPreAnimMode_Params params;
	params.bWaiting = bWaiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetWasReloadMode
// (Defined, Public)
// Parameters:
// bool                           bReload                        (Parm)

void APawn::ClientSetWasReloadMode(bool bReload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetWasReloadMode");

	APawn_ClientSetWasReloadMode_Params params;
	params.bReload = bReload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetWasReloadMode
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bReload                        (Parm)

void APawn::ServerSetWasReloadMode(bool bReload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetWasReloadMode");

	APawn_ServerSetWasReloadMode_Params params;
	params.bReload = bReload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetReloadMode
// (Defined, Public)
// Parameters:
// bool                           bReload                        (Parm)

void APawn::ClientSetReloadMode(bool bReload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetReloadMode");

	APawn_ClientSetReloadMode_Params params;
	params.bReload = bReload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetReloadMode
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bReload                        (Parm)

void APawn::ServerSetReloadMode(bool bReload)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetReloadMode");

	APawn_ServerSetReloadMode_Params params;
	params.bReload = bReload;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetTurretingMode
// (Defined, Public)
// Parameters:
// bool                           bTurret                        (Parm)

void APawn::ClientSetTurretingMode(bool bTurret)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetTurretingMode");

	APawn_ClientSetTurretingMode_Params params;
	params.bTurret = bTurret;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetTurretingMode
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bTurret                        (Parm)

void APawn::ServerSetTurretingMode(bool bTurret)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetTurretingMode");

	APawn_ServerSetTurretingMode_Params params;
	params.bTurret = bTurret;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetTurretIdleAnimFrame
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          frame                          (Parm)
// float                          UpDownFrame                    (OptionalParm, Parm)

void APawn::SetTurretIdleAnimFrame(float frame, float UpDownFrame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetTurretIdleAnimFrame");

	APawn_SetTurretIdleAnimFrame_Params params;
	params.frame = frame;
	params.UpDownFrame = UpDownFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayTurretIdleAnim
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           UpDown                         (OptionalParm, Parm)

void APawn::PlayTurretIdleAnim(bool UpDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayTurretIdleAnim");

	APawn_PlayTurretIdleAnim_Params params;
	params.UpDown = UpDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDriverFrame
// (Defined, Simulated, Public)
// Parameters:
// float                          frame                          (Parm)
// float                          UpDownFrame                    (OptionalParm, Parm)

void APawn::SetDriverFrame(float frame, float UpDownFrame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDriverFrame");

	APawn_SetDriverFrame_Params params;
	params.frame = frame;
	params.UpDownFrame = UpDownFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetAimModeValueOnly
// (Defined, Simulated, Public)
// Parameters:
// bool                           bToggle                        (Parm)

void APawn::SetAimModeValueOnly(bool bToggle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAimModeValueOnly");

	APawn_SetAimModeValueOnly_Params params;
	params.bToggle = bToggle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetAimMode
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bToggle                        (Parm)

void APawn::SetAimMode(bool bToggle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAimMode");

	APawn_SetAimMode_Params params;
	params.bToggle = bToggle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetTargetLocation
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetTargetLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTargetLocation");

	APawn_GetTargetLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.RangedAttackTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::RangedAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RangedAttackTime");

	APawn_RangedAttackTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatFly
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatFly");

	APawn_CheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatGhost
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatGhost");

	APawn_CheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheatWalk
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheatWalk");

	APawn_CheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Suicide
// (Defined, Public)

void APawn::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Suicide");

	APawn_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RawInput
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// float                          aBaseX                         (Parm)
// float                          aBaseY                         (Parm)
// float                          aBaseZ                         (Parm)
// float                          aMouseX                        (Parm)
// float                          aMouseY                        (Parm)
// float                          aForward                       (Parm)
// float                          aTurn                          (Parm)
// float                          aStrafe                        (Parm)
// float                          aUp                            (Parm)
// float                          aLookUp                        (Parm)

void APawn::RawInput(float DeltaTime, float aBaseX, float aBaseY, float aBaseZ, float aMouseX, float aMouseY, float aForward, float aTurn, float aStrafe, float aUp, float aLookUp)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RawInput");

	APawn_RawInput_Params params;
	params.DeltaTime = DeltaTime;
	params.aBaseX = aBaseX;
	params.aBaseY = aBaseY;
	params.aBaseZ = aBaseZ;
	params.aMouseX = aMouseX;
	params.aMouseY = aMouseY;
	params.aForward = aForward;
	params.aTurn = aTurn;
	params.aStrafe = aStrafe;
	params.aUp = aUp;
	params.aLookUp = aLookUp;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IncrementSpree
// (Public)

void APawn::IncrementSpree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IncrementSpree");

	APawn_IncrementSpree_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetSpree
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::GetSpree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetSpree");

	APawn_GetSpree_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetVehicleBase
// (Defined, Public)
// Parameters:
// class AVehicle*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AVehicle* APawn::GetVehicleBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetVehicleBase");

	APawn_GetVehicleBase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PlayVictoryAnimation
// (Public)

void APawn::PlayVictoryAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayVictoryAnimation");

	APawn_PlayVictoryAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayLandingAnimation
// (Simulated, Event, Public)
// Parameters:
// float                          impactVel                      (Parm)

void APawn::PlayLandingAnimation(float impactVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayLandingAnimation");

	APawn_PlayLandingAnimation_Params params;
	params.impactVel = impactVel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayLanded
// (Defined, Public)
// Parameters:
// float                          impactVel                      (Parm)

void APawn::PlayLanded(float impactVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayLanded");

	APawn_PlayLanded_Params params;
	params.impactVel = impactVel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CheckProneAni
// (Simulated, Event, Public)
// Parameters:
// bool                           bGoProne                       (Parm)

void APawn::CheckProneAni(bool bGoProne)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckProneAni");

	APawn_CheckProneAni_Params params;
	params.bGoProne = bGoProne;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayRechamber
// (Simulated, Public)

void APawn::PlayRechamber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayRechamber");

	APawn_PlayRechamber_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayReload
// (Simulated, Public)

void APawn::PlayReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayReload");

	APawn_PlayReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayWaiting
// (Simulated, Public)

void APawn::PlayWaiting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayWaiting");

	APawn_PlayWaiting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayMoving
// (Simulated, Public)

void APawn::PlayMoving()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayMoving");

	APawn_PlayMoving_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayFalling
// (Simulated, Event, Public)

void APawn::PlayFalling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayFalling");

	APawn_PlayFalling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayJump
// (Simulated, Event, Public)

void APawn::PlayJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayJump");

	APawn_PlayJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CannotJumpNow
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CannotJumpNow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CannotJumpNow");

	APawn_CannotJumpNow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AnimEnd
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Channel                        (Parm)

void APawn::AnimEnd(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AnimEnd");

	APawn_AnimEnd_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ChangeAnimation
// (Defined, Simulated, Event, Public)

void APawn::ChangeAnimation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ChangeAnimation");

	APawn_ChangeAnimation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayTakeHit
// (Defined, Public)
// Parameters:
// struct FVector                 HitLoc                         (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)

void APawn::PlayTakeHit(const struct FVector& HitLoc, int Damage, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayTakeHit");

	APawn_PlayTakeHit_Params params;
	params.HitLoc = HitLoc;
	params.Damage = Damage;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopPlayFiring
// (Defined, Simulated, Event, Public)

void APawn::StopPlayFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopPlayFiring");

	APawn_StopPlayFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerThrowsWeaponAnim
// (Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bQuick                         (Parm)

void APawn::ServerThrowsWeaponAnim(bool bQuick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerThrowsWeaponAnim");

	APawn_ServerThrowsWeaponAnim_Params params;
	params.bQuick = bQuick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerPlayPutdownWeaponAnim
// (Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bQuick                         (Parm)

void APawn::ServerPlayPutdownWeaponAnim(bool bQuick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerPlayPutdownWeaponAnim");

	APawn_ServerPlayPutdownWeaponAnim_Params params;
	params.bQuick = bQuick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayWeaponSwitch
// (Public)
// Parameters:
// class AwWeapon*                newWeapon                      (Parm)

void APawn::PlayWeaponSwitch(class AwWeapon* newWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayWeaponSwitch");

	APawn_PlayWeaponSwitch_Params params;
	params.newWeapon = newWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayFiring
// (Simulated, Public)
// Parameters:
// float                          Rate                           (OptionalParm, Parm)
// struct FName                   FiringMode                     (OptionalParm, Parm)

void APawn::PlayFiring(float Rate, const struct FName& FiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayFiring");

	APawn_PlayFiring_Params params;
	params.Rate = Rate;
	params.FiringMode = FiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDying
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLoc                         (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)

void APawn::PlayDying(class UClass* DamageType, const struct FVector& HitLoc, int CollisionPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDying");

	APawn_PlayDying_Params params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;
	params.CollisionPart = CollisionPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetAnimAction
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   NewAction                      (Parm)

void APawn::SetAnimAction(const struct FName& NewAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetAnimAction");

	APawn_SetAnimAction_Params params;
	params.NewAction = NewAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetAnimAction
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FName                   NewAction                      (Parm)

void APawn::ServerSetAnimAction(const struct FName& NewAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetAnimAction");

	APawn_ServerSetAnimAction_Params params;
	params.NewAction = NewAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsInLoadout
// (Defined, Public)
// Parameters:
// class UClass*                  InventoryClass                 (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsInLoadout(class UClass* InventoryClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsInLoadout");

	APawn_IsInLoadout_Params params;
	params.InventoryClass = InventoryClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TurnOff
// (Defined, Simulated, Public)

void APawn::TurnOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TurnOff");

	APawn_TurnOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ChunkUp
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                HitRotation                    (Parm)
// float                          ChunkPerterbation              (Parm)

void APawn::ChunkUp(const struct FRotator& HitRotation, float ChunkPerterbation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ChunkUp");

	APawn_ChunkUp_Params params;
	params.HitRotation = HitRotation;
	params.ChunkPerterbation = ChunkPerterbation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayHit
// (Defined, Public)
// Parameters:
// float                          Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)

void APawn::PlayHit(float Damage, class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, int CollisionPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayHit");

	APawn_PlayHit_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.CollisionPart = CollisionPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayDyingSound
// (Public)

void APawn::PlayDyingSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayDyingSound");

	APawn_PlayDyingSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayMoverHitSound
// (Public)

void APawn::PlayMoverHitSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayMoverHitSound");

	APawn_PlayMoverHitSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetSprintJumpZ
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetSprintJumpZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetSprintJumpZ");

	APawn_GetSprintJumpZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DoJump
// (Defined, Public)
// Parameters:
// bool                           bUpdating                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::DoJump(bool bUpdating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoJump");

	APawn_DoJump_Params params;
	params.bUpdating = bUpdating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Dodge
// (Defined, Public)
// Parameters:
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::Dodge(TEnumAsByte<EDoubleClickDir> DoubleClickMove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Dodge");

	APawn_Dodge_Params params;
	params.DoubleClickMove = DoubleClickMove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ProcessMove
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 NewAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APawn::ProcessMove(float DeltaTime, const struct FVector& NewAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ProcessMove");

	APawn_ProcessMove_Params params;
	params.DeltaTime = DeltaTime;
	params.NewAccel = NewAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateRocketAcceleration
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// float                          YawChange                      (Parm)
// float                          PitchChange                    (Parm)

void APawn::UpdateRocketAcceleration(float DeltaTime, float YawChange, float PitchChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateRocketAcceleration");

	APawn_UpdateRocketAcceleration_Params params;
	params.DeltaTime = DeltaTime;
	params.YawChange = YawChange;
	params.PitchChange = PitchChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanMultiJump
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanMultiJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanMultiJump");

	APawn_CanMultiJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanDoubleJump
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanDoubleJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanDoubleJump");

	APawn_CanDoubleJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DoDoubleJump
// (Public)
// Parameters:
// bool                           bUpdating                      (Parm)

void APawn::DoDoubleJump(bool bUpdating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoDoubleJump");

	APawn_DoDoubleJump_Params params;
	params.bUpdating = bUpdating;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CheckWaterJump
// (Defined, Public)
// Parameters:
// struct FVector                 WallNormal                     (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheckWaterJump(struct FVector* WallNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckWaterJump");

	APawn_CheckWaterJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WallNormal != nullptr)
		*WallNormal = params.WallNormal;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDrowningDamage
// (Public)

void APawn::TakeDrowningDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDrowningDamage");

	APawn_TakeDrowningDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BreathTimer
// (Defined, Event, Public)

void APawn::BreathTimer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BreathTimer");

	APawn_BreathTimer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsInPain
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsInPain()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsInPain");

	APawn_IsInPain_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TouchingWaterVolume
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TouchingWaterVolume()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TouchingWaterVolume");

	APawn_TouchingWaterVolume_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HeadVolumeChange
// (Defined, Event, Public)
// Parameters:
// class APhysicsVolume*          newHeadVolume                  (Parm)

void APawn::HeadVolumeChange(class APhysicsVolume* newHeadVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HeadVolumeChange");

	APawn_HeadVolumeChange_Params params;
	params.newHeadVolume = newHeadVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Landed
// (Defined, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)

void APawn::Landed(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Landed");

	APawn_Landed_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayLandedSound
// (Event, Public)
// Parameters:
// int                            SurfType                       (Parm)

void APawn::PlayLandedSound(int SurfType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayLandedSound");

	APawn_PlayLandedSound_Params params;
	params.SurfType = SurfType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void APawn::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HitWall");

	APawn_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Falling
// (Defined, Event, Public)

void APawn::Falling()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Falling");

	APawn_Falling_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RemovePowerups
// (Public)

void APawn::RemovePowerups()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RemovePowerups");

	APawn_RemovePowerups_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.IsTossWeapon
// (Defined, Public)
// Parameters:
// class ALevelInfo*              levenInfo                      (Parm)
// class APawn*                   Pawn                           (Parm)
// class AwWeapon*                Weapon                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsTossWeapon(class ALevelInfo* levenInfo, class APawn* Pawn, class AwWeapon* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsTossWeapon");

	APawn_IsTossWeapon_Params params;
	params.levenInfo = levenInfo;
	params.Pawn = Pawn;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Process_TossWeapon_When_Dying
// (Defined, Public)
// Parameters:
// class ALevelInfo*              levenInfo                      (Parm)
// class APawn*                   Pawn                           (Parm)
// class AwWeapon*                Weapon                         (Parm)

void APawn::Process_TossWeapon_When_Dying(class ALevelInfo* levenInfo, class APawn* Pawn, class AwWeapon* Weapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Process_TossWeapon_When_Dying");

	APawn_Process_TossWeapon_When_Dying_Params params;
	params.levenInfo = levenInfo;
	params.Pawn = Pawn;
	params.Weapon = Weapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Died
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void APawn::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Died");

	APawn_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CalcItemUsedTime
// (Defined, Public)
// Parameters:
// class UwMatchUserInfo*         kUser                          (Parm)

void APawn::CalcItemUsedTime(class UwMatchUserInfo* kUser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CalcItemUsedTime");

	APawn_CalcItemUsedTime_Params params;
	params.kUser = kUser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CalcItemUsedTimeSelf
// (Defined, Public)

void APawn::CalcItemUsedTimeSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CalcItemUsedTimeSelf");

	APawn_CalcItemUsedTimeSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetKillerController
// (Defined, Public)
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* APawn::GetKillerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetKillerController");

	APawn_GetKillerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeam
// (Defined, Public)
// Parameters:
// class ATeamInfo*               ReturnValue                    (Parm, OutParm, ReturnParm)

class ATeamInfo* APawn::GetTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeam");

	APawn_GetTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetTeamNum");

	APawn_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetDelayedDamageInstigatorController
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)

void APawn::SetDelayedDamageInstigatorController(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDelayedDamageInstigatorController");

	APawn_SetDelayedDamageInstigatorController_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetAssistList
// (Defined, Public)
// Parameters:
// class APawn*                   Killer                         (Parm)
// TArray<class AController*>     ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AController*> APawn::GetAssistList(class APawn* Killer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetAssistList");

	APawn_GetAssistList_Params params;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetAssistScore
// (Defined, Public)
// Parameters:
// int                            UID                            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::GetAssistScore(int UID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetAssistScore");

	APawn_GetAssistScore_Params params;
	params.UID = UID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddDamageInfo
// (Defined, Public)
// Parameters:
// class APawn*                   instigatedBy                   (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)

void APawn::AddDamageInfo(class APawn* instigatedBy, int Damage, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddDamageInfo");

	APawn_AddDamageInfo_Params params;
	params.instigatedBy = instigatedBy;
	params.Damage = Damage;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateDied
// (Defined, Public)
// Parameters:
// int                            ActualDamage                   (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void APawn::UpdateDied(int ActualDamage, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateDied");

	APawn_UpdateDied_Params params;
	params.ActualDamage = ActualDamage;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void APawn::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDamage");

	APawn_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDamagedByKiller
// (Defined, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// class APawn*                   instigatedBy                   (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* APawn::GetDamagedByKiller(class UClass* DamageType, class APawn* instigatedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDamagedByKiller");

	APawn_GetDamagedByKiller_Params params;
	params.DamageType = DamageType;
	params.instigatedBy = instigatedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ApplyDealDamageRatio
// (Defined, Public)
// Parameters:
// class APawn*                   instigatedBy                   (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            WeaponType                     (Parm)
// int                            ActualDamage                   (Parm, OutParm)

void APawn::ApplyDealDamageRatio(class APawn* instigatedBy, class UClass* DamageType, int WeaponType, int* ActualDamage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ApplyDealDamageRatio");

	APawn_ApplyDealDamageRatio_Params params;
	params.instigatedBy = instigatedBy;
	params.DamageType = DamageType;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ActualDamage != nullptr)
		*ActualDamage = params.ActualDamage;
}


// Function Engine.Pawn.GetDelayedInstigatorController
// (Defined, Public)
// Parameters:
// class APawn*                   instigatedBy                   (Parm)
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* APawn::GetDelayedInstigatorController(class APawn* instigatedBy)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDelayedInstigatorController");

	APawn_GetDelayedInstigatorController_Params params;
	params.instigatedBy = instigatedBy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TakeDamageSound
// (Defined, Public)
// Parameters:
// int                            LeftHealth                     (Parm)
// int                            ActualDamage                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// class AController*             Killer                         (OptionalParm, Parm)

void APawn::TakeDamageSound(int LeftHealth, int ActualDamage, const struct FVector& HitLocation, class UClass* DamageType, int CollisionPart, int WeaponType, class AController* Killer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeDamageSound");

	APawn_TakeDamageSound_Params params;
	params.LeftHealth = LeftHealth;
	params.ActualDamage = ActualDamage;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeHeadRoundBullet
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// int                            WeaponType                     (Parm)

void APawn::TakeHeadRoundBullet(const struct FVector& HitLocation, int WeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeHeadRoundBullet");

	APawn_TakeHeadRoundBullet_Params params;
	params.HitLocation = HitLocation;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ShieldAbsorb
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::ShieldAbsorb(int Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShieldAbsorb");

	APawn_ShieldAbsorb_Params params;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HasUDamage
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HasUDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasUDamage");

	APawn_HasUDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GiveHealth
// (Defined, Public)
// Parameters:
// int                            HealAmount                     (Parm)
// int                            HealMax                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::GiveHealth(int HealAmount, int HealMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GiveHealth");

	APawn_GiveHealth_Params params;
	params.HealAmount = HealAmount;
	params.HealMax = HealMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetMovementPhysics
// (Public)

void APawn::SetMovementPhysics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMovementPhysics");

	APawn_SetMovementPhysics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Gasp
// (Public)

void APawn::Gasp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Gasp");

	APawn_Gasp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetMesh
// (Defined, Simulated, Public)

void APawn::SetMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMesh");

	APawn_SetMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetShadowLight
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FVector                 vLightDir                      (Parm)

void APawn::SetShadowLight(const struct FVector& vLightDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetShadowLight");

	APawn_SetShadowLight_Params params;
	params.vLightDir = vLightDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PostNetBeginPlay
// (Defined, Simulated, Event, Public)

void APawn::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostNetBeginPlay");

	APawn_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PostBeginPlay
// (Defined, Event, Public)

void APawn::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostBeginPlay");

	APawn_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PreBeginPlay
// (Defined, Event, Public)

void APawn::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PreBeginPlay");

	APawn_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Destroyed
// (Defined, Simulated, Event, Public)

void APawn::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Destroyed");

	APawn_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EyePosition
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::EyePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EyePosition");

	APawn_EyePosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.UpdateEyeHeightScript
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APawn::UpdateEyeHeightScript(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateEyeHeightScript");

	APawn_UpdateEyeHeightScript_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateEyeHeight
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APawn::UpdateEyeHeight(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateEyeHeight");

	APawn_UpdateEyeHeight_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.UpdateEyeHeightNative
// (Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APawn::UpdateEyeHeightNative(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UpdateEyeHeightNative");

	APawn_UpdateEyeHeightNative_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BaseChange
// (Defined, Singular, Event, Public)

void APawn::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BaseChange");

	APawn_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.JumpOffPawn
// (Defined, Public)

void APawn::JumpOffPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.JumpOffPawn");

	APawn_JumpOffPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.gibbedBy
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APawn::gibbedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.gibbedBy");

	APawn_gibbedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachedBy
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APawn::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachedBy");

	APawn_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EncroachingOn
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EncroachingOn");

	APawn_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsHeadShot
// (Defined, Public)
// Parameters:
// struct FVector                 loc                            (Parm)
// struct FVector                 ray                            (Parm)
// float                          AdditionalScale                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsHeadShot(const struct FVector& loc, const struct FVector& ray, float AdditionalScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsHeadShot");

	APawn_IsHeadShot_Params params;
	params.loc = loc;
	params.ray = ray;
	params.AdditionalScale = AdditionalScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ServerChangedWeapon
// (Defined, Net, NetReliable, Public)
// Parameters:
// class AwWeapon*                OldWeapon                      (Parm)
// class AwWeapon*                newWeapon                      (Parm)

void APawn::ServerChangedWeapon(class AwWeapon* OldWeapon, class AwWeapon* newWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerChangedWeapon");

	APawn_ServerChangedWeapon_Params params;
	params.OldWeapon = OldWeapon;
	params.newWeapon = newWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetWeaponBoneFor
// (Defined, Public)
// Parameters:
// class AInventory*              i                              (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName APawn::GetWeaponBoneFor(class AInventory* i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponBoneFor");

	APawn_GetWeaponBoneFor_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetOffhandBoneFor
// (Defined, Public)
// Parameters:
// class AInventory*              i                              (Parm)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName APawn::GetOffhandBoneFor(class AInventory* i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetOffhandBoneFor");

	APawn_GetOffhandBoneFor_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ChangedWeapon
// (Defined, Simulated, Public)

void APawn::ChangedWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ChangedWeapon");

	APawn_ChangedWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientForceChangedWeapon
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AwWeapon*                newWeapon                      (Parm)

void APawn::ClientForceChangedWeapon(class AwWeapon* newWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientForceChangedWeapon");

	APawn_ClientForceChangedWeapon_Params params;
	params.newWeapon = newWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DeleteInventory
// (Defined, Public)
// Parameters:
// class AInventory*              Item                           (Parm)

void APawn::DeleteInventory(class AInventory* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DeleteInventory");

	APawn_DeleteInventory_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DeleteInventoryFromStorage
// (Defined, Public)
// Parameters:
// class AInventory*              Item                           (Parm)

void APawn::DeleteInventoryFromStorage(class AInventory* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DeleteInventoryFromStorage");

	APawn_DeleteInventoryFromStorage_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DeleteInventoriesFromStorage
// (Defined, Public)

void APawn::DeleteInventoriesFromStorage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DeleteInventoriesFromStorage");

	APawn_DeleteInventoriesFromStorage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddInventory
// (Defined, Public)
// Parameters:
// class AInventory*              NewItem                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::AddInventory(class AInventory* NewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddInventory");

	APawn_AddInventory_Params params;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FindInventoryType
// (Defined, Public)
// Parameters:
// class UClass*                  DesiredClass                   (Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* APawn::FindInventoryType(class UClass* DesiredClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FindInventoryType");

	APawn_FindInventoryType_Params params;
	params.DesiredClass = DesiredClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NextItem
// (Defined, Net, NetReliable, Exec, Public)

void APawn::NextItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NextItem");

	APawn_NextItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerNoTranslocator
// (Defined, Net, NetReliable, Public)

void APawn::ServerNoTranslocator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerNoTranslocator");

	APawn_ServerNoTranslocator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SwitchWeaponByWeaponID
// (Defined, Simulated, Public)
// Parameters:
// int                            iItemID                        (Parm)
// bool                           bQuickGr                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SwitchWeaponByWeaponID(int iItemID, bool bQuickGr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SwitchWeaponByWeaponID");

	APawn_SwitchWeaponByWeaponID_Params params;
	params.iItemID = iItemID;
	params.bQuickGr = bQuickGr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SwitchWeaponWClass
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   ClassName                      (Parm)
// struct FString                 sReason                        (OptionalParm, Parm, NeedCtorLink)

void APawn::SwitchWeaponWClass(const struct FName& ClassName, const struct FString& sReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SwitchWeaponWClass");

	APawn_SwitchWeaponWClass_Params params;
	params.ClassName = ClassName;
	params.sReason = sReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SwitchWeaponByWeaponItem
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                wSwitchWeapon                  (Parm)
// bool                           bQuickGr                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SwitchWeaponByWeaponItem(class AwWeapon* wSwitchWeapon, bool bQuickGr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SwitchWeaponByWeaponItem");

	APawn_SwitchWeaponByWeaponItem_Params params;
	params.wSwitchWeapon = wSwitchWeapon;
	params.bQuickGr = bQuickGr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SwitchWeapon
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  f                              (Parm)
// bool                           bQuickGr                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SwitchWeapon(unsigned char f, bool bQuickGr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SwitchWeapon");

	APawn_SwitchWeapon_Params params;
	params.f = f;
	params.bQuickGr = bQuickGr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SelectPrevWeapon
// (Defined, Simulated, Public)

void APawn::SelectPrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SelectPrevWeapon");

	APawn_SelectPrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.NextWeapon
// (Defined, Simulated, Public)

void APawn::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NextWeapon");

	APawn_NextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PrevWeapon
// (Defined, Simulated, Public)

void APawn::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PrevWeapon");

	APawn_PrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SwitchToLastWeapon_ThrowsWeapon
// (Defined, Simulated, Public)

void APawn::SwitchToLastWeapon_ThrowsWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SwitchToLastWeapon_ThrowsWeapon");

	APawn_SwitchToLastWeapon_ThrowsWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SwitchToLastWeapon
// (Defined, Exec, Public)

void APawn::SwitchToLastWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SwitchToLastWeapon");

	APawn_SwitchToLastWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientPickupWeapon
// (Defined, Simulated, Public)

void APawn::ClientPickupWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientPickupWeapon");

	APawn_ClientPickupWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerPickupWeapon
// (Defined, Net, NetReliable, Public)

void APawn::ServerPickupWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerPickupWeapon");

	APawn_ServerPickupWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CheckEntryVehicle
// (Defined, Public)

void APawn::CheckEntryVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckEntryVehicle");

	APawn_CheckEntryVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CheckTouchWeaponPickup
// (Defined, Public)

void APawn::CheckTouchWeaponPickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckTouchWeaponPickup");

	APawn_CheckTouchWeaponPickup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TossWeapon
// (Defined, Public)
// Parameters:
// struct FVector                 TossVel                        (Parm)

void APawn::TossWeapon(const struct FVector& TossVel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TossWeapon");

	APawn_TossWeapon_Params params;
	params.TossVel = TossVel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanThrowWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanThrowWeapon");

	APawn_CanThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanUseShield
// (Public)
// Parameters:
// int                            Amount                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::CanUseShield(int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanUseShield");

	APawn_CanUseShield_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddShieldStrength
// (Public)
// Parameters:
// int                            Amount                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::AddShieldStrength(int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddShieldStrength");

	APawn_AddShieldStrength_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetShieldStrength
// (Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetShieldStrength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetShieldStrength");

	APawn_GetShieldStrength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetShieldStrengthMax
// (Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetShieldStrengthMax()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetShieldStrengthMax");

	APawn_GetShieldStrengthMax_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DisableUDamage
// (Public)

void APawn::DisableUDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DisableUDamage");

	APawn_DisableUDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EnableUDamage
// (Public)
// Parameters:
// float                          Amount                         (Parm)

void APawn::EnableUDamage(float Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EnableUDamage");

	APawn_EnableUDamage_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InCurrentCombo
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InCurrentCombo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InCurrentCombo");

	APawn_InCurrentCombo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DoComboName
// (Public)
// Parameters:
// struct FString                 ComboClassName                 (Parm, NeedCtorLink)

void APawn::DoComboName(const struct FString& ComboClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DoComboName");

	APawn_DoComboName_Params params;
	params.ComboClassName = ComboClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientDying
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)

void APawn::ClientDying(class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientDying");

	APawn_ClientDying_Params params;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.LimitPitch
// (Defined, Public)
// Parameters:
// int                            Pitch                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::LimitPitch(int Pitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LimitPitch");

	APawn_LimitPitch_Params params;
	params.Pitch = Pitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FaceRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// float                          DeltaTime                      (Parm)

void APawn::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FaceRotation");

	APawn_FaceRotation_Params params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetRotation
// (Defined, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APawn::ClientSetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetRotation");

	APawn_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetLocation
// (Defined, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void APawn::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetLocation");

	APawn_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientReStart
// (Defined, Public)

void APawn::ClientReStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientReStart");

	APawn_ClientReStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.TakeFallingDamage
// (Defined, Public)

void APawn::TakeFallingDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TakeFallingDamage");

	APawn_TakeFallingDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.KilledBy
// (Defined, Public)
// Parameters:
// class APawn*                   EventInstigator                (Parm)

void APawn::KilledBy(class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.KilledBy");

	APawn_KilledBy_Params params;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddVelocity
// (Defined, Public)
// Parameters:
// struct FVector                 NewVelocity                    (Parm)

void APawn::AddVelocity(const struct FVector& NewVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddVelocity");

	APawn_AddVelocity_Params params;
	params.NewVelocity = NewVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.RestartPlayer
// (Public)

void APawn::RestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RestartPlayer");

	APawn_RestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartProne
// (Defined, Event, Public)
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::StartProne(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartProne");

	APawn_StartProne_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndProne
// (Defined, Event, Public)
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::EndProne(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndProne");

	APawn_EndProne_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartCrouch
// (Defined, Event, Public)
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::StartCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartCrouch");

	APawn_StartCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndCrouch
// (Defined, Event, Public)
// Parameters:
// float                          HeightAdjust                   (Parm)

void APawn::EndCrouch(float HeightAdjust)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndCrouch");

	APawn_EndCrouch_Params params;
	params.HeightAdjust = HeightAdjust;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetUseKeyState
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// unsigned char                  byKey                          (Parm)

void APawn::ServerSetUseKeyState(unsigned char byKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetUseKeyState");

	APawn_ServerSetUseKeyState_Params params;
	params.byKey = byKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ShouldProne
// (Defined, Public)
// Parameters:
// bool                           Prone                          (Parm)

void APawn::ShouldProne(bool Prone)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShouldProne");

	APawn_ShouldProne_Params params;
	params.Prone = Prone;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ShouldCrouch
// (Defined, Public)
// Parameters:
// bool                           crouch                         (Parm)

void APawn::ShouldCrouch(bool crouch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShouldCrouch");

	APawn_ShouldCrouch_Params params;
	params.crouch = crouch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FellOutOfWorld
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EeKillZType>       KillType                       (Parm)

void APawn::FellOutOfWorld(TEnumAsByte<EeKillZType> KillType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FellOutOfWorld");

	APawn_FellOutOfWorld_Params params;
	params.KillType = KillType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ModifyVelocity
// (Simulated, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 OldVelocity                    (Parm)

void APawn::ModifyVelocity(float DeltaTime, const struct FVector& OldVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ModifyVelocity");

	APawn_ModifyVelocity_Params params;
	params.DeltaTime = DeltaTime;
	params.OldVelocity = OldVelocity;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.JumpOutOfWater
// (Defined, Public)
// Parameters:
// struct FVector                 jumpDir                        (Parm)

void APawn::JumpOutOfWater(const struct FVector& jumpDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.JumpOutOfWater");

	APawn_JumpOutOfWater_Params params;
	params.jumpDir = jumpDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FinishedInterpolation
// (Defined, Public)

void APawn::FinishedInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FinishedInterpolation");

	APawn_FinishedInterpolation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDefaultDisplayProperties
// (Defined, Public)

void APawn::SetDefaultDisplayProperties()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDefaultDisplayProperties");

	APawn_SetDefaultDisplayProperties_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetDisplayProperties
// (Defined, Public)
// Parameters:
// TEnumAsByte<ERenderStyle>      NewStyle                       (Parm)
// class UMaterial*               NewTexture                     (Parm)
// bool                           bLighting                      (Parm)

void APawn::SetDisplayProperties(TEnumAsByte<ERenderStyle> NewStyle, class UMaterial* NewTexture, bool bLighting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetDisplayProperties");

	APawn_SetDisplayProperties_Params params;
	params.NewStyle = NewStyle;
	params.NewTexture = NewTexture;
	params.bLighting = bLighting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GiveWeapon
// (Defined, Public)
// Parameters:
// struct FString                 aClassName                     (Parm, NeedCtorLink)

void APawn::GiveWeapon(const struct FString& aClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GiveWeapon");

	APawn_GiveWeapon_Params params;
	params.aClassName = aClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CreateInventory
// (Defined, Public)
// Parameters:
// struct FString                 InventoryClassName             (Parm, NeedCtorLink)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* APawn::CreateInventory(const struct FString& InventoryClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CreateInventory");

	APawn_CreateInventory_Params params;
	params.InventoryClassName = InventoryClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanTrigger
// (Defined, Public)
// Parameters:
// class ATrigger*                t                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanTrigger(class ATrigger* t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanTrigger");

	APawn_CanTrigger_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void APawn::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Trigger");

	APawn_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientMessage
// (Defined, Event, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APawn::ClientMessage(const struct FString& S, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientMessage");

	APawn_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReceiveLocalizedMessage
// (Defined, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void APawn::ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReceiveLocalizedMessage");

	APawn_ReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HandlePickup
// (Defined, Public)
// Parameters:
// class APickup*                 pick                           (Parm)

void APawn::HandlePickup(class APickup* pick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HandlePickup");

	APawn_HandlePickup_Params params;
	params.pick = pick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AdjustedStrength
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::AdjustedStrength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustedStrength");

	APawn_AdjustedStrength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ShootSpecial
// (Defined, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* APawn::ShootSpecial(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ShootSpecial");

	APawn_ShootSpecial_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AdjustAim
// (Final, Defined, Simulated, Public)
// Parameters:
// struct FFireProperties         FiredAmmunition                (Parm)
// struct FVector                 projStart                      (Parm)
// int                            AimError                       (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::AdjustAim(const struct FFireProperties& FiredAmmunition, const struct FVector& projStart, int AimError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AdjustAim");

	APawn_AdjustAim_Params params;
	params.FiredAmmunition = FiredAmmunition;
	params.projStart = projStart;
	params.AimError = AimError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.LineOfSightTo
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::LineOfSightTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.LineOfSightTo");

	APawn_LineOfSightTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetMoveTarget
// (Defined, Public)
// Parameters:
// class AActor*                  NewTarget                      (Parm)

void APawn::SetMoveTarget(class AActor* NewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetMoveTarget");

	APawn_SetMoveTarget_Params params;
	params.NewTarget = NewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetMoveTarget
// (Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* APawn::GetMoveTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMoveTarget");

	APawn_GetMoveTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PressingAltFire
// (Final, Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PressingAltFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PressingAltFire");

	APawn_PressingAltFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PressingFire
// (Final, Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PressingFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PressingFire");

	APawn_PressingFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NearMoveTarget
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::NearMoveTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NearMoveTarget");

	APawn_NearMoveTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.InGodMode
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::InGodMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InGodMode");

	APawn_InGodMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetViewRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APawn::SetViewRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetViewRotation");

	APawn_SetViewRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetViewRotationForFP
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetViewRotationForFP()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetViewRotationForFP");

	APawn_GetViewRotationForFP_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetViewRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APawn::GetViewRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetViewRotation");

	APawn_GetViewRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocalPlayerViewtarget
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsLocalPlayerViewtarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocalPlayerViewtarget");

	APawn_IsLocalPlayerViewtarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsFirstPerson
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFirstPerson");

	APawn_IsFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsLocallyControlled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsLocallyControlled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsLocallyControlled");

	APawn_IsLocallyControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsHumanControlled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsHumanControlled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsHumanControlled");

	APawn_IsHumanControlled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.WasPlayerPawn
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::WasPlayerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WasPlayerPawn");

	APawn_WasPlayerPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsPlayerPawn
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsPlayerPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsPlayerPawn");

	APawn_IsPlayerPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheckTauntValid
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheckTauntValid(const struct FName& Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckTauntValid");

	APawn_CheckTauntValid_Params params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FindValidTaunt
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   Sequence                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::FindValidTaunt(struct FName* Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FindValidTaunt");

	APawn_FindValidTaunt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Sequence != nullptr)
		*Sequence = params.Sequence;

	return params.ReturnValue;
}


// Function Engine.Pawn.StopDriving
// (Defined, Simulated, Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void APawn::StopDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopDriving");

	APawn_StopDriving_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StartDriving
// (Defined, Simulated, Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void APawn::StartDriving(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StartDriving");

	APawn_StartDriving_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ForceStandup
// (Simulated, Native, Public)

void APawn::ForceStandup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ForceStandup");

	APawn_ForceStandup_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.InitialPlayer
// (Defined, Simulated, Public)

void APawn::InitialPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.InitialPlayer");

	APawn_InitialPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CheckBob
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 Y                              (Parm)

void APawn::CheckBob(float DeltaTime, const struct FVector& Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckBob");

	APawn_CheckBob_Params params;
	params.DeltaTime = DeltaTime;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetBobParam
// (Defined, Public)
// Parameters:
// float                          Bob                            (Parm, OutParm)
// float                          BobCamera                      (Parm, OutParm)
// float                          fBobZ                          (Parm, OutParm)
// float                          fBobCameraZ                    (Parm, OutParm)

void APawn::GetBobParam(float* Bob, float* BobCamera, float* fBobZ, float* fBobCameraZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetBobParam");

	APawn_GetBobParam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Bob != nullptr)
		*Bob = params.Bob;
	if (BobCamera != nullptr)
		*BobCamera = params.BobCamera;
	if (fBobZ != nullptr)
		*fBobZ = params.fBobZ;
	if (fBobCameraZ != nullptr)
		*fBobCameraZ = params.fBobCameraZ;
}


// Function Engine.Pawn.GetMaxSpeed
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::GetMaxSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetMaxSpeed");

	APawn_GetMaxSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.WeaponBob
// (Defined, Simulated, Public)
// Parameters:
// float                          BobDamping                     (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::WeaponBob(float BobDamping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.WeaponBob");

	APawn_WeaponBob_Params params;
	params.BobDamping = BobDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ModifiedPlayerViewOffset
// (Defined, Simulated, Public)
// Parameters:
// class AInventory*              Inv                            (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::ModifiedPlayerViewOffset(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ModifiedPlayerViewOffset");

	APawn_ModifiedPlayerViewOffset_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CameraShake
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::CameraShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CameraShake");

	APawn_CameraShake_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CalcFPSpectatorDrawOffset
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 VOffset                        (Parm)
// struct FRotator                rRotation                      (Parm)
// struct FVector                 vBobOffset                     (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::CalcFPSpectatorDrawOffset(const struct FVector& VOffset, const struct FRotator& rRotation, const struct FVector& vBobOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CalcFPSpectatorDrawOffset");

	APawn_CalcFPSpectatorDrawOffset_Params params;
	params.VOffset = VOffset;
	params.rRotation = rRotation;
	params.vBobOffset = vBobOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CalcDrawOffset
// (Defined, Simulated, Public)
// Parameters:
// class AInventory*              Inv                            (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::CalcDrawOffset(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CalcDrawOffset");

	APawn_CalcDrawOffset_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void APawn::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DisplayDebug");

	APawn_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.Pawn.ClimbLadder
// (Defined, Public)
// Parameters:
// class ALadderVolume*           L                              (Parm)

void APawn::ClimbLadder(class ALadderVolume* L)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClimbLadder");

	APawn_ClimbLadder_Params params;
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.EndClimbLadder
// (Defined, Public)
// Parameters:
// class ALadderVolume*           OldLadder                      (Parm)

void APawn::EndClimbLadder(class ALadderVolume* OldLadder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.EndClimbLadder");

	APawn_EndClimbLadder_Params params;
	params.OldLadder = OldLadder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanSplash
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanSplash");

	APawn_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetSprinting
// (Defined, Event, Public)
// Parameters:
// bool                           bNewIsSprinting                (Parm)

void APawn::SetSprinting(bool bNewIsSprinting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetSprinting");

	APawn_SetSprinting_Params params;
	params.bNewIsSprinting = bNewIsSprinting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanGrabLadder
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanGrabLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanGrabLadder");

	APawn_CanGrabLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DropToGround
// (Defined, Public)

void APawn::DropToGround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DropToGround");

	APawn_DropToGround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.BecomeViewTarget
// (Defined, Public)

void APawn::BecomeViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.BecomeViewTarget");

	APawn_BecomeViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PointOfView
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PointOfView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PointOfView");

	APawn_PointOfView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.UnPossessed
// (Defined, Public)

void APawn::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.UnPossessed");

	APawn_UnPossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PossessedBy
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)

void APawn::PossessedBy(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PossessedBy");

	APawn_PossessedBy_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ChangeInventoryByQSlot
// (Public)

void APawn::ChangeInventoryByQSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ChangeInventoryByQSlot");

	APawn_ChangeInventoryByQSlot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.AddDefaultSkills
// (Public)
// Parameters:
// bool                           bQuickslotChange               (OptionalParm, Parm)

void APawn::AddDefaultSkills(bool bQuickslotChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddDefaultSkills");

	APawn_AddDefaultSkills_Params params;
	params.bQuickslotChange = bQuickslotChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.NotifyEquipItemChanged
// (Public)

void APawn::NotifyEquipItemChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyEquipItemChanged");

	APawn_NotifyEquipItemChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.NotifyTeamChanged
// (Public)

void APawn::NotifyTeamChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NotifyTeamChanged");

	APawn_NotifyTeamChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PerformDodge
// (Public)
// Parameters:
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FVector                 Dir                            (Parm)
// struct FVector                 Cross                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::PerformDodge(TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FVector& Dir, const struct FVector& Cross)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PerformDodge");

	APawn_PerformDodge_Params params;
	params.DoubleClickMove = DoubleClickMove;
	params.Dir = Dir;
	params.Cross = Cross;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DropFlag
// (Public)
// Parameters:
// struct FString                 sReason                        (OptionalParm, Parm, NeedCtorLink)

void APawn::DropFlag(const struct FString& sReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DropFlag");

	APawn_DropFlag_Params params;
	params.sReason = sReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.HoldFlag
// (Public)
// Parameters:
// class AActor*                  FlagActor                      (Parm)

void APawn::HoldFlag(class AActor* FlagActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HoldFlag");

	APawn_HoldFlag_Params params;
	params.FlagActor = FlagActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayTeleportEffect
// (Defined, Public)
// Parameters:
// bool                           bOut                           (Parm)
// bool                           bSound                         (Parm)

void APawn::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayTeleportEffect");

	APawn_PlayTeleportEffect_Params params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APawn::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetHumanReadableName");

	APawn_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpectatorSpecialCalcView
// (Public)
// Parameters:
// class APlayerController*       Viewer                         (Parm)
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SpectatorSpecialCalcView(class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpectatorSpecialCalcView");

	APawn_SpectatorSpecialCalcView_Params params;
	params.Viewer = Viewer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpecialCalcView
// (Public)
// Parameters:
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::SpecialCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialCalcView");

	APawn_SpecialCalcView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpecialDrawCrosshair
// (Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void APawn::SpecialDrawCrosshair(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpecialDrawCrosshair");

	APawn_SpecialDrawCrosshair_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.DrawHUD
// (Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void APawn::DrawHUD(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DrawHUD");

	APawn_DrawHUD_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ModifyThreat
// (Defined, Public)
// Parameters:
// float                          current                        (Parm)
// class APawn*                   Threat                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::ModifyThreat(float current, class APawn* Threat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ModifyThreat");

	APawn_ModifyThreat_Params params;
	params.current = current;
	params.Threat = Threat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.NeedToTurn
// (Defined, Public)
// Parameters:
// struct FVector                 targ                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::NeedToTurn(const struct FVector& targ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.NeedToTurn");

	APawn_NeedToTurn_Params params;
	params.targ = targ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.FireOnRelease
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FireOnRelease");

	APawn_FireOnRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsWeaponSingleFire
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsWeaponSingleFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsWeaponSingleFire");

	APawn_IsWeaponSingleFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsFiring
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsFiring");

	APawn_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.RefireRate
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APawn::RefireRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RefireRate");

	APawn_RefireRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.TooCloseToAttack
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::TooCloseToAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.TooCloseToAttack");

	APawn_TooCloseToAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CanAttack
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanAttack");

	APawn_CanAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.RecommendLongRangedAttack
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::RecommendLongRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RecommendLongRangedAttack");

	APawn_RecommendLongRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AltFire
// (Defined, Simulated, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void APawn::AltFire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AltFire");

	APawn_AltFire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.Fire
// (Defined, Simulated, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void APawn::Fire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Fire");

	APawn_Fire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StopWeaponFiring
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::StopWeaponFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StopWeaponFiring");

	APawn_StopWeaponFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ChooseFireAt
// (Defined, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APawn::ChooseFireAt(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ChooseFireAt");

	APawn_ChooseFireAt_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetWeaponByInvenGroup
// (Defined, Public)
// Parameters:
// int                            nInvenGroupID                  (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* APawn::GetWeaponByInvenGroup(int nInvenGroupID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetWeaponByInvenGroup");

	APawn_GetWeaponByInvenGroup_Params params;
	params.nInvenGroupID = nInvenGroupID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HasWeaponByWeaponID
// (Defined, Public)
// Parameters:
// int                            weaponID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HasWeaponByWeaponID(int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasWeaponByWeaponID");

	APawn_HasWeaponByWeaponID_Params params;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HasWeapon
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::HasWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasWeapon");

	APawn_HasWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Reset
// (Defined, Public)

void APawn::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Reset");

	APawn_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayerChangedTeam
// (Defined, Public)

void APawn::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayerChangedTeam");

	APawn_PlayerChangedTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetPathTo
// (Defined, Public)
// Parameters:
// class AActor*                  Dest                           (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* APawn::GetPathTo(class AActor* Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPathTo");

	APawn_GetPathTo_Params params;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.DeactivateSpawnProtection
// (Defined, Public)

void APawn::DeactivateSpawnProtection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.DeactivateSpawnProtection");

	APawn_DeactivateSpawnProtection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetAimTarget
// (Defined, Public)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* APawn::GetAimTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetAimTarget");

	APawn_GetAimTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetIsFiring
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::GetIsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetIsFiring");

	APawn_GetIsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetBaseEyeheight
// (Defined, Simulated, Public)

void APawn::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetBaseEyeheight");

	APawn_SetBaseEyeheight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDemoRecordingWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* APawn::GetDemoRecordingWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDemoRecordingWeapon");

	APawn_GetDemoRecordingWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.GetPostureIndex
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::GetPostureIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetPostureIndex");

	APawn_GetPostureIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpawnBlackbox
// (Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::SpawnBlackbox()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnBlackbox");

	APawn_SpawnBlackbox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SpawnMedals
// (Public)

void APawn::SpawnMedals()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnMedals");

	APawn_SpawnMedals_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SpawnSupplyItem
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::SpawnSupplyItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SpawnSupplyItem");

	APawn_SpawnSupplyItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.MakeShellEffect_Rechamber
// (Simulated, Public)

void APawn::MakeShellEffect_Rechamber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MakeShellEffect_Rechamber");

	APawn_MakeShellEffect_Rechamber_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.MakeShellEffect
// (Simulated, Public)

void APawn::MakeShellEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.MakeShellEffect");

	APawn_MakeShellEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ForcePlayIdle
// (Native, Public)

void APawn::ForcePlayIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ForcePlayIdle");

	APawn_ForcePlayIdle_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CheckProneRotate
// (Native, Public)
// Parameters:
// int                            CurYaw                         (Parm)
// int                            NewYaw                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::CheckProneRotate(int CurYaw, int NewYaw)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckProneRotate");

	APawn_CheckProneRotate_Params params;
	params.CurYaw = CurYaw;
	params.NewYaw = NewYaw;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.RefreshCollisionHash
// (Native, Public)

void APawn::RefreshCollisionHash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.RefreshCollisionHash");

	APawn_RefreshCollisionHash_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ForceCrouch
// (Native, Public)

void APawn::ForceCrouch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ForceCrouch");

	APawn_ForceCrouch_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ReachedDestination
// (Native, Public)
// Parameters:
// class AActor*                  Goal                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::ReachedDestination(class AActor* Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ReachedDestination");

	APawn_ReachedDestination_Params params;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.PostRender2D
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// float                          ScreenLocX                     (Parm)
// float                          ScreenLocY                     (Parm)

void APawn::PostRender2D(class UCanvas* C, float ScreenLocX, float ScreenLocY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PostRender2D");

	APawn_PostRender2D_Params params;
	params.C = C;
	params.ScreenLocX = ScreenLocX;
	params.ScreenLocY = ScreenLocY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetDetailOffset
// (Simulated, Native, Public)
// Parameters:
// struct FVector                 vLoc                           (Parm)
// struct FRotator                rRot                           (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APawn::GetDetailOffset(const struct FVector& vLoc, const struct FRotator& rRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetDetailOffset");

	APawn_GetDetailOffset_Params params;
	params.vLoc = vLoc;
	params.rRot = rRot;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.AddNoWeaponChangeMessage
// (Simulated, Public)
// Parameters:
// unsigned char                  bySlot                         (Parm)

void APawn::AddNoWeaponChangeMessage(unsigned char bySlot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.AddNoWeaponChangeMessage");

	APawn_AddNoWeaponChangeMessage_Params params;
	params.bySlot = bySlot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetHeadScale
// (Simulated, Event, Public)
// Parameters:
// float                          NewScale                       (Parm)

void APawn::SetHeadScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetHeadScale");

	APawn_SetHeadScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.GetIsEnableProne
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::GetIsEnableProne()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.GetIsEnableProne");

	APawn_GetIsEnableProne_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.Get4WayDirection
// (Simulated, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APawn::Get4WayDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.Get4WayDirection");

	APawn_Get4WayDirection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.SetTwistLook
// (Simulated, Native, Public)
// Parameters:
// int                            twist                          (Parm)
// int                            look                           (Parm)

void APawn::SetTwistLook(int twist, int look)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetTwistLook");

	APawn_SetTwistLook_Params params;
	params.twist = twist;
	params.look = look;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.SetViewPitch
// (Simulated, Native, Public)
// Parameters:
// int                            NewPitch                       (Parm)

void APawn::SetViewPitch(int NewPitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.SetViewPitch");

	APawn_SetViewPitch_Params params;
	params.NewPitch = NewPitch;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StaticPrecache
// (Static, Public)
// Parameters:
// class ALevelInfo*              L                              (Parm)

void APawn::STATIC_StaticPrecache(class ALevelInfo* L)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StaticPrecache");

	APawn_StaticPrecache_Params params;
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerStanceChanged
// (Defined, Net, NetReliable, Public)
// Parameters:
// TEnumAsByte<ESpreadStance>     ss                             (Parm)

void APawn::ServerStanceChanged(TEnumAsByte<ESpreadStance> ss)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerStanceChanged");

	APawn_ServerStanceChanged_Params params;
	params.ss = ss;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetPlayerScoreInfo
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// int                            TeamIndex                      (Parm)
// int                            Kills                          (Parm)
// int                            Assists                        (Parm)
// int                            Deaths                         (Parm)
// int                            EXPs                           (Parm)
// int                            Points                         (Parm)
// int                            Scores                         (Parm)

void APawn::ServerSetPlayerScoreInfo(int TeamIndex, int Kills, int Assists, int Deaths, int EXPs, int Points, int Scores)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetPlayerScoreInfo");

	APawn_ServerSetPlayerScoreInfo_Params params;
	params.TeamIndex = TeamIndex;
	params.Kills = Kills;
	params.Assists = Assists;
	params.Deaths = Deaths;
	params.EXPs = EXPs;
	params.Points = Points;
	params.Scores = Scores;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetPlayerScoreInfo
// (Defined, Net, NetReliable, Event, Public)

void APawn::ClientSetPlayerScoreInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetPlayerScoreInfo");

	APawn_ClientSetPlayerScoreInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StorePlayerScoreInfo
// (Defined, Event, Public)

void APawn::StorePlayerScoreInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StorePlayerScoreInfo");

	APawn_StorePlayerScoreInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerSetWeaponInfo
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// int                            WeaponClassNumber              (Parm)
// int                            WeaponAddPartsID               (Parm)
// int                            WeaponTotalAmmo                (Parm)
// int                            WeaponCurrentAmmo              (Parm)

void APawn::ServerSetWeaponInfo(int WeaponClassNumber, int WeaponAddPartsID, int WeaponTotalAmmo, int WeaponCurrentAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerSetWeaponInfo");

	APawn_ServerSetWeaponInfo_Params params;
	params.WeaponClassNumber = WeaponClassNumber;
	params.WeaponAddPartsID = WeaponAddPartsID;
	params.WeaponTotalAmmo = WeaponTotalAmmo;
	params.WeaponCurrentAmmo = WeaponCurrentAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ClientSetWeaponInfo
// (Defined, Net, NetReliable, Event, Public)

void APawn::ClientSetWeaponInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ClientSetWeaponInfo");

	APawn_ClientSetWeaponInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.StoreWeaponInfo
// (Defined, Event, Public)

void APawn::StoreWeaponInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.StoreWeaponInfo");

	APawn_StoreWeaponInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayEquipHitSound
// (Simulated, Public)

void APawn::PlayEquipHitSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayEquipHitSound");

	APawn_PlayEquipHitSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayBreathSounds
// (Simulated, Public)

void APawn::PlayBreathSounds()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayBreathSounds");

	APawn_PlayBreathSounds_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.PlayBreathSound
// (Simulated, Public)

void APawn::PlayBreathSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.PlayBreathSound");

	APawn_PlayBreathSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.FootStepping
// (Simulated, Public)
// Parameters:
// int                            side                           (Parm)

void APawn::FootStepping(int side)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.FootStepping");

	APawn_FootStepping_Params params;
	params.side = side;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.CanSee
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APawn::CanSee()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CanSee");

	APawn_CanSee_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.IsNetReady
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APawn::IsNetReady()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.IsNetReady");

	APawn_IsNetReady_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.CheckRelevantTimeOut
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APawn::CheckRelevantTimeOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.CheckRelevantTimeOut");

	APawn_CheckRelevantTimeOut_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.HasChannel
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APawn::HasChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.HasChannel");

	APawn_HasChannel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pawn.ServerStopLoopSoundByActor
// (Defined, Net, NetReliable, Public)

void APawn::ServerStopLoopSoundByActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerStopLoopSoundByActor");

	APawn_ServerStopLoopSoundByActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerStopAllSoundByActor
// (Defined, Net, NetReliable, Public)

void APawn::ServerStopAllSoundByActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerStopAllSoundByActor");

	APawn_ServerStopAllSoundByActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.ServerFmodPlaySound
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 SoundName                      (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)

void APawn::ServerFmodPlaySound(const struct FString& SoundName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.ServerFmodPlaySound");

	APawn_ServerFmodPlaySound_Params params;
	params.SoundName = SoundName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pawn.OnReachedDestination
// (Public, Delegate)
// Parameters:
// struct FVector                 Dir                            (Parm)
// class AActor*                  GoalActor                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APawn::OnReachedDestination(const struct FVector& Dir, class AActor* GoalActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pawn.OnReachedDestination");

	APawn_OnReachedDestination_Params params;
	params.Dir = Dir;
	params.GoalActor = GoalActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SetExitViewRotation
// (Public)
// Parameters:
// class APawn*                   Driver                         (Parm)

void AVehicle::SetExitViewRotation(class APawn* Driver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetExitViewRotation");

	AVehicle_SetExitViewRotation_Params params;
	params.Driver = Driver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetEntryViewRotation
// (Public)
// Parameters:
// struct FRotator                R                              (Parm)

void AVehicle::SetEntryViewRotation(const struct FRotator& R)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetEntryViewRotation");

	AVehicle_SetEntryViewRotation_Params params;
	params.R = R;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.IsArtillery
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::IsArtillery()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.IsArtillery");

	AVehicle_IsArtillery_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ImportantVehicle
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::ImportantVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ImportantVehicle");

	AVehicle_ImportantVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ShootMissile
// (Defined, Public)
// Parameters:
// class AwProjectile*            P                              (Parm)

void AVehicle::ShootMissile(class AwProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ShootMissile");

	AVehicle_ShootMissile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ShouldTargetMissile
// (Defined, Public)
// Parameters:
// class AwProjectile*            P                              (Parm)

void AVehicle::ShouldTargetMissile(class AwProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ShouldTargetMissile");

	AVehicle_ShouldTargetMissile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AlternateTarget
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AVehicle::AlternateTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AlternateTarget");

	AVehicle_AlternateTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.VerifyLock
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Aggressor                      (Parm)
// class AActor*                  NewTarget                      (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::VerifyLock(class AActor* Aggressor, class AActor** NewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.VerifyLock");

	AVehicle_VerifyLock_Params params;
	params.Aggressor = Aggressor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewTarget != nullptr)
		*NewTarget = params.NewTarget;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheckSuperBerserk
// (Public)

void AVehicle::CheckSuperBerserk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheckSuperBerserk");

	AVehicle_CheckSuperBerserk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetTurrets
// (Public)
// Parameters:
// TArray<class AVehicle*>        ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AVehicle*> AVehicle::GetTurrets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetTurrets");

	AVehicle_GetTurrets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlayTakeHit
// (Defined, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)

void AVehicle::PlayTakeHit(const struct FVector& HitLocation, int Damage, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayTakeHit");

	AVehicle_PlayTakeHit_Params params;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.POVChanged
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// bool                           bBehindViewChanged             (Parm)

void AVehicle::POVChanged(class APlayerController* PC, bool bBehindViewChanged)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.POVChanged");

	AVehicle_POVChanged_Params params;
	params.PC = PC;
	params.bBehindViewChanged = bBehindViewChanged;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.IncrementSpree
// (Defined, Public)

void AVehicle::IncrementSpree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.IncrementSpree");

	AVehicle_IncrementSpree_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetSpree
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVehicle::GetSpree()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetSpree");

	AVehicle_GetSpree_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.StaticPrecache
// (Static, Public)
// Parameters:
// class ALevelInfo*              L                              (Parm)

void AVehicle::STATIC_StaticPrecache(class ALevelInfo* L)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.StaticPrecache");

	AVehicle_StaticPrecache_Params params;
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AdjustedStrength
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AVehicle::AdjustedStrength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AdjustedStrength");

	AVehicle_AdjustedStrength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.HasOccupiedTurret
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::HasOccupiedTurret()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.HasOccupiedTurret");

	AVehicle_HasOccupiedTurret_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.IsVehicleEmpty
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::IsVehicleEmpty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.IsVehicleEmpty");

	AVehicle_IsVehicleEmpty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetBotPassenger
// (Defined, Public)
// Parameters:
// class AAIController*           ReturnValue                    (Parm, OutParm, ReturnParm)

class AAIController* AVehicle::GetBotPassenger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetBotPassenger");

	AVehicle_GetBotPassenger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetInstigator
// (Defined, Public)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AVehicle::GetInstigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetInstigator");

	AVehicle_GetInstigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.NumPassengers
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVehicle::NumPassengers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NumPassengers");

	AVehicle_NumPassengers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ServerPlayHorn
// (Defined, Public)
// Parameters:
// int                            HornIndex                      (Parm)

void AVehicle::ServerPlayHorn(int HornIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ServerPlayHorn");

	AVehicle_ServerPlayHorn_Params params;
	params.HornIndex = HornIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.StopForceFeedback
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)

void AVehicle::StopForceFeedback(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.StopForceFeedback");

	AVehicle_StopForceFeedback_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ClientPlayForceFeedback
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)

void AVehicle::ClientPlayForceFeedback(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ClientPlayForceFeedback");

	AVehicle_ClientPlayForceFeedback_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ChargeBar
// (Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AVehicle::ChargeBar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ChargeBar");

	AVehicle_ChargeBar_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Flip
// (Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// float                          ForceScale                     (Parm)

void AVehicle::Flip(const struct FVector& HitNormal, float ForceScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Flip");

	AVehicle_Flip_Params params;
	params.HitNormal = HitNormal;
	params.ForceScale = ForceScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.NeedsFlip
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::NeedsFlip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NeedsFlip");

	AVehicle_NeedsFlip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.TeamLink
// (Defined, Public)
// Parameters:
// int                            TeamNum                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::TeamLink(int TeamNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TeamLink");

	AVehicle_TeamLink_Params params;
	params.TeamNum = TeamNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PrevWeapon
// (Defined, Simulated, Public)

void AVehicle::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PrevWeapon");

	AVehicle_PrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.NextWeapon
// (Defined, Simulated, Public)

void AVehicle::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NextWeapon");

	AVehicle_NextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.UnStalled
// (Simulated, Event, Public)

void AVehicle::UnStalled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UnStalled");

	AVehicle_UnStalled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Stalled
// (Simulated, Event, Public)

void AVehicle::Stalled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Stalled");

	AVehicle_Stalled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ShootSpecial
// (Defined, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AVehicle::ShootSpecial(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ShootSpecial");

	AVehicle_ShootSpecial_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AVehicle::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DisplayDebug");

	AVehicle_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.Vehicle.TeamChanged
// (Defined, Simulated, Event, Public)

void AVehicle::TeamChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TeamChanged");

	AVehicle_TeamChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetTeamNum
// (Defined, Public)
// Parameters:
// unsigned char                  t                              (Parm)

void AVehicle::SetTeamNum(unsigned char t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetTeamNum");

	AVehicle_SetTeamNum_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.NotifyEnemyLostLock
// (Defined, Event, Public)

void AVehicle::NotifyEnemyLostLock()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyEnemyLostLock");

	AVehicle_NotifyEnemyLostLock_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.IncomingMissile
// (Public)
// Parameters:
// class AwProjectile*            P                              (Parm)

void AVehicle::IncomingMissile(class AwProjectile* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.IncomingMissile");

	AVehicle_IncomingMissile_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.NotifyEnemyLockedOn
// (Defined, Event, Public)

void AVehicle::NotifyEnemyLockedOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NotifyEnemyLockedOn");

	AVehicle_NotifyEnemyLockedOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetTeamNum
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVehicle::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetTeamNum");

	AVehicle_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlayDying
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLoc                         (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)

void AVehicle::PlayDying(class UClass* DamageType, const struct FVector& HitLoc, int CollisionPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayDying");

	AVehicle_PlayDying_Params params;
	params.DamageType = DamageType;
	params.HitLoc = HitLoc;
	params.CollisionPart = CollisionPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PlayTeleportEffect
// (Defined, Public)
// Parameters:
// bool                           bOut                           (Parm)
// bool                           bSound                         (Parm)

void AVehicle::PlayTeleportEffect(bool bOut, bool bSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayTeleportEffect");

	AVehicle_PlayTeleportEffect_Params params;
	params.bOut = bOut;
	params.bSound = bSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PointOfView
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::PointOfView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PointOfView");

	AVehicle_PointOfView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.LockOnWarning
// (Defined, Event, Public)

void AVehicle::LockOnWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.LockOnWarning");

	AVehicle_LockOnWarning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TakeWaterDamage
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AVehicle::TakeWaterDamage(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeWaterDamage");

	AVehicle_TakeWaterDamage_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DrivingStatusChanged
// (Defined, Simulated, Event, Public)

void AVehicle::DrivingStatusChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DrivingStatusChanged");

	AVehicle_DrivingStatusChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetMoveTargetFor
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AVehicle*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AVehicle* AVehicle::GetMoveTargetFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetMoveTargetFor");

	AVehicle_GetMoveTargetFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.GetBestEntry
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AVehicle::GetBestEntry(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetBestEntry");

	AVehicle_GetBestEntry_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.IndependentVehicle
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::IndependentVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.IndependentVehicle");

	AVehicle_IndependentVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.OpenPositionFor
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AVehicle*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AVehicle* AVehicle::OpenPositionFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.OpenPositionFor");

	AVehicle_OpenPositionFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SetReservation
// (Public)
// Parameters:
// class AController*             C                              (Parm)

void AVehicle::SetReservation(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetReservation");

	AVehicle_SetReservation_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SpokenFor
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::SpokenFor(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SpokenFor");

	AVehicle_SpokenFor_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ChangedReservation
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::ChangedReservation(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ChangedReservation");

	AVehicle_ChangedReservation_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.NewReservationCostMultiplier
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AVehicle::NewReservationCostMultiplier(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.NewReservationCostMultiplier");

	AVehicle_NewReservationCostMultiplier_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.ReservationCostMultiplier
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AVehicle::ReservationCostMultiplier()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ReservationCostMultiplier");

	AVehicle_ReservationCostMultiplier_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Occupied
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::Occupied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Occupied");

	AVehicle_Occupied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheckTauntValid
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   Sequence                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheckTauntValid(const struct FName& Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheckTauntValid");

	AVehicle_CheckTauntValid_Params params;
	params.Sequence = Sequence;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.FindValidTaunt
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   Sequence                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::FindValidTaunt(struct FName* Sequence)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FindValidTaunt");

	AVehicle_FindValidTaunt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Sequence != nullptr)
		*Sequence = params.Sequence;

	return params.ReturnValue;
}


// Function Engine.Vehicle.EncroachingOn
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachingOn");

	AVehicle_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.RanInto
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AVehicle::RanInto(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.RanInto");

	AVehicle_RanInto_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EncroachedBy
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AVehicle::EncroachedBy(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EncroachedBy");

	AVehicle_EncroachedBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.SetAnimAction
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FName                   NewAction                      (Parm)

void AVehicle::SetAnimAction(const struct FName& NewAction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetAnimAction");

	AVehicle_SetAnimAction_Params params;
	params.NewAction = NewAction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.FaceRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)
// float                          DeltaTime                      (Parm)

void AVehicle::FaceRotation(const struct FRotator& NewRotation, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FaceRotation");

	AVehicle_FaceRotation_Params params;
	params.NewRotation = NewRotation;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.UpdateEyeHeight
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AVehicle::UpdateEyeHeight(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UpdateEyeHeight");

	AVehicle_UpdateEyeHeight_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.StopWeaponFiring
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::StopWeaponFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.StopWeaponFiring");

	AVehicle_StopWeaponFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.VehicleCeaseFire
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           bWasAltFire                    (Parm)

void AVehicle::VehicleCeaseFire(bool bWasAltFire)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.VehicleCeaseFire");

	AVehicle_VehicleCeaseFire_Params params;
	params.bWasAltFire = bWasAltFire;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.VehicleFire
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           bWasAltFire                    (Parm)

void AVehicle::VehicleFire(bool bWasAltFire)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.VehicleFire");

	AVehicle_VehicleFire_Params params;
	params.bWasAltFire = bWasAltFire;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ClientVehicleCeaseFire
// (Defined, Public)
// Parameters:
// bool                           bWasAltFire                    (Parm)

void AVehicle::ClientVehicleCeaseFire(bool bWasAltFire)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ClientVehicleCeaseFire");

	AVehicle_ClientVehicleCeaseFire_Params params;
	params.bWasAltFire = bWasAltFire;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AltFire
// (Defined, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void AVehicle::AltFire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AltFire");

	AVehicle_AltFire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Fire
// (Defined, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void AVehicle::Fire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Fire");

	AVehicle_Fire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.UsedBy
// (Defined, Public)
// Parameters:
// class APawn*                   User                           (Parm)

void AVehicle::UsedBy(class APawn* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UsedBy");

	AVehicle_UsedBy_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.EjectDriver
// (Defined, Public)

void AVehicle::EjectDriver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.EjectDriver");

	AVehicle_EjectDriver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AdjustDriverDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm, OutParm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)

void AVehicle::AdjustDriverDamage(class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AdjustDriverDamage");

	AVehicle_AdjustDriverDamage_Params params;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.Vehicle.Died
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AVehicle::Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Died");

	AVehicle_Died_Params params;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverDied
// (Defined, Public)

void AVehicle::DriverDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverDied");

	AVehicle_DriverDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverRadiusDamage
// (Defined, Public)
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          DamageRadius                   (Parm)
// class AController*             EventInstigator                (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)

void AVehicle::DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverRadiusDamage");

	AVehicle_DriverRadiusDamage_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.EventInstigator = EventInstigator;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.HealDamage
// (Defined, Public)
// Parameters:
// int                            Amount                         (Parm)
// class AController*             Healer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::HealDamage(int Amount, class AController* Healer, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.HealDamage");

	AVehicle_HealDamage_Params params;
	params.Amount = Amount;
	params.Healer = Healer;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.TakeDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AVehicle::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TakeDamage");

	AVehicle_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.CheckForHeadShot
// (Defined, Public)
// Parameters:
// struct FVector                 loc                            (Parm)
// struct FVector                 ray                            (Parm)
// float                          AdditionalScale                (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AVehicle::CheckForHeadShot(const struct FVector& loc, const struct FVector& ray, float AdditionalScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheckForHeadShot");

	AVehicle_CheckForHeadShot_Params params;
	params.loc = loc;
	params.ray = ray;
	params.AdditionalScale = AdditionalScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.PlaceExitingDriver
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::PlaceExitingDriver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlaceExitingDriver");

	AVehicle_PlaceExitingDriver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.DetachDriver
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::DetachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DetachDriver");

	AVehicle_DetachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AttachDriver
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::AttachDriver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AttachDriver");

	AVehicle_AttachDriver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.FixPCRotation
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AVehicle::FixPCRotation(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FixPCRotation");

	AVehicle_FixPCRotation_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ActivateOverlay
// (Defined, Simulated, Public)
// Parameters:
// bool                           bActive                        (Parm)

void AVehicle::ActivateOverlay(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ActivateOverlay");

	AVehicle_ActivateOverlay_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ClientKDriverLeave
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AVehicle::ClientKDriverLeave(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ClientKDriverLeave");

	AVehicle_ClientKDriverLeave_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ClientClearController
// (Defined, Net, NetReliable, Simulated, Public)

void AVehicle::ClientClearController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ClientClearController");

	AVehicle_ClientClearController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.ClientKDriverEnter
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AVehicle::ClientKDriverEnter(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.ClientKDriverEnter");

	AVehicle_ClientKDriverEnter_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.UpdateTiltForceFeedback
// (Defined, Simulated, Event, Public)

void AVehicle::UpdateTiltForceFeedback()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UpdateTiltForceFeedback");

	AVehicle_UpdateTiltForceFeedback_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.DriverLeft
// (Defined, Public)

void AVehicle::DriverLeft()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.DriverLeft");

	AVehicle_DriverLeft_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.KDriverLeave
// (Defined, Event, Public)
// Parameters:
// bool                           bForceLeave                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::KDriverLeave(bool bForceLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.KDriverLeave");

	AVehicle_KDriverLeave_Params params;
	params.bForceLeave = bForceLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SetWheelsScale
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          NewScale                       (Parm)

void AVehicle::SetWheelsScale(float NewScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetWheelsScale");

	AVehicle_SetWheelsScale_Params params;
	params.NewScale = NewScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.AttachFlag
// (Defined, Public)
// Parameters:
// class AActor*                  FlagActor                      (Parm)

void AVehicle::AttachFlag(class AActor* FlagActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.AttachFlag");

	AVehicle_AttachFlag_Params params;
	params.FlagActor = FlagActor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.KDriverEnter
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::KDriverEnter(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.KDriverEnter");

	AVehicle_KDriverEnter_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.UnPossessed
// (Defined, Public)

void AVehicle::UnPossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.UnPossessed");

	AVehicle_UnPossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PossessedBy
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)

void AVehicle::PossessedBy(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PossessedBy");

	AVehicle_PossessedBy_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.VehicleLocked
// (Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AVehicle::VehicleLocked(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.VehicleLocked");

	AVehicle_VehicleLocked_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.TryToDrive
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.TryToDrive");

	AVehicle_TryToDrive_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.FindEntryVehicle
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AVehicle*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AVehicle* AVehicle::FindEntryVehicle(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.FindEntryVehicle");

	AVehicle_FindEntryVehicle_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SpectatorSpecialCalcView
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       Viewer                         (Parm)
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::SpectatorSpecialCalcView(class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SpectatorSpecialCalcView");

	AVehicle_SpectatorSpecialCalcView_Params params;
	params.Viewer = Viewer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SpecialCalcView
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::SpecialCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SpecialCalcView");

	AVehicle_SpecialCalcView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SpecialCalcFirstPersonView
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)

void AVehicle::SpecialCalcFirstPersonView(class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SpecialCalcFirstPersonView");

	AVehicle_SpecialCalcFirstPersonView_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
}


// Function Engine.Vehicle.SpecialCalcBehindView
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)

void AVehicle::SpecialCalcBehindView(class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SpecialCalcBehindView");

	AVehicle_SpecialCalcBehindView_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
}


// Function Engine.Vehicle.GetCameraLocationStart
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AVehicle::GetCameraLocationStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetCameraLocationStart");

	AVehicle_GetCameraLocationStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Destroyed_HandleDriver
// (Defined, Simulated, Public)

void AVehicle::Destroyed_HandleDriver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed_HandleDriver");

	AVehicle_Destroyed_HandleDriver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.Destroyed
// (Defined, Simulated, Public)

void AVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Destroyed");

	AVehicle_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.BotDesireability
// (Defined, Public)
// Parameters:
// class AActor*                  S                              (Parm)
// int                            TeamIndex                      (Parm)
// class AActor*                  Objective                      (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AVehicle::BotDesireability(class AActor* S, int TeamIndex, class AActor* Objective)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.BotDesireability");

	AVehicle_BotDesireability_Params params;
	params.S = S;
	params.TeamIndex = TeamIndex;
	params.Objective = Objective;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.StronglyRecommended
// (Defined, Public)
// Parameters:
// class AActor*                  S                              (Parm)
// int                            TeamIndex                      (Parm)
// class AActor*                  Objective                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::StronglyRecommended(class AActor* S, int TeamIndex, class AActor* Objective)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.StronglyRecommended");

	AVehicle_StronglyRecommended_Params params;
	params.S = S;
	params.TeamIndex = TeamIndex;
	params.Objective = Objective;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SetInitialState
// (Defined, Simulated, Event, Public)

void AVehicle::SetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetInitialState");

	AVehicle_SetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PostBeginPlay
// (Defined, Simulated, Public)

void AVehicle::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PostBeginPlay");

	AVehicle_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.RegisterTurret
// (Defined, Event, Public)

void AVehicle::RegisterTurret()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.RegisterTurret");

	AVehicle_RegisterTurret_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.CheatFly
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatFly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatFly");

	AVehicle_CheatFly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatGhost
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatGhost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatGhost");

	AVehicle_CheatGhost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.CheatWalk
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVehicle::CheatWalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.CheatWalk");

	AVehicle_CheatWalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.Suicide
// (Defined, Public)

void AVehicle::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.Suicide");

	AVehicle_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.GetVehiclePositionString
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVehicle::GetVehiclePositionString()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.GetVehiclePositionString");

	AVehicle_GetVehiclePositionString_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vehicle.SetBaseEyeheight
// (Defined, Simulated, Public)

void AVehicle::SetBaseEyeheight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.SetBaseEyeheight");

	AVehicle_SetBaseEyeheight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PlayerChangedTeam
// (Defined, Public)

void AVehicle::PlayerChangedTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PlayerChangedTeam");

	AVehicle_PlayerChangedTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vehicle.PreBeginPlay
// (Defined, Public)

void AVehicle::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vehicle.PreBeginPlay");

	AVehicle_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.Destroyed
// (Defined, Simulated, Public)

void ASVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Destroyed");

	ASVehicle_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.Tick
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ASVehicle::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Tick");

	ASVehicle_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.KApplyForce
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 Force                          (Parm, OutParm)
// struct FVector                 Torque                         (Parm, OutParm)

void ASVehicle::KApplyForce(struct FVector* Force, struct FVector* Torque)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.KApplyForce");

	ASVehicle_KApplyForce_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Force != nullptr)
		*Force = params.Force;
	if (Torque != nullptr)
		*Torque = params.Torque;
}


// Function Engine.SVehicle.Flip
// (Defined, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// float                          ForceScale                     (Parm)

void ASVehicle::Flip(const struct FVector& HitNormal, float ForceScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.Flip");

	ASVehicle_Flip_Params params;
	params.HitNormal = HitNormal;
	params.ForceScale = ForceScale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.SVehicleUpdateParams
// (Defined, Simulated, Event, Public)

void ASVehicle::SVehicleUpdateParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.SVehicleUpdateParams");

	ASVehicle_SVehicleUpdateParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.JumpOffPawn
// (Defined, Public)

void ASVehicle::JumpOffPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.JumpOffPawn");

	ASVehicle_JumpOffPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.PostNetBeginPlay
// (Defined, Simulated, Public)

void ASVehicle::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.PostNetBeginPlay");

	ASVehicle_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.UpdateVehicle
// (Native, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ASVehicle::UpdateVehicle(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.UpdateVehicle");

	ASVehicle_UpdateVehicle_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.VehicleStateReceived
// (Event, Public)

void ASVehicle::VehicleStateReceived()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.VehicleStateReceived");

	ASVehicle_VehicleStateReceived_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicle.GraphData
// (Final, Native, Public)
// Parameters:
// struct FString                 DataName                       (Parm, NeedCtorLink)
// float                          DataValue                      (Parm)

void ASVehicle::GraphData(const struct FString& DataName, float DataValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicle.GraphData");

	ASVehicle_GraphData_Params params;
	params.DataName = DataName;
	params.DataValue = DataValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StaticMeshActor.PreBeginPlay
// (Defined, Simulated, Event, Public)

void AStaticMeshActor::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StaticMeshActor.PreBeginPlay");

	AStaticMeshActor_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnimNotify_Scripted.Notify
// (Event, Public)
// Parameters:
// class AActor*                  Owner                          (Parm)

void UAnimNotify_Scripted::Notify(class AActor* Owner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnimNotify_Scripted.Notify");

	UAnimNotify_Scripted_Notify_Params params;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Security.ClientMessage
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void ASecurity::ClientMessage(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Security.ClientMessage");

	ASecurity_ClientMessage_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Security.BadClient
// (Defined, Public)
// Parameters:
// int                            Code                           (Parm)
// struct FString                 Data                           (Parm, NeedCtorLink)

void ASecurity::BadClient(int Code, const struct FString& Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Security.BadClient");

	ASecurity_BadClient_Params params;
	params.Code = Code;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Security.Perform
// (Defined, Public)
// Parameters:
// int                            SecType                        (Parm)
// struct FString                 Param1                         (Parm, NeedCtorLink)
// struct FString                 Param2                         (Parm, NeedCtorLink)
// float                          TimeOut                        (Parm)

void ASecurity::Perform(int SecType, const struct FString& Param1, const struct FString& Param2, float TimeOut)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Security.Perform");

	ASecurity_Perform_Params params;
	params.SecType = SecType;
	params.Param1 = Param1;
	params.Param2 = Param2;
	params.TimeOut = TimeOut;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Security.ServerCallback
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// int                            SecType                        (Parm)
// struct FString                 Data                           (Parm, NeedCtorLink)

void ASecurity::ServerCallback(int SecType, const struct FString& Data)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Security.ServerCallback");

	ASecurity_ServerCallback_Params params;
	params.SecType = SecType;
	params.Data = Data;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Security.ClientPerform
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            SecType                        (Parm)
// struct FString                 Param1                         (Parm, NeedCtorLink)
// struct FString                 Param2                         (Parm, NeedCtorLink)

void ASecurity::ClientPerform(int SecType, const struct FString& Param1, const struct FString& Param2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Security.ClientPerform");

	ASecurity_ClientPerform_Params params;
	params.SecType = SecType;
	params.Param1 = Param1;
	params.Param2 = Param2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Security.LocalPerform
// (Native, Public)
// Parameters:
// int                            SecType                        (Parm)
// struct FString                 Param1                         (Parm, NeedCtorLink)
// struct FString                 Param2                         (Parm, NeedCtorLink)
// TArray<struct FString>         Results                        (Parm, OutParm, NeedCtorLink)

void ASecurity::LocalPerform(int SecType, const struct FString& Param1, const struct FString& Param2, TArray<struct FString>* Results)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Security.LocalPerform");

	ASecurity_LocalPerform_Params params;
	params.SecType = SecType;
	params.Param1 = Param1;
	params.Param2 = Param2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Results != nullptr)
		*Results = params.Results;
}


// Function Engine.Security.NativePerform
// (Native, Public)
// Parameters:
// int                            SecType                        (Parm)
// struct FString                 Param1                         (Parm, NeedCtorLink)
// struct FString                 Param2                         (Parm, NeedCtorLink)

void ASecurity::NativePerform(int SecType, const struct FString& Param1, const struct FString& Param2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Security.NativePerform");

	ASecurity_NativePerform_Params params;
	params.SecType = SecType;
	params.Param1 = Param1;
	params.Param2 = Param2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptedTexture.DrawPortal
// (Final, Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// int                            width                          (Parm)
// int                            Height                         (Parm)
// class AActor*                  CamActor                       (Parm)
// struct FVector                 CamLocation                    (Parm)
// struct FRotator                CamRotation                    (Parm)
// int                            FOV                            (OptionalParm, Parm)
// bool                           ClearZ                         (OptionalParm, Parm)

void UScriptedTexture::DrawPortal(int X, int Y, int width, int Height, class AActor* CamActor, const struct FVector& CamLocation, const struct FRotator& CamRotation, int FOV, bool ClearZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.DrawPortal");

	UScriptedTexture_DrawPortal_Params params;
	params.X = X;
	params.Y = Y;
	params.width = width;
	params.Height = Height;
	params.CamActor = CamActor;
	params.CamLocation = CamLocation;
	params.CamRotation = CamRotation;
	params.FOV = FOV;
	params.ClearZ = ClearZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptedTexture.DrawTile
// (Final, Native, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// class UMaterial*               Material                       (Parm)
// struct FColor                  Color                          (Parm)

void UScriptedTexture::DrawTile(float X, float Y, float XL, float YL, float U, float V, float UL, float VL, class UMaterial* Material, const struct FColor& Color)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.DrawTile");

	UScriptedTexture_DrawTile_Params params;
	params.X = X;
	params.Y = Y;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.Material = Material;
	params.Color = Color;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptedTexture.TextSize
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// class UFont*                   Font                           (Parm)
// int                            width                          (Parm, OutParm)
// int                            Height                         (Parm, OutParm)

void UScriptedTexture::TextSize(const struct FString& Text, class UFont* Font, int* width, int* Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.TextSize");

	UScriptedTexture_TextSize_Params params;
	params.Text = Text;
	params.Font = Font;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (width != nullptr)
		*width = params.width;
	if (Height != nullptr)
		*Height = params.Height;
}


// Function Engine.ScriptedTexture.DrawText
// (Final, Native, Public)
// Parameters:
// int                            startX                         (Parm)
// int                            startY                         (Parm)
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// class UFont*                   Font                           (Parm)
// struct FColor                  Color                          (Parm)

void UScriptedTexture::DrawText(int startX, int startY, const struct FString& Text, class UFont* Font, const struct FColor& Color)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.DrawText");

	UScriptedTexture_DrawText_Params params;
	params.startX = startX;
	params.startY = startY;
	params.Text = Text;
	params.Font = Font;
	params.Color = Color;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScriptedTexture.SetSize
// (Final, Native, Public)
// Parameters:
// int                            width                          (Parm)
// int                            Height                         (Parm)

void UScriptedTexture::SetSize(int width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScriptedTexture.SetSize");

	UScriptedTexture_SetSize_Params params;
	params.width = width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneManager.SceneEnded
// (Defined, Event, Public)

void ASceneManager::SceneEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneManager.SceneEnded");

	ASceneManager_SceneEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneManager.SceneStarted
// (Defined, Event, Public)

void ASceneManager::SceneStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneManager.SceneStarted");

	ASceneManager_SceneStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneManager.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void ASceneManager::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneManager.Trigger");

	ASceneManager_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneManager.BeginPlay
// (Defined, Simulated, Public)

void ASceneManager::BeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneManager.BeginPlay");

	ASceneManager_BeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneManager.AbortScene
// (Native, Public)

void ASceneManager::AbortScene()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneManager.AbortScene");

	ASceneManager_AbortScene_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneManager.GetTotalSceneTime
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ASceneManager::GetTotalSceneTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneManager.GetTotalSceneTime");

	ASceneManager_GetTotalSceneTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projector.UpdateSunLight
// (Defined, Event, Public)
// Parameters:
// struct FVector                 SunDir                         (Parm)

void AProjector::UpdateSunLight(const struct FVector& SunDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.UpdateSunLight");

	AProjector_UpdateSunLight_Params params;
	params.SunDir = SunDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.LightUpdate
// (Defined, Event, Public)
// Parameters:
// TArray<class AActor*>          LightSources                   (Parm, NeedCtorLink)

void AProjector::LightUpdate(TArray<class AActor*> LightSources)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.LightUpdate");

	AProjector_LightUpdate_Params params;
	params.LightSources = LightSources;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.UnTouch
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AProjector::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.UnTouch");

	AProjector_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.Touch
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AProjector::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.Touch");

	AProjector_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AProjector::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.PostBeginPlay");

	AProjector_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.DetachActor
// (Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void AProjector::DetachActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.DetachActor");

	AProjector_DetachActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.AttachActor
// (Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void AProjector::AttachActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.AttachActor");

	AProjector_AttachActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.AbandonProjector
// (Native, Public)
// Parameters:
// float                          Lifetime                       (OptionalParm, Parm)

void AProjector::AbandonProjector(float Lifetime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.AbandonProjector");

	AProjector_AbandonProjector_Params params;
	params.Lifetime = Lifetime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.DetachProjector
// (Native, Public)
// Parameters:
// bool                           Force                          (OptionalParm, Parm)

void AProjector::DetachProjector(bool Force)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.DetachProjector");

	AProjector_DetachProjector_Params params;
	params.Force = Force;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projector.AttachProjector
// (Native, Public)
// Parameters:
// float                          FadeInTime                     (OptionalParm, Parm)

void AProjector::AttachProjector(float FadeInTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projector.AttachProjector");

	AProjector_AttachProjector_Params params;
	params.FadeInTime = FadeInTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FinalEffect.FadeToColor
// (Defined, Public)
// Parameters:
// float                          inFadeTime                     (Parm)

void UFinalEffect::FadeToColor(float inFadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FinalEffect.FadeToColor");

	UFinalEffect_FadeToColor_Params params;
	params.inFadeTime = inFadeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FinalEffect.FadeToBlackWhite
// (Defined, Public)
// Parameters:
// float                          inFadeTime                     (Parm)

void UFinalEffect::FadeToBlackWhite(float inFadeTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FinalEffect.FadeToBlackWhite");

	UFinalEffect_FadeToBlackWhite_Params params;
	params.inFadeTime = inFadeTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FinalEffect.InitNewPresets
// (Defined, Public)

void UFinalEffect::InitNewPresets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FinalEffect.InitNewPresets");

	UFinalEffect_InitNewPresets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FinalEffect.InitPresets
// (Defined, Event, Public)

void UFinalEffect::InitPresets()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FinalEffect.InitPresets");

	UFinalEffect_InitPresets_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayInfo.SplitStringToArray
// (Final, Defined, Public)
// Parameters:
// TArray<struct FString>         Parts                          (Parm, OutParm, NeedCtorLink)
// struct FString                 Source                         (Parm, NeedCtorLink)
// struct FString                 Delim                          (Parm, NeedCtorLink)

void UPlayInfo::SplitStringToArray(const struct FString& Source, const struct FString& Delim, TArray<struct FString>* Parts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.SplitStringToArray");

	UPlayInfo_SplitStringToArray_Params params;
	params.Source = Source;
	params.Delim = Delim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parts != nullptr)
		*Parts = params.Parts;
}


// Function Engine.PlayInfo.GetGameInfo
// (Final, Defined, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* UPlayInfo::GetGameInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.GetGameInfo");

	UPlayInfo_GetGameInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.Init
// (Final, Defined, Public)
// Parameters:
// TArray<class UClass*>          Classes                        (Parm, NeedCtorLink)
// bool                           bStrict                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::Init(TArray<class UClass*> Classes, bool bStrict)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.Init");

	UPlayInfo_Init_Params params;
	params.Classes = Classes;
	params.bStrict = bStrict;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.Dump
// (Final, Defined, Public)
// Parameters:
// struct FString                 Group                          (OptionalParm, Parm, NeedCtorLink)

void UPlayInfo::Dump(const struct FString& Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.Dump");

	UPlayInfo_Dump_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayInfo.Sort
// (Final, Native, Public)
// Parameters:
// unsigned char                  SortingMethod                  (Parm)

void UPlayInfo::Sort(unsigned char SortingMethod)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.Sort");

	UPlayInfo_Sort_Params params;
	params.SortingMethod = SortingMethod;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayInfo.FindIndex
// (Final, Native, Public)
// Parameters:
// struct FString                 SettingName                    (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UPlayInfo::FindIndex(const struct FString& SettingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.FindIndex");

	UPlayInfo_FindIndex_Params params;
	params.SettingName = SettingName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.GetSettings
// (Final, Native, Public)
// Parameters:
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// TArray<struct FPlayInfoData>   GroupSettings                  (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::GetSettings(const struct FString& GroupName, TArray<struct FPlayInfoData>* GroupSettings)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.GetSettings");

	UPlayInfo_GetSettings_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GroupSettings != nullptr)
		*GroupSettings = params.GroupSettings;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.StoreSetting
// (Final, Native, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 NewVal                         (Parm, CoerceParm, NeedCtorLink)
// struct FString                 RangeData                      (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::StoreSetting(int Index, const struct FString& NewVal, const struct FString& RangeData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.StoreSetting");

	UPlayInfo_StoreSetting_Params params;
	params.Index = Index;
	params.NewVal = NewVal;
	params.RangeData = RangeData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.SaveSettings
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::SaveSettings()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.SaveSettings");

	UPlayInfo_SaveSettings_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.AddSetting
// (Final, Native, Public)
// Parameters:
// struct FString                 Group                          (Parm, NeedCtorLink)
// struct FString                 PropertyName                   (Parm, NeedCtorLink)
// struct FString                 Description                    (Parm, NeedCtorLink)
// unsigned char                  SecLevel                       (Parm)
// unsigned char                  Weight                         (Parm)
// struct FString                 RenderType                     (Parm, NeedCtorLink)
// struct FString                 Extras                         (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ExtraPrivs                     (OptionalParm, Parm, NeedCtorLink)
// bool                           bMultiPlayerOnly               (OptionalParm, Parm)
// bool                           bAdvanced                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::AddSetting(const struct FString& Group, const struct FString& PropertyName, const struct FString& Description, unsigned char SecLevel, unsigned char Weight, const struct FString& RenderType, const struct FString& Extras, const struct FString& ExtraPrivs, bool bMultiPlayerOnly, bool bAdvanced)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.AddSetting");

	UPlayInfo_AddSetting_Params params;
	params.Group = Group;
	params.PropertyName = PropertyName;
	params.Description = Description;
	params.SecLevel = SecLevel;
	params.Weight = Weight;
	params.RenderType = RenderType;
	params.Extras = Extras;
	params.ExtraPrivs = ExtraPrivs;
	params.bMultiPlayerOnly = bMultiPlayerOnly;
	params.bAdvanced = bAdvanced;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.PopClass
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::PopClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.PopClass");

	UPlayInfo_PopClass_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.RemoveClass
// (Final, Native, Public)
// Parameters:
// class UClass*                  RemovingClass                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::RemoveClass(class UClass* RemovingClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.RemoveClass");

	UPlayInfo_RemoveClass_Params params;
	params.RemovingClass = RemovingClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.AddClass
// (Final, Native, Public)
// Parameters:
// class UClass*                  AddingClass                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::AddClass(class UClass* AddingClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.AddClass");

	UPlayInfo_AddClass_Params params;
	params.AddingClass = AddingClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayInfo.Clear
// (Final, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayInfo::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayInfo.Clear");

	UPlayInfo_Clear_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Emitter.Reset
// (Defined, Simulated, Public)

void AEmitter::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Reset");

	AEmitter_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SpawnParticle
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Amount                         (Parm)

void AEmitter::SpawnParticle(int Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SpawnParticle");

	AEmitter_SpawnParticle_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.Trigger
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AEmitter::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Trigger");

	AEmitter_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.UpdatePrecacheMaterials
// (Defined, Simulated, Public)

void AEmitter::UpdatePrecacheMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.UpdatePrecacheMaterials");

	AEmitter_UpdatePrecacheMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.SetFadeOutTime
// (Defined, Simulated, Public)
// Parameters:
// float                          fTotal                         (Parm)
// float                          fFadeOutGap                    (Parm)

void AEmitter::SetFadeOutTime(float fTotal, float fFadeOutGap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.SetFadeOutTime");

	AEmitter_SetFadeOutTime_Params params;
	params.fTotal = fTotal;
	params.fFadeOutGap = fFadeOutGap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Emitter.Kill
// (Native, Public)

void AEmitter::Kill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Emitter.Kill");

	AEmitter_Kill_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.UpdatePrecacheStaticMeshes
// (Defined, Simulated, Public)

void AMover::UpdatePrecacheStaticMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.UpdatePrecacheStaticMeshes");

	AMover_UpdatePrecacheStaticMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.BaseFinished
// (Public)

void AMover::BaseFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.BaseFinished");

	AMover_BaseFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.BaseStarted
// (Public)

void AMover::BaseStarted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.BaseStarted");

	AMover_BaseStarted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.MoverLooped
// (Defined, Public)

void AMover::MoverLooped()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.MoverLooped");

	AMover_MoverLooped_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.SetStoppedPosition
// (Defined, Public)
// Parameters:
// unsigned char                  NewPos                         (Parm)

void AMover::SetStoppedPosition(unsigned char NewPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.SetStoppedPosition");

	AMover_SetStoppedPosition_Params params;
	params.NewPos = NewPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.EnableTrigger
// (Public)

void AMover::EnableTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.EnableTrigger");

	AMover_EnableTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.DisableTrigger
// (Public)

void AMover::DisableTrigger()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.DisableTrigger");

	AMover_DisableTrigger_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.TakeDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AMover::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.TakeDamage");

	AMover_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.Bump
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AMover::Bump(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.Bump");

	AMover_Bump_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.EncroachingOn
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMover::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.EncroachingOn");

	AMover_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mover.MakeGroupReturn
// (Defined, Public)

void AMover::MakeGroupReturn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.MakeGroupReturn");

	AMover_MakeGroupReturn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.MakeGroupStop
// (Defined, Public)

void AMover::MakeGroupStop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.MakeGroupStop");

	AMover_MakeGroupStop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.Reset
// (Defined, Public)

void AMover::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.Reset");

	AMover_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.SetResetStatus
// (Defined, Public)
// Parameters:
// bool                           bNewStatus                     (Parm)

void AMover::SetResetStatus(bool bNewStatus)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.SetResetStatus");

	AMover_SetResetStatus_Params params;
	params.bNewStatus = bNewStatus;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.PostBeginPlay
// (Defined, Public)

void AMover::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.PostBeginPlay");

	AMover_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.BeginPlay
// (Defined, Simulated, Public)

void AMover::BeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.BeginPlay");

	AMover_BeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.DoClose
// (Defined, Public)

void AMover::DoClose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.DoClose");

	AMover_DoClose_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.DoOpen
// (Defined, Public)

void AMover::DoOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.DoOpen");

	AMover_DoOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.FinishedOpening
// (Defined, Public)

void AMover::FinishedOpening()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.FinishedOpening");

	AMover_FinishedOpening_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.FinishedClosing
// (Defined, Public)

void AMover::FinishedClosing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.FinishedClosing");

	AMover_FinishedClosing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.FinishNotify
// (Defined, Public)

void AMover::FinishNotify()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.FinishNotify");

	AMover_FinishNotify_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.KeyFrameReached
// (Defined, Simulated, Event, Public)

void AMover::KeyFrameReached()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.KeyFrameReached");

	AMover_KeyFrameReached_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.SetKeyframe
// (Final, Defined, Public)
// Parameters:
// unsigned char                  NewKeyNum                      (Parm)
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void AMover::SetKeyframe(unsigned char NewKeyNum, const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.SetKeyframe");

	AMover_SetKeyframe_Params params;
	params.NewKeyNum = NewKeyNum;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.InterpolateTo
// (Final, Defined, Simulated, Public)
// Parameters:
// unsigned char                  NewKeyNum                      (Parm)
// float                          Seconds                        (Parm)

void AMover::InterpolateTo(unsigned char NewKeyNum, float Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.InterpolateTo");

	AMover_InterpolateTo_Params params;
	params.NewKeyNum = NewKeyNum;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.Timer
// (Defined, Simulated, Public)

void AMover::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.Timer");

	AMover_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.StartInterpolation
// (Defined, Simulated, Public)

void AMover::StartInterpolation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.StartInterpolation");

	AMover_StartInterpolation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mover.SpecialHandling
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AMover::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.SpecialHandling");

	AMover_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mover.SelfTriggered
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMover::SelfTriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mover.SelfTriggered");

	AMover_SelfTriggered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Modifier.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UModifier::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Modifier.Trigger");

	UModifier_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Modifier.Reset
// (Defined, Public)

void UModifier::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Modifier.Reset");

	UModifier_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialSequence.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UMaterialSequence::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialSequence.Trigger");

	UMaterialSequence_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialSequence.Reset
// (Defined, Public)

void UMaterialSequence::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialSequence.Reset");

	UMaterialSequence_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialSwitch.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UMaterialSwitch::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialSwitch.Trigger");

	UMaterialSwitch_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialSwitch.Reset
// (Defined, Public)

void UMaterialSwitch::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialSwitch.Reset");

	UMaterialSwitch_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TexOscillatorTriggered.Reset
// (Defined, Public)

void UTexOscillatorTriggered::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TexOscillatorTriggered.Reset");

	UTexOscillatorTriggered_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TexOscillatorTriggered.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UTexOscillatorTriggered::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TexOscillatorTriggered.Trigger");

	UTexOscillatorTriggered_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TexPannerTriggered.Reset
// (Defined, Public)

void UTexPannerTriggered::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TexPannerTriggered.Reset");

	UTexPannerTriggered_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TexPannerTriggered.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UTexPannerTriggered::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TexPannerTriggered.Trigger");

	UTexPannerTriggered_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalShader.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UDecalShader::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalShader.Trigger");

	UDecalShader_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DecalShader.Reset
// (Defined, Public)

void UDecalShader::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DecalShader.Reset");

	UDecalShader_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BlendShader.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UBlendShader::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BlendShader.Trigger");

	UBlendShader_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BlendShader.Reset
// (Defined, Public)

void UBlendShader::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BlendShader.Reset");

	UBlendShader_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Shader.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  EventInstigator                (Parm)

void UShader::Trigger(class AActor* Other, class AActor* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Shader.Trigger");

	UShader_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Shader.Reset
// (Defined, Public)

void UShader::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Shader.Reset");

	UShader_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.EnableInteractions
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)

void UInteractionMaster::EnableInteractions(TArray<class UInteraction*> InteractionArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.EnableInteractions");

	UInteractionMaster_EnableInteractions_Params params;
	params.InteractionArray = InteractionArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.DisableInteractions
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)

void UInteractionMaster::DisableInteractions(TArray<class UInteraction*> InteractionArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.DisableInteractions");

	UInteractionMaster_DisableInteractions_Params params;
	params.InteractionArray = InteractionArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.NotifyLevelChange
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)

void UInteractionMaster::NotifyLevelChange(TArray<class UInteraction*> InteractionArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.NotifyLevelChange");

	UInteractionMaster_NotifyLevelChange_Params params;
	params.InteractionArray = InteractionArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.Process_Message
// (Defined, Event, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// float                          MsgLife                        (Parm)
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)

void UInteractionMaster::Process_Message(const struct FString& Msg, float MsgLife, TArray<class UInteraction*> InteractionArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.Process_Message");

	UInteractionMaster_Process_Message_Params params;
	params.Msg = Msg;
	params.MsgLife = MsgLife;
	params.InteractionArray = InteractionArray;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.Process_Tick
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)
// float                          DeltaTime                      (Parm)

void UInteractionMaster::Process_Tick(TArray<class UInteraction*> InteractionArray, float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.Process_Tick");

	UInteractionMaster_Process_Tick_Params params;
	params.InteractionArray = InteractionArray;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.Process_PostRender
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)
// class UCanvas*                 Canvas                         (Parm)

void UInteractionMaster::Process_PostRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.Process_PostRender");

	UInteractionMaster_Process_PostRender_Params params;
	params.InteractionArray = InteractionArray;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.Process_PreRender
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)
// class UCanvas*                 Canvas                         (Parm)

void UInteractionMaster::Process_PreRender(TArray<class UInteraction*> InteractionArray, class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.Process_PreRender");

	UInteractionMaster_Process_PreRender_Params params;
	params.InteractionArray = InteractionArray;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.Process_KeyEvent
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)
// TEnumAsByte<EInputKey>         key                            (Parm, OutParm)
// TEnumAsByte<EInputAction>      Action                         (Parm, OutParm)
// float                          Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteractionMaster::Process_KeyEvent(TArray<class UInteraction*> InteractionArray, float Delta, TEnumAsByte<EInputKey>* key, TEnumAsByte<EInputAction>* Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.Process_KeyEvent");

	UInteractionMaster_Process_KeyEvent_Params params;
	params.InteractionArray = InteractionArray;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (key != nullptr)
		*key = params.key;
	if (Action != nullptr)
		*Action = params.Action;

	return params.ReturnValue;
}


// Function Engine.InteractionMaster.Process_KeyType
// (Defined, Event, Public)
// Parameters:
// TArray<class UInteraction*>    InteractionArray               (Parm, NeedCtorLink)
// TEnumAsByte<EInputKey>         key                            (Parm, OutParm)
// struct FString                 Unicode                        (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UInteractionMaster::Process_KeyType(TArray<class UInteraction*> InteractionArray, const struct FString& Unicode, TEnumAsByte<EInputKey>* key)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.Process_KeyType");

	UInteractionMaster_Process_KeyType_Params params;
	params.InteractionArray = InteractionArray;
	params.Unicode = Unicode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (key != nullptr)
		*key = params.key;

	return params.ReturnValue;
}


// Function Engine.InteractionMaster.SetFocusTo
// (Defined, Event, Public)
// Parameters:
// class UInteraction*            Inter                          (Parm)
// class UPlayer*                 ViewportOwner                  (OptionalParm, Parm)

void UInteractionMaster::SetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.SetFocusTo");

	UInteractionMaster_SetFocusTo_Params params;
	params.Inter = Inter;
	params.ViewportOwner = ViewportOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.RemoveInteraction
// (Defined, Event, Public)
// Parameters:
// class UInteraction*            RemoveMe                       (Parm)

void UInteractionMaster::RemoveInteraction(class UInteraction* RemoveMe)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.RemoveInteraction");

	UInteractionMaster_RemoveInteraction_Params params;
	params.RemoveMe = RemoveMe;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InteractionMaster.AddInteraction
// (Defined, Event, Public)
// Parameters:
// struct FString                 InteractionName                (Parm, NeedCtorLink)
// class UPlayer*                 AttachTo                       (OptionalParm, Parm)
// class UInteraction*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UInteraction* UInteractionMaster::AddInteraction(const struct FString& InteractionName, class UPlayer* AttachTo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.AddInteraction");

	UInteractionMaster_AddInteraction_Params params;
	params.InteractionName = InteractionName;
	params.AttachTo = AttachTo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InteractionMaster.Travel
// (Native, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void UInteractionMaster::Travel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InteractionMaster.Travel");

	UInteractionMaster_Travel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BaseGUIController.SetTime
// (Defined, Public)
// Parameters:
// int                            newTime                        (Parm)

void UBaseGUIController::SetTime(int newTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.SetTime");

	UBaseGUIController_SetTime_Params params;
	params.newTime = newTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BaseGUIController.NeedToOffIME
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBaseGUIController::NeedToOffIME()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.NeedToOffIME");

	UBaseGUIController_NeedToOffIME_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BaseGUIController.SetRequiredGameResolution
// (Event, Public)
// Parameters:
// struct FString                 GameRes                        (Parm, NeedCtorLink)

void UBaseGUIController::SetRequiredGameResolution(const struct FString& GameRes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.SetRequiredGameResolution");

	UBaseGUIController_SetRequiredGameResolution_Params params;
	params.GameRes = GameRes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BaseGUIController.NeedsMenuResolution
// (Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBaseGUIController::NeedsMenuResolution()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.NeedsMenuResolution");

	UBaseGUIController_NeedsMenuResolution_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BaseGUIController.InitializeController
// (Event, Public)

void UBaseGUIController::InitializeController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.InitializeController");

	UBaseGUIController_InitializeController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BaseGUIController.SetControllerStatus
// (Defined, Public)
// Parameters:
// bool                           On                             (Parm)

void UBaseGUIController::SetControllerStatus(bool On)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.SetControllerStatus");

	UBaseGUIController_SetControllerStatus_Params params;
	params.On = On;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BaseGUIController.ClickCloseWndBtn
// (Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBaseGUIController::ClickCloseWndBtn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.ClickCloseWndBtn");

	UBaseGUIController_ClickCloseWndBtn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BaseGUIController.CloseAll
// (Event, Public)
// Parameters:
// bool                           bCancel                        (Parm)
// bool                           bForced                        (OptionalParm, Parm)

void UBaseGUIController::CloseAll(bool bCancel, bool bForced)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.CloseAll");

	UBaseGUIController_CloseAll_Params params;
	params.bCancel = bCancel;
	params.bForced = bForced;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BaseGUIController.CloseMenu
// (Defined, Event, Public)
// Parameters:
// bool                           bCanceled                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBaseGUIController::CloseMenu(bool bCanceled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.CloseMenu");

	UBaseGUIController_CloseMenu_Params params;
	params.bCanceled = bCanceled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BaseGUIController.ReplaceMenu
// (Defined, Event, Public)
// Parameters:
// struct FString                 NewMenuName                    (Parm, NeedCtorLink)
// struct FString                 Param1                         (OptionalParm, Parm, NeedCtorLink)
// struct FString                 Param2                         (OptionalParm, Parm, NeedCtorLink)
// bool                           bCancelled                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBaseGUIController::ReplaceMenu(const struct FString& NewMenuName, const struct FString& Param1, const struct FString& Param2, bool bCancelled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.ReplaceMenu");

	UBaseGUIController_ReplaceMenu_Params params;
	params.NewMenuName = NewMenuName;
	params.Param1 = Param1;
	params.Param2 = Param2;
	params.bCancelled = bCancelled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BaseGUIController.AutoLoadMenus
// (Event, Public)

void UBaseGUIController::AutoLoadMenus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.AutoLoadMenus");

	UBaseGUIController_AutoLoadMenus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BaseGUIController.OpenMenu
// (Defined, Event, Public)
// Parameters:
// struct FString                 NewMenuName                    (Parm, NeedCtorLink)
// struct FString                 Param1                         (OptionalParm, Parm, NeedCtorLink)
// struct FString                 Param2                         (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBaseGUIController::OpenMenu(const struct FString& NewMenuName, const struct FString& Param1, const struct FString& Param2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.OpenMenu");

	UBaseGUIController_OpenMenu_Params params;
	params.NewMenuName = NewMenuName;
	params.Param1 = Param1;
	params.Param2 = Param2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BaseGUIController.OnAdminReply
// (Public, Delegate)
// Parameters:
// struct FString                 Reply                          (Parm, NeedCtorLink)

void UBaseGUIController::OnAdminReply(const struct FString& Reply)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BaseGUIController.OnAdminReply");

	UBaseGUIController_OnAdminReply_Params params;
	params.Reply = Reply;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.NeedToOffIME
// (Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::NeedToOffIME()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.NeedToOffIME");

	UConsole_NeedToOffIME_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.IsInputTimeTooIdle
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::IsInputTimeTooIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.IsInputTimeTooIdle");

	UConsole_IsInputTimeTooIdle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.IsBGMPlaying
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::IsBGMPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.IsBGMPlaying");

	UConsole_IsBGMPlaying_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.SetTermBetweenBGM
// (Public)
// Parameters:
// float                          val                            (Parm)

void UConsole::SetTermBetweenBGM(float val)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetTermBetweenBGM");

	UConsole_SetTermBetweenBGM_Params params;
	params.val = val;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.UpdateBGM
// (Public)
// Parameters:
// float                          dt                             (Parm)

void UConsole::UpdateBGM(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.UpdateBGM");

	UConsole_UpdateBGM_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.NextBGM
// (Public)

void UConsole::NextBGM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.NextBGM");

	UConsole_NextBGM_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetBGMAdvanced
// (Public)
// Parameters:
// TArray<struct FString>         List                           (Parm, NeedCtorLink)
// bool                           partialPlay                    (OptionalParm, Parm)
// int                            partialDuration                (OptionalParm, Parm)
// TArray<struct FIntArray>       initialSeeks                   (OptionalParm, Parm, NeedCtorLink)

void UConsole::SetBGMAdvanced(TArray<struct FString> List, bool partialPlay, int partialDuration, TArray<struct FIntArray> initialSeeks)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetBGMAdvanced");

	UConsole_SetBGMAdvanced_Params params;
	params.List = List;
	params.partialPlay = partialPlay;
	params.partialDuration = partialDuration;
	params.initialSeeks = initialSeeks;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetBGM
// (Public)
// Parameters:
// TArray<struct FString>         List                           (Parm, NeedCtorLink)

void UConsole::SetBGM(TArray<struct FString> List)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetBGM");

	UConsole_SetBGM_Params params;
	params.List = List;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetOneBGM
// (Public)
// Parameters:
// struct FString                 List                           (Parm, NeedCtorLink)

void UConsole::SetOneBGM(const struct FString& List)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetOneBGM");

	UConsole_SetOneBGM_Params params;
	params.List = List;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.SetOneChangeIgnore
// (Public)

void UConsole::SetOneChangeIgnore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetOneChangeIgnore");

	UConsole_SetOneChangeIgnore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.StopBGM
// (Public)

void UConsole::StopBGM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.StopBGM");

	UConsole_StopBGM_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.GetCurrentBGM
// (Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UConsole::GetCurrentBGM()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.GetCurrentBGM");

	UConsole_GetCurrentBGM_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.ClearMessageItems
// (Public)

void UConsole::ClearMessageItems()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ClearMessageItems");

	UConsole_ClearMessageItems_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.AddMessageItem
// (Public)
// Parameters:
// struct FMessageItem            Item                           (Parm, NeedCtorLink)

void UConsole::AddMessageItem(const struct FMessageItem& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.AddMessageItem");

	UConsole_AddMessageItem_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ConstructMessageItem
// (Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// TEnumAsByte<EMessageType>      MessageType                    (Parm)
// struct FMessageItem            ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FMessageItem UConsole::ConstructMessageItem(const struct FString& Text, TEnumAsByte<EMessageType> MessageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ConstructMessageItem");

	UConsole_ConstructMessageItem_Params params;
	params.Text = Text;
	params.MessageType = MessageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.SetInitialMusic
// (Defined, Public)
// Parameters:
// struct FString                 NewSong                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UConsole::SetInitialMusic(const struct FString& NewSong)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetInitialMusic");

	UConsole_SetInitialMusic_Params params;
	params.NewSong = NewSong;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.SetMusic
// (Public)
// Parameters:
// struct FString                 NewSong                        (Parm, NeedCtorLink)

void UConsole::SetMusic(const struct FString& NewSong)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.SetMusic");

	UConsole_SetMusic_Params params;
	params.NewSong = NewSong;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ConnectFailure
// (Event, Public)
// Parameters:
// struct FString                 FailCode                       (Parm, NeedCtorLink)
// struct FString                 URL                            (Parm, NeedCtorLink)

void UConsole::ConnectFailure(const struct FString& FailCode, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ConnectFailure");

	UConsole_ConnectFailure_Params params;
	params.FailCode = FailCode;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.Tick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          Delta                          (Parm)

void UConsole::Tick(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Tick");

	UConsole_Tick_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.TypingClose
// (Defined, Public)

void UConsole::TypingClose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.TypingClose");

	UConsole_TypingClose_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.TypingOpen
// (Defined, Public)

void UConsole::TypingOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.TypingOpen");

	UConsole_TypingOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.KeyEvent
// (Defined, Event, Public)
// Parameters:
// TEnumAsByte<EInputKey>         key                            (Parm)
// TEnumAsByte<EInputAction>      Action                         (Parm)
// float                          Delta                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::KeyEvent(TEnumAsByte<EInputKey> key, TEnumAsByte<EInputAction> Action, float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.KeyEvent");

	UConsole_KeyEvent_Params params;
	params.key = key;
	params.Action = Action;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.ProcessCheat
// (Defined, Public)
// Parameters:
// TEnumAsByte<EInputKey>         key                            (Parm)
// TEnumAsByte<EInputAction>      Action                         (Parm)

void UConsole::ProcessCheat(TEnumAsByte<EInputKey> key, TEnumAsByte<EInputAction> Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ProcessCheat");

	UConsole_ProcessCheat_Params params;
	params.key = key;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.HasCheat
// (Defined, Public)
// Parameters:
// struct FString                 str                            (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UConsole::HasCheat(const struct FString& str)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.HasCheat");

	UConsole_HasCheat_Params params;
	params.str = str;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Console.Message
// (Event, Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// float                          MsgLife                        (Parm)

void UConsole::Message(const struct FString& Msg, float MsgLife)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Message");

	UConsole_Message_Params params;
	params.Msg = Msg;
	params.MsgLife = MsgLife;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.Chat
// (Public)
// Parameters:
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// float                          MsgLife                        (Parm)
// class APlayerReplicationInfo*  PRI                            (Parm)

void UConsole::Chat(const struct FString& Msg, float MsgLife, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Chat");

	UConsole_Chat_Params params;
	params.Msg = Msg;
	params.MsgLife = MsgLife;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.DelayedConsoleCommand
// (Defined, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)

void UConsole::DelayedConsoleCommand(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.DelayedConsoleCommand");

	UConsole_DelayedConsoleCommand_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.NotifyLevelChange
// (Defined, Event, Public)

void UConsole::NotifyLevelChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.NotifyLevelChange");

	UConsole_NotifyLevelChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.StopRollingDemo
// (Defined, Exec, Public)

void UConsole::StopRollingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.StopRollingDemo");

	UConsole_StopRollingDemo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.StartRollingDemo
// (Defined, Exec, Public)

void UConsole::StartRollingDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.StartRollingDemo");

	UConsole_StartRollingDemo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ConsoleToggle
// (Exec, Public)

void UConsole::ConsoleToggle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ConsoleToggle");

	UConsole_ConsoleToggle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ConsoleClose
// (Exec, Public)

void UConsole::ConsoleClose()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ConsoleClose");

	UConsole_ConsoleClose_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ConsoleOpen
// (Exec, Public)

void UConsole::ConsoleOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ConsoleOpen");

	UConsole_ConsoleOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.TeamTalk
// (Defined, Exec, Public)

void UConsole::TeamTalk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.TeamTalk");

	UConsole_TeamTalk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.Talk
// (Defined, Exec, Public)

void UConsole::Talk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Talk");

	UConsole_Talk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.Type
// (Defined, Exec, Public)

void UConsole::Type()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Type");

	UConsole_Type_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.UnPressButtons
// (Defined, Public)

void UConsole::UnPressButtons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.UnPressButtons");

	UConsole_UnPressButtons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.NativeConsoleOpen
// (Defined, Event, Public)

void UConsole::NativeConsoleOpen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.NativeConsoleOpen");

	UConsole_NativeConsoleOpen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.ViewportInitialized
// (Defined, Event, Public)

void UConsole::ViewportInitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.ViewportInitialized");

	UConsole_ViewportInitialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.Initialized
// (Defined, Event, Public)

void UConsole::Initialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.Initialized");

	UConsole_Initialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Console.RecordOn_Exception
// (Public)
// Parameters:
// int                            retCode                        (Parm)

void UConsole::RecordOn_Exception(int retCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Console.RecordOn_Exception");

	UConsole_RecordOn_Exception_Params params;
	params.retCode = retCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManagerBase.GetCacheMapList
// (Public)
// Parameters:
// struct FString                 Acronym                        (Parm, NeedCtorLink)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManagerBase::GetCacheMapList(const struct FString& Acronym)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetCacheMapList");

	AMaplistManagerBase_GetCacheMapList_Params params;
	params.Acronym = Acronym;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.FindCacheGameIndex
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, CoerceParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::FindCacheGameIndex(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.FindCacheGameIndex");

	AMaplistManagerBase_FindCacheGameIndex_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.ShiftMap
// (Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            Count                          (Parm)

void AMaplistManagerBase::ShiftMap(int GameIndex, int RecordIndex, const struct FString& MapName, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ShiftMap");

	AMaplistManagerBase_ShiftMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManagerBase.SaveMapList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::SaveMapList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.SaveMapList");

	AMaplistManagerBase_SaveMapList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.SaveGame
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::SaveGame(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.SaveGame");

	AMaplistManagerBase_SaveGame_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.MapChange
// (Public)
// Parameters:
// struct FString                 NewMapName                     (Parm, NeedCtorLink)

void AMaplistManagerBase::MapChange(const struct FString& NewMapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.MapChange");

	AMaplistManagerBase_MapChange_Params params;
	params.NewMapName = NewMapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManagerBase.ApplyMapList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::ApplyMapList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ApplyMapList");

	AMaplistManagerBase_ApplyMapList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetActiveMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::GetActiveMap(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetActiveMap");

	AMaplistManagerBase_GetActiveMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.SetActiveList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            NewActive                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::SetActiveList(int GameIndex, int NewActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.SetActiveList");

	AMaplistManagerBase_SetActiveList_Params params;
	params.GameIndex = GameIndex;
	params.NewActive = NewActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetActiveList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::GetActiveList(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetActiveList");

	AMaplistManagerBase_GetActiveList_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetMapList
// (Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManagerBase::GetMapList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetMapList");

	AMaplistManagerBase_GetMapList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetCurrentMapRotation
// (Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManagerBase::GetCurrentMapRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetCurrentMapRotation");

	AMaplistManagerBase_GetCurrentMapRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetMapListNames
// (Public)
// Parameters:
// int                            GameIndex                      (Parm)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManagerBase::GetMapListNames(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetMapListNames");

	AMaplistManagerBase_GetMapListNames_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetMapListTitle
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMaplistManagerBase::GetMapListTitle(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetMapListTitle");

	AMaplistManagerBase_GetMapListTitle_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetRecordIndex
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// struct FString                 MapListName                    (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::GetRecordIndex(int GameIndex, const struct FString& MapListName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetRecordIndex");

	AMaplistManagerBase_GetRecordIndex_Params params;
	params.GameIndex = GameIndex;
	params.MapListName = MapListName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetMapIndex
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::GetMapIndex(int GameIndex, int RecordIndex, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetMapIndex");

	AMaplistManagerBase_GetMapIndex_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.GetGameIndex
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, CoerceParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::GetGameIndex(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.GetGameIndex");

	AMaplistManagerBase_GetGameIndex_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.RemoveMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            MapIndex                       (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::RemoveMap(int GameIndex, int MapIndex, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.RemoveMap");

	AMaplistManagerBase_RemoveMap_Params params;
	params.GameIndex = GameIndex;
	params.MapIndex = MapIndex;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.AddMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::AddMap(int GameIndex, int RecordIndex, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.AddMap");

	AMaplistManagerBase_AddMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.ClearList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::ClearList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ClearList");

	AMaplistManagerBase_ClearList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.RenameList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 NewName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::RenameList(int GameIndex, int RecordIndex, const struct FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.RenameList");

	AMaplistManagerBase_RenameList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.ResetList
// (Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)

void AMaplistManagerBase::ResetList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ResetList");

	AMaplistManagerBase_ResetList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManagerBase.ResetGame
// (Public)
// Parameters:
// int                            GameIndex                      (Parm)

void AMaplistManagerBase::ResetGame(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ResetGame");

	AMaplistManagerBase_ResetGame_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManagerBase.RemoveList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::RemoveList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.RemoveList");

	AMaplistManagerBase_RemoveList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.AddList
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// struct FString                 NewName                        (Parm, NeedCtorLink)
// TArray<struct FString>         Maps                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManagerBase::AddList(const struct FString& GameType, const struct FString& NewName, TArray<struct FString> Maps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.AddList");

	AMaplistManagerBase_AddList_Params params;
	params.GameType = GameType;
	params.NewName = NewName;
	params.Maps = Maps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.ValidGameIndex
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::ValidGameIndex(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ValidGameIndex");

	AMaplistManagerBase_ValidGameIndex_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.ValidCacheGameIndex
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::ValidCacheGameIndex(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ValidCacheGameIndex");

	AMaplistManagerBase_ValidCacheGameIndex_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.ValidName
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::ValidName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ValidName");

	AMaplistManagerBase_ValidName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManagerBase.ValidGameType
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManagerBase::ValidGameType(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManagerBase.ValidGameType");

	AMaplistManagerBase_ValidGameType_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FluidSurfaceInfo.Touch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AFluidSurfaceInfo::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceInfo.Touch");

	AFluidSurfaceInfo_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceInfo.TakeDamage
// (Defined, Simulated, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AFluidSurfaceInfo::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceInfo.TakeDamage");

	AFluidSurfaceInfo_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FluidSurfaceInfo.Pling
// (Final, Native, Public)
// Parameters:
// struct FVector                 Position                       (Parm)
// float                          Strength                       (Parm)
// float                          Radius                         (OptionalParm, Parm)

void AFluidSurfaceInfo::Pling(const struct FVector& Position, float Strength, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FluidSurfaceInfo.Pling");

	AFluidSurfaceInfo_Pling_Params params;
	params.Position = Position;
	params.Strength = Strength;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CacheManager.GetAnnouncerRecord
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, CoerceParm, NeedCtorLink)
// struct FAnnouncerRecord        ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FAnnouncerRecord UCacheManager::STATIC_GetAnnouncerRecord(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetAnnouncerRecord");

	UCacheManager_GetAnnouncerRecord_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.GetVehicleRecord
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, CoerceParm, NeedCtorLink)
// struct FVehicleRecord          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FVehicleRecord UCacheManager::STATIC_GetVehicleRecord(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetVehicleRecord");

	UCacheManager_GetVehicleRecord_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.GetWeaponRecord
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, CoerceParm, NeedCtorLink)
// struct FWeaponRecord           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FWeaponRecord UCacheManager::STATIC_GetWeaponRecord(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetWeaponRecord");

	UCacheManager_GetWeaponRecord_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.GetMutatorRecord
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, CoerceParm, NeedCtorLink)
// struct UCacheManager_FMutatorRecord ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct UCacheManager_FMutatorRecord UCacheManager::STATIC_GetMutatorRecord(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetMutatorRecord");

	UCacheManager_GetMutatorRecord_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.GetMapRecord
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FMapRecord              ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FMapRecord UCacheManager::STATIC_GetMapRecord(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetMapRecord");

	UCacheManager_GetMapRecord_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.GetGameRecord
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, CoerceParm, NeedCtorLink)
// struct FGameRecord             ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FGameRecord UCacheManager::STATIC_GetGameRecord(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetGameRecord");

	UCacheManager_GetGameRecord_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.GetTeamSymbolList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct FString>         SymbolNames                    (Parm, OutParm, NeedCtorLink)
// bool                           bNoSinglePlayer                (OptionalParm, Parm)

void UCacheManager::STATIC_GetTeamSymbolList(bool bNoSinglePlayer, TArray<struct FString>* SymbolNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetTeamSymbolList");

	UCacheManager_GetTeamSymbolList_Params params;
	params.bNoSinglePlayer = bNoSinglePlayer;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SymbolNames != nullptr)
		*SymbolNames = params.SymbolNames;
}


// Function Engine.CacheManager.GetAnnouncerList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct FAnnouncerRecord> AnnouncerRecords               (Parm, OutParm, NeedCtorLink)

void UCacheManager::STATIC_GetAnnouncerList(TArray<struct FAnnouncerRecord>* AnnouncerRecords)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetAnnouncerList");

	UCacheManager_GetAnnouncerList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AnnouncerRecords != nullptr)
		*AnnouncerRecords = params.AnnouncerRecords;
}


// Function Engine.CacheManager.GetMutatorList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct UCacheManager_FMutatorRecord> MutatorRecords                 (Parm, OutParm, NeedCtorLink)

void UCacheManager::STATIC_GetMutatorList(TArray<struct UCacheManager_FMutatorRecord>* MutatorRecords)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetMutatorList");

	UCacheManager_GetMutatorList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MutatorRecords != nullptr)
		*MutatorRecords = params.MutatorRecords;
}


// Function Engine.CacheManager.GetCrosshairList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct FCrosshairRecord> CrosshairRecords               (Parm, OutParm, NeedCtorLink)

void UCacheManager::STATIC_GetCrosshairList(TArray<struct FCrosshairRecord>* CrosshairRecords)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetCrosshairList");

	UCacheManager_GetCrosshairList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CrosshairRecords != nullptr)
		*CrosshairRecords = params.CrosshairRecords;
}


// Function Engine.CacheManager.GetVehicleList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct FVehicleRecord>  VehicleRecords                 (Parm, OutParm, NeedCtorLink)

void UCacheManager::STATIC_GetVehicleList(TArray<struct FVehicleRecord>* VehicleRecords)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetVehicleList");

	UCacheManager_GetVehicleList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (VehicleRecords != nullptr)
		*VehicleRecords = params.VehicleRecords;
}


// Function Engine.CacheManager.GetWeaponList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct FWeaponRecord>   WeaponRecords                  (Parm, OutParm, NeedCtorLink)

void UCacheManager::STATIC_GetWeaponList(TArray<struct FWeaponRecord>* WeaponRecords)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetWeaponList");

	UCacheManager_GetWeaponList_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (WeaponRecords != nullptr)
		*WeaponRecords = params.WeaponRecords;
}


// Function Engine.CacheManager.GetMapList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct FMapRecord>      MapRecords                     (Parm, OutParm, NeedCtorLink)
// struct FString                 Acronym                        (OptionalParm, Parm, NeedCtorLink)

void UCacheManager::STATIC_GetMapList(const struct FString& Acronym, TArray<struct FMapRecord>* MapRecords)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetMapList");

	UCacheManager_GetMapList_Params params;
	params.Acronym = Acronym;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MapRecords != nullptr)
		*MapRecords = params.MapRecords;
}


// Function Engine.CacheManager.GetGameTypeList
// (Final, Simulated, Native, Static, Public)
// Parameters:
// TArray<struct FGameRecord>     GameRecords                    (Parm, OutParm, NeedCtorLink)
// struct FString                 FilterType                     (OptionalParm, Parm, NeedCtorLink)

void UCacheManager::STATIC_GetGameTypeList(const struct FString& FilterType, TArray<struct FGameRecord>* GameRecords)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.GetGameTypeList");

	UCacheManager_GetGameTypeList_Params params;
	params.FilterType = FilterType;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (GameRecords != nullptr)
		*GameRecords = params.GameRecords;
}


// Function Engine.CacheManager.IsDefaultContent
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 Item                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCacheManager::STATIC_IsDefaultContent(const struct FString& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.IsDefaultContent");

	UCacheManager_IsDefaultContent_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.IsBPContent
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 Item                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCacheManager::STATIC_IsBPContent(const struct FString& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.IsBPContent");

	UCacheManager_IsBPContent_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.Is2004Content
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 Item                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCacheManager::STATIC_Is2004Content(const struct FString& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.Is2004Content");

	UCacheManager_Is2004Content_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.Is2003Content
// (Final, Simulated, Native, Static, Public)
// Parameters:
// struct FString                 Item                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCacheManager::STATIC_Is2003Content(const struct FString& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.Is2003Content");

	UCacheManager_Is2003Content_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CacheManager.InitCache
// (Final, Native, Static, Public)

void UCacheManager::STATIC_InitCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CacheManager.InitCache");

	UCacheManager_InitCache_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.SplitParams
// (Defined, Public)
// Parameters:
// struct FString                 params                         (Parm, NeedCtorLink)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> UAdminBase::SplitParams(const struct FString& params)
{
	/*
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.SplitParams");

	UAdminBase_SplitParams_Params params;
	params.params = params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
	*/

	TArray<struct FString> Test;
	return Test;
}


// Function Engine.AdminBase.IsNumeric
// (Defined, Public)
// Parameters:
// struct FString                 Param                          (Parm, NeedCtorLink)
// bool                           bPositiveOnly                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAdminBase::IsNumeric(const struct FString& Param, bool bPositiveOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.IsNumeric");

	UAdminBase_IsNumeric_Params params;
	params.Param = Param;
	params.bPositiveOnly = bPositiveOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AdminBase.MaskedCompare
// (Defined, Protected)
// Parameters:
// struct FString                 SettingName                    (Parm, NeedCtorLink)
// struct FString                 Mask                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAdminBase::MaskedCompare(const struct FString& SettingName, const struct FString& Mask)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.MaskedCompare");

	UAdminBase_MaskedCompare_Params params;
	params.SettingName = SettingName;
	params.Mask = Mask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AdminBase.SendComplexMsg
// (Defined, Protected)
// Parameters:
// TArray<struct FString>         Arr                            (Parm, NeedCtorLink)
// struct FString                 Title                          (Parm, NeedCtorLink)

void UAdminBase::SendComplexMsg(TArray<struct FString> Arr, const struct FString& Title)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.SendComplexMsg");

	UAdminBase_SendComplexMsg_Params params;
	params.Arr = Arr;
	params.Title = Title;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.FindGameType
// (Defined, Protected)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UAdminBase::FindGameType(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.FindGameType");

	UAdminBase_FindGameType_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AdminBase.CanPerform
// (Defined, Protected)
// Parameters:
// struct FString                 priv                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UAdminBase::CanPerform(const struct FString& priv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.CanPerform");

	UAdminBase_CanPerform_Params params;
	params.priv = priv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AdminBase.Switch
// (Defined, Exec, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void UAdminBase::Switch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.Switch");

	UAdminBase_Switch_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.MapList
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 Extra                          (Parm, NeedCtorLink)

void UAdminBase::MapList(const struct FString& Cmd, const struct FString& Extra)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.MapList");

	UAdminBase_MapList_Params params;
	params.Cmd = Cmd;
	params.Extra = Extra;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.Map
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)

void UAdminBase::Map(const struct FString& Cmd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.Map");

	UAdminBase_Map_Params params;
	params.Cmd = Cmd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.NextMap
// (Defined, Exec, Public)

void UAdminBase::NextMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.NextMap");

	UAdminBase_NextMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.RestartMap
// (Defined, Exec, Public)

void UAdminBase::RestartMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.RestartMap");

	UAdminBase_RestartMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.KickBan
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void UAdminBase::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.KickBan");

	UAdminBase_KickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.Kick
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 Extra                          (Parm, NeedCtorLink)

void UAdminBase::Kick(const struct FString& Cmd, const struct FString& Extra)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.Kick");

	UAdminBase_Kick_Params params;
	params.Cmd = Cmd;
	params.Extra = Extra;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.PlayerList
// (Defined, Exec, Public)

void UAdminBase::PlayerList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.PlayerList");

	UAdminBase_PlayerList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.RestartCurrentMap
// (Defined, Public)

void UAdminBase::RestartCurrentMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.RestartCurrentMap");

	UAdminBase_RestartCurrentMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.MaplistCommand
// (Defined, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 Extra                          (Parm, NeedCtorLink)

void UAdminBase::MaplistCommand(const struct FString& Cmd, const struct FString& Extra)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.MaplistCommand");

	UAdminBase_MaplistCommand_Params params;
	params.Cmd = Cmd;
	params.Extra = Extra;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.GetMapListNames
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> UAdminBase::GetMapListNames(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.GetMapListNames");

	UAdminBase_GetMapListNames_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AdminBase.ShowCurrentMapList
// (Defined, Public)

void UAdminBase::ShowCurrentMapList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.ShowCurrentMapList");

	UAdminBase_ShowCurrentMapList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.GoToNextMap
// (Defined, Public)

void UAdminBase::GoToNextMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.GoToNextMap");

	UAdminBase_GoToNextMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.DoSwitch
// (Defined, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void UAdminBase::DoSwitch(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.DoSwitch");

	UAdminBase_DoSwitch_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.DoLogout
// (Public)

void UAdminBase::DoLogout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.DoLogout");

	UAdminBase_DoLogout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.DoLogin
// (Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)

void UAdminBase::DoLogin(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.DoLogin");

	UAdminBase_DoLogin_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AdminBase.Created
// (Defined, Public)

void UAdminBase::Created()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AdminBase.Created");

	UAdminBase_Created_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.CheckForDoubleClickMove
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// TEnumAsByte<EDoubleClickDir>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EDoubleClickDir> UPlayerInput::CheckForDoubleClickMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.CheckForDoubleClickMove");

	UPlayerInput_CheckForDoubleClickMove_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.ChangeSnapView
// (Defined, Public)
// Parameters:
// bool                           B                              (Parm)

void UPlayerInput::ChangeSnapView(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.ChangeSnapView");

	UPlayerInput_ChangeSnapView_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertMouse
// (Defined, Public)
// Parameters:
// struct FString                 Invert                         (OptionalParm, Parm, NeedCtorLink)

void UPlayerInput::InvertMouse(const struct FString& Invert)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertMouse");

	UPlayerInput_InvertMouse_Params params;
	params.Invert = Invert;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.UpdateSmoothing
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)

void UPlayerInput::UpdateSmoothing(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.UpdateSmoothing");

	UPlayerInput_UpdateSmoothing_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.UpdateAccel
// (Defined, Public)
// Parameters:
// float                          f                              (Parm)

void UPlayerInput::UpdateAccel(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.UpdateAccel");

	UPlayerInput_UpdateAccel_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.UpdateSensitivityForAim
// (Defined, Public)
// Parameters:
// bool                           bZoom                          (Parm)

void UPlayerInput::UpdateSensitivityForAim(bool bZoom)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.UpdateSensitivityForAim");

	UPlayerInput_UpdateSensitivityForAim_Params params;
	params.bZoom = bZoom;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.UpdateSensitivity
// (Defined, Public)
// Parameters:
// float                          f                              (Parm)
// bool                           bZooming                       (OptionalParm, Parm)

void UPlayerInput::UpdateSensitivity(float f, bool bZooming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.UpdateSensitivity");

	UPlayerInput_UpdateSensitivity_Params params;
	params.f = f;
	params.bZooming = bZooming;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SmoothMouse
// (Defined, Public)
// Parameters:
// float                          aMouse                         (Parm)
// float                          DeltaTime                      (Parm)
// unsigned char                  SampleCount                    (Parm, OutParm)
// int                            Index                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UPlayerInput::SmoothMouse(float aMouse, float DeltaTime, int Index, unsigned char* SampleCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SmoothMouse");

	UPlayerInput_SmoothMouse_Params params;
	params.aMouse = aMouse;
	params.DeltaTime = DeltaTime;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SampleCount != nullptr)
		*SampleCount = params.SampleCount;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.AccelerateMouse
// (Defined, Public)
// Parameters:
// float                          aMouse                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UPlayerInput::AccelerateMouse(float aMouse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.AccelerateMouse");

	UPlayerInput_AccelerateMouse_Params params;
	params.aMouse = aMouse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerInput.SetSmoothingStrength
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UPlayerInput::SetSmoothingStrength(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetSmoothingStrength");

	UPlayerInput_SetSmoothingStrength_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.SetSmoothingMode
// (Defined, Exec, Public)
// Parameters:
// unsigned char                  B                              (Parm)

void UPlayerInput::SetSmoothingMode(unsigned char B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.SetSmoothingMode");

	UPlayerInput_SetSmoothingMode_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.PlayerInput
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UPlayerInput::PlayerInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.PlayerInput");

	UPlayerInput_PlayerInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerInput.InvertLook
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlayerInput::InvertLook()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerInput.InvertLook");

	UPlayerInput_InvertLook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CheatManager.ShowAllPlayers
// (Defined, Exec, Public)

void UCheatManager::ShowAllPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ShowAllPlayers");

	UCheatManager_ShowAllPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ruler
// (Defined, Exec, Public)

void UCheatManager::ruler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ruler");

	UCheatManager_ruler_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.DisableNextObjective
// (Defined, Exec, Public)

void UCheatManager::DisableNextObjective()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.DisableNextObjective");

	UCheatManager_DisableNextObjective_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.WeakObjectives
// (Defined, Exec, Public)

void UCheatManager::WeakObjectives()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WeakObjectives");

	UCheatManager_WeakObjectives_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ReportCheat
// (Defined, Public)
// Parameters:
// struct FString                 cheat                          (OptionalParm, Parm, NeedCtorLink)

void UCheatManager::ReportCheat(const struct FString& cheat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReportCheat");

	UCheatManager_ReportCheat_Params params;
	params.cheat = cheat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.areCheatsEnabled
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UCheatManager::areCheatsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.areCheatsEnabled");

	UCheatManager_areCheatsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.CheatManager.EnableCheats
// (Defined, Exec, Public)

void UCheatManager::EnableCheats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EnableCheats");

	UCheatManager_EnableCheats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.WinMatch
// (Defined, Exec, Public)

void UCheatManager::WinMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WinMatch");

	UCheatManager_WinMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.JumpMatch
// (Defined, Exec, Public)
// Parameters:
// int                            ladderrung                     (Parm)

void UCheatManager::JumpMatch(int ladderrung)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.JumpMatch");

	UCheatManager_JumpMatch_Params params;
	params.ladderrung = ladderrung;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SkipMatch
// (Defined, Exec, Public)

void UCheatManager::SkipMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SkipMatch");

	UCheatManager_SkipMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllWeapons
// (Defined, Exec, Public)

void UCheatManager::AllWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllWeapons");

	UCheatManager_AllWeapons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Loaded
// (Defined, Exec, Public)

void UCheatManager::Loaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Loaded");

	UCheatManager_Loaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewClass
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)
// bool                           bQuiet                         (OptionalParm, Parm)
// bool                           bCheat                         (OptionalParm, Parm)

void UCheatManager::ViewClass(class UClass* aClass, bool bQuiet, bool bCheat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewClass");

	UCheatManager_ViewClass_Params params;
	params.aClass = aClass;
	params.bQuiet = bQuiet;
	params.bCheat = bCheat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewTurret
// (Defined, Exec, Public)

void UCheatManager::ViewTurret()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewTurret");

	UCheatManager_ViewTurret_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewNext
// (Defined, Public)
// Parameters:
// struct FName                   nameController                 (Parm)

void UCheatManager::ViewNext(const struct FName& nameController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewNext");

	UCheatManager_ViewNext_Params params;
	params.nameController = nameController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewBot
// (Defined, Exec, Public)

void UCheatManager::ViewBot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewBot");

	UCheatManager_ViewBot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VAI
// (Defined, Exec, Public)

void UCheatManager::VAI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VAI");

	UCheatManager_VAI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VHD
// (Defined, Exec, Public)

void UCheatManager::VHD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VHD");

	UCheatManager_VHD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.VH
// (Defined, Exec, Public)

void UCheatManager::VH()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.VH");

	UCheatManager_VH_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewFlag
// (Defined, Exec, Public)

void UCheatManager::ViewFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewFlag");

	UCheatManager_ViewFlag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewActor
// (Defined, Exec, Public)
// Parameters:
// struct FName                   ActorName                      (Parm)

void UCheatManager::ViewActor(const struct FName& ActorName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewActor");

	UCheatManager_ViewActor_Params params;
	params.ActorName = ActorName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewPlayer
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void UCheatManager::ViewPlayer(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewPlayer");

	UCheatManager_ViewPlayer_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ViewSelf
// (Defined, Exec, Public)
// Parameters:
// bool                           bQuiet                         (OptionalParm, Parm)

void UCheatManager::ViewSelf(bool bQuiet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ViewSelf");

	UCheatManager_ViewSelf_Params params;
	params.bQuiet = bQuiet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.RememberSpot
// (Defined, Exec, Public)

void UCheatManager::RememberSpot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.RememberSpot");

	UCheatManager_RememberSpot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.CheatView
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)
// bool                           bQuiet                         (OptionalParm, Parm)

void UCheatManager::CheatView(class UClass* aClass, bool bQuiet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.CheatView");

	UCheatManager_CheatView_Params params;
	params.aClass = aClass;
	params.bQuiet = bQuiet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ClearAllDebugLines
// (Defined, Exec, Public)

void UCheatManager::ClearAllDebugLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ClearAllDebugLines");

	UCheatManager_ClearAllDebugLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FreezeAll
// (Defined, Exec, Public)

void UCheatManager::FreezeAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeAll");

	UCheatManager_FreezeAll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.PlayersOnly
// (Defined, Exec, Public)

void UCheatManager::PlayersOnly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.PlayersOnly");

	UCheatManager_PlayersOnly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Summon
// (Defined, Exec, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)

void UCheatManager::Summon(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Summon");

	UCheatManager_Summon_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Avatar
// (Defined, Exec, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)

void UCheatManager::Avatar(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Avatar");

	UCheatManager_Avatar_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillPawns
// (Defined, Exec, Public)

void UCheatManager::KillPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillPawns");

	UCheatManager_KillPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetSpeed(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetSpeed");

	UCheatManager_SetSpeed_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetPriction
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetPriction(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetPriction");

	UCheatManager_SetPriction_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetGravity
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetGravity(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetGravity");

	UCheatManager_SetGravity_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetJumpLandDrop
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetJumpLandDrop(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetJumpLandDrop");

	UCheatManager_SetJumpLandDrop_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetJumpZ
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetJumpZ(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetJumpZ");

	UCheatManager_SetJumpZ_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.doSlomo
// (Defined, Public)
// Parameters:
// float                          t                              (Parm)

void UCheatManager::doSlomo(float t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.doSlomo");

	UCheatManager_doSlomo_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SloMo
// (Defined, Exec, Public)
// Parameters:
// float                          t                              (Parm)

void UCheatManager::SloMo(float t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SloMo");

	UCheatManager_SloMo_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.God
// (Defined, Exec, Public)

void UCheatManager::God()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.God");

	UCheatManager_God_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Phil
// (Defined, Exec, Public)

void UCheatManager::Phil()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Phil");

	UCheatManager_Phil_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Invisible
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void UCheatManager::Invisible(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Invisible");

	UCheatManager_Invisible_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.AllAmmo
// (Defined, Exec, Public)

void UCheatManager::AllAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.AllAmmo");

	UCheatManager_AllAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Ghost
// (Defined, Exec, Public)

void UCheatManager::Ghost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Ghost");

	UCheatManager_Ghost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Walk
// (Defined, Exec, Public)

void UCheatManager::Walk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Walk");

	UCheatManager_Walk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Fly
// (Defined, Exec, Public)

void UCheatManager::Fly()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Fly");

	UCheatManager_Fly_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Amphibious
// (Defined, Exec, Public)

void UCheatManager::Amphibious()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Amphibious");

	UCheatManager_Amphibious_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.CauseEvent
// (Defined, Exec, Public)
// Parameters:
// struct FName                   EventName                      (Parm)

void UCheatManager::CauseEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.CauseEvent");

	UCheatManager_CauseEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FreeCamera
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void UCheatManager::FreeCamera(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreeCamera");

	UCheatManager_FreeCamera_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.EndPath
// (Defined, Exec, Public)

void UCheatManager::EndPath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.EndPath");

	UCheatManager_EndPath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetCameraDist
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetCameraDist(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetCameraDist");

	UCheatManager_SetCameraDist_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.LockCamera
// (Defined, Exec, Public)

void UCheatManager::LockCamera()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LockCamera");

	UCheatManager_LockCamera_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ChangeSize
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::ChangeSize(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ChangeSize");

	UCheatManager_ChangeSize_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Teleport
// (Defined, Exec, Public)

void UCheatManager::Teleport()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Teleport");

	UCheatManager_Teleport_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.LogScriptedSequences
// (Defined, Exec, Public)

void UCheatManager::LogScriptedSequences()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.LogScriptedSequences");

	UCheatManager_LogScriptedSequences_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.KillViewedActor
// (Defined, Exec, Public)

void UCheatManager::KillViewedActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.KillViewedActor");

	UCheatManager_KillViewedActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetFogB
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetFogB(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetFogB");

	UCheatManager_SetFogB_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetFogG
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetFogG(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetFogG");

	UCheatManager_SetFogG_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetFogR
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetFogR(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetFogR");

	UCheatManager_SetFogR_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.SetFlash
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void UCheatManager::SetFlash(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.SetFlash");

	UCheatManager_SetFlash_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.WriteToLog
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Param                          (Parm, NeedCtorLink)

void UCheatManager::WriteToLog(const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.WriteToLog");

	UCheatManager_WriteToLog_Params params;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.FreezeFrame
// (Defined, Exec, Public)
// Parameters:
// float                          Delay                          (Parm)

void UCheatManager::FreezeFrame(float Delay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.FreezeFrame");

	UCheatManager_FreezeFrame_Params params;
	params.Delay = Delay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.Pause
// (Defined, Exec, Public)
// Parameters:
// bool                           bPause                         (Parm)

void UCheatManager::Pause(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.Pause");

	UCheatManager_Pause_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ListDynamicActors
// (Defined, Exec, Public)

void UCheatManager::ListDynamicActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ListDynamicActors");

	UCheatManager_ListDynamicActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.CheatManager.ReviewJumpSpots
// (Defined, Exec, Public)
// Parameters:
// struct FName                   TestLabel                      (Parm)

void UCheatManager::ReviewJumpSpots(const struct FName& TestLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.CheatManager.ReviewJumpSpots");

	UCheatManager_ReviewJumpSpots_Params params;
	params.TestLabel = TestLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawScreenText
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// TEnumAsByte<EDrawPivot>        Pivot                          (Parm)

void UCanvas::DrawScreenText(const struct FString& Text, float X, float Y, TEnumAsByte<EDrawPivot> Pivot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawScreenText");

	UCanvas_DrawScreenText_Params params;
	params.Text = Text;
	params.X = X;
	params.Y = Y;
	params.Pivot = Pivot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawBox
// (Final, Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          width                          (Parm)
// float                          Height                         (Parm)

void UCanvas::DrawBox(class UCanvas* Canvas, float width, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBox");

	UCanvas_DrawBox_Params params;
	params.Canvas = Canvas;
	params.width = width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawBracket
// (Final, Defined, Simulated, Public)
// Parameters:
// float                          width                          (Parm)
// float                          Height                         (Parm)
// float                          bracket_size                   (Parm)

void UCanvas::DrawBracket(float width, float Height, float bracket_size)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawBracket");

	UCanvas_DrawBracket_Params params;
	params.width = width;
	params.Height = Height;
	params.bracket_size = bracket_size;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawLine
// (Final, Defined, Public)
// Parameters:
// int                            direction                      (Parm)
// float                          Size                           (Parm)

void UCanvas::DrawLine(int direction, float Size)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawLine");

	UCanvas_DrawLine_Params params;
	params.direction = direction;
	params.Size = Size;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawHorizontal
// (Final, Defined, Public)
// Parameters:
// float                          Y                              (Parm)
// float                          width                          (Parm)

void UCanvas::DrawHorizontal(float Y, float width)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawHorizontal");

	UCanvas_DrawHorizontal_Params params;
	params.Y = Y;
	params.width = width;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawVertical
// (Final, Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Height                         (Parm)

void UCanvas::DrawVertical(float X, float Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawVertical");

	UCanvas_DrawVertical_Params params;
	params.X = X;
	params.Height = Height;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.MakeColorNoEmpty
// (Final, Defined, Static, Public)
// Parameters:
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// unsigned char                  A                              (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor UCanvas::STATIC_MakeColorNoEmpty(unsigned char R, unsigned char G, unsigned char B, unsigned char A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.MakeColorNoEmpty");

	UCanvas_MakeColorNoEmpty_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.MakeColor
// (Final, Defined, Static, Public)
// Parameters:
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// unsigned char                  A                              (OptionalParm, Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor UCanvas::STATIC_MakeColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.MakeColor");

	UCanvas_MakeColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.SetDrawColor
// (Final, Defined, Public)
// Parameters:
// unsigned char                  R                              (Parm)
// unsigned char                  G                              (Parm)
// unsigned char                  B                              (Parm)
// unsigned char                  A                              (OptionalParm, Parm)

void UCanvas::SetDrawColor(unsigned char R, unsigned char G, unsigned char B, unsigned char A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetDrawColor");

	UCanvas_SetDrawColor_Params params;
	params.R = R;
	params.G = G;
	params.B = B;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawRect
// (Final, Defined, Public)
// Parameters:
// class UTexture*                Tex                            (Parm)
// float                          RectX                          (Parm)
// float                          RectY                          (Parm)

void UCanvas::DrawRect(class UTexture* Tex, float RectX, float RectY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawRect");

	UCanvas_DrawRect_Params params;
	params.Tex = Tex;
	params.RectX = RectX;
	params.RectY = RectY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawIcon
// (Final, Defined, Public)
// Parameters:
// class UTexture*                Tex                            (Parm)
// float                          Scale                          (Parm)

void UCanvas::DrawIcon(class UTexture* Tex, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawIcon");

	UCanvas_DrawIcon_Params params;
	params.Tex = Tex;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawPattern
// (Final, Defined, Public)
// Parameters:
// class UMaterial*               Tex                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          Scale                          (Parm)

void UCanvas::DrawPattern(class UMaterial* Tex, float XL, float YL, float Scale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawPattern");

	UCanvas_DrawPattern_Params params;
	params.Tex = Tex;
	params.XL = XL;
	params.YL = YL;
	params.Scale = Scale;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetClip
// (Final, Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void UCanvas::SetClip(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetClip");

	UCanvas_SetClip_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetOrigin
// (Final, Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void UCanvas::SetOrigin(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetOrigin");

	UCanvas_SetOrigin_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetPos
// (Final, Defined, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)

void UCanvas::SetPos(float X, float Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetPos");

	UCanvas_SetPos_Params params;
	params.X = X;
	params.Y = Y;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Reset
// (Defined, Event, Public)

void UCanvas::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Reset");

	UCanvas_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineCache
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// unsigned char                  Justification                  (Parm)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// int                            fntSize                        (Parm)
// struct FColor                  shadowC                        (OptionalParm, Parm)
// int                            dropSX                         (OptionalParm, Parm)
// int                            dropSY                         (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UCanvas::BtrDrawTextJustifiedWithVolumeLineCache(const struct FString& Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, const struct FColor& shadowC, int dropSX, int dropSY, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineCache");

	UCanvas_BtrDrawTextJustifiedWithVolumeLineCache_Params params;
	params.Text = Text;
	params.Justification = Justification;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.fntSize = fntSize;
	params.shadowC = shadowC;
	params.dropSX = dropSX;
	params.dropSY = dropSY;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrDrawTextJustifiedWithVolumeLine
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// unsigned char                  Justification                  (Parm)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// int                            fntSize                        (Parm)
// struct FColor                  shadowC                        (OptionalParm, Parm)
// int                            dropSX                         (OptionalParm, Parm)
// int                            dropSY                         (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)

void UCanvas::BtrDrawTextJustifiedWithVolumeLine(const struct FString& Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, const struct FColor& shadowC, int dropSX, int dropSY, int Level, bool bUseD3DFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrDrawTextJustifiedWithVolumeLine");

	UCanvas_BtrDrawTextJustifiedWithVolumeLine_Params params;
	params.Text = Text;
	params.Justification = Justification;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.fntSize = fntSize;
	params.shadowC = shadowC;
	params.dropSX = dropSX;
	params.dropSY = dropSY;
	params.Level = Level;
	params.bUseD3DFont = bUseD3DFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineNoCache
// (Defined, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// unsigned char                  Justification                  (Parm)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// int                            fntSize                        (Parm)
// struct FColor                  shadowC                        (OptionalParm, Parm)
// int                            dropSX                         (OptionalParm, Parm)
// int                            dropSY                         (OptionalParm, Parm)
// int                            Level                          (OptionalParm, Parm)

void UCanvas::BtrDrawTextJustifiedWithVolumeLineNoCache(const struct FString& Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, const struct FColor& shadowC, int dropSX, int dropSY, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineNoCache");

	UCanvas_BtrDrawTextJustifiedWithVolumeLineNoCache_Params params;
	params.Text = Text;
	params.Justification = Justification;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.fntSize = fntSize;
	params.shadowC = shadowC;
	params.dropSX = dropSX;
	params.dropSY = dropSY;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Flush
// (Final, Native, Public)

void UCanvas::Flush()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Flush");

	UCanvas_Flush_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileExactWithRotation
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// struct FRotator                R                              (Parm)

void UCanvas::DrawTileExactWithRotation(class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FRotator& R)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileExactWithRotation");

	UCanvas_DrawTileExactWithRotation_Params params;
	params.mat = mat;
	params.X = X;
	params.Y = Y;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.R = R;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileExact
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          X                              (Parm)
// float                          Y                              (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTileExact(class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileExact");

	UCanvas_DrawTileExact_Params params;
	params.mat = mat;
	params.X = X;
	params.Y = Y;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrDrawTextJustifiedCache
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// unsigned char                  Justification                  (Parm)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// int                            FontSize                       (Parm)
// int                            Level                          (OptionalParm, Parm)

void UCanvas::BtrDrawTextJustifiedCache(const struct FString& Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int FontSize, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrDrawTextJustifiedCache");

	UCanvas_BtrDrawTextJustifiedCache_Params params;
	params.Text = Text;
	params.Justification = Justification;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.FontSize = FontSize;
	params.Level = Level;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileCache
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)
// int                            Level                          (OptionalParm, Parm)

void UCanvas::DrawTileCache(class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL, int Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileCache");

	UCanvas_DrawTileCache_Params params;
	params.mat = mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;
	params.Level = Level;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.EndCache
// (Final, Native, Public)

void UCanvas::EndCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.EndCache");

	UCanvas_EndCache_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BeginCache
// (Final, Native, Public)

void UCanvas::BeginCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BeginCache");

	UCanvas_BeginCache_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrTextSizeOLD
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// int                            FontSize                       (Parm)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::BtrTextSizeOLD(const struct FString& Text, int FontSize, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrTextSizeOLD");

	UCanvas_BtrTextSizeOLD_Params params;
	params.Text = Text;
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.BtrTextSizeLH
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// int                            FontSize                       (Parm)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::BtrTextSizeLH(const struct FString& Text, int FontSize, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrTextSizeLH");

	UCanvas_BtrTextSizeLH_Params params;
	params.Text = Text;
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.BtrTextSize
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// int                            FontSize                       (Parm)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::BtrTextSize(const struct FString& Text, int FontSize, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrTextSize");

	UCanvas_BtrTextSize_Params params;
	params.Text = Text;
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.BtrDrawTextHK_UseModulateColor
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// int                            FontSize                       (Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)
// unsigned char                  GCLevel                        (OptionalParm, Parm)
// unsigned char                  PresetIndex                    (OptionalParm, Parm)
// bool                           bUseModulateColor              (OptionalParm, Parm)
// struct FPlane                  mColor                         (OptionalParm, Parm)

void UCanvas::BtrDrawTextHK_UseModulateColor(const struct FString& Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, unsigned char GCLevel, unsigned char PresetIndex, bool bUseModulateColor, const struct FPlane& mColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrDrawTextHK_UseModulateColor");

	UCanvas_BtrDrawTextHK_UseModulateColor_Params params;
	params.Text = Text;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.FontSize = FontSize;
	params.bUseD3DFont = bUseD3DFont;
	params.GCLevel = GCLevel;
	params.PresetIndex = PresetIndex;
	params.bUseModulateColor = bUseModulateColor;
	params.mColor = mColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrDrawTextHK
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// int                            FontSize                       (Parm)
// bool                           bUseD3DFont                    (OptionalParm, Parm)
// unsigned char                  GCLevel                        (OptionalParm, Parm)
// unsigned char                  PresetIndex                    (OptionalParm, Parm)

void UCanvas::BtrDrawTextHK(const struct FString& Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, unsigned char GCLevel, unsigned char PresetIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrDrawTextHK");

	UCanvas_BtrDrawTextHK_Params params;
	params.Text = Text;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.FontSize = FontSize;
	params.bUseD3DFont = bUseD3DFont;
	params.GCLevel = GCLevel;
	params.PresetIndex = PresetIndex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrFontTextureGC
// (Final, Native, Public)

void UCanvas::BtrFontTextureGC()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrFontTextureGC");

	UCanvas_BtrFontTextureGC_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrFontReset
// (Final, Native, Public)

void UCanvas::BtrFontReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrFontReset");

	UCanvas_BtrFontReset_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrToggleUseD3DFont
// (Final, Native, Public)

void UCanvas::BtrToggleUseD3DFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrToggleUseD3DFont");

	UCanvas_BtrToggleUseD3DFont_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrSaveTexture
// (Final, Native, Public)

void UCanvas::BtrSaveTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrSaveTexture");

	UCanvas_BtrSaveTexture_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.BtrDrawTextJustified
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// unsigned char                  Justification                  (Parm)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// int                            FontSize                       (Parm)
// bool                           bCache                         (OptionalParm, Parm)

void UCanvas::BtrDrawTextJustified(const struct FString& Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int FontSize, bool bCache)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.BtrDrawTextJustified");

	UCanvas_BtrDrawTextJustified_Params params;
	params.Text = Text;
	params.Justification = Justification;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.FontSize = FontSize;
	params.bCache = bCache;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawActorClipped
// (Final, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           Wireframe                      (Parm)
// float                          Left                           (Parm)
// float                          Top                            (Parm)
// float                          width                          (Parm)
// float                          Height                         (Parm)
// bool                           ClearZ                         (OptionalParm, Parm)
// float                          DisplayFOV                     (OptionalParm, Parm)

void UCanvas::DrawActorClipped(class AActor* A, bool Wireframe, float Left, float Top, float width, float Height, bool ClearZ, float DisplayFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawActorClipped");

	UCanvas_DrawActorClipped_Params params;
	params.A = A;
	params.Wireframe = Wireframe;
	params.Left = Left;
	params.Top = Top;
	params.width = width;
	params.Height = Height;
	params.ClearZ = ClearZ;
	params.DisplayFOV = DisplayFOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTextJustified
// (Final, Native, Public)
// Parameters:
// struct FString                 String                         (Parm, CoerceParm, NeedCtorLink)
// unsigned char                  Justification                  (Parm)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)

void UCanvas::DrawTextJustified(const struct FString& String, unsigned char Justification, float X1, float Y1, float X2, float Y2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextJustified");

	UCanvas_DrawTextJustified_Params params;
	params.String = String;
	params.Justification = Justification;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileScaled
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          XScale                         (Parm)
// float                          YScale                         (Parm)

void UCanvas::DrawTileScaled(class UMaterial* mat, float XScale, float YScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileScaled");

	UCanvas_DrawTileScaled_Params params;
	params.mat = mat;
	params.XScale = XScale;
	params.YScale = YScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileJustified
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// unsigned char                  Justification                  (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)

void UCanvas::DrawTileJustified(class UMaterial* mat, unsigned char Justification, float XL, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileJustified");

	UCanvas_DrawTileJustified_Params params;
	params.mat = mat;
	params.Justification = Justification;
	params.XL = XL;
	params.YL = YL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileCroppedStretched
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTileCroppedStretched(class UMaterial* mat, float XL, float YL, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileCroppedStretched");

	UCanvas_DrawTileCroppedStretched_Params params;
	params.mat = mat;
	params.XL = XL;
	params.YL = YL;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileStretched
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)

void UCanvas::DrawTileStretched(class UMaterial* mat, float XL, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileStretched");

	UCanvas_DrawTileStretched_Params params;
	params.mat = mat;
	params.XL = XL;
	params.YL = YL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTilePartialStretched
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)

void UCanvas::DrawTilePartialStretched(class UMaterial* mat, float XL, float YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTilePartialStretched");

	UCanvas_DrawTilePartialStretched_Params params;
	params.mat = mat;
	params.XL = XL;
	params.YL = YL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.WrapText
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 Text                           (Parm, OutParm, NeedCtorLink)
// struct FString                 Line                           (Parm, OutParm, NeedCtorLink)
// float                          dx                             (Parm)
// class UFont*                   f                              (Parm)
// float                          FontScaleX                     (Parm)

void UCanvas::STATIC_WrapText(float dx, class UFont* f, float FontScaleX, struct FString* Text, struct FString* Line)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.WrapText");

	UCanvas_WrapText_Params params;
	params.dx = dx;
	params.f = f;
	params.FontScaleX = FontScaleX;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Text != nullptr)
		*Text = params.Text;
	if (Line != nullptr)
		*Line = params.Line;
}


// Function Engine.Canvas.WrapStringToArray
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)
// TArray<struct FString>         OutArray                       (Parm, OutParm, NeedCtorLink)
// float                          dx                             (Parm)
// struct FString                 EOL                            (OptionalParm, Parm, NeedCtorLink)

void UCanvas::WrapStringToArray(const struct FString& Text, float dx, const struct FString& EOL, TArray<struct FString>* OutArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.WrapStringToArray");

	UCanvas_WrapStringToArray_Params params;
	params.Text = Text;
	params.dx = dx;
	params.EOL = EOL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutArray != nullptr)
		*OutArray = params.OutArray;
}


// Function Engine.Canvas.Clear
// (Final, Native, Public)
// Parameters:
// bool                           ClearRGB                       (OptionalParm, Parm)
// bool                           ClearZ                         (OptionalParm, Parm)

void UCanvas::Clear(bool ClearRGB, bool ClearZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Clear");

	UCanvas_Clear_Params params;
	params.ClearRGB = ClearRGB;
	params.ClearZ = ClearZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawScreenActorWithViewport
// (Final, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// int                            X1                             (Parm)
// int                            Y1                             (Parm)
// int                            X2                             (Parm)
// int                            Y2                             (Parm)
// float                          AspectRatio                    (Parm)
// float                          FOV                            (OptionalParm, Parm)
// bool                           Wireframe                      (OptionalParm, Parm)
// bool                           ClearZ                         (OptionalParm, Parm)

void UCanvas::DrawScreenActorWithViewport(class AActor* A, int X1, int Y1, int X2, int Y2, float AspectRatio, float FOV, bool Wireframe, bool ClearZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawScreenActorWithViewport");

	UCanvas_DrawScreenActorWithViewport_Params params;
	params.A = A;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.AspectRatio = AspectRatio;
	params.FOV = FOV;
	params.Wireframe = Wireframe;
	params.ClearZ = ClearZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawScreenActor
// (Final, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// float                          FOV                            (OptionalParm, Parm)
// bool                           Wireframe                      (OptionalParm, Parm)
// bool                           ClearZ                         (OptionalParm, Parm)

void UCanvas::DrawScreenActor(class AActor* A, float FOV, bool Wireframe, bool ClearZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawScreenActor");

	UCanvas_DrawScreenActor_Params params;
	params.A = A;
	params.FOV = FOV;
	params.Wireframe = Wireframe;
	params.ClearZ = ClearZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetScreenProjector
// (Final, Native, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FVector                 Position                       (Parm)
// struct FColor                  Color                          (Parm)
// float                          Radius                         (Parm)
// class UTexture*                Tex                            (Parm)

void UCanvas::SetScreenProjector(int Index, const struct FVector& Position, const struct FColor& Color, float Radius, class UTexture* Tex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetScreenProjector");

	UCanvas_SetScreenProjector_Params params;
	params.Index = Index;
	params.Position = Position;
	params.Color = Color;
	params.Radius = Radius;
	params.Tex = Tex;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetScreenLight
// (Final, Native, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FVector                 Position                       (Parm)
// struct FColor                  LightColor                     (Parm)
// float                          Radius                         (Parm)

void UCanvas::SetScreenLight(int Index, const struct FVector& Position, const struct FColor& LightColor, float Radius)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetScreenLight");

	UCanvas_SetScreenLight_Params params;
	params.Index = Index;
	params.Position = Position;
	params.LightColor = LightColor;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetFontScale
// (Final, Native, Public)
// Parameters:
// float                          fX                             (Parm)
// float                          fY                             (Parm)

void UCanvas::SetFontScale(float fX, float fY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetFontScale");

	UCanvas_SetFontScale_Params params;
	params.fX = fX;
	params.fY = fY;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Draw2DPoint
// (Final, Native, Public)
// Parameters:
// float                          X                              (Parm)
// float                          Y                              (Parm)
// struct FColor                  PointColor                     (Parm)

void UCanvas::Draw2DPoint(float X, float Y, const struct FColor& PointColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Draw2DPoint");

	UCanvas_Draw2DPoint_Params params;
	params.X = X;
	params.Y = Y;
	params.PointColor = PointColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.Draw2DLine
// (Final, Native, Public)
// Parameters:
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// struct FColor                  LineColor                      (Parm)

void UCanvas::Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.Draw2DLine");

	UCanvas_Draw2DLine_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.GetClientHeightRatio
// (Final, Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UCanvas::GetClientHeightRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.GetClientHeightRatio");

	UCanvas_GetClientHeightRatio_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.SetCameraRotation
// (Final, Native, Public)
// Parameters:
// struct FRotator                CameraRotation                 (Parm)

void UCanvas::SetCameraRotation(const struct FRotator& CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetCameraRotation");

	UCanvas_SetCameraRotation_Params params;
	params.CameraRotation = CameraRotation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.SetCameraLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 CameraLocation                 (Parm)

void UCanvas::SetCameraLocation(const struct FVector& CameraLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.SetCameraLocation");

	UCanvas_SetCameraLocation_Params params;
	params.CameraLocation = CameraLocation;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.GetCameraLocation
// (Final, Native, Public)
// Parameters:
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)

void UCanvas::GetCameraLocation(struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.GetCameraLocation");

	UCanvas_GetCameraLocation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
}


// Function Engine.Canvas.WorldToScreen
// (Final, Native, Public)
// Parameters:
// struct FVector                 WorldLoc                       (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UCanvas::WorldToScreen(const struct FVector& WorldLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.WorldToScreen");

	UCanvas_WorldToScreen_Params params;
	params.WorldLoc = WorldLoc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Canvas.DrawPortal
// (Final, Native, Public)
// Parameters:
// int                            X                              (Parm)
// int                            Y                              (Parm)
// int                            width                          (Parm)
// int                            Height                         (Parm)
// class AActor*                  CamActor                       (Parm)
// struct FVector                 CamLocation                    (Parm)
// struct FRotator                CamRotation                    (Parm)
// int                            FOV                            (OptionalParm, Parm)
// bool                           ClearZ                         (OptionalParm, Parm)

void UCanvas::DrawPortal(int X, int Y, int width, int Height, class AActor* CamActor, const struct FVector& CamLocation, const struct FRotator& CamRotation, int FOV, bool ClearZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawPortal");

	UCanvas_DrawPortal_Params params;
	params.X = X;
	params.Y = Y;
	params.width = width;
	params.Height = Height;
	params.CamActor = CamActor;
	params.CamLocation = CamLocation;
	params.CamRotation = CamRotation;
	params.FOV = FOV;
	params.ClearZ = ClearZ;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.TextSize
// (Final, Native, Public)
// Parameters:
// struct FString                 String                         (Parm, CoerceParm, NeedCtorLink)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::TextSize(const struct FString& String, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.TextSize");

	UCanvas_TextSize_Params params;
	params.String = String;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.Canvas.DrawTextClipped
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// bool                           bCheckHotKey                   (OptionalParm, Parm)

void UCanvas::DrawTextClipped(const struct FString& Text, bool bCheckHotKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTextClipped");

	UCanvas_DrawTextClipped_Params params;
	params.Text = Text;
	params.bCheckHotKey = bCheckHotKey;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTileClipped
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTileClipped(class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTileClipped");

	UCanvas_DrawTileClipped_Params params;
	params.mat = mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawActor
// (Final, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           Wireframe                      (Parm)
// bool                           ClearZ                         (OptionalParm, Parm)
// float                          DisplayFOV                     (OptionalParm, Parm)

void UCanvas::DrawActor(class AActor* A, bool Wireframe, bool ClearZ, float DisplayFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawActor");

	UCanvas_DrawActor_Params params;
	params.A = A;
	params.Wireframe = Wireframe;
	params.ClearZ = ClearZ;
	params.DisplayFOV = DisplayFOV;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawTile
// (Final, Native, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)
// float                          XL                             (Parm)
// float                          YL                             (Parm)
// float                          U                              (Parm)
// float                          V                              (Parm)
// float                          UL                             (Parm)
// float                          VL                             (Parm)

void UCanvas::DrawTile(class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawTile");

	UCanvas_DrawTile_Params params;
	params.mat = mat;
	params.XL = XL;
	params.YL = YL;
	params.U = U;
	params.V = V;
	params.UL = UL;
	params.VL = VL;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.DrawText
// (Final, Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, CoerceParm, NeedCtorLink)
// bool                           cR                             (OptionalParm, Parm)

void UCanvas::DrawText(const struct FString& Text, bool cR)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.DrawText");

	UCanvas_DrawText_Params params;
	params.Text = Text;
	params.cR = cR;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Canvas.StrLen
// (Final, Native, Public)
// Parameters:
// struct FString                 String                         (Parm, CoerceParm, NeedCtorLink)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)

void UCanvas::StrLen(const struct FString& String, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Canvas.StrLen");

	UCanvas_StrLen_Params params;
	params.String = String;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.BTPingCheckerLinker.ReceivedPingAck
// (Defined, Event, Public)
// Parameters:
// TArray<struct FString>         fromAddr                       (Parm, NeedCtorLink)
// TArray<int>                    ElapsedMiliSec                 (Parm, NeedCtorLink)

void UBTPingCheckerLinker::ReceivedPingAck(TArray<struct FString> fromAddr, TArray<int> ElapsedMiliSec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTPingCheckerLinker.ReceivedPingAck");

	UBTPingCheckerLinker_ReceivedPingAck_Params params;
	params.fromAddr = fromAddr;
	params.ElapsedMiliSec = ElapsedMiliSec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BTPingCheckerLinker.SendText
// (Native, Public)
// Parameters:
// struct FString                 strDest_IP                     (Parm, NeedCtorLink)
// int                            nDest_Port                     (Parm)
// struct FString                 strTextData                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBTPingCheckerLinker::SendText(const struct FString& strDest_IP, int nDest_Port, const struct FString& strTextData)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTPingCheckerLinker.SendText");

	UBTPingCheckerLinker_SendText_Params params;
	params.strDest_IP = strDest_IP;
	params.nDest_Port = nDest_Port;
	params.strTextData = strTextData;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BTPingCheckerLinker.SendPing
// (Native, Public)
// Parameters:
// struct FString                 toAddr                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UBTPingCheckerLinker::SendPing(const struct FString& toAddr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BTPingCheckerLinker.SendPing");

	UBTPingCheckerLinker_SendPing_Params params;
	params.toAddr = toAddr;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Volume.DisplayDebug
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AVolume::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.DisplayDebug");

	AVolume_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.Volume.PostBeginPlay
// (Defined, Public)

void AVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.PostBeginPlay");

	AVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Volume.Encompasses
// (Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVolume::Encompasses(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Volume.Encompasses");

	AVolume_Encompasses_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.PlayerToucherDied
// (Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ANavigationPoint::PlayerToucherDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.PlayerToucherDied");

	ANavigationPoint_PlayerToucherDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.MoverClosed
// (Public)

void ANavigationPoint::MoverClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.MoverClosed");

	ANavigationPoint_MoverClosed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.MoverOpened
// (Public)

void ANavigationPoint::MoverOpened()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.MoverOpened");

	ANavigationPoint_MoverOpened_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.ProceedWithMove");

	ANavigationPoint_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SuggestMovePreparation");

	ANavigationPoint_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.DetourWeight
// (Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ANavigationPoint::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.DetourWeight");

	ANavigationPoint_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.Accept
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Incoming                       (Parm)
// class AActor*                  Source                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ANavigationPoint::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.Accept");

	ANavigationPoint_Accept_Params params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SpecialCost
// (Event, Public)
// Parameters:
// class APawn*                   Seeker                         (Parm)
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ANavigationPoint::SpecialCost(class APawn* Seeker, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SpecialCost");

	ANavigationPoint_SpecialCost_Params params;
	params.Seeker = Seeker;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.NavigationPoint.SetBaseVisibility
// (Defined, Public)
// Parameters:
// int                            BaseNum                        (Parm)

void ANavigationPoint::SetBaseVisibility(int BaseNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SetBaseVisibility");

	ANavigationPoint_SetBaseVisibility_Params params;
	params.BaseNum = BaseNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.SetBaseDistance
// (Final, Native, Public)
// Parameters:
// int                            BaseNum                        (Parm)

void ANavigationPoint::SetBaseDistance(int BaseNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.SetBaseDistance");

	ANavigationPoint_SetBaseDistance_Params params;
	params.BaseNum = BaseNum;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.NavigationPoint.PostBeginPlay
// (Defined, Public)

void ANavigationPoint::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.NavigationPoint.PostBeginPlay");

	ANavigationPoint_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wArrangeTurret.ForceSpawnVehicle
// (Public)

void AwArrangeTurret::ForceSpawnVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wArrangeTurret.ForceSpawnVehicle");

	AwArrangeTurret_ForceSpawnVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wArrangeTurret.ForceDestroyVehicle
// (Public)

void AwArrangeTurret::ForceDestroyVehicle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wArrangeTurret.ForceDestroyVehicle");

	AwArrangeTurret_ForceDestroyVehicle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wArrangeTurret.Trigger
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AwArrangeTurret::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wArrangeTurret.Trigger");

	AwArrangeTurret_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wArrangeTurret.VehicleUnPossessed
// (Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void AwArrangeTurret::VehicleUnPossessed(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wArrangeTurret.VehicleUnPossessed");

	AwArrangeTurret_VehicleUnPossessed_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wArrangeTurret.VehiclePossessed
// (Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void AwArrangeTurret::VehiclePossessed(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wArrangeTurret.VehiclePossessed");

	AwArrangeTurret_VehiclePossessed_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wArrangeTurret.VehicleDestroyed
// (Defined, Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void AwArrangeTurret::VehicleDestroyed(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wArrangeTurret.VehicleDestroyed");

	AwArrangeTurret_VehicleDestroyed_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wArrangeTurret.PreBeginPlay
// (Defined, Public)

void AwArrangeTurret::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wArrangeTurret.PreBeginPlay");

	AwArrangeTurret_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnnouncerVoice.PrecacheList
// (Defined, Static, Public)

void AAnnouncerVoice::STATIC_PrecacheList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerVoice.PrecacheList");

	AAnnouncerVoice_PrecacheList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnnouncerVoice.PrecacheAnnouncements
// (Defined, Public)
// Parameters:
// bool                           bRewardSounds                  (Parm)

void AAnnouncerVoice::PrecacheAnnouncements(bool bRewardSounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerVoice.PrecacheAnnouncements");

	AAnnouncerVoice_PrecacheAnnouncements_Params params;
	params.bRewardSounds = bRewardSounds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnnouncerVoice.PrecacheFallbackPackage
// (Defined, Static, Public)
// Parameters:
// struct FString                 Package                        (Parm, NeedCtorLink)
// struct FString                 AName                          (Parm, NeedCtorLink)
// struct FString                 strFullName                    (OptionalParm, Parm, NeedCtorLink)
// class USound*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class USound* AAnnouncerVoice::STATIC_PrecacheFallbackPackage(const struct FString& Package, const struct FString& AName, const struct FString& strFullName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerVoice.PrecacheFallbackPackage");

	AAnnouncerVoice_PrecacheFallbackPackage_Params params;
	params.Package = Package;
	params.AName = AName;
	params.strFullName = strFullName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerVoice.ResetPrecacheSound
// (Defined, Static, Public)

void AAnnouncerVoice::STATIC_ResetPrecacheSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerVoice.ResetPrecacheSound");

	AAnnouncerVoice_ResetPrecacheSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnnouncerVoice.GetSound
// (Defined, Event, Public)
// Parameters:
// struct FString                 AName                          (Parm, NeedCtorLink)
// bool                           isWomanVoice                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AAnnouncerVoice::GetSound(const struct FString& AName, bool isWomanVoice)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerVoice.GetSound");

	AAnnouncerVoice_GetSound_Params params;
	params.AName = AName;
	params.isWomanVoice = isWomanVoice;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HoverPathNode.SpecialCost
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AHoverPathNode::SpecialCost(class APawn* Other, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HoverPathNode.SpecialCost");

	AHoverPathNode_SpecialCost_Params params;
	params.Other = Other;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.CanChangeTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// int                            NewTeam                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameProfile::CanChangeTeam(class AController* Other, int NewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.CanChangeTeam");

	UGameProfile_CanChangeTeam_Params params;
	params.Other = Other;
	params.NewTeam = NewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.ReportCheat
// (Public)
// Parameters:
// class APlayerController*       Cheater                        (Parm)
// struct FString                 cheat                          (Parm, NeedCtorLink)

void UGameProfile::ReportCheat(class APlayerController* Cheater, const struct FString& cheat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.ReportCheat");

	UGameProfile_ReportCheat_Params params;
	params.Cheater = Cheater;
	params.cheat = cheat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.ClearTeammates
// (Defined, Public)

void UGameProfile::ClearTeammates()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.ClearTeammates");

	UGameProfile_ClearTeammates_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.ReleaseTeammate
// (Defined, Public)
// Parameters:
// struct FString                 botname                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameProfile::ReleaseTeammate(const struct FString& botname)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.ReleaseTeammate");

	UGameProfile_ReleaseTeammate_Params params;
	params.botname = botname;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.AddTeammate
// (Defined, Public)
// Parameters:
// struct FString                 botname                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UGameProfile::AddTeammate(const struct FString& botname)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.AddTeammate");

	UGameProfile_AddTeammate_Params params;
	params.botname = botname;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.SetLineup
// (Defined, Public)
// Parameters:
// int                            lineuppos                      (Parm)
// int                            teampos                        (Parm)

void UGameProfile::SetLineup(int lineuppos, int teampos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.SetLineup");

	UGameProfile_SetLineup_Params params;
	params.lineuppos = lineuppos;
	params.teampos = teampos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.SetPosition
// (Defined, Public)
// Parameters:
// int                            lineupnum                      (Parm)
// struct FString                 posn                           (Parm, NeedCtorLink)

void UGameProfile::SetPosition(int lineupnum, const struct FString& posn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.SetPosition");

	UGameProfile_SetPosition_Params params;
	params.lineupnum = lineupnum;
	params.posn = posn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.GetPositionDescription
// (Defined, Public)
// Parameters:
// int                            PlayerNum                      (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameProfile::GetPositionDescription(int PlayerNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.GetPositionDescription");

	UGameProfile_GetPositionDescription_Params params;
	params.PlayerNum = PlayerNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.EnumPositionDescription
// (Defined, Static, Public)
// Parameters:
// struct FString                 posnval                        (Parm, NeedCtorLink)
// TEnumAsByte<EPlayerPos>        ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EPlayerPos> UGameProfile::STATIC_EnumPositionDescription(const struct FString& posnval)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.EnumPositionDescription");

	UGameProfile_EnumPositionDescription_Params params;
	params.posnval = posnval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.TextPositionDescription
// (Defined, Static, Public)
// Parameters:
// int                            posnval                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameProfile::STATIC_TextPositionDescription(int posnval)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.TextPositionDescription");

	UGameProfile_TextPositionDescription_Params params;
	params.posnval = posnval;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.GetNumTeammatesForMatch
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameProfile::GetNumTeammatesForMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.GetNumTeammatesForMatch");

	UGameProfile_GetNumTeammatesForMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.GetNumPositions
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameProfile::STATIC_GetNumPositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.GetNumPositions");

	UGameProfile_GetNumPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.GetMatchDescription
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UGameProfile::GetMatchDescription()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.GetMatchDescription");

	UGameProfile_GetMatchDescription_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.ContinueSinglePlayerGame
// (Defined, Public)
// Parameters:
// class ALevelInfo*              Level                          (Parm)
// bool                           bReplace                       (OptionalParm, Parm)

void UGameProfile::ContinueSinglePlayerGame(class ALevelInfo* Level, bool bReplace)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.ContinueSinglePlayerGame");

	UGameProfile_ContinueSinglePlayerGame_Params params;
	params.Level = Level;
	params.bReplace = bReplace;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.FindFirstUnfinishedLadder
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UGameProfile::FindFirstUnfinishedLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.FindFirstUnfinishedLadder");

	UGameProfile_FindFirstUnfinishedLadder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.StartNewMatch
// (Defined, Public)
// Parameters:
// int                            PickedLadder                   (Parm)
// class ALevelInfo*              CurrentLevel                   (Parm)

void UGameProfile::StartNewMatch(int PickedLadder, class ALevelInfo* CurrentLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.StartNewMatch");

	UGameProfile_StartNewMatch_Params params;
	params.PickedLadder = PickedLadder;
	params.CurrentLevel = CurrentLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.RegisterGame
// (Defined, Public)
// Parameters:
// class AGameInfo*               currentGame                    (Parm)
// class APlayerReplicationInfo*  PRI                            (Parm)

void UGameProfile::RegisterGame(class AGameInfo* currentGame, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.RegisterGame");

	UGameProfile_RegisterGame_Params params;
	params.currentGame = currentGame;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.GetMatchInfo
// (Defined, Public)
// Parameters:
// int                            Ladder                         (Parm)
// int                            rung                           (Parm)
// class UMatchInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UMatchInfo* UGameProfile::GetMatchInfo(int Ladder, int rung)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.GetMatchInfo");

	UGameProfile_GetMatchInfo_Params params;
	params.Ladder = Ladder;
	params.rung = rung;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameProfile.CheatJumpMatch
// (Defined, Public)
// Parameters:
// class AGameInfo*               currentGame                    (Parm)
// int                            Param                          (Parm)

void UGameProfile::CheatJumpMatch(class AGameInfo* currentGame, int Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.CheatJumpMatch");

	UGameProfile_CheatJumpMatch_Params params;
	params.currentGame = currentGame;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.CheatSkipMatch
// (Defined, Public)
// Parameters:
// class AGameInfo*               currentGame                    (Parm)

void UGameProfile::CheatSkipMatch(class AGameInfo* currentGame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.CheatSkipMatch");

	UGameProfile_CheatSkipMatch_Params params;
	params.currentGame = currentGame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameProfile.Initialize
// (Defined, Public)
// Parameters:
// class AGameInfo*               currentGame                    (Parm)
// struct FString                 pn                             (Parm, NeedCtorLink)

void UGameProfile::Initialize(class AGameInfo* currentGame, const struct FString& pn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameProfile.Initialize");

	UGameProfile_Initialize_Params params;
	params.currentGame = currentGame;
	params.pn = pn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetNuclearReactor
// (Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AGameInfo::GetNuclearReactor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNuclearReactor");

	AGameInfo_GetNuclearReactor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetRepairNuclear
// (Public)
// Parameters:
// int                            iValue                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SetRepairNuclear(int iValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetRepairNuclear");

	AGameInfo_SetRepairNuclear_Params params;
	params.iValue = iValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsEnableRepair
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsEnableRepair()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsEnableRepair");

	AGameInfo_IsEnableRepair_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetAddHealthRatio
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::GetAddHealthRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetAddHealthRatio");

	AGameInfo_GetAddHealthRatio_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetAddDamageRatio
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::GetAddDamageRatio()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetAddDamageRatio");

	AGameInfo_GetAddDamageRatio_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetItemBuyPrice
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetItemBuyPrice(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetItemBuyPrice");

	AGameInfo_GetItemBuyPrice_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetItemBuyID
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetItemBuyID(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetItemBuyID");

	AGameInfo_GetItemBuyID_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PermitWeaponChangeInSpecialMode
// (Defined, Public)

void AGameInfo::PermitWeaponChangeInSpecialMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PermitWeaponChangeInSpecialMode");

	AGameInfo_PermitWeaponChangeInSpecialMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.rfAckGetBotID
// (Defined, Public)
// Parameters:
// int                            Result                         (Parm)
// unsigned char                  RequestedAFCount               (Parm)
// unsigned char                  RequestedRSACount              (Parm)
// TArray<int>                    AFBotID                        (Parm, NeedCtorLink)
// TArray<int>                    RSABotID                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::rfAckGetBotID(int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, TArray<int> AFBotID, TArray<int> RSABotID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.rfAckGetBotID");

	AGameInfo_rfAckGetBotID_Params params;
	params.Result = Result;
	params.RequestedAFCount = RequestedAFCount;
	params.RequestedRSACount = RequestedRSACount;
	params.AFBotID = AFBotID;
	params.RSABotID = RSABotID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNearFlag
// (Defined, Event, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AGameInfo::GetNearFlag(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNearFlag");

	AGameInfo_GetNearFlag_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetGameSpecificPurposes
// (Defined, Public)
// Parameters:
// class AController*             Owner                          (Parm)
// TArray<class UObject*>         purposes                       (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetGameSpecificPurposes(class AController* Owner, TArray<class UObject*>* purposes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetGameSpecificPurposes");

	AGameInfo_GetGameSpecificPurposes_Params params;
	params.Owner = Owner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (purposes != nullptr)
		*purposes = params.purposes;
}


// Function Engine.GameInfo.GetGameSpecificActions
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// class UwNPCActions*            npcActions                     (Parm)
// TArray<class UObject*>         Actions                        (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetGameSpecificActions(class AController* C, class UwNPCActions* npcActions, TArray<class UObject*>* Actions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetGameSpecificActions");

	AGameInfo_GetGameSpecificActions_Params params;
	params.C = C;
	params.npcActions = npcActions;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actions != nullptr)
		*Actions = params.Actions;
}


// Function Engine.GameInfo.GetAttackBuff
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::GetAttackBuff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetAttackBuff");

	AGameInfo_GetAttackBuff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetDeathPosArray
// (Defined, Public)
// Parameters:
// TArray<struct FVector>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FVector> AGameInfo::GetDeathPosArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDeathPosArray");

	AGameInfo_GetDeathPosArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PushDeathPos
// (Defined, Public)
// Parameters:
// struct FVector                 vPos                           (Parm)

void AGameInfo::PushDeathPos(const struct FVector& vPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PushDeathPos");

	AGameInfo_PushDeathPos_Params params;
	params.vPos = vPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Kill
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)

void AGameInfo::Kill(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Kill");

	AGameInfo_Kill_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetFlagsInfo
// (Defined, Public)
// Parameters:
// int                            outNumFlags                    (Parm, OutParm)
// int                            outNumCapturedFlagsByTeam1     (Parm, OutParm)
// int                            outNumCapturedFlagsByTeam2     (Parm, OutParm)

void AGameInfo::GetFlagsInfo(int* outNumFlags, int* outNumCapturedFlagsByTeam1, int* outNumCapturedFlagsByTeam2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetFlagsInfo");

	AGameInfo_GetFlagsInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (outNumFlags != nullptr)
		*outNumFlags = params.outNumFlags;
	if (outNumCapturedFlagsByTeam1 != nullptr)
		*outNumCapturedFlagsByTeam1 = params.outNumCapturedFlagsByTeam1;
	if (outNumCapturedFlagsByTeam2 != nullptr)
		*outNumCapturedFlagsByTeam2 = params.outNumCapturedFlagsByTeam2;
}


// Function Engine.GameInfo.GetSupplyRandom
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::GetSupplyRandom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSupplyRandom");

	AGameInfo_GetSupplyRandom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CanPawnTakeDamage
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanPawnTakeDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanPawnTakeDamage");

	AGameInfo_CanPawnTakeDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendRoundStartTime
// (Defined, Public)
// Parameters:
// TArray<int>                    aPlayerIDs                     (Parm, NeedCtorLink)

void AGameInfo::SendRoundStartTime(TArray<int> aPlayerIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendRoundStartTime");

	AGameInfo_SendRoundStartTime_Params params;
	params.aPlayerIDs = aPlayerIDs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SendGameStartTime
// (Defined, Public)
// Parameters:
// TArray<int>                    aPlayerIDs                     (Parm, NeedCtorLink)

void AGameInfo::SendGameStartTime(TArray<int> aPlayerIDs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendGameStartTime");

	AGameInfo_SendGameStartTime_Params params;
	params.aPlayerIDs = aPlayerIDs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SendReqChangeWeaponSet
// (Defined, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// int                            SlotIndex                      (Parm)

void AGameInfo::SendReqChangeWeaponSet(int PlayerID, int SlotIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendReqChangeWeaponSet");

	AGameInfo_SendReqChangeWeaponSet_Params params;
	params.PlayerID = PlayerID;
	params.SlotIndex = SlotIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SendReqUpdateMyHostPriorityPoint
// (Defined, Public)
// Parameters:
// int                            Point                          (Parm)

void AGameInfo::SendReqUpdateMyHostPriorityPoint(int Point)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendReqUpdateMyHostPriorityPoint");

	AGameInfo_SendReqUpdateMyHostPriorityPoint_Params params;
	params.Point = Point;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.IsWarpPossible
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsWarpPossible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsWarpPossible");

	AGameInfo_IsWarpPossible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsRightTimeForRespawn
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsRightTimeForRespawn(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsRightTimeForRespawn");

	AGameInfo_IsRightTimeForRespawn_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendMatchOverEnd
// (Defined, Public)

void AGameInfo::SendMatchOverEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendMatchOverEnd");

	AGameInfo_SendMatchOverEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SendMatchOver
// (Defined, Public)

void AGameInfo::SendMatchOver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendMatchOver");

	AGameInfo_SendMatchOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetTotalPlayedTime
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetTotalPlayedTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetTotalPlayedTime");

	AGameInfo_GetTotalPlayedTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CountPlayers
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::CountPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CountPlayers");

	AGameInfo_CountPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendMatchResult
// (Defined, Public)

void AGameInfo::SendMatchResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendMatchResult");

	AGameInfo_SendMatchResult_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetIsAIClear
// (Defined, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AGameInfo::GetIsAIClear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetIsAIClear");

	AGameInfo_GetIsAIClear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendRawMatchResult
// (Defined, Public)

void AGameInfo::SendRawMatchResult()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendRawMatchResult");

	AGameInfo_SendRawMatchResult_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetTeamScores
// (Defined, Public)
// Parameters:
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> AGameInfo::GetTeamScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetTeamScores");

	AGameInfo_GetTeamScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetResultPointRatio_Intervention
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::GetResultPointRatio_Intervention(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetResultPointRatio_Intervention");

	AGameInfo_GetResultPointRatio_Intervention_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CalcResultPoints
// (Defined, Public)

void AGameInfo::CalcResultPoints()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CalcResultPoints");

	AGameInfo_CalcResultPoints_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DeadUse
// (Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::DeadUse(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DeadUse");

	AGameInfo_DeadUse_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.IsPawnAlive
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsPawnAlive(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsPawnAlive");

	AGameInfo_IsPawnAlive_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsRespawnRestrictionTime
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsRespawnRestrictionTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsRespawnRestrictionTime");

	AGameInfo_IsRespawnRestrictionTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DisableNextObjective
// (Public)

void AGameInfo::DisableNextObjective()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DisableNextObjective");

	AGameInfo_DisableNextObjective_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.WeakObjectives
// (Public)

void AGameInfo::WeakObjectives()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.WeakObjectives");

	AGameInfo_WeakObjectives_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.MultiMinPlayers
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::MultiMinPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MultiMinPlayers");

	AGameInfo_MultiMinPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.JustStarted
// (Defined, Public)
// Parameters:
// float                          t                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::JustStarted(float t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.JustStarted");

	AGameInfo_JustStarted_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.StripColor
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::StripColor(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StripColor");

	AGameInfo_StripColor_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AddServerDetail
// (Defined, Static, Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)
// struct FString                 RuleName                       (Parm, NeedCtorLink)
// struct FString                 RuleValue                      (Parm, CoerceParm, NeedCtorLink)

void AGameInfo::STATIC_AddServerDetail(const struct FString& RuleName, const struct FString& RuleValue, struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddServerDetail");

	AGameInfo_AddServerDetail_Params params;
	params.RuleName = RuleName;
	params.RuleValue = RuleValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.GameInfo.AllowMutator
// (Defined, Static, Public)
// Parameters:
// struct FString                 MutatorClassName               (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_AllowMutator(const struct FString& MutatorClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowMutator");

	AGameInfo_AllowMutator_Params params;
	params.MutatorClassName = MutatorClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsVehicleMutator
// (Defined, Static, Public)
// Parameters:
// struct FString                 MutatorClassName               (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_IsVehicleMutator(const struct FString& MutatorClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsVehicleMutator");

	AGameInfo_IsVehicleMutator_Params params;
	params.MutatorClassName = MutatorClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetBindWeight
// (Defined, Static, Public)
// Parameters:
// unsigned char                  KeyNumber                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::STATIC_GetBindWeight(unsigned char KeyNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetBindWeight");

	AGameInfo_GetBindWeight_Params params;
	params.KeyNumber = KeyNumber;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.MakeColorCode
// (Defined, Static, Public)
// Parameters:
// struct FColor                  NewColor                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_MakeColorCode(const struct FColor& NewColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.MakeColorCode");

	AGameInfo_MakeColorCode_Params params;
	params.NewColor = NewColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetNextLoadHint
// (Defined, Static, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_GetNextLoadHint(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNextLoadHint");

	AGameInfo_GetNextLoadHint_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetKeyBindName
// (Defined, Static, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// class APlayerController*       Ref                            (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_GetKeyBindName(const struct FString& Cmd, class APlayerController* Ref)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetKeyBindName");

	AGameInfo_GetKeyBindName_Params params;
	params.Cmd = Cmd;
	params.Ref = Ref;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ParseLoadingHint
// (Defined, Static, Public)
// Parameters:
// struct FString                 Hint                           (Parm, NeedCtorLink)
// class APlayerController*       Ref                            (Parm)
// struct FColor                  HintColor                      (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseLoadingHint(const struct FString& Hint, class APlayerController* Ref, const struct FColor& HintColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseLoadingHint");

	AGameInfo_ParseLoadingHint_Params params;
	params.Hint = Hint;
	params.Ref = Ref;
	params.HintColor = HintColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetLoadingHint
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       Ref                            (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// struct FColor                  HintColor                      (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_GetLoadingHint(class APlayerController* Ref, const struct FString& MapName, const struct FColor& HintColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetLoadingHint");

	AGameInfo_GetLoadingHint_Params params;
	params.Ref = Ref;
	params.MapName = MapName;
	params.HintColor = HintColor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetAllLoadHints
// (Static, Public)
// Parameters:
// bool                           bThisClassOnly                 (OptionalParm, Parm)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AGameInfo::STATIC_GetAllLoadHints(bool bThisClassOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetAllLoadHints");

	AGameInfo_GetAllLoadHints_Params params;
	params.bThisClassOnly = bThisClassOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.NoTranslocatorKeyPressed
// (Event, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::NoTranslocatorKeyPressed(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NoTranslocatorKeyPressed");

	AGameInfo_NoTranslocatorKeyPressed_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SceneAbort
// (Event, Public)

void AGameInfo::SceneAbort()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SceneAbort");

	AGameInfo_SceneAbort_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SceneEnded
// (Event, Public)
// Parameters:
// class ASceneManager*           SM                             (Parm)
// class AActor*                  Other                          (Parm)

void AGameInfo::SceneEnded(class ASceneManager* SM, class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SceneEnded");

	AGameInfo_SceneEnded_Params params;
	params.SM = SM;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SceneStarted
// (Event, Public)
// Parameters:
// class ASceneManager*           SM                             (Parm)
// class AActor*                  Other                          (Parm)

void AGameInfo::SceneStarted(class ASceneManager* SM, class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SceneStarted");

	AGameInfo_SceneStarted_Params params;
	params.SM = SM;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AdjustBotInterface
// (Static, Public)
// Parameters:
// bool                           bSinglePlayer                  (Parm)

void AGameInfo::STATIC_AdjustBotInterface(bool bSinglePlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AdjustBotInterface");

	AGameInfo_AdjustBotInterface_Params params;
	params.bSinglePlayer = bSinglePlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ParseVoiceCommand
// (Public)
// Parameters:
// class APlayerController*       Sender                         (Parm)
// struct FString                 RecognizedString               (Parm, NeedCtorLink)

void AGameInfo::ParseVoiceCommand(class APlayerController* Sender, const struct FString& RecognizedString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseVoiceCommand");

	AGameInfo_ParseVoiceCommand_Params params;
	params.Sender = Sender;
	params.RecognizedString = RecognizedString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetPlayerControllerList
// (Defined, Public)
// Parameters:
// TArray<class APlayerController*> ControllerArray                (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetPlayerControllerList(TArray<class APlayerController*>* ControllerArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetPlayerControllerList");

	AGameInfo_GetPlayerControllerList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ControllerArray != nullptr)
		*ControllerArray = params.ControllerArray;
}


// Function Engine.GameInfo.LoadSRGrammar
// (Native, Public)
// Parameters:
// struct FString                 Grammar                        (Parm, NeedCtorLink)

void AGameInfo::LoadSRGrammar(const struct FString& Grammar)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.LoadSRGrammar");

	AGameInfo_LoadSRGrammar_Params params;
	params.Grammar = Grammar;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetGrammar
// (Defined, Event, Public)

void AGameInfo::SetGrammar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGrammar");

	AGameInfo_SetGrammar_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetDefenderNum
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetDefenderNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefenderNum");

	AGameInfo_GetDefenderNum_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindSpecGoalFor
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// int                            TeamIndex                      (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AGameInfo::FindSpecGoalFor(class APlayerReplicationInfo* PRI, int TeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindSpecGoalFor");

	AGameInfo_FindSpecGoalFor_Params params;
	params.PRI = PRI;
	params.TeamIndex = TeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RegisterVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void AGameInfo::RegisterVehicle(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RegisterVehicle");

	AGameInfo_RegisterVehicle_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AdminSay
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)

void AGameInfo::AdminSay(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AdminSay");

	AGameInfo_AdminSay_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.KillBots
// (Exec, Public)
// Parameters:
// int                            Num                            (Parm)

void AGameInfo::KillBots(int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KillBots");

	AGameInfo_KillBots_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OtherTeam
// (Defined, Public)
// Parameters:
// class ATeamInfo*               Requester                      (Parm)
// class ATeamInfo*               ReturnValue                    (Parm, OutParm, ReturnParm)

class ATeamInfo* AGameInfo::OtherTeam(class ATeamInfo* Requester)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OtherTeam");

	AGameInfo_OtherTeam_Params params;
	params.Requester = Requester;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DriverLeftVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AGameInfo::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverLeftVehicle");

	AGameInfo_DriverLeftVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CanLeaveVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanLeaveVehicle");

	AGameInfo_CanLeaveVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DriverEnteredVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AGameInfo::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DriverEnteredVehicle");

	AGameInfo_DriverEnteredVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CanEnterVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanEnterVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanEnterVehicle");

	AGameInfo_CanEnterVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.NewRecommendCombo
// (Defined, Public)
// Parameters:
// struct FString                 ComboName                      (Parm, NeedCtorLink)
// class AAIController*           C                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::NewRecommendCombo(const struct FString& ComboName, class AAIController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NewRecommendCombo");

	AGameInfo_NewRecommendCombo_Params params;
	params.ComboName = ComboName;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RecommendCombo
// (Defined, Public)
// Parameters:
// struct FString                 ComboName                      (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::RecommendCombo(const struct FString& ComboName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RecommendCombo");

	AGameInfo_RecommendCombo_Params params;
	params.ComboName = ComboName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ReviewJumpSpots
// (Public)
// Parameters:
// struct FName                   TestLabel                      (Parm)

void AGameInfo::ReviewJumpSpots(const struct FName& TestLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReviewJumpSpots");

	AGameInfo_ReviewJumpSpots_Params params;
	params.TestLabel = TestLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.OrderToIndex
// (Defined, Static, Public)
// Parameters:
// int                            Order                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::STATIC_OrderToIndex(int Order)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.OrderToIndex");

	AGameInfo_OrderToIndex_Params params;
	params.Order = Order;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AcceptPlayInfoProperty
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_AcceptPlayInfoProperty(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AcceptPlayInfoProperty");

	AGameInfo_AcceptPlayInfoProperty_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetDescriptionText
// (Defined, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_GetDescriptionText(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDescriptionText");

	AGameInfo_GetDescriptionText_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetDisplayText
// (Defined, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_GetDisplayText(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDisplayText");

	AGameInfo_GetDisplayText_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FillPlayInfo
// (Defined, Static, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void AGameInfo::STATIC_FillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FillPlayInfo");

	AGameInfo_FillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ParseMessageString
// (Defined, Static, Public)
// Parameters:
// class AMutator*                BaseMutator                    (Parm)
// class AController*             Who                            (Parm)
// struct FString                 Message                        (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseMessageString(class AMutator* BaseMutator, class AController* Who, const struct FString& Message)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseMessageString");

	AGameInfo_ParseMessageString_Params params;
	params.BaseMutator = BaseMutator;
	params.Who = Who;
	params.Message = Message;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ParseChatPercVar
// (Defined, Static, Public)
// Parameters:
// class AMutator*                BaseMutator                    (Parm)
// class AController*             Who                            (Parm)
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseChatPercVar(class AMutator* BaseMutator, class AController* Who, const struct FString& Cmd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseChatPercVar");

	AGameInfo_ParseChatPercVar_Params params;
	params.BaseMutator = BaseMutator;
	params.Who = Who;
	params.Cmd = Cmd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindTeamDesignation
// (Defined, Static, Public)
// Parameters:
// class AGameReplicationInfo*    GRI                            (Parm)
// class AActor*                  A                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_FindTeamDesignation(class AGameReplicationInfo* GRI, class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindTeamDesignation");

	AGameInfo_FindTeamDesignation_Params params;
	params.GRI = GRI;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetRandomTeamSymbol
// (Defined, Static, Public)
// Parameters:
// int                            Base                           (Parm)
// class UTexture*                ReturnValue                    (Parm, OutParm, ReturnParm)

class UTexture* AGameInfo::STATIC_GetRandomTeamSymbol(int Base)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetRandomTeamSymbol");

	AGameInfo_GetRandomTeamSymbol_Params params;
	params.Base = Base;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.TooManyBots
// (Defined, Public)
// Parameters:
// class AController*             botToRemove                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::TooManyBots(class AController* botToRemove)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TooManyBots");

	AGameInfo_TooManyBots_Params params;
	params.botToRemove = botToRemove;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetMultykillBonusPoint
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// int                            AddExp                         (Parm, OutParm)
// int                            AddPoint                       (Parm, OutParm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::GetMultykillBonusPoint(class AController* C, int* AddExp, int* AddPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetMultykillBonusPoint");

	AGameInfo_GetMultykillBonusPoint_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AddExp != nullptr)
		*AddExp = params.AddExp;
	if (AddPoint != nullptr)
		*AddPoint = params.AddPoint;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendMessageAddScore
// (Defined, Public)
// Parameters:
// class AController*             ReceiveController              (Parm)
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)
// int                            KillWeapon                     (Parm)
// int                            iConKillorHeadShot             (OptionalParm, Parm)

void AGameInfo::SendMessageAddScore(class AController* ReceiveController, class AController* Killer, class AController* Other, int KillWeapon, int iConKillorHeadShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendMessageAddScore");

	AGameInfo_SendMessageAddScore_Params params;
	params.ReceiveController = ReceiveController;
	params.Killer = Killer;
	params.Other = Other;
	params.KillWeapon = KillWeapon;
	params.iConKillorHeadShot = iConKillorHeadShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetAssistPoint
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::SetAssistPoint(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetAssistPoint");

	AGameInfo_SetAssistPoint_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetAssistScore
// (Defined, Public)
// Parameters:
// unsigned char                  byAssistType                   (Parm, OutParm)
// int                            iMessageCode                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetAssistScore(int iMessageCode, unsigned char* byAssistType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetAssistScore");

	AGameInfo_GetAssistScore_Params params;
	params.iMessageCode = iMessageCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (byAssistType != nullptr)
		*byAssistType = params.byAssistType;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendSeverScoreAndAssist
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::SendSeverScoreAndAssist(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendSeverScoreAndAssist");

	AGameInfo_SendSeverScoreAndAssist_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ScoreKill
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::ScoreKill(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreKill");

	AGameInfo_ScoreKill_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ScoreKill_Suicide
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)

void AGameInfo::ScoreKill_Suicide(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreKill_Suicide");

	AGameInfo_ScoreKill_Suicide_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetAddScore
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::GetAddScore(class AController* Killer, class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetAddScore");

	AGameInfo_GetAddScore_Params params;
	params.Killer = Killer;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ScoreObjective
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// float                          Score                          (Parm)

void AGameInfo::ScoreObjective(class APlayerReplicationInfo* Scorer, float Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreObjective");

	AGameInfo_ScoreObjective_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TeamScoreEvent
// (Defined, Public)
// Parameters:
// int                            Team                           (Parm)
// float                          Points                         (Parm)
// struct FString                 Desc                           (Parm, NeedCtorLink)

void AGameInfo::TeamScoreEvent(int Team, float Points, const struct FString& Desc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TeamScoreEvent");

	AGameInfo_TeamScoreEvent_Params params;
	params.Team = Team;
	params.Points = Points;
	params.Desc = Desc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ScoreEvent
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Who                            (Parm)
// float                          Points                         (Parm)
// struct FString                 Desc                           (Parm, NeedCtorLink)

void AGameInfo::ScoreEvent(class APlayerReplicationInfo* Who, float Points, const struct FString& Desc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ScoreEvent");

	AGameInfo_ScoreEvent_Params params;
	params.Who = Who;
	params.Points = Points;
	params.Desc = Desc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckScore
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)

void AGameInfo::CheckScore(class APlayerReplicationInfo* Scorer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckScore");

	AGameInfo_CheckScore_Params params;
	params.Scorer = Scorer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckLives
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckLives(class APlayerReplicationInfo* Scorer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckLives");

	AGameInfo_CheckLives_Params params;
	params.Scorer = Scorer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RatePlayerStart
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        N                              (Parm)
// unsigned char                  Team                           (Parm)
// class AController*             Player                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AGameInfo::RatePlayerStart(class ANavigationPoint* N, unsigned char Team, class AController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RatePlayerStart");

	AGameInfo_RatePlayerStart_Params params;
	params.N = N;
	params.Team = Team;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindPlayerStart_TU
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  inTeam                         (OptionalParm, Parm)
// struct FString                 incomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameInfo::FindPlayerStart_TU(class AController* Player, unsigned char inTeam, const struct FString& incomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerStart_TU");

	AGameInfo_FindPlayerStart_TU_Params params;
	params.Player = Player;
	params.inTeam = inTeam;
	params.incomingName = incomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.FindPlayerStart
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  inTeam                         (OptionalParm, Parm)
// struct FString                 incomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameInfo::FindPlayerStart(class AController* Player, unsigned char inTeam, const struct FString& incomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerStart");

	AGameInfo_FindPlayerStart_Params params;
	params.Player = Player;
	params.inTeam = inTeam;
	params.incomingName = incomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsSDRespawnTime
// (Defined, Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsSDRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsSDRespawnTime");

	AGameInfo_IsSDRespawnTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.LogNavigationPoints
// (Defined, Public)
// Parameters:
// TArray<class ANavigationPoint*> ns                             (Parm, NeedCtorLink)

void AGameInfo::LogNavigationPoints(TArray<class ANavigationPoint*> ns)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.LogNavigationPoints");

	AGameInfo_LogNavigationPoints_Params params;
	params.ns = ns;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.FindPlayerStart_SD
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameInfo::FindPlayerStart_SD(unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerStart_SD");

	AGameInfo_FindPlayerStart_SD_Params params;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.LogFinalRespawnPoint
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        respawnPoint                   (Parm)
// unsigned char                  Team                           (Parm)

void AGameInfo::LogFinalRespawnPoint(class ANavigationPoint* respawnPoint, unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.LogFinalRespawnPoint");

	AGameInfo_LogFinalRespawnPoint_Params params;
	params.respawnPoint = respawnPoint;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetRespawnPointRatingEnemy
// (Defined, Public)
// Parameters:
// bool                           giveNearnessScore              (Parm)
// TArray<class ANavigationPoint*> respawnCandidates              (Parm, NeedCtorLink)
// unsigned char                  Team                           (Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameInfo::GetRespawnPointRatingEnemy(bool giveNearnessScore, TArray<class ANavigationPoint*> respawnCandidates, unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetRespawnPointRatingEnemy");

	AGameInfo_GetRespawnPointRatingEnemy_Params params;
	params.giveNearnessScore = giveNearnessScore;
	params.respawnCandidates = respawnCandidates;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetRespawnPointsSortedByClosenessTo
// (Defined, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// unsigned char                  Team                           (Parm)
// int                            Count                          (Parm)
// TArray<class ANavigationPoint*> ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class ANavigationPoint*> AGameInfo::GetRespawnPointsSortedByClosenessTo(class AActor* A, unsigned char Team, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetRespawnPointsSortedByClosenessTo");

	AGameInfo_GetRespawnPointsSortedByClosenessTo_Params params;
	params.A = A;
	params.Team = Team;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SortNavigationPoints2
// (Defined, Public)
// Parameters:
// struct FVector                 centerLoc                      (Parm)
// TArray<class ANavigationPoint*> candidates                     (Parm, OutParm, NeedCtorLink)
// TArray<float>                  candidateDists                 (Parm, OutParm, NeedCtorLink)

void AGameInfo::SortNavigationPoints2(const struct FVector& centerLoc, TArray<class ANavigationPoint*>* candidates, TArray<float>* candidateDists)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SortNavigationPoints2");

	AGameInfo_SortNavigationPoints2_Params params;
	params.centerLoc = centerLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (candidates != nullptr)
		*candidates = params.candidates;
	if (candidateDists != nullptr)
		*candidateDists = params.candidateDists;
}


// Function Engine.GameInfo.SortNavigationPoints
// (Defined, Public)
// Parameters:
// class AActor*                  center                         (Parm)
// TArray<class ANavigationPoint*> candidates                     (Parm, OutParm, NeedCtorLink)
// TArray<float>                  candidateDists                 (Parm, OutParm, NeedCtorLink)

void AGameInfo::SortNavigationPoints(class AActor* center, TArray<class ANavigationPoint*>* candidates, TArray<float>* candidateDists)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SortNavigationPoints");

	AGameInfo_SortNavigationPoints_Params params;
	params.center = center;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (candidates != nullptr)
		*candidates = params.candidates;
	if (candidateDists != nullptr)
		*candidateDists = params.candidateDists;
}


// Function Engine.GameInfo.IsSafeFromEnemySight
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        N                              (Parm)
// unsigned char                  Team                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsSafeFromEnemySight(class ANavigationPoint* N, unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsSafeFromEnemySight");

	AGameInfo_IsSafeFromEnemySight_Params params;
	params.N = N;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PickAlly
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AGameInfo::PickAlly(unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickAlly");

	AGameInfo_PickAlly_Params params;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Sort_KillSuccessionOfEnemy
// (Defined, Public)
// Parameters:
// TArray<class AActor*>          enemies                        (Parm, OutParm, NeedCtorLink)

void AGameInfo::Sort_KillSuccessionOfEnemy(TArray<class AActor*>* enemies)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Sort_KillSuccessionOfEnemy");

	AGameInfo_Sort_KillSuccessionOfEnemy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (enemies != nullptr)
		*enemies = params.enemies;
}


// Function Engine.GameInfo.GetPersonalEnemyList
// (Defined, Public)
// Parameters:
// class APawn*                   myPawn                         (Parm)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AActor*> AGameInfo::GetPersonalEnemyList(class APawn* myPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetPersonalEnemyList");

	AGameInfo_GetPersonalEnemyList_Params params;
	params.myPawn = myPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetDefenceModeEnemyList
// (Defined, Public)
// Parameters:
// unsigned char                  myTeam                         (Parm)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AActor*> AGameInfo::GetDefenceModeEnemyList(unsigned char myTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefenceModeEnemyList");

	AGameInfo_GetDefenceModeEnemyList_Params params;
	params.myTeam = myTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetEveryEnemyList2
// (Defined, Public)
// Parameters:
// unsigned char                  myTeam                         (Parm)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AActor*> AGameInfo::GetEveryEnemyList2(unsigned char myTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetEveryEnemyList2");

	AGameInfo_GetEveryEnemyList2_Params params;
	params.myTeam = myTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetEveryEnemyList
// (Defined, Public)
// Parameters:
// unsigned char                  myTeam                         (Parm)
// TArray<class AActor*>          ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class AActor*> AGameInfo::GetEveryEnemyList(unsigned char myTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetEveryEnemyList");

	AGameInfo_GetEveryEnemyList_Params params;
	params.myTeam = myTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.UpdatePositionLog
// (Defined, Public)

void AGameInfo::UpdatePositionLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdatePositionLog");

	AGameInfo_UpdatePositionLog_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetEveryAllyList
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// TArray<class APawn*>           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class APawn*> AGameInfo::GetEveryAllyList(unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetEveryAllyList");

	AGameInfo_GetEveryAllyList_Params params;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsAnyAllyAlive
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsAnyAllyAlive(unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsAnyAllyAlive");

	AGameInfo_IsAnyAllyAlive_Params params;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetSafeAllyList
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// TArray<class APawn*>           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class APawn*> AGameInfo::GetSafeAllyList(unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSafeAllyList");

	AGameInfo_GetSafeAllyList_Params params;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetRecentlySpawnedAllyList
// (Defined, Public)
// Parameters:
// TArray<class APawn*>           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class APawn*> AGameInfo::GetRecentlySpawnedAllyList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetRecentlySpawnedAllyList");

	AGameInfo_GetRecentlySpawnedAllyList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetSafetestRespawnPoint
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// TArray<class ANavigationPoint*> starts                         (Parm, NeedCtorLink)
// bool                           skipAppropriateCheck           (OptionalParm, Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameInfo::GetSafetestRespawnPoint(unsigned char Team, TArray<class ANavigationPoint*> starts, bool skipAppropriateCheck)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSafetestRespawnPoint");

	AGameInfo_GetSafetestRespawnPoint_Params params;
	params.Team = Team;
	params.starts = starts;
	params.skipAppropriateCheck = skipAppropriateCheck;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsAppropriateRespawnPoint
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        N                              (Parm)
// unsigned char                  Team                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsAppropriateRespawnPoint(class ANavigationPoint* N, unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsAppropriateRespawnPoint");

	AGameInfo_IsAppropriateRespawnPoint_Params params;
	params.N = N;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsRespawnPointFailedRecently
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        S                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsRespawnPointFailedRecently(class ANavigationPoint* S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsRespawnPointFailedRecently");

	AGameInfo_IsRespawnPointFailedRecently_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsAnyPawnWithinRadius
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        N                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsAnyPawnWithinRadius(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsAnyPawnWithinRadius");

	AGameInfo_IsAnyPawnWithinRadius_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsRespawnSpecialCase
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsRespawnSpecialCase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsRespawnSpecialCase");

	AGameInfo_IsRespawnSpecialCase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.EndLogging
// (Defined, Public)
// Parameters:
// struct FString                 Reason                         (Parm, NeedCtorLink)

void AGameInfo::EndLogging(const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndLogging");

	AGameInfo_EndLogging_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TieOnTimeOver
// (Defined, Public)

void AGameInfo::TieOnTimeOver()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TieOnTimeOver");

	AGameInfo_TieOnTimeOver_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.EndGame
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)

void AGameInfo::EndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndGame");

	AGameInfo_EndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.CheckEndGameCondition
// (Event, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckEndGameCondition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckEndGameCondition");

	AGameInfo_CheckEndGameCondition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckEndGame
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckEndGame");

	AGameInfo_CheckEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.BroadcastLocalized
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameInfo::BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastLocalized");

	AGameInfo_BroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BroadcastTeam
// (Defined, Public)
// Parameters:
// class AController*             Sender                         (Parm)
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void AGameInfo::BroadcastTeam(class AController* Sender, const struct FString& Msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastTeam");

	AGameInfo_BroadcastTeam_Params params;
	params.Sender = Sender;
	params.Msg = Msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Broadcast
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void AGameInfo::Broadcast(class AActor* Sender, const struct FString& Msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Broadcast");

	AGameInfo_Broadcast_Params params;
	params.Sender = Sender;
	params.Msg = Msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ChangeVoiceChannel
// (Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// int                            NewChannelIndex                (Parm)
// int                            OldChannelIndex                (Parm)

void AGameInfo::ChangeVoiceChannel(class APlayerReplicationInfo* PRI, int NewChannelIndex, int OldChannelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeVoiceChannel");

	AGameInfo_ChangeVoiceChannel_Params params;
	params.PRI = PRI;
	params.NewChannelIndex = NewChannelIndex;
	params.OldChannelIndex = OldChannelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetMapList
// (Defined, Public)
// Parameters:
// struct FString                 MapListClassType               (Parm, NeedCtorLink)
// class AMapList*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AMapList* AGameInfo::GetMapList(const struct FString& MapListClassType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetMapList");

	AGameInfo_GetMapList_Params params;
	params.MapListClassType = MapListClassType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetMapRotation
// (Defined, Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AGameInfo::GetMapRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetMapRotation");

	AGameInfo_GetMapRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.RestartGame
// (Defined, Public)

void AGameInfo::RestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartGame");

	AGameInfo_RestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SendPlayer
// (Defined, Public)
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// struct FString                 URL                            (Parm, NeedCtorLink)

void AGameInfo::SendPlayer(class APlayerController* aPlayer, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendPlayer");

	AGameInfo_SendPlayer_Params params;
	params.aPlayer = aPlayer;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetTeamID_by_Balancing
// (Defined, Public)
// Parameters:
// int                            iTeamID                        (Parm)
// class AController*             C                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetTeamID_by_Balancing(int iTeamID, class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetTeamID_by_Balancing");

	AGameInfo_GetTeamID_by_Balancing_Params params;
	params.iTeamID = iTeamID;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// int                            N                              (Parm)
// bool                           bNewTeam                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ChangeTeam(class AController* Other, int N, bool bNewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeTeam");

	AGameInfo_ChangeTeam_Params params;
	params.Other = Other;
	params.N = N;
	params.bNewTeam = bNewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ForcedChangeTeam
// (Defined, Event, Public)
// Parameters:
// class AController*             Other                          (Parm)
// int                            N                              (Parm)
// bool                           bNewTeam                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ForcedChangeTeam(class AController* Other, int N, bool bNewTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForcedChangeTeam");

	AGameInfo_ForcedChangeTeam_Params params;
	params.Other = Other;
	params.N = N;
	params.bNewTeam = bNewTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeName
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// bool                           bNameChange                    (Parm)

void AGameInfo::ChangeName(class AController* Other, const struct FString& S, bool bNameChange)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeName");

	AGameInfo_ChangeName_Params params;
	params.Other = Other;
	params.S = S;
	params.bNameChange = bNameChange;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DiscardInventory
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void AGameInfo::DiscardInventory(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DiscardInventory");

	AGameInfo_DiscardInventory_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PickupQuery
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class APickup*                 Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PickupQuery(class APawn* Other, class APickup* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PickupQuery");

	AGameInfo_PickupQuery_Params params;
	params.Other = Other;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ShouldRespawn
// (Defined, Public)
// Parameters:
// class APickup*                 Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::ShouldRespawn(class APickup* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ShouldRespawn");

	AGameInfo_ShouldRespawn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ReduceDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   injured                        (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// int                            iWeaponType                    (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::ReduceDamage(int Damage, class APawn* injured, class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ReduceDamage");

	AGameInfo_ReduceDamage_Params params;
	params.Damage = Damage;
	params.injured = injured;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;
	params.iWeaponType = iWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Momentum != nullptr)
		*Momentum = params.Momentum;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CanSpectate
// (Defined, Public)
// Parameters:
// class APlayerController*       Viewer                         (Parm)
// bool                           bOnlySpectator                 (Parm)
// class AActor*                  ViewTarget                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CanSpectate(class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CanSpectate");

	AGameInfo_CanSpectate_Params params;
	params.Viewer = Viewer;
	params.bOnlySpectator = bOnlySpectator;
	params.ViewTarget = ViewTarget;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsOnTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// int                            TeamNum                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsOnTeam(class AController* Other, int TeamNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsOnTeam");

	AGameInfo_IsOnTeam_Params params;
	params.Other = Other;
	params.TeamNum = TeamNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SameTeam
// (Public)
// Parameters:
// class AController*             c1                             (Parm)
// class AController*             c2                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SameTeam(class AController* c1, class AController* c2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SameTeam");

	AGameInfo_SameTeam_Params params;
	params.c1 = c1;
	params.c2 = c2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.KickBan
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AGameInfo::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickBan");

	AGameInfo_KickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SessionKickBan
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AGameInfo::SessionKickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SessionKickBan");

	AGameInfo_SessionKickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Kick
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AGameInfo::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Kick");

	AGameInfo_Kick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ParseKillMessage
// (Native, Static, Public)
// Parameters:
// struct FString                 KillerName                     (Parm, NeedCtorLink)
// struct FString                 VictimName                     (Parm, NeedCtorLink)
// struct FString                 DeathMessage                   (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseKillMessage(const struct FString& KillerName, const struct FString& VictimName, const struct FString& DeathMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseKillMessage");

	AGameInfo_ParseKillMessage_Params params;
	params.KillerName = KillerName;
	params.VictimName = VictimName;
	params.DeathMessage = DeathMessage;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.BroadcastDeathMessage
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (Parm)
// int                            WeaponType                     (Parm)

void AGameInfo::BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType, int CollisionPart, int WeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BroadcastDeathMessage");

	AGameInfo_BroadcastDeathMessage_Params params;
	params.Killer = Killer;
	params.Other = Other;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetOptionalDeathMessageInfo
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// int                            IsHeadShot                     (Parm)
// int                            IsEnableAim                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetOptionalDeathMessageInfo(class AController* Killer, class AController* Killed, int IsHeadShot, int IsEnableAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetOptionalDeathMessageInfo");

	AGameInfo_GetOptionalDeathMessageInfo_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.IsHeadShot = IsHeadShot;
	params.IsEnableAim = IsEnableAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetWDamageType
// (Defined, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (Parm)
// int                            WeaponType                     (Parm)
// int                            IsHeadShot                     (Parm, OutParm)
// int                            IsEnableAim                    (Parm, OutParm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AGameInfo::GetWDamageType(class UClass* DamageType, int CollisionPart, int WeaponType, int* IsHeadShot, int* IsEnableAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetWDamageType");

	AGameInfo_GetWDamageType_Params params;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (IsHeadShot != nullptr)
		*IsHeadShot = params.IsHeadShot;
	if (IsEnableAim != nullptr)
		*IsEnableAim = params.IsEnableAim;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreventSever
// (Defined, Public)
// Parameters:
// class APawn*                   Killed                         (Parm)
// struct FName                   BoneName                       (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PreventSever(class APawn* Killed, const struct FName& BoneName, int Damage, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreventSever");

	AGameInfo_PreventSever_Params params;
	params.Killed = Killed;
	params.BoneName = BoneName;
	params.Damage = Damage;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreventDeath
// (Defined, Public)
// Parameters:
// class APawn*                   Killed                         (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreventDeath");

	AGameInfo_PreventDeath_Params params;
	params.Killed = Killed;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Killed_Special
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::Killed_Special(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Killed_Special");

	AGameInfo_Killed_Special_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessDeathMessage
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AGameInfo::ProcessDeathMessage(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessDeathMessage");

	AGameInfo_ProcessDeathMessage_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetDeathUID
// (Defined, Public)
// Parameters:
// class AController*             Killed                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetDeathUID(class AController* Killed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDeathUID");

	AGameInfo_GetDeathUID_Params params;
	params.Killed = Killed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetCharKillUID
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetCharKillUID(class AController* Killer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetCharKillUID");

	AGameInfo_GetCharKillUID_Params params;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsSetKDLogData
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsSetKDLogData(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsSetKDLogData");

	AGameInfo_IsSetKDLogData_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.IsProcessKDLog
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsProcessKDLog(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsProcessKDLog");

	AGameInfo_IsProcessKDLog_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Killed
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AGameInfo::Killed(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Killed");

	AGameInfo_Killed_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ExceptionKillWeapon
// (Defined, Public)
// Parameters:
// int                            iKillWeaponID                  (Parm)
// class UClass*                  DamageType                     (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::ExceptionKillWeapon(int iKillWeaponID, class UClass* DamageType, int WeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ExceptionKillWeapon");

	AGameInfo_ExceptionKillWeapon_Params params;
	params.iKillWeaponID = iKillWeaponID;
	params.DamageType = DamageType;
	params.WeaponType = WeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetChopperCallerID
// (Defined, Public)
// Parameters:
// class AController*             HeliCopter                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetChopperCallerID(class AController* HeliCopter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetChopperCallerID");

	AGameInfo_GetChopperCallerID_Params params;
	params.HeliCopter = HeliCopter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.KDLOG_Finalize_HeliCopter
// (Defined, Public)
// Parameters:
// int                            KillerUID                      (Parm)
// class AController*             Killer                         (Parm)
// class AController*             HeliCopter                     (Parm)

void AGameInfo::KDLOG_Finalize_HeliCopter(int KillerUID, class AController* Killer, class AController* HeliCopter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KDLOG_Finalize_HeliCopter");

	AGameInfo_KDLOG_Finalize_HeliCopter_Params params;
	params.KillerUID = KillerUID;
	params.Killer = Killer;
	params.HeliCopter = HeliCopter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.KDLOG_Finalize
// (Defined, Public)

void AGameInfo::KDLOG_Finalize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KDLOG_Finalize");

	AGameInfo_KDLOG_Finalize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.KDLOG_Initialize
// (Defined, Public)

void AGameInfo::KDLOG_Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KDLOG_Initialize");

	AGameInfo_KDLOG_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.DoProcessKillMessage
// (Defined, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::DoProcessKillMessage(class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DoProcessKillMessage");

	AGameInfo_DoProcessKillMessage_Params params;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SendQuest_KillSuccession
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// unsigned char                  byKillSuccession               (Parm)

void AGameInfo::SendQuest_KillSuccession(class AController* Killer, unsigned char byKillSuccession)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendQuest_KillSuccession");

	AGameInfo_SendQuest_KillSuccession_Params params;
	params.Killer = Killer;
	params.byKillSuccession = byKillSuccession;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SendMessageKillSuccssion
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class APlayerController*       PC                             (Parm)
// unsigned char                  byKillSuccession               (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::SendMessageKillSuccssion(class AController* Killer, class APlayerController* PC, unsigned char byKillSuccession)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SendMessageKillSuccssion");

	AGameInfo_SendMessageKillSuccssion_Params params;
	params.Killer = Killer;
	params.PC = PC;
	params.byKillSuccession = byKillSuccession;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessKillMessageMulti
// (Defined, Public)
// Parameters:
// int                            iArray                         (Parm)
// class AController*             ReceiveController              (Parm)
// class AController*             Killer                         (Parm)
// class AController*             Other                          (Parm)
// int                            KillWeapon                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::ProcessKillMessageMulti(int iArray, class AController* ReceiveController, class AController* Killer, class AController* Other, int KillWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessKillMessageMulti");

	AGameInfo_ProcessKillMessageMulti_Params params;
	params.iArray = iArray;
	params.ReceiveController = ReceiveController;
	params.Killer = Killer;
	params.Other = Other;
	params.KillWeapon = KillWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ProcessKillMessage
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// int                            iConKillorHeadShot             (OptionalParm, Parm, OutParm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AGameInfo::ProcessKillMessage(class AController* Killer, class AController* Killed, int CollisionPart, int WeaponType, bool bWallShot, int* iConKillorHeadShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessKillMessage");

	AGameInfo_ProcessKillMessage_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (iConKillorHeadShot != nullptr)
		*iConKillorHeadShot = params.iConKillorHeadShot;
}


// Function Engine.GameInfo.KillEvent
// (Defined, Public)
// Parameters:
// struct FString                 KillType                       (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  Killer                         (Parm)
// class APlayerReplicationInfo*  Victim                         (Parm)
// class UClass*                  Damage                         (Parm)

void AGameInfo::KillEvent(const struct FString& KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KillEvent");

	AGameInfo_KillEvent_Params params;
	params.KillType = KillType;
	params.Killer = Killer;
	params.Victim = Victim;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyKilled
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   KilledPawn                     (Parm)

void AGameInfo::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyKilled");

	AGameInfo_NotifyKilled_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.KilledPawn = KilledPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPlayerDefaults
// (Defined, Public)
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void AGameInfo::SetPlayerDefaults(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPlayerDefaults");

	AGameInfo_SetPlayerDefaults_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddDefaultInventory
// (Defined, Public)
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void AGameInfo::AddDefaultInventory(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddDefaultInventory");

	AGameInfo_AddDefaultInventory_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddGameSpecificInventory
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AGameInfo::AddGameSpecificInventory(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddGameSpecificInventory");

	AGameInfo_AddGameSpecificInventory_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AcceptInventory
// (Defined, Event, Public)
// Parameters:
// class APawn*                   PlayerPawn                     (Parm)

void AGameInfo::AcceptInventory(class APawn* PlayerPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AcceptInventory");

	AGameInfo_AcceptInventory_Params params;
	params.PlayerPawn = PlayerPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyLogout
// (Defined, Public)
// Parameters:
// class AController*             Exiting                        (Parm)

void AGameInfo::NotifyLogout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyLogout");

	AGameInfo_NotifyLogout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NotifyLogin
// (Defined, Public)
// Parameters:
// int                            NewPlayerID                    (Parm)

void AGameInfo::NotifyLogin(int NewPlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NotifyLogin");

	AGameInfo_NotifyLogin_Params params;
	params.NewPlayerID = NewPlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Logout
// (Defined, Public)
// Parameters:
// class AController*             Exiting                        (Parm)

void AGameInfo::Logout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Logout");

	AGameInfo_Logout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetWeaponViewShake
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void AGameInfo::SetWeaponViewShake(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetWeaponViewShake");

	AGameInfo_SetWeaponViewShake_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostLogin
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       NewPlayer                      (Parm)

void AGameInfo::PostLogin(class APlayerController* NewPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostLogin");

	AGameInfo_PostLogin_Params params;
	params.NewPlayer = NewPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetDefaultPlayerClass
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AGameInfo::GetDefaultPlayerClass(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetDefaultPlayerClass");

	AGameInfo_GetDefaultPlayerClass_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.EndWaitingForStart
// (Defined, Public)

void AGameInfo::EndWaitingForStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.EndWaitingForStart");

	AGameInfo_EndWaitingForStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.BeginWaitingForStart
// (Defined, Public)

void AGameInfo::BeginWaitingForStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BeginWaitingForStart");

	AGameInfo_BeginWaitingForStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RestartPlayer
// (Defined, Public)
// Parameters:
// class AController*             aPlayer                        (Parm)

void AGameInfo::RestartPlayer(class AController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RestartPlayer");

	AGameInfo_RestartPlayer_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.RefreshMaxPlayersDuringGame
// (Defined, Public)

void AGameInfo::RefreshMaxPlayersDuringGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.RefreshMaxPlayersDuringGame");

	AGameInfo_RefreshMaxPlayersDuringGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.logrep
// (Defined, Exec, Public)

void AGameInfo::logrep()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.logrep");

	AGameInfo_logrep_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GameAddDefaultInventory
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AGameInfo::GameAddDefaultInventory(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameAddDefaultInventory");

	AGameInfo_GameAddDefaultInventory_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PlayerCanRestartGame
// (Defined, Public)
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PlayerCanRestartGame(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestartGame");

	AGameInfo_PlayerCanRestartGame_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PlayerCanRestart
// (Defined, Public)
// Parameters:
// class APlayerController*       aPlayer                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::PlayerCanRestart(class APlayerController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PlayerCanRestart");

	AGameInfo_PlayerCanRestart_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.StartAIPlayers
// (Defined, Public)

void AGameInfo::StartAIPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartAIPlayers");

	AGameInfo_StartAIPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartHumanPlayers
// (Defined, Public)

void AGameInfo::StartHumanPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartHumanPlayers");

	AGameInfo_StartHumanPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.StartMatch
// (Defined, Public)

void AGameInfo::StartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.StartMatch");

	AGameInfo_StartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TestLevel
// (Defined, Public)

void AGameInfo::TestLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TestLevel");

	AGameInfo_TestLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ContinueMatch
// (Public)

void AGameInfo::ContinueMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ContinueMatch");

	AGameInfo_ContinueMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GotoNextGameState
// (Defined, Public)

void AGameInfo::GotoNextGameState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GotoNextGameState");

	AGameInfo_GotoNextGameState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SimpleLogin
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       NewPlayer                      (Parm)
// class APawn*                   NewPawn                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SimpleLogin(class APlayerController* NewPlayer, class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SimpleLogin");

	AGameInfo_SimpleLogin_Params params;
	params.NewPlayer = NewPlayer;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetPlayerID
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SetPlayerID(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPlayerID");

	AGameInfo_SetPlayerID_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ForcedStartMatch
// (Event, Public)

void AGameInfo::ForcedStartMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForcedStartMatch");

	AGameInfo_ForcedStartMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetPRI4Intervention
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameInfo::SetPRI4Intervention(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPRI4Intervention");

	AGameInfo_SetPRI4Intervention_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.IsNewPlayerGotoSpectating
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::IsNewPlayerGotoSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.IsNewPlayerGotoSpectating");

	AGameInfo_IsNewPlayerGotoSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.Login
// (Defined, Event, Public)
// Parameters:
// struct FString                 Portal                         (Parm, NeedCtorLink)
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Error                          (Parm, OutParm, NeedCtorLink)
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* AGameInfo::Login(const struct FString& Portal, const struct FString& Options, struct FString* Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Login");

	AGameInfo_Login_Params params;
	params.Portal = Portal;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Error != nullptr)
		*Error = params.Error;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetWaitView
// (Defined, Public)
// Parameters:
// class UClass*                  classWaitView                  (Parm)
// class AWaitView*               ReturnValue                    (Parm, OutParm, ReturnParm)

class AWaitView* AGameInfo::GetWaitView(class UClass* classWaitView)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetWaitView");

	AGameInfo_GetWaitView_Params params;
	params.classWaitView = classWaitView;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetWaitViewClass
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AGameInfo::GetWaitViewClass(unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetWaitViewClass");

	AGameInfo_GetWaitViewClass_Params params;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CheckOverlapUserName
// (Defined, Public)
// Parameters:
// struct FString                 LoginedUserName                (Parm, NeedCtorLink)
// struct FString                 ErrMsg                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::CheckOverlapUserName(const struct FString& LoginedUserName, struct FString* ErrMsg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CheckOverlapUserName");

	AGameInfo_CheckOverlapUserName_Params params;
	params.LoginedUserName = LoginedUserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ErrMsg != nullptr)
		*ErrMsg = params.ErrMsg;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PopNextTeam
// (Defined, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AGameInfo::PopNextTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PopNextTeam");

	AGameInfo_PopNextTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetPawn4ChangeHost
// (Defined, Public)
// Parameters:
// struct FString                 nn                             (Parm, NeedCtorLink)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AGameInfo::GetPawn4ChangeHost(const struct FString& nn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetPawn4ChangeHost");

	AGameInfo_GetPawn4ChangeHost_Params params;
	params.nn = nn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.InitSavedLevel
// (Defined, Public)

void AGameInfo::InitSavedLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitSavedLevel");

	AGameInfo_InitSavedLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AtCapacity
// (Defined, Public)
// Parameters:
// bool                           bSpectator                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AtCapacity(bool bSpectator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AtCapacity");

	AGameInfo_AtCapacity_Params params;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllowBecomeActivePlayer
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AllowBecomeActivePlayer(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowBecomeActivePlayer");

	AGameInfo_AllowBecomeActivePlayer_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.BecomeSpectator
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::BecomeSpectator(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.BecomeSpectator");

	AGameInfo_BecomeSpectator_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetIntOption
// (Defined, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 ParseString                    (Parm, NeedCtorLink)
// int                            CurrentValue                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetIntOption(const struct FString& Options, const struct FString& ParseString, int CurrentValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetIntOption");

	AGameInfo_GetIntOption_Params params;
	params.Options = Options;
	params.ParseString = ParseString;
	params.CurrentValue = CurrentValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PreLogin
// (Defined, Event, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Address                        (Parm, NeedCtorLink)
// struct FString                 PlayerID                       (Parm, NeedCtorLink)
// struct FString                 Error                          (Parm, OutParm, NeedCtorLink)
// struct FString                 FailCode                       (Parm, OutParm, NeedCtorLink)

void AGameInfo::PreLogin(const struct FString& Options, const struct FString& Address, const struct FString& PlayerID, struct FString* Error, struct FString* FailCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreLogin");

	AGameInfo_PreLogin_Params params;
	params.Options = Options;
	params.Address = Address;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Error != nullptr)
		*Error = params.Error;
	if (FailCode != nullptr)
		*FailCode = params.FailCode;
}


// Function Engine.GameInfo.ProcessServerTravel
// (Defined, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bItems                         (Parm)

void AGameInfo::ProcessServerTravel(const struct FString& URL, bool bItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ProcessServerTravel");

	AGameInfo_ProcessServerTravel_Params params;
	params.URL = URL;
	params.bItems = bItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetBeaconText
// (Defined, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetBeaconText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetBeaconText");

	AGameInfo_GetBeaconText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AddGameModifier
// (Defined, Public)
// Parameters:
// class AGameRules*              NewRule                        (Parm)

void AGameInfo::AddGameModifier(class AGameRules* NewRule)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddGameModifier");

	AGameInfo_AddGameModifier_Params params;
	params.NewRule = NewRule;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AddMutator
// (Defined, Public)
// Parameters:
// struct FString                 mutname                        (Parm, NeedCtorLink)
// bool                           bUserAdded                     (OptionalParm, Parm)

void AGameInfo::AddMutator(const struct FString& mutname, bool bUserAdded)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AddMutator");

	AGameInfo_AddMutator_Params params;
	params.mutname = mutname;
	params.bUserAdded = bUserAdded;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitGame
// (Defined, Event, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Error                          (Parm, OutParm, NeedCtorLink)

void AGameInfo::InitGame(const struct FString& Options, struct FString* Error)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGame");

	AGameInfo_InitGame_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Error != nullptr)
		*Error = params.Error;
}


// Function Engine.GameInfo.HasOption
// (Defined, Static, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 InKey                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_HasOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.HasOption");

	AGameInfo_HasOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ParseOption
// (Defined, Static, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 InKey                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::STATIC_ParseOption(const struct FString& Options, const struct FString& InKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ParseOption");

	AGameInfo_ParseOption_Params params;
	params.Options = Options;
	params.InKey = InKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetKeyValue
// (Defined, Static, Public)
// Parameters:
// struct FString                 Pair                           (Parm, NeedCtorLink)
// struct FString                 key                            (Parm, OutParm, NeedCtorLink)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)

void AGameInfo::STATIC_GetKeyValue(const struct FString& Pair, struct FString* key, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetKeyValue");

	AGameInfo_GetKeyValue_Params params;
	params.Pair = Pair;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (key != nullptr)
		*key = params.key;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.GameInfo.GrabOption
// (Defined, Static, Public)
// Parameters:
// struct FString                 Options                        (Parm, OutParm, NeedCtorLink)
// struct FString                 Result                         (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_GrabOption(struct FString* Options, struct FString* Result)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GrabOption");

	AGameInfo_GrabOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Options != nullptr)
		*Options = params.Options;
	if (Result != nullptr)
		*Result = params.Result;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DetailChange
// (Defined, Event, Public)

void AGameInfo::DetailChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DetailChange");

	AGameInfo_DetailChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetRPPFPS
// (Defined, Exec, Public)
// Parameters:
// float                          fps                            (Parm)

void AGameInfo::SetRPPFPS(float fps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetRPPFPS");

	AGameInfo_SetRPPFPS_Params params;
	params.fps = fps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetRPPTime
// (Defined, Exec, Public)
// Parameters:
// float                          limit                          (Parm)

void AGameInfo::SetRPPTime(float limit)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetRPPTime");

	AGameInfo_SetRPPTime_Params params;
	params.limit = limit;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.gamego
// (Defined, Exec, Public)

void AGameInfo::gamego()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.gamego");

	AGameInfo_gamego_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.gamestop
// (Defined, Exec, Public)

void AGameInfo::gamestop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.gamestop");

	AGameInfo_gamestop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.gamesetspeed
// (Defined, Exec, Public)
// Parameters:
// float                          t                              (Parm)

void AGameInfo::gamesetspeed(float t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.gamesetspeed");

	AGameInfo_gamesetspeed_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.showrespawn
// (Defined, Exec, Public)

void AGameInfo::showrespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.showrespawn");

	AGameInfo_showrespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetSpeed
// (Defined, Public)
// Parameters:
// float                          t                              (Parm)

void AGameInfo::SetSpeed(float t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetSpeed");

	AGameInfo_SetSpeed_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetGameSpeed
// (Defined, Public)
// Parameters:
// float                          t                              (Parm)

void AGameInfo::SetGameSpeed(float t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetGameSpeed");

	AGameInfo_SetGameSpeed_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AllowGameSpeedChange
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::AllowGameSpeedChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllowGameSpeedChange");

	AGameInfo_AllowGameSpeedChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SetPause
// (Defined, Public)
// Parameters:
// bool                           bPause                         (Parm)
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SetPause(bool bPause, class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetPause");

	AGameInfo_SetPause_Params params;
	params.bPause = bPause;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetServerPort
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetServerPort()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetServerPort");

	AGameInfo_GetServerPort_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetServerPlayers
// (Defined, Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetServerPlayers(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetServerPlayers");

	AGameInfo_GetServerPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.GameInfo.GetServerDetails
// (Defined, Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetServerDetails(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetServerDetails");

	AGameInfo_GetServerDetails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.GameInfo.GetNumPlayers
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetNumPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNumPlayers");

	AGameInfo_GetNumPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetServerInfo
// (Defined, Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AGameInfo::GetServerInfo(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetServerInfo");

	AGameInfo_GetServerInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.GameInfo.GetNetworkNumber
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::GetNetworkNumber()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetNetworkNumber");

	AGameInfo_GetNetworkNumber_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.InitMaplistHandler
// (Public)

void AGameInfo::InitMaplistHandler()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitMaplistHandler");

	AGameInfo_InitMaplistHandler_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitVoiceReplicationInfo
// (Defined, Public)

void AGameInfo::InitVoiceReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitVoiceReplicationInfo");

	AGameInfo_InitVoiceReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitGameReplicationInfo
// (Defined, Public)

void AGameInfo::InitGameReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitGameReplicationInfo");

	AGameInfo_InitGameReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.KickIdler
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AGameInfo::KickIdler(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.KickIdler");

	AGameInfo_KickIdler_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GameEnding
// (Defined, Event, Public)

void AGameInfo::GameEnding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GameEnding");

	AGameInfo_GameEnding_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Timer
// (Defined, Public)

void AGameInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Timer");

	AGameInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitLogging
// (Defined, Public)

void AGameInfo::InitLogging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitLogging");

	AGameInfo_InitLogging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Reset
// (Defined, Public)

void AGameInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Reset");

	AGameInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.LogRespawnStatistics
// (Defined, Public)

void AGameInfo::LogRespawnStatistics()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.LogRespawnStatistics");

	AGameInfo_LogRespawnStatistics_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.InitializeEveryPlayerStarts
// (Defined, Public)

void AGameInfo::InitializeEveryPlayerStarts()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.InitializeEveryPlayerStarts");

	AGameInfo_InitializeEveryPlayerStarts_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PostBeginPlay
// (Defined, Public)

void AGameInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PostBeginPlay");

	AGameInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NoBlood
// (Defined, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_NoBlood()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NoBlood");

	AGameInfo_NoBlood_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.UseLowGore
// (Defined, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::STATIC_UseLowGore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UseLowGore");

	AGameInfo_UseLowGore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ChangeMap
// (Defined, Public)
// Parameters:
// int                            ContextID                      (Parm)

void AGameInfo::ChangeMap(int ContextID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ChangeMap");

	AGameInfo_ChangeMap_Params params;
	params.ContextID = ContextID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TeamQueueAnnouncement
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// struct FString                 ASoundName                     (Parm, NeedCtorLink)
// unsigned char                  AnnouncementLevel              (Parm)
// TEnumAsByte<EAPriority>        Priority                       (OptionalParm, Parm)
// unsigned char                  Switch                         (OptionalParm, Parm)

void AGameInfo::TeamQueueAnnouncement(unsigned char Team, const struct FString& ASoundName, unsigned char AnnouncementLevel, TEnumAsByte<EAPriority> Priority, unsigned char Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TeamQueueAnnouncement");

	AGameInfo_TeamQueueAnnouncement_Params params;
	params.Team = Team;
	params.ASoundName = ASoundName;
	params.AnnouncementLevel = AnnouncementLevel;
	params.Priority = Priority;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TeamReceiveLocalizedMessageDistance
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FVector                 vLocation                      (OptionalParm, Parm)
// float                          fMaxDist                       (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)

void AGameInfo::TeamReceiveLocalizedMessageDistance(unsigned char Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, const struct FVector& vLocation, float fMaxDist, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TeamReceiveLocalizedMessageDistance");

	AGameInfo_TeamReceiveLocalizedMessageDistance_Params params;
	params.Team = Team;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;
	params.vLocation = vLocation;
	params.fMaxDist = fMaxDist;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.TeamReceiveLocalizedMessage
// (Defined, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameInfo::TeamReceiveLocalizedMessage(unsigned char Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.TeamReceiveLocalizedMessage");

	AGameInfo_TeamReceiveLocalizedMessage_Params params;
	params.Team = Team;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AllReceiveLocalizedMessage
// (Defined, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameInfo::AllReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllReceiveLocalizedMessage");

	AGameInfo_AllReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.FindPlayerByID
// (Defined, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameInfo::FindPlayerByID(int PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.FindPlayerByID");

	AGameInfo_FindPlayerByID_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.PrecacheGore
// (Defined, Static, Public)

void AGameInfo::STATIC_PrecacheGore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PrecacheGore");

	AGameInfo_PrecacheGore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PrecacheGameAnnouncements
// (Defined, Static, Public)
// Parameters:
// class AAnnouncerVoice*         V                              (Parm)
// bool                           bRewardSounds                  (Parm)

void AGameInfo::STATIC_PrecacheGameAnnouncements(class AAnnouncerVoice* V, bool bRewardSounds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PrecacheGameAnnouncements");

	AGameInfo_PrecacheGameAnnouncements_Params params;
	params.V = V;
	params.bRewardSounds = bRewardSounds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PrecacheGameSkeletalMeshes
// (Static, Public)
// Parameters:
// class ALevelInfo*              myLevel                        (Parm)

void AGameInfo::STATIC_PrecacheGameSkeletalMeshes(class ALevelInfo* myLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PrecacheGameSkeletalMeshes");

	AGameInfo_PrecacheGameSkeletalMeshes_Params params;
	params.myLevel = myLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PrecacheGameStaticMeshes
// (Static, Public)
// Parameters:
// class ALevelInfo*              myLevel                        (Parm)

void AGameInfo::STATIC_PrecacheGameStaticMeshes(class ALevelInfo* myLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PrecacheGameStaticMeshes");

	AGameInfo_PrecacheGameStaticMeshes_Params params;
	params.myLevel = myLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PrecacheGameTextures
// (Static, Public)
// Parameters:
// class ALevelInfo*              myLevel                        (Parm)

void AGameInfo::STATIC_PrecacheGameTextures(class ALevelInfo* myLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PrecacheGameTextures");

	AGameInfo_PrecacheGameTextures_Params params;
	params.myLevel = myLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Precache
// (Defined, Static, Public)
// Parameters:
// class ALevelInfo*              Level                          (Parm)

void AGameInfo::STATIC_Precache(class ALevelInfo* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Precache");

	AGameInfo_Precache_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdatePrecacheSkeletalMeshes
// (Defined, Public)

void AGameInfo::UpdatePrecacheSkeletalMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdatePrecacheSkeletalMeshes");

	AGameInfo_UpdatePrecacheSkeletalMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdatePrecacheStaticMeshes
// (Defined, Public)

void AGameInfo::UpdatePrecacheStaticMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdatePrecacheStaticMeshes");

	AGameInfo_UpdatePrecacheStaticMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.UpdatePrecacheMaterials
// (Defined, Public)

void AGameInfo::UpdatePrecacheMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.UpdatePrecacheMaterials");

	AGameInfo_UpdatePrecacheMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.Destroyed
// (Defined, Public)

void AGameInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.Destroyed");

	AGameInfo_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.SetOldTeamInfo
// (Event, Public)
// Parameters:
// class AGameReplicationInfo*    OldGRI                         (Parm)

void AGameInfo::SetOldTeamInfo(class AGameReplicationInfo* OldGRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SetOldTeamInfo");

	AGameInfo_SetOldTeamInfo_Params params;
	params.OldGRI = OldGRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.GetBootySeedValue
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameInfo::GetBootySeedValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetBootySeedValue");

	AGameInfo_GetBootySeedValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.ForceSetGRIInitialState
// (Defined, Event, Public)

void AGameInfo::ForceSetGRIInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceSetGRIInitialState");

	AGameInfo_ForceSetGRIInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForceSetInitialState
// (Defined, Event, Public)

void AGameInfo::ForceSetInitialState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceSetInitialState");

	AGameInfo_ForceSetInitialState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForcePostNetBeginPlay
// (Defined, Event, Public)

void AGameInfo::ForcePostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForcePostNetBeginPlay");

	AGameInfo_ForcePostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForcePostBeginPlay
// (Defined, Event, Public)

void AGameInfo::ForcePostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForcePostBeginPlay");

	AGameInfo_ForcePostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForceBeginPlay
// (Defined, Event, Public)

void AGameInfo::ForceBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForceBeginPlay");

	AGameInfo_ForceBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.ForcePreBeginPlay
// (Defined, Event, Public)

void AGameInfo::ForcePreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.ForcePreBeginPlay");

	AGameInfo_ForcePreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.PreBeginPlay
// (Defined, Public)

void AGameInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.PreBeginPlay");

	AGameInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AnnounceSentryGun
// (Defined, Public)
// Parameters:
// class AController*             Caller                         (Parm)

void AGameInfo::AnnounceSentryGun(class AController* Caller)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AnnounceSentryGun");

	AGameInfo_AnnounceSentryGun_Params params;
	params.Caller = Caller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AnnounceUAV
// (Defined, Public)
// Parameters:
// class AController*             Caller                         (Parm)

void AGameInfo::AnnounceUAV(class AController* Caller)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AnnounceUAV");

	AGameInfo_AnnounceUAV_Params params;
	params.Caller = Caller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AnnounceHelicopter
// (Defined, Public)
// Parameters:
// class AController*             Caller                         (Parm)

void AGameInfo::AnnounceHelicopter(class AController* Caller)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AnnounceHelicopter");

	AGameInfo_AnnounceHelicopter_Params params;
	params.Caller = Caller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.AnnounceArtillery
// (Defined, Public)
// Parameters:
// class AController*             Caller                         (Parm)

void AGameInfo::AnnounceArtillery(class AController* Caller)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AnnounceArtillery");

	AGameInfo_AnnounceArtillery_Params params;
	params.Caller = Caller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.NativeSettingAfterChangedHost
// (Final, Native, Public)

void AGameInfo::NativeSettingAfterChangedHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.NativeSettingAfterChangedHost");

	AGameInfo_NativeSettingAfterChangedHost_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameInfo.LoadMapList
// (Final, Native, Static, Public)
// Parameters:
// struct FString                 MapPrefix                      (Parm, NeedCtorLink)
// TArray<struct FString>         Maps                           (Parm, OutParm, NeedCtorLink)

void AGameInfo::STATIC_LoadMapList(const struct FString& MapPrefix, TArray<struct FString>* Maps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.LoadMapList");

	AGameInfo_LoadMapList_Params params;
	params.MapPrefix = MapPrefix;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Maps != nullptr)
		*Maps = params.Maps;
}


// Function Engine.GameInfo.DeletePackage
// (Final, Native, Public)
// Parameters:
// struct FString                 PackageName                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::DeletePackage(const struct FString& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DeletePackage");

	AGameInfo_DeletePackage_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.SavePackage
// (Final, Native, Public)
// Parameters:
// struct FString                 PackageName                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::SavePackage(const struct FString& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.SavePackage");

	AGameInfo_SavePackage_Params params;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.AllDataObjects
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  objClass                       (Parm)
// class UObject*                 obj                            (Parm, OutParm)
// struct FString                 PackageName                    (Parm, NeedCtorLink)

void AGameInfo::AllDataObjects(class UClass* objClass, const struct FString& PackageName, class UObject** obj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.AllDataObjects");

	AGameInfo_AllDataObjects_Params params;
	params.objClass = objClass;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (obj != nullptr)
		*obj = params.obj;
}


// Function Engine.GameInfo.LoadDataObject
// (Final, Native, Public)
// Parameters:
// class UClass*                  objClass                       (Parm)
// struct FString                 objName                        (Parm, NeedCtorLink)
// struct FString                 PackageName                    (Parm, NeedCtorLink)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* AGameInfo::LoadDataObject(class UClass* objClass, const struct FString& objName, const struct FString& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.LoadDataObject");

	AGameInfo_LoadDataObject_Params params;
	params.objClass = objClass;
	params.objName = objName;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.DeleteDataObject
// (Final, Native, Public)
// Parameters:
// class UClass*                  objClass                       (Parm)
// struct FString                 objName                        (Parm, NeedCtorLink)
// struct FString                 PackageName                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameInfo::DeleteDataObject(class UClass* objClass, const struct FString& objName, const struct FString& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.DeleteDataObject");

	AGameInfo_DeleteDataObject_Params params;
	params.objClass = objClass;
	params.objName = objName;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.CreateDataObject
// (Final, Native, Public)
// Parameters:
// class UClass*                  objClass                       (Parm)
// struct FString                 objName                        (Parm, NeedCtorLink)
// struct FString                 PackageName                    (Parm, NeedCtorLink)
// class UObject*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UObject* AGameInfo::CreateDataObject(class UClass* objClass, const struct FString& objName, const struct FString& PackageName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.CreateDataObject");

	AGameInfo_CreateDataObject_Params params;
	params.objClass = objClass;
	params.objName = objName;
	params.PackageName = PackageName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameInfo.GetSavedGames
// (Final, Native, Public)
// Parameters:
// class UManifest*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UManifest* AGameInfo::GetSavedGames()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameInfo.GetSavedGames");

	AGameInfo_GetSavedGames_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.DriverLeftVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AMutator::DriverLeftVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverLeftVehicle");

	AMutator_DriverLeftVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CanLeaveVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CanLeaveVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CanLeaveVehicle");

	AMutator_CanLeaveVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.DriverEnteredVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)

void AMutator::DriverEnteredVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.DriverEnteredVehicle");

	AMutator_DriverEnteredVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CanEnterVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CanEnterVehicle(class AVehicle* V, class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CanEnterVehicle");

	AMutator_CanEnterVehicle_Params params;
	params.V = V;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.ServerTraveling
// (Defined, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bItems                         (Parm)

void AMutator::ServerTraveling(const struct FString& URL, bool bItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ServerTraveling");

	AMutator_ServerTraveling_Params params;
	params.URL = URL;
	params.bItems = bItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.OverrideDownload
// (Defined, Event, Public)
// Parameters:
// struct FString                 PlayerIP                       (Parm, NeedCtorLink)
// struct FString                 PlayerID                       (Parm, NeedCtorLink)
// struct FString                 PlayerURL                      (Parm, NeedCtorLink)
// struct FString                 RedirectURL                    (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::OverrideDownload(const struct FString& PlayerIP, const struct FString& PlayerID, const struct FString& PlayerURL, struct FString* RedirectURL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.OverrideDownload");

	AMutator_OverrideDownload_Params params;
	params.PlayerIP = PlayerIP;
	params.PlayerID = PlayerID;
	params.PlayerURL = PlayerURL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RedirectURL != nullptr)
		*RedirectURL = params.RedirectURL;

	return params.ReturnValue;
}


// Function Engine.Mutator.MutatorFillPlayInfo
// (Defined, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void AMutator::MutatorFillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.MutatorFillPlayInfo");

	AMutator_MutatorFillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ParseChatPercVar
// (Defined, Public)
// Parameters:
// class AController*             Who                            (Parm)
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMutator::ParseChatPercVar(class AController* Who, const struct FString& Cmd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ParseChatPercVar");

	AMutator_ParseChatPercVar_Params params;
	params.Who = Who;
	params.Cmd = Cmd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetServerPlayers
// (Defined, Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AMutator::GetServerPlayers(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetServerPlayers");

	AMutator_GetServerPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.Mutator.GetServerDetails
// (Defined, Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AMutator::GetServerDetails(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetServerDetails");

	AMutator_GetServerDetails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.Mutator.PlayerChangedClass
// (Defined, Public)
// Parameters:
// class AController*             aPlayer                        (Parm)

void AMutator::PlayerChangedClass(class AController* aPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PlayerChangedClass");

	AMutator_PlayerChangedClass_Params params;
	params.aPlayer = aPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.CheckReplacement
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// unsigned char                  bSuperRelevant                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CheckReplacement(class AActor* Other, unsigned char* bSuperRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckReplacement");

	AMutator_CheckReplacement_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bSuperRelevant != nullptr)
		*bSuperRelevant = params.bSuperRelevant;

	return params.ReturnValue;
}


// Function Engine.Mutator.CheckRelevance
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::CheckRelevance(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.CheckRelevance");

	AMutator_CheckRelevance_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.IsRelevant
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// unsigned char                  bSuperRelevant                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::IsRelevant(class AActor* Other, unsigned char* bSuperRelevant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.IsRelevant");

	AMutator_IsRelevant_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bSuperRelevant != nullptr)
		*bSuperRelevant = params.bSuperRelevant;

	return params.ReturnValue;
}


// Function Engine.Mutator.AlwaysKeep
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::AlwaysKeep(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AlwaysKeep");

	AMutator_AlwaysKeep_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.ReplaceWith
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FString                 aClassName                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::ReplaceWith(class AActor* Other, const struct FString& aClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ReplaceWith");

	AMutator_ReplaceWith_Params params;
	params.Other = Other;
	params.aClassName = aClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.NewRecommendCombo
// (Defined, Public)
// Parameters:
// struct FString                 ComboName                      (Parm, NeedCtorLink)
// class AAIController*           C                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMutator::NewRecommendCombo(const struct FString& ComboName, class AAIController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NewRecommendCombo");

	AMutator_NewRecommendCombo_Params params;
	params.ComboName = ComboName;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.RecommendCombo
// (Defined, Public)
// Parameters:
// struct FString                 ComboName                      (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMutator::RecommendCombo(const struct FString& ComboName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.RecommendCombo");

	AMutator_RecommendCombo_Params params;
	params.ComboName = ComboName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.AddMutator
// (Defined, Public)
// Parameters:
// class AMutator*                M                              (Parm)

void AMutator::AddMutator(class AMutator* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.AddMutator");

	AMutator_AddMutator_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.MyDefaultWeapon
// (Defined, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AMutator::MyDefaultWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.MyDefaultWeapon");

	AMutator_MyDefaultWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetInventoryClassOverride
// (Defined, Public)
// Parameters:
// struct FString                 InventoryClassName             (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMutator::GetInventoryClassOverride(const struct FString& InventoryClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetInventoryClassOverride");

	AMutator_GetInventoryClassOverride_Params params;
	params.InventoryClassName = InventoryClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetInventoryClass
// (Defined, Public)
// Parameters:
// struct FString                 InventoryClassName             (Parm, NeedCtorLink)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AMutator::GetInventoryClass(const struct FString& InventoryClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetInventoryClass");

	AMutator_GetInventoryClass_Params params;
	params.InventoryClassName = InventoryClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.GetDefaultWeapon
// (Defined, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AMutator::GetDefaultWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.GetDefaultWeapon");

	AMutator_GetDefaultWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.ModifyPlayer
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void AMutator::ModifyPlayer(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyPlayer");

	AMutator_ModifyPlayer_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.NotifyLogout
// (Defined, Public)
// Parameters:
// class AController*             Exiting                        (Parm)

void AMutator::NotifyLogout(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.NotifyLogout");

	AMutator_NotifyLogout_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.ModifyLogin
// (Defined, Public)
// Parameters:
// struct FString                 Portal                         (Parm, OutParm, NeedCtorLink)
// struct FString                 Options                        (Parm, OutParm, NeedCtorLink)

void AMutator::ModifyLogin(struct FString* Portal, struct FString* Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.ModifyLogin");

	AMutator_ModifyLogin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Portal != nullptr)
		*Portal = params.Portal;
	if (Options != nullptr)
		*Options = params.Options;
}


// Function Engine.Mutator.Mutate
// (Defined, Public)
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)
// class APlayerController*       Sender                         (Parm)

void AMutator::Mutate(const struct FString& MutateString, class APlayerController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Mutate");

	AMutator_Mutate_Params params;
	params.MutateString = MutateString;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.Destroyed
// (Defined, Public)

void AMutator::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.Destroyed");

	AMutator_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Mutator.MutatorIsAllowed
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMutator::MutatorIsAllowed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.MutatorIsAllowed");

	AMutator_MutatorIsAllowed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Mutator.PreBeginPlay
// (Defined, Event, Public)

void AMutator::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Mutator.PreBeginPlay");

	AMutator_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AvoidMarker.StartleBots
// (Defined, Public)

void AAvoidMarker::StartleBots()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidMarker.StartleBots");

	AAvoidMarker_StartleBots_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AvoidMarker.RelevantTo
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAvoidMarker::RelevantTo(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidMarker.RelevantTo");

	AAvoidMarker_RelevantTo_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AvoidMarker.Touch
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AAvoidMarker::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AvoidMarker.Touch");

	AAvoidMarker_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JumpDest.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AJumpDest::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpDest.SuggestMovePreparation");

	AJumpDest_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JumpDest.DoJump
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void AJumpDest::DoJump(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpDest.DoJump");

	AJumpDest_DoJump_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JumpDest.SpecialCost
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AJumpDest::SpecialCost(class APawn* Other, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpDest.SpecialCost");

	AJumpDest_SpecialCost_Params params;
	params.Other = Other;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JumpDest.GetPathIndex
// (Defined, Public)
// Parameters:
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AJumpDest::GetPathIndex(class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpDest.GetPathIndex");

	AJumpDest_GetPathIndex_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.JumpPad.PostTouch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AJumpPad::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpPad.PostTouch");

	AJumpPad_PostTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JumpPad.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AJumpPad::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpPad.Touch");

	AJumpPad_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JumpPad.Reset
// (Defined, Public)

void AJumpPad::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpPad.Reset");

	AJumpPad_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.JumpPad.PostBeginPlay
// (Defined, Public)

void AJumpPad::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.JumpPad.PostBeginPlay");

	AJumpPad_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventoryAttachment.InitFor
// (Defined, Public)
// Parameters:
// class AInventory*              i                              (Parm)

void AInventoryAttachment::InitFor(class AInventory* i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventoryAttachment.InitFor");

	AInventoryAttachment_InitFor_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.GetBoneTipLocation1st
// (Defined, Simulated, Public)
// Parameters:
// struct FCoords                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoords AWeaponAttachment::GetBoneTipLocation1st()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.GetBoneTipLocation1st");

	AWeaponAttachment_GetBoneTipLocation1st_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponAttachment.GetBoneTipLocation3rd
// (Defined, Simulated, Public)
// Parameters:
// struct FCoords                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FCoords AWeaponAttachment::GetBoneTipLocation3rd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.GetBoneTipLocation3rd");

	AWeaponAttachment_GetBoneTipLocation3rd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponAttachment.GetBoneNameRotation
// (Simulated, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName AWeaponAttachment::GetBoneNameRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.GetBoneNameRotation");

	AWeaponAttachment_GetBoneNameRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponAttachment.GetBoneNameTip
// (Simulated, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName AWeaponAttachment::GetBoneNameTip()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.GetBoneNameTip");

	AWeaponAttachment_GetBoneNameTip_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponAttachment.wLoadOut
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            iID                            (Parm)
// int                            iAddPartsID                    (Parm)

void AWeaponAttachment::wLoadOut(int iID, int iAddPartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.wLoadOut");

	AWeaponAttachment_wLoadOut_Params params;
	params.iID = iID;
	params.iAddPartsID = iAddPartsID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.UpdatePenetrateHit
// (Defined, Event, Public)
// Parameters:
// class AActor*                  mHitActor                      (Parm)
// struct FVector                 mHitLocation                   (Parm)
// struct FVector                 mHitNormal                     (Parm)
// class UMaterial*               mHitMaterial                   (Parm)
// int                            mLastHitIdx                    (Parm)

void AWeaponAttachment::UpdatePenetrateHit(class AActor* mHitActor, const struct FVector& mHitLocation, const struct FVector& mHitNormal, class UMaterial* mHitMaterial, int mLastHitIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.UpdatePenetrateHit");

	AWeaponAttachment_UpdatePenetrateHit_Params params;
	params.mHitActor = mHitActor;
	params.mHitLocation = mHitLocation;
	params.mHitNormal = mHitNormal;
	params.mHitMaterial = mHitMaterial;
	params.mLastHitIdx = mLastHitIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.UpdateHit
// (Event, Public)
// Parameters:
// class AActor*                  HitActor                       (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void AWeaponAttachment::UpdateHit(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.UpdateHit");

	AWeaponAttachment_UpdateHit_Params params;
	params.HitActor = HitActor;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.CheckForSplash
// (Defined, Simulated, Public)
// Parameters:
// int                            nIndex                         (Parm)
// int                            i                              (Parm)

void AWeaponAttachment::CheckForSplash(int nIndex, int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.CheckForSplash");

	AWeaponAttachment_CheckForSplash_Params params;
	params.nIndex = nIndex;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.ThirdPersonEffects
// (Defined, Simulated, Event, Public)

void AWeaponAttachment::ThirdPersonEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.ThirdPersonEffects");

	AWeaponAttachment_ThirdPersonEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.FakeThirdPersonEffects
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  HitActor                       (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void AWeaponAttachment::FakeThirdPersonEffects(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.FakeThirdPersonEffects");

	AWeaponAttachment_FakeThirdPersonEffects_Params params;
	params.HitActor = HitActor;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.FakeUpdateTracer
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 LastHitLocation                (Parm)

void AWeaponAttachment::FakeUpdateTracer(const struct FVector& LastHitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.FakeUpdateTracer");

	AWeaponAttachment_FakeUpdateTracer_Params params;
	params.LastHitLocation = LastHitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.Destroyed
// (Defined, Simulated, Public)

void AWeaponAttachment::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.Destroyed");

	AWeaponAttachment_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponAttachment.ClearArray
// (Defined, Simulated, Public)

void AWeaponAttachment::ClearArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponAttachment.ClearArray");

	AWeaponAttachment_ClearArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.GetAllCharacters
// (Static, Public)
// Parameters:
// TArray<struct FString>         Chars                          (Parm, OutParm, NeedCtorLink)

void ATeamInfo::STATIC_GetAllCharacters(TArray<struct FString>* Chars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetAllCharacters");

	ATeamInfo_GetAllCharacters_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Chars != nullptr)
		*Chars = params.Chars;
}


// Function Engine.TeamInfo.SetCharacters
// (Static, Public)
// Parameters:
// TArray<struct FString>         Chars                          (Parm, NeedCtorLink)

void ATeamInfo::STATIC_SetCharacters(TArray<struct FString> Chars)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.SetCharacters");

	ATeamInfo_SetCharacters_Params params;
	params.Chars = Chars;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.RemoveFromTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)

void ATeamInfo::RemoveFromTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.RemoveFromTeam");

	ATeamInfo_RemoveFromTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.TeamInfo.AddToTeam
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeamInfo::AddToTeam(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.AddToTeam");

	ATeamInfo_AddToTeam_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ATeamInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetHumanReadableName");

	ATeamInfo_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.BelongsOnTeam
// (Defined, Public)
// Parameters:
// class UClass*                  PawnClass                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeamInfo::BelongsOnTeam(class UClass* PawnClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.BelongsOnTeam");

	ATeamInfo_BelongsOnTeam_Params params;
	params.PawnClass = PawnClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.GetUAVTime
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ATeamInfo::GetUAVTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.GetUAVTime");

	ATeamInfo_GetUAVTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.IsUAVOn
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeamInfo::IsUAVOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.IsUAVOn");

	ATeamInfo_IsUAVOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.TeamInfo.SetUAV
// (Defined, Public)

void ATeamInfo::SetUAV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.TeamInfo.SetUAV");

	ATeamInfo_SetUAV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Door.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADoor::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Door.SuggestMovePreparation");

	ADoor_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Door.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADoor::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Door.ProceedWithMove");

	ADoor_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Door.SpecialHandling
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ADoor::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Door.SpecialHandling");

	ADoor_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Door.MoverClosed
// (Defined, Public)

void ADoor::MoverClosed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Door.MoverClosed");

	ADoor_MoverClosed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Door.MoverOpened
// (Defined, Public)

void ADoor::MoverOpened()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Door.MoverOpened");

	ADoor_MoverOpened_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Door.PostBeginPlay
// (Defined, Public)

void ADoor::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Door.PostBeginPlay");

	ADoor_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Ladder.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALadder::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ladder.SuggestMovePreparation");

	ALadder_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserzoneInfo.GetMaxCalcTime
// (Defined, Event, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUserzoneInfo::GetMaxCalcTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.GetMaxCalcTime");

	UUserzoneInfo_GetMaxCalcTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserzoneInfo.SetScoreboardHud
// (Defined, Public)
// Parameters:
// class AHUD*                    _hud                           (Parm)

void UUserzoneInfo::SetScoreboardHud(class AHUD* _hud)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.SetScoreboardHud");

	UUserzoneInfo_SetScoreboardHud_Params params;
	params._hud = _hud;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserzoneInfo.GetScreenPos
// (Defined, Event, Public)
// Parameters:
// int                            nGroupIndex                    (Parm)
// int                            nPosX                          (Parm, OutParm)
// int                            nPosY                          (Parm, OutParm)

void UUserzoneInfo::GetScreenPos(int nGroupIndex, int* nPosX, int* nPosY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.GetScreenPos");

	UUserzoneInfo_GetScreenPos_Params params;
	params.nGroupIndex = nGroupIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (nPosX != nullptr)
		*nPosX = params.nPosX;
	if (nPosY != nullptr)
		*nPosY = params.nPosY;
}


// Function Engine.UserzoneInfo.GetCellIndex
// (Defined, Public)
// Parameters:
// struct FVector                 kPos                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UUserzoneInfo::GetCellIndex(const struct FVector& kPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.GetCellIndex");

	UUserzoneInfo_GetCellIndex_Params params;
	params.kPos = kPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserzoneInfo.GetInterpolationPos
// (Defined, Public)
// Parameters:
// struct FVector                 kStartPos                      (Parm)
// struct FVector                 kEndPos                        (Parm)
// float                          A                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UUserzoneInfo::GetInterpolationPos(const struct FVector& kStartPos, const struct FVector& kEndPos, float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.GetInterpolationPos");

	UUserzoneInfo_GetInterpolationPos_Params params;
	params.kStartPos = kStartPos;
	params.kEndPos = kEndPos;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UserzoneInfo.AddCalcTime
// (Defined, Event, Public)
// Parameters:
// struct FVector                 kStartPos                      (Parm)
// struct FVector                 kEndPos                        (Parm)
// float                          fTime                          (Parm)

void UUserzoneInfo::AddCalcTime(const struct FVector& kStartPos, const struct FVector& kEndPos, float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.AddCalcTime");

	UUserzoneInfo_AddCalcTime_Params params;
	params.kStartPos = kStartPos;
	params.kEndPos = kEndPos;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserzoneInfo.ResetCalcTime
// (Defined, Public)

void UUserzoneInfo::ResetCalcTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.ResetCalcTime");

	UUserzoneInfo_ResetCalcTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserzoneInfo.Destroy
// (Defined, Public)

void UUserzoneInfo::Destroy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.Destroy");

	UUserzoneInfo_Destroy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UserzoneInfo.CalcMapSize
// (Defined, Public)
// Parameters:
// float                          _fCellSize                     (Parm)

void UUserzoneInfo::CalcMapSize(float _fCellSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UserzoneInfo.CalcMapSize");

	UUserzoneInfo_CalcMapSize_Params params;
	params._fCellSize = _fCellSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PotentialClimbWatcher.Tick
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APotentialClimbWatcher::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PotentialClimbWatcher.Tick");

	APotentialClimbWatcher_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.CausePainTo
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::CausePainTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.CausePainTo");

	APhysicsVolume_CausePainTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PlayExitSplash
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::PlayExitSplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PlayExitSplash");

	APhysicsVolume_PlayExitSplash_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.UnTouch
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.UnTouch");

	APhysicsVolume_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PlayEntrySplash
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::PlayEntrySplash(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PlayEntrySplash");

	APhysicsVolume_PlayEntrySplash_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Touch
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Touch");

	APhysicsVolume_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void APhysicsVolume::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Trigger");

	APhysicsVolume_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.TimerPop
// (Defined, Public)
// Parameters:
// class AVolumeTimer*            t                              (Parm)

void APhysicsVolume::TimerPop(class AVolumeTimer* t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.TimerPop");

	APhysicsVolume_TimerPop_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.BaseChange
// (Defined, Singular, Event, Public)

void APhysicsVolume::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.BaseChange");

	APhysicsVolume_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PlayerPawnDiedInVolume
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void APhysicsVolume::PlayerPawnDiedInVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PlayerPawnDiedInVolume");

	APhysicsVolume_PlayerPawnDiedInVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnLeavingVolume
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void APhysicsVolume::PawnLeavingVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnLeavingVolume");

	APhysicsVolume_PawnLeavingVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PawnEnteredVolume
// (Defined, Simulated, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void APhysicsVolume::PawnEnteredVolume(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PawnEnteredVolume");

	APhysicsVolume_PawnEnteredVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorLeavingVolume
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::ActorLeavingVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorLeavingVolume");

	APhysicsVolume_ActorLeavingVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.ActorEnteredVolume
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::ActorEnteredVolume(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.ActorEnteredVolume");

	APhysicsVolume_ActorEnteredVolume_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PhysicsChangedFor
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APhysicsVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PhysicsChangedFor");

	APhysicsVolume_PhysicsChangedFor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.Reset
// (Defined, Public)

void APhysicsVolume::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.Reset");

	APhysicsVolume_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PostBeginPlay
// (Defined, Simulated, Public)

void APhysicsVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PostBeginPlay");

	APhysicsVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PhysicsVolume.PreBeginPlay
// (Defined, Simulated, Public)

void APhysicsVolume::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PhysicsVolume.PreBeginPlay");

	APhysicsVolume_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PhysicsChangedFor
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ALadderVolume::PhysicsChangedFor(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PhysicsChangedFor");

	ALadderVolume_PhysicsChangedFor_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnLeavingVolume
// (Defined, Simulated, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ALadderVolume::PawnLeavingVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnLeavingVolume");

	ALadderVolume_PawnLeavingVolume_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.PawnEnteredVolume
// (Defined, Simulated, Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ALadderVolume::PawnEnteredVolume(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PawnEnteredVolume");

	ALadderVolume_PawnEnteredVolume_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderVolume.InUse
// (Defined, Public)
// Parameters:
// class APawn*                   Ignored                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALadderVolume::InUse(class APawn* Ignored)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.InUse");

	ALadderVolume_InUse_Params params;
	params.Ignored = Ignored;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderVolume.PostBeginPlay
// (Defined, Simulated, Public)

void ALadderVolume::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderVolume.PostBeginPlay");

	ALadderVolume_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DefaultPhysicsVolume.Destroyed
// (Defined, Public)

void ADefaultPhysicsVolume::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DefaultPhysicsVolume.Destroyed");

	ADefaultPhysicsVolume_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LineOfSightTrigger.Timer
// (Defined, Public)

void ALineOfSightTrigger::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LineOfSightTrigger.Timer");

	ALineOfSightTrigger_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LineOfSightTrigger.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void ALineOfSightTrigger::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LineOfSightTrigger.Trigger");

	ALineOfSightTrigger_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LineOfSightTrigger.PlayerSeesMe
// (Defined, Event, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void ALineOfSightTrigger::PlayerSeesMe(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LineOfSightTrigger.PlayerSeesMe");

	ALineOfSightTrigger_PlayerSeesMe_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LineOfSightTrigger.PostBeginPlay
// (Defined, Public)

void ALineOfSightTrigger::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LineOfSightTrigger.PostBeginPlay");

	ALineOfSightTrigger_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIScript.TakeOver
// (Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AAIScript::TakeOver(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIScript.TakeOver");

	AAIScript_TakeOver_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIScript.GetMoveTarget
// (Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AAIScript::GetMoveTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIScript.GetMoveTarget");

	AAIScript_GetMoveTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIScript.SpawnControllerFor
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AAIScript::SpawnControllerFor(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIScript.SpawnControllerFor");

	AAIScript_SpawnControllerFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DamageType.GetWeaponClass
// (Defined, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADamageType::STATIC_GetWeaponClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.GetWeaponClass");

	ADamageType_GetWeaponClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.GetHitEffects
// (Static, Public)
// Parameters:
// class UClass*                  HitEffects                     (Parm, OutParm)
// int                            VictemHealth                   (Parm)

void ADamageType::STATIC_GetHitEffects(int VictemHealth, class UClass** HitEffects)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.GetHitEffects");

	ADamageType_GetHitEffects_Params params;
	params.VictemHealth = VictemHealth;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (HitEffects != nullptr)
		*HitEffects = params.HitEffects;
}


// Function Engine.DamageType.IsOfType
// (Defined, Static, Public)
// Parameters:
// int                            Description                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADamageType::STATIC_IsOfType(int Description)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.IsOfType");

	ADamageType_IsOfType_Params params;
	params.Description = Description;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.GetPawnDamageSound
// (Defined, Static, Public)
// Parameters:
// class USound*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class USound* ADamageType::STATIC_GetPawnDamageSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.GetPawnDamageSound");

	ADamageType_GetPawnDamageSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.GetPawnDamageEmitter
// (Defined, Static, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// float                          Damage                         (Parm)
// struct FVector                 Momentum                       (Parm)
// class APawn*                   Victim                         (Parm)
// bool                           bLowDetail                     (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ADamageType::STATIC_GetPawnDamageEmitter(const struct FVector& HitLocation, float Damage, const struct FVector& Momentum, class APawn* Victim, bool bLowDetail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.GetPawnDamageEmitter");

	ADamageType_GetPawnDamageEmitter_Params params;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.Momentum = Momentum;
	params.Victim = Victim;
	params.bLowDetail = bLowDetail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.GetPawnDamageEffect
// (Defined, Static, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// float                          Damage                         (Parm)
// struct FVector                 Momentum                       (Parm)
// class APawn*                   Victim                         (Parm)
// bool                           bLowDetail                     (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ADamageType::STATIC_GetPawnDamageEffect(const struct FVector& HitLocation, float Damage, const struct FVector& Momentum, class APawn* Victim, bool bLowDetail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.GetPawnDamageEffect");

	ADamageType_GetPawnDamageEffect_Params params;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.Momentum = Momentum;
	params.Victim = Victim;
	params.bLowDetail = bLowDetail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.SuicideMessage
// (Defined, Static, Public)
// Parameters:
// class APlayerReplicationInfo*  Victim                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADamageType::STATIC_SuicideMessage(class APlayerReplicationInfo* Victim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.SuicideMessage");

	ADamageType_SuicideMessage_Params params;
	params.Victim = Victim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.DeathMessage
// (Defined, Static, Public)
// Parameters:
// class APlayerReplicationInfo*  Killer                         (Parm)
// class APlayerReplicationInfo*  Victim                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ADamageType::STATIC_DeathMessage(class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.DeathMessage");

	ADamageType_DeathMessage_Params params;
	params.Killer = Killer;
	params.Victim = Victim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.DamageType.ScoreKill
// (Defined, Static, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)

void ADamageType::STATIC_ScoreKill(class AController* Killer, class AController* Killed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.ScoreKill");

	ADamageType_ScoreKill_Params params;
	params.Killer = Killer;
	params.Killed = Killed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DamageType.IncrementKills
// (Static, Public)
// Parameters:
// class AController*             Killer                         (Parm)

void ADamageType::STATIC_IncrementKills(class AController* Killer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DamageType.IncrementKills");

	ADamageType_IncrementKills_Params params;
	params.Killer = Killer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleTrigger.Reset
// (Defined, Public)

void ASVehicleTrigger::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleTrigger.Reset");

	ASVehicleTrigger_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleTrigger.UsedBy
// (Defined, Public)
// Parameters:
// class APawn*                   User                           (Parm)

void ASVehicleTrigger::UsedBy(class APawn* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleTrigger.UsedBy");

	ASVehicleTrigger_UsedBy_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleTrigger.Trigger
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void ASVehicleTrigger::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleTrigger.Trigger");

	ASVehicleTrigger_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleTrigger.PostBeginPlay
// (Defined, Public)

void ASVehicleTrigger::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleTrigger.PostBeginPlay");

	ASVehicleTrigger_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleFactory.Trigger
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void ASVehicleFactory::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleFactory.Trigger");

	ASVehicleFactory_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleFactory.VehicleUnPossessed
// (Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void ASVehicleFactory::VehicleUnPossessed(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleFactory.VehicleUnPossessed");

	ASVehicleFactory_VehicleUnPossessed_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleFactory.VehiclePossessed
// (Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void ASVehicleFactory::VehiclePossessed(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleFactory.VehiclePossessed");

	ASVehicleFactory_VehiclePossessed_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleFactory.VehicleDestroyed
// (Defined, Event, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void ASVehicleFactory::VehicleDestroyed(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleFactory.VehicleDestroyed");

	ASVehicleFactory_VehicleDestroyed_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SVehicleFactory.PreBeginPlay
// (Defined, Public)

void ASVehicleFactory::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SVehicleFactory.PreBeginPlay");

	ASVehicleFactory_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VehiclePart.Activate
// (Public)
// Parameters:
// bool                           bActive                        (Parm)

void AVehiclePart::Activate(bool bActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VehiclePart.Activate");

	AVehiclePart_Activate_Params params;
	params.bActive = bActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VehiclePart.Update
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AVehiclePart::Update(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VehiclePart.Update");

	AVehiclePart_Update_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ChangeSkillAddValue
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)
// int                            addValue                       (Parm)

void AController::ChangeSkillAddValue(int SkillID, int addValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ChangeSkillAddValue");

	AController_ChangeSkillAddValue_Params params;
	params.SkillID = SkillID;
	params.addValue = addValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientEnableSkill
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)

void AController::ClientEnableSkill(int SkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientEnableSkill");

	AController_ClientEnableSkill_Params params;
	params.SkillID = SkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetActiveSkill
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)

void AController::SetActiveSkill(int SkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetActiveSkill");

	AController_SetActiveSkill_Params params;
	params.SkillID = SkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerSkillUsedByWeapon
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iWeaponID                      (Parm)

void AController::ServerSkillUsedByWeapon(int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerSkillUsedByWeapon");

	AController_ServerSkillUsedByWeapon_Params params;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SkillUsedByWeapon
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)

void AController::SkillUsedByWeapon(int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SkillUsedByWeapon");

	AController_SkillUsedByWeapon_Params params;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsSpecialMode_Pistol
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_Pistol(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_Pistol");

	AController_IsSpecialMode_Pistol_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_Grenade
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_Grenade(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_Grenade");

	AController_IsSpecialMode_Grenade_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_MG
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_MG(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_MG");

	AController_IsSpecialMode_MG_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_FlameThrower
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_FlameThrower(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_FlameThrower");

	AController_IsSpecialMode_FlameThrower_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_SG
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_SG(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_SG");

	AController_IsSpecialMode_SG_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_Hold_Weapon
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_Hold_Weapon(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_Hold_Weapon");

	AController_IsSpecialMode_Hold_Weapon_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_SR
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_SR(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_SR");

	AController_IsSpecialMode_SR_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_RPG
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_RPG(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_RPG");

	AController_IsSpecialMode_RPG_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsSpecialMode_Knife
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsSpecialMode_Knife(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsSpecialMode_Knife");

	AController_IsSpecialMode_Knife_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsPermitSpecialMode
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// int                            KeyF                           (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsPermitSpecialMode(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType, int KeyF)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsPermitSpecialMode");

	AController_IsPermitSpecialMode_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;
	params.KeyF = KeyF;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsFinishSpecificBoneRotate
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsFinishSpecificBoneRotate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsFinishSpecificBoneRotate");

	AController_IsFinishSpecificBoneRotate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetCaller
// (Defined, Public)
// Parameters:
// class AController*             ReturnValue                    (Parm, OutParm, ReturnParm)

class AController* AController::GetCaller()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetCaller");

	AController_GetCaller_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyVehicle
// (Defined, Public)
// Parameters:
// class AVehicle*                V                              (Parm)

void AController::NotifyVehicle(class AVehicle* V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyVehicle");

	AController_NotifyVehicle_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientUAV
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UAVDuration                    (Parm)

void AController::ClientUAV(int UAVDuration)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientUAV");

	AController_ClientUAV_Params params;
	params.UAVDuration = UAVDuration;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AllowFire
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::AllowFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AllowFire");

	AController_AllowFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.ReceiveMessage_QuestType4
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRDifficult                    (OptionalParm, Parm)
// int                            iRRound                        (OptionalParm, Parm)

void AController::ReceiveMessage_QuestType4(class UClass* Message, int Switch, int iRDifficult, int iRRound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveMessage_QuestType4");

	AController_ReceiveMessage_QuestType4_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iRDifficult = iRDifficult;
	params.iRRound = iRRound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveMessage_QuestType3
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRDifficult                    (OptionalParm, Parm)
// int                            iRMap                          (OptionalParm, Parm)

void AController::ReceiveMessage_QuestType3(class UClass* Message, int Switch, int iRDifficult, int iRMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveMessage_QuestType3");

	AController_ReceiveMessage_QuestType3_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iRDifficult = iRDifficult;
	params.iRMap = iRMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveMessage_QuestType2
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRMode                         (OptionalParm, Parm)
// int                            iRMap                          (OptionalParm, Parm)
// int                            iRMin                          (OptionalParm, Parm)
// int                            iRSec                          (OptionalParm, Parm)

void AController::ReceiveMessage_QuestType2(class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveMessage_QuestType2");

	AController_ReceiveMessage_QuestType2_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iRMode = iRMode;
	params.iRMap = iRMap;
	params.iRMin = iRMin;
	params.iRSec = iRSec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveMessage_QuestType1
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRWeaponType                   (OptionalParm, Parm)
// int                            iRweaponId                     (OptionalParm, Parm)

void AController::ReceiveMessage_QuestType1(class UClass* Message, int Switch, int iRWeaponType, int iRweaponId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveMessage_QuestType1");

	AController_ReceiveMessage_QuestType1_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iRWeaponType = iRWeaponType;
	params.iRweaponId = iRweaponId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClipAirStrikeLocation
// (Defined, Public)
// Parameters:
// struct FVector                 vMin                           (Parm, OutParm)
// struct FVector                 vMax                           (Parm, OutParm)
// TArray<struct FVector>         vLocation                      (Parm, NeedCtorLink)

void AController::ClipAirStrikeLocation(TArray<struct FVector> vLocation, struct FVector* vMin, struct FVector* vMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClipAirStrikeLocation");

	AController_ClipAirStrikeLocation_Params params;
	params.vLocation = vLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (vMin != nullptr)
		*vMin = params.vMin;
	if (vMax != nullptr)
		*vMax = params.vMax;
}


// Function Engine.Controller.CalcAirStrikeLocation
// (Defined, Public)
// Parameters:
// float                          fMaxDist                       (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AController::CalcAirStrikeLocation(float fMaxDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CalcAirStrikeLocation");

	AController_CalcAirStrikeLocation_Params params;
	params.fMaxDist = fMaxDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.ServerCallAirStrike
// (Net, NetReliable, Public)
// Parameters:
// class AController*             Caller                         (OptionalParm, Parm)

void AController::ServerCallAirStrike(class AController* Caller)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerCallAirStrike");

	AController_ServerCallAirStrike_Params params;
	params.Caller = Caller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerCallUAV
// (Defined, Net, NetReliable, Public)

void AController::ServerCallUAV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerCallUAV");

	AController_ServerCallUAV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsActiveMyTeamSentryGun
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsActiveMyTeamSentryGun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsActiveMyTeamSentryGun");

	AController_IsActiveMyTeamSentryGun_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsActiveUAV
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsActiveUAV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsActiveUAV");

	AController_IsActiveUAV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsActiveHelicopter
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsActiveHelicopter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsActiveHelicopter");

	AController_IsActiveHelicopter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.IsActiveAirFire
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsActiveAirFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsActiveAirFire");

	AController_IsActiveAirFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.ActivateSupplyItem
// (Public)
// Parameters:
// class AController*             callingController              (Parm)
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::ActivateSupplyItem(class AController* callingController, TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ActivateSupplyItem");

	AController_ActivateSupplyItem_Params params;
	params.callingController = callingController;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.CanUseActivateSupplyItem
// (Public)
// Parameters:
// class AController*             callingController              (Parm)
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)
// bool                           bShowMessage                   (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CanUseActivateSupplyItem(class AController* callingController, TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType, bool bShowMessage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanUseActivateSupplyItem");

	AController_CanUseActivateSupplyItem_Params params;
	params.callingController = callingController;
	params.eSupplyItemType = eSupplyItemType;
	params.bShowMessage = bShowMessage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.ZoomFOV
// (Defined, Public)
// Parameters:
// float                          fFOV                           (Parm)
// bool                           bInstant                       (Parm)

void AController::ZoomFOV(float fFOV, bool bInstant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ZoomFOV");

	AController_ZoomFOV_Params params;
	params.fFOV = fFOV;
	params.bInstant = bInstant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientReadyCoolTimeSkill
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            iSkillID                       (Parm)

void AController::ClientReadyCoolTimeSkill(int iSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientReadyCoolTimeSkill");

	AController_ClientReadyCoolTimeSkill_Params params;
	params.iSkillID = iSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CallCoolTimeSkill
// (Defined, Public)
// Parameters:
// int                            iSkillID                       (Parm)

void AController::CallCoolTimeSkill(int iSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CallCoolTimeSkill");

	AController_CallCoolTimeSkill_Params params;
	params.iSkillID = iSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientCallCoolTimeSkill
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            iSkillID                       (Parm)

void AController::ClientCallCoolTimeSkill(int iSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientCallCoolTimeSkill");

	AController_ClientCallCoolTimeSkill_Params params;
	params.iSkillID = iSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientOnEndIntervented
// (Defined, Net, NetReliable, Simulated, Public)

void AController::ClientOnEndIntervented()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientOnEndIntervented");

	AController_ClientOnEndIntervented_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientOnBeginIntervented
// (Defined, Net, NetReliable, Simulated, Public)

void AController::ClientOnBeginIntervented()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientOnBeginIntervented");

	AController_ClientOnBeginIntervented_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientOnBeginRound
// (Defined, Net, NetReliable, Simulated, Public)

void AController::ClientOnBeginRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientOnBeginRound");

	AController_ClientOnBeginRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientOnEndWaitingForStart
// (Defined, Net, NetReliable, Simulated, Public)

void AController::ClientOnEndWaitingForStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientOnEndWaitingForStart");

	AController_ClientOnEndWaitingForStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientOnBeginWaitingForStart
// (Defined, Net, NetReliable, Simulated, Public)

void AController::ClientOnBeginWaitingForStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientOnBeginWaitingForStart");

	AController_ClientOnBeginWaitingForStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientStopAllSound
// (Defined, Net, NetReliable, Public)
// Parameters:
// class AActor*                  aactor                         (Parm)

void AController::ClientStopAllSound(class AActor* aactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientStopAllSound");

	AController_ClientStopAllSound_Params params;
	params.aactor = aactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopAllSoundHK
// (Defined, Public)
// Parameters:
// class AActor*                  aactor                         (Parm)

void AController::StopAllSoundHK(class AActor* aactor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopAllSoundHK");

	AController_StopAllSoundHK_Params params;
	params.aactor = aactor;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetMoveAtt
// (Defined, Exec, Public)
// Parameters:
// struct FString                 gmv                            (Parm, NeedCtorLink)
// struct FString                 gmt                            (Parm, NeedCtorLink)
// struct FString                 gmd                            (Parm, NeedCtorLink)
// bool                           isSet                          (Parm)

void AController::SetMoveAtt(const struct FString& gmv, const struct FString& gmt, const struct FString& gmd, bool isSet)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetMoveAtt");

	AController_SetMoveAtt_Params params;
	params.gmv = gmv;
	params.gmt = gmt;
	params.gmd = gmd;
	params.isSet = isSet;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.WeaponReload
// (Defined, Exec, Public)

void AController::WeaponReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WeaponReload");

	AController_WeaponReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ParseChatPercVar
// (Defined, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AController::ParseChatPercVar(const struct FString& Cmd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ParseChatPercVar");

	AController_ParseChatPercVar_Params params;
	params.Cmd = Cmd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.DontReuseTaunt
// (Defined, Public)
// Parameters:
// int                            t                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::DontReuseTaunt(int t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DontReuseTaunt");

	AController_DontReuseTaunt_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.AutoTaunt
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::AutoTaunt()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AutoTaunt");

	AController_AutoTaunt_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.StartMonitoring
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// float                          MaxDist                        (Parm)

void AController::StartMonitoring(class APawn* P, float MaxDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StartMonitoring");

	AController_StartMonitoring_Params params;
	params.P = P;
	params.MaxDist = MaxDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MonitoredPawnAlert
// (Event, Public)

void AController::MonitoredPawnAlert()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MonitoredPawnAlert");

	AController_MonitoredPawnAlert_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerGivePawn
// (Public)

void AController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerGivePawn");

	AController_ServerGivePawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerReStartPlayer
// (Defined, Net, NetReliable, Public)

void AController::ServerReStartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerReStartPlayer");

	AController_ServerReStartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ChangedWeapon
// (Defined, Public)

void AController::ChangedWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ChangedWeapon");

	AController_ChangedWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetPRI
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerReplicationInfo* AController::GetPRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetPRI");

	AController_GetPRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.CheckFutureSight
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CheckFutureSight(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CheckFutureSight");

	AController_CheckFutureSight_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SetCaller
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)

void AController::SetCaller(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetCaller");

	AController_SetCaller_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetPawnFemale
// (Public)

void AController::SetPawnFemale()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetPawnFemale");

	AController_SetPawnFemale_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetPawnClass
// (Defined, Net, Public)
// Parameters:
// struct FString                 inClass                        (Parm, NeedCtorLink)
// struct FString                 InCharacter                    (Parm, NeedCtorLink)

void AController::SetPawnClass(const struct FString& inClass, const struct FString& InCharacter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetPawnClass");

	AController_SetPawnClass_Params params;
	params.inClass = inClass;
	params.InCharacter = InCharacter;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetWeapon
// (Defined, Net, NetReliable, Public)
// Parameters:
// class UClass*                  WeaponClass                    (Parm)

void AController::ClientSetWeapon(class UClass* WeaponClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetWeapon");

	AController_ClientSetWeapon_Params params;
	params.WeaponClass = WeaponClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSwitchToBestWeapon
// (Defined, Net, NetReliable, Public)

void AController::ClientSwitchToBestWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSwitchToBestWeapon");

	AController_ClientSwitchToBestWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SwitchToBestWeapon
// (Defined, Exec, Public)

void AController::SwitchToBestWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SwitchToBestWeapon");

	AController_SwitchToBestWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.DelayedWarning
// (Event, Public)

void AController::DelayedWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DelayedWarning");

	AController_DelayedWarning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveProjectileWarning
// (Defined, Public)
// Parameters:
// class AProjectile*             proj                           (Parm)

void AController::ReceiveProjectileWarning(class AProjectile* proj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveProjectileWarning");

	AController_ReceiveProjectileWarning_Params params;
	params.proj = proj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ReceiveWarning
// (Event, Public)
// Parameters:
// class APawn*                   shooter                        (Parm)
// float                          projSpeed                      (Parm)
// struct FVector                 FireDir                        (Parm)

void AController::ReceiveWarning(class APawn* shooter, float projSpeed, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ReceiveWarning");

	AController_ReceiveWarning_Params params;
	params.shooter = shooter;
	params.projSpeed = projSpeed;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InstantWarnTarget
// (Defined, Public)
// Parameters:
// class AActor*                  Target                         (Parm)
// struct FFireProperties         FiredAmmunition                (Parm)
// struct FVector                 FireDir                        (Parm)

void AController::InstantWarnTarget(class AActor* Target, const struct FFireProperties& FiredAmmunition, const struct FVector& FireDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InstantWarnTarget");

	AController_InstantWarnTarget_Params params;
	params.Target = Target;
	params.FiredAmmunition = FiredAmmunition;
	params.FireDir = FireDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AdjustAim
// (Defined, Public)
// Parameters:
// struct FFireProperties         FiredAmmunition                (Parm)
// struct FVector                 projStart                      (Parm)
// int                            AimError                       (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AController::AdjustAim(const struct FFireProperties& FiredAmmunition, const struct FVector& projStart, int AimError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AdjustAim");

	AController_AdjustAim_Params params;
	params.FiredAmmunition = FiredAmmunition;
	params.projStart = projStart;
	params.AimError = AimError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WeaponPreference
// (Defined, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AController::WeaponPreference(class AwWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WeaponPreference");

	AController_WeaponPreference_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.RateWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AController::RateWeapon(class AwWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RateWeapon");

	AController_RateWeapon_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.StopFiring
// (Defined, Public)

void AController::StopFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopFiring");

	AController_StopFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.FireWeaponAt
// (Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::FireWeaponAt(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FireWeaponAt");

	AController_FireWeaponAt_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.AdjustDesireFor
// (Public)
// Parameters:
// class APickup*                 P                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AController::AdjustDesireFor(class APickup* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AdjustDesireFor");

	AController_AdjustDesireFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.damageAttitudeTo
// (Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          Damage                         (Parm)

void AController::damageAttitudeTo(class APawn* Other, float Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.damageAttitudeTo");

	AController_damageAttitudeTo_Params params;
	params.Other = Other;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyKilled
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   Other                          (Parm)

void AController::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyKilled");

	AController_NotifyKilled_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.OnEndRound
// (Defined, Public)

void AController::OnEndRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.OnEndRound");

	AController_OnEndRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ShakeView
// (Public)
// Parameters:
// struct FVector                 shRotMag                       (Parm)
// struct FVector                 shRotRate                      (Parm)
// float                          shRotTime                      (Parm)
// struct FVector                 shOffsetMag                    (Parm)
// struct FVector                 shOffsetRate                   (Parm)
// float                          shOffsetTime                   (Parm)

void AController::ShakeView(const struct FVector& shRotMag, const struct FVector& shRotRate, float shRotTime, const struct FVector& shOffsetMag, const struct FVector& shOffsetRate, float shOffsetTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ShakeView");

	AController_ShakeView_Params params;
	params.shRotMag = shRotMag;
	params.shRotRate = shRotRate;
	params.shRotTime = shRotTime;
	params.shOffsetMag = shOffsetMag;
	params.shOffsetRate = shOffsetRate;
	params.shOffsetTime = shOffsetTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.DamageShake
// (Public)
// Parameters:
// int                            Damage                         (Parm)

void AController::DamageShake(int Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DamageShake");

	AController_DamageShake_Params params;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.EnemyNotVisible
// (Event, Public)

void AController::EnemyNotVisible()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EnemyNotVisible");

	AController_EnemyNotVisible_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeeMonster
// (Event, Public)
// Parameters:
// class APawn*                   Seen                           (Parm)

void AController::SeeMonster(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeeMonster");

	AController_SeeMonster_Params params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SeePlayer
// (Event, Public)
// Parameters:
// class APawn*                   Seen                           (Parm)

void AController::SeePlayer(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SeePlayer");

	AController_SeePlayer_Params params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.HearNoise
// (Event, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)

void AController::HearNoise(float Loudness, class AActor* NoiseMaker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HearNoise");

	AController_HearNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetupSpecialPathAbilities
// (Event, Public)

void AController::SetupSpecialPathAbilities()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetupSpecialPathAbilities");

	AController_SetupSpecialPathAbilities_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SuperDesireability
// (Defined, Event, Public)
// Parameters:
// class APickup*                 P                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AController::SuperDesireability(class APickup* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SuperDesireability");

	AController_SuperDesireability_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.Desireability
// (Defined, Event, Public)
// Parameters:
// class APickup*                 P                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AController::Desireability(class APickup* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Desireability");

	AController_Desireability_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FearThisSpot
// (Defined, Public)
// Parameters:
// class AAvoidMarker*            aSpot                          (Parm)

void AController::FearThisSpot(class AAvoidMarker* aSpot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FearThisSpot");

	AController_FearThisSpot_Params params;
	params.aSpot = aSpot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.UnderLift
// (Public)
// Parameters:
// class AMover*                  M                              (Parm)

void AController::UnderLift(class AMover* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnderLift");

	AController_UnderLift_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoverFinished
// (Public)

void AController::MoverFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoverFinished");

	AController_MoverFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.WaitForMover
// (Public)
// Parameters:
// class AMover*                  M                              (Parm)

void AController::WaitForMover(class AMover* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForMover");

	AController_WaitForMover_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PrepareForMove
// (Event, Public)
// Parameters:
// class ANavigationPoint*        Goal                           (Parm)
// class UReachSpec*              Path                           (Parm)

void AController::PrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PrepareForMove");

	AController_PrepareForMove_Params params;
	params.Goal = Goal;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AdjustToss
// (Defined, Public)
// Parameters:
// float                          TSpeed                         (Parm)
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// bool                           bNormalize                     (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AController::AdjustToss(float TSpeed, const struct FVector& Start, const struct FVector& End, bool bNormalize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AdjustToss");

	AController_AdjustToss_Params params;
	params.TSpeed = TSpeed;
	params.Start = Start;
	params.End = End;
	params.bNormalize = bNormalize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WouldReactToSeeing
// (Defined, Public)
// Parameters:
// class APawn*                   Seen                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::WouldReactToSeeing(class APawn* Seen)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WouldReactToSeeing");

	AController_WouldReactToSeeing_Params params;
	params.Seen = Seen;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WouldReactToNoise
// (Defined, Public)
// Parameters:
// float                          Loudness                       (Parm)
// class AActor*                  NoiseMaker                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::WouldReactToNoise(float Loudness, class AActor* NoiseMaker)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WouldReactToNoise");

	AController_WouldReactToNoise_Params params;
	params.Loudness = Loudness;
	params.NoiseMaker = NoiseMaker;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.BotVoiceMessage
// (Public)
// Parameters:
// struct FName                   MessageType                    (Parm)
// unsigned char                  MessageID                      (Parm)
// class AController*             Sender                         (Parm)

void AController::BotVoiceMessage(const struct FName& MessageType, unsigned char MessageID, class AController* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.BotVoiceMessage");

	AController_BotVoiceMessage_Params params;
	params.MessageType = MessageType;
	params.MessageID = MessageID;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientVoiceMessage
// (Net, NetReliable, Public)
// Parameters:
// class APlayerReplicationInfo*  Sender                         (Parm)
// class APlayerReplicationInfo*  Recipient                      (Parm)
// struct FName                   MessageType                    (Parm)
// unsigned char                  MessageID                      (Parm)

void AController::ClientVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const struct FName& MessageType, unsigned char MessageID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientVoiceMessage");

	AController_ClientVoiceMessage_Params params;
	params.Sender = Sender;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.MessageID = MessageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SendVoiceMessage
// (Defined, Net, Public)
// Parameters:
// class APlayerReplicationInfo*  Sender                         (Parm)
// class APlayerReplicationInfo*  Recipient                      (Parm)
// struct FName                   MessageType                    (Parm)
// unsigned char                  MessageID                      (Parm)
// struct FName                   BroadcastType                  (Parm)

void AController::SendVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const struct FName& MessageType, unsigned char MessageID, const struct FName& BroadcastType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SendVoiceMessage");

	AController_SendVoiceMessage_Params params;
	params.Sender = Sender;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.MessageID = MessageID;
	params.BroadcastType = BroadcastType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AllowVoiceMessage
// (Defined, Public)
// Parameters:
// struct FName                   MessageType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::AllowVoiceMessage(const struct FName& MessageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AllowVoiceMessage");

	AController_AllowVoiceMessage_Params params;
	params.MessageType = MessageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.SendMessage
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Recipient                      (Parm)
// struct FName                   MessageType                    (Parm)
// unsigned char                  MessageID                      (Parm)
// float                          wait                           (Parm)
// struct FName                   BroadcastType                  (Parm)

void AController::SendMessage(class APlayerReplicationInfo* Recipient, const struct FName& MessageType, unsigned char MessageID, float wait, const struct FName& BroadcastType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SendMessage");

	AController_SendMessage_Params params;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.MessageID = MessageID;
	params.wait = wait;
	params.BroadcastType = BroadcastType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetMessageIndex
// (Defined, Public)
// Parameters:
// struct FName                   PhraseName                     (Parm)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AController::GetMessageIndex(const struct FName& PhraseName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetMessageIndex");

	AController_GetMessageIndex_Params params;
	params.PhraseName = PhraseName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetFacingDirection
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AController::GetFacingDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetFacingDirection");

	AController_GetFacingDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.RenderSpectatorFPWeapon
// (Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// bool                           bClearedZBuffer                (Parm)

void AController::RenderSpectatorFPWeapon(class UCanvas* Canvas, bool bClearedZBuffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RenderSpectatorFPWeapon");

	AController_RenderSpectatorFPWeapon_Params params;
	params.Canvas = Canvas;
	params.bClearedZBuffer = bClearedZBuffer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RenderOverlays
// (Simulated, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AController::RenderOverlays(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RenderOverlays");

	AController_RenderOverlays_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopPawnsAndControllers
// (Simulated, Public)

void AController::StopPawnsAndControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopPawnsAndControllers");

	AController_StopPawnsAndControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientRoundEnded
// (Defined, Net, NetReliable, Public)

void AController::ClientRoundEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientRoundEnded");

	AController_ClientRoundEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.RoundHasEnded
// (Defined, Public)

void AController::RoundHasEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RoundHasEnded");

	AController_RoundHasEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientGameEnded
// (Defined, Net, NetReliable, Public)

void AController::ClientGameEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientGameEnded");

	AController_ClientGameEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GameHasEnded
// (Defined, Public)

void AController::GameHasEnded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GameHasEnded");

	AController_GameHasEnded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.WantsSmoothedViewNative
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::WantsSmoothedViewNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WantsSmoothedViewNative");

	AController_WantsSmoothedViewNative_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WantsSmoothedView
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::WantsSmoothedView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WantsSmoothedView");

	AController_WantsSmoothedView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.AdjustView
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AController::AdjustView(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AdjustView");

	AController_AdjustView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AllowDetourTo
// (Defined, Event, Public)
// Parameters:
// class ANavigationPoint*        N                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::AllowDetourTo(class ANavigationPoint* N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AllowDetourTo");

	AController_AllowDetourTo_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.Destroyed
// (Defined, Simulated, Event, Public)

void AController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Destroyed");

	AController_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.DestroyPlayerReplicationInfo
// (Defined, Event, Public)

void AController::DestroyPlayerReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DestroyPlayerReplicationInfo");

	AController_DestroyPlayerReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.HandlePickup
// (Defined, Public)
// Parameters:
// class APickup*                 pick                           (Parm)

void AController::HandlePickup(class APickup* pick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandlePickup");

	AController_HandlePickup_Params params;
	params.pick = pick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SameTeamAs
// (Defined, Public)
// Parameters:
// class AController*             C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::SameTeamAs(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SameTeamAs");

	AController_SameTeamAs_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetTeamNum
// (Simulated, Native, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AController::GetTeamNum()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetTeamNum");

	AController_GetTeamNum_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.InitPlayerReplicationInfo
// (Defined, Public)

void AController::InitPlayerReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InitPlayerReplicationInfo");

	AController_InitPlayerReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PostBeginPlay
// (Defined, Event, Public)

void AController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PostBeginPlay");

	AController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PreBeginPlay
// (Defined, Event, Public)

void AController::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PreBeginPlay");

	AController_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.HandleWalking
// (Defined, Public)

void AController::HandleWalking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.HandleWalking");

	AController_HandleWalking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Jump
// (Exec, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void AController::Jump(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Jump");

	AController_Jump_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.TickStance
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AController::TickStance(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.TickStance");

	AController_TickStance_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SendMessageSprintTime
// (Defined, Public)

void AController::SendMessageSprintTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SendMessageSprintTime");

	AController_SendMessageSprintTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.TickSprint
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AController::TickSprint(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.TickSprint");

	AController_TickSprint_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyChangeSprint
// (Public)
// Parameters:
// bool                           bValue                         (Parm)

void AController::NotifyChangeSprint(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyChangeSprint");

	AController_NotifyChangeSprint_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerSetVel
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FVector                 Vel                            (Parm)

void AController::ServerSetVel(const struct FVector& Vel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerSetVel");

	AController_ServerSetVel_Params params;
	params.Vel = Vel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ServerSetOldRun
// (Defined, Net, NetReliable, Public)
// Parameters:
// unsigned char                  bSetVal                        (Parm)
// unsigned char                  bHitVal                        (Parm)

void AController::ServerSetOldRun(unsigned char bSetVal, unsigned char bHitVal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ServerSetOldRun");

	AController_ServerSetOldRun_Params params;
	params.bSetVal = bSetVal;
	params.bHitVal = bHitVal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.IsBehindView
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::IsBehindView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.IsBehindView");

	AController_IsBehindView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PawnIsInPain
// (Public)
// Parameters:
// class APhysicsVolume*          PainVolume                     (Parm)

void AController::PawnIsInPain(class APhysicsVolume* PainVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PawnIsInPain");

	AController_PawnIsInPain_Params params;
	params.PainVolume = PainVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetFall
// (Public)

void AController::SetFall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetFall");

	AController_SetFall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyTakeHit
// (Defined, Public)
// Parameters:
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)

void AController::NotifyTakeHit(class APawn* instigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, int CollisionPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyTakeHit");

	AController_NotifyTakeHit_Params params;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.CollisionPart = CollisionPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyAddInventory
// (Public)
// Parameters:
// class AInventory*              NewItem                        (Parm)

void AController::NotifyAddInventory(class AInventory* NewItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyAddInventory");

	AController_NotifyAddInventory_Params params;
	params.NewItem = NewItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SetDoubleJump
// (Public)

void AController::SetDoubleJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SetDoubleJump");

	AController_SetDoubleJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyMissedJump
// (Event, Public)

void AController::NotifyMissedJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyMissedJump");

	AController_NotifyMissedJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyJumpApex
// (Event, Public)

void AController::NotifyJumpApex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyJumpApex");

	AController_NotifyJumpApex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyHitMover
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AMover*                  Wall                           (Parm)

void AController::NotifyHitMover(const struct FVector& HitNormal, class AMover* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHitMover");

	AController_NotifyHitMover_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyBump
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyBump(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyBump");

	AController_NotifyBump_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyFallingHitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)

void AController::NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyFallingHitWall");

	AController_NotifyFallingHitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyHitWall
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHitWall");

	AController_NotifyHitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyPostLanded
// (Event, Public)

void AController::NotifyPostLanded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPostLanded");

	AController_NotifyPostLanded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NotifyLanded
// (Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyLanded(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyLanded");

	AController_NotifyLanded_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyHeadVolumeChange
// (Event, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyHeadVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyHeadVolumeChange");

	AController_NotifyHeadVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.NotifyPhysicsVolumeChange
// (Event, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NotifyPhysicsVolumeChange");

	AController_NotifyPhysicsVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.LongFall
// (Event, Public)

void AController::LongFall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LongFall");

	AController_LongFall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Restart
// (Defined, Public)

void AController::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Restart");

	AController_Restart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PawnDied
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AController::PawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PawnDied");

	AController_PawnDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetLastWeapon
// (Defined, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AController::GetLastWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetLastWeapon");

	AController_GetLastWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.WasKilledBy
// (Public)
// Parameters:
// class AController*             Other                          (Parm)

void AController::WasKilledBy(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WasKilledBy");

	AController_WasKilledBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.UnPossess
// (Defined, Public)

void AController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.UnPossess");

	AController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Possess
// (Defined, Public)
// Parameters:
// class APawn*                   aPawn                          (Parm)

void AController::Possess(class APawn* aPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Possess");

	AController_Possess_Params params;
	params.aPawn = aPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.SoakStop
// (Event, Public)
// Parameters:
// struct FString                 problem                        (Parm, NeedCtorLink)

void AController::SoakStop(const struct FString& problem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.SoakStop");

	AController_SoakStop_Params params;
	params.problem = problem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AIHearSound
// (Event, Public)
// Parameters:
// class AActor*                  Actor                          (Parm)
// int                            id                             (Parm)
// class USound*                  S                              (Parm)
// struct FVector                 soundLocation                  (Parm)
// struct FVector                 Parameters                     (Parm)
// bool                           Attenuate                      (Parm)

void AController::AIHearSound(class AActor* Actor, int id, class USound* S, const struct FVector& soundLocation, const struct FVector& Parameters, bool Attenuate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AIHearSound");

	AController_AIHearSound_Params params;
	params.Actor = Actor;
	params.id = id;
	params.S = S;
	params.soundLocation = soundLocation;
	params.Parameters = Parameters;
	params.Attenuate = Attenuate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientDying
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)

void AController::ClientDying(class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientDying");

	AController_ClientDying_Params params;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetRotation
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void AController::ClientSetRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetRotation");

	AController_ClientSetRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientSetLocation
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FVector                 NewLocation                    (Parm)
// struct FRotator                NewRotation                    (Parm)

void AController::ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientSetLocation");

	AController_ClientSetLocation_Params params;
	params.NewLocation = NewLocation;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AvoidCertainDeath
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::AvoidCertainDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AvoidCertainDeath");

	AController_AvoidCertainDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.Reset
// (Defined, Public)

void AController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Reset");

	AController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.GetViewRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator AController::GetViewRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetViewRotation");

	AController_GetViewRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AController::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.GetHumanReadableName");

	AController_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.DisplayDebug
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AController::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.DisplayDebug");

	AController_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.Controller.ClientTestAllWeapons
// (Net, NetReliable, Public)

void AController::ClientTestAllWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientTestAllWeapons");

	AController_ClientTestAllWeapons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.ClientTestWeapon
// (Net, NetReliable, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)
// int                            iaWeaponID                     (Parm)

void AController::ClientTestWeapon(class AwWeapon* W, int iaWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.ClientTestWeapon");

	AController_ClientTestWeapon_Params params;
	params.W = W;
	params.iaWeaponID = iaWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.NeedsAdrenaline
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::NeedsAdrenaline()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.NeedsAdrenaline");

	AController_NeedsAdrenaline_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.AwardAdrenaline
// (Defined, Public)
// Parameters:
// float                          Amount                         (Parm)

void AController::AwardAdrenaline(float Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AwardAdrenaline");

	AController_AwardAdrenaline_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.wClientFreeze
// (Defined, Public)
// Parameters:
// float                          fTime                          (Parm)

void AController::wClientFreeze(float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.wClientFreeze");

	AController_wClientFreeze_Params params;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.wViewFlash
// (Defined, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void AController::wViewFlash(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.wViewFlash");

	AController_wViewFlash_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.wClientFlash
// (Defined, Net, Public)
// Parameters:
// float                          fTime                          (Parm)

void AController::wClientFlash(float fTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.wClientFlash");

	AController_wClientFlash_Params params;
	params.fTime = fTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PendingStasis
// (Defined, Public)

void AController::PendingStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PendingStasis");

	AController_PendingStasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.Cmd
// (Exec, Public)
// Parameters:
// struct FString                 P1                             (Parm, NeedCtorLink)
// struct FString                 P2                             (Parm, NeedCtorLink)
// struct FString                 p3                             (Parm, NeedCtorLink)
// struct FString                 p4                             (Parm, NeedCtorLink)
// struct FString                 p5                             (Parm, NeedCtorLink)

void AController::Cmd(const struct FString& P1, const struct FString& P2, const struct FString& p3, const struct FString& p4, const struct FString& p5)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.Cmd");

	AController_Cmd_Params params;
	params.P1 = P1;
	params.P2 = P2;
	params.p3 = p3;
	params.p4 = p4;
	params.p5 = p5;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MissedDodge
// (Event, Public)

void AController::MissedDodge()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MissedDodge");

	AController_MissedDodge_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MayDodgeToMoveTarget
// (Event, Public)

void AController::MayDodgeToMoveTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MayDodgeToMoveTarget");

	AController_MayDodgeToMoveTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MayFall
// (Event, Public)

void AController::MayFall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MayFall");

	AController_MayFall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.CanMakePathTo
// (Final, Native, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CanMakePathTo(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanMakePathTo");

	AController_CanMakePathTo_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.EndClimbLadder
// (Native, Public)

void AController::EndClimbLadder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EndClimbLadder");

	AController_EndClimbLadder_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.StopWaiting
// (Native, Public)

void AController::StopWaiting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.StopWaiting");

	AController_StopWaiting_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.InLatentExecution
// (Final, Native, Public)
// Parameters:
// int                            LatentActionNumber             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::InLatentExecution(int LatentActionNumber)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.InLatentExecution");

	AController_InLatentExecution_Params params;
	params.LatentActionNumber = LatentActionNumber;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.PickAnyTarget
// (Final, Native, Public)
// Parameters:
// float                          bestAim                        (Parm, OutParm)
// float                          BestDist                       (Parm, OutParm)
// struct FVector                 FireDir                        (Parm)
// struct FVector                 projStart                      (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::PickAnyTarget(const struct FVector& FireDir, const struct FVector& projStart, float* bestAim, float* BestDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickAnyTarget");

	AController_PickAnyTarget_Params params;
	params.FireDir = FireDir;
	params.projStart = projStart;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bestAim != nullptr)
		*bestAim = params.bestAim;
	if (BestDist != nullptr)
		*BestDist = params.BestDist;

	return params.ReturnValue;
}


// Function Engine.Controller.PickTarget
// (Final, Native, Public)
// Parameters:
// float                          bestAim                        (Parm, OutParm)
// float                          BestDist                       (Parm, OutParm)
// struct FVector                 FireDir                        (Parm)
// struct FVector                 projStart                      (Parm)
// float                          MaxRange                       (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AController::PickTarget(const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float* bestAim, float* BestDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickTarget");

	AController_PickTarget_Params params;
	params.FireDir = FireDir;
	params.projStart = projStart;
	params.MaxRange = MaxRange;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bestAim != nullptr)
		*bestAim = params.bestAim;
	if (BestDist != nullptr)
		*BestDist = params.BestDist;

	return params.ReturnValue;
}


// Function Engine.Controller.RemoveController
// (Final, Native, Public)

void AController::RemoveController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.RemoveController");

	AController_RemoveController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.AddController
// (Final, Native, Public)

void AController::AddController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.AddController");

	AController_AddController_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.FindBestSuperPickup
// (Final, Native, Public)
// Parameters:
// float                          MaxDist                        (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindBestSuperPickup(float MaxDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindBestSuperPickup");

	AController_FindBestSuperPickup_Params params;
	params.MaxDist = MaxDist;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindBestInventoryPath
// (Final, Native, Public)
// Parameters:
// float                          MinWeight                      (Parm, OutParm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindBestInventoryPath(float* MinWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindBestInventoryPath");

	AController_FindBestInventoryPath_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MinWeight != nullptr)
		*MinWeight = params.MinWeight;

	return params.ReturnValue;
}


// Function Engine.Controller.WaitForLanding
// (Final, Latent, Native, Public)

void AController::WaitForLanding()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.WaitForLanding");

	AController_WaitForLanding_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.PickWallAdjust
// (Final, Native, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::PickWallAdjust(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.PickWallAdjust");

	AController_PickWallAdjust_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.actorReachable
// (Final, Native, Public)
// Parameters:
// class AActor*                  anActor                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::actorReachable(class AActor* anActor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.actorReachable");

	AController_actorReachable_Params params;
	params.anActor = anActor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.pointReachable
// (Final, Native, Public)
// Parameters:
// struct FVector                 aPoint                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::pointReachable(const struct FVector& aPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.pointReachable");

	AController_pointReachable_Params params;
	params.aPoint = aPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.EAdjustJump
// (Final, Native, Public)
// Parameters:
// float                          BaseZ                          (Parm)
// float                          XYSpeed                        (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AController::EAdjustJump(float BaseZ, float XYSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.EAdjustJump");

	AController_EAdjustJump_Params params;
	params.BaseZ = BaseZ;
	params.XYSpeed = XYSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindRandomDest
// (Final, Native, Public)
// Parameters:
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AController::FindRandomDest()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindRandomDest");

	AController_FindRandomDest_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTowardNearest
// (Final, Native, Public)
// Parameters:
// class UClass*                  GoalClass                      (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTowardNearest");

	AController_FindPathTowardNearest_Params params;
	params.GoalClass = GoalClass;
	params.bWeightDetours = bWeightDetours;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToIntercept
// (Final, Native, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class AActor*                  RouteGoal                      (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathToIntercept(class APawn* P, class AActor* RouteGoal, bool bWeightDetours)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToIntercept");

	AController_FindPathToIntercept_Params params;
	params.P = P;
	params.RouteGoal = RouteGoal;
	params.bWeightDetours = bWeightDetours;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathToward
// (Final, Native, Public)
// Parameters:
// class AActor*                  anActor                        (Parm)
// bool                           bWeightDetours                 (OptionalParm, Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathToward(class AActor* anActor, bool bWeightDetours)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathToward");

	AController_FindPathToward_Params params;
	params.anActor = anActor;
	params.bWeightDetours = bWeightDetours;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FindPathTo
// (Final, Native, Public)
// Parameters:
// struct FVector                 aPoint                         (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AController::FindPathTo(const struct FVector& aPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FindPathTo");

	AController_FindPathTo_Params params;
	params.aPoint = aPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.CanSee
// (Final, Native, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::CanSee(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.CanSee");

	AController_CanSee_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.LineOfSightTo
// (Final, Native, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AController::LineOfSightTo(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.LineOfSightTo");

	AController_LineOfSightTo_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Controller.FinishRotation
// (Final, Latent, Native, Public)

void AController::FinishRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.FinishRotation");

	AController_FinishRotation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveToward
// (Final, Latent, Native, Public)
// Parameters:
// class AActor*                  NewTarget                      (Parm)
// class AActor*                  ViewFocus                      (OptionalParm, Parm)
// float                          DestinationOffset              (OptionalParm, Parm)
// bool                           bUseStrafing                   (OptionalParm, Parm)
// bool                           bShouldSprint                  (OptionalParm, Parm)

void AController::MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldSprint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveToward");

	AController_MoveToward_Params params;
	params.NewTarget = NewTarget;
	params.ViewFocus = ViewFocus;
	params.DestinationOffset = DestinationOffset;
	params.bUseStrafing = bUseStrafing;
	params.bShouldSprint = bShouldSprint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Controller.MoveTo
// (Final, Latent, Native, Public)
// Parameters:
// struct FVector                 NewDestination                 (Parm)
// class AActor*                  ViewFocus                      (OptionalParm, Parm)
// bool                           bShouldSprint                  (OptionalParm, Parm)
// struct FVector                 FocalPoint                     (OptionalParm, Parm)

void AController::MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, bool bShouldSprint, const struct FVector& FocalPoint)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Controller.MoveTo");

	AController_MoveTo_Params params;
	params.NewDestination = NewDestination;
	params.ViewFocus = ViewFocus;
	params.bShouldSprint = bShouldSprint;
	params.FocalPoint = FocalPoint;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetMyPawn
// (Defined, Public)
// Parameters:
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* APlayerController::GetMyPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetMyPawn");

	APlayerController_GetMyPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerSendCheatMsg
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)

void APlayerController::ServerSendCheatMsg(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSendCheatMsg");

	APlayerController_ServerSendCheatMsg_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendCheatMsg
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)

void APlayerController::SendCheatMsg(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendCheatMsg");

	APlayerController_SendCheatMsg_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddKill
// (Defined, Exec, Public)

void APlayerController::AddKill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddKill");

	APlayerController_AddKill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetKillNum
// (Defined, Exec, Public)
// Parameters:
// int                            i                              (Parm)

void APlayerController::SetKillNum(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetKillNum");

	APlayerController_SetKillNum_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisplayDebugPHJ
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void APlayerController::DisplayDebugPHJ(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisplayDebugPHJ");

	APlayerController_DisplayDebugPHJ_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisplayDebugChan1
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void APlayerController::DisplayDebugChan1(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisplayDebugChan1");

	APlayerController_DisplayDebugChan1_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.input_weapon
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerController::input_weapon(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.input_weapon");

	APlayerController_input_weapon_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.input_weaponex
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerController::input_weaponex(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.input_weaponex");

	APlayerController_input_weaponex_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReWeaponParam
// (Defined, Exec, Public)

void APlayerController::ReWeaponParam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReWeaponParam");

	APlayerController_ReWeaponParam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetWeaponTraceAim
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerController::SetWeaponTraceAim(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetWeaponTraceAim");

	APlayerController_SetWeaponTraceAim_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetWeaponTrace
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerController::SetWeaponTrace(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetWeaponTrace");

	APlayerController_SetWeaponTrace_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetWeaponTrace
// (Defined, Exec, Public)

void APlayerController::ResetWeaponTrace()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetWeaponTrace");

	APlayerController_ResetWeaponTrace_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetWeaponTraceIndex
// (Defined, Exec, Public)

void APlayerController::ResetWeaponTraceIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetWeaponTraceIndex");

	APlayerController_ResetWeaponTraceIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnsetTestAim
// (Defined, Exec, Public)

void APlayerController::UnsetTestAim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnsetTestAim");

	APlayerController_UnsetTestAim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetTestAim
// (Defined, Exec, Public)

void APlayerController::SetTestAim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetTestAim");

	APlayerController_SetTestAim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetRMax
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::SetRMax(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetRMax");

	APlayerController_SetRMax_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetRMin
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::SetRMin(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetRMin");

	APlayerController_SetRMin_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetASSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::SetASSpeed(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetASSpeed");

	APlayerController_SetASSpeed_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetASSize
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::SetASSize(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetASSize");

	APlayerController_SetASSize_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlusCollisionHeight
// (Defined, Exec, Public)
// Parameters:
// float                          A                              (Parm)

void APlayerController::PlusCollisionHeight(float A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlusCollisionHeight");

	APlayerController_PlusCollisionHeight_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowWebzenShop
// (Defined, Exec, Public)

void APlayerController::ShowWebzenShop()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowWebzenShop");

	APlayerController_ShowWebzenShop_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientChangeTcpTimeLimit
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientChangeTcpTimeLimit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientChangeTcpTimeLimit");

	APlayerController_ClientChangeTcpTimeLimit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.setsdrespawn
// (Defined, Exec, Public)

void APlayerController::setsdrespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.setsdrespawn");

	APlayerController_setsdrespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.setautostart
// (Defined, Exec, Public)

void APlayerController::setautostart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.setautostart");

	APlayerController_setautostart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUseSupplyItem
// (Defined, Public)
// Parameters:
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)

void APlayerController::ClientUseSupplyItem(TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUseSupplyItem");

	APlayerController_ClientUseSupplyItem_Params params;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUseSupplyItem
// (Defined, Net, NetReliable, Public)
// Parameters:
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)

void APlayerController::ServerUseSupplyItem(TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUseSupplyItem");

	APlayerController_ServerUseSupplyItem_Params params;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SMWL
// (Defined, Exec, Public)
// Parameters:
// struct FString                 swmode                         (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)

void APlayerController::SMWL(const struct FString& swmode, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SMWL");

	APlayerController_SMWL_Params params;
	params.swmode = swmode;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Test3
// (Defined, Exec, Public)
// Parameters:
// float                          fActive                        (Parm)

void APlayerController::Test3(float fActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Test3");

	APlayerController_Test3_Params params;
	params.fActive = fActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Test2
// (Defined, Exec, Public)
// Parameters:
// float                          fAniFrame                      (Parm)

void APlayerController::Test2(float fAniFrame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Test2");

	APlayerController_Test2_Params params;
	params.fAniFrame = fAniFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Test1
// (Defined, Exec, Public)
// Parameters:
// float                          fAniFrame                      (Parm)

void APlayerController::Test1(float fAniFrame)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Test1");

	APlayerController_Test1_Params params;
	params.fAniFrame = fAniFrame;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CheckChangeHostShowQS
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CheckChangeHostShowQS()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckChangeHostShowQS");

	APlayerController_CheckChangeHostShowQS_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.Bob
// (Defined, Exec, Public)
// Parameters:
// int                            idvalue                        (Parm)
// float                          Value                          (Parm)

void APlayerController::Bob(int idvalue, float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Bob");

	APlayerController_Bob_Params params;
	params.idvalue = idvalue;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Mark
// (Defined, Exec, Public)

void APlayerController::Mark()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Mark");

	APlayerController_Mark_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LODBias
// (Defined, Exec, Public)
// Parameters:
// float                          fBias                          (Parm)

void APlayerController::LODBias(float fBias)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LODBias");

	APlayerController_LODBias_Params params;
	params.fBias = fBias;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPawnCount
// (Defined, Exec, Public)

void APlayerController::GetPawnCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPawnCount");

	APlayerController_GetPawnCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EverySetPktLoss
// (Defined, Exec, Public)
// Parameters:
// int                            ms                             (Parm)

void APlayerController::EverySetPktLoss(int ms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EverySetPktLoss");

	APlayerController_EverySetPktLoss_Params params;
	params.ms = ms;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetPktLoss
// (Defined, Net, NetReliable, Exec, Public)
// Parameters:
// int                            ms                             (Parm)

void APlayerController::ClientSetPktLoss(int ms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetPktLoss");

	APlayerController_ClientSetPktLoss_Params params;
	params.ms = ms;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EverySetPktLag
// (Defined, Exec, Public)
// Parameters:
// int                            ms                             (Parm)

void APlayerController::EverySetPktLag(int ms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EverySetPktLag");

	APlayerController_EverySetPktLag_Params params;
	params.ms = ms;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetPktLag
// (Defined, Net, NetReliable, Exec, Public)
// Parameters:
// int                            ms                             (Parm)

void APlayerController::ClientSetPktLag(int ms)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetPktLag");

	APlayerController_ClientSetPktLag_Params params;
	params.ms = ms;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EverySos
// (Defined, Exec, Public)

void APlayerController::EverySos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EverySos");

	APlayerController_EverySos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSos
// (Defined, Net, NetReliable, Exec, Public)

void APlayerController::ClientSos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSos");

	APlayerController_ClientSos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Sos
// (Defined, Exec, Public)

void APlayerController::Sos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Sos");

	APlayerController_Sos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.everysmall
// (Defined, Exec, Public)

void APlayerController::everysmall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.everysmall");

	APlayerController_everysmall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSmall
// (Defined, Net, NetReliable, Exec, Public)

void APlayerController::ClientSmall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSmall");

	APlayerController_ClientSmall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.small
// (Defined, Exec, Public)

void APlayerController::small()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.small");

	APlayerController_small_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowE
// (Defined, Exec, Public)

void APlayerController::ShowE()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowE");

	APlayerController_ShowE_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientHoldFlag
// (Defined, Net, NetReliable, Simulated, Public)

void APlayerController::ClientHoldFlag()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientHoldFlag");

	APlayerController_ClientHoldFlag_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetDemoPackToMyInven
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* APlayerController::GetDemoPackToMyInven()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetDemoPackToMyInven");

	APlayerController_GetDemoPackToMyInven_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.DestroyEmitter
// (Defined, Simulated, Public)

void APlayerController::DestroyEmitter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DestroyEmitter");

	APlayerController_DestroyEmitter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PushAASNotice
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 sNotice                        (Parm, NeedCtorLink)
// float                          beginTime                      (Parm)
// unsigned char                  byLevel                        (Parm)

void APlayerController::PushAASNotice(const struct FString& sNotice, float beginTime, unsigned char byLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PushAASNotice");

	APlayerController_PushAASNotice_Params params;
	params.sNotice = sNotice;
	params.beginTime = beginTime;
	params.byLevel = byLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PushGameNotice
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 sNotice                        (Parm, NeedCtorLink)

void APlayerController::PushGameNotice(const struct FString& sNotice)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PushGameNotice");

	APlayerController_PushGameNotice_Params params;
	params.sNotice = sNotice;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AllClientDeleteSuppliesPositions
// (Defined, Simulated, Public)

void APlayerController::AllClientDeleteSuppliesPositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllClientDeleteSuppliesPositions");

	APlayerController_AllClientDeleteSuppliesPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientDeleteSuppliesPositions
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  act                            (Parm)

void APlayerController::ClientDeleteSuppliesPositions(class AActor* act)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientDeleteSuppliesPositions");

	APlayerController_ClientDeleteSuppliesPositions_Params params;
	params.act = act;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeVoiceObjectLanguage
// (Defined, Public)
// Parameters:
// struct FString                 voiceObjectName                (Parm, OutParm, NeedCtorLink)

void APlayerController::ChangeVoiceObjectLanguage(struct FString* voiceObjectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeVoiceObjectLanguage");

	APlayerController_ChangeVoiceObjectLanguage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (voiceObjectName != nullptr)
		*voiceObjectName = params.voiceObjectName;
}


// Function Engine.PlayerController.VoiceObjectNameSetting
// (Defined, Public)

void APlayerController::VoiceObjectNameSetting()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.VoiceObjectNameSetting");

	APlayerController_VoiceObjectNameSetting_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetVoiceLanguage
// (Defined, Public)
// Parameters:
// int                            iTeamIndex                     (Parm)

void APlayerController::SetVoiceLanguage(int iTeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetVoiceLanguage");

	APlayerController_SetVoiceLanguage_Params params;
	params.iTeamIndex = iTeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSpawnInLogin
// (Defined, Simulated, Public)
// Parameters:
// int                            iTeamIndex                     (Parm)

void APlayerController::ClientSpawnInLogin(int iTeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSpawnInLogin");

	APlayerController_ClientSpawnInLogin_Params params;
	params.iTeamIndex = iTeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnInLogin
// (Defined, Simulated, Public)
// Parameters:
// int                            iTeamIndex                     (Parm)

void APlayerController::SpawnInLogin(int iTeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnInLogin");

	APlayerController_SpawnInLogin_Params params;
	params.iTeamIndex = iTeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAddMagazine
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ClientAddMagazine(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddMagazine");

	APlayerController_ClientAddMagazine_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAddMagazine
// (Defined, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ServerAddMagazine(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAddMagazine");

	APlayerController_ServerAddMagazine_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientIncHealthPack
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ClientIncHealthPack(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIncHealthPack");

	APlayerController_ClientIncHealthPack_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerIncHealthPack
// (Defined, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ServerIncHealthPack(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerIncHealthPack");

	APlayerController_ServerIncHealthPack_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientBombDetection
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ClientBombDetection(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientBombDetection");

	APlayerController_ClientBombDetection_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerBombDetection
// (Defined, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ServerBombDetection(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerBombDetection");

	APlayerController_ServerBombDetection_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientQuickDemolition
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ClientQuickDemolition(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientQuickDemolition");

	APlayerController_ClientQuickDemolition_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerQuickDemolition
// (Defined, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ServerQuickDemolition(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerQuickDemolition");

	APlayerController_ServerQuickDemolition_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientQuickRespawn
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ClientQuickRespawn(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientQuickRespawn");

	APlayerController_ClientQuickRespawn_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerQuickRespawn
// (Defined, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ServerQuickRespawn(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerQuickRespawn");

	APlayerController_ServerQuickRespawn_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientIncExplosion
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ClientIncExplosion(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientIncExplosion");

	APlayerController_ClientIncExplosion_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerIncExplosion
// (Defined, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ServerIncExplosion(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerIncExplosion");

	APlayerController_ServerIncExplosion_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAddStamina
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ClientAddStamina(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAddStamina");

	APlayerController_ClientAddStamina_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAddStamina
// (Defined, Public)
// Parameters:
// bool                           bAdd                           (Parm)

void APlayerController::ServerAddStamina(bool bAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAddStamina");

	APlayerController_ServerAddStamina_Params params;
	params.bAdd = bAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCheckSkill
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientCheckSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCheckSkill");

	APlayerController_ClientCheckSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsBombDetection
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsBombDetection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsBombDetection");

	APlayerController_IsBombDetection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientTestAllWeapons
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientTestAllWeapons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTestAllWeapons");

	APlayerController_ClientTestAllWeapons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRequestWeapon
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iaWeaponID                     (Parm)

void APlayerController::ServerRequestWeapon(int iaWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRequestWeapon");

	APlayerController_ServerRequestWeapon_Params params;
	params.iaWeaponID = iaWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientTestWeapon
// (Defined, Net, NetReliable, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)
// int                            iaWeaponID                     (Parm)

void APlayerController::ClientTestWeapon(class AwWeapon* W, int iaWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTestWeapon");

	APlayerController_ClientTestWeapon_Params params;
	params.W = W;
	params.iaWeaponID = iaWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHidden
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientSetHidden()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHidden");

	APlayerController_ClientSetHidden_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SelectPrevWeapon
// (Defined, Exec, Public)

void APlayerController::SelectPrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SelectPrevWeapon");

	APlayerController_SelectPrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateOption
// (Defined, Public)

void APlayerController::UpdateOption()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateOption");

	APlayerController_UpdateOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlaySoundRadioMessage
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iKey                           (Parm)
// int                            iType                          (Parm)

void APlayerController::PlaySoundRadioMessage(int iKey, int iType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlaySoundRadioMessage");

	APlayerController_PlaySoundRadioMessage_Params params;
	params.iKey = iKey;
	params.iType = iType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReqUsingItem
// (Defined, Public)
// Parameters:
// unsigned char                  byKey                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::ReqUsingItem(unsigned char byKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReqUsingItem");

	APlayerController_ReqUsingItem_Params params;
	params.byKey = byKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerBuyItem
// (Defined, Net, NetReliable, Public)
// Parameters:
// unsigned char                  byIndex                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::ServerBuyItem(unsigned char byIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerBuyItem");

	APlayerController_ServerBuyItem_Params params;
	params.byIndex = byIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SelectItemBuy
// (Defined, Public)
// Parameters:
// int                            iKey                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::SelectItemBuy(int iKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SelectItemBuy");

	APlayerController_SelectItemBuy_Params params;
	params.iKey = iKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SelectRadioMessage
// (Defined, Public)
// Parameters:
// int                            iKey                           (Parm)

void APlayerController::SelectRadioMessage(int iKey)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SelectRadioMessage");

	APlayerController_SelectRadioMessage_Params params;
	params.iKey = iKey;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlaySoundKilled
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 strSound                       (Parm, NeedCtorLink)
// bool                           bExceptOwner                   (OptionalParm, Parm)

void APlayerController::PlaySoundKilled(const struct FString& strSound, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlaySoundKilled");

	APlayerController_PlaySoundKilled_Params params;
	params.strSound = strSound;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyKilled
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)
// class APawn*                   Other                          (Parm)

void APlayerController::NotifyKilled(class AController* Killer, class AController* Killed, class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyKilled");

	APlayerController_NotifyKilled_Params params;
	params.Killer = Killer;
	params.Killed = Killed;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTargetDied
// (Defined, Net, NetReliable, Public)
// Parameters:
// class AActor*                  Killer                         (Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void APlayerController::ClientSetViewTargetDied(class AActor* Killer, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTargetDied");

	APlayerController_ClientSetViewTargetDied_Params params;
	params.Killer = Killer;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HCheck
// (Defined, Exec, Public)

void APlayerController::HCheck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HCheck");

	APlayerController_HCheck_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Air
// (Defined, Exec, Public)

void APlayerController::Air()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Air");

	APlayerController_Air_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DLog
// (Defined, Exec, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void APlayerController::DLog(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DLog");

	APlayerController_DLog_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SelectQSlot
// (Defined, Simulated, Public)
// Parameters:
// int                            iIndex                         (Parm)

void APlayerController::SelectQSlot(int iIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SelectQSlot");

	APlayerController_SelectQSlot_Params params;
	params.iIndex = iIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetGRITimes
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            RemainingTime                  (Parm)
// int                            ElapsedTime                    (Parm)
// int                            RemainingMinute                (Parm)

void APlayerController::ClientSetGRITimes(int RemainingTime, int ElapsedTime, int RemainingMinute)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetGRITimes");

	APlayerController_ClientSetGRITimes_Params params;
	params.RemainingTime = RemainingTime;
	params.ElapsedTime = ElapsedTime;
	params.RemainingMinute = RemainingMinute;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSelectQSlot
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iIndex                         (Parm)

void APlayerController::ClientSelectQSlot(int iIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSelectQSlot");

	APlayerController_ClientSelectQSlot_Params params;
	params.iIndex = iIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceChangeQSlotIndex
// (Defined, Public)
// Parameters:
// int                            iIndex                         (Parm)

void APlayerController::ForceChangeQSlotIndex(int iIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceChangeQSlotIndex");

	APlayerController_ForceChangeQSlotIndex_Params params;
	params.iIndex = iIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSelectQSlot
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iIndex                         (Parm)

void APlayerController::ServerSelectQSlot(int iIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSelectQSlot");

	APlayerController_ServerSelectQSlot_Params params;
	params.iIndex = iIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerWarp
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerWarp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerWarp");

	APlayerController_ServerWarp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.gggb
// (Defined, Exec, Public)

void APlayerController::gggb()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.gggb");

	APlayerController_gggb_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ggga
// (Defined, Exec, Public)

void APlayerController::ggga()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ggga");

	APlayerController_ggga_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCallSentryGunInstall
// (Net, NetReliable, Public)
// Parameters:
// class AController*             callingController              (Parm)

void APlayerController::ServerCallSentryGunInstall(class AController* callingController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCallSentryGunInstall");

	APlayerController_ServerCallSentryGunInstall_Params params;
	params.callingController = callingController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerCallHelicopter
// (Defined, Net, NetReliable, Public)
// Parameters:
// class APawn*                   lastHeliPawn                   (OptionalParm, Parm)
// class AController*             Caller                         (OptionalParm, Parm)

void APlayerController::ServerCallHelicopter(class APawn* lastHeliPawn, class AController* Caller)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerCallHelicopter");

	APlayerController_ServerCallHelicopter_Params params;
	params.lastHeliPawn = lastHeliPawn;
	params.Caller = Caller;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowResultMenu
// (Defined, Simulated, Public)

void APlayerController::ShowResultMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowResultMenu");

	APlayerController_ShowResultMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisplayDebug
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void APlayerController::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisplayDebug");

	APlayerController_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.PlayerController.ShowVoteMenu
// (Defined, Exec, Public)

void APlayerController::ShowVoteMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowVoteMenu");

	APlayerController_ShowVoteMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LostChild
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APlayerController::LostChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LostChild");

	APlayerController_LostChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GainedChild
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void APlayerController::GainedChild(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GainedChild");

	APlayerController_GainedChild_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChatRestriction
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// unsigned char                  Type                           (Parm)

void APlayerController::ServerChatRestriction(int PlayerID, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChatRestriction");

	APlayerController_ServerChatRestriction_Params params;
	params.PlayerID = PlayerID;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRequestBanInfo
// (Net, NetReliable, Public)
// Parameters:
// int                            PlayerID                       (Parm)

void APlayerController::ServerRequestBanInfo(int PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRequestBanInfo");

	APlayerController_ServerRequestBanInfo_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChatDebug
// (Net, NetReliable, Public)

void APlayerController::ServerChatDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChatDebug");

	APlayerController_ServerChatDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChatDebug
// (Defined, Exec, Public)

void APlayerController::ChatDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChatDebug");

	APlayerController_ChatDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetActiveRoom
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            ChannelIndex                   (Parm)

void APlayerController::ClientSetActiveRoom(int ChannelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetActiveRoom");

	APlayerController_ClientSetActiveRoom_Params params;
	params.ChannelIndex = ChannelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeVoiceChatMode
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void APlayerController::ServerChangeVoiceChatMode(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeVoiceChatMode");

	APlayerController_ServerChangeVoiceChatMode_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetChatPassword
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 NewPassword                    (Parm, NeedCtorLink)

void APlayerController::ServerSetChatPassword(const struct FString& NewPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetChatPassword");

	APlayerController_ServerSetChatPassword_Params params;
	params.NewPassword = NewPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSpeak
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            ChannelIndex                   (Parm)
// struct FString                 ChannelPassword                (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ServerSpeak(int ChannelIndex, const struct FString& ChannelPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSpeak");

	APlayerController_ServerSpeak_Params params;
	params.ChannelIndex = ChannelIndex;
	params.ChannelPassword = ChannelPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerLeaveVoiceChannel
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            ChannelIndex                   (Parm)

void APlayerController::ServerLeaveVoiceChannel(int ChannelIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerLeaveVoiceChannel");

	APlayerController_ServerLeaveVoiceChannel_Params params;
	params.ChannelIndex = ChannelIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerJoinVoiceChannel
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            ChannelIndex                   (Parm)
// struct FString                 ChannelPassword                (OptionalParm, Parm, NeedCtorLink)
// TEnumAsByte<EJoinChatResult>   ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EJoinChatResult> APlayerController::ServerJoinVoiceChannel(int ChannelIndex, const struct FString& ChannelPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerJoinVoiceChannel");

	APlayerController_ServerJoinVoiceChannel_Params params;
	params.ChannelIndex = ChannelIndex;
	params.ChannelPassword = ChannelPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FindChannelPassword
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ChannelName                    (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::FindChannelPassword(const struct FString& ChannelName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindChannelPassword");

	APlayerController_FindChannelPassword_Params params;
	params.ChannelName = ChannelName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetChannelPassword
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ChannelName                    (Parm, NeedCtorLink)
// struct FString                 ChannelPassword                (Parm, NeedCtorLink)

void APlayerController::SetChannelPassword(const struct FString& ChannelName, const struct FString& ChannelPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetChannelPassword");

	APlayerController_SetChannelPassword_Params params;
	params.ChannelName = ChannelName;
	params.ChannelPassword = ChannelPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChatBan
// (Defined, Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// unsigned char                  Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::ChatBan(int PlayerID, unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChatBan");

	APlayerController_ChatBan_Params params;
	params.PlayerID = PlayerID;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ChangeVoiceChatMode
// (Defined, Simulated, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void APlayerController::ChangeVoiceChatMode(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeVoiceChatMode");

	APlayerController_ChangeVoiceChatMode_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AutoJoinVoiceChat
// (Simulated, Public)

void APlayerController::AutoJoinVoiceChat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AutoJoinVoiceChat");

	APlayerController_AutoJoinVoiceChat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetDefaultActiveChannel
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetDefaultActiveChannel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetDefaultActiveChannel");

	APlayerController_GetDefaultActiveChannel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.InitPrivateChatRoom
// (Defined, Public)

void APlayerController::InitPrivateChatRoom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitPrivateChatRoom");

	APlayerController_InitPrivateChatRoom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InitializeVoiceChat
// (Defined, Simulated, Public)

void APlayerController::InitializeVoiceChat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitializeVoiceChat");

	APlayerController_InitializeVoiceChat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DisableVoiceChat
// (Defined, Exec, Public)

void APlayerController::DisableVoiceChat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DisableVoiceChat");

	APlayerController_DisableVoiceChat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnableVoiceChat
// (Defined, Exec, Public)

void APlayerController::EnableVoiceChat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnableVoiceChat");

	APlayerController_EnableVoiceChat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetChatPassword
// (Defined, Exec, Public)
// Parameters:
// struct FString                 NewPassword                    (Parm, NeedCtorLink)

void APlayerController::SetChatPassword(const struct FString& NewPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetChatPassword");

	APlayerController_SetChatPassword_Params params;
	params.NewPassword = NewPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpeakLast
// (Defined, Exec, Public)

void APlayerController::SpeakLast()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpeakLast");

	APlayerController_SpeakLast_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpeakDefault
// (Defined, Exec, Public)

void APlayerController::SpeakDefault()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpeakDefault");

	APlayerController_SpeakDefault_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Speak
// (Defined, Exec, Public)
// Parameters:
// struct FString                 ChannelTitle                   (Parm, NeedCtorLink)

void APlayerController::Speak(const struct FString& ChannelTitle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Speak");

	APlayerController_Speak_Params params;
	params.ChannelTitle = ChannelTitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Leave
// (Defined, Exec, Public)
// Parameters:
// struct FString                 ChannelTitle                   (Parm, NeedCtorLink)

void APlayerController::Leave(const struct FString& ChannelTitle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Leave");

	APlayerController_Leave_Params params;
	params.ChannelTitle = ChannelTitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Join
// (Defined, Exec, Public)
// Parameters:
// struct FString                 ChanName                       (Parm, NeedCtorLink)
// struct FString                 ChanPwd                        (Parm, NeedCtorLink)

void APlayerController::Join(const struct FString& ChanName, const struct FString& ChanPwd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Join");

	APlayerController_Join_Params params;
	params.ChanName = ChanName;
	params.ChanPwd = ChanPwd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerVoiceCommand
// (Defined, Net, Public)
// Parameters:
// struct FString                 RecognizedString               (Parm, NeedCtorLink)

void APlayerController::ServerVoiceCommand(const struct FString& RecognizedString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVoiceCommand");

	APlayerController_ServerVoiceCommand_Params params;
	params.RecognizedString = RecognizedString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Command
// (Defined, Exec, Public)
// Parameters:
// struct FString                 RecognizedString               (Parm, NeedCtorLink)

void APlayerController::Command(const struct FString& RecognizedString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Command");

	APlayerController_Command_Params params;
	params.RecognizedString = RecognizedString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.VoiceCommand
// (Defined, Event, Public)
// Parameters:
// struct FString                 RecognizedString               (Parm, NeedCtorLink)
// struct FString                 RawString                      (Parm, NeedCtorLink)

void APlayerController::VoiceCommand(const struct FString& RecognizedString, const struct FString& RawString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.VoiceCommand");

	APlayerController_VoiceCommand_Params params;
	params.RecognizedString = RecognizedString;
	params.RawString = RawString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NeedNetNotify
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::NeedNetNotify()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NeedNetNotify");

	APlayerController_NeedNetNotify_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetCustomRewardAnnouncerClass
// (Simulated, Public)
// Parameters:
// struct FString                 NewAnnouncerClass              (Parm, NeedCtorLink)

void APlayerController::SetCustomRewardAnnouncerClass(const struct FString& NewAnnouncerClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCustomRewardAnnouncerClass");

	APlayerController_SetCustomRewardAnnouncerClass_Params params;
	params.NewAnnouncerClass = NewAnnouncerClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetCustomStatusAnnouncerClass
// (Simulated, Public)
// Parameters:
// struct FString                 NewAnnouncerClass              (Parm, NeedCtorLink)

void APlayerController::SetCustomStatusAnnouncerClass(const struct FString& NewAnnouncerClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetCustomStatusAnnouncerClass");

	APlayerController_SetCustomStatusAnnouncerClass_Params params;
	params.NewAnnouncerClass = NewAnnouncerClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetCustomRewardAnnouncerClass
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetCustomRewardAnnouncerClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetCustomRewardAnnouncerClass");

	APlayerController_GetCustomRewardAnnouncerClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetCustomStatusAnnouncerClass
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetCustomStatusAnnouncerClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetCustomStatusAnnouncerClass");

	APlayerController_GetCustomStatusAnnouncerClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.DemoClientSetHUD
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class UClass*                  newHUDClass                    (Parm)
// class UClass*                  newScoringClass                (Parm)

void APlayerController::DemoClientSetHUD(class UClass* newHUDClass, class UClass* newScoringClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DemoClientSetHUD");

	APlayerController_DemoClientSetHUD_Params params;
	params.newHUDClass = newHUDClass;
	params.newScoringClass = newScoringClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetClientDemo
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerSetClientDemo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetClientDemo");

	APlayerController_ServerSetClientDemo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StartClientDemoRec
// (Defined, Simulated, Event, Public)

void APlayerController::StartClientDemoRec()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StartClientDemoRec");

	APlayerController_StartClientDemoRec_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdminGUI
// (Defined, Exec, Public)

void APlayerController::AdminGUI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdminGUI");

	APlayerController_AdminGUI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdminLogout
// (Defined, Net, NetReliable, Exec, Public)

void APlayerController::AdminLogout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdminLogout");

	APlayerController_AdminLogout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdminReply
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 Reply                          (Parm, NeedCtorLink)

void APlayerController::AdminReply(const struct FString& Reply)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdminReply");

	APlayerController_AdminReply_Params params;
	params.Reply = Reply;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReportAdmin
// (Defined, Public)
// Parameters:
// struct FString                 ReportText                     (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ReportAdmin(const struct FString& ReportText)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReportAdmin");

	APlayerController_ReportAdmin_Params params;
	params.ReportText = ReportText;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdminCommand
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 CommandLine                    (Parm, NeedCtorLink)

void APlayerController::AdminCommand(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdminCommand");

	APlayerController_AdminCommand_Params params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAdminLogin
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 CmdLine                        (Parm, NeedCtorLink)

void APlayerController::ServerAdminLogin(const struct FString& CmdLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAdminLogin");

	APlayerController_ServerAdminLogin_Params params;
	params.CmdLine = CmdLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdminLogin
// (Defined, Exec, Public)
// Parameters:
// struct FString                 CmdLine                        (Parm, NeedCtorLink)

void APlayerController::AdminLogin(const struct FString& CmdLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdminLogin");

	APlayerController_AdminLogin_Params params;
	params.CmdLine = CmdLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdminDebug
// (Defined, Net, NetReliable, Exec, Public)
// Parameters:
// struct FString                 CommandLine                    (Parm, NeedCtorLink)

void APlayerController::AdminDebug(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdminDebug");

	APlayerController_AdminDebug_Params params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Admin
// (Defined, Net, NetReliable, Exec, Public)
// Parameters:
// struct FString                 CommandLine                    (Parm, NeedCtorLink)

void APlayerController::Admin(const struct FString& CommandLine)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Admin");

	APlayerController_Admin_Params params;
	params.CommandLine = CommandLine;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CanRestartPlayer
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CanRestartPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CanRestartPlayer");

	APlayerController_CanRestartPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.InvertLook
// (Defined, Exec, Public)

void APlayerController::InvertLook()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InvertLook");

	APlayerController_InvertLook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UseAdvCamShake
// (Defined, Simulated, Public)
// Parameters:
// bool                           bUse                           (Parm)

void APlayerController::UseAdvCamShake(bool bUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UseAdvCamShake");

	APlayerController_UseAdvCamShake_Params params;
	params.bUse = bUse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UseStanceToggle
// (Defined, Simulated, Public)
// Parameters:
// bool                           bUse                           (Parm)

void APlayerController::UseStanceToggle(bool bUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UseStanceToggle");

	APlayerController_UseStanceToggle_Params params;
	params.bUse = bUse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UseMouseRevision
// (Defined, Simulated, Public)
// Parameters:
// bool                           bUse                           (Parm)

void APlayerController::UseMouseRevision(bool bUse)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UseMouseRevision");

	APlayerController_UseMouseRevision_Params params;
	params.bUse = bUse;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InvertMouse
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Invert                         (OptionalParm, Parm, NeedCtorLink)

void APlayerController::InvertMouse(const struct FString& Invert)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InvertMouse");

	APlayerController_InvertMouse_Params params;
	params.Invert = Invert;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsMouseInverted
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsMouseInverted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsMouseInverted");

	APlayerController_IsMouseInverted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientNetworkMessage
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// struct FString                 ParamA                         (Parm, NeedCtorLink)
// struct FString                 ParamB                         (Parm, NeedCtorLink)

void APlayerController::ClientNetworkMessage(const struct FString& ParamA, const struct FString& ParamB)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientNetworkMessage");

	APlayerController_ClientNetworkMessage_Params params;
	params.ParamA = ParamA;
	params.ParamB = ParamB;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCloseMenu
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// bool                           bCloseAll                      (OptionalParm, Parm)
// bool                           bCancel                        (OptionalParm, Parm)

void APlayerController::ClientCloseMenu(bool bCloseAll, bool bCancel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCloseMenu");

	APlayerController_ClientCloseMenu_Params params;
	params.bCloseAll = bCloseAll;
	params.bCancel = bCancel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReplaceMenu
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// struct FString                 Menu                           (Parm, NeedCtorLink)
// bool                           bDisconnect                    (OptionalParm, Parm)
// struct FString                 Msg1                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 Msg2                           (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ClientReplaceMenu(const struct FString& Menu, bool bDisconnect, const struct FString& Msg1, const struct FString& Msg2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReplaceMenu");

	APlayerController_ClientReplaceMenu_Params params;
	params.Menu = Menu;
	params.bDisconnect = bDisconnect;
	params.Msg1 = Msg1;
	params.Msg2 = Msg2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientOpenMenu
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// struct FString                 Menu                           (Parm, NeedCtorLink)
// bool                           bDisconnect                    (OptionalParm, Parm)
// struct FString                 Msg1                           (OptionalParm, Parm, NeedCtorLink)
// struct FString                 Msg2                           (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ClientOpenMenu(const struct FString& Menu, bool bDisconnect, const struct FString& Msg1, const struct FString& Msg2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientOpenMenu");

	APlayerController_ClientOpenMenu_Params params;
	params.Menu = Menu;
	params.bDisconnect = bDisconnect;
	params.Msg1 = Msg1;
	params.Msg2 = Msg2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnPressButtons
// (Defined, Singular, Event, Public)

void APlayerController::UnPressButtons()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnPressButtons");

	APlayerController_UnPressButtons_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeAlwaysMouseLook
// (Defined, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerController::ChangeAlwaysMouseLook(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeAlwaysMouseLook");

	APlayerController_ChangeAlwaysMouseLook_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeStairLook
// (Defined, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerController::ChangeStairLook(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeStairLook");

	APlayerController_ChangeStairLook_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdjustRespawnTime
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::AdjustRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustRespawnTime");

	APlayerController_AdjustRespawnTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.StopPawnsAndControllers
// (Defined, Simulated, Public)

void APlayerController::StopPawnsAndControllers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopPawnsAndControllers");

	APlayerController_StopPawnsAndControllers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFadeToColor
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientFadeToColor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFadeToColor");

	APlayerController_ClientFadeToColor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFadeToBlackWhite2
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientFadeToBlackWhite2()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFadeToBlackWhite2");

	APlayerController_ClientFadeToBlackWhite2_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFadeToBlackWhite
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientFadeToBlackWhite()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFadeToBlackWhite");

	APlayerController_ClientFadeToBlackWhite_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientOnEndIntervented
// (Defined, Net, NetReliable, Simulated, Public)

void APlayerController::ClientOnEndIntervented()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientOnEndIntervented");

	APlayerController_ClientOnEndIntervented_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientOnBeginIntervented
// (Defined, Net, NetReliable, Simulated, Public)

void APlayerController::ClientOnBeginIntervented()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientOnBeginIntervented");

	APlayerController_ClientOnBeginIntervented_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientOnBeginRound
// (Defined, Net, NetReliable, Simulated, Public)

void APlayerController::ClientOnBeginRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientOnBeginRound");

	APlayerController_ClientOnBeginRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientOnEndWaitingForStart
// (Defined, Net, NetReliable, Simulated, Public)

void APlayerController::ClientOnEndWaitingForStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientOnEndWaitingForStart");

	APlayerController_ClientOnEndWaitingForStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientOnBeginWaitingForStart
// (Defined, Net, NetReliable, Simulated, Public)

void APlayerController::ClientOnBeginWaitingForStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientOnBeginWaitingForStart");

	APlayerController_ClientOnBeginWaitingForStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GotoDefaultState
// (Defined, Event, Public)

void APlayerController::GotoDefaultState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GotoDefaultState");

	APlayerController_GotoDefaultState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TryServerViewNextPlayer
// (Defined, Public)
// Parameters:
// bool                           cannotPickSelf                 (OptionalParm, Parm)
// bool                           IsBack                         (OptionalParm, Parm)
// int                            ViewStyle                      (OptionalParm, Parm)

void APlayerController::TryServerViewNextPlayer(bool cannotPickSelf, bool IsBack, int ViewStyle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TryServerViewNextPlayer");

	APlayerController_TryServerViewNextPlayer_Params params;
	params.cannotPickSelf = cannotPickSelf;
	params.IsBack = IsBack;
	params.ViewStyle = ViewStyle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsSpecialMode_Grenade
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_Grenade(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_Grenade");

	APlayerController_IsSpecialMode_Grenade_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_Pistol
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_Pistol(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_Pistol");

	APlayerController_IsSpecialMode_Pistol_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_MG
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_MG(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_MG");

	APlayerController_IsSpecialMode_MG_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_SG
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_SG(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_SG");

	APlayerController_IsSpecialMode_SG_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_FlameThrower
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_FlameThrower(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_FlameThrower");

	APlayerController_IsSpecialMode_FlameThrower_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_TEST
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_TEST(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_TEST");

	APlayerController_IsSpecialMode_TEST_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_Hold_Weapon
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_Hold_Weapon(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_Hold_Weapon");

	APlayerController_IsSpecialMode_Hold_Weapon_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_Knife
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_Knife(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_Knife");

	APlayerController_IsSpecialMode_Knife_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_SR
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_SR(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_SR");

	APlayerController_IsSpecialMode_SR_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsSpecialMode_RPG
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialMode_RPG(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialMode_RPG");

	APlayerController_IsSpecialMode_RPG_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsPermitSpecialMode
// (Defined, Public)
// Parameters:
// bool                           bLimitInvenGroup               (Parm)
// int                            InvenGroup                     (Parm)
// TEnumAsByte<EeWeaponType>      QWeaponType                    (Parm)
// int                            KeyF                           (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsPermitSpecialMode(bool bLimitInvenGroup, int InvenGroup, TEnumAsByte<EeWeaponType> QWeaponType, int KeyF)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsPermitSpecialMode");

	APlayerController_IsPermitSpecialMode_Params params;
	params.bLimitInvenGroup = bLimitInvenGroup;
	params.InvenGroup = InvenGroup;
	params.QWeaponType = QWeaponType;
	params.KeyF = KeyF;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ProcessSelectQuickSlot
// (Defined, Public)
// Parameters:
// int                            iIndex                         (Parm)

void APlayerController::ProcessSelectQuickSlot(int iIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessSelectQuickSlot");

	APlayerController_ProcessSelectQuickSlot_Params params;
	params.iIndex = iIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SelectQuickSlot
// (Defined, Public)
// Parameters:
// int                            iIndex                         (Parm)

void APlayerController::SelectQuickSlot(int iIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SelectQuickSlot");

	APlayerController_SelectQuickSlot_Params params;
	params.iIndex = iIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientBecameActivePlayer
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientBecameActivePlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientBecameActivePlayer");

	APlayerController_ClientBecameActivePlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BecomeActivePlayer
// (Defined, Net, NetReliable, Public)

void APlayerController::BecomeActivePlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BecomeActivePlayer");

	APlayerController_BecomeActivePlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientBecameSpectator
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientBecameSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientBecameSpectator");

	APlayerController_ClientBecameSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BecomeSpectator
// (Defined, Net, NetReliable, Public)

void APlayerController::BecomeSpectator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BecomeSpectator");

	APlayerController_BecomeSpectator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSpectate
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           cannotPickSelf                 (OptionalParm, Parm)

void APlayerController::ServerSpectate(bool cannotPickSelf)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSpectate");

	APlayerController_ServerSpectate_Params params;
	params.cannotPickSelf = cannotPickSelf;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LoadPlayers
// (Defined, Public)

void APlayerController::LoadPlayers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LoadPlayers");

	APlayerController_LoadPlayers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewSelf
// (Defined, Net, Public)

void APlayerController::ServerViewSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewSelf");

	APlayerController_ServerViewSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FindLostSpectators
// (Defined, Public)

void APlayerController::FindLostSpectators()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindLostSpectators");

	APlayerController_FindLostSpectators_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerViewNextPlayer
// (Defined, Singular, Net, NetReliable, Public)
// Parameters:
// bool                           cannotPickSelf                 (OptionalParm, Parm)
// bool                           IsPrevious                     (OptionalParm, Parm)
// int                            ViewStyle                      (OptionalParm, Parm)

void APlayerController::ServerViewNextPlayer(bool cannotPickSelf, bool IsPrevious, int ViewStyle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerViewNextPlayer");

	APlayerController_ServerViewNextPlayer_Params params;
	params.cannotPickSelf = cannotPickSelf;
	params.IsPrevious = IsPrevious;
	params.ViewStyle = ViewStyle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsSpectating
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpectating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpectating");

	APlayerController_IsSpectating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FixedVelocity
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::FixedVelocity(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FixedVelocity");

	APlayerController_FixedVelocity_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FixedSprintState
// (Defined, Public)

void APlayerController::FixedSprintState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FixedSprintState");

	APlayerController_FixedSprintState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetDodging
// (Defined, Simulated, Public)
// Parameters:
// bool                           Enabled                        (Parm)

void APlayerController::SetDodging(bool Enabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetDodging");

	APlayerController_SetDodging_Params params;
	params.Enabled = Enabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DodgingIsEnabled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::DodgingIsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DodgingIsEnabled");

	APlayerController_DodgingIsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClearDoubleClick
// (Defined, Public)

void APlayerController::ClearDoubleClick()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearDoubleClick");

	APlayerController_ClearDoubleClick_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateRotation
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// float                          maxPitch                       (Parm)

void APlayerController::UpdateRotation(float DeltaTime, float maxPitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateRotation");

	APlayerController_UpdateRotation_Params params;
	params.DeltaTime = DeltaTime;
	params.maxPitch = maxPitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TurnAround
// (Defined, Public)

void APlayerController::TurnAround()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TurnAround");

	APlayerController_TurnAround_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TurnTowardNearestEnemy
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::TurnTowardNearestEnemy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TurnTowardNearestEnemy");

	APlayerController_TurnTowardNearestEnemy_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetViewValue
// (Defined, Public)

void APlayerController::SetViewValue()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewValue");

	APlayerController_SetViewValue_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetViewValue
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iShake                         (Parm)
// int                            iShock                         (Parm)
// int                            iBreath                        (Parm)

void APlayerController::ServerSetViewValue(int iShake, int iShock, int iBreath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetViewValue");

	APlayerController_ServerSetViewValue_Params params;
	params.iShake = iShake;
	params.iShock = iShock;
	params.iBreath = iBreath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.wViewBreath
// (Defined, Public)

void APlayerController::wViewBreath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.wViewBreath");

	APlayerController_wViewBreath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetwBreathRotation
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iBreath                        (Parm)

void APlayerController::ServerSetwBreathRotation(int iBreath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetwBreathRotation");

	APlayerController_ServerSetwBreathRotation_Params params;
	params.iBreath = iBreath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.wViewShock
// (Defined, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void APlayerController::wViewShock(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.wViewShock");

	APlayerController_wViewShock_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetwShockRotation
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iShock                         (Parm)

void APlayerController::ServerSetwShockRotation(int iShock)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetwShockRotation");

	APlayerController_ServerSetwShockRotation_Params params;
	params.iShock = iShock;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetShakeState
// (Defined, Public)
// Parameters:
// TEnumAsByte<EShakeState>       EShakeState                    (Parm)

void APlayerController::SetShakeState(TEnumAsByte<EShakeState> EShakeState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetShakeState");

	APlayerController_SetShakeState_Params params;
	params.EShakeState = EShakeState;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.wViewShake
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::wViewShake(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.wViewShake");

	APlayerController_wViewShake_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReCalDecayVelocity
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector APlayerController::ReCalDecayVelocity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReCalDecayVelocity");

	APlayerController_ReCalDecayVelocity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.wViewAttacked
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::wViewAttacked(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.wViewAttacked");

	APlayerController_wViewAttacked_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetFovSpeed
// (Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetFovSpeed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFovSpeed");

	APlayerController_GetFovSpeed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerSetwShakeRotation
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            iShake                         (Parm)

void APlayerController::ServerSetwShakeRotation(int iShake)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetwShakeRotation");

	APlayerController_ServerSetwShakeRotation_Params params;
	params.iShake = iShake;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewShake
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::ViewShake(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewShake");

	APlayerController_ViewShake_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetShakeRotation
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FRotator                OrgShakeRot                    (Parm)

void APlayerController::ServerSetShakeRotation(const struct FRotator& OrgShakeRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetShakeRotation");

	APlayerController_ServerSetShakeRotation_Params params;
	params.OrgShakeRot = OrgShakeRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateShakeRotComponent
// (Defined, Public)
// Parameters:
// float                          Max                            (Parm, OutParm)
// int                            current                        (Parm, OutParm)
// float                          Rate                           (Parm, OutParm)
// float                          Time                           (Parm, OutParm)
// float                          dt                             (Parm)
// bool                           bHigher                        (Parm)

void APlayerController::UpdateShakeRotComponent(float dt, bool bHigher, float* Max, int* current, float* Rate, float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateShakeRotComponent");

	APlayerController_UpdateShakeRotComponent_Params params;
	params.dt = dt;
	params.bHigher = bHigher;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Max != nullptr)
		*Max = params.Max;
	if (current != nullptr)
		*current = params.current;
	if (Rate != nullptr)
		*Rate = params.Rate;
	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.PlayerController.CheckShake
// (Defined, Public)
// Parameters:
// float                          MaxOffset                      (Parm, OutParm)
// float                          offset                         (Parm, OutParm)
// float                          Rate                           (Parm, OutParm)
// float                          Time                           (Parm, OutParm)
// float                          dt                             (Parm)
// bool                           bHigher                        (Parm)

void APlayerController::CheckShake(float dt, bool bHigher, float* MaxOffset, float* offset, float* Rate, float* Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckShake");

	APlayerController_CheckShake_Params params;
	params.dt = dt;
	params.bHigher = bHigher;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MaxOffset != nullptr)
		*MaxOffset = params.MaxOffset;
	if (offset != nullptr)
		*offset = params.offset;
	if (Rate != nullptr)
		*Rate = params.Rate;
	if (Time != nullptr)
		*Time = params.Time;
}


// Function Engine.PlayerController.BlendRot
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// int                            BlendC                         (Parm)
// int                            NewC                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::BlendRot(float DeltaTime, int BlendC, int NewC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BlendRot");

	APlayerController_BlendRot_Params params;
	params.DeltaTime = DeltaTime;
	params.BlendC = BlendC;
	params.NewC = NewC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayerCalcView
// (Defined, Event, Public)
// Parameters:
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)

void APlayerController::PlayerCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerCalcView");

	APlayerController_PlayerCalcView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
}


// Function Engine.PlayerController.DummyRotation
// (Defined, Public)
// Parameters:
// struct FRotator                NewRotation                    (Parm)

void APlayerController::DummyRotation(const struct FRotator& NewRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DummyRotation");

	APlayerController_DummyRotation_Params params;
	params.NewRotation = NewRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CacheCalcView
// (Defined, Public)
// Parameters:
// class AActor*                  ViewActor                      (Parm)
// struct FVector                 CameraLocation                 (Parm)
// struct FRotator                CameraRotation                 (Parm)

void APlayerController::CacheCalcView(class AActor* ViewActor, const struct FVector& CameraLocation, const struct FRotator& CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CacheCalcView");

	APlayerController_CacheCalcView_Params params;
	params.ViewActor = ViewActor;
	params.CameraLocation = CameraLocation;
	params.CameraRotation = CameraRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetViewRotation
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APlayerController::GetViewRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetViewRotation");

	APlayerController_GetViewRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.RemoveAllPostProcessEffects
// (Defined, Exec, Public)

void APlayerController::RemoveAllPostProcessEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveAllPostProcessEffects");

	APlayerController_RemoveAllPostProcessEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AdditionalPPEffectsOff
// (Defined, Public)

void APlayerController::AdditionalPPEffectsOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdditionalPPEffectsOff");

	APlayerController_AdditionalPPEffectsOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SSAO
// (Defined, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerController::SSAO(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SSAO");

	APlayerController_SSAO_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FadeToBlackWhite
// (Defined, Exec, Public)
// Parameters:
// float                          f_Fade_Time                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::FadeToBlackWhite(float f_Fade_Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FadeToBlackWhite");

	APlayerController_FadeToBlackWhite_Params params;
	params.f_Fade_Time = f_Fade_Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FadeToColor
// (Defined, Exec, Public)
// Parameters:
// float                          f_Fade_Time                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::FadeToColor(float f_Fade_Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FadeToColor");

	APlayerController_FadeToColor_Params params;
	params.f_Fade_Time = f_Fade_Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PPEffectOff
// (Defined, Exec, Public)
// Parameters:
// struct FName                   PP_EffectClass                 (Parm)

void APlayerController::PPEffectOff(const struct FName& PP_EffectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PPEffectOff");

	APlayerController_PPEffectOff_Params params;
	params.PP_EffectClass = PP_EffectClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PPEffectOn
// (Defined, Exec, Public)
// Parameters:
// struct FName                   PP_EffectClass                 (Parm)

void APlayerController::PPEffectOn(const struct FName& PP_EffectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PPEffectOn");

	APlayerController_PPEffectOn_Params params;
	params.PP_EffectClass = PP_EffectClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CP
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  PP_EffectClass                 (Parm)

void APlayerController::CP(class UClass* PP_EffectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CP");

	APlayerController_CP_Params params;
	params.PP_EffectClass = PP_EffectClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CreatePostProcessEffect
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  PP_EffectClass                 (Parm)

void APlayerController::CreatePostProcessEffect(class UClass* PP_EffectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CreatePostProcessEffect");

	APlayerController_CreatePostProcessEffect_Params params;
	params.PP_EffectClass = PP_EffectClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemovePostProcessEffect
// (Defined, Event, Public)
// Parameters:
// class UPostProcessEffect*      PP_ExEffect                    (Parm)

void APlayerController::RemovePostProcessEffect(class UPostProcessEffect* PP_ExEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemovePostProcessEffect");

	APlayerController_RemovePostProcessEffect_Params params;
	params.PP_ExEffect = PP_ExEffect;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddPostProcessEffect
// (Defined, Event, Public)
// Parameters:
// class UPostProcessEffect*      PP_NewEffect                   (Parm)
// bool                           PP_RemoveExisting              (OptionalParm, Parm)

void APlayerController::AddPostProcessEffect(class UPostProcessEffect* PP_NewEffect, bool PP_RemoveExisting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddPostProcessEffect");

	APlayerController_AddPostProcessEffect_Params params;
	params.PP_NewEffect = PP_NewEffect;
	params.PP_RemoveExisting = PP_RemoveExisting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveAllCameraEffects
// (Defined, Exec, Public)

void APlayerController::RemoveAllCameraEffects()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveAllCameraEffects");

	APlayerController_RemoveAllCameraEffects_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CreateCameraEffect
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  EffectClass                    (Parm)

void APlayerController::CreateCameraEffect(class UClass* EffectClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CreateCameraEffect");

	APlayerController_CreateCameraEffect_Params params;
	params.EffectClass = EffectClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RemoveCameraEffect
// (Defined, Event, Public)
// Parameters:
// class UCameraEffect*           ExEffect                       (Parm)

void APlayerController::RemoveCameraEffect(class UCameraEffect* ExEffect)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RemoveCameraEffect");

	APlayerController_RemoveCameraEffect_Params params;
	params.ExEffect = ExEffect;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddCameraEffect
// (Defined, Event, Public)
// Parameters:
// class UCameraEffect*           NewEffect                      (Parm)
// bool                           RemoveExisting                 (OptionalParm, Parm)

void APlayerController::AddCameraEffect(class UCameraEffect* NewEffect, bool RemoveExisting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddCameraEffect");

	APlayerController_AddCameraEffect_Params params;
	params.NewEffect = NewEffect;
	params.RemoveExisting = RemoveExisting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RotateByAttacked
// (Public)
// Parameters:
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)

void APlayerController::RotateByAttacked(struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RotateByAttacked");

	APlayerController_RotateByAttacked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
}


// Function Engine.PlayerController.CalcFirstPersonView
// (Defined, Public)
// Parameters:
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)

void APlayerController::CalcFirstPersonView(struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CalcFirstPersonView");

	APlayerController_CalcFirstPersonView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
}


// Function Engine.PlayerController.CalcBehindView
// (Defined, Public)
// Parameters:
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)
// float                          dist                           (Parm)
// bool                           bDiedSelf                      (OptionalParm, Parm)
// struct FRotator                killerRot                      (OptionalParm, Parm)

void APlayerController::CalcBehindView(float dist, bool bDiedSelf, const struct FRotator& killerRot, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CalcBehindView");

	APlayerController_CalcBehindView_Params params;
	params.dist = dist;
	params.bDiedSelf = bDiedSelf;
	params.killerRot = killerRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;
}


// Function Engine.PlayerController.AdjustView
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::AdjustView(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustView");

	APlayerController_AdjustView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyLanded
// (Defined, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::NotifyLanded(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyLanded");

	APlayerController_NotifyLanded_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.AdjustAim
// (Defined, Public)
// Parameters:
// struct FFireProperties         FiredAmmunition                (Parm)
// struct FVector                 projStart                      (Parm)
// int                            AimError                       (Parm)
// struct FRotator                ReturnValue                    (Parm, OutParm, ReturnParm)

struct FRotator APlayerController::AdjustAim(const struct FFireProperties& FiredAmmunition, const struct FVector& projStart, int AimError)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AdjustAim");

	APlayerController_AdjustAim_Params params;
	params.FiredAmmunition = FiredAmmunition;
	params.projStart = projStart;
	params.AimError = AimError;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.TestMeleeAttackMode
// (Defined, Public)
// Parameters:
// bool                           bMelee                         (Parm)

void APlayerController::TestMeleeAttackMode(bool bMelee)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TestMeleeAttackMode");

	APlayerController_TestMeleeAttackMode_Params params;
	params.bMelee = bMelee;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAimMode
// (Defined, Public)
// Parameters:
// bool                           bAim                           (Parm)

void APlayerController::SetAimMode(bool bAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAimMode");

	APlayerController_SetAimMode_Params params;
	params.bAim = bAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerToggleAimMode
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bToggle                        (Parm)

void APlayerController::ServerToggleAimMode(bool bToggle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerToggleAimMode");

	APlayerController_ServerToggleAimMode_Params params;
	params.bToggle = bToggle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientToggleAimMode
// (Defined, Simulated, Public)
// Parameters:
// bool                           bToggle                        (Parm)

void APlayerController::ClientToggleAimMode(bool bToggle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientToggleAimMode");

	APlayerController_ClientToggleAimMode_Params params;
	params.bToggle = bToggle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayerMove
// (Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::PlayerMove(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerMove");

	APlayerController_PlayerMove_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsBehindView
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsBehindView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsBehindView");

	APlayerController_IsBehindView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SendPingInGame
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::SendPingInGame(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendPingInGame");

	APlayerController_SendPingInGame_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetDClickMove
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerSetDClickMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetDClickMove");

	APlayerController_ServerSetDClickMove_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoPosture_CHINA
// (Defined, Public)

void APlayerController::DoPosture_CHINA()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoPosture_CHINA");

	APlayerController_DoPosture_CHINA_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoPosture_KR
// (Defined, Public)

void APlayerController::DoPosture_KR()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoPosture_KR");

	APlayerController_DoPosture_KR_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoPosture
// (Defined, Public)

void APlayerController::DoPosture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoPosture");

	APlayerController_DoPosture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TickInput
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::TickInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TickInput");

	APlayerController_TickInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CheckPerformence
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::CheckPerformence(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckPerformence");

	APlayerController_CheckPerformence_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayerTick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::PlayerTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayerTick");

	APlayerController_PlayerTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TravelPostAccept
// (Defined, Event, Public)

void APlayerController::TravelPostAccept()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TravelPostAccept");

	APlayerController_TravelPostAccept_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangedWeapon
// (Defined, Public)

void APlayerController::ChangedWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangedWeapon");

	APlayerController_ChangedWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerToggleBehindView
// (Defined, Net, Public)

void APlayerController::ServerToggleBehindView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerToggleBehindView");

	APlayerController_ServerToggleBehindView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ToggleBehindView
// (Defined, Exec, Public)

void APlayerController::ToggleBehindView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ToggleBehindView");

	APlayerController_ToggleBehindView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BehindView
// (Defined, Net, NetReliable, Exec, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerController::BehindView(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BehindView");

	APlayerController_BehindView_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReStart
// (Defined, Net, NetReliable, Public)
// Parameters:
// class APawn*                   NewPawn                        (Parm)

void APlayerController::ClientReStart(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReStart");

	APlayerController_ClientReStart_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EnterStartState
// (Defined, Public)

void APlayerController::EnterStartState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EnterStartState");

	APlayerController_EnterStartState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Restart
// (Defined, Public)

void APlayerController::Restart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Restart");

	APlayerController_Restart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetProgressTime
// (Defined, Net, NetReliable, Exec, Event, Public)
// Parameters:
// float                          t                              (Parm)

void APlayerController::SetProgressTime(float t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetProgressTime");

	APlayerController_SetProgressTime_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetProgressMessage
// (Defined, Net, NetReliable, Exec, Event, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 S                              (Parm, NeedCtorLink)
// struct FColor                  C                              (Parm)

void APlayerController::SetProgressMessage(int Index, const struct FString& S, const struct FColor& C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetProgressMessage");

	APlayerController_SetProgressMessage_Params params;
	params.Index = Index;
	params.S = S;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClearProgressMessages
// (Defined, Net, NetReliable, Exec, Public)

void APlayerController::ClearProgressMessages()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClearProgressMessages");

	APlayerController_ClearProgressMessages_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProgressCommand
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)
// struct FString                 Msg1                           (Parm, NeedCtorLink)
// struct FString                 Msg2                           (Parm, NeedCtorLink)

void APlayerController::ProgressCommand(const struct FString& Cmd, const struct FString& Msg1, const struct FString& Msg2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProgressCommand");

	APlayerController_ProgressCommand_Params params;
	params.Cmd = Cmd;
	params.Msg1 = Msg1;
	params.Msg2 = Msg2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchLevel
// (Defined, Exec, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void APlayerController::SwitchLevel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchLevel");

	APlayerController_SwitchLevel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeTeam3
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            N                              (Parm)

void APlayerController::ServerChangeTeam3(int N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeTeam3");

	APlayerController_ServerChangeTeam3_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerChangeTeam
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            N                              (Parm)

void APlayerController::ServerChangeTeam(int N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerChangeTeam");

	APlayerController_ServerChangeTeam_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeTeam
// (Defined, Exec, Public)
// Parameters:
// int                            N                              (Parm)

void APlayerController::ChangeTeam(int N)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeTeam");

	APlayerController_ChangeTeam_Params params;
	params.N = N;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchTeam3
// (Defined, Exec, Public)

void APlayerController::SwitchTeam3()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchTeam3");

	APlayerController_SwitchTeam3_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchTeam
// (Defined, Exec, Public)

void APlayerController::SwitchTeam()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchTeam");

	APlayerController_SwitchTeam_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeName
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void APlayerController::ChangeName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeName");

	APlayerController_ChangeName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChangeVoiceType
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 NewVoiceType                   (Parm, NeedCtorLink)

void APlayerController::ChangeVoiceType(const struct FString& NewVoiceType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChangeVoiceType");

	APlayerController_ChangeVoiceType_Params params;
	params.NewVoiceType = NewVoiceType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetVoice
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void APlayerController::SetVoice(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetVoice");

	APlayerController_SetVoice_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetName
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)

void APlayerController::SetName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetName");

	APlayerController_SetName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Suicide
// (Defined, Net, NetReliable, Exec, Public)

void APlayerController::Suicide()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Suicide");

	APlayerController_Suicide_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUse
// (Defined, Net, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::ServerUse()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUse");

	APlayerController_ServerUse_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.Use
// (Defined, Exec, Public)

void APlayerController::Use()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Use");

	APlayerController_Use_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AltFire
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void APlayerController::AltFire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AltFire");

	APlayerController_AltFire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Fire
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void APlayerController::Fire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Fire");

	APlayerController_Fire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ActivateItem
// (Defined, Net, NetReliable, Exec, Public)

void APlayerController::ActivateItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ActivateItem");

	APlayerController_ActivateItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PrevItem
// (Defined, Net, NetReliable, Exec, Public)

void APlayerController::PrevItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PrevItem");

	APlayerController_PrevItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsSpecialGrenade
// (Defined, Public)
// Parameters:
// class AwWeapon*                kWeapon                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsSpecialGrenade(class AwWeapon* kWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsSpecialGrenade");

	APlayerController_IsSpecialGrenade_Params params;
	params.kWeapon = kWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.IsFragGrenade
// (Defined, Public)
// Parameters:
// class AwWeapon*                kWeapon                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsFragGrenade(class AwWeapon* kWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsFragGrenade");

	APlayerController_IsFragGrenade_Params params;
	params.kWeapon = kWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetWeaponByWeaponType
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  nWeaponType                    (Parm)
// class AInventory*              SkipWeapon                     (OptionalParm, Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* APlayerController::GetWeaponByWeaponType(unsigned char nWeaponType, class AInventory* SkipWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetWeaponByWeaponType");

	APlayerController_GetWeaponByWeaponType_Params params;
	params.nWeaponType = nWeaponType;
	params.SkipWeapon = SkipWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetWeaponByInventoryGroup
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  f                              (Parm)
// class AInventory*              SkipWeapon                     (OptionalParm, Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* APlayerController::GetWeaponByInventoryGroup(unsigned char f, class AInventory* SkipWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetWeaponByInventoryGroup");

	APlayerController_GetWeaponByInventoryGroup_Params params;
	params.f = f;
	params.SkipWeapon = SkipWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetWeaponByID
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)
// class AInventory*              SkipWeapon                     (OptionalParm, Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* APlayerController::GetWeaponByID(int iWeaponID, class AInventory* SkipWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetWeaponByID");

	APlayerController_GetWeaponByID_Params params;
	params.iWeaponID = iWeaponID;
	params.SkipWeapon = SkipWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetWeapon
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  NewWeaponClass                 (Parm)

void APlayerController::GetWeapon(class UClass* NewWeaponClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetWeapon");

	APlayerController_GetWeapon_Params params;
	params.NewWeaponClass = NewWeaponClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ThrowsTheWeapon
// (Defined, Exec, Public)

void APlayerController::ThrowsTheWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ThrowsTheWeapon");

	APlayerController_ThrowsTheWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SwitchWeapon
// (Defined, Exec, Public)
// Parameters:
// unsigned char                  f                              (Parm)
// bool                           bQuickGr                       (OptionalParm, Parm)

void APlayerController::SwitchWeapon(unsigned char f, bool bQuickGr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SwitchWeapon");

	APlayerController_SwitchWeapon_Params params;
	params.f = f;
	params.bQuickGr = bQuickGr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PipedSwitchWeapon
// (Defined, Exec, Public)
// Parameters:
// unsigned char                  f                              (Parm)

void APlayerController::PipedSwitchWeapon(unsigned char f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PipedSwitchWeapon");

	APlayerController_PipedSwitchWeapon_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NextWeapon
// (Defined, Exec, Public)

void APlayerController::NextWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NextWeapon");

	APlayerController_NextWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PrevWeapon
// (Defined, Exec, Public)

void APlayerController::PrevWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PrevWeapon");

	APlayerController_PrevWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerThrowWeapon
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerThrowWeapon");

	APlayerController_ServerThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ThrowWeapon
// (Defined, Exec, Public)

void APlayerController::ThrowWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ThrowWeapon");

	APlayerController_ThrowWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ActivateInventoryItem
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  InvItem                        (Parm)

void APlayerController::ActivateInventoryItem(class UClass* InvItem)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ActivateInventoryItem");

	APlayerController_ActivateInventoryItem_Params params;
	params.InvItem = InvItem;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowMidGameMenu
// (Defined, Public)
// Parameters:
// bool                           bPause                         (Parm)

void APlayerController::ShowMidGameMenu(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowMidGameMenu");

	APlayerController_ShowMidGameMenu_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowMenu
// (Defined, Exec, Public)

void APlayerController::ShowMenu()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowMenu");

	APlayerController_ShowMenu_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerPause
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerPause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPause");

	APlayerController_ServerPause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Pause
// (Defined, Exec, Public)

void APlayerController::Pause()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Pause");

	APlayerController_Pause_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetPause
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           bPause                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::SetPause(bool bPause)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetPause");

	APlayerController_SetPause_Params params;
	params.bPause = bPause;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.QuickLoad
// (Defined, Exec, Public)

void APlayerController::QuickLoad()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.QuickLoad");

	APlayerController_QuickLoad_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.QuickSave
// (Defined, Exec, Public)

void APlayerController::QuickSave()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.QuickSave");

	APlayerController_QuickSave_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LocalTravel
// (Defined, Exec, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)

void APlayerController::LocalTravel(const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalTravel");

	APlayerController_LocalTravel_Params params;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RestartLevel
// (Defined, Exec, Public)

void APlayerController::RestartLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RestartLevel");

	APlayerController_RestartLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSpeech
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FName                   Type                           (Parm)
// int                            Index                          (Parm)
// struct FString                 Callsign                       (Parm, NeedCtorLink)

void APlayerController::ServerSpeech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSpeech");

	APlayerController_ServerSpeech_Params params;
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Speech
// (Defined, Exec, Public)
// Parameters:
// struct FName                   Type                           (Parm)
// int                            Index                          (Parm)
// struct FString                 Callsign                       (Parm, NeedCtorLink)

void APlayerController::Speech(const struct FName& Type, int Index, const struct FString& Callsign)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Speech");

	APlayerController_Speech_Params params;
	params.Type = Type;
	params.Index = Index;
	params.Callsign = Callsign;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoProneBtn
// (Defined, Public)
// Parameters:
// unsigned char                  byDown                         (Parm)

void APlayerController::DoProneBtn(unsigned char byDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoProneBtn");

	APlayerController_DoProneBtn_Params params;
	params.byDown = byDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoDuckBtn
// (Defined, Public)
// Parameters:
// unsigned char                  byDown                         (Parm)

void APlayerController::DoDuckBtn(unsigned char byDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoDuckBtn");

	APlayerController_DoDuckBtn_Params params;
	params.byDown = byDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoDuckBtn_New
// (Defined, Public)
// Parameters:
// unsigned char                  byDown                         (Parm)

void APlayerController::DoDuckBtn_New(unsigned char byDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoDuckBtn_New");

	APlayerController_DoDuckBtn_New_Params params;
	params.byDown = byDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoProne
// (Defined, Public)

void APlayerController::DoProne()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoProne");

	APlayerController_DoProne_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoDuck
// (Defined, Public)

void APlayerController::DoDuck()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoDuck");

	APlayerController_DoDuck_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Jump
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (OptionalParm, Parm)

void APlayerController::Jump(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Jump");

	APlayerController_Jump_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Typing
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           bTyping                        (Parm)

void APlayerController::Typing(bool bTyping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Typing");

	APlayerController_Typing_Params params;
	params.bTyping = bTyping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.damageAttitudeTo
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          Damage                         (Parm)

void APlayerController::damageAttitudeTo(class APawn* Other, float Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.damageAttitudeTo");

	APlayerController_damageAttitudeTo_Params params;
	params.Other = Other;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShakeViewEvent
// (Defined, Event, Public)
// Parameters:
// struct FVector                 shRotMag                       (Parm)
// struct FVector                 shRotRate                      (Parm)
// float                          shRotTime                      (Parm)
// struct FVector                 shOffsetMag                    (Parm)
// struct FVector                 shOffsetRate                   (Parm)
// float                          shOffsetTime                   (Parm)

void APlayerController::ShakeViewEvent(const struct FVector& shRotMag, const struct FVector& shRotRate, float shRotTime, const struct FVector& shOffsetMag, const struct FVector& shOffsetRate, float shOffsetTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShakeViewEvent");

	APlayerController_ShakeViewEvent_Params params;
	params.shRotMag = shRotMag;
	params.shRotRate = shRotRate;
	params.shRotTime = shRotTime;
	params.shOffsetMag = shOffsetMag;
	params.shOffsetRate = shOffsetRate;
	params.shOffsetTime = shOffsetTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAmbientShake
// (Defined, Event, Public)
// Parameters:
// float                          FalloffStartTime               (Parm)
// float                          FalloffTime                    (Parm)
// struct FVector                 OffsetMag                      (Parm)
// float                          OffsetFreq                     (Parm)
// struct FRotator                RotMag                         (Parm)
// float                          RotFreq                        (Parm)

void APlayerController::SetAmbientShake(float FalloffStartTime, float FalloffTime, const struct FVector& OffsetMag, float OffsetFreq, const struct FRotator& RotMag, float RotFreq)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAmbientShake");

	APlayerController_SetAmbientShake_Params params;
	params.FalloffStartTime = FalloffStartTime;
	params.FalloffTime = FalloffTime;
	params.OffsetMag = OffsetMag;
	params.OffsetFreq = OffsetFreq;
	params.RotMag = RotMag;
	params.RotFreq = RotFreq;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StopViewShaking
// (Defined, Public)

void APlayerController::StopViewShaking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopViewShaking");

	APlayerController_StopViewShaking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.wShakeView
// (Defined, Public)
// Parameters:
// int                            iPitch                         (Parm)
// int                            iYaw                           (Parm)
// float                          fSpeed                         (Parm)
// float                          fDecel                         (Parm)
// float                          fStayTime                      (Parm)
// float                          fDecay                         (Parm)
// float                          fDecayFastTime                 (Parm)

void APlayerController::wShakeView(int iPitch, int iYaw, float fSpeed, float fDecel, float fStayTime, float fDecay, float fDecayFastTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.wShakeView");

	APlayerController_wShakeView_Params params;
	params.iPitch = iPitch;
	params.iYaw = iYaw;
	params.fSpeed = fSpeed;
	params.fDecel = fDecel;
	params.fStayTime = fStayTime;
	params.fDecay = fDecay;
	params.fDecayFastTime = fDecayFastTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.wShockView
// (Defined, Public)
// Parameters:
// float                          fForce                         (Parm)

void APlayerController::wShockView(float fForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.wShockView");

	APlayerController_wShockView_Params params;
	params.fForce = fForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.wBreathView
// (Defined, Public)
// Parameters:
// struct FRotator                rBreath                        (Parm)

void APlayerController::wBreathView(const struct FRotator& rBreath)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.wBreathView");

	APlayerController_wBreathView_Params params;
	params.rBreath = rBreath;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShakeView
// (Defined, Public)
// Parameters:
// struct FVector                 shRotMag                       (Parm)
// struct FVector                 shRotRate                      (Parm)
// float                          shRotTime                      (Parm)
// struct FVector                 shOffsetMag                    (Parm)
// struct FVector                 shOffsetRate                   (Parm)
// float                          shOffsetTime                   (Parm)

void APlayerController::ShakeView(const struct FVector& shRotMag, const struct FVector& shRotRate, float shRotTime, const struct FVector& shOffsetMag, const struct FVector& shOffsetRate, float shOffsetTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShakeView");

	APlayerController_ShakeView_Params params;
	params.shRotMag = shRotMag;
	params.shRotRate = shRotRate;
	params.shRotTime = shRotTime;
	params.shOffsetMag = shOffsetMag;
	params.shOffsetRate = shOffsetRate;
	params.shOffsetTime = shOffsetTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientDamageShake
// (Defined, Net, Private)
// Parameters:
// int                            Damage                         (Parm)

void APlayerController::ClientDamageShake(int Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientDamageShake");

	APlayerController_ClientDamageShake_Params params;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CientSetHitSprintDelay
// (Defined, Net, Public)

void APlayerController::CientSetHitSprintDelay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CientSetHitSprintDelay");

	APlayerController_CientSetHitSprintDelay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DamageShake
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)

void APlayerController::DamageShake(int Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DamageShake");

	APlayerController_DamageShake_Params params;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdjustGlow
// (Defined, Net, NetReliable, Public)
// Parameters:
// float                          Scale                          (Parm)
// struct FVector                 fog                            (Parm)

void APlayerController::ClientAdjustGlow(float Scale, const struct FVector& fog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdjustGlow");

	APlayerController_ClientAdjustGlow_Params params;
	params.Scale = Scale;
	params.fog = fog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFlash
// (Defined, Net, Public)
// Parameters:
// float                          Scale                          (Parm)
// struct FVector                 fog                            (Parm)

void APlayerController::ClientFlash(float Scale, const struct FVector& fog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFlash");

	APlayerController_ClientFlash_Params params;
	params.Scale = Scale;
	params.fog = fog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetFlashScaling
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::SetFlashScaling(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetFlashScaling");

	APlayerController_SetFlashScaling_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetFOVAngle
// (Defined, Net, Public)
// Parameters:
// float                          NewFOV                         (Parm)

void APlayerController::SetFOVAngle(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetFOVAngle");

	APlayerController_SetFOVAngle_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerRestartGame
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerRestartGame");

	APlayerController_ServerRestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CallServerMove
// (Defined, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbRun                        (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// bool                           NewbPendingJumpStatus          (Parm)
// bool                           NewbJumpStatus                 (Parm)
// bool                           NewbDoubleJump                 (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)
// unsigned char                  OldTimeDelta                   (OptionalParm, Parm)
// int                            OldAccel                       (OptionalParm, Parm)

void APlayerController::CallServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPendingJumpStatus, bool NewbJumpStatus, bool NewbDoubleJump, TEnumAsByte<EDoubleClickDir> DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CallServerMove");

	APlayerController_CallServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbRun = NewbRun;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.NewbPendingJumpStatus = NewbPendingJumpStatus;
	params.NewbJumpStatus = NewbJumpStatus;
	params.NewbDoubleJump = NewbDoubleJump;
	params.DoubleClickMove = DoubleClickMove;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldTimeDelta = OldTimeDelta;
	params.OldAccel = OldAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReplicateMove
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 NewAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ReplicateMove(float DeltaTime, const struct FVector& NewAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReplicateMove");

	APlayerController_ReplicateMove_Params params;
	params.DeltaTime = DeltaTime;
	params.NewAccel = NewAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CompressAccel
// (Defined, Public)
// Parameters:
// int                            C                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::CompressAccel(int C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CompressAccel");

	APlayerController_CompressAccel_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetFreeMove
// (Final, Defined, Public)
// Parameters:
// class ASavedMove*              ReturnValue                    (Parm, OutParm, ReturnParm)

class ASavedMove* APlayerController::GetFreeMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFreeMove");

	APlayerController_GetFreeMove_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientUpdatePosition
// (Defined, Public)

void APlayerController::ClientUpdatePosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdatePosition");

	APlayerController_ClientUpdatePosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerUpdatePing
// (Defined, Net, Public)
// Parameters:
// int                            NewPing                        (Parm)

void APlayerController::ServerUpdatePing(int NewPing)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerUpdatePing");

	APlayerController_ServerUpdatePing_Params params;
	params.NewPing = NewPing;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LongClientAdjustPosition
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// float                          NewVelX                        (Parm)
// float                          NewVelY                        (Parm)
// float                          NewVelZ                        (Parm)
// class AActor*                  NewBase                        (Parm)
// float                          NewFloorX                      (Parm)
// float                          NewFloorY                      (Parm)
// float                          NewFloorZ                      (Parm)

void APlayerController::LongClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LongClientAdjustPosition");

	APlayerController_LongClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;
	params.NewFloorX = NewFloorX;
	params.NewFloorY = NewFloorY;
	params.NewFloorZ = NewFloorZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientAdjustPosition
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// float                          NewVelX                        (Parm)
// float                          NewVelY                        (Parm)
// float                          NewVelZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::ClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientAdjustPosition");

	APlayerController_ClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewVelX = NewVelX;
	params.NewVelY = NewVelY;
	params.NewVelZ = NewVelZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShortClientAdjustPosition
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FName                   NewState                       (Parm)
// TEnumAsByte<EPhysics>          newPhysics                     (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::ShortClientAdjustPosition(float TimeStamp, const struct FName& NewState, TEnumAsByte<EPhysics> newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShortClientAdjustPosition");

	APlayerController_ShortClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewState = NewState;
	params.newPhysics = newPhysics;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.VeryShortClientAdjustPosition
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// float                          NewLocX                        (Parm)
// float                          NewLocY                        (Parm)
// float                          NewLocZ                        (Parm)
// class AActor*                  NewBase                        (Parm)

void APlayerController::VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.VeryShortClientAdjustPosition");

	APlayerController_VeryShortClientAdjustPosition_Params params;
	params.TimeStamp = TimeStamp;
	params.NewLocX = NewLocX;
	params.NewLocY = NewLocY;
	params.NewLocZ = NewLocZ;
	params.NewBase = NewBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.MoveAutonomous
// (Final, Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           NewbRun                        (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// bool                           NewbPressedJump                (Parm)
// bool                           NewbDoubleJump                 (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FVector                 NewAccel                       (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::MoveAutonomous(float DeltaTime, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPressedJump, bool NewbDoubleJump, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FVector& NewAccel, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MoveAutonomous");

	APlayerController_MoveAutonomous_Params params;
	params.DeltaTime = DeltaTime;
	params.NewbRun = NewbRun;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.NewbPressedJump = NewbPressedJump;
	params.NewbDoubleJump = NewbDoubleJump;
	params.DoubleClickMove = DoubleClickMove;
	params.NewAccel = NewAccel;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessMove
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// struct FVector                 NewAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// struct FRotator                DeltaRot                       (Parm)

void APlayerController::ProcessMove(float DeltaTime, const struct FVector& NewAccel, TEnumAsByte<EDoubleClickDir> DoubleClickMove, const struct FRotator& DeltaRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessMove");

	APlayerController_ProcessMove_Params params;
	params.DeltaTime = DeltaTime;
	params.NewAccel = NewAccel;
	params.DoubleClickMove = DoubleClickMove;
	params.DeltaRot = DeltaRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ProcessDrive
// (Defined, Public)
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          InUp                           (Parm)
// bool                           InJump                         (Parm)

void APlayerController::ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ProcessDrive");

	APlayerController_ProcessDrive_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.InUp = InUp;
	params.InJump = InJump;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerDrive
// (Defined, Net, Public)
// Parameters:
// float                          InForward                      (Parm)
// float                          InStrafe                       (Parm)
// float                          aUp                            (Parm)
// bool                           InJump                         (Parm)
// int                            View                           (Parm)

void APlayerController::ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerDrive");

	APlayerController_ServerDrive_Params params;
	params.InForward = InForward;
	params.InStrafe = InStrafe;
	params.aUp = aUp;
	params.InJump = InJump;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendClientAdjustment
// (Defined, Event, Public)

void APlayerController::SendClientAdjustment()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendClientAdjustment");

	APlayerController_SendClientAdjustment_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMoveScript
// (Defined, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbRun                        (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// bool                           NewbJumpStatus                 (Parm)
// bool                           NewbDoubleJump                 (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)
// unsigned char                  OldTimeDelta                   (OptionalParm, Parm)
// int                            OldAccel                       (OptionalParm, Parm)

void APlayerController::ServerMoveScript(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, TEnumAsByte<EDoubleClickDir> DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMoveScript");

	APlayerController_ServerMoveScript_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbRun = NewbRun;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.NewbJumpStatus = NewbJumpStatus;
	params.NewbDoubleJump = NewbDoubleJump;
	params.DoubleClickMove = DoubleClickMove;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldTimeDelta = OldTimeDelta;
	params.OldAccel = OldAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbRun                        (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// bool                           NewbJumpStatus                 (Parm)
// bool                           NewbDoubleJump                 (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)
// unsigned char                  OldTimeDelta                   (OptionalParm, Parm)
// int                            OldAccel                       (OptionalParm, Parm)

void APlayerController::ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, TEnumAsByte<EDoubleClickDir> DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMove");

	APlayerController_ServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbRun = NewbRun;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.NewbJumpStatus = NewbJumpStatus;
	params.NewbDoubleJump = NewbDoubleJump;
	params.DoubleClickMove = DoubleClickMove;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldTimeDelta = OldTimeDelta;
	params.OldAccel = OldAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMoveNative
// (Native, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbRun                        (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// bool                           NewbJumpStatus                 (Parm)
// bool                           NewbDoubleJump                 (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)
// unsigned char                  OldTimeDelta                   (OptionalParm, Parm)
// int                            OldAccel                       (OptionalParm, Parm)

void APlayerController::ServerMoveNative(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, TEnumAsByte<EDoubleClickDir> DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMoveNative");

	APlayerController_ServerMoveNative_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbRun = NewbRun;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.NewbJumpStatus = NewbJumpStatus;
	params.NewbDoubleJump = NewbDoubleJump;
	params.DoubleClickMove = DoubleClickMove;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldTimeDelta = OldTimeDelta;
	params.OldAccel = OldAccel;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DualServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp0                     (Parm)
// struct FVector                 InAccel0                       (Parm)
// unsigned char                  PendingCompress                (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove0               (Parm)
// int                            View0                          (Parm)
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// TEnumAsByte<EDoubleClickDir>   DoubleClickMove                (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)
// unsigned char                  OldTimeDelta                   (OptionalParm, Parm)
// int                            OldAccel                       (OptionalParm, Parm)

void APlayerController::DualServerMove(float TimeStamp0, const struct FVector& InAccel0, unsigned char PendingCompress, TEnumAsByte<EDoubleClickDir> DoubleClickMove0, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, TEnumAsByte<EDoubleClickDir> DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DualServerMove");

	APlayerController_DualServerMove_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.PendingCompress = PendingCompress;
	params.DoubleClickMove0 = DoubleClickMove0;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.DoubleClickMove = DoubleClickMove;
	params.ClientRoll = ClientRoll;
	params.View = View;
	params.OldTimeDelta = OldTimeDelta;
	params.OldAccel = OldAccel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShortServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbRun                        (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// bool                           NewbJumpStatus                 (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::ShortServerMove(float TimeStamp, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShortServerMove");

	APlayerController_ShortServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.ClientLoc = ClientLoc;
	params.NewbRun = NewbRun;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.NewbJumpStatus = NewbJumpStatus;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DualTurretServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp0                     (Parm)
// bool                           NewbDuck0                      (Parm)
// bool                           NewbProne0                     (Parm)
// unsigned char                  ClientRoll0                    (Parm)
// int                            View0                          (Parm)
// float                          TimeStamp                      (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::DualTurretServerMove(float TimeStamp0, bool NewbDuck0, bool NewbProne0, unsigned char ClientRoll0, int View0, float TimeStamp, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DualTurretServerMove");

	APlayerController_DualTurretServerMove_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.NewbDuck0 = NewbDuck0;
	params.NewbProne0 = NewbProne0;
	params.ClientRoll0 = ClientRoll0;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.ClientLoc = ClientLoc;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TurretServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::TurretServerMove(float TimeStamp, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TurretServerMove");

	APlayerController_TurretServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.ClientLoc = ClientLoc;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DualSpaceFighterServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp0                     (Parm)
// struct FVector                 InAccel0                       (Parm)
// bool                           NewbDuck0                      (Parm)
// bool                           NewbProne0                     (Parm)
// int                            ViewPitch0                     (Parm)
// int                            ViewYaw0                       (Parm)
// int                            ViewRoll0                      (Parm)
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// int                            ViewPitch                      (Parm)
// int                            ViewYaw                        (Parm)
// int                            ViewRoll                       (Parm)

void APlayerController::DualSpaceFighterServerMove(float TimeStamp0, const struct FVector& InAccel0, bool NewbDuck0, bool NewbProne0, int ViewPitch0, int ViewYaw0, int ViewRoll0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DualSpaceFighterServerMove");

	APlayerController_DualSpaceFighterServerMove_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.NewbDuck0 = NewbDuck0;
	params.NewbProne0 = NewbProne0;
	params.ViewPitch0 = ViewPitch0;
	params.ViewYaw0 = ViewYaw0;
	params.ViewRoll0 = ViewRoll0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.ViewPitch = ViewPitch;
	params.ViewYaw = ViewYaw;
	params.ViewRoll = ViewRoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpaceFighterServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// int                            ViewPitch                      (Parm)
// int                            ViewYaw                        (Parm)
// int                            ViewRoll                       (Parm)

void APlayerController::SpaceFighterServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpaceFighterServerMove");

	APlayerController_SpaceFighterServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.ViewPitch = ViewPitch;
	params.ViewYaw = ViewYaw;
	params.ViewRoll = ViewRoll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DualRocketServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp0                     (Parm)
// struct FVector                 InAccel0                       (Parm)
// bool                           NewbDuck0                      (Parm)
// bool                           NewbProne0                     (Parm)
// unsigned char                  ClientRoll0                    (Parm)
// int                            View0                          (Parm)
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::DualRocketServerMove(float TimeStamp0, const struct FVector& InAccel0, bool NewbDuck0, bool NewbProne0, unsigned char ClientRoll0, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DualRocketServerMove");

	APlayerController_DualRocketServerMove_Params params;
	params.TimeStamp0 = TimeStamp0;
	params.InAccel0 = InAccel0;
	params.NewbDuck0 = NewbDuck0;
	params.NewbProne0 = NewbProne0;
	params.ClientRoll0 = ClientRoll0;
	params.View0 = View0;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.RocketServerMove
// (Defined, Net, Public)
// Parameters:
// float                          TimeStamp                      (Parm)
// struct FVector                 InAccel                        (Parm)
// struct FVector                 ClientLoc                      (Parm)
// bool                           NewbDuck                       (Parm)
// bool                           NewbProne                      (Parm)
// unsigned char                  ClientRoll                     (Parm)
// int                            View                           (Parm)

void APlayerController::RocketServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.RocketServerMove");

	APlayerController_RocketServerMove_Params params;
	params.TimeStamp = TimeStamp;
	params.InAccel = InAccel;
	params.ClientLoc = ClientLoc;
	params.NewbDuck = NewbDuck;
	params.NewbProne = NewbProne;
	params.ClientRoll = ClientRoll;
	params.View = View;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ForceDeathUpdate
// (Defined, Public)

void APlayerController::ForceDeathUpdate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceDeathUpdate");

	APlayerController_ForceDeathUpdate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientVoiceMessage
// (Defined, Net, NetReliable, Public)
// Parameters:
// class APlayerReplicationInfo*  Sender                         (Parm)
// class APlayerReplicationInfo*  Recipient                      (Parm)
// struct FName                   MessageType                    (Parm)
// unsigned char                  MessageID                      (Parm)

void APlayerController::ClientVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const struct FName& MessageType, unsigned char MessageID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientVoiceMessage");

	APlayerController_ClientVoiceMessage_Params params;
	params.Sender = Sender;
	params.Recipient = Recipient;
	params.MessageType = MessageType;
	params.MessageID = MessageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetBehindView
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerController::ClientSetBehindView(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetBehindView");

	APlayerController_ClientSetBehindView_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetFixedCamera
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerController::ClientSetFixedCamera(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetFixedCamera");

	APlayerController_ClientSetFixedCamera_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PreClientTravel
// (Defined, Event, Public)

void APlayerController::PreClientTravel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PreClientTravel");

	APlayerController_PreClientTravel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowGun
// (Defined, Exec, Public)

void APlayerController::ShowGun()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowGun");

	APlayerController_ShowGun_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.IsDead
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::IsDead()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.IsDead");

	APlayerController_IsDead_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetWeaponHand
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerController::SetWeaponHand(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetWeaponHand");

	APlayerController_SetWeaponHand_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetHand
// (Defined, Public)
// Parameters:
// int                            IntValue                       (Parm)

void APlayerController::SetHand(int IntValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetHand");

	APlayerController_SetHand_Params params;
	params.IntValue = IntValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetHandedness
// (Defined, Net, Public)
// Parameters:
// float                          Hand                           (Parm)

void APlayerController::ServerSetHandedness(float Hand)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetHandedness");

	APlayerController_ServerSetHandedness_Params params;
	params.Hand = Hand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAutoTaunt
// (Defined, Exec, Public)
// Parameters:
// bool                           Value                          (Parm)

void APlayerController::SetAutoTaunt(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAutoTaunt");

	APlayerController_SetAutoTaunt_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetAutoTaunt
// (Defined, Net, Public)
// Parameters:
// bool                           Value                          (Parm)

void APlayerController::ServerSetAutoTaunt(bool Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetAutoTaunt");

	APlayerController_ServerSetAutoTaunt_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerTeamSay
// (Defined, Net, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APlayerController::ServerTeamSay(const struct FString& Msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerTeamSay");

	APlayerController_ServerTeamSay_Params params;
	params.Msg = Msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamSay
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APlayerController::TeamSay(const struct FString& Msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamSay");

	APlayerController_TeamSay_Params params;
	params.Msg = Msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PopMessage
// (Defined, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)
// bool                           sameTeamOnly                   (Parm)

void APlayerController::PopMessage(const struct FString& Msg, bool sameTeamOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PopMessage");

	APlayerController_PopMessage_Params params;
	params.Msg = Msg;
	params.sameTeamOnly = sameTeamOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPopMessage
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Msg                            (Parm, NeedCtorLink)

void APlayerController::ClientPopMessage(const struct FString& UserName, const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPopMessage");

	APlayerController_ClientPopMessage_Params params;
	params.UserName = UserName;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerPopMessage
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)
// bool                           sameTeamOnly                   (Parm)

void APlayerController::ServerPopMessage(const struct FString& Msg, bool sameTeamOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerPopMessage");

	APlayerController_ServerPopMessage_Params params;
	params.Msg = Msg;
	params.sameTeamOnly = sameTeamOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSay
// (Defined, Net, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APlayerController::ServerSay(const struct FString& Msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSay");

	APlayerController_ServerSay_Params params;
	params.Msg = Msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Say
// (Defined, Exec, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APlayerController::Say(const struct FString& Msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Say");

	APlayerController_Say_Params params;
	params.Msg = Msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AllowTextMessage
// (Defined, Public)
// Parameters:
// struct FString                 Msg                            (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AllowTextMessage(const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTextMessage");

	APlayerController_AllowTextMessage_Params params;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ForceReload
// (Defined, Exec, Public)

void APlayerController::ForceReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ForceReload");

	APlayerController_ForceReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetMouseAccel
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::SetMouseAccel(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMouseAccel");

	APlayerController_SetMouseAccel_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetMouseSmoothing
// (Defined, Exec, Public)
// Parameters:
// int                            Mode                           (Parm)

void APlayerController::SetMouseSmoothing(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetMouseSmoothing");

	APlayerController_SetMouseSmoothing_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetSensitivityAim
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetSensitivityAim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSensitivityAim");

	APlayerController_GetSensitivityAim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetSensitivity
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetSensitivity()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSensitivity");

	APlayerController_GetSensitivity_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetSensitivityActive
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetSensitivityActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetSensitivityActive");

	APlayerController_GetSensitivityActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetSensitivity
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)
// bool                           bZooming                       (OptionalParm, Parm)

void APlayerController::SetSensitivity(float f, bool bZooming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetSensitivity");

	APlayerController_SetSensitivity_Params params;
	params.f = f;
	params.bZooming = bZooming;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerMutate
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)

void APlayerController::ServerMutate(const struct FString& MutateString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerMutate");

	APlayerController_ServerMutate_Params params;
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Mutate
// (Defined, Exec, Public)
// Parameters:
// struct FString                 MutateString                   (Parm, NeedCtorLink)

void APlayerController::Mutate(const struct FString& MutateString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Mutate");

	APlayerController_Mutate_Params params;
	params.MutateString = MutateString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FOV
// (Defined, Net, NetReliable, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::FOV(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FOV");

	APlayerController_FOV_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetAimDiff
// (Defined, Exec, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerController::SetAimDiff(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetAimDiff");

	APlayerController_SetAimDiff_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientResetAim
// (Defined, Simulated, Public)

void APlayerController::ClientResetAim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientResetAim");

	APlayerController_ClientResetAim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetFOV
// (Defined, Net, NetReliable, Public)

void APlayerController::ResetFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetFOV");

	APlayerController_ResetFOV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetFOV
// (Defined, Public)
// Parameters:
// float                          NewFOV                         (Parm)

void APlayerController::SetFOV(float NewFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetFOV");

	APlayerController_SetFOV_Params params;
	params.NewFOV = NewFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FixFOV
// (Defined, Simulated, Public)

void APlayerController::FixFOV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FixFOV");

	APlayerController_FixFOV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EndZoom
// (Defined, Net, NetReliable, Public)

void APlayerController::EndZoom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EndZoom");

	APlayerController_EndZoom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ZoomFOV
// (Defined, Public)
// Parameters:
// float                          fFOV                           (Parm)
// bool                           bInstant                       (Parm)

void APlayerController::ZoomFOV(float fFOV, bool bInstant)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ZoomFOV");

	APlayerController_ZoomFOV_Params params;
	params.fFOV = fFOV;
	params.bInstant = bInstant;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetInitialMusic
// (Defined, Public)
// Parameters:
// struct FString                 NewSong                        (Parm, NeedCtorLink)
// TEnumAsByte<EMusicTransition>  NewTransition                  (Parm)

void APlayerController::ClientSetInitialMusic(const struct FString& NewSong, TEnumAsByte<EMusicTransition> NewTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetInitialMusic");

	APlayerController_ClientSetInitialMusic_Params params;
	params.NewSong = NewSong;
	params.NewTransition = NewTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetMusic
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 NewSong                        (Parm, NeedCtorLink)
// TEnumAsByte<EMusicTransition>  NewTransition                  (Parm)

void APlayerController::ClientSetMusic(const struct FString& NewSong, TEnumAsByte<EMusicTransition> NewTransition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetMusic");

	APlayerController_ClientSetMusic_Params params;
	params.NewSong = NewSong;
	params.NewTransition = NewTransition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Destroyed
// (Defined, Simulated, Event, Public)

void APlayerController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Destroyed");

	APlayerController_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientQueueAnnouncement
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FName                   ASoundName                     (Parm)
// unsigned char                  AnnouncementLevel              (Parm)
// TEnumAsByte<EAPriority>        Priority                       (OptionalParm, Parm)
// unsigned char                  Switch                         (OptionalParm, Parm)

void APlayerController::ClientQueueAnnouncement(const struct FName& ASoundName, unsigned char AnnouncementLevel, TEnumAsByte<EAPriority> Priority, unsigned char Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientQueueAnnouncement");

	APlayerController_ClientQueueAnnouncement_Params params;
	params.ASoundName = ASoundName;
	params.AnnouncementLevel = AnnouncementLevel;
	params.Priority = Priority;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientFmodPlaySoundLocal
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 SoundName                      (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)
// struct FVector                 soundLocation                  (OptionalParm, Parm)

void APlayerController::ClientFmodPlaySoundLocal(const struct FString& SoundName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, const struct FVector& soundLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientFmodPlaySoundLocal");

	APlayerController_ClientFmodPlaySoundLocal_Params params;
	params.SoundName = SoundName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;
	params.soundLocation = soundLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientStopLoopSoundByActor
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  Target                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::ClientStopLoopSoundByActor(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopLoopSoundByActor");

	APlayerController_ClientStopLoopSoundByActor_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientStopAllSoundByActor
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  Target                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::ClientStopAllSoundByActor(class AActor* Target)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopAllSoundByActor");

	APlayerController_ClientStopAllSoundByActor_Params params;
	params.Target = Target;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.FmodClientPlaySound
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 SoundName                      (Parm, NeedCtorLink)
// bool                           bVolumeControl                 (OptionalParm, Parm)
// float                          inAtten                        (OptionalParm, Parm)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)

void APlayerController::FmodClientPlaySound(const struct FString& SoundName, bool bVolumeControl, float inAtten, TEnumAsByte<ESoundSlot> Slot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FmodClientPlaySound");

	APlayerController_FmodClientPlaySound_Params params;
	params.SoundName = SoundName;
	params.bVolumeControl = bVolumeControl;
	params.inAtten = inAtten;
	params.Slot = Slot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientChangeSlot6
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)

void APlayerController::ClientChangeSlot6(class AwWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientChangeSlot6");

	APlayerController_ClientChangeSlot6_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientChangeSlot5
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)
// bool                           bAddSkill                      (OptionalParm, Parm)

void APlayerController::ClientChangeSlot5(class AwWeapon* W, bool bAddSkill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientChangeSlot5");

	APlayerController_ClientChangeSlot5_Params params;
	params.W = W;
	params.bAddSkill = bAddSkill;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AllowVoiceMessage
// (Defined, Public)
// Parameters:
// struct FName                   MessageType                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AllowVoiceMessage(const struct FName& MessageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowVoiceMessage");

	APlayerController_AllowVoiceMessage_Params params;
	params.MessageType = MessageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.QueueAnnouncement
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 ASoundName                     (Parm, NeedCtorLink)
// unsigned char                  AnnouncementLevel              (Parm)
// TEnumAsByte<EAPriority>        Priority                       (OptionalParm, Parm)
// unsigned char                  Switch                         (OptionalParm, Parm)

void APlayerController::QueueAnnouncement(const struct FString& ASoundName, unsigned char AnnouncementLevel, TEnumAsByte<EAPriority> Priority, unsigned char Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.QueueAnnouncement");

	APlayerController_QueueAnnouncement_Params params;
	params.ASoundName = ASoundName;
	params.AnnouncementLevel = AnnouncementLevel;
	params.Priority = Priority;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CustomizeAnnouncer
// (Defined, Public)
// Parameters:
// class USound*                  AnnouncementSound              (Parm)
// class USound*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class USound* APlayerController::CustomizeAnnouncer(class USound* AnnouncementSound)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CustomizeAnnouncer");

	APlayerController_CustomizeAnnouncer_Params params;
	params.AnnouncementSound = AnnouncementSound;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.PlayAnnouncement
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class USound*                  ASound                         (Parm)
// unsigned char                  AnnouncementLevel              (Parm)
// bool                           bForce                         (OptionalParm, Parm)

void APlayerController::PlayAnnouncement(class USound* ASound, unsigned char AnnouncementLevel, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayAnnouncement");

	APlayerController_PlayAnnouncement_Params params;
	params.ASound = ASound;
	params.AnnouncementLevel = AnnouncementLevel;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayRewardAnnouncement
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FName                   AName                          (Parm)
// unsigned char                  AnnouncementLevel              (Parm)
// bool                           bForce                         (OptionalParm, Parm)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// bool                           isWomanVoice                   (OptionalParm, Parm)

void APlayerController::PlayRewardAnnouncement(const struct FName& AName, unsigned char AnnouncementLevel, bool bForce, TEnumAsByte<ESoundSlot> Slot, bool isWomanVoice)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayRewardAnnouncement");

	APlayerController_PlayRewardAnnouncement_Params params;
	params.AName = AName;
	params.AnnouncementLevel = AnnouncementLevel;
	params.bForce = bForce;
	params.Slot = Slot;
	params.isWomanVoice = isWomanVoice;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayStatusAnnouncement
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 AName                          (Parm, NeedCtorLink)
// unsigned char                  AnnouncementLevel              (Parm)
// bool                           bForce                         (OptionalParm, Parm)

void APlayerController::PlayStatusAnnouncement(const struct FString& AName, unsigned char AnnouncementLevel, bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayStatusAnnouncement");

	APlayerController_PlayStatusAnnouncement_Params params;
	params.AName = AName;
	params.AnnouncementLevel = AnnouncementLevel;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PrecacheAnnouncements
// (Defined, Simulated, Public)

void APlayerController::PrecacheAnnouncements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PrecacheAnnouncements");

	APlayerController_PrecacheAnnouncements_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PlayBeepSound
// (Simulated, Public)

void APlayerController::PlayBeepSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PlayBeepSound");

	APlayerController_PlayBeepSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.TeamMessage
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (Parm)

void APlayerController::TeamMessage(class APlayerReplicationInfo* PRI, const struct FString& S, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.TeamMessage");

	APlayerController_TeamMessage_Params params;
	params.PRI = PRI;
	params.S = S;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AllowTextToSpeech
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FName                   Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::AllowTextToSpeech(class APlayerReplicationInfo* PRI, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AllowTextToSpeech");

	APlayerController_AllowTextToSpeech_Params params;
	params.PRI = PRI;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientMessage
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void APlayerController::ClientMessage(const struct FString& S, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientMessage");

	APlayerController_ClientMessage_Params params;
	params.S = S;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChatRoomMessage
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// int                            Result                         (Parm)
// int                            ChannelIndex                   (Parm)
// class APlayerReplicationInfo*  RelatedPRI                     (OptionalParm, Parm)

void APlayerController::ChatRoomMessage(int Result, int ChannelIndex, class APlayerReplicationInfo* RelatedPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChatRoomMessage");

	APlayerController_ChatRoomMessage_Params params;
	params.Result = Result;
	params.ChannelIndex = ChannelIndex;
	params.RelatedPRI = RelatedPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveMessage_QuestType3
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRDifficult                    (OptionalParm, Parm)
// int                            iRMap                          (OptionalParm, Parm)

void APlayerController::ReceiveMessage_QuestType3(class UClass* Message, int Switch, int iRDifficult, int iRMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveMessage_QuestType3");

	APlayerController_ReceiveMessage_QuestType3_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iRDifficult = iRDifficult;
	params.iRMap = iRMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveMessage_QuestType2
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRMode                         (OptionalParm, Parm)
// int                            iRMap                          (OptionalParm, Parm)
// int                            iRMin                          (OptionalParm, Parm)
// int                            iRSec                          (OptionalParm, Parm)

void APlayerController::ReceiveMessage_QuestType2(class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveMessage_QuestType2");

	APlayerController_ReceiveMessage_QuestType2_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iRMode = iRMode;
	params.iRMap = iRMap;
	params.iRMin = iRMin;
	params.iRSec = iRSec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveMessage_QuestType1
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRWeaponType                   (OptionalParm, Parm)
// int                            iRweaponId                     (OptionalParm, Parm)

void APlayerController::ReceiveMessage_QuestType1(class UClass* Message, int Switch, int iRWeaponType, int iRweaponId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveMessage_QuestType1");

	APlayerController_ReceiveMessage_QuestType1_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iRWeaponType = iRWeaponType;
	params.iRweaponId = iRweaponId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveLocalizedMessageWithKillerInfo
// (Defined, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// class AController*             Killer                         (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void APlayerController::ReceiveLocalizedMessageWithKillerInfo(class UClass* Message, class AController* Killer, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveLocalizedMessageWithKillerInfo");

	APlayerController_ReceiveLocalizedMessageWithKillerInfo_Params params;
	params.Message = Message;
	params.Killer = Killer;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveLocalizedMessage
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// int                            iReserve                       (OptionalParm, Parm)

void APlayerController::ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, int iReserve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveLocalizedMessage");

	APlayerController_ReceiveLocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;
	params.iReserve = iReserve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ReceiveLocalizedMessage2
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// bool                           bOption_Push                   (OptionalParm, Parm)
// int                            Reserved1                      (OptionalParm, Parm)
// int                            Reserved2                      (OptionalParm, Parm)
// struct FString                 Reserved3                      (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ReceiveLocalizedMessage2(class UClass* Message, int Switch, bool bOption_Push, int Reserved1, int Reserved2, const struct FString& Reserved3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ReceiveLocalizedMessage2");

	APlayerController_ReceiveLocalizedMessage2_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.bOption_Push = bOption_Push;
	params.Reserved1 = Reserved1;
	params.Reserved2 = Reserved2;
	params.Reserved3 = Reserved3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EndFlash
// (Defined, Public)

void APlayerController::EndFlash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EndFlash");

	APlayerController_EndFlash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewFlash
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void APlayerController::ViewFlash(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewFlash");

	APlayerController_ViewFlash_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UpdateFlashComponent
// (Final, Defined, Public)
// Parameters:
// float                          current                        (Parm)
// float                          Step                           (Parm)
// float                          Goal                           (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::UpdateFlashComponent(float current, float Step, float Goal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UpdateFlashComponent");

	APlayerController_UpdateFlashComponent_Params params;
	params.current = current;
	params.Step = Step;
	params.Goal = Goal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientStopForceFeedback
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 EffectName                     (OptionalParm, Parm, NeedCtorLink)

void APlayerController::ClientStopForceFeedback(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientStopForceFeedback");

	APlayerController_ClientStopForceFeedback_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StopForceFeedback
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 EffectName                     (OptionalParm, Parm, NeedCtorLink)

void APlayerController::StopForceFeedback(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StopForceFeedback");

	APlayerController_StopForceFeedback_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientPlayForceFeedback
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 EffectName                     (Parm, NeedCtorLink)

void APlayerController::ClientPlayForceFeedback(const struct FString& EffectName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientPlayForceFeedback");

	APlayerController_ClientPlayForceFeedback_Params params;
	params.EffectName = EffectName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetHUD
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class UClass*                  newHUDClass                    (Parm)
// class UClass*                  newScoringClass                (Parm)
// class UClass*                  newResultClass                 (Parm)
// class UClass*                  newResultBootyClass            (Parm)

void APlayerController::ClientSetHUD(class UClass* newHUDClass, class UClass* newScoringClass, class UClass* newResultClass, class UClass* newResultBootyClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetHUD");

	APlayerController_ClientSetHUD_Params params;
	params.newHUDClass = newHUDClass;
	params.newScoringClass = newScoringClass;
	params.newResultClass = newResultClass;
	params.newResultBootyClass = newResultBootyClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientUpdateFlagHolder
// (Defined, Net, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// int                            i                              (Parm)

void APlayerController::ClientUpdateFlagHolder(class APlayerReplicationInfo* PRI, int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientUpdateFlagHolder");

	APlayerController_ClientUpdateFlagHolder_Params params;
	params.PRI = PRI;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PawnDied
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::PawnDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PawnDied");

	APlayerController_PawnDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ViewNextBot
// (Defined, Public)

void APlayerController::ViewNextBot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ViewNextBot");

	APlayerController_ViewNextBot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.UnPossess
// (Defined, Public)

void APlayerController::UnPossess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.UnPossess");

	APlayerController_UnPossess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerAcknowledgePossession
// (Defined, Net, NetReliable, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// float                          NewHand                        (Parm)
// bool                           bNewAutoTaunt                  (Parm)

void APlayerController::ServerAcknowledgePossession(class APawn* P, float NewHand, bool bNewAutoTaunt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerAcknowledgePossession");

	APlayerController_ServerAcknowledgePossession_Params params;
	params.P = P;
	params.NewHand = NewHand;
	params.bNewAutoTaunt = bNewAutoTaunt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AcknowledgePossession
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void APlayerController::AcknowledgePossession(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AcknowledgePossession");

	APlayerController_AcknowledgePossession_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Possess
// (Defined, Public)
// Parameters:
// class APawn*                   aPawn                          (Parm)

void APlayerController::Possess(class APawn* aPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Possess");

	APlayerController_Possess_Params params;
	params.aPawn = aPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetFacingDirection
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::GetFacingDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetFacingDirection");

	APlayerController_GetFacingDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientLogPawns
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientLogPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientLogPawns");

	APlayerController_ClientLogPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DoLogPawns
// (Defined, Public)

void APlayerController::DoLogPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DoLogPawns");

	APlayerController_DoLogPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EveryLogPawns
// (Defined, Exec, Public)

void APlayerController::EveryLogPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EveryLogPawns");

	APlayerController_EveryLogPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LogPawns
// (Defined, Exec, Public)

void APlayerController::LogPawns()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LogPawns");

	APlayerController_LogPawns_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GivePawn
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// class APawn*                   NewPawn                        (Parm)

void APlayerController::GivePawn(class APawn* NewPawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GivePawn");

	APlayerController_GivePawn_Params params;
	params.NewPawn = NewPawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AskForPawn
// (Defined, Net, NetReliable, Public)

void APlayerController::AskForPawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AskForPawn");

	APlayerController_AskForPawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientGotoState
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FName                   NewState                       (Parm)
// struct FName                   NewLabel                       (Parm)

void APlayerController::ClientGotoState(const struct FName& NewState, const struct FName& NewLabel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientGotoState");

	APlayerController_ClientGotoState_Params params;
	params.NewState = NewState;
	params.NewLabel = NewLabel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.InitInputSystem
// (Defined, Event, Public)

void APlayerController::InitInputSystem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.InitInputSystem");

	APlayerController_InitInputSystem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.preB
// (Defined, Exec, Public)

void APlayerController::preB()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.preB");

	APlayerController_preB_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.preA
// (Defined, Exec, Public)

void APlayerController::preA()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.preA");

	APlayerController_preA_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.tests
// (Defined, Exec, Public)

void APlayerController::tests()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.tests");

	APlayerController_tests_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CleanOutSavedMoves
// (Defined, Public)

void APlayerController::CleanOutSavedMoves()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CleanOutSavedMoves");

	APlayerController_CleanOutSavedMoves_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ChatResetInput
// (Defined, Public)

void APlayerController::ChatResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ChatResetInput");

	APlayerController_ChatResetInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ScriptResetInput
// (Defined, Public)

void APlayerController::ScriptResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ScriptResetInput");

	APlayerController_ScriptResetInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientReset
// (Defined, Net, NetReliable, Event, Public)

void APlayerController::ClientReset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientReset");

	APlayerController_ClientReset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Reset
// (Defined, Public)

void APlayerController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Reset");

	APlayerController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SpawnDefaultHUD
// (Defined, Public)

void APlayerController::SpawnDefaultHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SpawnDefaultHUD");

	APlayerController_SpawnDefaultHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerVerifyViewTarget
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerVerifyViewTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerVerifyViewTarget");

	APlayerController_ServerVerifyViewTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTargetZZ
// (Defined, Net, NetReliable, Simulated, Event, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTargetZZ(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTargetZZ");

	APlayerController_ClientSetViewTargetZZ_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_NATIVE
// (Defined, Simulated, Event, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_NATIVE(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_NATIVE");

	APlayerController_ClientSetViewTarget_NATIVE_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_S
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_S(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_S");

	APlayerController_ClientSetViewTarget_S_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_R
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_R(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_R");

	APlayerController_ClientSetViewTarget_R_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_Q
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_Q(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_Q");

	APlayerController_ClientSetViewTarget_Q_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_P
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_P(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_P");

	APlayerController_ClientSetViewTarget_P_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_O
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_O(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_O");

	APlayerController_ClientSetViewTarget_O_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_N
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_N(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_N");

	APlayerController_ClientSetViewTarget_N_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_M
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_M(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_M");

	APlayerController_ClientSetViewTarget_M_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_L
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_L(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_L");

	APlayerController_ClientSetViewTarget_L_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_K
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_K(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_K");

	APlayerController_ClientSetViewTarget_K_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_J
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_J(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_J");

	APlayerController_ClientSetViewTarget_J_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_I
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_I(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_I");

	APlayerController_ClientSetViewTarget_I_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_H
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_H(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_H");

	APlayerController_ClientSetViewTarget_H_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_G
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_G(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_G");

	APlayerController_ClientSetViewTarget_G_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_F
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_F(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_F");

	APlayerController_ClientSetViewTarget_F_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_E
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_E(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_E");

	APlayerController_ClientSetViewTarget_E_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_D
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_D(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_D");

	APlayerController_ClientSetViewTarget_D_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_C
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_C(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_C");

	APlayerController_ClientSetViewTarget_C_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_B
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_B(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_B");

	APlayerController_ClientSetViewTarget_B_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetViewTarget_A
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ClientSetViewTarget_A(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetViewTarget_A");

	APlayerController_ClientSetViewTarget_A_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.HandlePickup
// (Defined, Public)
// Parameters:
// class APickup*                 pick                           (Parm)

void APlayerController::HandlePickup(class APickup* pick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.HandlePickup");

	APlayerController_HandlePickup_Params params;
	params.pick = pick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.MakeAdmin
// (Defined, Public)

void APlayerController::MakeAdmin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.MakeAdmin");

	APlayerController_MakeAdmin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.AddCheats
// (Defined, Public)

void APlayerController::AddCheats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.AddCheats");

	APlayerController_AddCheats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PendingStasis
// (Defined, Public)

void APlayerController::PendingStasis()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PendingStasis");

	APlayerController_PendingStasis_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientCapBandwidth
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            Cap                            (Parm)

void APlayerController::ClientCapBandwidth(int Cap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientCapBandwidth");

	APlayerController_ClientCapBandwidth_Params params;
	params.Cap = Cap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerGivePawn
// (Defined, Public)

void APlayerController::ServerGivePawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerGivePawn");

	APlayerController_ServerGivePawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSpectateSpeed
// (Defined, Net, NetReliable, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::ServerSpectateSpeed(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSpectateSpeed");

	APlayerController_ServerSpectateSpeed_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetClassicView
// (Defined, Net, NetReliable, Public)

void APlayerController::ClientSetClassicView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetClassicView");

	APlayerController_ClientSetClassicView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientSetWeaponViewShake
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerController::ClientSetWeaponViewShake(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientSetWeaponViewShake");

	APlayerController_ClientSetWeaponViewShake_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetSpectateSpeed
// (Defined, Exec, Public)
// Parameters:
// float                          f                              (Parm)

void APlayerController::SetSpectateSpeed(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetSpectateSpeed");

	APlayerController_SetSpectateSpeed_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ss
// (Exec, Public)
// Parameters:
// struct FString                 t                              (Parm, NeedCtorLink)

void APlayerController::ss(const struct FString& t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ss");

	APlayerController_ss_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ToggleScreenShotMode
// (Defined, Exec, Public)

void APlayerController::ToggleScreenShotMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ToggleScreenShotMode");

	APlayerController_ToggleScreenShotMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.KillAllPawns
// (Defined, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)

void APlayerController::KillAllPawns(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.KillAllPawns");

	APlayerController_KillAllPawns_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.KillAll
// (Defined, Exec, Public)
// Parameters:
// class UClass*                  aClass                         (Parm)

void APlayerController::KillAll(class UClass* aClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.KillAll");

	APlayerController_KillAll_Params params;
	params.aClass = aClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.StreamFinished
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            StreamHandle                   (Parm)
// TEnumAsByte<EStreamFinishReason> Reason                         (Parm)

void APlayerController::StreamFinished(int StreamHandle, TEnumAsByte<EStreamFinishReason> Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.StreamFinished");

	APlayerController_StreamFinished_Params params;
	params.StreamHandle = StreamHandle;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPathTo
// (Defined, Public)
// Parameters:
// class AActor*                  Dest                           (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* APlayerController::GetPathTo(class AActor* Dest)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPathTo");

	APlayerController_GetPathTo_Params params;
	params.Dest = Dest;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerShortTimeout
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerShortTimeout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerShortTimeout");

	APlayerController_ServerShortTimeout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetTimeMarginNative
// (Native, Public)

void APlayerController::ResetTimeMarginNative()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetTimeMarginNative");

	APlayerController_ResetTimeMarginNative_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetTimeMargin
// (Defined, Public)

void APlayerController::ResetTimeMargin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetTimeMargin");

	APlayerController_ResetTimeMargin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.KickWarning
// (Defined, Event, Public)

void APlayerController::KickWarning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.KickWarning");

	APlayerController_KickWarning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.BeyondViewDistance
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 OtherLocation                  (Parm)
// float                          CullDistance                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::BeyondViewDistance(const struct FVector& OtherLocation, float CullDistance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.BeyondViewDistance");

	APlayerController_BeyondViewDistance_Params params;
	params.OtherLocation = OtherLocation;
	params.CullDistance = CullDistance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientEndChangeHost
// (Defined, Net, NetReliable, Simulated, Public)

void APlayerController::ClientEndChangeHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientEndChangeHost");

	APlayerController_ClientEndChangeHost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.EndChangeHost
// (Defined, Simulated, Public)

void APlayerController::EndChangeHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.EndChangeHost");

	APlayerController_EndChangeHost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SendAllUserGameStateDataToInterventionUser
// (Defined, Event, Public)

void APlayerController::SendAllUserGameStateDataToInterventionUser()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendAllUserGameStateDataToInterventionUser");

	APlayerController_SendAllUserGameStateDataToInterventionUser_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.DestroyGameStateStorageSender
// (Defined, Event, Public)

void APlayerController::DestroyGameStateStorageSender()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.DestroyGameStateStorageSender");

	APlayerController_DestroyGameStateStorageSender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CreateGameStateStorageSender
// (Defined, Event, Public)

void APlayerController::CreateGameStateStorageSender()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CreateGameStateStorageSender");

	APlayerController_CreateGameStateStorageSender_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PostBeginPlay
// (Defined, Simulated, Event, Public)

void APlayerController::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PostBeginPlay");

	APlayerController_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerGetWeaponStats
// (Defined, Net, NetReliable, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)

void APlayerController::ServerGetWeaponStats(class AwWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerGetWeaponStats");

	APlayerController_ServerGetWeaponStats_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.testRS
// (Defined, Exec, Public)

void APlayerController::testRS()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.testRS");

	APlayerController_testRS_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetWeaponStats
// (Defined, Exec, Public)

void APlayerController::GetWeaponStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetWeaponStats");

	APlayerController_GetWeaponStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyEndLoading
// (Defined, Event, Public)

void APlayerController::NotifyEndLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyEndLoading");

	APlayerController_NotifyEndLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.NotifyRecordException
// (Defined, Event, Public)
// Parameters:
// int                            retCode                        (Parm)

void APlayerController::NotifyRecordException(int retCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.NotifyRecordException");

	APlayerController_NotifyRecordException_Params params;
	params.retCode = retCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetPlayerInput
// (Defined, Public)
// Parameters:
// class UPlayerInput*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UPlayerInput* APlayerController::GetPlayerInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerInput");

	APlayerController_GetPlayerInput_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerNotifyEndLoading
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerNotifyEndLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerNotifyEndLoading");

	APlayerController_ServerNotifyEndLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LocalNotifyEndLoading
// (Defined, Public)

void APlayerController::LocalNotifyEndLoading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalNotifyEndLoading");

	APlayerController_LocalNotifyEndLoading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ServerSetPrecached
// (Defined, Net, NetReliable, Public)

void APlayerController::ServerSetPrecached()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerSetPrecached");

	APlayerController_ServerSetPrecached_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetPrecached
// (Defined, Event, Public)

void APlayerController::SetPrecached()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetPrecached");

	APlayerController_SetPrecached_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.LocalSetPrecached
// (Defined, Public)

void APlayerController::LocalSetPrecached()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.LocalSetPrecached");

	APlayerController_LocalSetPrecached_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ShowPathToActor
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  A                              (Parm)

void APlayerController::ShowPathToActor(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ShowPathToActor");

	APlayerController_ShowPathToActor_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetStateStrName
// (Defined, Public)
// Parameters:
// struct FString                 strName                        (Parm, NeedCtorLink)
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName APlayerController::GetStateStrName(const struct FString& strName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetStateStrName");

	APlayerController_GetStateStrName_Params params;
	params.strName = strName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetTimeOutInPlaying
// (Native, Public)

void APlayerController::SetTimeOutInPlaying()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetTimeOutInPlaying");

	APlayerController_SetTimeOutInPlaying_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.Cmd
// (Exec, Public)
// Parameters:
// struct FString                 P1                             (Parm, NeedCtorLink)
// struct FString                 P2                             (Parm, NeedCtorLink)
// struct FString                 p3                             (Parm, NeedCtorLink)
// struct FString                 p4                             (Parm, NeedCtorLink)
// struct FString                 p5                             (Parm, NeedCtorLink)

void APlayerController::Cmd(const struct FString& P1, const struct FString& P2, const struct FString& p3, const struct FString& p4, const struct FString& p5)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.Cmd");

	APlayerController_Cmd_Params params;
	params.P1 = P1;
	params.P2 = P2;
	params.p3 = p3;
	params.p4 = p4;
	params.p5 = p5;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SaveParams
// (Exec, Native, Public)

void APlayerController::SaveParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SaveParams");

	APlayerController_SaveParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SplitForInputWeapon
// (Native, Public)
// Parameters:
// struct FString                 Src                            (Parm, CoerceParm, NeedCtorLink)
// TArray<struct FString>         Parts                          (Parm, OutParm, NeedCtorLink)

void APlayerController::SplitForInputWeapon(const struct FString& Src, TArray<struct FString>* Parts)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SplitForInputWeapon");

	APlayerController_SplitForInputWeapon_Params params;
	params.Src = Src;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Parts != nullptr)
		*Parts = params.Parts;
}


// Function Engine.PlayerController.FmodClientHearSound
// (Net, NetReliable, Native, Event, Public)
// Parameters:
// class AActor*                  Actor                          (Parm)
// int                            id                             (Parm)
// struct FString                 SoundName                      (Parm, NeedCtorLink)
// struct FVector                 soundLocation                  (Parm)
// float                          Pitch                          (Parm)
// bool                           Attenuate                      (Parm)
// bool                           Loop                           (Parm)

void APlayerController::FmodClientHearSound(class AActor* Actor, int id, const struct FString& SoundName, const struct FVector& soundLocation, float Pitch, bool Attenuate, bool Loop)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FmodClientHearSound");

	APlayerController_FmodClientHearSound_Params params;
	params.Actor = Actor;
	params.id = id;
	params.SoundName = SoundName;
	params.soundLocation = soundLocation;
	params.Pitch = Pitch;
	params.Attenuate = Attenuate;
	params.Loop = Loop;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.FindStairRotation
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerController::FindStairRotation(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.FindStairRotation");

	APlayerController_FindStairRotation_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SendWebLog
// (Native, Public)
// Parameters:
// int                            sectionID                      (Parm)
// int                            FailCode                       (Parm)

void APlayerController::SendWebLog(int sectionID, int FailCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SendWebLog");

	APlayerController_SendWebLog_Params params;
	params.sectionID = sectionID;
	params.FailCode = FailCode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetKeySleepTime
// (Native, Public)

void APlayerController::ResetKeySleepTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetKeySleepTime");

	APlayerController_ResetKeySleepTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetKeySleepTime
// (Native, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APlayerController::GetKeySleepTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetKeySleepTime");

	APlayerController_GetKeySleepTime_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CloseWeb
// (Final, Native, Public)
// Parameters:
// struct FString                 C                              (Parm, NeedCtorLink)

void APlayerController::CloseWeb(const struct FString& C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CloseWeb");

	APlayerController_CloseWeb_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.OpenWeb
// (Final, Native, Public)
// Parameters:
// struct FString                 C                              (Parm, NeedCtorLink)
// int                            X                              (Parm)
// int                            Y                              (Parm)
// int                            width                          (Parm)
// int                            Height                         (Parm)

void APlayerController::OpenWeb(const struct FString& C, int X, int Y, int width, int Height)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.OpenWeb");

	APlayerController_OpenWeb_Params params;
	params.C = C;
	params.X = X;
	params.Y = Y;
	params.width = width;
	params.Height = Height;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.CheckSpeedHack
// (Final, Native, Public)
// Parameters:
// float                          DeltaTime                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerController::CheckSpeedHack(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CheckSpeedHack");

	APlayerController_CheckSpeedHack_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ServerValidationResponse
// (Net, NetReliable, Native, Event, Private)
// Parameters:
// struct FString                 R                              (Parm, NeedCtorLink)

void APlayerController::ServerValidationResponse(const struct FString& R)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ServerValidationResponse");

	APlayerController_ServerValidationResponse_Params params;
	params.R = R;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ClientValidate
// (Net, NetReliable, Native, Event, Private)
// Parameters:
// struct FString                 C                              (Parm, NeedCtorLink)

void APlayerController::ClientValidate(const struct FString& C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientValidate");

	APlayerController_ClientValidate_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.PasteFromClipboard
// (Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::PasteFromClipboard()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.PasteFromClipboard");

	APlayerController_PasteFromClipboard_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.CopyToClipboard
// (Native, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void APlayerController::CopyToClipboard(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.CopyToClipboard");

	APlayerController_CopyToClipboard_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetDefaultURL
// (Final, Native, Public)
// Parameters:
// struct FString                 Option                         (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetDefaultURL(const struct FString& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetDefaultURL");

	APlayerController_GetDefaultURL_Params params;
	params.Option = Option;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetURLProtocol
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetURLProtocol()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetURLProtocol");

	APlayerController_GetURLProtocol_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ClientTravel
// (Net, NetReliable, Native, Event, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// TEnumAsByte<ETravelType>       TravelType                     (Parm)
// bool                           bItems                         (Parm)

void APlayerController::ClientTravel(const struct FString& URL, TEnumAsByte<ETravelType> TravelType, bool bItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ClientTravel");

	APlayerController_ClientTravel_Params params;
	params.URL = URL;
	params.TravelType = TravelType;
	params.bItems = bItems;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.SetViewTarget
// (Final, Native, Public)
// Parameters:
// class AActor*                  NewViewTarget                  (Parm)

void APlayerController::SetViewTarget(class AActor* NewViewTarget)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetViewTarget");

	APlayerController_SetViewTarget_Params params;
	params.NewViewTarget = NewViewTarget;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetInput
// (Final, Native, Private)

void APlayerController::ResetInput()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetInput");

	APlayerController_ResetInput_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.ResetKeyboard
// (Final, Native, Public)

void APlayerController::ResetKeyboard()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ResetKeyboard");

	APlayerController_ResetKeyboard_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerController.GetEntryLevel
// (Final, Native, Public)
// Parameters:
// class ALevelInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class ALevelInfo* APlayerController::GetEntryLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetEntryLevel");

	APlayerController_GetEntryLevel_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.ConsoleCommand
// (Native, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// bool                           bWriteToLog                    (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::ConsoleCommand(const struct FString& Command, bool bWriteToLog)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.ConsoleCommand");

	APlayerController_ConsoleCommand_Params params;
	params.Command = Command;
	params.bWriteToLog = bWriteToLog;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetServerNetworkAddress
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetServerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetServerNetworkAddress");

	APlayerController_GetServerNetworkAddress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPlayerNetworkAddress
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetPlayerNetworkAddress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerNetworkAddress");

	APlayerController_GetPlayerNetworkAddress_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.GetPlayerIDHash
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerController::GetPlayerIDHash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.GetPlayerIDHash");

	APlayerController_GetPlayerIDHash_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerController.SetNetSpeed
// (Final, Native, Public)
// Parameters:
// int                            NewSpeed                       (Parm)

void APlayerController::SetNetSpeed(int NewSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerController.SetNetSpeed");

	APlayerController_SetNetSpeed_Params params;
	params.NewSpeed = NewSpeed;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.Startle
// (Public)
// Parameters:
// class AActor*                  A                              (Parm)

void AAIController::Startle(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.Startle");

	AAIController_Startle_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.PriorityObjective
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::PriorityObjective()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.PriorityObjective");

	AAIController_PriorityObjective_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.UnderLift
// (Defined, Public)
// Parameters:
// class AMover*                  M                              (Parm)

void AAIController::UnderLift(class AMover* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.UnderLift");

	AAIController_UnderLift_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.MoverFinished
// (Defined, Public)

void AAIController::MoverFinished()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.MoverFinished");

	AAIController_MoverFinished_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.WaitForMover
// (Defined, Public)
// Parameters:
// class AMover*                  M                              (Parm)

void AAIController::WaitForMover(class AMover* M)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.WaitForMover");

	AAIController_WaitForMover_Params params;
	params.M = M;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.PrepareForMove
// (Event, Public)
// Parameters:
// class ANavigationPoint*        Goal                           (Parm)
// class UReachSpec*              Path                           (Parm)

void AAIController::PrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.PrepareForMove");

	AAIController_PrepareForMove_Params params;
	params.Goal = Goal;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.GetOrders
// (Defined, Public)
// Parameters:
// struct FName                   ReturnValue                    (Parm, OutParm, ReturnParm)

struct FName AAIController::GetOrders()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetOrders");

	AAIController_GetOrders_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.GetOrderObject
// (Defined, Public)
// Parameters:
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AAIController::GetOrderObject()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetOrderObject");

	AAIController_GetOrderObject_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.SetOrders
// (Public)
// Parameters:
// struct FName                   NewOrders                      (Parm)
// class AController*             OrderGiver                     (Parm)

void AAIController::SetOrders(const struct FName& NewOrders, class AController* OrderGiver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.SetOrders");

	AAIController_SetOrders_Params params;
	params.NewOrders = NewOrders;
	params.OrderGiver = OrderGiver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.AdjustView
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AAIController::AdjustView(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.AdjustView");

	AAIController_AdjustView_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.GetFacingDirection
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AAIController::GetFacingDirection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.GetFacingDirection");

	AAIController_GetFacingDirection_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.AdjustDesireFor
// (Defined, Public)
// Parameters:
// class APickup*                 P                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AAIController::AdjustDesireFor(class APickup* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.AdjustDesireFor");

	AAIController_AdjustDesireFor_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.DisplayDebug
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AAIController::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.DisplayDebug");

	AAIController_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.AIController.TriggerScript
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::TriggerScript(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.TriggerScript");

	AAIController_TriggerScript_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.WeaponFireAgain
// (Defined, Public)
// Parameters:
// float                          RefireRate                     (Parm)
// bool                           bFinishedFire                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAIController::WeaponFireAgain(float RefireRate, bool bFinishedFire)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.WeaponFireAgain");

	AAIController_WeaponFireAgain_Params params;
	params.RefireRate = RefireRate;
	params.bFinishedFire = bFinishedFire;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AAIController::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.Trigger");

	AAIController_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.RateWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                W                              (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AAIController::RateWeapon(class AwWeapon* W)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.RateWeapon");

	AAIController_RateWeapon_Params params;
	params.W = W;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AIController.Reset
// (Defined, Public)

void AAIController::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.Reset");

	AAIController_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.PreBeginPlay
// (Defined, Event, Public)

void AAIController::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.PreBeginPlay");

	AAIController_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AIController.WaitToSeeEnemy
// (Final, Latent, Native, Public)

void AAIController::WaitToSeeEnemy()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AIController.WaitToSeeEnemy");

	AAIController_WaitToSeeEnemy_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.StaticItemName
// (Defined, Static, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInventory::STATIC_StaticItemName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.StaticItemName");

	AInventory_StaticItemName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.SetOwnerDisplay
// (Defined, Public)

void AInventory::SetOwnerDisplay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.SetOwnerDisplay");

	AInventory_SetOwnerDisplay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.OwnerEvent
// (Defined, Public)
// Parameters:
// struct FName                   EventName                      (Parm)

void AInventory::OwnerEvent(const struct FName& EventName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.OwnerEvent");

	AInventory_OwnerEvent_Params params;
	params.EventName = EventName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.PrioritizeArmor
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// class AArmor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AArmor* AInventory::PrioritizeArmor(int Damage, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.PrioritizeArmor");

	AInventory_PrioritizeArmor_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.NextWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                CurrentChoice                  (Parm)
// class AwWeapon*                CurrentWeapon                  (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AInventory::NextWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.NextWeapon");

	AInventory_NextWeapon_Params params;
	params.CurrentChoice = CurrentChoice;
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.PrevWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                CurrentChoice                  (Parm)
// class AwWeapon*                CurrentWeapon                  (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AInventory::PrevWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.PrevWeapon");

	AInventory_PrevWeapon_Params params;
	params.CurrentChoice = CurrentChoice;
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.WeaponChangeWID
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AInventory::WeaponChangeWID(int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.WeaponChangeWID");

	AInventory_WeaponChangeWID_Params params;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.WeaponChangeWClass
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   wClass                         (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AInventory::WeaponChangeWClass(const struct FName& wClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.WeaponChangeWClass");

	AInventory_WeaponChangeWClass_Params params;
	params.wClass = wClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.WeaponChange
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  f                              (Parm)
// bool                           bSilent                        (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AInventory::WeaponChange(unsigned char f, bool bSilent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.WeaponChange");

	AInventory_WeaponChange_Params params;
	params.f = f;
	params.bSilent = bSilent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.Use
// (Public)
// Parameters:
// float                          Value                          (Parm)

void AInventory::Use(float Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.Use");

	AInventory_Use_Params params;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DropFrom
// (Defined, Public)
// Parameters:
// struct FVector                 StartLocation                  (Parm)
// struct FRotator                StartRotation                  (Parm)

void AInventory::DropFrom(const struct FVector& StartLocation, const struct FRotator& StartRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DropFrom");

	AInventory_DropFrom_Params params;
	params.StartLocation = StartLocation;
	params.StartRotation = StartRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.SelectNext
// (Defined, Public)
// Parameters:
// class APowerups*               ReturnValue                    (Parm, OutParm, ReturnParm)

class APowerups* AInventory::SelectNext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.SelectNext");

	AInventory_SelectNext_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.HandlePickupQuery
// (Defined, Public)
// Parameters:
// class APickup*                 Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AInventory::HandlePickupQuery(class APickup* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.HandlePickupQuery");

	AInventory_HandlePickupQuery_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.GiveTo
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class APickup*                 Pickup                         (OptionalParm, Parm)

void AInventory::GiveTo(class APawn* Other, class APickup* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GiveTo");

	AInventory_GiveTo_Params params;
	params.Other = Other;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.Destroyed
// (Defined, Public)

void AInventory::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.Destroyed");

	AInventory_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.TravelPostAccept
// (Defined, Public)

void AInventory::TravelPostAccept()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.TravelPostAccept");

	AInventory_TravelPostAccept_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.TravelPreAccept
// (Defined, Event, Public)

void AInventory::TravelPreAccept()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.TravelPreAccept");

	AInventory_TravelPreAccept_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.RecommendWeapon
// (Defined, Simulated, Public)
// Parameters:
// float                          rating                         (Parm, OutParm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AInventory::RecommendWeapon(float* rating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.RecommendWeapon");

	AInventory_RecommendWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rating != nullptr)
		*rating = params.rating;

	return params.ReturnValue;
}


// Function Engine.Inventory.PickupFunction
// (Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void AInventory::PickupFunction(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.PickupFunction");

	AInventory_PickupFunction_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInventory::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.GetHumanReadableName");

	AInventory_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Inventory.RenderOverlays
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AInventory::RenderOverlays(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.RenderOverlays");

	AInventory_RenderOverlays_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.DetachFromPawn
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AInventory::DetachFromPawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.DetachFromPawn");

	AInventory_DetachFromPawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.updaterelative
// (Defined, Exec, Public)
// Parameters:
// int                            Pitch                          (Parm)
// int                            Yaw                            (Parm)
// int                            Roll                           (Parm)

void AInventory::updaterelative(int Pitch, int Yaw, int Roll)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.updaterelative");

	AInventory_updaterelative_Params params;
	params.Pitch = Pitch;
	params.Yaw = Yaw;
	params.Roll = Roll;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Inventory.AttachToPawn
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AInventory::AttachToPawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Inventory.AttachToPawn");

	AInventory_AttachToPawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAmmunition.AddAmmo
// (Defined, Simulated, Public)
// Parameters:
// int                            AmmoToAdd                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwAmmunition::AddAmmo(int AmmoToAdd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAmmunition.AddAmmo");

	AwAmmunition_AddAmmo_Params params;
	params.AmmoToAdd = AmmoToAdd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAmmunition.HandlePickupQuery
// (Defined, Public)
// Parameters:
// class APickup*                 Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwAmmunition::HandlePickupQuery(class APickup* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAmmunition.HandlePickupQuery");

	AwAmmunition_HandlePickupQuery_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAmmunition.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AwAmmunition::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAmmunition.DisplayDebug");

	AwAmmunition_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.wAmmunition.HasAmmo
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwAmmunition::HasAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAmmunition.HasAmmo");

	AwAmmunition_HasAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAmmunition.UseAmmo
// (Defined, Simulated, Public)
// Parameters:
// int                            AmountNeeded                   (Parm)
// bool                           bAmountNeededIsMax             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwAmmunition::UseAmmo(int AmountNeeded, bool bAmountNeededIsMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAmmunition.UseAmmo");

	AwAmmunition_UseAmmo_Params params;
	params.AmountNeeded = AmountNeeded;
	params.bAmountNeededIsMax = bAmountNeededIsMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAmmunition.CheckOutOfAmmo
// (Defined, Simulated, Public)

void AwAmmunition::CheckOutOfAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAmmunition.CheckOutOfAmmo");

	AwAmmunition_CheckOutOfAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Powerups.GetLocalString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APowerups::STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.GetLocalString");

	APowerups_GetLocalString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Powerups.UsedUp
// (Defined, Public)

void APowerups::UsedUp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.UsedUp");

	APowerups_UsedUp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Powerups.FireEffect
// (Public)

void APowerups::FireEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.FireEffect");

	APowerups_FireEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Powerups.UseCharge
// (Public)
// Parameters:
// float                          Amount                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APowerups::UseCharge(float Amount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.UseCharge");

	APowerups_UseCharge_Params params;
	params.Amount = Amount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Powerups.HandlePickupQuery
// (Defined, Public)
// Parameters:
// class APickup*                 Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APowerups::HandlePickupQuery(class APickup* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.HandlePickupQuery");

	APowerups_HandlePickupQuery_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Powerups.Activate
// (Defined, Public)

void APowerups::Activate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.Activate");

	APowerups_Activate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Powerups.SelectNext
// (Defined, Public)
// Parameters:
// class APowerups*               ReturnValue                    (Parm, OutParm, ReturnParm)

class APowerups* APowerups::SelectNext()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.SelectNext");

	APowerups_SelectNext_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Powerups.PickupFunction
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)

void APowerups::PickupFunction(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.PickupFunction");

	APowerups_PickupFunction_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Powerups.TravelPreAccept
// (Defined, Event, Public)

void APowerups::TravelPreAccept()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Powerups.TravelPreAccept");

	APowerups_TravelPreAccept_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.GetRespawnTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APickup::GetRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.GetRespawnTime");

	APickup_GetRespawnTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.Landed
// (Defined, Event, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)

void APickup::Landed(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.Landed");

	APickup_Landed_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.ReadyToPickup
// (Defined, Public)
// Parameters:
// float                          MaxWait                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickup::ReadyToPickup(float MaxWait)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.ReadyToPickup");

	APickup_ReadyToPickup_Params params;
	params.MaxWait = MaxWait;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.InitDroppedPack
// (Defined, Public)

void APickup::InitDroppedPack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.InitDroppedPack");

	APickup_InitDroppedPack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.InitDroppedPickupFor
// (Defined, Public)
// Parameters:
// class AInventory*              Inv                            (Parm)

void APickup::InitDroppedPickupFor(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.InitDroppedPickupFor");

	APickup_InitDroppedPickupFor_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.GetLocalString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APickup::STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.GetLocalString");

	APickup_GetLocalString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.SetRespawn
// (Defined, Public)

void APickup::SetRespawn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.SetRespawn");

	APickup_SetRespawn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.AnnouncePickup
// (Defined, Public)
// Parameters:
// class APawn*                   Receiver                       (Parm)

void APickup::AnnouncePickup(class APawn* Receiver)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.AnnouncePickup");

	APickup_AnnouncePickup_Params params;
	params.Receiver = Receiver;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.StartSleeping
// (Defined, Public)

void APickup::StartSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.StartSleeping");

	APickup_StartSleeping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.SpawnCopy
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* APickup::SpawnCopy(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.SpawnCopy");

	APickup_SpawnCopy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.BotDesireability
// (Defined, Public)
// Parameters:
// class APawn*                   Bot                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APickup::BotDesireability(class APawn* Bot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.BotDesireability");

	APickup_BotDesireability_Params params;
	params.Bot = Bot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.DetourWeight
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float APickup::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.DetourWeight");

	APickup_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.Transmogrify
// (Defined, Public)
// Parameters:
// class UClass*                  NewClass                       (Parm)
// class APickup*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class APickup* APickup::Transmogrify(class UClass* NewClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.Transmogrify");

	APickup_Transmogrify_Params params;
	params.NewClass = NewClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.RespawnEffect
// (Public)

void APickup::RespawnEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.RespawnEffect");

	APickup_RespawnEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.Reset
// (Defined, Public)

void APickup::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.Reset");

	APickup_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.UpdateHUD
// (Defined, Simulated, Static, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void APickup::STATIC_UpdateHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.UpdateHUD");

	APickup_UpdateHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.IsSuperItem
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APickup::IsSuperItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.IsSuperItem");

	APickup_IsSuperItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APickup::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.GetHumanReadableName");

	APickup_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Pickup.Destroyed
// (Defined, Public)

void APickup::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.Destroyed");

	APickup_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.StaticPrecache
// (Static, Public)
// Parameters:
// class ALevelInfo*              L                              (Parm)

void APickup::STATIC_StaticPrecache(class ALevelInfo* L)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.StaticPrecache");

	APickup_StaticPrecache_Params params;
	params.L = L;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.RemoveFromNavigation
// (Final, Native, Public)

void APickup::RemoveFromNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.RemoveFromNavigation");

	APickup_RemoveFromNavigation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Pickup.AddToNavigation
// (Final, Native, Public)

void APickup::AddToNavigation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Pickup.AddToNavigation");

	APickup_AddToNavigation_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.Tick
// (Defined, Simulated, Public)
// Parameters:
// float                          dt                             (Parm)

void AwWeaponPickup::Tick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.Tick");

	AwWeaponPickup_Tick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.InitDroppedPickupFor
// (Defined, Public)
// Parameters:
// class AInventory*              Inv                            (Parm)

void AwWeaponPickup::InitDroppedPickupFor(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.InitDroppedPickupFor");

	AwWeaponPickup_InitDroppedPickupFor_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.UnTouch
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AwWeaponPickup::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.UnTouch");

	AwWeaponPickup_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.CheckIsTouchingPawn
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeaponPickup::CheckIsTouchingPawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.CheckIsTouchingPawn");

	AwWeaponPickup_CheckIsTouchingPawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponPickup.AddTouchingPawn
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// class APawn*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class APawn* AwWeaponPickup::AddTouchingPawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.AddTouchingPawn");

	AwWeaponPickup_AddTouchingPawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponPickup.Destroyed
// (Defined, Public)

void AwWeaponPickup::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.Destroyed");

	AwWeaponPickup_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.PickWeapon
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AwWeaponPickup::PickWeapon(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.PickWeapon");

	AwWeaponPickup_PickWeapon_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.ValidTouch
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeaponPickup::ValidTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.ValidTouch");

	AwWeaponPickup_ValidTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponPickup.SetSkin
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)
// int                            iAddPartsID                    (Parm)

void AwWeaponPickup::SetSkin(int iWeaponID, int iAddPartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.SetSkin");

	AwWeaponPickup_SetSkin_Params params;
	params.iWeaponID = iWeaponID;
	params.iAddPartsID = iAddPartsID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.wLoadOut
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            iID                            (Parm)
// int                            iAddPartsID                    (Parm)

void AwWeaponPickup::wLoadOut(int iID, int iAddPartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.wLoadOut");

	AwWeaponPickup_wLoadOut_Params params;
	params.iID = iID;
	params.iAddPartsID = iAddPartsID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.Reset
// (Defined, Public)

void AwWeaponPickup::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.Reset");

	AwWeaponPickup_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.GetRespawnTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeaponPickup::GetRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.GetRespawnTime");

	AwWeaponPickup_GetRespawnTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponPickup.BotDesireability
// (Defined, Public)
// Parameters:
// class APawn*                   Bot                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeaponPickup::BotDesireability(class APawn* Bot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.BotDesireability");

	AwWeaponPickup_BotDesireability_Params params;
	params.Bot = Bot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponPickup.DetourWeight
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeaponPickup::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.DetourWeight");

	AwWeaponPickup_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponPickup.ForceBegin
// (Defined, Public)

void AwWeaponPickup::ForceBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.ForceBegin");

	AwWeaponPickup_ForceBegin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.AllowRepeatPickup
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeaponPickup::AllowRepeatPickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.AllowRepeatPickup");

	AwWeaponPickup_AllowRepeatPickup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponPickup.StartSleeping
// (Defined, Public)

void AwWeaponPickup::StartSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.StartSleeping");

	AwWeaponPickup_StartSleeping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.UpdateHUD
// (Defined, Simulated, Static, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void AwWeaponPickup::STATIC_UpdateHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.UpdateHUD");

	AwWeaponPickup_UpdateHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.SetWeaponStay
// (Defined, Public)

void AwWeaponPickup::SetWeaponStay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.SetWeaponStay");

	AwWeaponPickup_SetWeaponStay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.PostNetBeginPlay
// (Defined, Event, Public)

void AwWeaponPickup::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.PostNetBeginPlay");

	AwWeaponPickup_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponPickup.PostBeginPlay
// (Defined, Public)

void AwWeaponPickup::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponPickup.PostBeginPlay");

	AwWeaponPickup_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Ammo.SpawnCopy
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AInventory*              ReturnValue                    (Parm, OutParm, ReturnParm)

class AInventory* AAmmo::SpawnCopy(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ammo.SpawnCopy");

	AAmmo_SpawnCopy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Ammo.BotDesireability
// (Defined, Public)
// Parameters:
// class APawn*                   Bot                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AAmmo::BotDesireability(class APawn* Bot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ammo.BotDesireability");

	AAmmo_BotDesireability_Params params;
	params.Bot = Bot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Ammo.DetourWeight
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AAmmo::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ammo.DetourWeight");

	AAmmo_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Ammo.UpdateHUD
// (Defined, Simulated, Static, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void AAmmo::STATIC_UpdateHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Ammo.UpdateHUD");

	AAmmo_UpdateHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LogEntry.Count
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ULogEntry::Count()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LogEntry.Count");

	ULogEntry_Count_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LogEntry.Delete
// (Defined, Simulated, Public)
// Parameters:
// class ULogEntry*               delLE                          (Parm)
// class ULogEntry*               ReturnValue                    (Parm, OutParm, ReturnParm)

class ULogEntry* ULogEntry::Delete(class ULogEntry* delLE)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LogEntry.Delete");

	ULogEntry_Delete_Params params;
	params.delLE = delLE;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LogEntry.Insert
// (Defined, Simulated, Public)
// Parameters:
// class ULogEntry*               newLE                          (Parm)

void ULogEntry::Insert(class ULogEntry* newLE)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LogEntry.Insert");

	ULogEntry_Insert_Params params;
	params.newLE = newLE;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.GetCurAlienModeWaitingTimeCount
// (Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameReplicationInfo::GetCurAlienModeWaitingTimeCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetCurAlienModeWaitingTimeCount");

	AGameReplicationInfo_GetCurAlienModeWaitingTimeCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.GetCurTeamMemberCount
// (Simulated, Public)
// Parameters:
// int                            TeamIndex                      (Parm)
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AGameReplicationInfo::GetCurTeamMemberCount(int TeamIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetCurTeamMemberCount");

	AGameReplicationInfo_GetCurTeamMemberCount_Params params;
	params.TeamIndex = TeamIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.GetMaxRound
// (Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameReplicationInfo::GetMaxRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetMaxRound");

	AGameReplicationInfo_GetMaxRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.GetCurRound
// (Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameReplicationInfo::GetCurRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetCurRound");

	AGameReplicationInfo_GetCurRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.SetMaxLives
// (Defined, Simulated, Public)
// Parameters:
// int                            iMaxLives                      (Parm)

void AGameReplicationInfo::SetMaxLives(int iMaxLives)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.SetMaxLives");

	AGameReplicationInfo_SetMaxLives_Params params;
	params.iMaxLives = iMaxLives;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.GetMaxLives
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameReplicationInfo::GetMaxLives()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetMaxLives");

	AGameReplicationInfo_GetMaxLives_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsGhostChatting
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::IsGhostChatting(class AActor* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsGhostChatting");

	AGameReplicationInfo_IsGhostChatting_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.IsDefender
// (Simulated, Public)
// Parameters:
// unsigned char                  Team                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameReplicationInfo::IsDefender(unsigned char Team)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.IsDefender");

	AGameReplicationInfo_IsDefender_Params params;
	params.Team = Team;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.SyncRemainingTime
// (Defined, Public)

void AGameReplicationInfo::SyncRemainingTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.SyncRemainingTime");

	AGameReplicationInfo_SyncRemainingTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.GetDescriptionText
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameReplicationInfo::STATIC_GetDescriptionText(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetDescriptionText");

	AGameReplicationInfo_GetDescriptionText_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.FillPlayInfo
// (Defined, Static, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void AGameReplicationInfo::STATIC_FillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.FillPlayInfo");

	AGameReplicationInfo_FillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.GetPRIArray
// (Defined, Simulated, Public)
// Parameters:
// TArray<class APlayerReplicationInfo*> pris                           (Parm, OutParm, NeedCtorLink)

void AGameReplicationInfo::GetPRIArray(TArray<class APlayerReplicationInfo*>* pris)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetPRIArray");

	AGameReplicationInfo_GetPRIArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (pris != nullptr)
		*pris = params.pris;
}


// Function Engine.GameReplicationInfo.RemovePRI
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::RemovePRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.RemovePRI");

	AGameReplicationInfo_RemovePRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.AddPRI
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::AddPRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.AddPRI");

	AGameReplicationInfo_AddPRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ForcedRemovePRI
// (Defined, Event, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::ForcedRemovePRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ForcedRemovePRI");

	AGameReplicationInfo_ForcedRemovePRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.ForcedAddPRI
// (Defined, Event, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AGameReplicationInfo::ForcedAddPRI(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.ForcedAddPRI");

	AGameReplicationInfo_ForcedAddPRI_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.FindPlayerByID
// (Defined, Simulated, Public)
// Parameters:
// int                            PlayerID                       (Parm)
// class APlayerReplicationInfo*  ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerReplicationInfo* AGameReplicationInfo::FindPlayerByID(int PlayerID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.FindPlayerByID");

	AGameReplicationInfo_FindPlayerByID_Params params;
	params.PlayerID = PlayerID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.GetWinTeamIndex
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameReplicationInfo::GetWinTeamIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetWinTeamIndex");

	AGameReplicationInfo_GetWinTeamIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.GetTeamScores
// (Defined, Simulated, Public)
// Parameters:
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> AGameReplicationInfo::GetTeamScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetTeamScores");

	AGameReplicationInfo_GetTeamScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.GetRemainingTime
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameReplicationInfo::GetRemainingTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.GetRemainingTime");

	AGameReplicationInfo_GetRemainingTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameReplicationInfo.PlayTimerSound
// (Defined, Simulated, Public)

void AGameReplicationInfo::PlayTimerSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PlayTimerSound");

	AGameReplicationInfo_PlayTimerSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.Timer
// (Defined, Simulated, Public)

void AGameReplicationInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Timer");

	AGameReplicationInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.Reset
// (Defined, Public)

void AGameReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.Reset");

	AGameReplicationInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.PostBeginPlay
// (Defined, Simulated, Public)

void AGameReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PostBeginPlay");

	AGameReplicationInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.EventForceBegin
// (Defined, Event, Public)

void AGameReplicationInfo::EventForceBegin()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.EventForceBegin");

	AGameReplicationInfo_EventForceBegin_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.UpdatePrecacheMaterials
// (Defined, Simulated, Public)

void AGameReplicationInfo::UpdatePrecacheMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.UpdatePrecacheMaterials");

	AGameReplicationInfo_UpdatePrecacheMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.TeamSymbolNotify
// (Defined, Simulated, Public)

void AGameReplicationInfo::TeamSymbolNotify()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.TeamSymbolNotify");

	AGameReplicationInfo_TeamSymbolNotify_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameReplicationInfo.PostNetBeginPlay
// (Defined, Simulated, Public)

void AGameReplicationInfo::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameReplicationInfo.PostNetBeginPlay");

	AGameReplicationInfo_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InternetInfo.GetBeaconText
// (Public)
// Parameters:
// int                            i                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInternetInfo::GetBeaconText(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InternetInfo.GetBeaconText");

	AInternetInfo_GetBeaconText_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InternetInfo.GetBeaconAddress
// (Public)
// Parameters:
// int                            i                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AInternetInfo::GetBeaconAddress(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InternetInfo.GetBeaconAddress");

	AInternetInfo_GetBeaconAddress_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InternetInfo.GetBeaconCount
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AInternetInfo::GetBeaconCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InternetInfo.GetBeaconCount");

	AInternetInfo_GetBeaconCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetCheckFriendOrClanMember
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerReplicationInfo::GetCheckFriendOrClanMember()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetCheckFriendOrClanMember");

	APlayerReplicationInfo_GetCheckFriendOrClanMember_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetQuickSlotIdx
// (Defined, Public)
// Parameters:
// int                            nIdx                           (Parm)

void APlayerReplicationInfo::SetQuickSlotIdx(int nIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetQuickSlotIdx");

	APlayerReplicationInfo_SetQuickSlotIdx_Params params;
	params.nIdx = nIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.GetUID
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int APlayerReplicationInfo::GetUID()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetUID");

	APlayerReplicationInfo_GetUID_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetIsSendGameStartTime
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::GetIsSendGameStartTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetIsSendGameStartTime");

	APlayerReplicationInfo_GetIsSendGameStartTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetIsSendGameStartTime
// (Defined, Public)
// Parameters:
// bool                           bSend                          (Parm)

void APlayerReplicationInfo::SetIsSendGameStartTime(bool bSend)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetIsSendGameStartTime");

	APlayerReplicationInfo_SetIsSendGameStartTime_Params params;
	params.bSend = bSend;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.GetNameCallSign
// (Defined, Simulated, Event, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetNameCallSign()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetNameCallSign");

	APlayerReplicationInfo_GetNameCallSign_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetCallSign
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetCallSign()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetCallSign");

	APlayerReplicationInfo_GetCallSign_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.SetVoiceMemberMask
// (Defined, Public)
// Parameters:
// int                            NewMask                        (Parm)

void APlayerReplicationInfo::SetVoiceMemberMask(int NewMask)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetVoiceMemberMask");

	APlayerReplicationInfo_SetVoiceMemberMask_Params params;
	params.NewMask = NewMask;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetChatPassword
// (Defined, Public)
// Parameters:
// struct FString                 InPassword                     (Parm, NeedCtorLink)

void APlayerReplicationInfo::SetChatPassword(const struct FString& InPassword)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetChatPassword");

	APlayerReplicationInfo_SetChatPassword_Params params;
	params.InPassword = InPassword;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetWaitingPlayer
// (Defined, Public)
// Parameters:
// bool                           B                              (Parm)

void APlayerReplicationInfo::SetWaitingPlayer(bool B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetWaitingPlayer");

	APlayerReplicationInfo_SetWaitingPlayer_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetPlayerName
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerReplicationInfo::SetPlayerName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetPlayerName");

	APlayerReplicationInfo_SetPlayerName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Timer
// (Defined, Public)

void APlayerReplicationInfo::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Timer");

	APlayerReplicationInfo_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ClientNameChange
// (Defined, Event, Public)

void APlayerReplicationInfo::ClientNameChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ClientNameChange");

	APlayerReplicationInfo_ClientNameChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void APlayerReplicationInfo::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.DisplayDebug");

	APlayerReplicationInfo_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.PlayerReplicationInfo.UpdatePlayerLocation
// (Defined, Public)

void APlayerReplicationInfo::UpdatePlayerLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdatePlayerLocation");

	APlayerReplicationInfo_UpdatePlayerLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.UpdatePlayerState
// (Defined, Public)

void APlayerReplicationInfo::UpdatePlayerState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdatePlayerState");

	APlayerReplicationInfo_UpdatePlayerState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.UpdateCharacter
// (Event, Public)

void APlayerReplicationInfo::UpdateCharacter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.UpdateCharacter");

	APlayerReplicationInfo_UpdateCharacter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.GetPortrait
// (Simulated, Public)
// Parameters:
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* APlayerReplicationInfo::GetPortrait()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetPortrait");

	APlayerReplicationInfo_GetPortrait_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetLocationName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetLocationName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetLocationName");

	APlayerReplicationInfo_GetLocationName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.GetHumanReadableName
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString APlayerReplicationInfo::GetHumanReadableName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.GetHumanReadableName");

	APlayerReplicationInfo_GetHumanReadableName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.Reset
// (Defined, Public)

void APlayerReplicationInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Reset");

	APlayerReplicationInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetCharacterEquipItem
// (Defined, Simulated, Public)
// Parameters:
// int                            iBodyID_AF                     (Parm)
// int                            iBodyID_RSA                    (Parm)
// int                            iHeadID                        (Parm)
// int                            iHelmetID                      (Parm)
// int                            iAccessoryID                   (Parm)

void APlayerReplicationInfo::SetCharacterEquipItem(int iBodyID_AF, int iBodyID_RSA, int iHeadID, int iHelmetID, int iAccessoryID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetCharacterEquipItem");

	APlayerReplicationInfo_SetCharacterEquipItem_Params params;
	params.iBodyID_AF = iBodyID_AF;
	params.iBodyID_RSA = iBodyID_RSA;
	params.iHeadID = iHeadID;
	params.iHelmetID = iHelmetID;
	params.iAccessoryID = iAccessoryID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.NewSetCharacterEquipItem
// (Defined, Simulated, Public)
// Parameters:
// int                            iBodyID_AF                     (Parm)
// int                            iBodyID_RSA                    (Parm)
// int                            iHelmetID                      (Parm)
// int                            iAccessoryID                   (Parm)
// int                            iBackPackID                    (Parm)
// int                            iPouchID                       (Parm)
// int                            iCamouflageID                  (Parm)

void APlayerReplicationInfo::NewSetCharacterEquipItem(int iBodyID_AF, int iBodyID_RSA, int iHelmetID, int iAccessoryID, int iBackPackID, int iPouchID, int iCamouflageID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.NewSetCharacterEquipItem");

	APlayerReplicationInfo_NewSetCharacterEquipItem_Params params;
	params.iBodyID_AF = iBodyID_AF;
	params.iBodyID_RSA = iBodyID_RSA;
	params.iHelmetID = iHelmetID;
	params.iAccessoryID = iAccessoryID;
	params.iBackPackID = iBackPackID;
	params.iPouchID = iPouchID;
	params.iCamouflageID = iCamouflageID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetCharacterName
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerReplicationInfo::SetCharacterName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetCharacterName");

	APlayerReplicationInfo_SetCharacterName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.SetCharacterVoice
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void APlayerReplicationInfo::SetCharacterVoice(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.SetCharacterVoice");

	APlayerReplicationInfo_SetCharacterVoice_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.LoadLevelMark
// (Defined, Simulated, Event, Public)

void APlayerReplicationInfo::LoadLevelMark()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.LoadLevelMark");

	APlayerReplicationInfo_LoadLevelMark_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.ServerSetUAV
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// float                          Begin                          (Parm)
// float                          End                            (Parm)

void APlayerReplicationInfo::ServerSetUAV(float Begin, float End)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.ServerSetUAV");

	APlayerReplicationInfo_ServerSetUAV_Params params;
	params.Begin = Begin;
	params.End = End;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.Destroyed
// (Defined, Simulated, Public)

void APlayerReplicationInfo::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.Destroyed");

	APlayerReplicationInfo_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.PostNetReceive
// (Defined, Simulated, Event, Public)

void APlayerReplicationInfo::PostNetReceive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.PostNetReceive");

	APlayerReplicationInfo_PostNetReceive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.NeedNetNotify
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool APlayerReplicationInfo::NeedNetNotify()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.NeedNetNotify");

	APlayerReplicationInfo_NeedNetNotify_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlayerReplicationInfo.PostNetBeginPlay
// (Defined, Simulated, Event, Public)

void APlayerReplicationInfo::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.PostNetBeginPlay");

	APlayerReplicationInfo_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerReplicationInfo.PostBeginPlay
// (Defined, Event, Public)

void APlayerReplicationInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerReplicationInfo.PostBeginPlay");

	APlayerReplicationInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftExit.SuggestMovePreparation
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftExit::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.SuggestMovePreparation");

	ALiftExit_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftExit.CanBeReachedFromLiftBy
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftExit::CanBeReachedFromLiftBy(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.CanBeReachedFromLiftBy");

	ALiftExit_CanBeReachedFromLiftBy_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftExit.PostBeginPlay
// (Defined, Public)

void ALiftExit::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftExit.PostBeginPlay");

	ALiftExit_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LiftCenter.ProceedWithMove
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftCenter::ProceedWithMove(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.ProceedWithMove");

	ALiftCenter_ProceedWithMove_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SuggestMovePreparation
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALiftCenter::SuggestMovePreparation(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SuggestMovePreparation");

	ALiftCenter_SuggestMovePreparation_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.SpecialHandling
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ALiftCenter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.SpecialHandling");

	ALiftCenter_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LiftCenter.PostBeginPlay
// (Defined, Public)

void ALiftCenter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LiftCenter.PostBeginPlay");

	ALiftCenter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.SetMoveFor
// (Final, Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// float                          DeltaTime                      (Parm)
// struct FVector                 NewAccel                       (Parm)
// TEnumAsByte<EDoubleClickDir>   InDoubleClick                  (Parm)

void ASavedMove::SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& NewAccel, TEnumAsByte<EDoubleClickDir> InDoubleClick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetMoveFor");

	ASavedMove_SetMoveFor_Params params;
	params.P = P;
	params.DeltaTime = DeltaTime;
	params.NewAccel = NewAccel;
	params.InDoubleClick = InDoubleClick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.SetInitialPosition
// (Final, Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ASavedMove::SetInitialPosition(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.SetInitialPosition");

	ASavedMove_SetInitialPosition_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.GetStartLocation
// (Defined, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector ASavedMove::GetStartLocation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.GetStartLocation");

	ASavedMove_GetStartLocation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.IsJumpMove
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ASavedMove::IsJumpMove()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.IsJumpMove");

	ASavedMove_IsJumpMove_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SavedMove.PostUpdate
// (Final, Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void ASavedMove::PostUpdate(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.PostUpdate");

	ASavedMove_PostUpdate_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SavedMove.Clear
// (Final, Defined, Public)

void ASavedMove::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SavedMove.Clear");

	ASavedMove_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ChangeHudType
// (Public)
// Parameters:
// unsigned char                  Type                           (Parm)

void AHUD::ChangeHudType(unsigned char Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ChangeHudType");

	AHUD_ChangeHudType_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.InsertUsingSkillList
// (Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)
// int                            weaponID                       (Parm)
// int                            SubSkillID                     (OptionalParm, Parm)

void AHUD::InsertUsingSkillList(int SkillID, int weaponID, int SubSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.InsertUsingSkillList");

	AHUD_InsertUsingSkillList_Params params;
	params.SkillID = SkillID;
	params.weaponID = weaponID;
	params.SubSkillID = SubSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.GetCurGameTime
// (Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AHUD::GetCurGameTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetCurGameTime");

	AHUD_GetCurGameTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.CacheSpecialPositions
// (Simulated, Public)

void AHUD::CacheSpecialPositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CacheSpecialPositions");

	AHUD_CacheSpecialPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.GetUAVScanLineTexturePos
// (Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AHUD::GetUAVScanLineTexturePos()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetUAVScanLineTexturePos");

	AHUD_GetUAVScanLineTexturePos_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.UpdateUAV
// (Simulated, Public)

void AHUD::UpdateUAV()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.UpdateUAV");

	AHUD_UpdateUAV_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.IsUAVOn
// (Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::IsUAVOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.IsUAVOn");

	AHUD_IsUAVOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.IsUAVScanning
// (Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::IsUAVScanning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.IsUAVScanning");

	AHUD_IsUAVScanning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetUAVScanProgress
// (Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AHUD::GetUAVScanProgress()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetUAVScanProgress");

	AHUD_GetUAVScanProgress_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.OnClientReceiveDeathMessage
// (Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AHUD::OnClientReceiveDeathMessage(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnClientReceiveDeathMessage");

	AHUD_OnClientReceiveDeathMessage_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnClientReceiveFlyingDefenceBotDeathMessage
// (Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// class APlayerReplicationInfo*  attackerPRI                    (Parm)
// class APlayerReplicationInfo*  victimPRI                      (Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AHUD::OnClientReceiveFlyingDefenceBotDeathMessage(class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnClientReceiveFlyingDefenceBotDeathMessage");

	AHUD_OnClientReceiveFlyingDefenceBotDeathMessage_Params params;
	params.P = P;
	params.attackerPRI = attackerPRI;
	params.victimPRI = victimPRI;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnClientReceiveHeliDeathMessage
// (Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// class APlayerReplicationInfo*  attackerPRI                    (Parm)
// class APlayerReplicationInfo*  victimPRI                      (Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AHUD::OnClientReceiveHeliDeathMessage(class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnClientReceiveHeliDeathMessage");

	AHUD_OnClientReceiveHeliDeathMessage_Params params;
	params.P = P;
	params.attackerPRI = attackerPRI;
	params.victimPRI = victimPRI;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.NotifyTakeHit
// (Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 Momentum                       (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)

void AHUD::NotifyTakeHit(const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, int CollisionPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NotifyTakeHit");

	AHUD_NotifyTakeHit_Params params;
	params.HitLocation = HitLocation;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.CollisionPart = CollisionPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.NotifyDeath
// (Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AHUD::NotifyDeath(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NotifyDeath");

	AHUD_NotifyDeath_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnEndChangedHost
// (Public)

void AHUD::OnEndChangedHost()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnEndChangedHost");

	AHUD_OnEndChangedHost_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.RemoveHudOverlay
// (Defined, Simulated, Public)
// Parameters:
// class AHudOverlay*             Overlay                        (Parm)

void AHUD::RemoveHudOverlay(class AHudOverlay* Overlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.RemoveHudOverlay");

	AHUD_RemoveHudOverlay_Params params;
	params.Overlay = Overlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddHudOverlay
// (Defined, Simulated, Public)
// Parameters:
// class AHudOverlay*             Overlay                        (Parm)

void AHUD::AddHudOverlay(class AHudOverlay* Overlay)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddHudOverlay");

	AHUD_AddHudOverlay_Params params;
	params.Overlay = Overlay;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayHit
// (Defined, Public)
// Parameters:
// struct FVector                 HitDir                         (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)

void AHUD::DisplayHit(const struct FVector& HitDir, int Damage, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayHit");

	AHUD_DisplayHit_Params params;
	params.HitDir = HitDir;
	params.Damage = Damage;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawTargeting
// (Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawTargeting(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTargeting");

	AHUD_DrawTargeting_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AnnouncementPlayed
// (Event, Public)
// Parameters:
// struct FString                 AnnouncerSound                 (Parm, NeedCtorLink)
// unsigned char                  Switch                         (Parm)

void AHUD::AnnouncementPlayed(const struct FString& AnnouncerSound, unsigned char Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AnnouncementPlayed");

	AHUD_AnnouncementPlayed_Params params;
	params.AnnouncerSound = AnnouncerSound;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LoadProgressFont
// (Defined, Simulated, Public)
// Parameters:
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::LoadProgressFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LoadProgressFont");

	AHUD_LoadProgressFont_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.LargerFontThan
// (Defined, Static, Public)
// Parameters:
// class UFont*                   aFont                          (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::STATIC_LargerFontThan(class UFont* aFont)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LargerFontThan");

	AHUD_LargerFontThan_Params params;
	params.aFont = aFont;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetMediumFont
// (Defined, Public)
// Parameters:
// float                          Size                           (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::GetMediumFont(float Size)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetMediumFont");

	AHUD_GetMediumFont_Params params;
	params.Size = Size;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetMediumFontFor
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::STATIC_GetMediumFontFor(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetMediumFontFor");

	AHUD_GetMediumFontFor_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetFontSizeIndex
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            FontSize                       (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::GetFontSizeIndex(class UCanvas* C, int FontSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetFontSizeIndex");

	AHUD_GetFontSizeIndex_Params params;
	params.C = C;
	params.FontSize = FontSize;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.GetConsoleFont
// (Defined, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::STATIC_GetConsoleFont(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetConsoleFont");

	AHUD_GetConsoleFont_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.LoadFont
// (Defined, Simulated, Public)
// Parameters:
// int                            i                              (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::LoadFont(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LoadFont");

	AHUD_LoadFont_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.LoadFontStatic
// (Defined, Static, Public)
// Parameters:
// int                            i                              (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AHUD::STATIC_LoadFontStatic(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LoadFontStatic");

	AHUD_LoadFontStatic_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.SetCropping
// (Simulated, Public)
// Parameters:
// bool                           Active                         (Parm)

void AHUD::SetCropping(bool Active)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetCropping");

	AHUD_SetCropping_Params params;
	params.Active = Active;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawCrosshair
// (Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawCrosshair(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawCrosshair");

	AHUD_DrawCrosshair_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SetTargeting
// (Simulated, Public)
// Parameters:
// bool                           bShow                          (Parm)
// struct FVector                 TargetLocation                 (OptionalParm, Parm)
// float                          Size                           (OptionalParm, Parm)

void AHUD::SetTargeting(bool bShow, const struct FVector& TargetLocation, float Size)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetTargeting");

	AHUD_SetTargeting_Params params;
	params.bShow = bShow;
	params.TargetLocation = TargetLocation;
	params.Size = Size;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.FadeZoom
// (Public)

void AHUD::FadeZoom()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.FadeZoom");

	AHUD_FadeZoom_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShrinkHUD
// (Defined, Exec, Public)

void AHUD::ShrinkHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShrinkHUD");

	AHUD_ShrinkHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.GrowHUD
// (Defined, Exec, Public)

void AHUD::GrowHUD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GrowHUD");

	AHUD_GrowHUD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AddTextMessage
// (Defined, Public)
// Parameters:
// struct FString                 M                              (Parm, NeedCtorLink)
// class UClass*                  MessageClass                   (Parm)
// class APlayerReplicationInfo*  PRI                            (Parm)

void AHUD::AddTextMessage(const struct FString& M, class UClass* MessageClass, class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AddTextMessage");

	AHUD_AddTextMessage_Params params;
	params.M = M;
	params.MessageClass = MessageClass;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayMessages
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DisplayMessages(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayMessages");

	AHUD_DisplayMessages_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayPortrait
// (Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)

void AHUD::DisplayPortrait(class APlayerReplicationInfo* PRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayPortrait");

	AHUD_DisplayPortrait_Params params;
	params.PRI = PRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Message
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  PRI                            (Parm)
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   MsgType                        (Parm)

void AHUD::Message(class APlayerReplicationInfo* PRI, const struct FString& Msg, const struct FName& MsgType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Message");

	AHUD_Message_Params params;
	params.PRI = PRI;
	params.Msg = Msg;
	params.MsgType = MsgType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LinkActors
// (Defined, Simulated, Public)

void AHUD::LinkActors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LinkActors");

	AHUD_LinkActors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowFont
// (Defined, Exec, Public)

void AHUD::ShowFont()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowFont");

	AHUD_ShowFont_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowHud
// (Defined, Exec, Public)

void AHUD::ShowHud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowHud");

	AHUD_ShowHud_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SetScoreBoardClass
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  ScoreboardClass                (Parm)
// class UClass*                  ResultBoardClass               (Parm)
// class UClass*                  ResultBoardBootyClass          (Parm)

void AHUD::SetScoreBoardClass(class UClass* ScoreboardClass, class UClass* ResultBoardClass, class UClass* ResultBoardBootyClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetScoreBoardClass");

	AHUD_SetScoreBoardClass_Params params;
	params.ScoreboardClass = ScoreboardClass;
	params.ResultBoardClass = ResultBoardClass;
	params.ResultBoardBootyClass = ResultBoardBootyClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawTypingPrompt
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// struct FString                 Text                           (Parm, NeedCtorLink)
// int                            pos                            (OptionalParm, Parm)

void AHUD::DrawTypingPrompt(class UCanvas* C, const struct FString& Text, int pos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawTypingPrompt");

	AHUD_DrawTypingPrompt_Params params;
	params.C = C;
	params.Text = Text;
	params.pos = pos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LocalizedMessageOptional
// (Simulated, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iReserve1                      (OptionalParm, Parm)
// int                            iReserve2                      (OptionalParm, Parm)

void AHUD::LocalizedMessageOptional(class UClass* Message, int Switch, int iReserve1, int iReserve2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessageOptional");

	AHUD_LocalizedMessageOptional_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.iReserve1 = iReserve1;
	params.iReserve2 = iReserve2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LocalizedMessage2
// (Simulated, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// bool                           bOption_Push                   (OptionalParm, Parm)
// struct FString                 CriticalString                 (OptionalParm, Parm, NeedCtorLink)

void AHUD::LocalizedMessage2(class UClass* Message, int Switch, bool bOption_Push, const struct FString& CriticalString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessage2");

	AHUD_LocalizedMessage2_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.bOption_Push = bOption_Push;
	params.CriticalString = CriticalString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LocalizedMessageEx
// (Simulated, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 CriticalString                 (OptionalParm, Parm, NeedCtorLink)
// int                            iReserve                       (OptionalParm, Parm)

void AHUD::LocalizedMessageEx(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, const struct FString& CriticalString, int iReserve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessageEx");

	AHUD_LocalizedMessageEx_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;
	params.CriticalString = CriticalString;
	params.iReserve = iReserve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.LocalizedMessage
// (Simulated, Public)
// Parameters:
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 CriticalString                 (OptionalParm, Parm, NeedCtorLink)

void AHUD::LocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, const struct FString& CriticalString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.LocalizedMessage");

	AHUD_LocalizedMessage_Params params;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;
	params.CriticalString = CriticalString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.IsInCinematic
// (Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::IsInCinematic()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.IsInCinematic");

	AHUD_IsInCinematic_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.DisplayBadConnectionAlert
// (Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DisplayBadConnectionAlert(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayBadConnectionAlert");

	AHUD_DisplayBadConnectionAlert_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.IsEnableRepair
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::IsEnableRepair()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.IsEnableRepair");

	AHUD_IsEnableRepair_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.CallUsingItem
// (Public)
// Parameters:
// int                            ItemID                         (Parm)
// int                            iReservation1                  (OptionalParm, Parm)
// int                            iReservation2                  (OptionalParm, Parm)

void AHUD::CallUsingItem(int ItemID, int iReservation1, int iReservation2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CallUsingItem");

	AHUD_CallUsingItem_Params params;
	params.ItemID = ItemID;
	params.iReservation1 = iReservation1;
	params.iReservation2 = iReservation2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CallItemBuy
// (Public)
// Parameters:
// int                            iKey                           (OptionalParm, Parm)
// int                            iReservation1                  (OptionalParm, Parm)
// int                            iReservation2                  (OptionalParm, Parm)

void AHUD::CallItemBuy(int iKey, int iReservation1, int iReservation2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CallItemBuy");

	AHUD_CallItemBuy_Params params;
	params.iKey = iKey;
	params.iReservation1 = iReservation1;
	params.iReservation2 = iReservation2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.TutorialEvent
// (Public)
// Parameters:
// struct FString                 S                              (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)
// struct FName                   reserv                         (OptionalParm, Parm)

void AHUD::TutorialEvent(const struct FString& S, const struct FName& Type, const struct FName& reserv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.TutorialEvent");

	AHUD_TutorialEvent_Params params;
	params.S = S;
	params.Type = Type;
	params.reserv = reserv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CallRadioMessage
// (Public)
// Parameters:
// int                            iKey                           (OptionalParm, Parm)
// int                            iReservation1                  (OptionalParm, Parm)
// int                            iReservation2                  (OptionalParm, Parm)

void AHUD::CallRadioMessage(int iKey, int iReservation1, int iReservation2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CallRadioMessage");

	AHUD_CallRadioMessage_Params params;
	params.iKey = iKey;
	params.iReservation1 = iReservation1;
	params.iReservation2 = iReservation2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CallEvent
// (Public)
// Parameters:
// bool                           ItemCheck                      (OptionalParm, Parm)
// int                            iReservation1                  (OptionalParm, Parm)
// int                            iReservation2                  (OptionalParm, Parm)

void AHUD::CallEvent(bool ItemCheck, int iReservation1, int iReservation2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CallEvent");

	AHUD_CallEvent_Params params;
	params.ItemCheck = ItemCheck;
	params.iReservation1 = iReservation1;
	params.iReservation2 = iReservation2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CallSkill
// (Public)
// Parameters:
// int                            iKey                           (OptionalParm, Parm)
// bool                           bRequire                       (OptionalParm, Parm)
// bool                           iSucess                        (OptionalParm, Parm)

void AHUD::CallSkill(int iKey, bool bRequire, bool iSucess)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CallSkill");

	AHUD_CallSkill_Params params;
	params.iKey = iKey;
	params.bRequire = bRequire;
	params.iSucess = iSucess;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawLevelAction
// (Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::DrawLevelAction(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawLevelAction");

	AHUD_DrawLevelAction_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.DrawGMSpectatingHud
// (Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawGMSpectatingHud(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawGMSpectatingHud");

	AHUD_DrawGMSpectatingHud_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawSpectatingHud
// (Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawSpectatingHud(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawSpectatingHud");

	AHUD_DrawSpectatingHud_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawHUD
// (Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawHUD(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawHUD");

	AHUD_DrawHUD_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ResetHud
// (Public)

void AHUD::ResetHud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ResetHud");

	AHUD_ResetHud_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayProgressMessages
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DisplayProgressMessages(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayProgressMessages");

	AHUD_DisplayProgressMessages_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawRoute
// (Defined, Simulated, Public)

void AHUD::DrawRoute()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawRoute");

	AHUD_DrawRoute_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CanvasDrawActors
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// bool                           bClearedZBuffer                (Parm)

void AHUD::CanvasDrawActors(class UCanvas* C, bool bClearedZBuffer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CanvasDrawActors");

	AHUD_CanvasDrawActors_Params params;
	params.C = C;
	params.bClearedZBuffer = bClearedZBuffer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SetInstructionKeyText
// (Simulated, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void AHUD::SetInstructionKeyText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetInstructionKeyText");

	AHUD_SetInstructionKeyText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.SetInstructionText
// (Simulated, Public)
// Parameters:
// struct FString                 Text                           (Parm, NeedCtorLink)

void AHUD::SetInstructionText(const struct FString& Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.SetInstructionText");

	AHUD_SetInstructionText_Params params;
	params.Text = Text;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawInstructionGfx
// (Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawInstructionGfx(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawInstructionGfx");

	AHUD_DrawInstructionGfx_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawCinematicHUD
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawCinematicHUD(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawCinematicHUD");

	AHUD_DrawCinematicHUD_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawDebugStates
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawDebugStates(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebugStates");

	AHUD_DrawDebugStates_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawChangeHostGuest
// (Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHUD::DrawChangeHostGuest(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawChangeHostGuest");

	AHUD_DrawChangeHostGuest_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostRender
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AHUD::PostRender(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostRender");

	AHUD_PostRender_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DisplayDebug
// (Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AHUD::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DisplayDebug");

	AHUD_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.HUD.NeedToDrawSpectatingHud
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AHUD::NeedToDrawSpectatingHud()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NeedToDrawSpectatingHud");

	AHUD_NeedToDrawSpectatingHud_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.HUD.ResetKillMessageTexture
// (Defined, Simulated, Public)

void AHUD::ResetKillMessageTexture()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ResetKillMessageTexture");

	AHUD_ResetKillMessageTexture_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawDebug3
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug3(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug3");

	AHUD_DrawDebug3_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_HostPoint
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_HostPoint(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_HostPoint");

	AHUD_DrawDebug_HostPoint_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug2
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug2(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug2");

	AHUD_DrawDebug2_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_AllPlayerStates2
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_AllPlayerStates2(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_AllPlayerStates2");

	AHUD_DrawDebug_AllPlayerStates2_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug");

	AHUD_DrawDebug_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_AllPawnNetStates
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_AllPawnNetStates(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_AllPawnNetStates");

	AHUD_DrawDebug_AllPawnNetStates_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_AllPlayerStates
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_AllPlayerStates(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_AllPlayerStates");

	AHUD_DrawDebug_AllPlayerStates_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_Helicopter
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_Helicopter(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_Helicopter");

	AHUD_DrawDebug_Helicopter_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_Time
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_Time(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_Time");

	AHUD_DrawDebug_Time_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_Spectating
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_Spectating(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_Spectating");

	AHUD_DrawDebug_Spectating_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_SpectatingAllPlayers
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_SpectatingAllPlayers(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_SpectatingAllPlayers");

	AHUD_DrawDebug_SpectatingAllPlayers_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.DrawDebug_GSSS
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X                              (Parm)
// int                            Y                              (Parm, OutParm)
// int                            dy                             (Parm)

void AHUD::DrawDebug_GSSS(class UCanvas* C, int X, int dy, int* Y)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDebug_GSSS");

	AHUD_DrawDebug_GSSS_Params params;
	params.C = C;
	params.X = X;
	params.dy = dy;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Y != nullptr)
		*Y = params.Y;
}


// Function Engine.HUD.PostRenderActors
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AHUD::PostRenderActors(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostRenderActors");

	AHUD_PostRenderActors_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.GetLocalStatsScreen
// (Public)

void AHUD::GetLocalStatsScreen()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.GetLocalStatsScreen");

	AHUD_GetLocalStatsScreen_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ConnectFailure
// (Defined, Event, Public)
// Parameters:
// struct FString                 FailCode                       (Parm, NeedCtorLink)
// struct FString                 URL                            (Parm, NeedCtorLink)

void AHUD::ConnectFailure(const struct FString& FailCode, const struct FString& URL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ConnectFailure");

	AHUD_ConnectFailure_Params params;
	params.FailCode = FailCode;
	params.URL = URL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CheckCountdown
// (Public)
// Parameters:
// class AGameReplicationInfo*    GRI                            (Parm)

void AHUD::CheckCountdown(class AGameReplicationInfo* GRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CheckCountdown");

	AHUD_CheckCountdown_Params params;
	params.GRI = GRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.WorldSpaceOverlays
// (Defined, Simulated, Event, Public)

void AHUD::WorldSpaceOverlays()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.WorldSpaceOverlays");

	AHUD_WorldSpaceOverlays_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebug3
// (Defined, Exec, Public)

void AHUD::ShowDebug3()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug3");

	AHUD_ShowDebug3_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebug2
// (Defined, Exec, Public)

void AHUD::ShowDebug2()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug2");

	AHUD_ShowDebug2_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebug1
// (Defined, Exec, Public)

void AHUD::ShowDebug1()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug1");

	AHUD_ShowDebug1_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebugChan
// (Defined, Exec, Public)

void AHUD::ShowDebugChan()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebugChan");

	AHUD_ShowDebugChan_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowDebug
// (Defined, Exec, Public)

void AHUD::ShowDebug()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowDebug");

	AHUD_ShowDebug_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.NextStats
// (Defined, Exec, Public)

void AHUD::NextStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.NextStats");

	AHUD_NextStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowStats
// (Defined, Exec, Public)

void AHUD::ShowStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowStats");

	AHUD_ShowStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.HideMapInfo
// (Defined, Exec, Public)

void AHUD::HideMapInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.HideMapInfo");

	AHUD_HideMapInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowMapInfo
// (Defined, Exec, Public)

void AHUD::ShowMapInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowMapInfo");

	AHUD_ShowMapInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.HideScores
// (Defined, Exec, Public)

void AHUD::HideScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.HideScores");

	AHUD_HideScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ShowScores
// (Defined, Exec, Public)

void AHUD::ShowScores()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ShowScores");

	AHUD_ShowScores_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Destroyed
// (Defined, Simulated, Event, Public)

void AHUD::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Destroyed");

	AHUD_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CreateKeyMenus
// (Simulated, Public)

void AHUD::CreateKeyMenus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CreateKeyMenus");

	AHUD_CreateKeyMenus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Reset
// (Defined, Public)

void AHUD::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Reset");

	AHUD_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AHUD::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PostBeginPlay");

	AHUD_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.BuildMOTD
// (Defined, Simulated, Public)

void AHUD::BuildMOTD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.BuildMOTD");

	AHUD_BuildMOTD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawCustomBeacon
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// class APawn*                   P                              (Parm)
// float                          ScreenLocX                     (Parm)
// float                          ScreenLocY                     (Parm)

void AHUD::DrawCustomBeacon(class UCanvas* C, class APawn* P, float ScreenLocX, float ScreenLocY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawCustomBeacon");

	AHUD_DrawCustomBeacon_Params params;
	params.C = C;
	params.P = P;
	params.ScreenLocX = ScreenLocX;
	params.ScreenLocY = ScreenLocY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AllDeleteAASNotice
// (Defined, Simulated, Public)

void AHUD::AllDeleteAASNotice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AllDeleteAASNotice");

	AHUD_AllDeleteAASNotice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PushAASNotice
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 sNotice                        (Parm, NeedCtorLink)
// float                          beginTime                      (Parm)
// unsigned char                  byLevel                        (Parm)

void AHUD::PushAASNotice(const struct FString& sNotice, float beginTime, unsigned char byLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PushAASNotice");

	AHUD_PushAASNotice_Params params;
	params.sNotice = sNotice;
	params.beginTime = beginTime;
	params.byLevel = byLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AllDeleteGameNotice
// (Defined, Simulated, Public)

void AHUD::AllDeleteGameNotice()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AllDeleteGameNotice");

	AHUD_AllDeleteGameNotice_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.PushGameNotice
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 sGameNotice                    (Parm, NeedCtorLink)

void AHUD::PushGameNotice(const struct FString& sGameNotice)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.PushGameNotice");

	AHUD_PushGameNotice_Params params;
	params.sGameNotice = sGameNotice;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.AllDeleteSuppliesPositions
// (Defined, Simulated, Public)

void AHUD::AllDeleteSuppliesPositions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.AllDeleteSuppliesPositions");

	AHUD_AllDeleteSuppliesPositions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DeleteSuppliesPositions
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  act                            (Parm)

void AHUD::DeleteSuppliesPositions(class AActor* act)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DeleteSuppliesPositions");

	AHUD_DeleteSuppliesPositions_Params params;
	params.act = act;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CacheSuppliesPositions
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  act                            (Parm)

void AHUD::CacheSuppliesPositions(class AActor* act)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CacheSuppliesPositions");

	AHUD_CacheSuppliesPositions_Params params;
	params.act = act;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ChangeWeaponSlot5Hud
// (Defined, Public)
// Parameters:
// class AwWeapon*                newWeapon                      (Parm)
// bool                           bAddSkill                      (OptionalParm, Parm)

void AHUD::ChangeWeaponSlot5Hud(class AwWeapon* newWeapon, bool bAddSkill)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ChangeWeaponSlot5Hud");

	AHUD_ChangeWeaponSlot5Hud_Params params;
	params.newWeapon = newWeapon;
	params.bAddSkill = bAddSkill;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.ChangeWeaponSlot6Hud
// (Defined, Public)
// Parameters:
// class AwWeapon*                newWeapon                      (Parm)

void AHUD::ChangeWeaponSlot6Hud(class AwWeapon* newWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.ChangeWeaponSlot6Hud");

	AHUD_ChangeWeaponSlot6Hud_Params params;
	params.newWeapon = newWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnBuildMOTD
// (Public, Delegate)
// Parameters:
// class AHUD*                    Sender                         (Parm)

void AHUD::OnBuildMOTD(class AHUD* Sender)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnBuildMOTD");

	AHUD_OnBuildMOTD_Params params;
	params.Sender = Sender;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.OnPostRender
// (Public, Delegate)
// Parameters:
// class AHUD*                    Sender                         (Parm)
// class UCanvas*                 C                              (Parm)

void AHUD::OnPostRender(class AHUD* Sender, class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.OnPostRender");

	AHUD_OnPostRender_Params params;
	params.Sender = Sender;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.CalculateMinimapSize
// (Public)
// Parameters:
// float                          fWidth                         (Parm, OutParm)
// float                          fHeight                        (Parm, OutParm)

void AHUD::CalculateMinimapSize(float* fWidth, float* fHeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CalculateMinimapSize");

	AHUD_CalculateMinimapSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fWidth != nullptr)
		*fWidth = params.fWidth;
	if (fHeight != nullptr)
		*fHeight = params.fHeight;
}


// Function Engine.HUD.CalculateWorldPostionToMinimapPosition
// (Public)
// Parameters:
// struct FVector                 Location                       (Parm)
// float                          mx                             (Parm, OutParm)
// float                          my                             (Parm, OutParm)

void AHUD::CalculateWorldPostionToMinimapPosition(const struct FVector& Location, float* mx, float* my)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.CalculateWorldPostionToMinimapPosition");

	AHUD_CalculateWorldPostionToMinimapPosition_Params params;
	params.Location = Location;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (mx != nullptr)
		*mx = params.mx;
	if (my != nullptr)
		*my = params.my;
}


// Function Engine.HUD.StaticDrawCanvasLine
// (Final, Native, Static, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// struct FColor                  LineColor                      (Parm)

void AHUD::STATIC_StaticDrawCanvasLine(class UCanvas* C, float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.StaticDrawCanvasLine");

	AHUD_StaticDrawCanvasLine_Params params;
	params.C = C;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawCanvasLine
// (Final, Native, Public)
// Parameters:
// float                          X1                             (Parm)
// float                          Y1                             (Parm)
// float                          X2                             (Parm)
// float                          Y2                             (Parm)
// struct FColor                  LineColor                      (Parm)

void AHUD::DrawCanvasLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawCanvasLine");

	AHUD_DrawCanvasLine_Params params;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawDirectionalArrow
// (Final, Native, Public)
// Parameters:
// struct FVector                 InLocation                     (Parm)
// struct FRotator                InRotation                     (Parm)
// struct FColor                  InColor                        (Parm)
// float                          InDrawScale                    (Parm)

void AHUD::DrawDirectionalArrow(const struct FVector& InLocation, const struct FRotator& InRotation, const struct FColor& InColor, float InDrawScale)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawDirectionalArrow");

	AHUD_DrawDirectionalArrow_Params params;
	params.InLocation = InLocation;
	params.InRotation = InRotation;
	params.InColor = InColor;
	params.InDrawScale = InDrawScale;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawSphere
// (Final, Native, Public)
// Parameters:
// struct FVector                 Base                           (Parm)
// struct FColor                  Color                          (Parm)
// float                          Radius                         (Parm)
// int                            NumDivisions                   (Parm)

void AHUD::DrawSphere(const struct FVector& Base, const struct FColor& Color, float Radius, int NumDivisions)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawSphere");

	AHUD_DrawSphere_Params params;
	params.Base = Base;
	params.Color = Color;
	params.Radius = Radius;
	params.NumDivisions = NumDivisions;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawCircle
// (Final, Native, Public)
// Parameters:
// struct FVector                 Base                           (Parm)
// struct FVector                 X                              (Parm)
// struct FVector                 Y                              (Parm)
// struct FColor                  Color                          (Parm)
// float                          Radius                         (Parm)
// int                            NumSides                       (Parm)

void AHUD::DrawCircle(const struct FVector& Base, const struct FVector& X, const struct FVector& Y, const struct FColor& Color, float Radius, int NumSides)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawCircle");

	AHUD_DrawCircle_Params params;
	params.Base = Base;
	params.X = X;
	params.Y = Y;
	params.Color = Color;
	params.Radius = Radius;
	params.NumSides = NumSides;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.DrawBox
// (Final, Native, Public)
// Parameters:
// struct FVector                 Min                            (Parm)
// struct FVector                 Max                            (Parm)
// struct FColor                  Color                          (Parm)

void AHUD::DrawBox(const struct FVector& Min, const struct FVector& Max, const struct FColor& Color)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.DrawBox");

	AHUD_DrawBox_Params params;
	params.Min = Min;
	params.Max = Max;
	params.Color = Color;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HUD.Draw3DLine
// (Final, Native, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FVector                 End                            (Parm)
// struct FColor                  LineColor                      (Parm)

void AHUD::Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HUD.Draw3DLine");

	AHUD_Draw3DLine_Params params;
	params.Start = Start;
	params.End = End;
	params.LineColor = LineColor;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneMarker.SpecialHandling
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AWarpZoneMarker::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneMarker.SpecialHandling");

	AWarpZoneMarker_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WarpZoneMarker.FindTriggerActor
// (Defined, Public)

void AWarpZoneMarker::FindTriggerActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneMarker.FindTriggerActor");

	AWarpZoneMarker_FindTriggerActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneMarker.PostBeginPlay
// (Defined, Public)

void AWarpZoneMarker::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneMarker.PostBeginPlay");

	AWarpZoneMarker_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.UnTouch
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ATrigger::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.UnTouch");

	ATrigger_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.TakeDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void ATrigger::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.TakeDamage");

	ATrigger_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.Timer
// (Defined, Public)

void ATrigger::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.Timer");

	ATrigger_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.Touch
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ATrigger::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.Touch");

	ATrigger_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.FindInstigator
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ATrigger::FindInstigator(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.FindInstigator");

	ATrigger_FindInstigator_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.IsRelevant
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATrigger::IsRelevant(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.IsRelevant");

	ATrigger_IsRelevant_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.CheckTouchList
// (Defined, Public)

void ATrigger::CheckTouchList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.CheckTouchList");

	ATrigger_CheckTouchList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.SpecialHandling
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ATrigger::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.SpecialHandling");

	ATrigger_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.FindTriggerActor
// (Defined, Public)

void ATrigger::FindTriggerActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.FindTriggerActor");

	ATrigger_FindTriggerActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.Reset
// (Defined, Public)

void ATrigger::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.Reset");

	ATrigger_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.PostBeginPlay
// (Defined, Public)

void ATrigger::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.PostBeginPlay");

	ATrigger_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.PreBeginPlay
// (Defined, Public)

void ATrigger::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.PreBeginPlay");

	ATrigger_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Trigger.SelfTriggered
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATrigger::SelfTriggered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.SelfTriggered");

	ATrigger_SelfTriggered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Trigger.PlayerToucherDied
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ATrigger::PlayerToucherDied(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Trigger.PlayerToucherDied");

	ATrigger_PlayerToucherDied_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.InventorySpot.DetourWeight
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AInventorySpot::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventorySpot.DetourWeight");

	AInventorySpot_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.InventorySpot.GetMoveTargetFor
// (Defined, Public)
// Parameters:
// class AAIController*           B                              (Parm)
// float                          MaxWait                        (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AInventorySpot::GetMoveTargetFor(class AAIController* B, float MaxWait)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.InventorySpot.GetMoveTargetFor");

	AInventorySpot_GetMoveTargetFor_Params params;
	params.B = B;
	params.MaxWait = MaxWait;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.SpecialCost
// (Defined, Event, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class UReachSpec*              Path                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ATeleporter::SpecialCost(class APawn* Other, class UReachSpec* Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.SpecialCost");

	ATeleporter_SpecialCost_Params params;
	params.Other = Other;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.SpecialHandling
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* ATeleporter::SpecialHandling(class APawn* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.SpecialHandling");

	ATeleporter_SpecialHandling_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.PostTouch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ATeleporter::PostTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostTouch");

	ATeleporter_PostTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Touch
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ATeleporter::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Touch");

	ATeleporter_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void ATeleporter::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Trigger");

	ATeleporter_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.Accept
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Incoming                       (Parm)
// class AActor*                  Source                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ATeleporter::Accept(class AActor* Incoming, class AActor* Source)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.Accept");

	ATeleporter_Accept_Params params;
	params.Incoming = Incoming;
	params.Source = Source;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Teleporter.FindTriggerActor
// (Defined, Public)

void ATeleporter::FindTriggerActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.FindTriggerActor");

	ATeleporter_FindTriggerActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Teleporter.PostBeginPlay
// (Defined, Public)

void ATeleporter::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Teleporter.PostBeginPlay");

	ATeleporter_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ZoneInfo.ActorLeaving
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AZoneInfo::ActorLeaving(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ZoneInfo.ActorLeaving");

	AZoneInfo_ActorLeaving_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ZoneInfo.ActorEntered
// (Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AZoneInfo::ActorEntered(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ZoneInfo.ActorEntered");

	AZoneInfo_ActorEntered_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ZoneInfo.PreBeginPlay
// (Defined, Simulated, Public)

void AZoneInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ZoneInfo.PreBeginPlay");

	AZoneInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ZoneInfo.LinkToSkybox
// (Defined, Simulated, Public)

void AZoneInfo::LinkToSkybox()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ZoneInfo.LinkToSkybox");

	AZoneInfo_LinkToSkybox_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ZoneInfo.ZoneActors
// (Final, Iterator, Native, Public)
// Parameters:
// class UClass*                  baseClass                      (Parm)
// class AActor*                  Actor                          (Parm, OutParm)

void AZoneInfo::ZoneActors(class UClass* baseClass, class AActor** Actor)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ZoneInfo.ZoneActors");

	AZoneInfo_ZoneActors_Params params;
	params.baseClass = baseClass;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Actor != nullptr)
		*Actor = params.Actor;
}


// Function Engine.WarpZoneInfo.ActorLeaving
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AWarpZoneInfo::ActorLeaving(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.ActorLeaving");

	AWarpZoneInfo_ActorLeaving_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneInfo.ActorEntered
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AWarpZoneInfo::ActorEntered(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.ActorEntered");

	AWarpZoneInfo_ActorEntered_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneInfo.ForceGenerate
// (Defined, Simulated, Event, Public)

void AWarpZoneInfo::ForceGenerate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.ForceGenerate");

	AWarpZoneInfo_ForceGenerate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneInfo.Generate
// (Defined, Simulated, Event, Public)

void AWarpZoneInfo::Generate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.Generate");

	AWarpZoneInfo_Generate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneInfo.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AWarpZoneInfo::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.Trigger");

	AWarpZoneInfo_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneInfo.PreBeginPlay
// (Defined, Public)

void AWarpZoneInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.PreBeginPlay");

	AWarpZoneInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WarpZoneInfo.UnWarp
// (Final, Native, Public)
// Parameters:
// struct FVector                 loc                            (Parm, OutParm)
// struct FVector                 Vel                            (Parm, OutParm)
// struct FRotator                R                              (Parm, OutParm)

void AWarpZoneInfo::UnWarp(struct FVector* loc, struct FVector* Vel, struct FRotator* R)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.UnWarp");

	AWarpZoneInfo_UnWarp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (loc != nullptr)
		*loc = params.loc;
	if (Vel != nullptr)
		*Vel = params.Vel;
	if (R != nullptr)
		*R = params.R;
}


// Function Engine.WarpZoneInfo.Warp
// (Final, Native, Public)
// Parameters:
// struct FVector                 loc                            (Parm, OutParm)
// struct FVector                 Vel                            (Parm, OutParm)
// struct FRotator                R                              (Parm, OutParm)

void AWarpZoneInfo::Warp(struct FVector* loc, struct FVector* Vel, struct FRotator* R)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WarpZoneInfo.Warp");

	AWarpZoneInfo_Warp_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (loc != nullptr)
		*loc = params.loc;
	if (Vel != nullptr)
		*Vel = params.Vel;
	if (R != nullptr)
		*R = params.R;
}


// Function Engine.Projectile.SufferEffect
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   Victim                         (Parm)
// float                          fDist                          (Parm)
// float                          fReduceRate                    (Parm)

void AProjectile::SufferEffect(class APawn* Victim, float fDist, float fReduceRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.SufferEffect");

	AProjectile_SufferEffect_Params params;
	params.Victim = Victim;
	params.fDist = fDist;
	params.fReduceRate = fReduceRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.PostRender2D
// (Simulated, Event, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// float                          ScreenLocX                     (Parm)
// float                          ScreenLocY                     (Parm)

void AProjectile::PostRender2D(class UCanvas* C, float ScreenLocX, float ScreenLocY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PostRender2D");

	AProjectile_PostRender2D_Params params;
	params.C = C;
	params.ScreenLocX = ScreenLocX;
	params.ScreenLocY = ScreenLocY;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.IsStationary
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::IsStationary()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.IsStationary");

	AProjectile_IsStationary_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.GetRange
// (Defined, Simulated, Static, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::STATIC_GetRange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetRange");

	AProjectile_GetRange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.RandSpin
// (Final, Defined, Simulated, Public)
// Parameters:
// float                          spinRate                       (Parm)

void AProjectile::RandSpin(float spinRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.RandSpin");

	AProjectile_RandSpin_Params params;
	params.spinRate = spinRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Explode
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Explode");

	AProjectile_Explode_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.BlowUp
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)

void AProjectile::BlowUp(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.BlowUp");

	AProjectile_BlowUp_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.SpawnExplosionDecal
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FVector                 HitNormal                      (Parm)

void AProjectile::SpawnExplosionDecal(class APlayerController* PC, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.SpawnExplosionDecal");

	AProjectile_SpawnExplosionDecal_Params params;
	params.PC = PC;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.HitWall
// (Defined, Singular, Simulated, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void AProjectile::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HitWall");

	AProjectile_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.ProcessTouch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitLocation                    (Parm)

void AProjectile::ProcessTouch(class AActor* Other, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ProcessTouch");

	AProjectile_ProcessTouch_Params params;
	params.Other = Other;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.ClientSideTouch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitLocation                    (Parm)

void AProjectile::ClientSideTouch(class AActor* Other, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.ClientSideTouch");

	AProjectile_ClientSideTouch_Params params;
	params.Other = Other;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.Touch
// (Defined, Singular, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AProjectile::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Touch");

	AProjectile_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.EncroachingOn
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::EncroachingOn(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.EncroachingOn");

	AProjectile_EncroachingOn_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.HurtRadius
// (Defined, Simulated, Public)
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)

void AProjectile::HurtRadius(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.HurtRadius");

	AProjectile_HurtRadius_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.CheckMaxEffectDistance
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FVector                 SpawnLocation                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::CheckMaxEffectDistance(class APlayerController* P, const struct FVector& SpawnLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.CheckMaxEffectDistance");

	AProjectile_CheckMaxEffectDistance_Params params;
	params.P = P;
	params.SpawnLocation = SpawnLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.Reset
// (Defined, Public)

void AProjectile::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.Reset");

	AProjectile_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.OnEndRound
// (Defined, Public)

void AProjectile::OnEndRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.OnEndRound");

	AProjectile_OnEndRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.CanSplash
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.CanSplash");

	AProjectile_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Projectile.SpecialCalcView
// (Public)
// Parameters:
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)
// bool                           bBehindView                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AProjectile::SpecialCalcView(bool bBehindView, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.SpecialCalcView");

	AProjectile_SpecialCalcView_Params params;
	params.bBehindView = bBehindView;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;

	return params.ReturnValue;
}


// Function Engine.Projectile.PostBeginPlay
// (Defined, Simulated, Public)

void AProjectile::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.PostBeginPlay");

	AProjectile_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Projectile.GetInstigatorsDirectionbyDot
// (Native, Public)
// Parameters:
// struct FRotator                pawnRotation                   (Parm)
// struct FVector                 pawnVelocity                   (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AProjectile::GetInstigatorsDirectionbyDot(const struct FRotator& pawnRotation, const struct FVector& pawnVelocity)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Projectile.GetInstigatorsDirectionbyDot");

	AProjectile_GetInstigatorsDirectionbyDot_Params params;
	params.pawnRotation = pawnRotation;
	params.pawnVelocity = pawnVelocity;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Decoration.Bump
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void ADecoration::Bump(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.Bump");

	ADecoration_Bump_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.Timer
// (Defined, Public)

void ADecoration::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.Timer");

	ADecoration_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.Destroyed
// (Defined, Simulated, Public)

void ADecoration::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.Destroyed");

	ADecoration_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.BaseChange
// (Defined, Singular, Public)

void ADecoration::BaseChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.BaseChange");

	ADecoration_BaseChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void ADecoration::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.Trigger");

	ADecoration_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.PhysicsVolumeChange
// (Defined, Singular, Public)
// Parameters:
// class APhysicsVolume*          NewVolume                      (Parm)

void ADecoration::PhysicsVolumeChange(class APhysicsVolume* NewVolume)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.PhysicsVolumeChange");

	ADecoration_PhysicsVolumeChange_Params params;
	params.NewVolume = NewVolume;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.TakeDamage
// (Defined, Public)
// Parameters:
// int                            NDamage                        (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void ADecoration::TakeDamage(int NDamage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.TakeDamage");

	ADecoration_TakeDamage_Params params;
	params.NDamage = NDamage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.HitWall
// (Defined, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void ADecoration::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.HitWall");

	ADecoration_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.Landed
// (Defined, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)

void ADecoration::Landed(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.Landed");

	ADecoration_Landed_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.Drop
// (Public)
// Parameters:
// struct FVector                 NewVel                         (Parm)
// struct FString                 sReason                        (OptionalParm, Parm, NeedCtorLink)

void ADecoration::Drop(const struct FVector& NewVel, const struct FString& sReason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.Drop");

	ADecoration_Drop_Params params;
	params.NewVel = NewVel;
	params.sReason = sReason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.CanSplash
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ADecoration::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.CanSplash");

	ADecoration_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Decoration.DecoRefreshCollisionHash
// (Native, Public)

void ADecoration::DecoRefreshCollisionHash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.DecoRefreshCollisionHash");

	ADecoration_DecoRefreshCollisionHash_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Decoration.NotReachableBy
// (Event, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void ADecoration::NotReachableBy(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Decoration.NotReachableBy");

	ADecoration_NotReachableBy_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Scout.PreBeginPlay
// (Defined, Simulated, Public)

void AScout::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Scout.PreBeginPlay");

	AScout_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.OnDisconnect
// (Defined, Event, Public)

void ALevelInfo::OnDisconnect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.OnDisconnect");

	ALevelInfo_OnDisconnect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.GetIsConnectDMZ
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsConnectDMZ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsConnectDMZ");

	ALevelInfo_GetIsConnectDMZ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsForceServiceBuild
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsForceServiceBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsForceServiceBuild");

	ALevelInfo_GetIsForceServiceBuild_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsServiceBuild
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsServiceBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsServiceBuild");

	ALevelInfo_GetIsServiceBuild_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsUseAdvCamShake
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsUseAdvCamShake()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsUseAdvCamShake");

	ALevelInfo_GetIsUseAdvCamShake_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsUseStanceToggle
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsUseStanceToggle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsUseStanceToggle");

	ALevelInfo_GetIsUseStanceToggle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsUseMouseRevision
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsUseMouseRevision()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsUseMouseRevision");

	ALevelInfo_GetIsUseMouseRevision_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsUseRagdoll
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsUseRagdoll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsUseRagdoll");

	ALevelInfo_GetIsUseRagdoll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsNoGore
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsNoGore()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsNoGore");

	ALevelInfo_GetIsNoGore_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetIsTeenVersion
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::GetIsTeenVersion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetIsTeenVersion");

	ALevelInfo_GetIsTeenVersion_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.ClearInvalidCache
// (Defined, Simulated, Public)

void ALevelInfo::ClearInvalidCache()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ClearInvalidCache");

	ALevelInfo_ClearInvalidCache_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.SetNoUpdateAllGSSS
// (Defined, Event, Public)

void ALevelInfo::SetNoUpdateAllGSSS()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.SetNoUpdateAllGSSS");

	ALevelInfo_SetNoUpdateAllGSSS_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.GetLocalPlayerController
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* ALevelInfo::GetLocalPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetLocalPlayerController");

	ALevelInfo_GetLocalPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.PreBeginPlay
// (Defined, Simulated, Event, Public)

void ALevelInfo::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.PreBeginPlay");

	ALevelInfo_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.Reset
// (Defined, Public)

void ALevelInfo::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.Reset");

	ALevelInfo_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.ThisIsNeverExecuted
// (Defined, Public)

void ALevelInfo::ThisIsNeverExecuted()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ThisIsNeverExecuted");

	ALevelInfo_ThisIsNeverExecuted_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.ServerTravel
// (Defined, Event, Public)
// Parameters:
// struct FString                 URL                            (Parm, NeedCtorLink)
// bool                           bItems                         (Parm)

void ALevelInfo::ServerTravel(const struct FString& URL, bool bItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ServerTravel");

	ALevelInfo_ServerTravel_Params params;
	params.URL = URL;
	params.bItems = bItems;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.IsPendingConnection
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::IsPendingConnection()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsPendingConnection");

	ALevelInfo_IsPendingConnection_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetAddressURL
// (Simulated, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ALevelInfo::GetAddressURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetAddressURL");

	ALevelInfo_GetAddressURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.IsSoftwareRendering
// (Final, Simulated, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::STATIC_IsSoftwareRendering()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsSoftwareRendering");

	ALevelInfo_IsSoftwareRendering_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.IsDemoBuild
// (Final, Simulated, Native, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::STATIC_IsDemoBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsDemoBuild");

	ALevelInfo_IsDemoBuild_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetLocalURL
// (Simulated, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ALevelInfo::GetLocalURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetLocalURL");

	ALevelInfo_GetLocalURL_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.ResetPrecacheSkeletalMeshes
// (Defined, Simulated, Public)

void ALevelInfo::ResetPrecacheSkeletalMeshes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ResetPrecacheSkeletalMeshes");

	ALevelInfo_ResetPrecacheSkeletalMeshes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.AddPrecacheSkeletalMesh
// (Defined, Simulated, Public)
// Parameters:
// class UMesh*                   mes                            (Parm)

void ALevelInfo::AddPrecacheSkeletalMesh(class UMesh* mes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.AddPrecacheSkeletalMesh");

	ALevelInfo_AddPrecacheSkeletalMesh_Params params;
	params.mes = mes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.ResetPrecacheStaticMesh
// (Defined, Simulated, Public)

void ALevelInfo::ResetPrecacheStaticMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ResetPrecacheStaticMesh");

	ALevelInfo_ResetPrecacheStaticMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.AddPrecacheStaticMesh
// (Defined, Simulated, Public)
// Parameters:
// class UStaticMesh*             stat                           (Parm)

void ALevelInfo::AddPrecacheStaticMesh(class UStaticMesh* stat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.AddPrecacheStaticMesh");

	ALevelInfo_AddPrecacheStaticMesh_Params params;
	params.stat = stat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.ResetPrecacheMaterials
// (Defined, Simulated, Public)

void ALevelInfo::ResetPrecacheMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ResetPrecacheMaterials");

	ALevelInfo_ResetPrecacheMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.AddPrecacheMaterial
// (Defined, Simulated, Public)
// Parameters:
// class UMaterial*               mat                            (Parm)

void ALevelInfo::AddPrecacheMaterial(class UMaterial* mat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.AddPrecacheMaterial");

	ALevelInfo_AddPrecacheMaterial_Params params;
	params.mat = mat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.FillPrecacheSkeletalMeshesArray
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           FullPrecache                   (Parm)

void ALevelInfo::FillPrecacheSkeletalMeshesArray(bool FullPrecache)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.FillPrecacheSkeletalMeshesArray");

	ALevelInfo_FillPrecacheSkeletalMeshesArray_Params params;
	params.FullPrecache = FullPrecache;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.FillPrecacheStaticMeshesArray
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           FullPrecache                   (Parm)

void ALevelInfo::FillPrecacheStaticMeshesArray(bool FullPrecache)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.FillPrecacheStaticMeshesArray");

	ALevelInfo_FillPrecacheStaticMeshesArray_Params params;
	params.FullPrecache = FullPrecache;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.PrecacheAnnouncements
// (Simulated, Public)

void ALevelInfo::PrecacheAnnouncements()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.PrecacheAnnouncements");

	ALevelInfo_PrecacheAnnouncements_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.FillPrecacheMaterialsArray
// (Defined, Simulated, Event, Public)
// Parameters:
// bool                           FullPrecache                   (Parm)

void ALevelInfo::FillPrecacheMaterialsArray(bool FullPrecache)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.FillPrecacheMaterialsArray");

	ALevelInfo_FillPrecacheMaterialsArray_Params params;
	params.FullPrecache = FullPrecache;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.PrecacheInit
// (Defined, Simulated, Event, Public)

void ALevelInfo::PrecacheInit()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.PrecacheInit");

	ALevelInfo_PrecacheInit_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.GetGameClass
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* ALevelInfo::GetGameClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetGameClass");

	ALevelInfo_GetGameClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.PostBeginPlay
// (Defined, Simulated, Public)

void ALevelInfo::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.PostBeginPlay");

	ALevelInfo_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.Tick
// (Defined, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void ALevelInfo::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.Tick");

	ALevelInfo_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.GetRandomNavigationPointAround
// (Defined, Public)
// Parameters:
// struct FVector                 V                              (Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ALevelInfo::GetRandomNavigationPointAround(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetRandomNavigationPointAround");

	ALevelInfo_GetRandomNavigationPointAround_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetClosestNavigationPoint
// (Native, Public)
// Parameters:
// struct FVector                 V                              (Parm)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* ALevelInfo::GetClosestNavigationPoint(const struct FVector& V)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetClosestNavigationPoint");

	ALevelInfo_GetClosestNavigationPoint_Params params;
	params.V = V;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.IsVisibleByVisID
// (Defined, Public)
// Parameters:
// int                            sVisID                         (Parm)
// int                            eVisID                         (Parm)
// int                            sStance                        (OptionalParm, Parm)
// int                            eStance                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::IsVisibleByVisID(int sVisID, int eVisID, int sStance, int eStance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsVisibleByVisID");

	ALevelInfo_IsVisibleByVisID_Params params;
	params.sVisID = sVisID;
	params.eVisID = eVisID;
	params.sStance = sStance;
	params.eStance = eStance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.IsVisible
// (Defined, Public)
// Parameters:
// class ANavigationPoint*        S                              (Parm)
// class ANavigationPoint*        E                              (Parm)
// int                            sStance                        (OptionalParm, Parm)
// int                            eStance                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::IsVisible(class ANavigationPoint* S, class ANavigationPoint* E, int sStance, int eStance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsVisible");

	ALevelInfo_IsVisible_Params params;
	params.S = S;
	params.E = E;
	params.sStance = sStance;
	params.eStance = eStance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.UpdateInfluence
// (Native, Public)

void ALevelInfo::UpdateInfluence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.UpdateInfluence");

	ALevelInfo_UpdateInfluence_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.GetAILevel
// (Defined, Public)
// Parameters:
// class AwAILevelBase*           ReturnValue                    (Parm, OutParm, ReturnParm)

class AwAILevelBase* ALevelInfo::GetAILevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetAILevel");

	ALevelInfo_GetAILevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetPhysicsVolume
// (Simulated, Native, Public)
// Parameters:
// struct FVector                 loc                            (Parm)
// class APhysicsVolume*          ReturnValue                    (Parm, OutParm, ReturnParm)

class APhysicsVolume* ALevelInfo::GetPhysicsVolume(const struct FVector& loc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetPhysicsVolume");

	ALevelInfo_GetPhysicsVolume_Params params;
	params.loc = loc;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.ForceLoadTexture
// (Simulated, Native, Public)
// Parameters:
// class UTexture*                Texture                        (Parm)

void ALevelInfo::ForceLoadTexture(class UTexture* Texture)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ForceLoadTexture");

	ALevelInfo_ForceLoadTexture_Params params;
	params.Texture = Texture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.UpdateDistanceFogLOD
// (Simulated, Native, Public)
// Parameters:
// float                          LOD                            (Parm)

void ALevelInfo::UpdateDistanceFogLOD(float LOD)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.UpdateDistanceFogLOD");

	ALevelInfo_UpdateDistanceFogLOD_Params params;
	params.LOD = LOD;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.IsEntry
// (Simulated, Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::IsEntry()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsEntry");

	ALevelInfo_IsEntry_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.DetailChange
// (Simulated, Native, Public)
// Parameters:
// TEnumAsByte<EDetailMode>       NewDetailMode                  (Parm)

void ALevelInfo::DetailChange(TEnumAsByte<EDetailMode> NewDetailMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.DetailChange");

	ALevelInfo_DetailChange_Params params;
	params.NewDetailMode = NewDetailMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.IsUseGraphicOption
// (Native, Public)
// Parameters:
// struct FString                 OptionName                     (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::IsUseGraphicOption(const struct FString& OptionName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsUseGraphicOption");

	ALevelInfo_IsUseGraphicOption_Params params;
	params.OptionName = OptionName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.GetMatchMaker
// (Native, Public)
// Parameters:
// class UwMatchMaker*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwMatchMaker* ALevelInfo::GetMatchMaker()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.GetMatchMaker");

	ALevelInfo_GetMatchMaker_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.SetCaptureQuality
// (Native, Public)
// Parameters:
// int                            iValue                         (Parm)

void ALevelInfo::SetCaptureQuality(int iValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.SetCaptureQuality");

	ALevelInfo_SetCaptureQuality_Params params;
	params.iValue = iValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.SetCaptureResoultion
// (Native, Public)
// Parameters:
// int                            iValue                         (Parm)

void ALevelInfo::SetCaptureResoultion(int iValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.SetCaptureResoultion");

	ALevelInfo_SetCaptureResoultion_Params params;
	params.iValue = iValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.IsCapturing
// (Native, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::IsCapturing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.IsCapturing");

	ALevelInfo_IsCapturing_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.SetCapture
// (Native, Public)
// Parameters:
// bool                           bCapture                       (Parm)

void ALevelInfo::SetCapture(bool bCapture)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.SetCapture");

	ALevelInfo_SetCapture_Params params;
	params.bCapture = bCapture;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.ResetCombationSituationReview
// (Native, Public)

void ALevelInfo::ResetCombationSituationReview()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.ResetCombationSituationReview");

	ALevelInfo_ResetCombationSituationReview_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LevelInfo.LoadUsermove
// (Native, Public)
// Parameters:
// struct FString                 szPath                         (Parm, NeedCtorLink)
// int                            nCommand                       (Parm)
// int                            nCombatNum                     (OptionalParm, Parm)
// struct FString                 szUserName                     (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::LoadUsermove(const struct FString& szPath, int nCommand, int nCombatNum, const struct FString& szUserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.LoadUsermove");

	ALevelInfo_LoadUsermove_Params params;
	params.szPath = szPath;
	params.nCommand = nCommand;
	params.nCombatNum = nCombatNum;
	params.szUserName = szUserName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.LoadUserzone
// (Native, Public)
// Parameters:
// struct FString                 szPath                         (Parm, NeedCtorLink)
// int                            nCommand                       (Parm)
// struct FString                 szUserName                     (OptionalParm, Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::LoadUserzone(const struct FString& szPath, int nCommand, const struct FString& szUserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.LoadUserzone");

	ALevelInfo_LoadUserzone_Params params;
	params.szPath = szPath;
	params.nCommand = nCommand;
	params.szUserName = szUserName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LevelInfo.LoadKilllog
// (Native, Public)
// Parameters:
// struct FString                 szPath                         (Parm, NeedCtorLink)
// int                            nCommand                       (Parm)
// int                            nOption                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALevelInfo::LoadKilllog(const struct FString& szPath, int nCommand, int nOption)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LevelInfo.LoadKilllog");

	ALevelInfo_LoadKilllog_Params params;
	params.szPath = szPath;
	params.nCommand = nCommand;
	params.nOption = nOption;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Vignette.DrawVignette
// (Simulated, Event, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// float                          Progress                       (Parm)

void AVignette::DrawVignette(class UCanvas* C, float Progress)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vignette.DrawVignette");

	AVignette_DrawVignette_Params params;
	params.C = C;
	params.Progress = Progress;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Vignette.Init
// (Simulated, Event, Public)

void AVignette::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Vignette.Init");

	AVignette_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SkillUseByWeapon
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::SkillUseByWeapon(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SkillUseByWeapon");

	AwWeapon_SkillUseByWeapon_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerMeleeFire
// (Defined, Net, NetReliable, Public)

void AwWeapon::ServerMeleeFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerMeleeFire");

	AwWeapon_ServerMeleeFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientMeleeFire
// (Defined, Simulated, Public)

void AwWeapon::ClientMeleeFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientMeleeFire");

	AwWeapon_ClientMeleeFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerThrowingWeapon
// (Defined, Net, NetReliable, Public)

void AwWeapon::ServerThrowingWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerThrowingWeapon");

	AwWeapon_ServerThrowingWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientThrowingWeapon
// (Defined, Simulated, Public)

void AwWeapon::ClientThrowingWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientThrowingWeapon");

	AwWeapon_ClientThrowingWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ActiveMeleeDelay
// (Defined, Simulated, Public)

void AwWeapon::ActiveMeleeDelay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ActiveMeleeDelay");

	AwWeapon_ActiveMeleeDelay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ActiveFireDelay
// (Defined, Simulated, Public)

void AwWeapon::ActiveFireDelay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ActiveFireDelay");

	AwWeapon_ActiveFireDelay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GetCurMagazineAmmoCount
// (Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwWeapon::GetCurMagazineAmmoCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetCurMagazineAmmoCount");

	AwWeapon_GetCurMagazineAmmoCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.GetCurTotalAmmoCount
// (Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwWeapon::GetCurTotalAmmoCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetCurTotalAmmoCount");

	AwWeapon_GetCurTotalAmmoCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ClientPlayDefence
// (Defined, Net, NetReliable, Simulated, Public)

void AwWeapon::ClientPlayDefence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientPlayDefence");

	AwWeapon_ClientPlayDefence_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientQuickReload
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bOn                            (Parm)

void AwWeapon::ClientQuickReload(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientQuickReload");

	AwWeapon_ClientQuickReload_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerQuickReload
// (Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void AwWeapon::ServerQuickReload(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerQuickReload");

	AwWeapon_ServerQuickReload_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientQuickAimZoom
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bOn                            (Parm)

void AwWeapon::ClientQuickAimZoom(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientQuickAimZoom");

	AwWeapon_ClientQuickAimZoom_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerQuickAimZoom
// (Defined, Public)
// Parameters:
// bool                           bOn                            (Parm)

void AwWeapon::ServerQuickAimZoom(bool bOn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerQuickAimZoom");

	AwWeapon_ServerQuickAimZoom_Params params;
	params.bOn = bOn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientAddMagazine
// (Defined, Net, NetReliable, Simulated, Public)

void AwWeapon::ClientAddMagazine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientAddMagazine");

	AwWeapon_ClientAddMagazine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerAddMagazine
// (Defined, Public)

void AwWeapon::ServerAddMagazine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerAddMagazine");

	AwWeapon_ServerAddMagazine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GetAmmountAddMagazine
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwWeapon::GetAmmountAddMagazine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetAmmountAddMagazine");

	AwWeapon_GetAmmountAddMagazine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SetWalkingSwayRot
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                rRot                           (Parm)

void AwWeapon::SetWalkingSwayRot(const struct FRotator& rRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetWalkingSwayRot");

	AwWeapon_SetWalkingSwayRot_Params params;
	params.rRot = rRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetAttackedRot
// (Defined, Simulated, Public)
// Parameters:
// struct FRotator                rRot                           (Parm)

void AwWeapon::SetAttackedRot(const struct FRotator& rRot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetAttackedRot");

	AwWeapon_SetAttackedRot_Params params;
	params.rRot = rRot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetAttackedOffset
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 VOffset                        (Parm)

void AwWeapon::SetAttackedOffset(const struct FVector& VOffset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetAttackedOffset");

	AwWeapon_SetAttackedOffset_Params params;
	params.VOffset = VOffset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetAmmoAmount
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            CurrentAmmo                    (Parm)

void AwWeapon::SetAmmoAmount(int Mode, int CurrentAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetAmmoAmount");

	AwWeapon_SetAmmoAmount_Params params;
	params.Mode = Mode;
	params.CurrentAmmo = CurrentAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetAmmoTotal
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            TotalAmmo                      (Parm)

void AwWeapon::SetAmmoTotal(int Mode, int TotalAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetAmmoTotal");

	AwWeapon_SetAmmoTotal_Params params;
	params.Mode = Mode;
	params.TotalAmmo = TotalAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.IsCanUseWeapon
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsCanUseWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsCanUseWeapon");

	AwWeapon_IsCanUseWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.DelFireMode
// (Native, Public)
// Parameters:
// int                            iMode                          (Parm)

void AwWeapon::DelFireMode(int iMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DelFireMode");

	AwWeapon_DelFireMode_Params params;
	params.iMode = iMode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CalcSwayRot
// (Defined, Simulated, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void AwWeapon::CalcSwayRot(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CalcSwayRot");

	AwWeapon_CalcSwayRot_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CalcFiringSwayRot
// (Defined, Simulated, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void AwWeapon::CalcFiringSwayRot(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CalcFiringSwayRot");

	AwWeapon_CalcFiringSwayRot_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetRandFiringSwayRot
// (Defined, Simulated, Public)

void AwWeapon::SetRandFiringSwayRot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetRandFiringSwayRot");

	AwWeapon_SetRandFiringSwayRot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CalcBreathOffset
// (Defined, Simulated, Public)

void AwWeapon::CalcBreathOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CalcBreathOffset");

	AwWeapon_CalcBreathOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CalcStanceOffset
// (Defined, Simulated, Public)
// Parameters:
// float                          fDelta                         (Parm)

void AwWeapon::CalcStanceOffset(float fDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CalcStanceOffset");

	AwWeapon_CalcStanceOffset_Params params;
	params.fDelta = fDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CalcDestPivot
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::CalcDestPivot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CalcDestPivot");

	AwWeapon_CalcDestPivot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.IsExistParts
// (Defined, Public)
// Parameters:
// TEnumAsByte<EAcceType>         Type                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsExistParts(TEnumAsByte<EAcceType> Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsExistParts");

	AwWeapon_IsExistParts_Params params;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.IsMeleeAttacking
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsMeleeAttacking()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsMeleeAttacking");

	AwWeapon_IsMeleeAttacking_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.IsPutdowning
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsPutdowning()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsPutdowning");

	AwWeapon_IsPutdowning_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.IsWeaponChanging
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsWeaponChanging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsWeaponChanging");

	AwWeapon_IsWeaponChanging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.IsReloading
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsReloading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsReloading");

	AwWeapon_IsReloading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.GetSprint
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::GetSprint()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetSprint");

	AwWeapon_GetSprint_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SetSprint
// (Defined, Simulated, Public)
// Parameters:
// bool                           bValue                         (Parm)

void AwWeapon::SetSprint(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetSprint");

	AwWeapon_SetSprint_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.AddParts
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<EAcceType>         Type                           (Parm)
// struct FString                 szName                         (Parm, NeedCtorLink)
// struct FString                 szSkinName                     (Parm, NeedCtorLink)
// struct FString                 strHaveDotName                 (Parm, NeedCtorLink)
// struct FVector                 AimDiff                        (Parm)
// int                            iItemID                        (Parm)
// int                            iPartsGroupID                  (Parm)
// bool                           bSightSub                      (OptionalParm, Parm)

void AwWeapon::AddParts(TEnumAsByte<EAcceType> Type, const struct FString& szName, const struct FString& szSkinName, const struct FString& strHaveDotName, const struct FVector& AimDiff, int iItemID, int iPartsGroupID, bool bSightSub)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AddParts");

	AwWeapon_AddParts_Params params;
	params.Type = Type;
	params.szName = szName;
	params.szSkinName = szSkinName;
	params.strHaveDotName = strHaveDotName;
	params.AimDiff = AimDiff;
	params.iItemID = iItemID;
	params.iPartsGroupID = iPartsGroupID;
	params.bSightSub = bSightSub;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.FireOne
// (Simulated, Public)
// Parameters:
// int                            iFireMode                      (Parm)

void AwWeapon::FireOne(int iFireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.FireOne");

	AwWeapon_FireOne_Params params;
	params.iFireMode = iFireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.AttachToPawn
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AwWeapon::AttachToPawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AttachToPawn");

	AwWeapon_AttachToPawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.AddPartsGroup
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)
// int                            iAddPartsID                    (Parm)

void AwWeapon::AddPartsGroup(int iWeaponID, int iAddPartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AddPartsGroup");

	AwWeapon_AddPartsGroup_Params params;
	params.iWeaponID = iWeaponID;
	params.iAddPartsID = iAddPartsID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetAddPartsParams
// (Defined, Simulated, Public)

void AwWeapon::SetAddPartsParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetAddPartsParams");

	AwWeapon_SetAddPartsParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.wLoadOut
// (Defined, Simulated, Public)
// Parameters:
// int                            iID                            (Parm)
// int                            iAddPartsID                    (Parm)

void AwWeapon::wLoadOut(int iID, int iAddPartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.wLoadOut");

	AwWeapon_wLoadOut_Params params;
	params.iID = iID;
	params.iAddPartsID = iAddPartsID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.wLoadOut_Client
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            iID                            (Parm)
// int                            iAddPartsID                    (Parm)

void AwWeapon::wLoadOut_Client(int iID, int iAddPartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.wLoadOut_Client");

	AwWeapon_wLoadOut_Client_Params params;
	params.iID = iID;
	params.iAddPartsID = iAddPartsID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.wLoadOut_Server
// (Defined, Public)
// Parameters:
// int                            iID                            (Parm)
// int                            iAddPartsID                    (Parm)
// bool                           bInGamePlaying                 (OptionalParm, Parm)

void AwWeapon::wLoadOut_Server(int iID, int iAddPartsID, bool bInGamePlaying)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.wLoadOut_Server");

	AwWeapon_wLoadOut_Server_Params params;
	params.iID = iID;
	params.iAddPartsID = iAddPartsID;
	params.bInGamePlaying = bInGamePlaying;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.Get1stCamouflageMt
// (Defined, Simulated, Public)
// Parameters:
// int                            iItemID                        (Parm)
// unsigned char                  byTeam                         (Parm)
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* AwWeapon::Get1stCamouflageMt(int iItemID, unsigned char byTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.Get1stCamouflageMt");

	AwWeapon_Get1stCamouflageMt_Params params;
	params.iItemID = iItemID;
	params.byTeam = byTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SetHands_Client
// (Defined, Net, NetReliable, Simulated, Public)

void AwWeapon::SetHands_Client()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetHands_Client");

	AwWeapon_SetHands_Client_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetHands_Server
// (Defined, Public)

void AwWeapon::SetHands_Server()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetHands_Server");

	AwWeapon_SetHands_Server_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetHands
// (Defined, Simulated, Public)

void AwWeapon::SetHands()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetHands");

	AwWeapon_SetHands_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetResParams
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  wRes                           (Parm)

void AwWeapon::SetResParams(class UClass* wRes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetResParams");

	AwWeapon_SetResParams_Params params;
	params.wRes = wRes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetFireModeClass_ToMode
// (Defined, Simulated, Public)
// Parameters:
// class UwWeaponBaseParams*      wBase                          (Parm)

void AwWeapon::SetFireModeClass_ToMode(class UwWeaponBaseParams* wBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetFireModeClass_ToMode");

	AwWeapon_SetFireModeClass_ToMode_Params params;
	params.wBase = wBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetBaseParams
// (Defined, Simulated, Public)
// Parameters:
// class UwWeaponBaseParams*      wBase                          (Parm)

void AwWeapon::SetBaseParams(class UwWeaponBaseParams* wBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetBaseParams");

	AwWeapon_SetBaseParams_Params params;
	params.wBase = wBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GetFireMode
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  Mode                           (Parm)
// class UwWeaponFire*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwWeaponFire* AwWeapon::GetFireMode(unsigned char Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetFireMode");

	AwWeapon_GetFireMode_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.PawnUnpossessed
// (Simulated, Public)

void AwWeapon::PawnUnpossessed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.PawnUnpossessed");

	AwWeapon_PawnUnpossessed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ShootHoop
// (Defined, Public)
// Parameters:
// class AController*             B                              (Parm)
// struct FVector                 ShootLoc                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::ShootHoop(class AController* B, const struct FVector& ShootLoc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ShootHoop");

	AwWeapon_ShootHoop_Params params;
	params.B = B;
	params.ShootLoc = ShootLoc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ShouldFireWithoutTarget
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::ShouldFireWithoutTarget()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ShouldFireWithoutTarget");

	AwWeapon_ShouldFireWithoutTarget_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.CanHeal
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::CanHeal(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CanHeal");

	AwWeapon_CanHeal_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.WantsZoomFade
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::WantsZoomFade()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.WantsZoomFade");

	AwWeapon_WantsZoomFade_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.HandlePickupQuery
// (Defined, Public)
// Parameters:
// class APickup*                 Item                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::HandlePickupQuery(class APickup* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.HandlePickupQuery");

	AwWeapon_HandlePickupQuery_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.DoReflectEffect
// (Defined, Public)
// Parameters:
// int                            Drain                          (Parm)

void AwWeapon::DoReflectEffect(int Drain)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DoReflectEffect");

	AwWeapon_DoReflectEffect_Params params;
	params.Drain = Drain;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CheckTryToDrive
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::CheckTryToDrive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CheckTryToDrive");

	AwWeapon_CheckTryToDrive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.CheckReflect
// (Defined, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 RefNormal                      (Parm, OutParm)
// int                            AmmoDrain                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::CheckReflect(const struct FVector& HitLocation, int AmmoDrain, struct FVector* RefNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CheckReflect");

	AwWeapon_CheckReflect_Params params;
	params.HitLocation = HitLocation;
	params.AmmoDrain = AmmoDrain;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (RefNormal != nullptr)
		*RefNormal = params.RefNormal;

	return params.ReturnValue;
}


// Function Engine.wWeapon.PlayIdle
// (Defined, Simulated, Public)

void AwWeapon::PlayIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.PlayIdle");

	AwWeapon_PlayIdle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.AnimEnd
// (Defined, Simulated, Public)
// Parameters:
// int                            Channel                        (Parm)

void AwWeapon::AnimEnd(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AnimEnd");

	AwWeapon_AnimEnd_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CheckSuperBerserk
// (Defined, Simulated, Public)

void AwWeapon::CheckSuperBerserk()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CheckSuperBerserk");

	AwWeapon_CheckSuperBerserk_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.AdjustPlayerDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm, OutParm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)

void AwWeapon::AdjustPlayerDamage(class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AdjustPlayerDamage");

	AwWeapon_AdjustPlayerDamage_Params params;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Damage != nullptr)
		*Damage = params.Damage;
	if (Momentum != nullptr)
		*Momentum = params.Momentum;
}


// Function Engine.wWeapon.IsRapidFire
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsRapidFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsRapidFire");

	AwWeapon_IsRapidFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.IsSingleFire
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsSingleFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsSingleFire");

	AwWeapon_IsSingleFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.IsFiring
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::IsFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IsFiring");

	AwWeapon_IsFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.Timer
// (Defined, Simulated, Public)

void AwWeapon::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.Timer");

	AwWeapon_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ImmediateStopFire
// (Defined, Simulated, Public)

void AwWeapon::ImmediateStopFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ImmediateStopFire");

	AwWeapon_ImmediateStopFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.StoreAmmo
// (Defined, Public)

void AwWeapon::StoreAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.StoreAmmo");

	AwWeapon_StoreAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CancelFire
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::CancelFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CancelFire");

	AwWeapon_CancelFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.StopFire
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::StopFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.StopFire");

	AwWeapon_StopFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.StartFire
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::StartFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.StartFire");

	AwWeapon_StartFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ReadyToFire
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Mode                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::ReadyToFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ReadyToFire");

	AwWeapon_ReadyToFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ServerCancelFire
// (Defined, Net, NetReliable, Public)
// Parameters:
// unsigned char                  Mode                           (Parm)

void AwWeapon::ServerCancelFire(unsigned char Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerCancelFire");

	AwWeapon_ServerCancelFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerStopFire
// (Defined, Net, NetReliable, Public)
// Parameters:
// unsigned char                  Mode                           (Parm)

void AwWeapon::ServerStopFire(unsigned char Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerStopFire");

	AwWeapon_ServerStopFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SynchronizeWeapon
// (Defined, Public)
// Parameters:
// class AwWeapon*                ClientWeapon                   (Parm)

void AwWeapon::SynchronizeWeapon(class AwWeapon* ClientWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SynchronizeWeapon");

	AwWeapon_SynchronizeWeapon_Params params;
	params.ClientWeapon = ClientWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientForceAmmoUpdate
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            NewAmount                      (Parm)

void AwWeapon::ClientForceAmmoUpdate(int Mode, int NewAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientForceAmmoUpdate");

	AwWeapon_ClientForceAmmoUpdate_Params params;
	params.Mode = Mode;
	params.NewAmount = NewAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerStartFire
// (Defined, Net, NetReliable, Event, Public)
// Parameters:
// unsigned char                  Mode                           (Parm)

void AwWeapon::ServerStartFire(unsigned char Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerStartFire");

	AwWeapon_ServerStartFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientCancelFire
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::ClientCancelFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientCancelFire");

	AwWeapon_ClientCancelFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientStopFire
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::ClientStopFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientStopFire");

	AwWeapon_ClientStopFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.NotifyReloaded
// (Defined, Simulated, Event, Public)

void AwWeapon::NotifyReloaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.NotifyReloaded");

	AwWeapon_NotifyReloaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientStartFire
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::ClientStartFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientStartFire");

	AwWeapon_ClientStartFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.DoAutoSwitch
// (Defined, Simulated, Public)

void AwWeapon::DoAutoSwitch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DoAutoSwitch");

	AwWeapon_DoAutoSwitch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.OutOfAmmo
// (Defined, Simulated, Public)

void AwWeapon::OutOfAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.OutOfAmmo");

	AwWeapon_OutOfAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ProcessMoveAni
// (Defined, Simulated, Public)

void AwWeapon::ProcessMoveAni()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ProcessMoveAni");

	AwWeapon_ProcessMoveAni_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.WeaponTick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          dt                             (Parm)

void AwWeapon::WeaponTick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.WeaponTick");

	AwWeapon_WeaponTick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.AltFire
// (Defined, Simulated, Public)
// Parameters:
// float                          f                              (Parm)

void AwWeapon::AltFire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AltFire");

	AwWeapon_AltFire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.Fire
// (Defined, Simulated, Public)
// Parameters:
// float                          f                              (Parm)

void AwWeapon::Fire(float f)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.Fire");

	AwWeapon_Fire_Params params;
	params.f = f;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.PutDown
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::PutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.PutDown");

	AwWeapon_PutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ServerActionThrowsWeapon
// (Defined, Net, NetReliable, Public)
// Parameters:
// int                            Num                            (Parm)

void AwWeapon::ServerActionThrowsWeapon(int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerActionThrowsWeapon");

	AwWeapon_ServerActionThrowsWeapon_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ActionThrowsWeapon
// (Defined, Simulated, Public)
// Parameters:
// int                            Num                            (Parm)

void AwWeapon::ActionThrowsWeapon(int Num)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ActionThrowsWeapon");

	AwWeapon_ActionThrowsWeapon_Params params;
	params.Num = Num;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ServerFmodPlayOwnedSound
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 SoundName                      (Parm, NeedCtorLink)
// TEnumAsByte<ESoundSlot>        Slot                           (OptionalParm, Parm)
// float                          Pitch                          (OptionalParm, Parm)
// bool                           bNoOverride                    (OptionalParm, Parm)
// bool                           Attenuate                      (OptionalParm, Parm)
// bool                           Loop                           (OptionalParm, Parm)
// int                            SellectTeam                    (OptionalParm, Parm)
// bool                           bExceptOwner                   (OptionalParm, Parm)

void AwWeapon::ServerFmodPlayOwnedSound(const struct FString& SoundName, TEnumAsByte<ESoundSlot> Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ServerFmodPlayOwnedSound");

	AwWeapon_ServerFmodPlayOwnedSound_Params params;
	params.SoundName = SoundName;
	params.Slot = Slot;
	params.Pitch = Pitch;
	params.bNoOverride = bNoOverride;
	params.Attenuate = Attenuate;
	params.Loop = Loop;
	params.SellectTeam = SellectTeam;
	params.bExceptOwner = bExceptOwner;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.BringUp
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                PrevWeapon                     (OptionalParm, Parm)

void AwWeapon::BringUp(class AwWeapon* PrevWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.BringUp");

	AwWeapon_BringUp_Params params;
	params.PrevWeapon = PrevWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientWeaponSet
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// bool                           bPossiblySwitch                (Parm)

void AwWeapon::ClientWeaponSet(bool bPossiblySwitch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientWeaponSet");

	AwWeapon_ClientWeaponSet_Params params;
	params.bPossiblySwitch = bPossiblySwitch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CheckPartsSet
// (Defined, Simulated, Public)

void AwWeapon::CheckPartsSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CheckPartsSet");

	AwWeapon_CheckPartsSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GiveAmmo
// (Defined, Public)
// Parameters:
// int                            M                              (Parm)
// class AWeaponPickup*           WP                             (Parm)
// bool                           bJustSpawned                   (Parm)

void AwWeapon::GiveAmmo(int M, class AWeaponPickup* WP, bool bJustSpawned)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GiveAmmo");

	AwWeapon_GiveAmmo_Params params;
	params.M = M;
	params.WP = WP;
	params.bJustSpawned = bJustSpawned;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GiveTo
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class APickup*                 Pickup                         (OptionalParm, Parm)

void AwWeapon::GiveTo(class APawn* Other, class APickup* Pickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GiveTo");

	AwWeapon_GiveTo_Params params;
	params.Other = Other;
	params.Pickup = Pickup;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ClientWeaponThrown
// (Defined, Net, NetReliable, Simulated, Public)

void AwWeapon::ClientWeaponThrown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientWeaponThrown");

	AwWeapon_ClientWeaponThrown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.DetachFromPawn
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AwWeapon::DetachFromPawn(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DetachFromPawn");

	AwWeapon_DetachFromPawn_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.DropFrom
// (Defined, Public)
// Parameters:
// struct FVector                 StartLocation                  (Parm)
// struct FRotator                StartRotation                  (Parm)

void AwWeapon::DropFrom(const struct FVector& StartLocation, const struct FRotator& StartRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DropFrom");

	AwWeapon_DropFrom_Params params;
	params.StartLocation = StartLocation;
	params.StartRotation = StartRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.RemoveWeapon
// (Defined, Public)

void AwWeapon::RemoveWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RemoveWeapon");

	AwWeapon_RemoveWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CanThrow
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::CanThrow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CanThrow");

	AwWeapon_CanThrow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.HolderDied
// (Defined, Public)

void AwWeapon::HolderDied()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.HolderDied");

	AwWeapon_HolderDied_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.NextWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                CurrentChoice                  (Parm)
// class AwWeapon*                CurrentWeapon                  (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AwWeapon::NextWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.NextWeapon");

	AwWeapon_NextWeapon_Params params;
	params.CurrentChoice = CurrentChoice;
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.PrevWeapon
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                CurrentChoice                  (Parm)
// class AwWeapon*                CurrentWeapon                  (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AwWeapon::PrevWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.PrevWeapon");

	AwWeapon_PrevWeapon_Params params;
	params.CurrentChoice = CurrentChoice;
	params.CurrentWeapon = CurrentWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.WeaponChangeWID
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AwWeapon::WeaponChangeWID(int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.WeaponChangeWID");

	AwWeapon_WeaponChangeWID_Params params;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.WeaponChangeWClass
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   wClass                         (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AwWeapon::WeaponChangeWClass(const struct FName& wClass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.WeaponChangeWClass");

	AwWeapon_WeaponChangeWClass_Params params;
	params.wClass = wClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.WeaponChange
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  f                              (Parm)
// bool                           bSilent                        (Parm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AwWeapon::WeaponChange(unsigned char f, bool bSilent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.WeaponChange");

	AwWeapon_WeaponChange_Params params;
	params.f = f;
	params.bSilent = bSilent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ZeroFlashCount
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::ZeroFlashCount(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ZeroFlashCount");

	AwWeapon_ZeroFlashCount_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.IncrementFlashCount
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwWeapon::IncrementFlashCount(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.IncrementFlashCount");

	AwWeapon_IncrementFlashCount_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GetEffectStart
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AwWeapon::GetEffectStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetEffectStart");

	AwWeapon_GetEffectStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.CenteredEffectStart
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AwWeapon::CenteredEffectStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CenteredEffectStart");

	AwWeapon_CenteredEffectStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.GetViewAxes
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 XAxis                          (Parm, OutParm)
// struct FVector                 YAxis                          (Parm, OutParm)
// struct FVector                 ZAxis                          (Parm, OutParm)

void AwWeapon::GetViewAxes(struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetViewAxes");

	AwWeapon_GetViewAxes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XAxis != nullptr)
		*XAxis = params.XAxis;
	if (YAxis != nullptr)
		*YAxis = params.YAxis;
	if (ZAxis != nullptr)
		*ZAxis = params.ZAxis;
}


// Function Engine.wWeapon.SetHand
// (Defined, Simulated, Public)
// Parameters:
// float                          InHand                         (Parm)

void AwWeapon::SetHand(float InHand)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetHand");

	AwWeapon_SetHand_Params params;
	params.InHand = InHand;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.PreDrawFPWeapon
// (Simulated, Public)

void AwWeapon::PreDrawFPWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.PreDrawFPWeapon");

	AwWeapon_PreDrawFPWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ApplyOffset
// (Defined, Simulated, Public)

void AwWeapon::ApplyOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ApplyOffset");

	AwWeapon_ApplyOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ApplyOffset_Rot
// (Defined, Simulated, Public)

void AwWeapon::ApplyOffset_Rot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ApplyOffset_Rot");

	AwWeapon_ApplyOffset_Rot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.ApplyOffset_Trans
// (Defined, Simulated, Public)

void AwWeapon::ApplyOffset_Trans()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ApplyOffset_Trans");

	AwWeapon_ApplyOffset_Trans_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.RenderOverlays
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AwWeapon::RenderOverlays(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RenderOverlays");

	AwWeapon_RenderOverlays_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.RenderScope
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canv                           (Parm)

void AwWeapon::RenderScope(class UCanvas* Canv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RenderScope");

	AwWeapon_RenderScope_Params params;
	params.Canv = Canv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.WeaponCentered
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::WeaponCentered()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.WeaponCentered");

	AwWeapon_WeaponCentered_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.Reselect
// (Defined, Simulated, Public)

void AwWeapon::Reselect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.Reselect");

	AwWeapon_Reselect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.Destroyed
// (Defined, Simulated, Public)

void AwWeapon::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.Destroyed");

	AwWeapon_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.SetGRI
// (Defined, Simulated, Public)
// Parameters:
// class AGameReplicationInfo*    G                              (Parm)

void AwWeapon::SetGRI(class AGameReplicationInfo* G)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetGRI");

	AwWeapon_SetGRI_Params params;
	params.G = G;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CanAttack
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::CanAttack(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CanAttack");

	AwWeapon_CanAttack_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SplashJump
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::SplashJump()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SplashJump");

	AwWeapon_SplashJump_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SuggestDefenseStyle
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::SuggestDefenseStyle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SuggestDefenseStyle");

	AwWeapon_SuggestDefenseStyle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SuggestAttackStyle
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::SuggestAttackStyle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SuggestAttackStyle");

	AwWeapon_SuggestAttackStyle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.GetAIRating
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::GetAIRating()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetAIRating");

	AwWeapon_GetAIRating_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.RateSelf
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::RateSelf()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RateSelf");

	AwWeapon_RateSelf_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.GetFireStart
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 X                              (Parm)
// struct FVector                 Y                              (Parm)
// struct FVector                 Z                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AwWeapon::GetFireStart(const struct FVector& X, const struct FVector& Y, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetFireStart");

	AwWeapon_GetFireStart_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.BotFire
// (Defined, Public)
// Parameters:
// bool                           bFinished                      (Parm)
// struct FName                   FiringMode                     (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::BotFire(bool bFinished, const struct FName& FiringMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.BotFire");

	AwWeapon_BotFire_Params params;
	params.bFinished = bFinished;
	params.FiringMode = FiringMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.BestMode
// (Defined, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AwWeapon::BestMode()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.BestMode");

	AwWeapon_BestMode_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SetAITarget
// (Public)
// Parameters:
// class AActor*                  t                              (Parm)

void AwWeapon::SetAITarget(class AActor* t)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SetAITarget");

	AwWeapon_SetAITarget_Params params;
	params.t = t;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.RecommendWeapon
// (Defined, Simulated, Public)
// Parameters:
// float                          rating                         (Parm, OutParm)
// class AwWeapon*                ReturnValue                    (Parm, OutParm, ReturnParm)

class AwWeapon* AwWeapon::RecommendWeapon(float* rating)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RecommendWeapon");

	AwWeapon_RecommendWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rating != nullptr)
		*rating = params.rating;

	return params.ReturnValue;
}


// Function Engine.wWeapon.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AwWeapon::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DisplayDebug");

	AwWeapon_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.wWeapon.Loaded
// (Simulated, Public)

void AwWeapon::Loaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.Loaded");

	AwWeapon_Loaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.FireOnRelease
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::FireOnRelease()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.FireOnRelease");

	AwWeapon_FireOnRelease_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.RefireRate
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::RefireRate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RefireRate");

	AwWeapon_RefireRate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.GetDamageRadius
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::GetDamageRadius()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetDamageRadius");

	AwWeapon_GetDamageRadius_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.RecommendSplashDamage
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::RecommendSplashDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RecommendSplashDamage");

	AwWeapon_RecommendSplashDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SplashDamage
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::SplashDamage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SplashDamage");

	AwWeapon_SplashDamage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.FireHack
// (Public)
// Parameters:
// unsigned char                  Mode                           (Parm)

void AwWeapon::FireHack(unsigned char Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.FireHack");

	AwWeapon_FireHack_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.FocusOnLeader
// (Defined, Public)
// Parameters:
// bool                           bLeaderFiring                  (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::FocusOnLeader(bool bLeaderFiring)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.FocusOnLeader");

	AwWeapon_FocusOnLeader_Params params;
	params.bLeaderFiring = bLeaderFiring;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.RecommendLongRangedAttack
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::RecommendLongRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RecommendLongRangedAttack");

	AwWeapon_RecommendLongRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.RecommendRangedAttack
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::RecommendRangedAttack()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RecommendRangedAttack");

	AwWeapon_RecommendRangedAttack_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.RangedAttackTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::RangedAttackTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.RangedAttackTime");

	AwWeapon_RangedAttackTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.HackPlayFireSound
// (Defined, Public)

void AwWeapon::HackPlayFireSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.HackPlayFireSound");

	AwWeapon_HackPlayFireSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GetDamageType
// (Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AwWeapon::GetDamageType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetDamageType");

	AwWeapon_GetDamageType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ClientWriteStats
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// unsigned char                  Mode                           (Parm)
// bool                           bMatch                         (Parm)
// bool                           bAllowFire                     (Parm)
// bool                           bDelay                         (Parm)
// bool                           bAlt                           (Parm)
// float                          wait                           (Parm)

void AwWeapon::ClientWriteStats(unsigned char Mode, bool bMatch, bool bAllowFire, bool bDelay, bool bAlt, float wait)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ClientWriteStats");

	AwWeapon_ClientWriteStats_Params params;
	params.Mode = Mode;
	params.bMatch = bMatch;
	params.bAllowFire = bAllowFire;
	params.bDelay = bDelay;
	params.bAlt = bAlt;
	params.wait = wait;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.StartDebugging
// (Defined, Public)

void AwWeapon::StartDebugging()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.StartDebugging");

	AwWeapon_StartDebugging_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.NewDrawWeaponInfo
// (Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// float                          YPos                           (Parm)

void AwWeapon::NewDrawWeaponInfo(class UCanvas* C, float YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.NewDrawWeaponInfo");

	AwWeapon_NewDrawWeaponInfo_Params params;
	params.C = C;
	params.YPos = YPos;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.DrawWeaponInfo
// (Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AwWeapon::DrawWeaponInfo(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DrawWeaponInfo");

	AwWeapon_DrawWeaponInfo_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.PostNetReceive
// (Defined, Simulated, Public)

void AwWeapon::PostNetReceive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.PostNetReceive");

	AwWeapon_PostNetReceive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.CheckOutOfAmmo
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::CheckOutOfAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.CheckOutOfAmmo");

	AwWeapon_CheckOutOfAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.DesireAmmo
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  NewAmmoClass                   (Parm)
// bool                           bDetour                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::DesireAmmo(class UClass* NewAmmoClass, bool bDetour)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.DesireAmmo");

	AwWeapon_DesireAmmo_Params params;
	params.NewAmmoClass = NewAmmoClass;
	params.bDetour = bDetour;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.NeedAmmo
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::NeedAmmo(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.NeedAmmo");

	AwWeapon_NeedAmmo_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.HasAmmo
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::HasAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.HasAmmo");

	AwWeapon_HasAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.AddAmmo
// (Defined, Public)
// Parameters:
// int                            AmmoToAdd                      (Parm)
// int                            Mode                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::AddAmmo(int AmmoToAdd, int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AddAmmo");

	AwWeapon_AddAmmo_Params params;
	params.AmmoToAdd = AmmoToAdd;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SeverConsumeAmmo
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// float                          Load                           (Parm)
// bool                           bAmountNeededIsMax             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::SeverConsumeAmmo(int Mode, float Load, bool bAmountNeededIsMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SeverConsumeAmmo");

	AwWeapon_SeverConsumeAmmo_Params params;
	params.Mode = Mode;
	params.Load = Load;
	params.bAmountNeededIsMax = bAmountNeededIsMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.AmmoStatus
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::AmmoStatus(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AmmoStatus");

	AwWeapon_AmmoStatus_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.GetAmmoCount
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          MaxAmmoPrimary                 (Parm, OutParm)
// float                          CurAmmoPrimary                 (Parm, OutParm)

void AwWeapon::GetAmmoCount(float* MaxAmmoPrimary, float* CurAmmoPrimary)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetAmmoCount");

	AwWeapon_GetAmmoCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MaxAmmoPrimary != nullptr)
		*MaxAmmoPrimary = params.MaxAmmoPrimary;
	if (CurAmmoPrimary != nullptr)
		*CurAmmoPrimary = params.CurAmmoPrimary;
}


// Function Engine.wWeapon.AmmoMaxed
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeapon::AmmoMaxed(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AmmoMaxed");

	AwWeapon_AmmoMaxed_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.AmmoPickupClass
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AwWeapon::AmmoPickupClass(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AmmoPickupClass");

	AwWeapon_AmmoPickupClass_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.AmmoAmount
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwWeapon::AmmoAmount(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.AmmoAmount");

	AwWeapon_AmmoAmount_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.FillToDefaultAmmo
// (Defined, Simulated, Public)

void AwWeapon::FillToDefaultAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.FillToDefaultAmmo");

	AwWeapon_FillToDefaultAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.FillToInitialAmmo
// (Defined, Simulated, Public)

void AwWeapon::FillToInitialAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.FillToInitialAmmo");

	AwWeapon_FillToInitialAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.MaxAmmo
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwWeapon::MaxAmmo(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.MaxAmmo");

	AwWeapon_MaxAmmo_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.SuperMaxOutAmmo
// (Defined, Simulated, Public)

void AwWeapon::SuperMaxOutAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.SuperMaxOutAmmo");

	AwWeapon_SuperMaxOutAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.MaxOutAmmo
// (Defined, Simulated, Public)

void AwWeapon::MaxOutAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.MaxOutAmmo");

	AwWeapon_MaxOutAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeapon.GetAmmoClass
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AwWeapon::GetAmmoClass(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.GetAmmoClass");

	AwWeapon_GetAmmoClass_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.ChargeBar
// (Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwWeapon::ChargeBar()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.ChargeBar");

	AwWeapon_ChargeBar_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeapon.InitWeaponFires
// (Final, Native, Public)

void AwWeapon::InitWeaponFires()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeapon.InitWeaponFires");

	AwWeapon_InitWeaponFires_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.Tick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          DeltaSeconds                   (Parm)

void AKVehicle::Tick(float DeltaSeconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.Tick");

	AKVehicle_Tick_Params params;
	params.DeltaSeconds = DeltaSeconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.Destroyed
// (Defined, Simulated, Public)

void AKVehicle::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.Destroyed");

	AKVehicle_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.SpecialCalcView
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  ViewActor                      (Parm, OutParm)
// struct FVector                 CameraLocation                 (Parm, OutParm)
// struct FRotator                CameraRotation                 (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AKVehicle::SpecialCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.SpecialCalcView");

	AKVehicle_SpecialCalcView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ViewActor != nullptr)
		*ViewActor = params.ViewActor;
	if (CameraLocation != nullptr)
		*CameraLocation = params.CameraLocation;
	if (CameraRotation != nullptr)
		*CameraRotation = params.CameraRotation;

	return params.ReturnValue;
}


// Function Engine.KVehicle.KDriverLeave
// (Defined, Public)
// Parameters:
// bool                           bForceLeave                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AKVehicle::KDriverLeave(bool bForceLeave)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.KDriverLeave");

	AKVehicle_KDriverLeave_Params params;
	params.bForceLeave = bForceLeave;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KVehicle.ClientKDriverLeave
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AKVehicle::ClientKDriverLeave(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.ClientKDriverLeave");

	AKVehicle_ClientKDriverLeave_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.KDriverEnter
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)

void AKVehicle::KDriverEnter(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.KDriverEnter");

	AKVehicle_KDriverEnter_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.ClientKDriverEnter
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AKVehicle::ClientKDriverEnter(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.ClientKDriverEnter");

	AKVehicle_ClientKDriverEnter_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.TryToDrive
// (Defined, Public)
// Parameters:
// class APawn*                   P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AKVehicle::TryToDrive(class APawn* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.TryToDrive");

	AKVehicle_TryToDrive_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.KVehicle.KVehicleUpdateParams
// (Simulated, Event, Public)

void AKVehicle::KVehicleUpdateParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.KVehicleUpdateParams");

	AKVehicle_KVehicleUpdateParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.VehicleStateReceived
// (Event, Public)

void AKVehicle::VehicleStateReceived()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.VehicleStateReceived");

	AKVehicle_VehicleStateReceived_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.TakeDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AKVehicle::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.TakeDamage");

	AKVehicle_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KVehicle.GraphData
// (Final, Native, Public)
// Parameters:
// struct FString                 DataName                       (Parm, NeedCtorLink)
// float                          DataValue                      (Parm)

void AKVehicle::GraphData(const struct FString& DataName, float DataValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KVehicle.GraphData");

	AKVehicle_GraphData_Params params;
	params.DataName = DataName;
	params.DataValue = DataValue;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.KImpact
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 pos                            (Parm)
// struct FVector                 impactVel                      (Parm)
// struct FVector                 impactNorm                     (Parm)

void AKActor::KImpact(class AActor* Other, const struct FVector& pos, const struct FVector& impactVel, const struct FVector& impactNorm)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.KImpact");

	AKActor_KImpact_Params params;
	params.Other = Other;
	params.pos = pos;
	params.impactVel = impactVel;
	params.impactNorm = impactNorm;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AKActor::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.Trigger");

	AKActor_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KActor.TakeDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AKActor::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KActor.TakeDamage");

	AKActor_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KTire.TakeDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AKTire::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KTire.TakeDamage");

	AKTire_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KTire.KUpdateState
// (Defined, Event, Public)
// Parameters:
// struct FKRigidBodyState        NewState                       (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AKTire::KUpdateState(struct FKRigidBodyState* NewState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KTire.KUpdateState");

	AKTire_KUpdateState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewState != nullptr)
		*NewState = params.NewState;

	return params.ReturnValue;
}


// Function Engine.KarmaParamsCollision.CalcContactRegion
// (Native, Public)

void UKarmaParamsCollision::CalcContactRegion()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KarmaParamsCollision.CalcContactRegion");

	UKarmaParamsCollision_CalcContactRegion_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KConstraint.KForceExceed
// (Event, Public)
// Parameters:
// float                          forceMag                       (Parm)

void AKConstraint::KForceExceed(float forceMag)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KConstraint.KForceExceed");

	AKConstraint_KForceExceed_Params params;
	params.forceMag = forceMag;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.KConstraint.KGetConstraintTorque
// (Final, Native, Public)
// Parameters:
// struct FVector                 Torque                         (Parm, OutParm)

void AKConstraint::KGetConstraintTorque(struct FVector* Torque)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KConstraint.KGetConstraintTorque");

	AKConstraint_KGetConstraintTorque_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Torque != nullptr)
		*Torque = params.Torque;
}


// Function Engine.KConstraint.KGetConstraintForce
// (Final, Native, Public)
// Parameters:
// struct FVector                 Force                          (Parm, OutParm)

void AKConstraint::KGetConstraintForce(struct FVector* Force)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KConstraint.KGetConstraintForce");

	AKConstraint_KGetConstraintForce_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Force != nullptr)
		*Force = params.Force;
}


// Function Engine.KConstraint.KUpdateConstraintParams
// (Native, Public)

void AKConstraint::KUpdateConstraintParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.KConstraint.KUpdateConstraintParams");

	AKConstraint_KUpdateConstraintParams_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProcMesh.Touch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AwProcMesh::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProcMesh.Touch");

	AwProcMesh_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProcMesh.TakeDamage
// (Defined, Simulated, Public)
// Parameters:
// int                            Damage                         (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm)
// class UClass*                  DamageType                     (Parm)
// int                            CollisionPart                  (OptionalParm, Parm)
// int                            WeaponType                     (OptionalParm, Parm)
// bool                           bWallShot                      (OptionalParm, Parm)

void AwProcMesh::TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProcMesh.TakeDamage");

	AwProcMesh_TakeDamage_Params params;
	params.Damage = Damage;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.Momentum = Momentum;
	params.DamageType = DamageType;
	params.CollisionPart = CollisionPart;
	params.WeaponType = WeaponType;
	params.bWallShot = bWallShot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProcMesh.ProcPling
// (Final, Native, Public)
// Parameters:
// struct FVector                 Position                       (Parm)
// float                          Strength                       (Parm)
// float                          Radius                         (Parm)
// struct FVector                 EffectLocation                 (Parm, OutParm)
// struct FVector                 EffectNormal                   (Parm, OutParm)

void AwProcMesh::ProcPling(const struct FVector& Position, float Strength, float Radius, struct FVector* EffectLocation, struct FVector* EffectNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProcMesh.ProcPling");

	AwProcMesh_ProcPling_Params params;
	params.Position = Position;
	params.Strength = Strength;
	params.Radius = Radius;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (EffectLocation != nullptr)
		*EffectLocation = params.EffectLocation;
	if (EffectNormal != nullptr)
		*EffectNormal = params.EffectNormal;
}


// Function Engine.wPickUpBase.SpawnPickup
// (Defined, Public)

void AwPickUpBase::SpawnPickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wPickUpBase.SpawnPickup");

	AwPickUpBase_SpawnPickup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wPickUpBase.TurnOn
// (Public)

void AwPickUpBase::TurnOn()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wPickUpBase.TurnOn");

	AwPickUpBase_TurnOn_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wPickUpBase.GetInventoryGroup
// (Defined, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AwPickUpBase::GetInventoryGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wPickUpBase.GetInventoryGroup");

	AwPickUpBase_GetInventoryGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wPickUpBase.CheckForErrors
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwPickUpBase::CheckForErrors()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wPickUpBase.CheckForErrors");

	AwPickUpBase_CheckForErrors_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wPickUpBase.PostBeginPlay
// (Defined, Simulated, Event, Public)

void AwPickUpBase::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wPickUpBase.PostBeginPlay");

	AwPickUpBase_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.GetPlayerController
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       ReturnValue                    (Parm, OutParm, ReturnParm)

class APlayerController* AwGameStateStorageSender::GetPlayerController()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.GetPlayerController");

	AwGameStateStorageSender_GetPlayerController_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameStateStorageSender.ClientInitialize
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            id                             (Parm)
// class APlayerController*       PC                             (Parm)

void AwGameStateStorageSender::ClientInitialize(int id, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientInitialize");

	AwGameStateStorageSender_ClientInitialize_Params params;
	params.id = id;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.Initialize
// (Defined, Public)
// Parameters:
// int                            id                             (Parm)
// class APlayerController*       PC                             (Parm)

void AwGameStateStorageSender::Initialize(int id, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.Initialize");

	AwGameStateStorageSender_Initialize_Params params;
	params.id = id;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.Destroyed
// (Defined, Event, Public)

void AwGameStateStorageSender::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.Destroyed");

	AwGameStateStorageSender_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.PreBeginPlay
// (Defined, Event, Public)

void AwGameStateStorageSender::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.PreBeginPlay");

	AwGameStateStorageSender_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetGameState_OnlyClient
// (Defined, Simulated, Public)

void AwGameStateStorageSender::SetGameState_OnlyClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetGameState_OnlyClient");

	AwGameStateStorageSender_SetGameState_OnlyClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetScoreState_OnlyClient
// (Defined, Simulated, Public)

void AwGameStateStorageSender::SetScoreState_OnlyClient()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetScoreState_OnlyClient");

	AwGameStateStorageSender_SetScoreState_OnlyClient_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.Tick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AwGameStateStorageSender::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.Tick");

	AwGameStateStorageSender_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientTick
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AwGameStateStorageSender::ClientTick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientTick");

	AwGameStateStorageSender_ClientTick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetAllDataToInterventionUser
// (Defined, Public)
// Parameters:
// class AwGameStateStorageSender* ToGSSS                         (Parm)

void AwGameStateStorageSender::SetAllDataToInterventionUser(class AwGameStateStorageSender* ToGSSS)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetAllDataToInterventionUser");

	AwGameStateStorageSender_SetAllDataToInterventionUser_Params params;
	params.ToGSSS = ToGSSS;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_AllUserData
// (Defined, Public)

void AwGameStateStorageSender::SetToStorage_AllUserData()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_AllUserData");

	AwGameStateStorageSender_SetToStorage_AllUserData_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientDeleteFromStorage_Weapon
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strWeaponName                  (Parm, NeedCtorLink)

void AwGameStateStorageSender::ClientDeleteFromStorage_Weapon(int UserID, const struct FString& strWeaponName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientDeleteFromStorage_Weapon");

	AwGameStateStorageSender_ClientDeleteFromStorage_Weapon_Params params;
	params.UserID = UserID;
	params.strWeaponName = strWeaponName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.DeleteFromStorage_Weapon
// (Defined, Public)
// Parameters:
// struct FString                 strWeaponName                  (Parm, NeedCtorLink)

void AwGameStateStorageSender::DeleteFromStorage_Weapon(const struct FString& strWeaponName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.DeleteFromStorage_Weapon");

	AwGameStateStorageSender_DeleteFromStorage_Weapon_Params params;
	params.strWeaponName = strWeaponName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientClearStorage
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 sUserID                        (Parm, NeedCtorLink)

void AwGameStateStorageSender::ClientClearStorage(const struct FString& sUserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientClearStorage");

	AwGameStateStorageSender_ClientClearStorage_Params params;
	params.sUserID = sUserID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClearStorage
// (Defined, Public)

void AwGameStateStorageSender::ClearStorage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClearStorage");

	AwGameStateStorageSender_ClearStorage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientDeleteFromStorage
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 sUserID                        (Parm, NeedCtorLink)
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)

void AwGameStateStorageSender::ClientDeleteFromStorage(const struct FString& sUserID, const struct FString& Section, const struct FString& sName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientDeleteFromStorage");

	AwGameStateStorageSender_ClientDeleteFromStorage_Params params;
	params.sUserID = sUserID;
	params.Section = Section;
	params.sName = sName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.DeleteFromStorage
// (Defined, Public)
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)

void AwGameStateStorageSender::DeleteFromStorage(const struct FString& Section, const struct FString& sName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.DeleteFromStorage");

	AwGameStateStorageSender_DeleteFromStorage_Params params;
	params.Section = Section;
	params.sName = sName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage3
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 sUserID                        (Parm, NeedCtorLink)
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)
// struct FString                 Type                           (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)
// struct FString                 Section2                       (Parm, NeedCtorLink)
// struct FString                 sName2                         (Parm, NeedCtorLink)
// struct FString                 type2                          (Parm, NeedCtorLink)
// struct FString                 value2                         (Parm, NeedCtorLink)
// struct FString                 Section3                       (Parm, NeedCtorLink)
// struct FString                 sName3                         (Parm, NeedCtorLink)
// struct FString                 type3                          (Parm, NeedCtorLink)
// struct FString                 value3                         (Parm, NeedCtorLink)

void AwGameStateStorageSender::ClientSetToStorage3(const struct FString& sUserID, const struct FString& Section, const struct FString& sName, const struct FString& Type, const struct FString& Value, const struct FString& Section2, const struct FString& sName2, const struct FString& type2, const struct FString& value2, const struct FString& Section3, const struct FString& sName3, const struct FString& type3, const struct FString& value3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage3");

	AwGameStateStorageSender_ClientSetToStorage3_Params params;
	params.sUserID = sUserID;
	params.Section = Section;
	params.sName = sName;
	params.Type = Type;
	params.Value = Value;
	params.Section2 = Section2;
	params.sName2 = sName2;
	params.type2 = type2;
	params.value2 = value2;
	params.Section3 = Section3;
	params.sName3 = sName3;
	params.type3 = type3;
	params.value3 = value3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage3
// (Defined, Public)
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)
// struct FString                 Type                           (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)
// struct FString                 Section2                       (Parm, NeedCtorLink)
// struct FString                 sName2                         (Parm, NeedCtorLink)
// struct FString                 type2                          (Parm, NeedCtorLink)
// struct FString                 value2                         (Parm, NeedCtorLink)
// struct FString                 Section3                       (Parm, NeedCtorLink)
// struct FString                 sName3                         (Parm, NeedCtorLink)
// struct FString                 type3                          (Parm, NeedCtorLink)
// struct FString                 value3                         (Parm, NeedCtorLink)

void AwGameStateStorageSender::SetToStorage3(const struct FString& Section, const struct FString& sName, const struct FString& Type, const struct FString& Value, const struct FString& Section2, const struct FString& sName2, const struct FString& type2, const struct FString& value2, const struct FString& Section3, const struct FString& sName3, const struct FString& type3, const struct FString& value3)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage3");

	AwGameStateStorageSender_SetToStorage3_Params params;
	params.Section = Section;
	params.sName = sName;
	params.Type = Type;
	params.Value = Value;
	params.Section2 = Section2;
	params.sName2 = sName2;
	params.type2 = type2;
	params.value2 = value2;
	params.Section3 = Section3;
	params.sName3 = sName3;
	params.type3 = type3;
	params.value3 = value3;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Leave
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)

void AwGameStateStorageSender::ClientSetToStorage_Vehicle_Leave(int UserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Leave");

	AwGameStateStorageSender_ClientSetToStorage_Vehicle_Leave_Params params;
	params.UserID = UserID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Enter
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strClassName                   (Parm, NeedCtorLink)
// float                          Pos_X                          (Parm)
// float                          Pos_Y                          (Parm)
// float                          Pos_Z                          (Parm)

void AwGameStateStorageSender::ClientSetToStorage_Vehicle_Enter(int UserID, const struct FString& strClassName, float Pos_X, float Pos_Y, float Pos_Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Enter");

	AwGameStateStorageSender_ClientSetToStorage_Vehicle_Enter_Params params;
	params.UserID = UserID;
	params.strClassName = strClassName;
	params.Pos_X = Pos_X;
	params.Pos_Y = Pos_Y;
	params.Pos_Z = Pos_Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_UpdateCall
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// bool                           bUpdateCall                    (Parm)

void AwGameStateStorageSender::ClientSetToStorage_Skill_UpdateCall(int UserID, int nSkillID, bool bUpdateCall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_UpdateCall");

	AwGameStateStorageSender_ClientSetToStorage_Skill_UpdateCall_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.bUpdateCall = bUpdateCall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_AddCount
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// unsigned char                  byAddCount                     (Parm)

void AwGameStateStorageSender::ClientSetToStorage_Skill_AddCount(int UserID, int nSkillID, unsigned char byAddCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_AddCount");

	AwGameStateStorageSender_ClientSetToStorage_Skill_AddCount_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.byAddCount = byAddCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_Used
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// bool                           bUsed                          (Parm)

void AwGameStateStorageSender::ClientSetToStorage_Skill_Used(int UserID, int nSkillID, bool bUsed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_Used");

	AwGameStateStorageSender_ClientSetToStorage_Skill_Used_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.bUsed = bUsed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_IsEnable
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// bool                           bIsEnable                      (Parm)

void AwGameStateStorageSender::ClientSetToStorage_Skill_IsEnable(int UserID, int nSkillID, bool bIsEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_Skill_IsEnable");

	AwGameStateStorageSender_ClientSetToStorage_Skill_IsEnable_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.bIsEnable = bIsEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_PlayerState
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strName                        (Parm, NeedCtorLink)
// unsigned char                  bPawnExistCondition            (Parm)

void AwGameStateStorageSender::ClientSetToStorage_PlayerState(int UserID, const struct FString& strName, unsigned char bPawnExistCondition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_PlayerState");

	AwGameStateStorageSender_ClientSetToStorage_PlayerState_Params params;
	params.UserID = UserID;
	params.strName = strName;
	params.bPawnExistCondition = bPawnExistCondition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_WeaponAmmo
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strName                        (Parm, NeedCtorLink)
// int                            nTotalAmmo                     (Parm)
// int                            nCurrentAmmo                   (Parm)

void AwGameStateStorageSender::ClientSetToStorage_WeaponAmmo(int UserID, const struct FString& strName, int nTotalAmmo, int nCurrentAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_WeaponAmmo");

	AwGameStateStorageSender_ClientSetToStorage_WeaponAmmo_Params params;
	params.UserID = UserID;
	params.strName = strName;
	params.nTotalAmmo = nTotalAmmo;
	params.nCurrentAmmo = nCurrentAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_AddWeapon
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strWeaponName                  (Parm, NeedCtorLink)
// int                            nWeaponID                      (Parm)
// int                            nAddPartID                     (Parm)
// bool                           bUniqueID                      (Parm)
// int                            iPainting_Item_ID              (Parm)

void AwGameStateStorageSender::ClientSetToStorage_AddWeapon(int UserID, const struct FString& strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_AddWeapon");

	AwGameStateStorageSender_ClientSetToStorage_AddWeapon_Params params;
	params.UserID = UserID;
	params.strWeaponName = strWeaponName;
	params.nWeaponID = nWeaponID;
	params.nAddPartID = nAddPartID;
	params.bUniqueID = bUniqueID;
	params.iPainting_Item_ID = iPainting_Item_ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_OldWeapon
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nWeaponID                      (Parm)

void AwGameStateStorageSender::ClientSetToStorage_OldWeapon(int UserID, int nWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_OldWeapon");

	AwGameStateStorageSender_ClientSetToStorage_OldWeapon_Params params;
	params.UserID = UserID;
	params.nWeaponID = nWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage_CurrentWeapon
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nWeaponID                      (Parm)

void AwGameStateStorageSender::ClientSetToStorage_CurrentWeapon(int UserID, int nWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage_CurrentWeapon");

	AwGameStateStorageSender_ClientSetToStorage_CurrentWeapon_Params params;
	params.UserID = UserID;
	params.nWeaponID = nWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_Vehicle_Leave
// (Defined, Public)

void AwGameStateStorageSender::SetToStorage_Vehicle_Leave()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_Vehicle_Leave");

	AwGameStateStorageSender_SetToStorage_Vehicle_Leave_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_Vehicle_Enter
// (Defined, Public)
// Parameters:
// struct FString                 strClassName                   (Parm, NeedCtorLink)
// float                          Pos_X                          (Parm)
// float                          Pos_Y                          (Parm)
// float                          Pos_Z                          (Parm)

void AwGameStateStorageSender::SetToStorage_Vehicle_Enter(const struct FString& strClassName, float Pos_X, float Pos_Y, float Pos_Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_Vehicle_Enter");

	AwGameStateStorageSender_SetToStorage_Vehicle_Enter_Params params;
	params.strClassName = strClassName;
	params.Pos_X = Pos_X;
	params.Pos_Y = Pos_Y;
	params.Pos_Z = Pos_Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_Skill_UpdateCall
// (Defined, Public)
// Parameters:
// int                            nSkillID                       (Parm)
// bool                           bUpdateCall                    (Parm)

void AwGameStateStorageSender::SetToStorage_Skill_UpdateCall(int nSkillID, bool bUpdateCall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_Skill_UpdateCall");

	AwGameStateStorageSender_SetToStorage_Skill_UpdateCall_Params params;
	params.nSkillID = nSkillID;
	params.bUpdateCall = bUpdateCall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_Skill_AddCount
// (Defined, Public)
// Parameters:
// int                            nSkillID                       (Parm)
// unsigned char                  byAddCount                     (Parm)

void AwGameStateStorageSender::SetToStorage_Skill_AddCount(int nSkillID, unsigned char byAddCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_Skill_AddCount");

	AwGameStateStorageSender_SetToStorage_Skill_AddCount_Params params;
	params.nSkillID = nSkillID;
	params.byAddCount = byAddCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_Skill_Used
// (Defined, Public)
// Parameters:
// int                            nSkillID                       (Parm)
// bool                           bUsed                          (Parm)

void AwGameStateStorageSender::SetToStorage_Skill_Used(int nSkillID, bool bUsed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_Skill_Used");

	AwGameStateStorageSender_SetToStorage_Skill_Used_Params params;
	params.nSkillID = nSkillID;
	params.bUsed = bUsed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_Skill_IsEnable
// (Defined, Public)
// Parameters:
// int                            nSkillID                       (Parm)
// bool                           bIsEnable                      (Parm)

void AwGameStateStorageSender::SetToStorage_Skill_IsEnable(int nSkillID, bool bIsEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_Skill_IsEnable");

	AwGameStateStorageSender_SetToStorage_Skill_IsEnable_Params params;
	params.nSkillID = nSkillID;
	params.bIsEnable = bIsEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_PlayerState
// (Defined, Public)
// Parameters:
// struct FString                 strName                        (Parm, NeedCtorLink)
// unsigned char                  bPawnExistCondition            (Parm)

void AwGameStateStorageSender::SetToStorage_PlayerState(const struct FString& strName, unsigned char bPawnExistCondition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_PlayerState");

	AwGameStateStorageSender_SetToStorage_PlayerState_Params params;
	params.strName = strName;
	params.bPawnExistCondition = bPawnExistCondition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_WeaponAmmo
// (Defined, Public)
// Parameters:
// struct FString                 strName                        (Parm, NeedCtorLink)
// int                            nTotalAmmo                     (Parm)
// int                            nCurrentAmmo                   (Parm)

void AwGameStateStorageSender::SetToStorage_WeaponAmmo(const struct FString& strName, int nTotalAmmo, int nCurrentAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_WeaponAmmo");

	AwGameStateStorageSender_SetToStorage_WeaponAmmo_Params params;
	params.strName = strName;
	params.nTotalAmmo = nTotalAmmo;
	params.nCurrentAmmo = nCurrentAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_AddWeapon
// (Defined, Public)
// Parameters:
// struct FString                 strWeaponName                  (Parm, NeedCtorLink)
// int                            nWeaponID                      (Parm)
// int                            nAddPartID                     (Parm)
// bool                           bUniqueID                      (Parm)
// int                            iPainting_Item_ID              (OptionalParm, Parm)

void AwGameStateStorageSender::SetToStorage_AddWeapon(const struct FString& strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_AddWeapon");

	AwGameStateStorageSender_SetToStorage_AddWeapon_Params params;
	params.strWeaponName = strWeaponName;
	params.nWeaponID = nWeaponID;
	params.nAddPartID = nAddPartID;
	params.bUniqueID = bUniqueID;
	params.iPainting_Item_ID = iPainting_Item_ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_OldWeapon
// (Defined, Public)
// Parameters:
// int                            nWeaponID                      (Parm)

void AwGameStateStorageSender::SetToStorage_OldWeapon(int nWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_OldWeapon");

	AwGameStateStorageSender_SetToStorage_OldWeapon_Params params;
	params.nWeaponID = nWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage_CurrentWeapon
// (Defined, Public)
// Parameters:
// int                            nWeaponID                      (Parm)

void AwGameStateStorageSender::SetToStorage_CurrentWeapon(int nWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage_CurrentWeapon");

	AwGameStateStorageSender_SetToStorage_CurrentWeapon_Params params;
	params.nWeaponID = nWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowWeapon_Delete
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strWeaponName                  (Parm, NeedCtorLink)

void AwGameStateStorageSender::LowWeapon_Delete(int UserID, const struct FString& strWeaponName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowWeapon_Delete");

	AwGameStateStorageSender_LowWeapon_Delete_Params params;
	params.UserID = UserID;
	params.strWeaponName = strWeaponName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowVehicleLeave_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)

void AwGameStateStorageSender::LowVehicleLeave_Set(int UserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowVehicleLeave_Set");

	AwGameStateStorageSender_LowVehicleLeave_Set_Params params;
	params.UserID = UserID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowVehicleEnter_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strClassName                   (Parm, NeedCtorLink)
// float                          Pos_X                          (Parm)
// float                          Pos_Y                          (Parm)
// float                          Pos_Z                          (Parm)

void AwGameStateStorageSender::LowVehicleEnter_Set(int UserID, const struct FString& strClassName, float Pos_X, float Pos_Y, float Pos_Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowVehicleEnter_Set");

	AwGameStateStorageSender_LowVehicleEnter_Set_Params params;
	params.UserID = UserID;
	params.strClassName = strClassName;
	params.Pos_X = Pos_X;
	params.Pos_Y = Pos_Y;
	params.Pos_Z = Pos_Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowSkill_UpdateCall_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// bool                           bUpdateCall                    (Parm)

void AwGameStateStorageSender::LowSkill_UpdateCall_Set(int UserID, int nSkillID, bool bUpdateCall)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowSkill_UpdateCall_Set");

	AwGameStateStorageSender_LowSkill_UpdateCall_Set_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.bUpdateCall = bUpdateCall;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowSkill_AddCount_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// unsigned char                  byAddCount                     (Parm)

void AwGameStateStorageSender::LowSkill_AddCount_Set(int UserID, int nSkillID, unsigned char byAddCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowSkill_AddCount_Set");

	AwGameStateStorageSender_LowSkill_AddCount_Set_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.byAddCount = byAddCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowSkill_Used_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// bool                           bUsed                          (Parm)

void AwGameStateStorageSender::LowSkill_Used_Set(int UserID, int nSkillID, bool bUsed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowSkill_Used_Set");

	AwGameStateStorageSender_LowSkill_Used_Set_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.bUsed = bUsed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowSkill_IsEnable_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nSkillID                       (Parm)
// bool                           bIsEnable                      (Parm)

void AwGameStateStorageSender::LowSkill_IsEnable_Set(int UserID, int nSkillID, bool bIsEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowSkill_IsEnable_Set");

	AwGameStateStorageSender_LowSkill_IsEnable_Set_Params params;
	params.UserID = UserID;
	params.nSkillID = nSkillID;
	params.bIsEnable = bIsEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowPlayerState_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strName                        (Parm, NeedCtorLink)
// unsigned char                  bPawnExistCondition            (Parm)

void AwGameStateStorageSender::LowPlayerState_Set(int UserID, const struct FString& strName, unsigned char bPawnExistCondition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowPlayerState_Set");

	AwGameStateStorageSender_LowPlayerState_Set_Params params;
	params.UserID = UserID;
	params.strName = strName;
	params.bPawnExistCondition = bPawnExistCondition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowWeaponAmmo_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strWeaponName                  (Parm, NeedCtorLink)
// int                            nTotalAmmo                     (Parm)
// int                            nCurrentAmmo                   (Parm)

void AwGameStateStorageSender::LowWeaponAmmo_Set(int UserID, const struct FString& strWeaponName, int nTotalAmmo, int nCurrentAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowWeaponAmmo_Set");

	AwGameStateStorageSender_LowWeaponAmmo_Set_Params params;
	params.UserID = UserID;
	params.strWeaponName = strWeaponName;
	params.nTotalAmmo = nTotalAmmo;
	params.nCurrentAmmo = nCurrentAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowAddWeapon_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// struct FString                 strWeaponName                  (Parm, NeedCtorLink)
// int                            nWeaponID                      (Parm)
// int                            nAddPartID                     (Parm)
// bool                           bUniqueID                      (Parm)
// int                            iPainting_Item_ID              (Parm)

void AwGameStateStorageSender::LowAddWeapon_Set(int UserID, const struct FString& strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowAddWeapon_Set");

	AwGameStateStorageSender_LowAddWeapon_Set_Params params;
	params.UserID = UserID;
	params.strWeaponName = strWeaponName;
	params.nWeaponID = nWeaponID;
	params.nAddPartID = nAddPartID;
	params.bUniqueID = bUniqueID;
	params.iPainting_Item_ID = iPainting_Item_ID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowOldWeapon_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nWeaponID                      (Parm)

void AwGameStateStorageSender::LowOldWeapon_Set(int UserID, int nWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowOldWeapon_Set");

	AwGameStateStorageSender_LowOldWeapon_Set_Params params;
	params.UserID = UserID;
	params.nWeaponID = nWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowCurrentWeapon_Set
// (Defined, Simulated, Public)
// Parameters:
// int                            UserID                         (Parm)
// int                            nWeaponID                      (Parm)

void AwGameStateStorageSender::LowCurrentWeapon_Set(int UserID, int nWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowCurrentWeapon_Set");

	AwGameStateStorageSender_LowCurrentWeapon_Set_Params params;
	params.UserID = UserID;
	params.nWeaponID = nWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ClientSetToStorage
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 sUserID                        (Parm, NeedCtorLink)
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)
// struct FString                 Type                           (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)

void AwGameStateStorageSender::ClientSetToStorage(const struct FString& sUserID, const struct FString& Section, const struct FString& sName, const struct FString& Type, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ClientSetToStorage");

	AwGameStateStorageSender_ClientSetToStorage_Params params;
	params.sUserID = sUserID;
	params.Section = Section;
	params.sName = sName;
	params.Type = Type;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.SetToStorage
// (Defined, Public)
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)
// struct FString                 Type                           (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)

void AwGameStateStorageSender::SetToStorage(const struct FString& Section, const struct FString& sName, const struct FString& Type, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.SetToStorage");

	AwGameStateStorageSender_SetToStorage_Params params;
	params.Section = Section;
	params.sName = sName;
	params.Type = Type;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.GetValue
// (Final, Native, Public)
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)
// struct FString                 Type                           (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGameStateStorageSender::GetValue(const struct FString& Section, const struct FString& sName, const struct FString& Type, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.GetValue");

	AwGameStateStorageSender_GetValue_Params params;
	params.Section = Section;
	params.sName = sName;
	params.Type = Type;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Value != nullptr)
		*Value = params.Value;

	return params.ReturnValue;
}


// Function Engine.wGameStateStorageSender.AllValues
// (Final, Iterator, Native, Public)
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)
// struct FString                 Type                           (Parm, OutParm, NeedCtorLink)
// struct FString                 Value                          (Parm, OutParm, NeedCtorLink)

void AwGameStateStorageSender::AllValues(const struct FString& Section, const struct FString& sName, struct FString* Type, struct FString* Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.AllValues");

	AwGameStateStorageSender_AllValues_Params params;
	params.Section = Section;
	params.sName = sName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Type != nullptr)
		*Type = params.Type;
	if (Value != nullptr)
		*Value = params.Value;
}


// Function Engine.wGameStateStorageSender.AllNames
// (Final, Iterator, Native, Public)
// Parameters:
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, OutParm, NeedCtorLink)

void AwGameStateStorageSender::AllNames(const struct FString& Section, struct FString* sName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.AllNames");

	AwGameStateStorageSender_AllNames_Params params;
	params.Section = Section;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (sName != nullptr)
		*sName = params.sName;
}


// Function Engine.wGameStateStorageSender.LowClear
// (Final, Native, Private)
// Parameters:
// struct FString                 sUserID                        (Parm, NeedCtorLink)

void AwGameStateStorageSender::LowClear(const struct FString& sUserID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowClear");

	AwGameStateStorageSender_LowClear_Params params;
	params.sUserID = sUserID;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowDelete
// (Final, Native, Private)
// Parameters:
// struct FString                 sUserID                        (Parm, NeedCtorLink)
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)

void AwGameStateStorageSender::LowDelete(const struct FString& sUserID, const struct FString& Section, const struct FString& sName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowDelete");

	AwGameStateStorageSender_LowDelete_Params params;
	params.sUserID = sUserID;
	params.Section = Section;
	params.sName = sName;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.LowSet
// (Final, Native, Private)
// Parameters:
// struct FString                 sUserID                        (Parm, NeedCtorLink)
// struct FString                 Section                        (Parm, NeedCtorLink)
// struct FString                 sName                          (Parm, NeedCtorLink)
// struct FString                 Type                           (Parm, NeedCtorLink)
// struct FString                 Value                          (Parm, NeedCtorLink)

void AwGameStateStorageSender::LowSet(const struct FString& sUserID, const struct FString& Section, const struct FString& sName, const struct FString& Type, const struct FString& Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.LowSet");

	AwGameStateStorageSender_LowSet_Params params;
	params.sUserID = sUserID;
	params.Section = Section;
	params.sName = sName;
	params.Type = Type;
	params.Value = Value;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.RemoveGSSS
// (Native, Private)

void AwGameStateStorageSender::RemoveGSSS()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.RemoveGSSS");

	AwGameStateStorageSender_RemoveGSSS_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.AddGSSS
// (Native, Private)

void AwGameStateStorageSender::AddGSSS()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.AddGSSS");

	AwGameStateStorageSender_AddGSSS_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageSender.ForceSetOwner
// (Final, Native, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AwGameStateStorageSender::ForceSetOwner(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageSender.ForceSetOwner");

	AwGameStateStorageSender_ForceSetOwner_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wEmitter.PrecacheContent
// (Defined, Static, Public)
// Parameters:
// class ALevelInfo*              Level                          (Parm)

void AwEmitter::STATIC_PrecacheContent(class ALevelInfo* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wEmitter.PrecacheContent");

	AwEmitter_PrecacheContent_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wEmitter.UpdatePrecacheMaterials
// (Defined, Simulated, Public)

void AwEmitter::UpdatePrecacheMaterials()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wEmitter.UpdatePrecacheMaterials");

	AwEmitter_UpdatePrecacheMaterials_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wEmitter.Trigger
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AwEmitter::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wEmitter.Trigger");

	AwEmitter_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wEmitter.ClampToMaxParticles
// (Final, Defined, Simulated, Public)
// Parameters:
// float                          InPart                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwEmitter::ClampToMaxParticles(float InPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wEmitter.ClampToMaxParticles");

	AwEmitter_ClampToMaxParticles_Params params;
	params.InPart = InPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wEmitter.PreSpawned
// (Defined, Event, Public)

void AwEmitter::PreSpawned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wEmitter.PreSpawned");

	AwEmitter_PreSpawned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wEmitter.CollisionSound
// (Event, Public)

void AwEmitter::CollisionSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wEmitter.CollisionSound");

	AwEmitter_CollisionSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneSubtitles.Reset
// (Defined, Event, Public)

void ASceneSubtitles::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneSubtitles.Reset");

	ASceneSubtitles_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.SceneSubtitles.GetSubTitles
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ASceneSubtitles::GetSubTitles()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneSubtitles.GetSubTitles");

	ASceneSubtitles_GetSubTitles_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.SceneSubtitles.ProcessEvent
// (Final, Native, Public)
// Parameters:
// TEnumAsByte<ESST_Mode>         Mode                           (Parm)

void ASceneSubtitles::ProcessEvent(TEnumAsByte<ESST_Mode> Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.SceneSubtitles.ProcessEvent");

	ASceneSubtitles_ProcessEvent_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.GetLogFilename
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::GetLogFilename()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.GetLogFilename");

	AGameStats_GetLogFilename_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameStats.GameEvent
// (Defined, Public)
// Parameters:
// struct FString                 GEvent                         (Parm, NeedCtorLink)
// struct FString                 Desc                           (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  Who                            (Parm)

void AGameStats::GameEvent(const struct FString& GEvent, const struct FString& Desc, class APlayerReplicationInfo* Who)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.GameEvent");

	AGameStats_GameEvent_Params params;
	params.GEvent = GEvent;
	params.Desc = Desc;
	params.Who = Who;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.SpecialEvent
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Who                            (Parm)
// struct FString                 Desc                           (Parm, NeedCtorLink)

void AGameStats::SpecialEvent(class APlayerReplicationInfo* Who, const struct FString& Desc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.SpecialEvent");

	AGameStats_SpecialEvent_Params params;
	params.Who = Who;
	params.Desc = Desc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.KillEvent
// (Defined, Public)
// Parameters:
// struct FString                 KillType                       (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  Killer                         (Parm)
// class APlayerReplicationInfo*  Victim                         (Parm)
// class UClass*                  Damage                         (Parm)

void AGameStats::KillEvent(const struct FString& KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.KillEvent");

	AGameStats_KillEvent_Params params;
	params.KillType = KillType;
	params.Killer = Killer;
	params.Victim = Victim;
	params.Damage = Damage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.TeamScoreEvent
// (Defined, Public)
// Parameters:
// int                            Team                           (Parm)
// float                          Points                         (Parm)
// struct FString                 Desc                           (Parm, NeedCtorLink)

void AGameStats::TeamScoreEvent(int Team, float Points, const struct FString& Desc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.TeamScoreEvent");

	AGameStats_TeamScoreEvent_Params params;
	params.Team = Team;
	params.Points = Points;
	params.Desc = Desc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.ScoreEvent
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Who                            (Parm)
// float                          Points                         (Parm)
// struct FString                 Desc                           (Parm, NeedCtorLink)

void AGameStats::ScoreEvent(class APlayerReplicationInfo* Who, float Points, const struct FString& Desc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.ScoreEvent");

	AGameStats_ScoreEvent_Params params;
	params.Who = Who;
	params.Points = Points;
	params.Desc = Desc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.DisconnectEvent
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Who                            (Parm)

void AGameStats::DisconnectEvent(class APlayerReplicationInfo* Who)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.DisconnectEvent");

	AGameStats_DisconnectEvent_Params params;
	params.Who = Who;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.ConnectEvent
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Who                            (Parm)

void AGameStats::ConnectEvent(class APlayerReplicationInfo* Who)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.ConnectEvent");

	AGameStats_ConnectEvent_Params params;
	params.Who = Who;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.EndGame
// (Defined, Public)
// Parameters:
// struct FString                 Reason                         (Parm, NeedCtorLink)

void AGameStats::EndGame(const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.EndGame");

	AGameStats_EndGame_Params params;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.StartGame
// (Defined, Public)

void AGameStats::StartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.StartGame");

	AGameStats_StartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.ServerInfo
// (Defined, Public)

void AGameStats::ServerInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.ServerInfo");

	AGameStats_ServerInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.NewGame
// (Defined, Public)

void AGameStats::NewGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.NewGame");

	AGameStats_NewGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.MapName
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::MapName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.MapName");

	AGameStats_MapName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameStats.TimeZone
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::TimeZone()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.TimeZone");

	AGameStats_TimeZone_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameStats.FullTimeDate
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::FullTimeDate()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.FullTimeDate");

	AGameStats_FullTimeDate_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameStats.Header
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::Header()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.Header");

	AGameStats_Header_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameStats.TimeStamp
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::TimeStamp()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.TimeStamp");

	AGameStats_TimeStamp_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameStats.Destroyed
// (Defined, Event, Public)

void AGameStats::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.Destroyed");

	AGameStats_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.PostBeginPlay
// (Defined, Event, Public)

void AGameStats::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.PostBeginPlay");

	AGameStats_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.Logf
// (Defined, Public)
// Parameters:
// struct FString                 LogString                      (Parm, NeedCtorLink)

void AGameStats::Logf(const struct FString& LogString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.Logf");

	AGameStats_Logf_Params params;
	params.LogString = LogString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.Shutdown
// (Defined, Public)

void AGameStats::Shutdown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.Shutdown");

	AGameStats_Shutdown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.Init
// (Defined, Public)

void AGameStats::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.Init");

	AGameStats_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameStats.GetMapFileName
// (Final, Native, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::GetMapFileName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.GetMapFileName");

	AGameStats_GetMapFileName_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameStats.GetStatsIdentifier
// (Final, Native, Public)
// Parameters:
// class AController*             C                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameStats::GetStatsIdentifier(class AController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameStats.GetStatsIdentifier");

	AGameStats_GetStatsIdentifier_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FileLog.Logf
// (Final, Native, Public)
// Parameters:
// struct FString                 LogString                      (Parm, NeedCtorLink)

void AFileLog::Logf(const struct FString& LogString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.Logf");

	AFileLog_Logf_Params params;
	params.LogString = LogString;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileLog.CloseLog
// (Final, Native, Public)

void AFileLog::CloseLog()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.CloseLog");

	AFileLog_CloseLog_Params params;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FileLog.OpenLog
// (Final, Native, Public)
// Parameters:
// struct FString                 FName                          (Parm, NeedCtorLink)
// struct FString                 FExt                           (OptionalParm, Parm, NeedCtorLink)
// bool                           bOverwrite                     (OptionalParm, Parm)

void AFileLog::OpenLog(const struct FString& FName, const struct FString& FExt, bool bOverwrite)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FileLog.OpenLog");

	AFileLog_OpenLog_Params params;
	params.FName = FName;
	params.FExt = FExt;
	params.bOverwrite = bOverwrite;

	auto flags = fn->FunctionFlags;
	fn->FunctionFlags |= 0x400;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalMessage.GetConsoleMessageType
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// TEnumAsByte<EMessageType>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EMessageType> ALocalMessage::STATIC_GetConsoleMessageType(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetConsoleMessageType");

	ALocalMessage_GetConsoleMessageType_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.IsConsoleMessage
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALocalMessage::STATIC_IsConsoleMessage(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.IsConsoleMessage");

	ALocalMessage_IsConsoleMessage_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetLifeTime
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float ALocalMessage::STATIC_GetLifeTime(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetLifeTime");

	ALocalMessage_GetLifeTime_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetFontSize
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// class APlayerReplicationInfo*  RelatedPRI1                    (Parm)
// class APlayerReplicationInfo*  RelatedPRI2                    (Parm)
// class APlayerReplicationInfo*  LocalPlayer                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ALocalMessage::STATIC_GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetFontSize");

	ALocalMessage_GetFontSize_Params params;
	params.Switch = Switch;
	params.RelatedPRI1 = RelatedPRI1;
	params.RelatedPRI2 = RelatedPRI2;
	params.LocalPlayer = LocalPlayer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetPos
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// TEnumAsByte<EDrawPivot>        OutDrawPivot                   (Parm, OutParm)
// TEnumAsByte<EStackMode>        OutStackMode                   (Parm, OutParm)
// float                          OutPosX                        (Parm, OutParm)
// float                          OutPosY                        (Parm, OutParm)

void ALocalMessage::STATIC_GetPos(int Switch, TEnumAsByte<EDrawPivot>* OutDrawPivot, TEnumAsByte<EStackMode>* OutStackMode, float* OutPosX, float* OutPosY)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetPos");

	ALocalMessage_GetPos_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (OutDrawPivot != nullptr)
		*OutDrawPivot = params.OutDrawPivot;
	if (OutStackMode != nullptr)
		*OutStackMode = params.OutStackMode;
	if (OutPosX != nullptr)
		*OutPosX = params.OutPosX;
	if (OutPosY != nullptr)
		*OutPosY = params.OutPosY;
}


// Function Engine.LocalMessage.GetColor
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ALocalMessage::STATIC_GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetColor");

	ALocalMessage_GetColor_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetConsoleColor
// (Defined, Static, Public)
// Parameters:
// class APlayerReplicationInfo*  RelatedPRI_1                   (Parm)
// struct FColor                  ReturnValue                    (Parm, OutParm, ReturnParm)

struct FColor ALocalMessage::STATIC_GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetConsoleColor");

	ALocalMessage_GetConsoleColor_Params params;
	params.RelatedPRI_1 = RelatedPRI_1;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GotoBTConsole
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALocalMessage::STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GotoBTConsole");

	ALocalMessage_GotoBTConsole_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GotoHud
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ALocalMessage::STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GotoHud");

	ALocalMessage_GotoHud_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.ClientReceiveEx
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// int                            iReserve                       (OptionalParm, Parm)

void ALocalMessage::STATIC_ClientReceiveEx(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, int iReserve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.ClientReceiveEx");

	ALocalMessage_ClientReceiveEx_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;
	params.iReserve = iReserve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalMessage.ClientReceive
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ALocalMessage::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.ClientReceive");

	ALocalMessage_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LocalMessage.AssembleString
// (Defined, Static, Public)
// Parameters:
// class AHUD*                    myHUD                          (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// struct FString                 MessageString                  (OptionalParm, Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ALocalMessage::STATIC_AssembleString(class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, const struct FString& MessageString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.AssembleString");

	ALocalMessage_AssembleString_Params params;
	params.myHUD = myHUD;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.MessageString = MessageString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ALocalMessage::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetString");

	ALocalMessage_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.GetRelatedString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ALocalMessage::STATIC_GetRelatedString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.GetRelatedString");

	ALocalMessage_GetRelatedString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LocalMessage.RenderComplexMessage
// (Static, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          XL                             (Parm, OutParm)
// float                          YL                             (Parm, OutParm)
// struct FString                 MessageString                  (OptionalParm, Parm, NeedCtorLink)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ALocalMessage::STATIC_RenderComplexMessage(class UCanvas* Canvas, const struct FString& MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LocalMessage.RenderComplexMessage");

	ALocalMessage_RenderComplexMessage_Params params;
	params.Canvas = Canvas;
	params.MessageString = MessageString;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (XL != nullptr)
		*XL = params.XL;
	if (YL != nullptr)
		*YL = params.YL;
}


// Function Engine.GameMessage.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AGameMessage::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMessage.ClientReceive");

	AGameMessage_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameMessage.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameMessage::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameMessage.GetString");

	AGameMessage_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VolumeTimer.Timer
// (Defined, Public)

void AVolumeTimer::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.Timer");

	AVolumeTimer_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VolumeTimer.PostBeginPlay
// (Defined, Public)

void AVolumeTimer::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VolumeTimer.PostBeginPlay");

	AVolumeTimer_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.RecoverFromHostChange
// (Defined, Public)

void AwProjectile::RecoverFromHostChange()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.RecoverFromHostChange");

	AwProjectile_RecoverFromHostChange_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.RecoverInstigator
// (Defined, Public)

void AwProjectile::RecoverInstigator()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.RecoverInstigator");

	AwProjectile_RecoverInstigator_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.RumbleRadius
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)

void AwProjectile::RumbleRadius(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.RumbleRadius");

	AwProjectile_RumbleRadius_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.BlowUp
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)

void AwProjectile::BlowUp(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.BlowUp");

	AwProjectile_BlowUp_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.wLoadOut_SetStaticMesh
// (Defined, Simulated, Public)
// Parameters:
// class UStaticMesh*             stMesh                         (Parm)

void AwProjectile::wLoadOut_SetStaticMesh(class UStaticMesh* stMesh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.wLoadOut_SetStaticMesh");

	AwProjectile_wLoadOut_SetStaticMesh_Params params;
	params.stMesh = stMesh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.wLoadOut
// (Defined, Simulated, Public)
// Parameters:
// int                            iID                            (Parm)

void AwProjectile::wLoadOut(int iID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.wLoadOut");

	AwProjectile_wLoadOut_Params params;
	params.iID = iID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.GetExplosionClass
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AwProjectile::GetExplosionClass()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.GetExplosionClass");

	AwProjectile_GetExplosionClass_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wProjectile.GetExplosionClassByMaterial
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AwProjectile::GetExplosionClassByMaterial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.GetExplosionClassByMaterial");

	AwProjectile_GetExplosionClassByMaterial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wProjectile.GetExplosionClassByActor
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class UClass* AwProjectile::GetExplosionClassByActor()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.GetExplosionClassByActor");

	AwProjectile_GetExplosionClassByActor_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wProjectile.DamageLog
// (Defined, Public)
// Parameters:
// class APawn*                   Victim                         (Parm)
// float                          fDam                           (Parm)
// float                          fDist                          (Parm)

void AwProjectile::DamageLog(class APawn* Victim, float fDam, float fDist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.DamageLog");

	AwProjectile_DamageLog_Params params;
	params.Victim = Victim;
	params.fDam = fDam;
	params.fDist = fDist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.SufferEffect
// (Defined, Simulated, Public)
// Parameters:
// class APawn*                   Victim                         (Parm)
// float                          fDist                          (Parm)
// float                          fReduceRate                    (Parm)

void AwProjectile::SufferEffect(class APawn* Victim, float fDist, float fReduceRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.SufferEffect");

	AwProjectile_SufferEffect_Params params;
	params.Victim = Victim;
	params.fDist = fDist;
	params.fReduceRate = fReduceRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.HurtRadiusTutorial
// (Defined, Simulated, Public)
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)

void AwProjectile::HurtRadiusTutorial(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.HurtRadiusTutorial");

	AwProjectile_HurtRadiusTutorial_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.HurtRadius
// (Defined, Simulated, Public)
// Parameters:
// float                          DamageAmount                   (Parm)
// float                          DamageRadius                   (Parm)
// class UClass*                  DamageType                     (Parm)
// float                          Momentum                       (Parm)
// struct FVector                 HitLocation                    (Parm)

void AwProjectile::HurtRadius(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.HurtRadius");

	AwProjectile_HurtRadius_Params params;
	params.DamageAmount = DamageAmount;
	params.DamageRadius = DamageRadius;
	params.DamageType = DamageType;
	params.Momentum = Momentum;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.Tick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AwProjectile::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.Tick");

	AwProjectile_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wProjectile.PostBeginPlay
// (Defined, Simulated, Public)

void AwProjectile::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectile.PostBeginPlay");

	AwProjectile_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Quest.PlaySoundMessageQuest
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void AwMessage_Quest::STATIC_PlaySoundMessageQuest(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Quest.PlaySoundMessageQuest");

	AwMessage_Quest_PlaySoundMessageQuest_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Quest.ClientReceive_Type3
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRDifficult                    (OptionalParm, Parm)
// int                            iRMap                          (OptionalParm, Parm)

void AwMessage_Quest::STATIC_ClientReceive_Type3(class APlayerController* P, int Switch, int iRDifficult, int iRMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Quest.ClientReceive_Type3");

	AwMessage_Quest_ClientReceive_Type3_Params params;
	params.P = P;
	params.Switch = Switch;
	params.iRDifficult = iRDifficult;
	params.iRMap = iRMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Quest.ClientReceive_Type2
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRMode                         (OptionalParm, Parm)
// int                            iRMap                          (OptionalParm, Parm)
// int                            iRMin                          (OptionalParm, Parm)
// int                            iRSec                          (OptionalParm, Parm)

void AwMessage_Quest::STATIC_ClientReceive_Type2(class APlayerController* P, int Switch, int iRMode, int iRMap, int iRMin, int iRSec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Quest.ClientReceive_Type2");

	AwMessage_Quest_ClientReceive_Type2_Params params;
	params.P = P;
	params.Switch = Switch;
	params.iRMode = iRMode;
	params.iRMap = iRMap;
	params.iRMin = iRMin;
	params.iRSec = iRSec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Quest.ClientReceive_Type1
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// int                            iRWeaponType                   (OptionalParm, Parm)
// int                            iRweaponId                     (OptionalParm, Parm)

void AwMessage_Quest::STATIC_ClientReceive_Type1(class APlayerController* P, int Switch, int iRWeaponType, int iRweaponId)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Quest.ClientReceive_Type1");

	AwMessage_Quest_ClientReceive_Type1_Params params;
	params.P = P;
	params.Switch = Switch;
	params.iRWeaponType = iRWeaponType;
	params.iRweaponId = iRweaponId;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Quest.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_Quest::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Quest.ClientReceive");

	AwMessage_Quest_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Quest.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Quest::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Quest.GetString");

	AwMessage_Quest_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetRespawnTypeByIndex
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameSettings::STATIC_GetRespawnTypeByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetRespawnTypeByIndex");

	UwGameSettings_GetRespawnTypeByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetGameModeDispOrder
// (Defined, Static, Public)
// Parameters:
// TArray<int>                    ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<int> UwGameSettings::STATIC_GetGameModeDispOrder()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetGameModeDispOrder");

	UwGameSettings_GetGameModeDispOrder_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.IsAllowedWeaponRest
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameSettings::STATIC_IsAllowedWeaponRest(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.IsAllowedWeaponRest");

	UwGameSettings_IsAllowedWeaponRest_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetWeaponRestrictions
// (Defined, Static, Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> UwGameSettings::STATIC_GetWeaponRestrictions()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetWeaponRestrictions");

	UwGameSettings_GetWeaponRestrictions_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetBotModeTeam
// (Defined, Static, Public)
// Parameters:
// int                            BotModeIdx                     (Parm)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> UwGameSettings::STATIC_GetBotModeTeam(int BotModeIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetBotModeTeam");

	UwGameSettings_GetBotModeTeam_Params params;
	params.BotModeIdx = BotModeIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetBotModeTeamByIndex
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameSettings::STATIC_GetBotModeTeamByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetBotModeTeamByIndex");

	UwGameSettings_GetBotModeTeamByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetWeaponRestrictionByIndex
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameSettings::STATIC_GetWeaponRestrictionByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetWeaponRestrictionByIndex");

	UwGameSettings_GetWeaponRestrictionByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetDefaultScore
// (Defined, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameSettings::STATIC_GetDefaultScore(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetDefaultScore");

	UwGameSettings_GetDefaultScore_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetDefaultScore_ModeNum
// (Defined, Static, Public)
// Parameters:
// int                            ModeNum                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameSettings::STATIC_GetDefaultScore_ModeNum(int ModeNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetDefaultScore_ModeNum");

	UwGameSettings_GetDefaultScore_ModeNum_Params params;
	params.ModeNum = ModeNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetDefaultTimeLimit
// (Defined, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)
// struct FString                 Score                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameSettings::STATIC_GetDefaultTimeLimit(const struct FString& ClassName, const struct FString& Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetDefaultTimeLimit");

	UwGameSettings_GetDefaultTimeLimit_Params params;
	params.ClassName = ClassName;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetDefaultTimeLimit_ModeNum
// (Defined, Static, Public)
// Parameters:
// int                            ModeNum                        (Parm)
// struct FString                 Score                          (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwGameSettings::STATIC_GetDefaultTimeLimit_ModeNum(int ModeNum, const struct FString& Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetDefaultTimeLimit_ModeNum");

	UwGameSettings_GetDefaultTimeLimit_ModeNum_Params params;
	params.ModeNum = ModeNum;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetAllGameModesAtServiceBuild
// (Defined, Static, Public)
// Parameters:
// TArray<struct FGameModeInfo>   ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FGameModeInfo> UwGameSettings::STATIC_GetAllGameModesAtServiceBuild()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetAllGameModesAtServiceBuild");

	UwGameSettings_GetAllGameModesAtServiceBuild_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetAllGameModes
// (Defined, Static, Public)
// Parameters:
// TArray<struct FGameModeInfo>   ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FGameModeInfo> UwGameSettings::STATIC_GetAllGameModes()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetAllGameModes");

	UwGameSettings_GetAllGameModes_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeCount
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeCount");

	UwGameSettings_GetModeCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_Alien
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_Alien()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_Alien");

	UwGameSettings_GetModeIndex_Alien_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_DOA
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_DOA()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_DOA");

	UwGameSettings_GetModeIndex_DOA_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_Defence
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_Defence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_Defence");

	UwGameSettings_GetModeIndex_Defence_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_BotTeamDeathBeginner
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_BotTeamDeathBeginner()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_BotTeamDeathBeginner");

	UwGameSettings_GetModeIndex_BotTeamDeathBeginner_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_COL
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_COL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_COL");

	UwGameSettings_GetModeIndex_COL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_Medal
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_Medal()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_Medal");

	UwGameSettings_GetModeIndex_Medal_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_BotTutorial
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_BotTutorial()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_BotTutorial");

	UwGameSettings_GetModeIndex_BotTutorial_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_BotDeathMatch
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_BotDeathMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_BotDeathMatch");

	UwGameSettings_GetModeIndex_BotDeathMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_BotDomination
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_BotDomination()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_BotDomination");

	UwGameSettings_GetModeIndex_BotDomination_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_BotTeamDeath
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_BotTeamDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_BotTeamDeath");

	UwGameSettings_GetModeIndex_BotTeamDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_Sabotage
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_Sabotage()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_Sabotage");

	UwGameSettings_GetModeIndex_Sabotage_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_Domination
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_Domination()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_Domination");

	UwGameSettings_GetModeIndex_Domination_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_DeathMatch
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_DeathMatch()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_DeathMatch");

	UwGameSettings_GetModeIndex_DeathMatch_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_SD
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_SD()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_SD");

	UwGameSettings_GetModeIndex_SD_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetModeIndex_TeamDeath
// (Defined, Static, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetModeIndex_TeamDeath()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetModeIndex_TeamDeath");

	UwGameSettings_GetModeIndex_TeamDeath_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.IsBotModeIndex
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwGameSettings::STATIC_IsBotModeIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.IsBotModeIndex");

	UwGameSettings_IsBotModeIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetGameModeByIndex
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FGameModeInfo           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FGameModeInfo UwGameSettings::STATIC_GetGameModeByIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetGameModeByIndex");

	UwGameSettings_GetGameModeByIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetRespawnType
// (Defined, Static, Public)
// Parameters:
// class UwMapInfo*               mInfo                          (Parm)
// int                            nSelGameMode                   (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwGameSettings::STATIC_GetRespawnType(class UwMapInfo* mInfo, int nSelGameMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetRespawnType");

	UwGameSettings_GetRespawnType_Params params;
	params.mInfo = mInfo;
	params.nSelGameMode = nSelGameMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGameSettings.GetGameModeByClass
// (Defined, Static, Public)
// Parameters:
// struct FString                 ClassName                      (Parm, NeedCtorLink)
// struct FGameModeInfo           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FGameModeInfo UwGameSettings::STATIC_GetGameModeByClass(const struct FString& ClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameSettings.GetGameModeByClass");

	UwGameSettings_GetGameModeByClass_Params params;
	params.ClassName = ClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game.GetConsoleMessageType
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// TEnumAsByte<EMessageType>      ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EMessageType> AwMessage_Game::STATIC_GetConsoleMessageType(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game.GetConsoleMessageType");

	AwMessage_Game_GetConsoleMessageType_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game.GetSoundPackageByTeam
// (Defined, Static, Public)
// Parameters:
// int                            iTeam                          (Parm)
// int                            iLang                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Game::STATIC_GetSoundPackageByTeam(int iTeam, int iLang)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game.GetSoundPackageByTeam");

	AwMessage_Game_GetSoundPackageByTeam_Params params;
	params.iTeam = iTeam;
	params.iLang = iLang;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game.GotoBTConsole
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game::STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game.GotoBTConsole");

	AwMessage_Game_GotoBTConsole_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game.GotoHud
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game::STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game.GotoHud");

	AwMessage_Game_GotoHud_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game.GetPopMessageStr
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Game::STATIC_GetPopMessageStr(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game.GetPopMessageStr");

	AwMessage_Game_GetPopMessageStr_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_Game::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game.ClientReceive");

	AwMessage_Game_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Game.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Game::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game.GetString");

	AwMessage_Game_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.GetCurMagazineAmmoCount
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwGun::GetCurMagazineAmmoCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.GetCurMagazineAmmoCount");

	AwGun_GetCurMagazineAmmoCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.GetCurTotalAmmoCount
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwGun::GetCurTotalAmmoCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.GetCurTotalAmmoCount");

	AwGun_GetCurTotalAmmoCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.ClientAddMagazine
// (Defined, Net, NetReliable, Simulated, Public)

void AwGun::ClientAddMagazine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ClientAddMagazine");

	AwGun_ClientAddMagazine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ServerAddMagazine
// (Defined, Public)

void AwGun::ServerAddMagazine()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ServerAddMagazine");

	AwGun_ServerAddMagazine_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.Change3DScopeMesh
// (Defined, Simulated, Public)

void AwGun::Change3DScopeMesh()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.Change3DScopeMesh");

	AwGun_Change3DScopeMesh_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CheckPartsSet
// (Defined, Simulated, Public)

void AwGun::CheckPartsSet()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CheckPartsSet");

	AwGun_CheckPartsSet_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetAmmoAmount
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            CurrentAmmo                    (Parm)

void AwGun::SetAmmoAmount(int Mode, int CurrentAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetAmmoAmount");

	AwGun_SetAmmoAmount_Params params;
	params.Mode = Mode;
	params.CurrentAmmo = CurrentAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetAmmoTotal
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            TotalAmmo                      (Parm)

void AwGun::SetAmmoTotal(int Mode, int TotalAmmo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetAmmoTotal");

	AwGun_SetAmmoTotal_Params params;
	params.Mode = Mode;
	params.TotalAmmo = TotalAmmo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ClientWeaponThrown
// (Defined, Net, NetReliable, Simulated, Public)

void AwGun::ClientWeaponThrown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ClientWeaponThrown");

	AwGun_ClientWeaponThrown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcBreathRot
// (Defined, Simulated, Public)

void AwGun::CalcBreathRot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcBreathRot");

	AwGun_CalcBreathRot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcBreathOffset
// (Defined, Simulated, Public)

void AwGun::CalcBreathOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcBreathOffset");

	AwGun_CalcBreathOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetSprint
// (Defined, Simulated, Public)
// Parameters:
// bool                           bValue                         (Parm)

void AwGun::SetSprint(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetSprint");

	AwGun_SetSprint_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.StartFire
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::StartFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.StartFire");

	AwGun_StartFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.ClientStartFire
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Mode                           (Parm)

void AwGun::ClientStartFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ClientStartFire");

	AwGun_ClientStartFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.GetEffectStart
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AwGun::GetEffectStart()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.GetEffectStart");

	AwGun_GetEffectStart_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AwGun::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.DisplayDebug");

	AwGun_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.wGun.SpawnShell
// (Defined, Simulated, Public)

void AwGun::SpawnShell()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SpawnShell");

	AwGun_SpawnShell_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ServerSilencerAttached
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           bEnabled                       (Parm)

void AwGun::ServerSilencerAttached(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ServerSilencerAttached");

	AwGun_ServerSilencerAttached_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SilencerAttached
// (Defined, Simulated, Public)
// Parameters:
// bool                           bEnabled                       (Parm)

void AwGun::SilencerAttached(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SilencerAttached");

	AwGun_SilencerAttached_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ApplyPartsParam
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 strOption                      (Parm, NeedCtorLink)
// struct FString                 strValue                       (Parm, NeedCtorLink)

void AwGun::ApplyPartsParam(const struct FString& strOption, const struct FString& strValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ApplyPartsParam");

	AwGun_ApplyPartsParam_Params params;
	params.strOption = strOption;
	params.strValue = strValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetAddPartsParams
// (Defined, Simulated, Public)

void AwGun::SetAddPartsParams()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetAddPartsParams");

	AwGun_SetAddPartsParams_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ScopeAttached
// (Defined, Simulated, Public)
// Parameters:
// bool                           bEnabled                       (Parm)

void AwGun::ScopeAttached(bool bEnabled)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ScopeAttached");

	AwGun_ScopeAttached_Params params;
	params.bEnabled = bEnabled;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcSwayRot
// (Defined, Simulated, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void AwGun::CalcSwayRot(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcSwayRot");

	AwGun_CalcSwayRot_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcSwayRot_Aim
// (Defined, Simulated, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void AwGun::CalcSwayRot_Aim(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcSwayRot_Aim");

	AwGun_CalcSwayRot_Aim_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcFiringSwayRot
// (Defined, Simulated, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void AwGun::CalcFiringSwayRot(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcFiringSwayRot");

	AwGun_CalcFiringSwayRot_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcFiringSwayRot_Aim
// (Defined, Simulated, Public)
// Parameters:
// float                          fDeltaTime                     (Parm)

void AwGun::CalcFiringSwayRot_Aim(float fDeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcFiringSwayRot_Aim");

	AwGun_CalcFiringSwayRot_Aim_Params params;
	params.fDeltaTime = fDeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcStanceOffset
// (Defined, Simulated, Public)
// Parameters:
// float                          fDelta                         (Parm)

void AwGun::CalcStanceOffset(float fDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcStanceOffset");

	AwGun_CalcStanceOffset_Params params;
	params.fDelta = fDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CalcDestPivot
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwGun::CalcDestPivot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcDestPivot");

	AwGun_CalcDestPivot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.CalcPartsOffset
// (Defined, Simulated, Public)

void AwGun::CalcPartsOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CalcPartsOffset");

	AwGun_CalcPartsOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetAimDiff
// (Defined, Simulated, Public)
// Parameters:
// float                          InX                            (Parm)
// float                          InY                            (Parm)
// float                          InZ                            (Parm)

void AwGun::SetAimDiff(float InX, float InY, float InZ)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetAimDiff");

	AwGun_SetAimDiff_Params params;
	params.InX = InX;
	params.InY = InY;
	params.InZ = InZ;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.HasDotSight
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::HasDotSight()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.HasDotSight");

	AwGun_HasDotSight_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.ApplyOffset
// (Defined, Simulated, Public)

void AwGun::ApplyOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ApplyOffset");

	AwGun_ApplyOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ApplyOffset_Trans
// (Defined, Simulated, Public)

void AwGun::ApplyOffset_Trans()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ApplyOffset_Trans");

	AwGun_ApplyOffset_Trans_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ApplyOffset_Rot
// (Defined, Simulated, Public)

void AwGun::ApplyOffset_Rot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ApplyOffset_Rot");

	AwGun_ApplyOffset_Rot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.IsAiming
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::IsAiming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.IsAiming");

	AwGun_IsAiming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.RenderOverlays
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AwGun::RenderOverlays(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.RenderOverlays");

	AwGun_RenderOverlays_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.RenderScope
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canv                           (Parm)

void AwGun::RenderScope(class UCanvas* Canv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.RenderScope");

	AwGun_RenderScope_Params params;
	params.Canv = Canv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ForceRenderOverlays
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canv                           (Parm)

void AwGun::ForceRenderOverlays(class UCanvas* Canv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ForceRenderOverlays");

	AwGun_ForceRenderOverlays_Params params;
	params.Canv = Canv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.FireOne
// (Defined, Simulated, Public)
// Parameters:
// int                            iFireMode                      (Parm)

void AwGun::FireOne(int iFireMode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.FireOne");

	AwGun_FireOne_Params params;
	params.iFireMode = iFireMode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.PutDown
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::PutDown()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.PutDown");

	AwGun_PutDown_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.BringUp
// (Defined, Simulated, Public)
// Parameters:
// class AwWeapon*                PrevWeapon                     (OptionalParm, Parm)

void AwGun::BringUp(class AwWeapon* PrevWeapon)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.BringUp");

	AwGun_BringUp_Params params;
	params.PrevWeapon = PrevWeapon;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.Destroyed
// (Defined, Simulated, Event, Public)

void AwGun::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.Destroyed");

	AwGun_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetResParams
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  wRes                           (Parm)

void AwGun::SetResParams(class UClass* wRes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetResParams");

	AwGun_SetResParams_Params params;
	params.wRes = wRes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetBaseParams
// (Defined, Simulated, Public)
// Parameters:
// class UwWeaponBaseParams*      wBase                          (Parm)

void AwGun::SetBaseParams(class UwWeaponBaseParams* wBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetBaseParams");

	AwGun_SetBaseParams_Params params;
	params.wBase = wBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.FillToDefaultAmmo
// (Defined, Simulated, Public)

void AwGun::FillToDefaultAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.FillToDefaultAmmo");

	AwGun_FillToDefaultAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.FillToInitialAmmo
// (Defined, Simulated, Public)

void AwGun::FillToInitialAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.FillToInitialAmmo");

	AwGun_FillToInitialAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ReloadComplete
// (Defined, Net, NetReliable, Simulated, Public)

void AwGun::ReloadComplete()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ReloadComplete");

	AwGun_ReloadComplete_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.NotifyReloaded
// (Defined, Simulated, Event, Public)

void AwGun::NotifyReloaded()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.NotifyReloaded");

	AwGun_NotifyReloaded_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.GetAmmoCount
// (Defined, Simulated, Public)
// Parameters:
// float                          MaxAmmoPrimary                 (Parm, OutParm)
// float                          CurAmmoPrimary                 (Parm, OutParm)

void AwGun::GetAmmoCount(float* MaxAmmoPrimary, float* CurAmmoPrimary)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.GetAmmoCount");

	AwGun_GetAmmoCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MaxAmmoPrimary != nullptr)
		*MaxAmmoPrimary = params.MaxAmmoPrimary;
	if (CurAmmoPrimary != nullptr)
		*CurAmmoPrimary = params.CurAmmoPrimary;
}


// Function Engine.wGun.StoreAmmo
// (Defined, Public)

void AwGun::StoreAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.StoreAmmo");

	AwGun_StoreAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ServerReload
// (Defined, Net, NetReliable, Public)

void AwGun::ServerReload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ServerReload");

	AwGun_ServerReload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.Reload
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::Reload()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.Reload");

	AwGun_Reload_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.ProcessMoveAni
// (Defined, Simulated, Public)

void AwGun::ProcessMoveAni()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ProcessMoveAni");

	AwGun_ProcessMoveAni_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.PlayIdle
// (Defined, Simulated, Public)

void AwGun::PlayIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.PlayIdle");

	AwGun_PlayIdle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ForcePlayIdle
// (Defined, Simulated, Public)

void AwGun::ForcePlayIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ForcePlayIdle");

	AwGun_ForcePlayIdle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.AnimEnd
// (Defined, Simulated, Public)
// Parameters:
// int                            Channel                        (Parm)

void AwGun::AnimEnd(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.AnimEnd");

	AwGun_AnimEnd_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.OutOfAmmo
// (Defined, Simulated, Public)

void AwGun::OutOfAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.OutOfAmmo");

	AwGun_OutOfAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.CheckOutOfAmmo
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::CheckOutOfAmmo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CheckOutOfAmmo");

	AwGun_CheckOutOfAmmo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.CheckActioned
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::CheckActioned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CheckActioned");

	AwGun_CheckActioned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.SeverConsumeAmmo
// (Defined, Public)
// Parameters:
// int                            Mode                           (Parm)
// float                          Load                           (Parm)
// bool                           bAmountNeededIsMax             (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::SeverConsumeAmmo(int Mode, float Load, bool bAmountNeededIsMax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SeverConsumeAmmo");

	AwGun_SeverConsumeAmmo_Params params;
	params.Mode = Mode;
	params.Load = Load;
	params.bAmountNeededIsMax = bAmountNeededIsMax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.ClientForceAmmoUpdate
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            NewAmount                      (Parm)

void AwGun::ClientForceAmmoUpdate(int Mode, int NewAmount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ClientForceAmmoUpdate");

	AwGun_ClientForceAmmoUpdate_Params params;
	params.Mode = Mode;
	params.NewAmount = NewAmount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.AmmoAmount
// (Defined, Simulated, Public)
// Parameters:
// int                            Mode                           (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwGun::AmmoAmount(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.AmmoAmount");

	AwGun_AmmoAmount_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.IsReloading
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::IsReloading()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.IsReloading");

	AwGun_IsReloading_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.IsRechambering
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char AwGun::IsRechambering()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.IsRechambering");

	AwGun_IsRechambering_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.ServerAim
// (Defined, Net, NetReliable, Public)
// Parameters:
// bool                           bValue                         (Parm)

void AwGun::ServerAim(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ServerAim");

	AwGun_ServerAim_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.PlayAim
// (Defined, Simulated, Public)
// Parameters:
// bool                           bUpOrDown                      (Parm)

void AwGun::PlayAim(bool bUpOrDown)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.PlayAim");

	AwGun_PlayAim_Params params;
	params.bUpOrDown = bUpOrDown;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ReadyToFire
// (Defined, Simulated, Event, Public)
// Parameters:
// int                            Mode                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::ReadyToFire(int Mode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ReadyToFire");

	AwGun_ReadyToFire_Params params;
	params.Mode = Mode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.CheckAim
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwGun::CheckAim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.CheckAim");

	AwGun_CheckAim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wGun.SetAim
// (Defined, Simulated, Public)
// Parameters:
// bool                           bAim                           (Parm)

void AwGun::SetAim(bool bAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetAim");

	AwGun_SetAim_Params params;
	params.bAim = bAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.WeaponTick
// (Defined, Simulated, Event, Public)
// Parameters:
// float                          dt                             (Parm)

void AwGun::WeaponTick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.WeaponTick");

	AwGun_WeaponTick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ServerMeleeFire
// (Defined, Net, NetReliable, Public)

void AwGun::ServerMeleeFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ServerMeleeFire");

	AwGun_ServerMeleeFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ResetAim
// (Defined, Simulated, Public)

void AwGun::ResetAim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ResetAim");

	AwGun_ResetAim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ClientMeleeFire
// (Defined, Simulated, Public)

void AwGun::ClientMeleeFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ClientMeleeFire");

	AwGun_ClientMeleeFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.ActiveMeleeDelay
// (Defined, Simulated, Public)

void AwGun::ActiveMeleeDelay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.ActiveMeleeDelay");

	AwGun_ActiveMeleeDelay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetActioned
// (Defined, Simulated, Public)

void AwGun::SetActioned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetActioned");

	AwGun_SetActioned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGun.SetUnactioned
// (Defined, Net, NetReliable, Simulated, Public)

void AwGun::SetUnactioned()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGun.SetUnactioned");

	AwGun_SetUnactioned_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.GetEnableSkill
// (Defined, Public)
// Parameters:
// class UwSkill*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UwSkill* UwSkillBase::GetEnableSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.GetEnableSkill");

	UwSkillBase_GetEnableSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkillBase.ClientEnableSkill
// (Defined, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)

void UwSkillBase::ClientEnableSkill(int SkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.ClientEnableSkill");

	UwSkillBase_ClientEnableSkill_Params params;
	params.SkillID = SkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.Client_ChangeAddValue
// (Defined, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)
// int                            addValue                       (Parm)

void UwSkillBase::Client_ChangeAddValue(int SkillID, int addValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.Client_ChangeAddValue");

	UwSkillBase_Client_ChangeAddValue_Params params;
	params.SkillID = SkillID;
	params.addValue = addValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.SetActiveSkill
// (Defined, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)

void UwSkillBase::SetActiveSkill(int SkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.SetActiveSkill");

	UwSkillBase_SetActiveSkill_Params params;
	params.SkillID = SkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.GetTopInfo
// (Defined, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)
// struct FString                 strInfo                        (Parm, OutParm, NeedCtorLink)
// struct FString                 strCountInfo                   (Parm, OutParm, NeedCtorLink)
// int                            FontSize                       (Parm, OutParm)

void UwSkillBase::GetTopInfo(int SkillID, struct FString* strInfo, struct FString* strCountInfo, int* FontSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.GetTopInfo");

	UwSkillBase_GetTopInfo_Params params;
	params.SkillID = SkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (strInfo != nullptr)
		*strInfo = params.strInfo;
	if (strCountInfo != nullptr)
		*strCountInfo = params.strCountInfo;
	if (FontSize != nullptr)
		*FontSize = params.FontSize;
}


// Function Engine.wSkillBase.ChangedQuickSlot
// (Defined, Simulated, Public)

void UwSkillBase::ChangedQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.ChangedQuickSlot");

	UwSkillBase_ChangedQuickSlot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.GetUsed
// (Defined, Simulated, Public)
// Parameters:
// int                            SkillID                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwSkillBase::GetUsed(int SkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.GetUsed");

	UwSkillBase_GetUsed_Params params;
	params.SkillID = SkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkillBase.RemoveSupplyItem
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)

void UwSkillBase::RemoveSupplyItem(TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.RemoveSupplyItem");

	UwSkillBase_RemoveSupplyItem_Params params;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.UseSupplyItem
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)

void UwSkillBase::UseSupplyItem(TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.UseSupplyItem");

	UwSkillBase_UseSupplyItem_Params params;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.AddSupplyItem
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)

void UwSkillBase::AddSupplyItem(TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.AddSupplyItem");

	UwSkillBase_AddSupplyItem_Params params;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.UsedbyWeapon
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)

void UwSkillBase::UsedbyWeapon(int iWeaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.UsedbyWeapon");

	UwSkillBase_UsedbyWeapon_Params params;
	params.iWeaponID = iWeaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.IsDuplicationSkill
// (Defined, Simulated, Public)
// Parameters:
// int                            iSkillID                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwSkillBase::IsDuplicationSkill(int iSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.IsDuplicationSkill");

	UwSkillBase_IsDuplicationSkill_Params params;
	params.iSkillID = iSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkillBase.FindSkillByClassName
// (Defined, Simulated, Public)
// Parameters:
// struct FName                   SkillClassName                 (Parm)
// class UwSkill*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UwSkill* UwSkillBase::FindSkillByClassName(const struct FName& SkillClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.FindSkillByClassName");

	UwSkillBase_FindSkillByClassName_Params params;
	params.SkillClassName = SkillClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkillBase.FindSkill
// (Defined, Simulated, Public)
// Parameters:
// int                            iSkillID                       (Parm)
// class UwSkill*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UwSkill* UwSkillBase::FindSkill(int iSkillID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.FindSkill");

	UwSkillBase_FindSkill_Params params;
	params.iSkillID = iSkillID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkillBase.RemoveSkill
// (Defined, Simulated, Public)
// Parameters:
// int                            iSkillID                       (Parm)
// class UwGameManager*           GM                             (Parm)

void UwSkillBase::RemoveSkill(int iSkillID, class UwGameManager* GM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.RemoveSkill");

	UwSkillBase_RemoveSkill_Params params;
	params.iSkillID = iSkillID;
	params.GM = GM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.AddSkill
// (Defined, Simulated, Public)
// Parameters:
// int                            iSkillID                       (Parm)
// class UwGameManager*           GM                             (Parm)

void UwSkillBase::AddSkill(int iSkillID, class UwGameManager* GM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.AddSkill");

	UwSkillBase_AddSkill_Params params;
	params.iSkillID = iSkillID;
	params.GM = GM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.ResetSkillState
// (Defined, Simulated, Public)

void UwSkillBase::ResetSkillState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.ResetSkillState");

	UwSkillBase_ResetSkillState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.DeadPlayer
// (Defined, Simulated, Public)

void UwSkillBase::DeadPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.DeadPlayer");

	UwSkillBase_DeadPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.UpdateProcess
// (Defined, Simulated, Public)

void UwSkillBase::UpdateProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.UpdateProcess");

	UwSkillBase_UpdateProcess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.ForceResetSkillUpdateCall
// (Defined, Simulated, Public)

void UwSkillBase::ForceResetSkillUpdateCall()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.ForceResetSkillUpdateCall");

	UwSkillBase_ForceResetSkillUpdateCall_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkillBase.PostBeginPlay
// (Defined, Simulated, Public)

void UwSkillBase::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkillBase.PostBeginPlay");

	UwSkillBase_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.Destroyed
// (Defined, Event, Public)

void ABroadcastHandler::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.Destroyed");

	ABroadcastHandler_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AcceptBroadcastVoice
// (Defined, Public)
// Parameters:
// class APlayerController*       Receiver                       (Parm)
// class APlayerReplicationInfo*  SenderPRI                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::AcceptBroadcastVoice(class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AcceptBroadcastVoice");

	ABroadcastHandler_AcceptBroadcastVoice_Params params;
	params.Receiver = Receiver;
	params.SenderPRI = SenderPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.AcceptBroadcastSpeech
// (Defined, Public)
// Parameters:
// class APlayerController*       Receiver                       (Parm)
// class APlayerReplicationInfo*  SenderPRI                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::AcceptBroadcastSpeech(class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AcceptBroadcastSpeech");

	ABroadcastHandler_AcceptBroadcastSpeech_Params params;
	params.Receiver = Receiver;
	params.SenderPRI = SenderPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.AcceptBroadcastLocalized
// (Defined, Public)
// Parameters:
// class APlayerController*       Receiver                       (Parm)
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 obj                            (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::AcceptBroadcastLocalized(class APlayerController* Receiver, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AcceptBroadcastLocalized");

	ABroadcastHandler_AcceptBroadcastLocalized_Params params;
	params.Receiver = Receiver;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.obj = obj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.AcceptBroadcastText
// (Defined, Public)
// Parameters:
// class APlayerController*       Receiver                       (Parm)
// class APlayerReplicationInfo*  SenderPRI                      (Parm)
// struct FString                 Msg                            (Parm, OutParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::AcceptBroadcastText(class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI, const struct FName& Type, struct FString* Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AcceptBroadcastText");

	ABroadcastHandler_AcceptBroadcastText_Params params;
	params.Receiver = Receiver;
	params.SenderPRI = SenderPRI;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Msg != nullptr)
		*Msg = params.Msg;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.RegisterBroadcastHandler
// (Defined, Public)
// Parameters:
// class ABroadcastHandler*       NewBH                          (Parm)

void ABroadcastHandler::RegisterBroadcastHandler(class ABroadcastHandler* NewBH)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.RegisterBroadcastHandler");

	ABroadcastHandler_RegisterBroadcastHandler_Params params;
	params.NewBH = NewBH;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.AllowBroadcastLocalized
// (Defined, Event, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowBroadcastLocalized");

	ABroadcastHandler_AllowBroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastTeam
// (Defined, Public)
// Parameters:
// class AController*             Sender                         (Parm)
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)
// TEnumAsByte<EMessageType>      mType                          (OptionalParm, Parm)

void ABroadcastHandler::BroadcastTeam(class AController* Sender, const struct FString& Msg, const struct FName& Type, TEnumAsByte<EMessageType> mType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastTeam");

	ABroadcastHandler_BroadcastTeam_Params params;
	params.Sender = Sender;
	params.Msg = Msg;
	params.Type = Type;
	params.mType = mType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.Broadcast
// (Defined, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)
// TEnumAsByte<EMessageType>      mType                          (OptionalParm, Parm)

void ABroadcastHandler::Broadcast(class AActor* Sender, const struct FString& Msg, const struct FName& Type, TEnumAsByte<EMessageType> mType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.Broadcast");

	ABroadcastHandler_Broadcast_Params params;
	params.Sender = Sender;
	params.Msg = Msg;
	params.Type = Type;
	params.mType = mType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastLocalized
// (Defined, Public)
// Parameters:
// class AActor*                  Sender                         (Parm)
// class APlayerController*       Receiver                       (Parm)
// class UClass*                  Message                        (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void ABroadcastHandler::BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastLocalized");

	ABroadcastHandler_BroadcastLocalized_Params params;
	params.Sender = Sender;
	params.Receiver = Receiver;
	params.Message = Message;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.BroadcastText
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  SenderPRI                      (Parm)
// class APlayerController*       Receiver                       (Parm)
// struct FString                 Msg                            (Parm, CoerceParm, NeedCtorLink)
// struct FName                   Type                           (OptionalParm, Parm)

void ABroadcastHandler::BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const struct FString& Msg, const struct FName& Type)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.BroadcastText");

	ABroadcastHandler_BroadcastText_Params params;
	params.SenderPRI = SenderPRI;
	params.Receiver = Receiver;
	params.Msg = Msg;
	params.Type = Type;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.HandlerAllowsBroadcast
// (Defined, Public)
// Parameters:
// class AActor*                  broadcaster                    (Parm)
// int                            SentTextNum                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::HandlerAllowsBroadcast(class AActor* broadcaster, int SentTextNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.HandlerAllowsBroadcast");

	ABroadcastHandler_HandlerAllowsBroadcast_Params params;
	params.broadcaster = broadcaster;
	params.SentTextNum = SentTextNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.AllowsBroadcast
// (Defined, Public)
// Parameters:
// class AActor*                  broadcaster                    (Parm)
// int                            Len                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool ABroadcastHandler::AllowsBroadcast(class AActor* broadcaster, int Len)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.AllowsBroadcast");

	ABroadcastHandler_AllowsBroadcast_Params params;
	params.broadcaster = broadcaster;
	params.Len = Len;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.GetDescriptionText
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ABroadcastHandler::STATIC_GetDescriptionText(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.GetDescriptionText");

	ABroadcastHandler_GetDescriptionText_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.BroadcastHandler.FillPlayInfo
// (Defined, Static, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void ABroadcastHandler::STATIC_FillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.FillPlayInfo");

	ABroadcastHandler_FillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BroadcastHandler.UpdateSentText
// (Defined, Public)

void ABroadcastHandler::UpdateSentText()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BroadcastHandler.UpdateSentText");

	ABroadcastHandler_UpdateSentText_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingReplicationInfoBase.MatchSetupEnabled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVotingReplicationInfoBase::MatchSetupEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.MatchSetupEnabled");

	AVotingReplicationInfoBase_MatchSetupEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingReplicationInfoBase.KickVoteEnabled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVotingReplicationInfoBase::KickVoteEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.KickVoteEnabled");

	AVotingReplicationInfoBase_KickVoteEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingReplicationInfoBase.MapVoteEnabled
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVotingReplicationInfoBase::MapVoteEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.MapVoteEnabled");

	AVotingReplicationInfoBase_MapVoteEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingReplicationInfoBase.MatchSetupLocked
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVotingReplicationInfoBase::MatchSetupLocked()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.MatchSetupLocked");

	AVotingReplicationInfoBase_MatchSetupLocked_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingReplicationInfoBase.SendResponse
// (Defined, Net, NetReliable, Simulated, Public)
// Parameters:
// struct FString                 Response                       (Parm, NeedCtorLink)

void AVotingReplicationInfoBase::SendResponse(const struct FString& Response)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.SendResponse");

	AVotingReplicationInfoBase_SendResponse_Params params;
	params.Response = Response;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingReplicationInfoBase.SendCommand
// (Defined, Net, NetReliable, Public)
// Parameters:
// struct FString                 Cmd                            (Parm, NeedCtorLink)

void AVotingReplicationInfoBase::SendCommand(const struct FString& Cmd)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.SendCommand");

	AVotingReplicationInfoBase_SendCommand_Params params;
	params.Cmd = Cmd;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingReplicationInfoBase.ProcessResponse
// (Public, Delegate)
// Parameters:
// struct FString                 Response                       (Parm, NeedCtorLink)

void AVotingReplicationInfoBase::ProcessResponse(const struct FString& Response)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.ProcessResponse");

	AVotingReplicationInfoBase_ProcessResponse_Params params;
	params.Response = Response;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingReplicationInfoBase.ProcessCommand
// (Public, Delegate)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)

void AVotingReplicationInfoBase::ProcessCommand(const struct FString& Command)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingReplicationInfoBase.ProcessCommand");

	AVotingReplicationInfoBase_ProcessCommand_Params params;
	params.Command = Command;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.NextStats
// (Public)

void AScoreBoard::NextStats()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.NextStats");

	AScoreBoard_NextStats_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.SortPRIArray
// (Defined, Simulated, Public)

void AScoreBoard::SortPRIArray()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.SortPRIArray");

	AScoreBoard_SortPRIArray_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.InOrder
// (Defined, Simulated, Public)
// Parameters:
// class APlayerReplicationInfo*  P1                             (Parm)
// class APlayerReplicationInfo*  P2                             (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AScoreBoard::InOrder(class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.InOrder");

	AScoreBoard_InOrder_Params params;
	params.P1 = P1;
	params.P2 = P2;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.UpdateScoreBoard
// (Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AScoreBoard::UpdateScoreBoard(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.UpdateScoreBoard");

	AScoreBoard_UpdateScoreBoard_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.FormatTime
// (Defined, Simulated, Public)
// Parameters:
// int                            Seconds                        (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AScoreBoard::FormatTime(int Seconds)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.FormatTime");

	AScoreBoard_FormatTime_Params params;
	params.Seconds = Seconds;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.UpdateGRI
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AScoreBoard::UpdateGRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.UpdateGRI");

	AScoreBoard_UpdateGRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.DrawMiniMap
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AScoreBoard::DrawMiniMap(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.DrawMiniMap");

	AScoreBoard_DrawMiniMap_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.DrawGMUserBoard
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AScoreBoard::DrawGMUserBoard(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.DrawGMUserBoard");

	AScoreBoard_DrawGMUserBoard_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.DrawScoreboard
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AScoreBoard::DrawScoreboard(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.DrawScoreboard");

	AScoreBoard_DrawScoreboard_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.Init
// (Simulated, Public)

void AScoreBoard::Init()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.Init");

	AScoreBoard_Init_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.InitTitle
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AScoreBoard::InitTitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.InitTitle");

	AScoreBoard_InitTitle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.InitGRI
// (Defined, Simulated, Public)

void AScoreBoard::InitGRI()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.InitGRI");

	AScoreBoard_InitGRI_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ScoreBoard.GetSmallFontFor
// (Defined, Public)
// Parameters:
// int                            ScreenWidth                    (Parm)
// int                            offset                         (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AScoreBoard::GetSmallFontFor(int ScreenWidth, int offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.GetSmallFontFor");

	AScoreBoard_GetSmallFontFor_Params params;
	params.ScreenWidth = ScreenWidth;
	params.offset = offset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.HaveHalfFont
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// int                            offset                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AScoreBoard::HaveHalfFont(class UCanvas* Canvas, int offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.HaveHalfFont");

	AScoreBoard_HaveHalfFont_Params params;
	params.Canvas = Canvas;
	params.offset = offset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.GetSmallerFontFor
// (Defined, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// int                            offset                         (Parm)
// class UFont*                   ReturnValue                    (Parm, OutParm, ReturnParm)

class UFont* AScoreBoard::GetSmallerFontFor(class UCanvas* Canvas, int offset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.GetSmallerFontFor");

	AScoreBoard_GetSmallerFontFor_Params params;
	params.Canvas = Canvas;
	params.offset = offset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ScoreBoard.PostBeginPlay
// (Defined, Simulated, Public)

void AScoreBoard::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ScoreBoard.PostBeginPlay");

	AScoreBoard_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.CheckID
// (Defined, Public)
// Parameters:
// struct FString                 CDHash                         (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AAccessControl::CheckID(const struct FString& CDHash)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CheckID");

	AAccessControl_CheckID_Params params;
	params.CDHash = CDHash;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.GetDescriptionText
// (Defined, Event, Static, Public)
// Parameters:
// struct FString                 PropName                       (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AAccessControl::STATIC_GetDescriptionText(const struct FString& PropName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetDescriptionText");

	AAccessControl_GetDescriptionText_Params params;
	params.PropName = PropName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.FillPlayInfo
// (Defined, Static, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void AAccessControl::STATIC_FillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.FillPlayInfo");

	AAccessControl_FillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AllowPriv
// (Defined, Public)
// Parameters:
// struct FString                 priv                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::AllowPriv(const struct FString& priv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AllowPriv");

	AAccessControl_AllowPriv_Params params;
	params.priv = priv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.CanPerform
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FString                 Action                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::CanPerform(class APlayerController* P, const struct FString& Action)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CanPerform");

	AAccessControl_CanPerform_Params params;
	params.P = P;
	params.Action = Action;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.CheckIPPolicy
// (Defined, Public)
// Parameters:
// struct FString                 Address                        (Parm, NeedCtorLink)
// bool                           bSilent                        (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AAccessControl::CheckIPPolicy(const struct FString& Address, bool bSilent)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CheckIPPolicy");

	AAccessControl_CheckIPPolicy_Params params;
	params.Address = Address;
	params.bSilent = bSilent;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.PreLogin
// (Defined, Event, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// struct FString                 Address                        (Parm, NeedCtorLink)
// struct FString                 PlayerID                       (Parm, NeedCtorLink)
// struct FString                 Error                          (Parm, OutParm, NeedCtorLink)
// struct FString                 FailCode                       (Parm, OutParm, NeedCtorLink)
// bool                           bSpectator                     (Parm)

void AAccessControl::PreLogin(const struct FString& Options, const struct FString& Address, const struct FString& PlayerID, bool bSpectator, struct FString* Error, struct FString* FailCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PreLogin");

	AAccessControl_PreLogin_Params params;
	params.Options = Options;
	params.Address = Address;
	params.PlayerID = PlayerID;
	params.bSpectator = bSpectator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Error != nullptr)
		*Error = params.Error;
	if (FailCode != nullptr)
		*FailCode = params.FailCode;
}


// Function Engine.AccessControl.GetUser
// (Defined, Public)
// Parameters:
// struct FString                 uname                          (Parm, NeedCtorLink)
// class UwAdminUser*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminUser* AAccessControl::GetUser(const struct FString& uname)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetUser");

	AAccessControl_GetUser_Params params;
	params.uname = uname;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.GetLoggedAdmin
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// class UwAdminUser*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminUser* AAccessControl::GetLoggedAdmin(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetLoggedAdmin");

	AAccessControl_GetLoggedAdmin_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.ValidLogin
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::ValidLogin(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.ValidLogin");

	AAccessControl_ValidLogin_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.CheckOptionsAdmin
// (Defined, Public)
// Parameters:
// struct FString                 Options                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::CheckOptionsAdmin(const struct FString& Options)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.CheckOptionsAdmin");

	AAccessControl_CheckOptionsAdmin_Params params;
	params.Options = Options;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickBanPlayer
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::KickBanPlayer(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickBanPlayer");

	AAccessControl_KickBanPlayer_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.BanPlayer
// (Defined, Public)
// Parameters:
// class APlayerController*       C                              (Parm)
// bool                           bSession                       (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::BanPlayer(class APlayerController* C, bool bSession)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.BanPlayer");

	AAccessControl_BanPlayer_Params params;
	params.C = C;
	params.bSession = bSession;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickPlayer
// (Defined, Public)
// Parameters:
// class APlayerController*       C                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::KickPlayer(class APlayerController* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickPlayer");

	AAccessControl_KickPlayer_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.KickBan
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAccessControl::KickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.KickBan");

	AAccessControl_KickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.SessionKickBan
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAccessControl::SessionKickBan(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SessionKickBan");

	AAccessControl_SessionKickBan_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.Kick
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)

void AAccessControl::Kick(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.Kick");

	AAccessControl_Kick_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.GetAdminName
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AAccessControl::GetAdminName(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetAdminName");

	AAccessControl_GetAdminName_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.GetAdmin
// (Defined, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// class UwAdminUser*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminUser* AAccessControl::GetAdmin(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.GetAdmin");

	AAccessControl_GetAdmin_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.RequiresPassword
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::RequiresPassword()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.RequiresPassword");

	AAccessControl_RequiresPassword_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.SetGamePassword
// (Defined, Public)
// Parameters:
// struct FString                 P                              (Parm, NeedCtorLink)

void AAccessControl::SetGamePassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetGamePassword");

	AAccessControl_SetGamePassword_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.SetAdminPassword
// (Defined, Public)
// Parameters:
// struct FString                 P                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::SetAdminPassword(const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetAdminPassword");

	AAccessControl_SetAdminPassword_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.SetAdminFromURL
// (Defined, Public)
// Parameters:
// struct FString                 N                              (Parm, NeedCtorLink)
// struct FString                 P                              (Parm, NeedCtorLink)

void AAccessControl::SetAdminFromURL(const struct FString& N, const struct FString& P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SetAdminFromURL");

	AAccessControl_SetAdminFromURL_Params params;
	params.N = N;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.IsAdmin
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::IsAdmin(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.IsAdmin");

	AAccessControl_IsAdmin_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminExited
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)

void AAccessControl::AdminExited(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminExited");

	AAccessControl_AdminExited_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminEntered
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FString                 UserName                       (Parm, NeedCtorLink)

void AAccessControl::AdminEntered(class APlayerController* P, const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminEntered");

	AAccessControl_AdminEntered_Params params;
	params.P = P;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.AdminLogout
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::AdminLogout(class APlayerController* P)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogout");

	AAccessControl_AdminLogout_Params params;
	params.P = P;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.AdminLogin
// (Defined, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAccessControl::AdminLogin(class APlayerController* P, const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.AdminLogin");

	AAccessControl_AdminLogin_Params params;
	params.P = P;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AccessControl.SaveAdmins
// (Defined, Public)

void AAccessControl::SaveAdmins()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.SaveAdmins");

	AAccessControl_SaveAdmins_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.InitPrivs
// (Public)

void AAccessControl::InitPrivs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.InitPrivs");

	AAccessControl_InitPrivs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AccessControl.PreBeginPlay
// (Defined, Event, Public)

void AAccessControl::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AccessControl.PreBeginPlay");

	AAccessControl_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.XBoxPlayerInput.InvertLook
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UXBoxPlayerInput::InvertLook()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.XBoxPlayerInput.InvertLook");

	UXBoxPlayerInput_InvertLook_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.XBoxPlayerInput.FilterOutput
// (Defined, Public)
// Parameters:
// float                          filter                         (Parm, OutParm)
// float                          output                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UXBoxPlayerInput::FilterOutput(float output, float* filter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.XBoxPlayerInput.FilterOutput");

	UXBoxPlayerInput_FilterOutput_Params params;
	params.output = output;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (filter != nullptr)
		*filter = params.filter;

	return params.ReturnValue;
}


// Function Engine.XBoxPlayerInput.sign
// (Defined, Public)
// Parameters:
// float                          in                             (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UXBoxPlayerInput::sign(float in)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.XBoxPlayerInput.sign");

	UXBoxPlayerInput_sign_Params params;
	params.in = in;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.XBoxPlayerInput.GetComponentAccel
// (Defined, Public)
// Parameters:
// float                          Input                          (Parm)
// struct FVector                 Dir                            (Parm)
// float                          dt                             (Parm)
// float                          filter                         (Parm, OutParm)
// bool                           blog                           (OptionalParm, Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UXBoxPlayerInput::GetComponentAccel(float Input, const struct FVector& Dir, float dt, bool blog, float* filter)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.XBoxPlayerInput.GetComponentAccel");

	UXBoxPlayerInput_GetComponentAccel_Params params;
	params.Input = Input;
	params.Dir = Dir;
	params.dt = dt;
	params.blog = blog;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (filter != nullptr)
		*filter = params.filter;

	return params.ReturnValue;
}


// Function Engine.XBoxPlayerInput.VelToAccel
// (Defined, Public)
// Parameters:
// float                          dt                             (Parm)

void UXBoxPlayerInput::VelToAccel(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.XBoxPlayerInput.VelToAccel");

	UXBoxPlayerInput_VelToAccel_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.XBoxPlayerInput.Remap
// (Defined, Static, Public)
// Parameters:
// float                          in                             (Parm)
// float                          Scale                          (Parm)
// float                          Exp                            (Parm)
// float                          ratemax                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UXBoxPlayerInput::STATIC_Remap(float in, float Scale, float Exp, float ratemax)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.XBoxPlayerInput.Remap");

	UXBoxPlayerInput_Remap_Params params;
	params.in = in;
	params.Scale = Scale;
	params.Exp = Exp;
	params.ratemax = ratemax;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.XBoxPlayerInput.PlayerInput
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void UXBoxPlayerInput::PlayerInput(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.XBoxPlayerInput.PlayerInput");

	UXBoxPlayerInput_PlayerInput_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageGetter.GetUserSkillState
// (Defined, Public)
// Parameters:
// class AwGameStateStorageSender* GSSS                           (Parm)
// class APlayerController*       PC                             (Parm)

void UwGameStateStorageGetter::GetUserSkillState(class AwGameStateStorageSender* GSSS, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageGetter.GetUserSkillState");

	UwGameStateStorageGetter_GetUserSkillState_Params params;
	params.GSSS = GSSS;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageGetter.GetUserWeaponState
// (Defined, Public)
// Parameters:
// class AwGameStateStorageSender* GSSS                           (Parm)
// class APlayerController*       PC                             (Parm)

void UwGameStateStorageGetter::GetUserWeaponState(class AwGameStateStorageSender* GSSS, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageGetter.GetUserWeaponState");

	UwGameStateStorageGetter_GetUserWeaponState_Params params;
	params.GSSS = GSSS;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageGetter.GetUserVehicle
// (Defined, Static, Public)
// Parameters:
// class AwGameStateStorageSender* GSSS                           (Parm)
// class APlayerController*       PC                             (Parm)

void UwGameStateStorageGetter::STATIC_GetUserVehicle(class AwGameStateStorageSender* GSSS, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageGetter.GetUserVehicle");

	UwGameStateStorageGetter_GetUserVehicle_Params params;
	params.GSSS = GSSS;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageGetter.GetUserScoreState
// (Defined, Public)
// Parameters:
// class AwGameStateStorageSender* GSSS                           (Parm)
// class APlayerController*       PC                             (Parm)

void UwGameStateStorageGetter::GetUserScoreState(class AwGameStateStorageSender* GSSS, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageGetter.GetUserScoreState");

	UwGameStateStorageGetter_GetUserScoreState_Params params;
	params.GSSS = GSSS;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageGetter.GetUserState
// (Defined, Public)
// Parameters:
// class AwGameStateStorageSender* GSSS                           (Parm)
// class APlayerController*       PC                             (Parm)

void UwGameStateStorageGetter::GetUserState(class AwGameStateStorageSender* GSSS, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageGetter.GetUserState");

	UwGameStateStorageGetter_GetUserState_Params params;
	params.GSSS = GSSS;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageGetter.GetUserSupplyState
// (Defined, Public)
// Parameters:
// class AwGameStateStorageSender* GSSS                           (Parm)
// class APlayerController*       PC                             (Parm)

void UwGameStateStorageGetter::GetUserSupplyState(class AwGameStateStorageSender* GSSS, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageGetter.GetUserSupplyState");

	UwGameStateStorageGetter_GetUserSupplyState_Params params;
	params.GSSS = GSSS;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wGameStateStorageGetter.GetUserQSlotState
// (Defined, Public)
// Parameters:
// class AwGameStateStorageSender* GSSS                           (Parm)
// class APlayerController*       PC                             (Parm)

void UwGameStateStorageGetter::GetUserQSlotState(class AwGameStateStorageSender* GSSS, class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wGameStateStorageGetter.GetUserQSlotState");

	UwGameStateStorageGetter_GetUserQSlotState_Params params;
	params.GSSS = GSSS;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Game_ImpSystem.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_Game_ImpSystem::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_ImpSystem.ClientReceive");

	AwMessage_Game_ImpSystem_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Game_ImpSystem.IsMessageSystem
// (Defined, Static, Public)
// Parameters:
// int                            iCode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_ImpSystem::STATIC_IsMessageSystem(int iCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_ImpSystem.IsMessageSystem");

	AwMessage_Game_ImpSystem_IsMessageSystem_Params params;
	params.iCode = iCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_ImpSystem.IsMessageMode
// (Defined, Static, Public)
// Parameters:
// int                            iCode                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_ImpSystem::STATIC_IsMessageMode(int iCode)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_ImpSystem.IsMessageMode");

	AwMessage_Game_ImpSystem_IsMessageMode_Params params;
	params.iCode = iCode;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_ImpSystem.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Game_ImpSystem::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_ImpSystem.GetString");

	AwMessage_Game_ImpSystem_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_ImpSystem.GotoBTConsole
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_ImpSystem::STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_ImpSystem.GotoBTConsole");

	AwMessage_Game_ImpSystem_GotoBTConsole_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_ImpSystem.GotoHud
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_ImpSystem::STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_ImpSystem.GotoHud");

	AwMessage_Game_ImpSystem_GotoHud_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_ImpSystem.GetLifeTime
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwMessage_Game_ImpSystem::STATIC_GetLifeTime(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_ImpSystem.GetLifeTime");

	AwMessage_Game_ImpSystem_GetLifeTime_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerQueueManager.ProcessQueueItem
// (Defined, Public)
// Parameters:
// struct FQueueItem              Item                           (Parm, NeedCtorLink)

void AAnnouncerQueueManager::ProcessQueueItem(const struct FQueueItem& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.ProcessQueueItem");

	AAnnouncerQueueManager_ProcessQueueItem_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnnouncerQueueManager.Timer
// (Defined, Public)

void AAnnouncerQueueManager::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.Timer");

	AAnnouncerQueueManager_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnnouncerQueueManager.GetQueueWaitTime
// (Final, Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AAnnouncerQueueManager::GetQueueWaitTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.GetQueueWaitTime");

	AAnnouncerQueueManager_GetQueueWaitTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerQueueManager.IsQueueingSwitch
// (Final, Defined, Public)
// Parameters:
// unsigned char                  Switch                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAnnouncerQueueManager::IsQueueingSwitch(unsigned char Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.IsQueueingSwitch");

	AAnnouncerQueueManager_IsQueueingSwitch_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerQueueManager.IsQueueing
// (Final, Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAnnouncerQueueManager::IsQueueing()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.IsQueueing");

	AAnnouncerQueueManager_IsQueueing_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerQueueManager.RemoveSound
// (Final, Defined, Public)
// Parameters:
// struct FString                 SoundName                      (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAnnouncerQueueManager::RemoveSound(const struct FString& SoundName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.RemoveSound");

	AAnnouncerQueueManager_RemoveSound_Params params;
	params.SoundName = SoundName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerQueueManager.CanFindSoundInQueue
// (Final, Defined, Public)
// Parameters:
// struct FString                 DaSoundName                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAnnouncerQueueManager::CanFindSoundInQueue(const struct FString& DaSoundName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.CanFindSoundInQueue");

	AAnnouncerQueueManager_CanFindSoundInQueue_Params params;
	params.DaSoundName = DaSoundName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerQueueManager.AddItemToQueue
// (Defined, Public)
// Parameters:
// struct FString                 ASound                         (Parm, NeedCtorLink)
// TEnumAsByte<EAPriority>        Priority                       (OptionalParm, Parm)
// unsigned char                  Switch                         (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AAnnouncerQueueManager::AddItemToQueue(const struct FString& ASound, TEnumAsByte<EAPriority> Priority, unsigned char Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.AddItemToQueue");

	AAnnouncerQueueManager_AddItemToQueue_Params params;
	params.ASound = ASound;
	params.Priority = Priority;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.AnnouncerQueueManager.InitFor
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)

void AAnnouncerQueueManager::InitFor(class APlayerController* PC)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.InitFor");

	AAnnouncerQueueManager_InitFor_Params params;
	params.PC = PC;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.AnnouncerQueueManager.PostBeginPlay
// (Defined, Simulated, Public)

void AAnnouncerQueueManager::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.AnnouncerQueueManager.PostBeginPlay");

	AAnnouncerQueueManager_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Game_Alien.GetLifeTime
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwMessage_Game_Alien::STATIC_GetLifeTime(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Alien.GetLifeTime");

	AwMessage_Game_Alien_GetLifeTime_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_Alien.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Game_Alien::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Alien.GetString");

	AwMessage_Game_Alien_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.RunTestsBase.RunTestClass
// (Defined, Public)
// Parameters:
// class UClass*                  TestClass                      (Parm)
// int                            passes                         (Parm, OutParm)
// int                            fails                          (Parm, OutParm)

void ARunTestsBase::RunTestClass(class UClass* TestClass, int* passes, int* fails)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RunTestsBase.RunTestClass");

	ARunTestsBase_RunTestClass_Params params;
	params.TestClass = TestClass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (passes != nullptr)
		*passes = params.passes;
	if (fails != nullptr)
		*fails = params.fails;
}


// Function Engine.RunTestsBase.Run
// (Defined, Public)

void ARunTestsBase::Run()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.RunTestsBase.Run");

	ARunTestsBase_Run_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ChatRoomMessage.IsConsoleMessage
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AChatRoomMessage::STATIC_IsConsoleMessage(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ChatRoomMessage.IsConsoleMessage");

	AChatRoomMessage_IsConsoleMessage_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ChatRoomMessage.AssembleMessage
// (Defined, Static, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 ChannelTitle                   (Parm, NeedCtorLink)
// class APlayerReplicationInfo*  RelatedPRI                     (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AChatRoomMessage::STATIC_AssembleMessage(int Index, const struct FString& ChannelTitle, class APlayerReplicationInfo* RelatedPRI)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ChatRoomMessage.AssembleMessage");

	AChatRoomMessage_AssembleMessage_Params params;
	params.Index = Index;
	params.ChannelTitle = ChannelTitle;
	params.RelatedPRI = RelatedPRI;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.GetMapInfo
// (Defined, Public)
// Parameters:
// struct FString                 dfile                          (Parm, NeedCtorLink)
// class UwMapInfo*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UwMapInfo* UwMapSettings::GetMapInfo(const struct FString& dfile)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.GetMapInfo");

	UwMapSettings_GetMapInfo_Params params;
	params.dfile = dfile;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.GetMapInfoByID
// (Defined, Public)
// Parameters:
// int                            MapID                          (Parm)
// class UwMapInfo*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UwMapInfo* UwMapSettings::GetMapInfoByID(int MapID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.GetMapInfoByID");

	UwMapSettings_GetMapInfoByID_Params params;
	params.MapID = MapID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.GetWeaponRestriction
// (Defined, Public)
// Parameters:
// int                            MapID                          (Parm)
// int                            weaponID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMapSettings::GetWeaponRestriction(int MapID, int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.GetWeaponRestriction");

	UwMapSettings_GetWeaponRestriction_Params params;
	params.MapID = MapID;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.GetMaxUserCount
// (Defined, Public)
// Parameters:
// int                            MapID                          (Parm)
// int                            GameModeIdx                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMapSettings::GetMaxUserCount(int MapID, int GameModeIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.GetMaxUserCount");

	UwMapSettings_GetMaxUserCount_Params params;
	params.MapID = MapID;
	params.GameModeIdx = GameModeIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.IsGameModeEnable
// (Defined, Public)
// Parameters:
// int                            MapID                          (Parm)
// int                            GameModeIdx                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMapSettings::IsGameModeEnable(int MapID, int GameModeIdx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.IsGameModeEnable");

	UwMapSettings_IsGameModeEnable_Params params;
	params.MapID = MapID;
	params.GameModeIdx = GameModeIdx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.GetMapInfoByMapNum
// (Defined, Public)
// Parameters:
// TArray<class UwMapInfo*>       infos                          (Parm, NeedCtorLink)
// int                            MapNum                         (Parm)
// class UwMapInfo*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UwMapInfo* UwMapSettings::GetMapInfoByMapNum(TArray<class UwMapInfo*> infos, int MapNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.GetMapInfoByMapNum");

	UwMapSettings_GetMapInfoByMapNum_Params params;
	params.infos = infos;
	params.MapNum = MapNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.GetAllMapInfos
// (Defined, Public)
// Parameters:
// bool                           bServiceBuild                  (OptionalParm, Parm)
// TArray<class UwMapInfo*>       ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class UwMapInfo*> UwMapSettings::GetAllMapInfos(bool bServiceBuild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.GetAllMapInfos");

	UwMapSettings_GetAllMapInfos_Params params;
	params.bServiceBuild = bServiceBuild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.IsValidMap_THAILAND
// (Defined, Public)
// Parameters:
// struct FString                 LocStr                         (Parm, NeedCtorLink)
// bool                           bServiceBuild                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMapSettings::IsValidMap_THAILAND(const struct FString& LocStr, bool bServiceBuild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.IsValidMap_THAILAND");

	UwMapSettings_IsValidMap_THAILAND_Params params;
	params.LocStr = LocStr;
	params.bServiceBuild = bServiceBuild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.IsValidMap_ID
// (Defined, Public)
// Parameters:
// struct FString                 LocStr                         (Parm, NeedCtorLink)
// bool                           bServiceBuild                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMapSettings::IsValidMap_ID(const struct FString& LocStr, bool bServiceBuild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.IsValidMap_ID");

	UwMapSettings_IsValidMap_ID_Params params;
	params.LocStr = LocStr;
	params.bServiceBuild = bServiceBuild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.IsValidMap_GP
// (Defined, Public)
// Parameters:
// struct FString                 LocStr                         (Parm, NeedCtorLink)
// bool                           bServiceBuild                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMapSettings::IsValidMap_GP(const struct FString& LocStr, bool bServiceBuild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.IsValidMap_GP");

	UwMapSettings_IsValidMap_GP_Params params;
	params.LocStr = LocStr;
	params.bServiceBuild = bServiceBuild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.IsValidMap_CHINA
// (Defined, Public)
// Parameters:
// struct FString                 LocStr                         (Parm, NeedCtorLink)
// bool                           bServiceBuild                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMapSettings::IsValidMap_CHINA(const struct FString& LocStr, bool bServiceBuild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.IsValidMap_CHINA");

	UwMapSettings_IsValidMap_CHINA_Params params;
	params.LocStr = LocStr;
	params.bServiceBuild = bServiceBuild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings._isValidMap
// (Defined, Private)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// bool                           bServiceBuild                  (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMapSettings::_isValidMap(const struct FString& fileName, bool bServiceBuild)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings._isValidMap");

	UwMapSettings__isValidMap_Params params;
	params.fileName = fileName;
	params.bServiceBuild = bServiceBuild;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMapSettings.Initialize
// (Defined, Public)
// Parameters:
// class UwMatchMaker*            MM                             (Parm)

void UwMapSettings::Initialize(class UwMatchMaker* MM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMapSettings.Initialize");

	UwMapSettings_Initialize_Params params;
	params.MM = MM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wItemBoxHK.IsShowInventory
// (Defined, Public)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwItemBoxHK::IsShowInventory(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.IsShowInventory");

	UwItemBoxHK_IsShowInventory_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.IsShowStore
// (Defined, Public)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwItemBoxHK::IsShowStore(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.IsShowStore");

	UwItemBoxHK_IsShowStore_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.IsCashItem
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwItemBoxHK::IsCashItem()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.IsCashItem");

	UwItemBoxHK_IsCashItem_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetPartSkillName
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwItemBoxHK::GetPartSkillName(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetPartSkillName");

	UwItemBoxHK_GetPartSkillName_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetUIDamage
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwItemBoxHK::GetUIDamage(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetUIDamage");

	UwItemBoxHK_GetUIDamage_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetUISpread
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwItemBoxHK::GetUISpread(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetUISpread");

	UwItemBoxHK_GetUISpread_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetUIViewKick
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwItemBoxHK::GetUIViewKick(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetUIViewKick");

	UwItemBoxHK_GetUIViewKick_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetUIRateOfFire
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwItemBoxHK::GetUIRateOfFire(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetUIRateOfFire");

	UwItemBoxHK_GetUIRateOfFire_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetUIMove
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwItemBoxHK::GetUIMove(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetUIMove");

	UwItemBoxHK_GetUIMove_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetUIRange
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwItemBoxHK::GetUIRange(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetUIRange");

	UwItemBoxHK_GetUIRange_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.GetPartName
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UwItemBoxHK::GetPartName(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.GetPartName");

	UwItemBoxHK_GetPartName_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.FindPartGroupIndex
// (Defined, Public)
// Parameters:
// int                            PartID                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwItemBoxHK::FindPartGroupIndex(int PartID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.FindPartGroupIndex");

	UwItemBoxHK_FindPartGroupIndex_Params params;
	params.PartID = PartID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxHK.SortPartList
// (Defined, Public)

void UwItemBoxHK::SortPartList()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxHK.SortPartList");

	UwItemBoxHK_SortPartList_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchUserInfo.LogUsedStatus
// (Defined, Public)

void UwMatchUserInfo::LogUsedStatus()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.LogUsedStatus");

	UwMatchUserInfo_LogUsedStatus_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchUserInfo.GetPaintIDEquippedItems
// (Defined, Public)
// Parameters:
// int                            weaponID                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwMatchUserInfo::GetPaintIDEquippedItems(int weaponID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.GetPaintIDEquippedItems");

	UwMatchUserInfo_GetPaintIDEquippedItems_Params params;
	params.weaponID = weaponID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchUserInfo.ResetQSlotItemUse
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// int                            j                              (Parm)
// float                          Time                           (Parm)

void UwMatchUserInfo::ResetQSlotItemUse(int i, int j, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.ResetQSlotItemUse");

	UwMatchUserInfo_ResetQSlotItemUse_Params params;
	params.i = i;
	params.j = j;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchUserInfo.ResetItemUse
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// float                          Time                           (Parm)

void UwMatchUserInfo::ResetItemUse(int i, float Time)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.ResetItemUse");

	UwMatchUserInfo_ResetItemUse_Params params;
	params.i = i;
	params.Time = Time;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchUserInfo.SetItemUse
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)

void UwMatchUserInfo::SetItemUse(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.SetItemUse");

	UwMatchUserInfo_SetItemUse_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMatchUserInfo.ExtractBonusPoint
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// class UwGameManager*           GameMgr                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwMatchUserInfo::ExtractBonusPoint(int ItemID, class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.ExtractBonusPoint");

	UwMatchUserInfo_ExtractBonusPoint_Params params;
	params.ItemID = ItemID;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchUserInfo.ExtractBonusExp
// (Defined, Public)
// Parameters:
// int                            ItemID                         (Parm)
// class UwGameManager*           GameMgr                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwMatchUserInfo::ExtractBonusExp(int ItemID, class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.ExtractBonusExp");

	UwMatchUserInfo_ExtractBonusExp_Params params;
	params.ItemID = ItemID;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchUserInfo.GetBonusPoint
// (Defined, Public)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwMatchUserInfo::GetBonusPoint(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.GetBonusPoint");

	UwMatchUserInfo_GetBonusPoint_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMatchUserInfo.GetBonusExP
// (Defined, Public)
// Parameters:
// class UwGameManager*           GameMgr                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwMatchUserInfo::GetBonusExP(class UwGameManager* GameMgr)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMatchUserInfo.GetBonusExP");

	UwMatchUserInfo_GetBonusExP_Params params;
	params.GameMgr = GameMgr;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxInstanceHK.SetExtraValue
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// int                            Value                          (Parm)

void UwItemBoxInstanceHK::SetExtraValue(class UwItemBoxHK* ItemInfo, int Value)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxInstanceHK.SetExtraValue");

	UwItemBoxInstanceHK_SetExtraValue_Params params;
	params.ItemInfo = ItemInfo;
	params.Value = Value;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wItemBoxCashHK.SetCashItemInfoWZ
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm, OutParm)
// struct FWebzenShopPackage      WZShopPackage                  (Parm, NeedCtorLink)

void UwItemBoxCashHK::SetCashItemInfoWZ(const struct FWebzenShopPackage& WZShopPackage, class UwItemBoxHK** ItemInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.SetCashItemInfoWZ");

	UwItemBoxCashHK_SetCashItemInfoWZ_Params params;
	params.WZShopPackage = WZShopPackage;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ItemInfo != nullptr)
		*ItemInfo = params.ItemInfo;
}


// Function Engine.wItemBoxCashHK.SetCashItemInfoGP20
// (Defined, Public)
// Parameters:
// class UwItemBoxHK*             ItemInfo                       (Parm)
// class UwGP20Product*           gp20Product                    (Parm)
// int                            checkCoinType                  (Parm)

void UwItemBoxCashHK::SetCashItemInfoGP20(class UwItemBoxHK* ItemInfo, class UwGP20Product* gp20Product, int checkCoinType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.SetCashItemInfoGP20");

	UwItemBoxCashHK_SetCashItemInfoGP20_Params params;
	params.ItemInfo = ItemInfo;
	params.gp20Product = gp20Product;
	params.checkCoinType = checkCoinType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wItemBoxCashHK.CheckSaleEnd
// (Defined, Public)
// Parameters:
// struct FBtrDouble              clientTime                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwItemBoxCashHK::CheckSaleEnd(const struct FBtrDouble& clientTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.CheckSaleEnd");

	UwItemBoxCashHK_CheckSaleEnd_Params params;
	params.clientTime = clientTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxCashHK.CheckSaleEndTime
// (Defined, Static, Public)
// Parameters:
// struct FBtrDouble              clientTime                     (Parm)
// struct FBtrDouble              saleTime                       (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwItemBoxCashHK::STATIC_CheckSaleEndTime(const struct FBtrDouble& clientTime, const struct FBtrDouble& saleTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.CheckSaleEndTime");

	UwItemBoxCashHK_CheckSaleEndTime_Params params;
	params.clientTime = clientTime;
	params.saleTime = saleTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxCashHK.IsShowStore
// (Defined, Static, Public)
// Parameters:
// struct FBtrDouble              clientTime                     (Parm)
// class UwGP20Product*           gp20Product                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwItemBoxCashHK::STATIC_IsShowStore(const struct FBtrDouble& clientTime, class UwGP20Product* gp20Product)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.IsShowStore");

	UwItemBoxCashHK_IsShowStore_Params params;
	params.clientTime = clientTime;
	params.gp20Product = gp20Product;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxCashHK.IsCanBuy
// (Defined, Static, Public)
// Parameters:
// struct FBtrDouble              clientTime                     (Parm)
// class UwGP20Product*           gp20Product                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwItemBoxCashHK::STATIC_IsCanBuy(const struct FBtrDouble& clientTime, class UwGP20Product* gp20Product)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.IsCanBuy");

	UwItemBoxCashHK_IsCanBuy_Params params;
	params.clientTime = clientTime;
	params.gp20Product = gp20Product;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxCashHK.CCoinType
// (Defined, Static, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char UwItemBoxCashHK::STATIC_CCoinType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.CCoinType");

	UwItemBoxCashHK_CCoinType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wItemBoxCashHK.PCoinType
// (Defined, Static, Public)
// Parameters:
// unsigned char                  ReturnValue                    (Parm, OutParm, ReturnParm)

unsigned char UwItemBoxCashHK::STATIC_PCoinType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wItemBoxCashHK.PCoinType");

	UwItemBoxCashHK_PCoinType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.Render
// (Defined, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)
// int                            X1                             (Parm)
// int                            Y1                             (Parm)
// int                            X2                             (Parm)
// int                            Y2                             (Parm)
// struct FString                 ClanName                       (Parm, NeedCtorLink)

void UClanMarkManager::Render(class UCanvas* C, int X1, int Y1, int X2, int Y2, const struct FString& ClanName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.Render");

	UClanMarkManager_Render_Params params;
	params.C = C;
	params.X1 = X1;
	params.Y1 = Y1;
	params.X2 = X2;
	params.Y2 = Y2;
	params.ClanName = ClanName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ClanMarkManager.FindClanMark_Inner
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            Left                           (Parm)
// int                            Right                          (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UClanMarkManager::FindClanMark_Inner(const struct FString& ClanName, int Left, int Right)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.FindClanMark_Inner");

	UClanMarkManager_FindClanMark_Inner_Params params;
	params.ClanName = ClanName;
	params.Left = Left;
	params.Right = Right;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.FindClanMark
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UClanMarkManager::FindClanMark(const struct FString& ClanName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.FindClanMark");

	UClanMarkManager_FindClanMark_Params params;
	params.ClanName = ClanName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.FindClanMark_ForInsertLocation
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UClanMarkManager::FindClanMark_ForInsertLocation(const struct FString& ClanName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.FindClanMark_ForInsertLocation");

	UClanMarkManager_FindClanMark_ForInsertLocation_Params params;
	params.ClanName = ClanName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.RemoveClanMark
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UClanMarkManager::RemoveClanMark(const struct FString& ClanName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.RemoveClanMark");

	UClanMarkManager_RemoveClanMark_Params params;
	params.ClanName = ClanName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.SetClanLevel
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            ClanLevel                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UClanMarkManager::SetClanLevel(const struct FString& ClanName, int ClanLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.SetClanLevel");

	UClanMarkManager_SetClanLevel_Params params;
	params.ClanName = ClanName;
	params.ClanLevel = ClanLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.AddClanMark
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// int                            Pattern                        (Parm)
// int                            BG                             (Parm)
// int                            BL                             (Parm)
// bool                           bSetClanState                  (OptionalParm, Parm)
// bool                           bClanLF                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UClanMarkManager::AddClanMark(const struct FString& ClanName, int Pattern, int BG, int BL, bool bSetClanState, bool bClanLF)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.AddClanMark");

	UClanMarkManager_AddClanMark_Params params;
	params.ClanName = ClanName;
	params.Pattern = Pattern;
	params.BG = BG;
	params.BL = BL;
	params.bSetClanState = bSetClanState;
	params.bClanLF = bClanLF;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.SetClanState
// (Defined, Public)
// Parameters:
// struct FString                 ClanName                       (Parm, NeedCtorLink)
// bool                           bClanLF                        (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UClanMarkManager::SetClanState(const struct FString& ClanName, bool bClanLF)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.SetClanState");

	UClanMarkManager_SetClanState_Params params;
	params.ClanName = ClanName;
	params.bClanLF = bClanLF;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ClanMarkManager.Init
// (Defined, Public)
// Parameters:
// class UwGameManager*           GM                             (Parm)

void UClanMarkManager::Init(class UwGameManager* GM)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.Init");

	UClanMarkManager_Init_Params params;
	params.GM = GM;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ClanMarkManager.Tick
// (Defined, Public)
// Parameters:
// float                          Delta                          (Parm)

void UClanMarkManager::Tick(float Delta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ClanMarkManager.Tick");

	UClanMarkManager_Tick_Params params;
	params.Delta = Delta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.DelegateEventTimer.OnEventTimer
// (Public, Delegate)
// Parameters:
// int                            Index                          (Parm)

void UDelegateEventTimer::OnEventTimer(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.DelegateEventTimer.OnEventTimer");

	UDelegateEventTimer_OnEventTimer_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponRes_Base.PrecacheSound
// (Defined, Static, Public)

void AwWeaponRes_Base::STATIC_PrecacheSound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponRes_Base.PrecacheSound");

	AwWeaponRes_Base_PrecacheSound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponRes_Base.PrecacheMaterials
// (Defined, Static, Public)
// Parameters:
// class ALevelInfo*              Level                          (Parm)

void AwWeaponRes_Base::STATIC_PrecacheMaterials(class ALevelInfo* Level)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponRes_Base.PrecacheMaterials");

	AwWeaponRes_Base_PrecacheMaterials_Params params;
	params.Level = Level;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponRes_Base.PrecacheClasses
// (Defined, Static, Public)

void AwWeaponRes_Base::STATIC_PrecacheClasses()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponRes_Base.PrecacheClasses");

	AwWeaponRes_Base_PrecacheClasses_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponAcce.IsAiming
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeaponAcce::IsAiming()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponAcce.IsAiming");

	AwWeaponAcce_IsAiming_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wWeaponAcce.Switch3DScope
// (Defined, Simulated, Public)
// Parameters:
// bool                           bAiming                        (Parm)

void AwWeaponAcce::Switch3DScope(bool bAiming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponAcce.Switch3DScope");

	AwWeaponAcce_Switch3DScope_Params params;
	params.bAiming = bAiming;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wWeaponAcce.Set
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<EAcceType>         Type                           (Parm)
// struct FString                 szMesh                         (Parm, NeedCtorLink)
// struct FVector                 AimDiff                        (Parm)
// int                            iPartsItemID                   (Parm)
// int                            iPartsGroupID                  (Parm)
// bool                           bUseMeshString                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwWeaponAcce::Set(TEnumAsByte<EAcceType> Type, const struct FString& szMesh, const struct FVector& AimDiff, int iPartsItemID, int iPartsGroupID, bool bUseMeshString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wWeaponAcce.Set");

	AwWeaponAcce_Set_Params params;
	params.Type = Type;
	params.szMesh = szMesh;
	params.AimDiff = AimDiff;
	params.iPartsItemID = iPartsItemID;
	params.iPartsGroupID = iPartsGroupID;
	params.bUseMeshString = bUseMeshString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Score.GetGainPoint
// (Defined, Simulated, Static, Public)
// Parameters:
// int                            Code_MessageScore              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AwMessage_Score::STATIC_GetGainPoint(int Code_MessageScore)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Score.GetGainPoint");

	AwMessage_Score_GetGainPoint_Params params;
	params.Code_MessageScore = Code_MessageScore;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Score.PlaySoundMessageScore
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// struct FString                 SoundKind                      (Parm, NeedCtorLink)

void AwMessage_Score::STATIC_PlaySoundMessageScore(class APlayerController* P, const struct FString& SoundKind)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Score.PlaySoundMessageScore");

	AwMessage_Score_PlaySoundMessageScore_Params params;
	params.P = P;
	params.SoundKind = SoundKind;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Score.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_Score::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Score.ClientReceive");

	AwMessage_Score_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Score.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Score::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Score.GetString");

	AwMessage_Score_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PrecacheInterface.PrecacheGameSkeletalMeshes
// (Defined, Static, Public)
// Parameters:
// class ALevelInfo*              myLevel                        (Parm)

void UPrecacheInterface::STATIC_PrecacheGameSkeletalMeshes(class ALevelInfo* myLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrecacheInterface.PrecacheGameSkeletalMeshes");

	UPrecacheInterface_PrecacheGameSkeletalMeshes_Params params;
	params.myLevel = myLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrecacheInterface.PrecacheGameStaticMeshes
// (Defined, Static, Public)
// Parameters:
// class ALevelInfo*              myLevel                        (Parm)

void UPrecacheInterface::STATIC_PrecacheGameStaticMeshes(class ALevelInfo* myLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrecacheInterface.PrecacheGameStaticMeshes");

	UPrecacheInterface_PrecacheGameStaticMeshes_Params params;
	params.myLevel = myLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PrecacheInterface.PrecacheGameTextures
// (Defined, Static, Public)
// Parameters:
// class ALevelInfo*              myLevel                        (Parm)

void UPrecacheInterface::STATIC_PrecacheGameTextures(class ALevelInfo* myLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PrecacheInterface.PrecacheGameTextures");

	UPrecacheInterface_PrecacheGameTextures_Params params;
	params.myLevel = myLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Armor.PrioritizeArmor
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// class AArmor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AArmor* AArmor::PrioritizeArmor(int Damage, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Armor.PrioritizeArmor");

	AArmor_PrioritizeArmor_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Armor.ArmorImpactEffect
// (Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)

void AArmor::ArmorImpactEffect(const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Armor.ArmorImpactEffect");

	AArmor_ArmorImpactEffect_Params params;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Armor.ArmorPriority
// (Defined, Public)
// Parameters:
// class UClass*                  DamageType                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AArmor::ArmorPriority(class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Armor.ArmorPriority");

	AArmor_ArmorPriority_Params params;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Armor.ArmorAbsorbDamage
// (Defined, Public)
// Parameters:
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AArmor::ArmorAbsorbDamage(int Damage, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Armor.ArmorAbsorbDamage");

	AArmor_ArmorAbsorbDamage_Params params;
	params.Damage = Damage;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponPickup.Reset
// (Defined, Public)

void AWeaponPickup::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.Reset");

	AWeaponPickup_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponPickup.InitDroppedPickupFor
// (Defined, Public)
// Parameters:
// class AInventory*              Inv                            (Parm)

void AWeaponPickup::InitDroppedPickupFor(class AInventory* Inv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.InitDroppedPickupFor");

	AWeaponPickup_InitDroppedPickupFor_Params params;
	params.Inv = Inv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponPickup.GetRespawnTime
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeaponPickup::GetRespawnTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.GetRespawnTime");

	AWeaponPickup_GetRespawnTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponPickup.BotDesireability
// (Defined, Public)
// Parameters:
// class APawn*                   Bot                            (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeaponPickup::BotDesireability(class APawn* Bot)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.BotDesireability");

	AWeaponPickup_BotDesireability_Params params;
	params.Bot = Bot;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponPickup.DetourWeight
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// float                          PathWeight                     (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AWeaponPickup::DetourWeight(class APawn* Other, float PathWeight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.DetourWeight");

	AWeaponPickup_DetourWeight_Params params;
	params.Other = Other;
	params.PathWeight = PathWeight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponPickup.AllowRepeatPickup
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AWeaponPickup::AllowRepeatPickup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.AllowRepeatPickup");

	AWeaponPickup_AllowRepeatPickup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WeaponPickup.StartSleeping
// (Defined, Public)

void AWeaponPickup::StartSleeping()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.StartSleeping");

	AWeaponPickup_StartSleeping_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponPickup.UpdateHUD
// (Defined, Simulated, Static, Public)
// Parameters:
// class AHUD*                    H                              (Parm)

void AWeaponPickup::STATIC_UpdateHUD(class AHUD* H)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.UpdateHUD");

	AWeaponPickup_UpdateHUD_Params params;
	params.H = H;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponPickup.SetWeaponStay
// (Defined, Public)

void AWeaponPickup::SetWeaponStay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.SetWeaponStay");

	AWeaponPickup_SetWeaponStay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WeaponPickup.PostBeginPlay
// (Defined, Public)

void AWeaponPickup::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WeaponPickup.PostBeginPlay");

	AWeaponPickup_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.SetFireAnim
// (Defined, Simulated, Public)

void UwMeleeFire::SetFireAnim()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.SetFireAnim");

	UwMeleeFire_SetFireAnim_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.SetRangeDF
// (Defined, Simulated, Public)

void UwMeleeFire::SetRangeDF()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.SetRangeDF");

	UwMeleeFire_SetRangeDF_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.wLoadOut
// (Defined, Simulated, Public)

void UwMeleeFire::wLoadOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.wLoadOut");

	UwMeleeFire_wLoadOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.DoTraceTutorial
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)

void UwMeleeFire::DoTraceTutorial(const struct FVector& Start, const struct FRotator& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.DoTraceTutorial");

	UwMeleeFire_DoTraceTutorial_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.DoTrace
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)

void UwMeleeFire::DoTrace(const struct FVector& Start, const struct FRotator& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.DoTrace");

	UwMeleeFire_DoTrace_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.GetDamagePerc
// (Defined, Public)
// Parameters:
// unsigned char                  HitPart                        (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwMeleeFire::GetDamagePerc(unsigned char HitPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.GetDamagePerc");

	UwMeleeFire_GetDamagePerc_Params params;
	params.HitPart = HitPart;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMeleeFire.FindTarget4
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)
// class AActor*                  rTarget                        (Parm, OutParm)
// struct FVector                 HitLocation                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMeleeFire::FindTarget4(const struct FVector& Start, const struct FRotator& Dir, class AActor** rTarget, struct FVector* HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.FindTarget4");

	UwMeleeFire_FindTarget4_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rTarget != nullptr)
		*rTarget = params.rTarget;
	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

	return params.ReturnValue;
}


// Function Engine.wMeleeFire.FindTarget
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)
// class APawn*                   rTarget                        (Parm, OutParm)
// struct FVector                 HitLocation                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMeleeFire::FindTarget(const struct FVector& Start, const struct FRotator& Dir, class APawn** rTarget, struct FVector* HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.FindTarget");

	UwMeleeFire_FindTarget_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rTarget != nullptr)
		*rTarget = params.rTarget;
	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

	return params.ReturnValue;
}


// Function Engine.wMeleeFire.FindTarget3
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)
// class AActor*                  rTarget                        (Parm, OutParm)
// struct FVector                 HitLocation                    (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMeleeFire::FindTarget3(const struct FVector& Start, const struct FRotator& Dir, class AActor** rTarget, struct FVector* HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.FindTarget3");

	UwMeleeFire_FindTarget3_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rTarget != nullptr)
		*rTarget = params.rTarget;
	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;

	return params.ReturnValue;
}


// Function Engine.wMeleeFire.FindTarget2
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)
// class AActor*                  rTarget                        (Parm, OutParm)
// struct FVector                 HitLocation                    (Parm, OutParm)
// struct FVector                 HitNormal                      (Parm, OutParm)
// unsigned char                  HitCollisionPart               (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwMeleeFire::FindTarget2(const struct FVector& Start, const struct FRotator& Dir, class AActor** rTarget, struct FVector* HitLocation, struct FVector* HitNormal, unsigned char* HitCollisionPart)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.FindTarget2");

	UwMeleeFire_FindTarget2_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (rTarget != nullptr)
		*rTarget = params.rTarget;
	if (HitLocation != nullptr)
		*HitLocation = params.HitLocation;
	if (HitNormal != nullptr)
		*HitNormal = params.HitNormal;
	if (HitCollisionPart != nullptr)
		*HitCollisionPart = params.HitCollisionPart;

	return params.ReturnValue;
}


// Function Engine.wMeleeFire.DoFireEffect
// (Defined, Public)

void UwMeleeFire::DoFireEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.DoFireEffect");

	UwMeleeFire_DoFireEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.PlayFiring
// (Defined, Public)

void UwMeleeFire::PlayFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.PlayFiring");

	UwMeleeFire_PlayFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMeleeFire.ModeDoFire
// (Defined, Event, Public)

void UwMeleeFire::ModeDoFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMeleeFire.ModeDoFire");

	UwMeleeFire_ModeDoFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSpecialKillMessage.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwSpecialKillMessage::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSpecialKillMessage.ClientReceive");

	AwSpecialKillMessage_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSpecialKillMessage.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwSpecialKillMessage::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSpecialKillMessage.GetString");

	AwSpecialKillMessage_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.CreateMapItemList
// (Defined, Static, Public)
// Parameters:
// TArray<struct FString>         MapURLs                        (Parm, NeedCtorLink)
// TArray<struct FMapItem>        MapItems                       (Parm, OutParm, NeedCtorLink)

void UMaplistRecord::STATIC_CreateMapItemList(TArray<struct FString> MapURLs, TArray<struct FMapItem>* MapItems)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.CreateMapItemList");

	UMaplistRecord_CreateMapItemList_Params params;
	params.MapURLs = MapURLs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MapItems != nullptr)
		*MapItems = params.MapItems;
}


// Function Engine.MaplistRecord.CreateMapItem
// (Defined, Static, Public)
// Parameters:
// struct FString                 FullMapURL                     (Parm, NeedCtorLink)
// struct FMapItem                Item                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::STATIC_CreateMapItem(const struct FString& FullMapURL, struct FMapItem* Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.CreateMapItem");

	UMaplistRecord_CreateMapItem_Params params;
	params.FullMapURL = FullMapURL;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Item != nullptr)
		*Item = params.Item;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.CreateMapOption
// (Defined, Static, Public)
// Parameters:
// struct FString                 MapOptionString                (Parm, OutParm, NeedCtorLink)
// struct FKeyValuePair           ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FKeyValuePair UMaplistRecord::STATIC_CreateMapOption(struct FString* MapOptionString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.CreateMapOption");

	UMaplistRecord_CreateMapOption_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (MapOptionString != nullptr)
		*MapOptionString = params.MapOptionString;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetBaseMapName
// (Defined, Static, Public)
// Parameters:
// struct FString                 FullMapURL                     (Parm, OutParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UMaplistRecord::STATIC_GetBaseMapName(struct FString* FullMapURL)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetBaseMapName");

	UMaplistRecord_GetBaseMapName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (FullMapURL != nullptr)
		*FullMapURL = params.FullMapURL;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.ItemHasOption
// (Defined, Static, Public)
// Parameters:
// struct FMapItem                Item                           (Parm, NeedCtorLink)
// struct FKeyValuePair           Option                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::STATIC_ItemHasOption(const struct FMapItem& Item, const struct FKeyValuePair& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.ItemHasOption");

	UMaplistRecord_ItemHasOption_Params params;
	params.Item = Item;
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.MapHasOption
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FKeyValuePair           Option                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::MapHasOption(int MapIndex, const struct FKeyValuePair& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.MapHasOption");

	UMaplistRecord_MapHasOption_Params params;
	params.MapIndex = MapIndex;
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.ValidOptionIndex
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// int                            OptionIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::ValidOptionIndex(int MapIndex, int OptionIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.ValidOptionIndex");

	UMaplistRecord_ValidOptionIndex_Params params;
	params.MapIndex = MapIndex;
	params.OptionIndex = OptionIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.ValidIndex
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::ValidIndex(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.ValidIndex");

	UMaplistRecord_ValidIndex_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.ValidMap
// (Defined, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::ValidMap(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.ValidMap");

	UMaplistRecord_ValidMap_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetOptionIndex
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FKeyValuePair           Option                         (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaplistRecord::GetOptionIndex(int MapIndex, const struct FKeyValuePair& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetOptionIndex");

	UMaplistRecord_GetOptionIndex_Params params;
	params.MapIndex = MapIndex;
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetMapItemIndex
// (Defined, Public)
// Parameters:
// struct FMapItem                Item                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaplistRecord::GetMapItemIndex(const struct FMapItem& Item)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetMapItemIndex");

	UMaplistRecord_GetMapItemIndex_Params params;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetMapIndex
// (Defined, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaplistRecord::GetMapIndex(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetMapIndex");

	UMaplistRecord_GetMapIndex_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetActiveMapIndex
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaplistRecord::GetActiveMapIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetActiveMapIndex");

	UMaplistRecord_GetActiveMapIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetCacheIndex
// (Defined, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaplistRecord::GetCacheIndex(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetCacheIndex");

	UMaplistRecord_GetCacheIndex_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.IsDirty
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::IsDirty()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.IsDirty");

	UMaplistRecord_IsDirty_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetAllMapURL
// (Defined, Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> UMaplistRecord::GetAllMapURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetAllMapURL");

	UMaplistRecord_GetAllMapURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetMaps
// (Defined, Public)
// Parameters:
// TArray<struct FMapItem>        ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FMapItem> UMaplistRecord::GetMaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetMaps");

	UMaplistRecord_GetMaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetMapURL
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UMaplistRecord::GetMapURL(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetMapURL");

	UMaplistRecord_GetMapURL_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetMapName
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UMaplistRecord::GetMapName(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetMapName");

	UMaplistRecord_GetMapName_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetActiveMapURL
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UMaplistRecord::GetActiveMapURL()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetActiveMapURL");

	UMaplistRecord_GetActiveMapURL_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetActiveMapName
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UMaplistRecord::GetActiveMapName()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetActiveMapName");

	UMaplistRecord_GetActiveMapName_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetGameType
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UMaplistRecord::GetGameType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetGameType");

	UMaplistRecord_GetGameType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.GetTitle
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UMaplistRecord::GetTitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.GetTitle");

	UMaplistRecord_GetTitle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.SetMapOptions
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FString                 OptionString                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::SetMapOptions(int MapIndex, const struct FString& OptionString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.SetMapOptions");

	UMaplistRecord_SetMapOptions_Params params;
	params.MapIndex = MapIndex;
	params.OptionString = OptionString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.RemoveMap
// (Defined, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::RemoveMap(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.RemoveMap");

	UMaplistRecord_RemoveMap_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.InsertMap
// (Defined, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::InsertMap(const struct FString& MapName, int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.InsertMap");

	UMaplistRecord_InsertMap_Params params;
	params.MapName = MapName;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.AddMap
// (Defined, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::AddMap(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.AddMap");

	UMaplistRecord_AddMap_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.RefreshMapItem
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)

void UMaplistRecord::RefreshMapItem(int MapIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.RefreshMapItem");

	UMaplistRecord_RefreshMapItem_Params params;
	params.MapIndex = MapIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.RemoveOptionItem
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FKeyValuePair           Option                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::RemoveOptionItem(int MapIndex, const struct FKeyValuePair& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.RemoveOptionItem");

	UMaplistRecord_RemoveOptionItem_Params params;
	params.MapIndex = MapIndex;
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.RemoveOptionString
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FString                 OptionString                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::RemoveOptionString(int MapIndex, const struct FString& OptionString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.RemoveOptionString");

	UMaplistRecord_RemoveOptionString_Params params;
	params.MapIndex = MapIndex;
	params.OptionString = OptionString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.AddOptionItem
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FKeyValuePair           Option                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::AddOptionItem(int MapIndex, const struct FKeyValuePair& Option)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.AddOptionItem");

	UMaplistRecord_AddOptionItem_Params params;
	params.MapIndex = MapIndex;
	params.Option = Option;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.AddOptionString
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FString                 OptionString                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::AddOptionString(int MapIndex, const struct FString& OptionString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.AddOptionString");

	UMaplistRecord_AddOptionString_Params params;
	params.MapIndex = MapIndex;
	params.OptionString = OptionString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.Clear
// (Defined, Public)
// Parameters:
// bool                           bReset                         (OptionalParm, Parm)

void UMaplistRecord::Clear(bool bReset)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.Clear");

	UMaplistRecord_Clear_Params params;
	params.bReset = bReset;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.CancelChanges
// (Defined, Public)

void UMaplistRecord::CancelChanges()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.CancelChanges");

	UMaplistRecord_CancelChanges_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.VerifyMaps
// (Defined, Public)

void UMaplistRecord::VerifyMaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.VerifyMaps");

	UMaplistRecord_VerifyMaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.Save
// (Defined, Public)

void UMaplistRecord::Save()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.Save");

	UMaplistRecord_Save_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.SetMapItemList
// (Defined, Public)
// Parameters:
// TArray<struct FMapItem>        NewMaps                        (Parm, NeedCtorLink)

void UMaplistRecord::SetMapItemList(TArray<struct FMapItem> NewMaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.SetMapItemList");

	UMaplistRecord_SetMapItemList_Params params;
	params.NewMaps = NewMaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.SetMaplist
// (Defined, Public)
// Parameters:
// TArray<struct FString>         NewMaps                        (Parm, NeedCtorLink)

void UMaplistRecord::SetMaplist(TArray<struct FString> NewMaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.SetMaplist");

	UMaplistRecord_SetMaplist_Params params;
	params.NewMaps = NewMaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.SetActiveMap
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UMaplistRecord::SetActiveMap(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.SetActiveMap");

	UMaplistRecord_SetActiveMap_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.SetGameType
// (Defined, Public)
// Parameters:
// struct FString                 NewGameType                    (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::SetGameType(const struct FString& NewGameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.SetGameType");

	UMaplistRecord_SetGameType_Params params;
	params.NewGameType = NewGameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.SetTitle
// (Defined, Public)
// Parameters:
// struct FString                 NewTitle                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::SetTitle(const struct FString& NewTitle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.SetTitle");

	UMaplistRecord_SetTitle_Params params;
	params.NewTitle = NewTitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.SetCacheMaps
// (Defined, Public)
// Parameters:
// TArray<struct FMapItem>        CacheMaps                      (Parm, NeedCtorLink)

void UMaplistRecord::SetCacheMaps(TArray<struct FMapItem> CacheMaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.SetCacheMaps");

	UMaplistRecord_SetCacheMaps_Params params;
	params.CacheMaps = CacheMaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.Created
// (Defined, Event, Public)

void UMaplistRecord::Created()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.Created");

	UMaplistRecord_Created_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistRecord.CompareItemsSlow
// (Defined, Static, Public)
// Parameters:
// struct FMapItem                A                              (Parm, NeedCtorLink)
// struct FMapItem                B                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::STATIC_CompareItemsSlow(const struct FMapItem& A, const struct FMapItem& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.CompareItemsSlow");

	UMaplistRecord_CompareItemsSlow_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.CompareItems
// (Defined, Static, Public)
// Parameters:
// struct FMapItem                A                              (Parm, NeedCtorLink)
// struct FMapItem                B                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::STATIC_CompareItems(const struct FMapItem& A, const struct FMapItem& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.CompareItems");

	UMaplistRecord_CompareItems_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.EqualEqual_MapItemMapItem
// (Final, Defined, Operator, Static, Public)
// Parameters:
// struct FMapItem                A                              (Parm, NeedCtorLink)
// struct FMapItem                B                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::STATIC_EqualEqual_MapItemMapItem(const struct FMapItem& A, const struct FMapItem& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.EqualEqual_MapItemMapItem");

	UMaplistRecord_EqualEqual_MapItemMapItem_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistRecord.EqualEqual_KeyValuePairKeyValuePair
// (Final, Defined, Operator, Static, Public)
// Parameters:
// struct FKeyValuePair           A                              (Parm, NeedCtorLink)
// struct FKeyValuePair           B                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UMaplistRecord::STATIC_EqualEqual_KeyValuePairKeyValuePair(const struct FKeyValuePair& A, const struct FKeyValuePair& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistRecord.EqualEqual_KeyValuePairKeyValuePair");

	UMaplistRecord_EqualEqual_KeyValuePairKeyValuePair_Params params;
	params.A = A;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.SetMaplist
// (Defined, Static, Public)
// Parameters:
// int                            CurrentNum                     (Parm)
// TArray<struct FString>         NewMaps                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMapList::STATIC_SetMaplist(int CurrentNum, TArray<struct FString> NewMaps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.SetMaplist");

	AMapList_SetMaplist_Params params;
	params.CurrentNum = CurrentNum;
	params.NewMaps = NewMaps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.StaticHasInvalidMaps
// (Defined, Static, Public)
// Parameters:
// bool                           bReadOnly                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMapList::STATIC_StaticHasInvalidMaps(bool bReadOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.StaticHasInvalidMaps");

	AMapList_StaticHasInvalidMaps_Params params;
	params.bReadOnly = bReadOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.HasInvalidMaps
// (Defined, Public)
// Parameters:
// bool                           bReadOnly                      (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMapList::HasInvalidMaps(bool bReadOnly)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.HasInvalidMaps");

	AMapList_HasInvalidMaps_Params params;
	params.bReadOnly = bReadOnly;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.StaticGetMaps
// (Defined, Static, Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMapList::STATIC_StaticGetMaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.StaticGetMaps");

	AMapList_StaticGetMaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.GetMaps
// (Defined, Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMapList::GetMaps()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.GetMaps");

	AMapList_GetMaps_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.GetMap
// (Defined, Public)
// Parameters:
// int                            MapIndex                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMapList::GetMap(int MapIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.GetMap");

	AMapList_GetMap_Params params;
	params.MapIndex = MapIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.FindCacheIndex
// (Defined, Public)
// Parameters:
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMapList::FindCacheIndex(const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.FindCacheIndex");

	AMapList_FindCacheIndex_Params params;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.UpdateMapNum
// (Defined, Public)
// Parameters:
// int                            NewMapNum                      (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMapList::UpdateMapNum(int NewMapNum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.UpdateMapNum");

	AMapList_UpdateMapNum_Params params;
	params.NewMapNum = NewMapNum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.GetNextMap
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMapList::GetNextMap()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.GetNextMap");

	AMapList_GetNextMap_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MapList.PostBeginPlay
// (Defined, Event, Public)

void AMapList::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.PostBeginPlay");

	AMapList_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MapList.PreBeginPlay
// (Defined, Event, Public)

void AMapList::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MapList.PreBeginPlay");

	AMapList_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMultiKillMessage.ClientReceiveEx
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// int                            iReserve                       (OptionalParm, Parm)

void AwMultiKillMessage::STATIC_ClientReceiveEx(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, int iReserve)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMultiKillMessage.ClientReceiveEx");

	AwMultiKillMessage_ClientReceiveEx_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;
	params.iReserve = iReserve;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMultiKillMessage.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMultiKillMessage::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMultiKillMessage.ClientReceive");

	AwMultiKillMessage_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMultiKillMessage.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMultiKillMessage::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMultiKillMessage.GetString");

	AwMultiKillMessage_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_BGM.ClientReceive
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_BGM::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_BGM.ClientReceive");

	AwMessage_BGM_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_BGM.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_BGM::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_BGM.GetString");

	AwMessage_BGM_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.NetDamage
// (Defined, Public)
// Parameters:
// int                            OriginalDamage                 (Parm)
// int                            Damage                         (Parm)
// class APawn*                   injured                        (Parm)
// class APawn*                   instigatedBy                   (Parm)
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 Momentum                       (Parm, OutParm)
// class UClass*                  DamageType                     (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AGameRules::NetDamage(int OriginalDamage, int Damage, class APawn* injured, class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, struct FVector* Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.NetDamage");

	AGameRules_NetDamage_Params params;
	params.OriginalDamage = OriginalDamage;
	params.Damage = Damage;
	params.injured = injured;
	params.instigatedBy = instigatedBy;
	params.HitLocation = HitLocation;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Momentum != nullptr)
		*Momentum = params.Momentum;

	return params.ReturnValue;
}


// Function Engine.GameRules.CriticalPlayer
// (Defined, Public)
// Parameters:
// class AController*             Other                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::CriticalPlayer(class AController* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.CriticalPlayer");

	AGameRules_CriticalPlayer_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.ScoreKill
// (Defined, Public)
// Parameters:
// class AController*             Killer                         (Parm)
// class AController*             Killed                         (Parm)

void AGameRules::ScoreKill(class AController* Killer, class AController* Killed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.ScoreKill");

	AGameRules_ScoreKill_Params params;
	params.Killer = Killer;
	params.Killed = Killed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameRules.ScoreObjective
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// int                            Score                          (Parm)

void AGameRules::ScoreObjective(class APlayerReplicationInfo* Scorer, int Score)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.ScoreObjective");

	AGameRules_ScoreObjective_Params params;
	params.Scorer = Scorer;
	params.Score = Score;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.GameRules.PreventSever
// (Defined, Public)
// Parameters:
// class APawn*                   Killed                         (Parm)
// struct FName                   BoneName                       (Parm)
// int                            Damage                         (Parm)
// class UClass*                  DamageType                     (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::PreventSever(class APawn* Killed, const struct FName& BoneName, int Damage, class UClass* DamageType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.PreventSever");

	AGameRules_PreventSever_Params params;
	params.Killed = Killed;
	params.BoneName = BoneName;
	params.Damage = Damage;
	params.DamageType = DamageType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.PreventDeath
// (Defined, Public)
// Parameters:
// class APawn*                   Killed                         (Parm)
// class AController*             Killer                         (Parm)
// class UClass*                  DamageType                     (Parm)
// struct FVector                 HitLocation                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.PreventDeath");

	AGameRules_PreventDeath_Params params;
	params.Killed = Killed;
	params.Killer = Killer;
	params.DamageType = DamageType;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.OverridePickupQuery
// (Defined, Public)
// Parameters:
// class APawn*                   Other                          (Parm)
// class APickup*                 Item                           (Parm)
// unsigned char                  bAllowPickup                   (Parm, OutParm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::OverridePickupQuery(class APawn* Other, class APickup* Item, unsigned char* bAllowPickup)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.OverridePickupQuery");

	AGameRules_OverridePickupQuery_Params params;
	params.Other = Other;
	params.Item = Item;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (bAllowPickup != nullptr)
		*bAllowPickup = params.bAllowPickup;

	return params.ReturnValue;
}


// Function Engine.GameRules.CheckScore
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Scorer                         (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::CheckScore(class APlayerReplicationInfo* Scorer)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.CheckScore");

	AGameRules_CheckScore_Params params;
	params.Scorer = Scorer;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.CheckEndGame
// (Defined, Public)
// Parameters:
// class APlayerReplicationInfo*  Winner                         (Parm)
// struct FString                 Reason                         (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::CheckEndGame(class APlayerReplicationInfo* Winner, const struct FString& Reason)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.CheckEndGame");

	AGameRules_CheckEndGame_Params params;
	params.Winner = Winner;
	params.Reason = Reason;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.HandleRestartGame
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AGameRules::HandleRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.HandleRestartGame");

	AGameRules_HandleRestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.GetServerDetails
// (Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AGameRules::GetServerDetails(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.GetServerDetails");

	AGameRules_GetServerDetails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.GameRules.GetRules
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AGameRules::GetRules()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.GetRules");

	AGameRules_GetRules_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.FindPlayerStart
// (Defined, Public)
// Parameters:
// class AController*             Player                         (Parm)
// unsigned char                  inTeam                         (OptionalParm, Parm)
// struct FString                 incomingName                   (OptionalParm, Parm, NeedCtorLink)
// class ANavigationPoint*        ReturnValue                    (Parm, OutParm, ReturnParm)

class ANavigationPoint* AGameRules::FindPlayerStart(class AController* Player, unsigned char inTeam, const struct FString& incomingName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.FindPlayerStart");

	AGameRules_FindPlayerStart_Params params;
	params.Player = Player;
	params.inTeam = inTeam;
	params.incomingName = incomingName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.GameRules.AddGameRules
// (Defined, Public)
// Parameters:
// class AGameRules*              GR                             (Parm)

void AGameRules::AddGameRules(class AGameRules* GR)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.GameRules.AddGameRules");

	AGameRules_AddGameRules_Params params;
	params.GR = GR;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MessagingSpectator.InitPlayerReplicationInfo
// (Defined, Public)

void AMessagingSpectator::InitPlayerReplicationInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MessagingSpectator.InitPlayerReplicationInfo");

	AMessagingSpectator_InitPlayerReplicationInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MessagingSpectator.PostBeginPlay
// (Defined, Event, Public)

void AMessagingSpectator::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MessagingSpectator.PostBeginPlay");

	AMessagingSpectator_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingHandler.GetServerDetails
// (Public)
// Parameters:
// struct FServerResponseLine     ServerState                    (Parm, OutParm, NeedCtorLink)

void AVotingHandler::GetServerDetails(struct FServerResponseLine* ServerState)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.GetServerDetails");

	AVotingHandler_GetServerDetails_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (ServerState != nullptr)
		*ServerState = params.ServerState;
}


// Function Engine.VotingHandler.ReloadAll
// (Public)
// Parameters:
// bool                           bParam                         (OptionalParm, Parm)

void AVotingHandler::ReloadAll(bool bParam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.ReloadAll");

	AVotingHandler_ReloadAll_Params params;
	params.bParam = bParam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingHandler.IsEnabled
// (Defined, Static, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVotingHandler::STATIC_IsEnabled()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.IsEnabled");

	AVotingHandler_IsEnabled_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingHandler.FillPlayInfo
// (Defined, Static, Public)
// Parameters:
// class UPlayInfo*               PlayInfo                       (Parm)

void AVotingHandler::STATIC_FillPlayInfo(class UPlayInfo* PlayInfo)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.FillPlayInfo");

	AVotingHandler_FillPlayInfo_Params params;
	params.PlayInfo = PlayInfo;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingHandler.GetConfigArrayItemCount
// (Public)
// Parameters:
// struct FString                 ConfigArrayName                (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVotingHandler::GetConfigArrayItemCount(const struct FString& ConfigArrayName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.GetConfigArrayItemCount");

	AVotingHandler_GetConfigArrayItemCount_Params params;
	params.ConfigArrayName = ConfigArrayName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingHandler.UpdateConfigArrayItem
// (Public)
// Parameters:
// struct FString                 ConfigArrayName                (Parm, NeedCtorLink)
// int                            RowIndex                       (Parm)
// int                            ColumnIndex                    (Parm)
// struct FString                 NewValue                       (Parm, NeedCtorLink)

void AVotingHandler::UpdateConfigArrayItem(const struct FString& ConfigArrayName, int RowIndex, int ColumnIndex, const struct FString& NewValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.UpdateConfigArrayItem");

	AVotingHandler_UpdateConfigArrayItem_Params params;
	params.ConfigArrayName = ConfigArrayName;
	params.RowIndex = RowIndex;
	params.ColumnIndex = ColumnIndex;
	params.NewValue = NewValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingHandler.AddConfigArrayItem
// (Public)
// Parameters:
// struct FString                 ConfigArrayName                (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AVotingHandler::AddConfigArrayItem(const struct FString& ConfigArrayName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.AddConfigArrayItem");

	AVotingHandler_AddConfigArrayItem_Params params;
	params.ConfigArrayName = ConfigArrayName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingHandler.DeleteConfigArrayItem
// (Public)
// Parameters:
// struct FString                 ConfigArrayName                (Parm, NeedCtorLink)
// int                            RowIndex                       (Parm)

void AVotingHandler::DeleteConfigArrayItem(const struct FString& ConfigArrayName, int RowIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.DeleteConfigArrayItem");

	AVotingHandler_DeleteConfigArrayItem_Params params;
	params.ConfigArrayName = ConfigArrayName;
	params.RowIndex = RowIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingHandler.GetConfigArrayColumnTitle
// (Public)
// Parameters:
// struct FString                 ConfigArrayName                (Parm, NeedCtorLink)
// int                            ColumnIndex                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVotingHandler::GetConfigArrayColumnTitle(const struct FString& ConfigArrayName, int ColumnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.GetConfigArrayColumnTitle");

	AVotingHandler_GetConfigArrayColumnTitle_Params params;
	params.ConfigArrayName = ConfigArrayName;
	params.ColumnIndex = ColumnIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingHandler.GetConfigArrayData
// (Public)
// Parameters:
// struct FString                 ConfigArrayName                (Parm, NeedCtorLink)
// int                            RowIndex                       (Parm)
// int                            ColumnIndex                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AVotingHandler::GetConfigArrayData(const struct FString& ConfigArrayName, int RowIndex, int ColumnIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.GetConfigArrayData");

	AVotingHandler_GetConfigArrayData_Params params;
	params.ConfigArrayName = ConfigArrayName;
	params.RowIndex = RowIndex;
	params.ColumnIndex = ColumnIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingHandler.HandleRestartGame
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AVotingHandler::HandleRestartGame()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.HandleRestartGame");

	AVotingHandler_HandleRestartGame_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.VotingHandler.PlayerExit
// (Public)
// Parameters:
// class AController*             Exiting                        (Parm)

void AVotingHandler::PlayerExit(class AController* Exiting)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.PlayerExit");

	AVotingHandler_PlayerExit_Params params;
	params.Exiting = Exiting;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.VotingHandler.PlayerJoin
// (Public)
// Parameters:
// class APlayerController*       Player                         (Parm)

void AVotingHandler::PlayerJoin(class APlayerController* Player)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.VotingHandler.PlayerJoin");

	AVotingHandler_PlayerJoin_Params params;
	params.Player = Player;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.MaplistDirty
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::MaplistDirty(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.MaplistDirty");

	AMaplistManager_MaplistDirty_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ValidName
// (Defined, Public)
// Parameters:
// struct FString                 S                              (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::ValidName(const struct FString& S)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ValidName");

	AMaplistManager_ValidName_Params params;
	params.S = S;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ValidGameType
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::ValidGameType(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ValidGameType");

	AMaplistManager_ValidGameType_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ValidGameIndex
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::ValidGameIndex(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ValidGameIndex");

	AMaplistManager_ValidGameIndex_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ValidCacheGameIndex
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::ValidCacheGameIndex(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ValidCacheGameIndex");

	AMaplistManager_ValidCacheGameIndex_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetActiveMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::GetActiveMap(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetActiveMap");

	AMaplistManager_GetActiveMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetActiveList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::GetActiveList(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetActiveList");

	AMaplistManager_GetActiveList_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetMapListTitle
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMaplistManager::GetMapListTitle(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetMapListTitle");

	AMaplistManager_GetMapListTitle_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetRecordIndex
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// struct FString                 MapListName                    (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::GetRecordIndex(int GameIndex, const struct FString& MapListName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetRecordIndex");

	AMaplistManager_GetRecordIndex_Params params;
	params.GameIndex = GameIndex;
	params.MapListName = MapListName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetMapIndex
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::GetMapIndex(int GameIndex, int RecordIndex, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetMapIndex");

	AMaplistManager_GetMapIndex_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.FindMaplistContaining
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::FindMaplistContaining(int GameIndex, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.FindMaplistContaining");

	AMaplistManager_FindMaplistContaining_Params params;
	params.GameIndex = GameIndex;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetCacheMapList
// (Defined, Public)
// Parameters:
// struct FString                 Acronym                        (Parm, NeedCtorLink)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManager::GetCacheMapList(const struct FString& Acronym)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetCacheMapList");

	AMaplistManager_GetCacheMapList_Params params;
	params.Acronym = Acronym;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetAvailableMaps
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// TArray<struct FMapItem>        AR                             (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::GetAvailableMaps(int GameIndex, TArray<struct FMapItem>* AR)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetAvailableMaps");

	AMaplistManager_GetAvailableMaps_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (AR != nullptr)
		*AR = params.AR;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetMapList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManager::GetMapList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetMapList");

	AMaplistManager_GetMapList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetMapURL
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            MapIndex                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMaplistManager::GetMapURL(int GameIndex, int RecordIndex, int MapIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetMapURL");

	AMaplistManager_GetMapURL_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapIndex = MapIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetMapTitle
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            MapIndex                       (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMaplistManager::GetMapTitle(int GameIndex, int RecordIndex, int MapIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetMapTitle");

	AMaplistManager_GetMapTitle_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapIndex = MapIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetActiveMapName
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AMaplistManager::GetActiveMapName(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetActiveMapName");

	AMaplistManager_GetActiveMapName_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetCurrentMapRotation
// (Defined, Public)
// Parameters:
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManager::GetCurrentMapRotation()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetCurrentMapRotation");

	AMaplistManager_GetCurrentMapRotation_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetMapListNames
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// TArray<struct FString>         ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<struct FString> AMaplistManager::GetMapListNames(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetMapListNames");

	AMaplistManager_GetMapListNames_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetCacheGameIndex
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::GetCacheGameIndex(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetCacheGameIndex");

	AMaplistManager_GetCacheGameIndex_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetGameIndex
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, CoerceParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::GetGameIndex(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetGameIndex");

	AMaplistManager_GetGameIndex_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.SetActiveMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            MapIndex                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::SetActiveMap(int GameIndex, int RecordIndex, int MapIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.SetActiveMap");

	AMaplistManager_SetActiveMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapIndex = MapIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ShiftMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            Count                          (Parm)

void AMaplistManager::ShiftMap(int GameIndex, int RecordIndex, const struct FString& MapName, int Count)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ShiftMap");

	AMaplistManager_ShiftMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;
	params.Count = Count;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.RemoveMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::RemoveMap(int GameIndex, int RecordIndex, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.RemoveMap");

	AMaplistManager_RemoveMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.InsertMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// int                            ListIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::InsertMap(int GameIndex, int RecordIndex, const struct FString& MapName, int ListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.InsertMap");

	AMaplistManager_InsertMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;
	params.ListIndex = ListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.AddMap
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 MapName                        (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::AddMap(int GameIndex, int RecordIndex, const struct FString& MapName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.AddMap");

	AMaplistManager_AddMap_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.MapName = MapName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.SetActiveList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            NewActive                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::SetActiveList(int GameIndex, int NewActive)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.SetActiveList");

	AMaplistManager_SetActiveList_Params params;
	params.GameIndex = GameIndex;
	params.NewActive = NewActive;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ApplyMapList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::ApplyMapList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ApplyMapList");

	AMaplistManager_ApplyMapList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ResetGame
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)

void AMaplistManager::ResetGame(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ResetGame");

	AMaplistManager_ResetGame_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.SaveGame
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::SaveGame(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.SaveGame");

	AMaplistManager_SaveGame_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.ResetList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)

void AMaplistManager::ResetList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ResetList");

	AMaplistManager_ResetList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.ClearList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::ClearList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ClearList");

	AMaplistManager_ClearList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.SaveMapList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::SaveMapList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.SaveMapList");

	AMaplistManager_SaveMapList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.RemoveList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::RemoveList(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.RemoveList");

	AMaplistManager_RemoveList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.RenameList
// (Defined, Public)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// struct FString                 NewName                        (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::RenameList(int GameIndex, int RecordIndex, const struct FString& NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.RenameList");

	AMaplistManager_RenameList_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;
	params.NewName = NewName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.AddList
// (Defined, Public)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// struct FString                 NewName                        (Parm, NeedCtorLink)
// TArray<struct FString>         Maps                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::AddList(const struct FString& GameType, const struct FString& NewName, TArray<struct FString> Maps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.AddList");

	AMaplistManager_AddList_Params params;
	params.GameType = GameType;
	params.NewName = NewName;
	params.Maps = Maps;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.MapChange
// (Defined, Public)
// Parameters:
// struct FString                 NewMap                         (Parm, NeedCtorLink)

void AMaplistManager::MapChange(const struct FString& NewMap)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.MapChange");

	AMaplistManager_MapChange_Params params;
	params.NewMap = NewMap;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.ValidRecordIndex
// (Defined, Protected)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            MapListIndex                   (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::ValidRecordIndex(int GameIndex, int MapListIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.ValidRecordIndex");

	AMaplistManager_ValidRecordIndex_Params params;
	params.GameIndex = GameIndex;
	params.MapListIndex = MapListIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GetRecords
// (Defined, Protected)
// Parameters:
// int                            GameIndex                      (Parm)
// TArray<class UMaplistRecord*>  ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

TArray<class UMaplistRecord*> AMaplistManager::GetRecords(int GameIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetRecords");

	AMaplistManager_GetRecords_Params params;
	params.GameIndex = GameIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.IsNewGameType
// (Defined, Protected)
// Parameters:
// struct FString                 GameClassName                  (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::IsNewGameType(const struct FString& GameClassName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.IsNewGameType");

	AMaplistManager_IsNewGameType_Params params;
	params.GameClassName = GameClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.CreateRecord
// (Defined, Protected)
// Parameters:
// struct FString                 RecordName                     (Parm, NeedCtorLink)
// class UMaplistRecord*          ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaplistRecord* AMaplistManager::CreateRecord(const struct FString& RecordName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.CreateRecord");

	AMaplistManager_CreateRecord_Params params;
	params.RecordName = RecordName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.Save
// (Defined, Protected)

void AMaplistManager::Save()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.Save");

	AMaplistManager_Save_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.GetStoredGameIndex
// (Defined, Protected)
// Parameters:
// struct FString                 GameType                       (Parm, CoerceParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::GetStoredGameIndex(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetStoredGameIndex");

	AMaplistManager_GetStoredGameIndex_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.RemoveRecord
// (Defined, Protected)
// Parameters:
// int                            GameIndex                      (Parm)
// int                            RecordIndex                    (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::RemoveRecord(int GameIndex, int RecordIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.RemoveRecord");

	AMaplistManager_RemoveRecord_Params params;
	params.GameIndex = GameIndex;
	params.RecordIndex = RecordIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.RemoveGame
// (Defined, Protected)
// Parameters:
// int                            i                              (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::RemoveGame(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.RemoveGame");

	AMaplistManager_RemoveGame_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.GenerateGroupMaplist
// (Defined, Protected)
// Parameters:
// int                            GroupIndex                     (Parm)

void AMaplistManager::GenerateGroupMaplist(int GroupIndex)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GenerateGroupMaplist");

	AMaplistManager_GenerateGroupMaplist_Params params;
	params.GroupIndex = GroupIndex;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.AddGameType
// (Defined, Protected)
// Parameters:
// struct FString                 NewGameType                    (Parm, CoerceParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::AddGameType(const struct FString& NewGameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.AddGameType");

	AMaplistManager_AddGameType_Params params;
	params.NewGameType = NewGameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.AddGroup
// (Defined, Protected)
// Parameters:
// struct FString                 GameType                       (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::AddGroup(const struct FString& GameType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.AddGroup");

	AMaplistManager_AddGroup_Params params;
	params.GameType = GameType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.AddMaplistRecord
// (Defined, Protected)
// Parameters:
// class UMaplistRecord*          Rec                            (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AMaplistManager::AddMaplistRecord(class UMaplistRecord* Rec)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.AddMaplistRecord");

	AMaplistManager_AddMaplistRecord_Params params;
	params.Rec = Rec;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.InitializeActiveLists
// (Defined, Protected)

void AMaplistManager::InitializeActiveLists()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.InitializeActiveLists");

	AMaplistManager_InitializeActiveLists_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.InitializeMaplistRecords
// (Defined, Protected)

void AMaplistManager::InitializeMaplistRecords()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.InitializeMaplistRecords");

	AMaplistManager_InitializeMaplistRecords_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.GetDefaultMaps
// (Defined, Public)
// Parameters:
// struct FString                 MapListClassName               (Parm, NeedCtorLink)
// TArray<struct FString>         Maps                           (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AMaplistManager::GetDefaultMaps(const struct FString& MapListClassName, TArray<struct FString>* Maps)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.GetDefaultMaps");

	AMaplistManager_GetDefaultMaps_Params params;
	params.MapListClassName = MapListClassName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Maps != nullptr)
		*Maps = params.Maps;

	return params.ReturnValue;
}


// Function Engine.MaplistManager.CreateDefaultList
// (Defined, Protected)
// Parameters:
// int                            i                              (Parm)

void AMaplistManager::CreateDefaultList(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.CreateDefaultList");

	AMaplistManager_CreateDefaultList_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.Destroyed
// (Defined, Event, Public)

void AMaplistManager::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.Destroyed");

	AMaplistManager_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaplistManager.PreBeginPlay
// (Defined, Event, Public)

void AMaplistManager::PreBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaplistManager.PreBeginPlay");

	AMaplistManager_PreBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterFirstPerson.PostNetBeginPlay
// (Defined, Event, Public)

void AEmitterFirstPerson::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterFirstPerson.PostNetBeginPlay");

	AEmitterFirstPerson_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterFirstPerson.DestroyIfThirdPerson
// (Defined, Simulated, Public)

void AEmitterFirstPerson::DestroyIfThirdPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterFirstPerson.DestroyIfThirdPerson");

	AEmitterFirstPerson_DestroyIfThirdPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ShadowProjector.LightUpdate
// (Defined, Simulated, Public)
// Parameters:
// TArray<class AActor*>          LightSources                   (Parm, NeedCtorLink)

void AShadowProjector::LightUpdate(TArray<class AActor*> LightSources)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ShadowProjector.LightUpdate");

	AShadowProjector_LightUpdate_Params params;
	params.LightSources = LightSources;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ShadowProjector.UpdateSunLight
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 SunDir                         (Parm)

void AShadowProjector::UpdateSunLight(const struct FVector& SunDir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ShadowProjector.UpdateSunLight");

	AShadowProjector_UpdateSunLight_Params params;
	params.SunDir = SunDir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ShadowProjector.Tick
// (Defined, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AShadowProjector::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ShadowProjector.Tick");

	AShadowProjector_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ShadowProjector.UpdateShadow
// (Defined, Public)

void AShadowProjector::UpdateShadow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ShadowProjector.UpdateShadow");

	AShadowProjector_UpdateShadow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ShadowProjector.InitShadow
// (Defined, Public)

void AShadowProjector::InitShadow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ShadowProjector.InitShadow");

	AShadowProjector_InitShadow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ShadowProjector.Destroyed
// (Defined, Event, Public)

void AShadowProjector::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ShadowProjector.Destroyed");

	AShadowProjector_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ShadowProjector.PostBeginPlay
// (Defined, Event, Public)

void AShadowProjector::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ShadowProjector.PostBeginPlay");

	AShadowProjector_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.GetEnableCount
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwSkill::GetEnableCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.GetEnableCount");

	UwSkill_GetEnableCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill.SetEnableCount
// (Defined, Simulated, Public)
// Parameters:
// int                            iCount                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwSkill::SetEnableCount(int iCount)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.SetEnableCount");

	UwSkill_SetEnableCount_Params params;
	params.iCount = iCount;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill.GetMaxActiveTime
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwSkill::GetMaxActiveTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.GetMaxActiveTime");

	UwSkill_GetMaxActiveTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill.GetMaxCoolTime
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwSkill::GetMaxCoolTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.GetMaxCoolTime");

	UwSkill_GetMaxCoolTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill.Client_AddProcess
// (Defined, Simulated, Public)

void UwSkill::Client_AddProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.Client_AddProcess");

	UwSkill_Client_AddProcess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.ActiveSkill
// (Defined, Public)

void UwSkill::ActiveSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.ActiveSkill");

	UwSkill_ActiveSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.AddProcess
// (Defined, Public)

void UwSkill::AddProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.AddProcess");

	UwSkill_AddProcess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.GetTopInfoFontSize
// (Defined, Simulated, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwSkill::GetTopInfoFontSize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.GetTopInfoFontSize");

	UwSkill_GetTopInfoFontSize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill.GetTopInfo
// (Defined, Simulated, Public)
// Parameters:
// struct FString                 strInfo                        (Parm, OutParm, NeedCtorLink)
// struct FString                 strCountInfo                   (Parm, OutParm, NeedCtorLink)
// int                            FontSize                       (Parm, OutParm)

void UwSkill::GetTopInfo(struct FString* strInfo, struct FString* strCountInfo, int* FontSize)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.GetTopInfo");

	UwSkill_GetTopInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (strInfo != nullptr)
		*strInfo = params.strInfo;
	if (strCountInfo != nullptr)
		*strCountInfo = params.strCountInfo;
	if (FontSize != nullptr)
		*FontSize = params.FontSize;
}


// Function Engine.wSkill.ChangedQuickSlot
// (Simulated, Public)

void UwSkill::ChangedQuickSlot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.ChangedQuickSlot");

	UwSkill_ChangedQuickSlot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.SetbUpdateCall
// (Defined, Simulated, Public)
// Parameters:
// bool                           bValue                         (Parm)

void UwSkill::SetbUpdateCall(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.SetbUpdateCall");

	UwSkill_SetbUpdateCall_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.ChangeAddValue
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  byValue                        (Parm)

void UwSkill::ChangeAddValue(unsigned char byValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.ChangeAddValue");

	UwSkill_ChangeAddValue_Params params;
	params.byValue = byValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.Client_SetbyAddCount
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  byValue                        (Parm)

void UwSkill::Client_SetbyAddCount(unsigned char byValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.Client_SetbyAddCount");

	UwSkill_Client_SetbyAddCount_Params params;
	params.byValue = byValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.SetbyAddCount
// (Defined, Public)
// Parameters:
// unsigned char                  byValue                        (Parm)

void UwSkill::SetbyAddCount(unsigned char byValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.SetbyAddCount");

	UwSkill_SetbyAddCount_Params params;
	params.byValue = byValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.SetbUsed
// (Defined, Simulated, Public)
// Parameters:
// bool                           bValue                         (Parm)

void UwSkill::SetbUsed(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.SetbUsed");

	UwSkill_SetbUsed_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.SetIsEnable
// (Defined, Simulated, Public)
// Parameters:
// bool                           bValue                         (Parm)

void UwSkill::SetIsEnable(bool bValue)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.SetIsEnable");

	UwSkill_SetIsEnable_Params params;
	params.bValue = bValue;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.UsedbyWeapon
// (Defined, Simulated, Public)

void UwSkill::UsedbyWeapon()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.UsedbyWeapon");

	UwSkill_UsedbyWeapon_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.Initialize
// (Defined, Simulated, Public)
// Parameters:
// class UwSkillBase*             SkillBase                      (Parm)
// class UwSkillBaseParam*        Param                          (Parm)

void UwSkill::Initialize(class UwSkillBase* SkillBase, class UwSkillBaseParam* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.Initialize");

	UwSkill_Initialize_Params params;
	params.SkillBase = SkillBase;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.ResetSkill
// (Defined, Simulated, Public)

void UwSkill::ResetSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.ResetSkill");

	UwSkill_ResetSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.DeadPlayer
// (Defined, Simulated, Public)

void UwSkill::DeadPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.DeadPlayer");

	UwSkill_DeadPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.RemoveSkill
// (Simulated, Public)

void UwSkill::RemoveSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.RemoveSkill");

	UwSkill_RemoveSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.UpdateProcess
// (Simulated, Public)

void UwSkill::UpdateProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.UpdateProcess");

	UwSkill_UpdateProcess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill.PostBeginPlay
// (Simulated, Public)

void UwSkill::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill.PostBeginPlay");

	UwSkill_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_RestoreSupply.UpdateProcess
// (Defined, Simulated, Public)

void UwSkill_RestoreSupply::UpdateProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_RestoreSupply.UpdateProcess");

	UwSkill_RestoreSupply_UpdateProcess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_RestoreSupply.RemoveSupplyItem
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)

void UwSkill_RestoreSupply::RemoveSupplyItem(TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_RestoreSupply.RemoveSupplyItem");

	UwSkill_RestoreSupply_RemoveSupplyItem_Params params;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_RestoreSupply.SetSupplyItem
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType                (Parm)

void UwSkill_RestoreSupply::SetSupplyItem(TEnumAsByte<ESUPPLY_ITEM_TYPE> eSupplyItemType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_RestoreSupply.SetSupplyItem");

	UwSkill_RestoreSupply_SetSupplyItem_Params params;
	params.eSupplyItemType = eSupplyItemType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_RestoreSupply.RemoveSkill
// (Defined, Simulated, Public)

void UwSkill_RestoreSupply::RemoveSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_RestoreSupply.RemoveSkill");

	UwSkill_RestoreSupply_RemoveSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_RestoreSupply.PostBeginPlay
// (Defined, Simulated, Public)

void UwSkill_RestoreSupply::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_RestoreSupply.PostBeginPlay");

	UwSkill_RestoreSupply_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_RestoreSupply.Initialize
// (Defined, Simulated, Public)
// Parameters:
// class UwSkillBase*             SkillBase                      (Parm)
// class UwSkillBaseParam*        Param                          (Parm)

void UwSkill_RestoreSupply::Initialize(class UwSkillBase* SkillBase, class UwSkillBaseParam* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_RestoreSupply.Initialize");

	UwSkill_RestoreSupply_Initialize_Params params;
	params.SkillBase = SkillBase;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HudOverlay.Destroyed
// (Defined, Simulated, Public)

void AHudOverlay::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HudOverlay.Destroyed");

	AHudOverlay_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.HudOverlay.Render
// (Simulated, Public)
// Parameters:
// class UCanvas*                 C                              (Parm)

void AHudOverlay::Render(class UCanvas* C)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.HudOverlay.Render");

	AHudOverlay_Render_Params params;
	params.C = C;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.FailedConnect.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AFailedConnect::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetString");

	AFailedConnect_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.FailedConnect.GetFailSwitch
// (Defined, Static, Public)
// Parameters:
// struct FString                 FailString                     (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int AFailedConnect::STATIC_GetFailSwitch(const struct FString& FailString)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.FailedConnect.GetFailSwitch");

	AFailedConnect_GetFailSwitch_Params params;
	params.FailString = FailString;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAimFire.ModeDoFire
// (Defined, Event, Public)

void UwAimFire::ModeDoFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.ModeDoFire");

	UwAimFire_ModeDoFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.PlayFireEnd
// (Defined, Public)

void UwAimFire::PlayFireEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.PlayFireEnd");

	UwAimFire_PlayFireEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.SetFOV
// (Defined, Public)
// Parameters:
// bool                           bFOV                           (Parm)

void UwAimFire::SetFOV(bool bFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.SetFOV");

	UwAimFire_SetFOV_Params params;
	params.bFOV = bFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.SetAim
// (Defined, Public)
// Parameters:
// bool                           bAim                           (Parm)

void UwAimFire::SetAim(bool bAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.SetAim");

	UwAimFire_SetAim_Params params;
	params.bAim = bAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.ShakeView
// (Defined, Public)

void UwAimFire::ShakeView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.ShakeView");

	UwAimFire_ShakeView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.RenderOverlays
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canv                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAimFire::RenderOverlays(class UCanvas* Canv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.RenderOverlays");

	UwAimFire_RenderOverlays_Params params;
	params.Canv = Canv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAimFire.wLoadOut
// (Defined, Simulated, Public)

void UwAimFire::wLoadOut()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.wLoadOut");

	UwAimFire_wLoadOut_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.StartMuzzleSmoke
// (Defined, Public)

void UwAimFire::StartMuzzleSmoke()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.StartMuzzleSmoke");

	UwAimFire_StartMuzzleSmoke_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.FlashMuzzleFlash
// (Defined, Public)

void UwAimFire::FlashMuzzleFlash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.FlashMuzzleFlash");

	UwAimFire_FlashMuzzleFlash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAimFire.PlayFiring
// (Defined, Public)

void UwAimFire::PlayFiring()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAimFire.PlayFiring");

	UwAimFire_PlayFiring_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wZoomFire3D.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void UwZoomFire3D::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.DisplayDebug");

	UwZoomFire3D_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.wZoomFire3D.RenderOverlays
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canv                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwZoomFire3D::RenderOverlays(class UCanvas* Canv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.RenderOverlays");

	UwZoomFire3D_RenderOverlays_Params params;
	params.Canv = Canv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wZoomFire3D.ModeTick
// (Defined, Event, Public)
// Parameters:
// float                          dt                             (Parm)

void UwZoomFire3D::ModeTick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.ModeTick");

	UwZoomFire3D_ModeTick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wZoomFire3D.PlayFireEnd
// (Defined, Public)

void UwZoomFire3D::PlayFireEnd()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.PlayFireEnd");

	UwZoomFire3D_PlayFireEnd_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wZoomFire3D.Switch3DScope
// (Defined, Public)
// Parameters:
// bool                           bAiming                        (Parm)

void UwZoomFire3D::Switch3DScope(bool bAiming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.Switch3DScope");

	UwZoomFire3D_Switch3DScope_Params params;
	params.bAiming = bAiming;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wZoomFire3D.SetFOV
// (Defined, Public)
// Parameters:
// bool                           bFOV                           (Parm)

void UwZoomFire3D::SetFOV(bool bFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.SetFOV");

	UwZoomFire3D_SetFOV_Params params;
	params.bFOV = bFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wZoomFire3D.SetAim
// (Defined, Public)
// Parameters:
// bool                           bAim                           (Parm)

void UwZoomFire3D::SetAim(bool bAim)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.SetAim");

	UwZoomFire3D_SetAim_Params params;
	params.bAim = bAim;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wZoomFire3D.PostBeginPlay
// (Defined, Simulated, Public)

void UwZoomFire3D::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wZoomFire3D.PostBeginPlay");

	UwZoomFire3D_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.UnlinkGroups
// (Defined, Public)

void UwAdminUser::UnlinkGroups()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.UnlinkGroups");

	UwAdminUser_UnlinkGroups_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.GetManagedUsers
// (Defined, Public)
// Parameters:
// class UwAdminGroupList*        uAllGroups                     (Parm)
// class UwAdminUserList*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminUserList* UwAdminUser::GetManagedUsers(class UwAdminGroupList* uAllGroups)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.GetManagedUsers");

	UwAdminUser_GetManagedUsers_Params params;
	params.uAllGroups = uAllGroups;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.GetManagedGroup
// (Defined, Public)
// Parameters:
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// class UwAdminGroup*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminGroup* UwAdminUser::GetManagedGroup(const struct FString& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.GetManagedGroup");

	UwAdminUser_GetManagedGroup_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.GetGroup
// (Defined, Public)
// Parameters:
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// class UwAdminGroup*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminGroup* UwAdminUser::GetGroup(const struct FString& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.GetGroup");

	UwAdminUser_GetGroup_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.MaxSecLevel
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwAdminUser::MaxSecLevel()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.MaxSecLevel");

	UwAdminUser_MaxSecLevel_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.ValidName
// (Defined, Static, Public)
// Parameters:
// struct FString                 uname                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminUser::STATIC_ValidName(const struct FString& uname)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.ValidName");

	UwAdminUser_ValidName_Params params;
	params.uname = uname;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.ValidPass
// (Defined, Static, Public)
// Parameters:
// struct FString                 upass                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminUser::STATIC_ValidPass(const struct FString& upass)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.ValidPass");

	UwAdminUser_ValidPass_Params params;
	params.upass = upass;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.CanManageUser
// (Defined, Public)
// Parameters:
// class UwAdminUser*             User                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminUser::CanManageUser(class UwAdminUser* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.CanManageUser");

	UwAdminUser_CanManageUser_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.CanManageGroup
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminUser::CanManageGroup(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.CanManageGroup");

	UwAdminUser_CanManageGroup_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.MergePrivs
// (Defined, Private)
// Parameters:
// struct FString                 newprivs                       (Parm, NeedCtorLink)

void UwAdminUser::MergePrivs(const struct FString& newprivs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.MergePrivs");

	UwAdminUser_MergePrivs_Params params;
	params.newprivs = newprivs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.RedoMergedPrivs
// (Defined, Public)

void UwAdminUser::RedoMergedPrivs()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.RedoMergedPrivs");

	UwAdminUser_RedoMergedPrivs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.HasPrivilege
// (Defined, Public)
// Parameters:
// struct FString                 priv                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminUser::HasPrivilege(const struct FString& priv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.HasPrivilege");

	UwAdminUser_HasPrivilege_Params params;
	params.priv = priv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUser.AddManagedGroupsByName
// (Defined, Public)
// Parameters:
// class UwAdminGroupList*        lGroups                        (Parm)
// TArray<struct FString>         aGroupNames                    (Parm, NeedCtorLink)

void UwAdminUser::AddManagedGroupsByName(class UwAdminGroupList* lGroups, TArray<struct FString> aGroupNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.AddManagedGroupsByName");

	UwAdminUser_AddManagedGroupsByName_Params params;
	params.lGroups = lGroups;
	params.aGroupNames = aGroupNames;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.AddGroupsByName
// (Defined, Public)
// Parameters:
// class UwAdminGroupList*        lGroups                        (Parm)
// TArray<struct FString>         aGroupNames                    (Parm, NeedCtorLink)

void UwAdminUser::AddGroupsByName(class UwAdminGroupList* lGroups, TArray<struct FString> aGroupNames)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.AddGroupsByName");

	UwAdminUser_AddGroupsByName_Params params;
	params.lGroups = lGroups;
	params.aGroupNames = aGroupNames;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.RemoveManagedGroup
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)

void UwAdminUser::RemoveManagedGroup(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.RemoveManagedGroup");

	UwAdminUser_RemoveManagedGroup_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.AddManagedGroup
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)

void UwAdminUser::AddManagedGroup(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.AddManagedGroup");

	UwAdminUser_AddManagedGroup_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.RemoveGroup
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)

void UwAdminUser::RemoveGroup(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.RemoveGroup");

	UwAdminUser_RemoveGroup_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.AddGroup
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)

void UwAdminUser::AddGroup(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.AddGroup");

	UwAdminUser_AddGroup_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.Init
// (Defined, Public)
// Parameters:
// struct FString                 uname                          (Parm, NeedCtorLink)
// struct FString                 PASS                           (Parm, NeedCtorLink)
// struct FString                 privs                          (Parm, NeedCtorLink)

void UwAdminUser::Init(const struct FString& uname, const struct FString& PASS, const struct FString& privs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.Init");

	UwAdminUser_Init_Params params;
	params.uname = uname;
	params.PASS = PASS;
	params.privs = privs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUser.Created
// (Defined, Public)

void UwAdminUser::Created()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUser.Created");

	UwAdminUser_Created_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroup.HasPrivilege
// (Defined, Public)
// Parameters:
// struct FString                 priv                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminGroup::HasPrivilege(const struct FString& priv)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroup.HasPrivilege");

	UwAdminGroup_HasPrivilege_Params params;
	params.priv = priv;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroup.RemoveUser
// (Defined, Public)
// Parameters:
// class UwAdminUser*             User                           (Parm)

void UwAdminGroup::RemoveUser(class UwAdminUser* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroup.RemoveUser");

	UwAdminGroup_RemoveUser_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroup.UnlinkUsers
// (Defined, Public)

void UwAdminGroup::UnlinkUsers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroup.UnlinkUsers");

	UwAdminGroup_UnlinkUsers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroup.ValidName
// (Defined, Static, Public)
// Parameters:
// struct FString                 uname                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminGroup::STATIC_ValidName(const struct FString& uname)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroup.ValidName");

	UwAdminGroup_ValidName_Params params;
	params.uname = uname;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroup.SetPrivs
// (Defined, Public)
// Parameters:
// struct FString                 privs                          (Parm, NeedCtorLink)

void UwAdminGroup::SetPrivs(const struct FString& privs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroup.SetPrivs");

	UwAdminGroup_SetPrivs_Params params;
	params.privs = privs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroup.Init
// (Defined, Public)
// Parameters:
// struct FString                 sGroupName                     (Parm, NeedCtorLink)
// struct FString                 sPrivileges                    (Parm, NeedCtorLink)
// unsigned char                  nGameSecLevel                  (Parm)

void UwAdminGroup::Init(const struct FString& sGroupName, const struct FString& sPrivileges, unsigned char nGameSecLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroup.Init");

	UwAdminGroup_Init_Params params;
	params.sGroupName = sGroupName;
	params.sPrivileges = sPrivileges;
	params.nGameSecLevel = nGameSecLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroup.Created
// (Defined, Public)

void UwAdminGroup::Created()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroup.Created");

	UwAdminGroup_Created_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUserList.FindByName
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// class UwAdminUser*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminUser* UwAdminUserList::FindByName(const struct FString& UserName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.FindByName");

	UwAdminUserList_FindByName_Params params;
	params.UserName = UserName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUserList.Contains
// (Defined, Public)
// Parameters:
// class UwAdminUser*             User                           (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminUserList::Contains(class UwAdminUser* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.Contains");

	UwAdminUserList_Contains_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUserList.Clear
// (Defined, Public)

void UwAdminUserList::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.Clear");

	UwAdminUserList_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUserList.Remove
// (Defined, Public)
// Parameters:
// class UwAdminUser*             User                           (Parm)

void UwAdminUserList::Remove(class UwAdminUser* User)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.Remove");

	UwAdminUserList_Remove_Params params;
	params.User = User;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUserList.Get
// (Defined, Public)
// Parameters:
// int                            i                              (Parm)
// class UwAdminUser*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminUser* UwAdminUserList::Get(int i)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.Get");

	UwAdminUserList_Get_Params params;
	params.i = i;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUserList.Add
// (Defined, Public)
// Parameters:
// class UwAdminUser*             NewUser                        (Parm)

void UwAdminUserList::Add(class UwAdminUser* NewUser)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.Add");

	UwAdminUserList_Add_Params params;
	params.NewUser = NewUser;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminUserList.Create
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)
// struct FString                 Privileges                     (Parm, NeedCtorLink)
// class UwAdminUser*             ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminUser* UwAdminUserList::Create(const struct FString& UserName, const struct FString& Password, const struct FString& Privileges)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.Create");

	UwAdminUserList_Create_Params params;
	params.UserName = UserName;
	params.Password = Password;
	params.Privileges = Privileges;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminUserList.Count
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwAdminUserList::Count()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminUserList.Count");

	UwAdminUserList_Count_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroupList.Clear
// (Defined, Public)

void UwAdminGroupList::Clear()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.Clear");

	UwAdminGroupList_Clear_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroupList.FindMasterGroup
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminGroup* UwAdminGroupList::FindMasterGroup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.FindMasterGroup");

	UwAdminGroupList_FindMasterGroup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroupList.Contains
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwAdminGroupList::Contains(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.Contains");

	UwAdminGroupList_Contains_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroupList.FindByName
// (Defined, Public)
// Parameters:
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// class UwAdminGroup*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminGroup* UwAdminGroupList::FindByName(const struct FString& GroupName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.FindByName");

	UwAdminGroupList_FindByName_Params params;
	params.GroupName = GroupName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroupList.Get
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// class UwAdminGroup*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminGroup* UwAdminGroupList::Get(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.Get");

	UwAdminGroupList_Get_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroupList.Remove
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)

void UwAdminGroupList::Remove(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.Remove");

	UwAdminGroupList_Remove_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroupList.Add
// (Defined, Public)
// Parameters:
// class UwAdminGroup*            Group                          (Parm)

void UwAdminGroupList::Add(class UwAdminGroup* Group)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.Add");

	UwAdminGroupList_Add_Params params;
	params.Group = Group;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wAdminGroupList.CreateGroup
// (Defined, Public)
// Parameters:
// struct FString                 GroupName                      (Parm, NeedCtorLink)
// struct FString                 Privileges                     (Parm, NeedCtorLink)
// unsigned char                  GameSecLevel                   (Parm)
// class UwAdminGroup*            ReturnValue                    (Parm, OutParm, ReturnParm)

class UwAdminGroup* UwAdminGroupList::CreateGroup(const struct FString& GroupName, const struct FString& Privileges, unsigned char GameSecLevel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.CreateGroup");

	UwAdminGroupList_CreateGroup_Params params;
	params.GroupName = GroupName;
	params.Privileges = Privileges;
	params.GameSecLevel = GameSecLevel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wAdminGroupList.Count
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UwAdminGroupList::Count()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wAdminGroupList.Count");

	UwAdminGroupList_Count_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wPrivilegeBase.Created
// (Defined, Event, Public)

void UwPrivilegeBase::Created()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wPrivilegeBase.Created");

	UwPrivilegeBase_Created_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.DoLogout
// (Defined, Public)

void UAdmin::DoLogout()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.DoLogout");

	UAdmin_DoLogout_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Admin.DoLogin
// (Defined, Public)
// Parameters:
// struct FString                 UserName                       (Parm, NeedCtorLink)
// struct FString                 Password                       (Parm, NeedCtorLink)

void UAdmin::DoLogin(const struct FString& UserName, const struct FString& Password)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Admin.DoLogin");

	UAdmin_DoLogin_Params params;
	params.UserName = UserName;
	params.Password = Password;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Fragment.RandSpin
// (Final, Defined, Simulated, Public)
// Parameters:
// float                          spinRate                       (Parm)

void AFragment::RandSpin(float spinRate)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Fragment.RandSpin");

	AFragment_RandSpin_Params params;
	params.spinRate = spinRate;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Fragment.HitWall
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  HitWall                        (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void AFragment::HitWall(const struct FVector& HitNormal, class AActor* HitWall, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Fragment.HitWall");

	AFragment_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.HitWall = HitWall;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Fragment.CalcVelocity
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 Momentum                       (Parm)

void AFragment::CalcVelocity(const struct FVector& Momentum)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Fragment.CalcVelocity");

	AFragment_CalcVelocity_Params params;
	params.Momentum = Momentum;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Fragment.CanSplash
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AFragment::CanSplash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Fragment.CanSplash");

	AFragment_CanSplash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UnitTest.DQ
// (Defined, Public)

void AUnitTest::DQ()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.DQ");

	AUnitTest_DQ_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UnitTest.EQ
// (Defined, Public)
// Parameters:
// class AActor*                  A                              (Parm)
// class AActor*                  ReturnValue                    (Parm, OutParm, ReturnParm)

class AActor* AUnitTest::EQ(class AActor* A)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.EQ");

	AUnitTest_EQ_Params params;
	params.A = A;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UnitTest.Check
// (Defined, Public)
// Parameters:
// bool                           Valid                          (Parm)
// struct FString                 Msg                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AUnitTest::Check(bool Valid, const struct FString& Msg)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.Check");

	AUnitTest_Check_Params params;
	params.Valid = Valid;
	params.Msg = Msg;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UnitTest.RunUnitTest
// (Defined, Public)
// Parameters:
// int                            SW                             (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AUnitTest::RunUnitTest(int SW)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.RunUnitTest");

	AUnitTest_RunUnitTest_Params params;
	params.SW = SW;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.UnitTest.TestTearOff
// (Defined, Public)

void AUnitTest::TestTearOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.TestTearOff");

	AUnitTest_TestTearOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UnitTest.TestSetup
// (Defined, Public)

void AUnitTest::TestSetup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.TestSetup");

	AUnitTest_TestSetup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UnitTest.FixtureTearOff
// (Defined, Public)

void AUnitTest::FixtureTearOff()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.FixtureTearOff");

	AUnitTest_FixtureTearOff_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.UnitTest.FixtureSetup
// (Defined, Public)

void AUnitTest::FixtureSetup()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.UnitTest.FixtureSetup");

	AUnitTest_FixtureSetup_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.DisplayDebug
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)
// float                          YL                             (Parm, OutParm)
// float                          YPos                           (Parm, OutParm)

void AwFPWeaponAttachment::DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.DisplayDebug");

	AwFPWeaponAttachment_DisplayDebug_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (YL != nullptr)
		*YL = params.YL;
	if (YPos != nullptr)
		*YPos = params.YPos;
}


// Function Engine.wFPWeaponAttachment.RenderOverlays
// (Defined, Simulated, Event, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AwFPWeaponAttachment::RenderOverlays(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.RenderOverlays");

	AwFPWeaponAttachment_RenderOverlays_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.FPCalcSpread
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::FPCalcSpread()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.FPCalcSpread");

	AwFPWeaponAttachment_FPCalcSpread_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.FPModeDoFire
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::FPModeDoFire()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.FPModeDoFire");

	AwFPWeaponAttachment_FPModeDoFire_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.TickFPWeapon
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AwFPWeaponAttachment::TickFPWeapon(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.TickFPWeapon");

	AwFPWeaponAttachment_TickFPWeapon_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.RefreshState
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::RefreshState()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.RefreshState");

	AwFPWeaponAttachment_RefreshState_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.IsActive
// (Defined, Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwFPWeaponAttachment::IsActive()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.IsActive");

	AwFPWeaponAttachment_IsActive_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wFPWeaponAttachment.ShakeView
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::ShakeView()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.ShakeView");

	AwFPWeaponAttachment_ShakeView_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.CheckBob
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AwFPWeaponAttachment::CheckBob(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.CheckBob");

	AwFPWeaponAttachment_CheckBob_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.WeaponBob
// (Defined, Simulated, Public)
// Parameters:
// float                          BobDamping                     (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector AwFPWeaponAttachment::WeaponBob(float BobDamping)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.WeaponBob");

	AwFPWeaponAttachment_WeaponBob_Params params;
	params.BobDamping = BobDamping;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wFPWeaponAttachment.CalcStanceOffset
// (Defined, Simulated, Public)
// Parameters:
// float                          fDelta                         (Parm)

void AwFPWeaponAttachment::CalcStanceOffset(float fDelta)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.CalcStanceOffset");

	AwFPWeaponAttachment_CalcStanceOffset_Params params;
	params.fDelta = fDelta;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.CalcDestPivot
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwFPWeaponAttachment::CalcDestPivot()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.CalcDestPivot");

	AwFPWeaponAttachment_CalcDestPivot_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wFPWeaponAttachment.CalcPartsOffset
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::CalcPartsOffset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.CalcPartsOffset");

	AwFPWeaponAttachment_CalcPartsOffset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.SetAnimAction
// (Defined, Simulated, Public)
// Parameters:
// unsigned char                  byType                         (Parm)
// bool                           Opt1                           (OptionalParm, Parm)

void AwFPWeaponAttachment::SetAnimAction(unsigned char byType, bool Opt1)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.SetAnimAction");

	AwFPWeaponAttachment_SetAnimAction_Params params;
	params.byType = byType;
	params.Opt1 = Opt1;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.PlayDefence
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::PlayDefence()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.PlayDefence");

	AwFPWeaponAttachment_PlayDefence_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.PlayIdle
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::PlayIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.PlayIdle");

	AwFPWeaponAttachment_PlayIdle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.AnimEnd
// (Defined, Simulated, Public)
// Parameters:
// int                            Channel                        (Parm)

void AwFPWeaponAttachment::AnimEnd(int Channel)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.AnimEnd");

	AwFPWeaponAttachment_AnimEnd_Params params;
	params.Channel = Channel;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.SetQuickFOV
// (Defined, Simulated, Public)
// Parameters:
// bool                           bFOV                           (Parm)

void AwFPWeaponAttachment::SetQuickFOV(bool bFOV)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.SetQuickFOV");

	AwFPWeaponAttachment_SetQuickFOV_Params params;
	params.bFOV = bFOV;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.SetFOV
// (Defined, Simulated, Public)
// Parameters:
// bool                           bFOV                           (Parm)
// bool                           bQuick                         (OptionalParm, Parm)

void AwFPWeaponAttachment::SetFOV(bool bFOV, bool bQuick)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.SetFOV");

	AwFPWeaponAttachment_SetFOV_Params params;
	params.bFOV = bFOV;
	params.bQuick = bQuick;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.Change3DScopeMesh
// (Defined, Simulated, Public)
// Parameters:
// bool                           bAiming                        (Parm)

void AwFPWeaponAttachment::Change3DScopeMesh(bool bAiming)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.Change3DScopeMesh");

	AwFPWeaponAttachment_Change3DScopeMesh_Params params;
	params.bAiming = bAiming;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.StartMuzzleSmoke
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::StartMuzzleSmoke()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.StartMuzzleSmoke");

	AwFPWeaponAttachment_StartMuzzleSmoke_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.FlashMuzzleFlash
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::FlashMuzzleFlash()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.FlashMuzzleFlash");

	AwFPWeaponAttachment_FlashMuzzleFlash_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.DrawMuzzleFlash
// (Defined, Simulated, Public)
// Parameters:
// class UCanvas*                 Canvas                         (Parm)

void AwFPWeaponAttachment::DrawMuzzleFlash(class UCanvas* Canvas)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.DrawMuzzleFlash");

	AwFPWeaponAttachment_DrawMuzzleFlash_Params params;
	params.Canvas = Canvas;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.SpawnShell
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::SpawnShell()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.SpawnShell");

	AwFPWeaponAttachment_SpawnShell_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.LoadWarhead
// (Defined, Simulated, Public)
// Parameters:
// class UStaticMesh*             stProj                         (Parm)

void AwFPWeaponAttachment::LoadWarhead(class UStaticMesh* stProj)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.LoadWarhead");

	AwFPWeaponAttachment_LoadWarhead_Params params;
	params.stProj = stProj;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.SetResParams
// (Defined, Simulated, Public)
// Parameters:
// class UClass*                  wRes                           (Parm)

void AwFPWeaponAttachment::SetResParams(class UClass* wRes)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.SetResParams");

	AwFPWeaponAttachment_SetResParams_Params params;
	params.wRes = wRes;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.SetBaseParams
// (Defined, Simulated, Public)
// Parameters:
// class UwWeaponBaseParams*      wBase                          (Parm)

void AwFPWeaponAttachment::SetBaseParams(class UwWeaponBaseParams* wBase)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.SetBaseParams");

	AwFPWeaponAttachment_SetBaseParams_Params params;
	params.wBase = wBase;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.AttWarhead
// (Defined, Simulated, Public)
// Parameters:
// bool                           bAttOrDtt                      (Parm)

void AwFPWeaponAttachment::AttWarhead(bool bAttOrDtt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.AttWarhead");

	AwFPWeaponAttachment_AttWarhead_Params params;
	params.bAttOrDtt = bAttOrDtt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.AddParts
// (Defined, Simulated, Public)
// Parameters:
// TEnumAsByte<EAcceType>         Type                           (Parm)
// struct FString                 szName                         (Parm, NeedCtorLink)
// struct FString                 szSkinName                     (Parm, NeedCtorLink)
// struct FString                 strHaveDotName                 (Parm, NeedCtorLink)
// struct FVector                 AimDiff                        (Parm)
// int                            iItemID                        (Parm)
// int                            iPartsGroupID                  (Parm)
// bool                           bSecondSight                   (OptionalParm, Parm)

void AwFPWeaponAttachment::AddParts(TEnumAsByte<EAcceType> Type, const struct FString& szName, const struct FString& szSkinName, const struct FString& strHaveDotName, const struct FVector& AimDiff, int iItemID, int iPartsGroupID, bool bSecondSight)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.AddParts");

	AwFPWeaponAttachment_AddParts_Params params;
	params.Type = Type;
	params.szName = szName;
	params.szSkinName = szSkinName;
	params.strHaveDotName = strHaveDotName;
	params.AimDiff = AimDiff;
	params.iItemID = iItemID;
	params.iPartsGroupID = iPartsGroupID;
	params.bSecondSight = bSecondSight;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.SetWeaponPaint
// (Defined, Simulated, Public)
// Parameters:
// int                            iPaintID                       (Parm)

void AwFPWeaponAttachment::SetWeaponPaint(int iPaintID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.SetWeaponPaint");

	AwFPWeaponAttachment_SetWeaponPaint_Params params;
	params.iPaintID = iPaintID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.AddPartsGroup
// (Defined, Simulated, Public)
// Parameters:
// int                            iWeaponID                      (Parm)
// int                            iAddPartsID                    (Parm)

void AwFPWeaponAttachment::AddPartsGroup(int iWeaponID, int iAddPartsID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.AddPartsGroup");

	AwFPWeaponAttachment_AddPartsGroup_Params params;
	params.iWeaponID = iWeaponID;
	params.iAddPartsID = iAddPartsID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.Get1stCamouflageMt
// (Defined, Public)
// Parameters:
// int                            iItemID                        (Parm)
// unsigned char                  byTeam                         (Parm)
// class UMaterial*               ReturnValue                    (Parm, OutParm, ReturnParm)

class UMaterial* AwFPWeaponAttachment::Get1stCamouflageMt(int iItemID, unsigned char byTeam)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.Get1stCamouflageMt");

	AwFPWeaponAttachment_Get1stCamouflageMt_Params params;
	params.iItemID = iItemID;
	params.byTeam = byTeam;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wFPWeaponAttachment.wLoadOut
// (Defined, Simulated, Public)
// Parameters:
// int                            iID                            (Parm)
// int                            iAddPartsID                    (Parm)
// int                            iPaintID                       (Parm)
// class APawn*                   Pawn                           (Parm)

void AwFPWeaponAttachment::wLoadOut(int iID, int iAddPartsID, int iPaintID, class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.wLoadOut");

	AwFPWeaponAttachment_wLoadOut_Params params;
	params.iID = iID;
	params.iAddPartsID = iAddPartsID;
	params.iPaintID = iPaintID;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.ResetBase
// (Defined, Simulated, Public)

void AwFPWeaponAttachment::ResetBase()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.ResetBase");

	AwFPWeaponAttachment_ResetBase_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachment.Destroyed
// (Defined, Simulated, Event, Public)

void AwFPWeaponAttachment::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachment.Destroyed");

	AwFPWeaponAttachment_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.LadderInfo.LengthOfLadder
// (Defined, Static, Public)
// Parameters:
// int                            Ladder                         (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int ULadderInfo::STATIC_LengthOfLadder(int Ladder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderInfo.LengthOfLadder");

	ULadderInfo_LengthOfLadder_Params params;
	params.Ladder = Ladder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderInfo.GetMatchDescription
// (Defined, Static, Public)
// Parameters:
// class UGameProfile*            G                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ULadderInfo::STATIC_GetMatchDescription(class UGameProfile* G)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderInfo.GetMatchDescription");

	ULadderInfo_GetMatchDescription_Params params;
	params.G = G;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderInfo.MakeURLFor
// (Defined, Static, Public)
// Parameters:
// class UGameProfile*            G                              (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ULadderInfo::STATIC_MakeURLFor(class UGameProfile* G)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderInfo.MakeURLFor");

	ULadderInfo_MakeURLFor_Params params;
	params.G = G;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderInfo.GetCurrentMatchInfo
// (Defined, Static, Public)
// Parameters:
// class UGameProfile*            G                              (Parm)
// class UMatchInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UMatchInfo* ULadderInfo::STATIC_GetCurrentMatchInfo(class UGameProfile* G)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderInfo.GetCurrentMatchInfo");

	ULadderInfo_GetCurrentMatchInfo_Params params;
	params.G = G;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderInfo.GetMatchInfo
// (Defined, Static, Public)
// Parameters:
// int                            Ladder                         (Parm)
// int                            rung                           (Parm)
// class UMatchInfo*              ReturnValue                    (Parm, OutParm, ReturnParm)

class UMatchInfo* ULadderInfo::STATIC_GetMatchInfo(int Ladder, int rung)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderInfo.GetMatchInfo");

	ULadderInfo_GetMatchInfo_Params params;
	params.Ladder = Ladder;
	params.rung = rung;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.LadderInfo.UpdateLadders
// (Defined, Static, Public)
// Parameters:
// class UGameProfile*            G                              (Parm)
// int                            CurrentLadder                  (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString ULadderInfo::STATIC_UpdateLadders(class UGameProfile* G, int CurrentLadder)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.LadderInfo.UpdateLadders");

	ULadderInfo_UpdateLadders_Params params;
	params.G = G;
	params.CurrentLadder = CurrentLadder;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetCurrentTitle
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylistManager::GetCurrentTitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetCurrentTitle");

	UStreamPlaylistManager_GetCurrentTitle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.Save
// (Defined, Public)

void UStreamPlaylistManager::Save()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.Save");

	UStreamPlaylistManager_Save_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.HandleDebugExec
// (Defined, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// struct FString                 Param                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::HandleDebugExec(const struct FString& Command, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.HandleDebugExec");

	UStreamPlaylistManager_HandleDebugExec_Params params;
	params.Command = Command;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.CreatePlaylist
// (Defined, Protected)
// Parameters:
// struct FString                 PlaylistName                   (Parm, NeedCtorLink)
// class UStreamPlaylist*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamPlaylist* UStreamPlaylistManager::CreatePlaylist(const struct FString& PlaylistName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.CreatePlaylist");

	UStreamPlaylistManager_CreatePlaylist_Params params;
	params.PlaylistName = PlaylistName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.SetRepeatAll
// (Defined, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void UStreamPlaylistManager::SetRepeatAll(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.SetRepeatAll");

	UStreamPlaylistManager_SetRepeatAll_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.SetRepeat
// (Defined, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void UStreamPlaylistManager::SetRepeat(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.SetRepeat");

	UStreamPlaylistManager_SetRepeat_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.SetShuffleAll
// (Defined, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void UStreamPlaylistManager::SetShuffleAll(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.SetShuffleAll");

	UStreamPlaylistManager_SetShuffleAll_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.SetShuffle
// (Defined, Public)
// Parameters:
// bool                           bEnable                        (Parm)

void UStreamPlaylistManager::SetShuffle(bool bEnable)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.SetShuffle");

	UStreamPlaylistManager_SetShuffle_Params params;
	params.bEnable = bEnable;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.GetRepeatAll
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::GetRepeatAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetRepeatAll");

	UStreamPlaylistManager_GetRepeatAll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetRepeat
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::GetRepeat()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetRepeat");

	UStreamPlaylistManager_GetRepeat_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetShuffleAll
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::GetShuffleAll()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetShuffleAll");

	UStreamPlaylistManager_GetShuffleAll_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetShuffle
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::GetShuffle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetShuffle");

	UStreamPlaylistManager_GetShuffle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.ValidName
// (Defined, Public)
// Parameters:
// struct FString                 Test                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::ValidName(const struct FString& Test)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.ValidName");

	UStreamPlaylistManager_ValidName_Params params;
	params.Test = Test;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.FindPlaylistIndex
// (Defined, Public)
// Parameters:
// class UStreamPlaylist*         Playlist                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylistManager::FindPlaylistIndex(class UStreamPlaylist* Playlist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.FindPlaylistIndex");

	UStreamPlaylistManager_FindPlaylistIndex_Params params;
	params.Playlist = Playlist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.FindNameIndex
// (Defined, Public)
// Parameters:
// struct FString                 PlaylistName                   (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylistManager::FindNameIndex(const struct FString& PlaylistName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.FindNameIndex");

	UStreamPlaylistManager_FindNameIndex_Params params;
	params.PlaylistName = PlaylistName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.ValidIndex
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::ValidIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.ValidIndex");

	UStreamPlaylistManager_ValidIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetPlaylistCount
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylistManager::GetPlaylistCount()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetPlaylistCount");

	UStreamPlaylistManager_GetPlaylistCount_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetPlaylistAt
// (Defined, Public)
// Parameters:
// int                            idx                            (Parm)
// class UStreamPlaylist*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamPlaylist* UStreamPlaylistManager::GetPlaylistAt(int idx)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetPlaylistAt");

	UStreamPlaylistManager_GetPlaylistAt_Params params;
	params.idx = idx;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetRandomPlaylist
// (Defined, Public)
// Parameters:
// class UStreamPlaylist*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamPlaylist* UStreamPlaylistManager::GetRandomPlaylist()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetRandomPlaylist");

	UStreamPlaylistManager_GetRandomPlaylist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetCurrentPlaylist
// (Defined, Public)
// Parameters:
// class UStreamPlaylist*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamPlaylist* UStreamPlaylistManager::GetCurrentPlaylist()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetCurrentPlaylist");

	UStreamPlaylistManager_GetCurrentPlaylist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetCurrentIndex
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylistManager::GetCurrentIndex()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetCurrentIndex");

	UStreamPlaylistManager_GetCurrentIndex_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetRandomSong
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylistManager::GetRandomSong()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetRandomSong");

	UStreamPlaylistManager_GetRandomSong_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.PrevSong
// (Defined, Public)
// Parameters:
// bool                           bForce                         (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylistManager::PrevSong(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.PrevSong");

	UStreamPlaylistManager_PrevSong_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.NextSong
// (Defined, Public)
// Parameters:
// bool                           bForce                         (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylistManager::NextSong(bool bForce)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.NextSong");

	UStreamPlaylistManager_NextSong_Params params;
	params.bForce = bForce;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.ImportPlaylist
// (Defined, Public)
// Parameters:
// int                            PlaylistIndex                  (Parm)
// int                            InsertPosition                 (Parm)
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::ImportPlaylist(int PlaylistIndex, int InsertPosition, const struct FString& Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.ImportPlaylist");

	UStreamPlaylistManager_ImportPlaylist_Params params;
	params.PlaylistIndex = PlaylistIndex;
	params.InsertPosition = InsertPosition;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.AddDirectory
// (Defined, Public)
// Parameters:
// int                            PlaylistIndex                  (Parm)
// int                            InsertPosition                 (Parm)
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           bRecurseDirectories            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::AddDirectory(int PlaylistIndex, int InsertPosition, const struct FString& Path, bool bRecurseDirectories)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.AddDirectory");

	UStreamPlaylistManager_AddDirectory_Params params;
	params.PlaylistIndex = PlaylistIndex;
	params.InsertPosition = InsertPosition;
	params.Path = Path;
	params.bRecurseDirectories = bRecurseDirectories;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.GetPlaylistType
// (Defined, Public)
// Parameters:
// struct FString                 Path                           (Parm, NeedCtorLink)
// TEnumAsByte<EStreamPlaylistType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EStreamPlaylistType> UStreamPlaylistManager::GetPlaylistType(const struct FString& Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.GetPlaylistType");

	UStreamPlaylistManager_GetPlaylistType_Params params;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.ClearCurrentPlaylist
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::ClearCurrentPlaylist()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.ClearCurrentPlaylist");

	UStreamPlaylistManager_ClearCurrentPlaylist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.RemoveFromCurrentPlaylist
// (Defined, Public)
// Parameters:
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           bSkipNotification              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::RemoveFromCurrentPlaylist(const struct FString& Path, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.RemoveFromCurrentPlaylist");

	UStreamPlaylistManager_RemoveFromCurrentPlaylist_Params params;
	params.Path = Path;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.InsertInPlaylist
// (Defined, Public)
// Parameters:
// int                            PlaylistIndex                  (Parm)
// int                            InsertPosition                 (Parm)
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           bSkipNotification              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::InsertInPlaylist(int PlaylistIndex, int InsertPosition, const struct FString& Path, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.InsertInPlaylist");

	UStreamPlaylistManager_InsertInPlaylist_Params params;
	params.PlaylistIndex = PlaylistIndex;
	params.InsertPosition = InsertPosition;
	params.Path = Path;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.AddToPlaylist
// (Defined, Public)
// Parameters:
// int                            PlaylistIndex                  (Parm)
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           bSkipNotification              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::AddToPlaylist(int PlaylistIndex, const struct FString& Path, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.AddToPlaylist");

	UStreamPlaylistManager_AddToPlaylist_Params params;
	params.PlaylistIndex = PlaylistIndex;
	params.Path = Path;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.RenamePlaylist
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// struct FString                 NewName                        (Parm, OutParm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::RenamePlaylist(int Index, struct FString* NewName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.RenamePlaylist");

	UStreamPlaylistManager_RenamePlaylist_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewName != nullptr)
		*NewName = params.NewName;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.RemovePlaylistAt
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::RemovePlaylistAt(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.RemovePlaylistAt");

	UStreamPlaylistManager_RemovePlaylistAt_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.RemovePlaylist
// (Defined, Public)
// Parameters:
// struct FString                 PlaylistName                   (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::RemovePlaylist(const struct FString& PlaylistName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.RemovePlaylist");

	UStreamPlaylistManager_RemovePlaylist_Params params;
	params.PlaylistName = PlaylistName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.AppendPlaylist
// (Defined, Protected)
// Parameters:
// class UStreamPlaylist*         Playlist                       (Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylistManager::AppendPlaylist(class UStreamPlaylist* Playlist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.AppendPlaylist");

	UStreamPlaylistManager_AppendPlaylist_Params params;
	params.Playlist = Playlist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.AddPlaylist
// (Defined, Public)
// Parameters:
// struct FString                 NewPlaylistName                (Parm, OutParm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylistManager::AddPlaylist(struct FString* NewPlaylistName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.AddPlaylist");

	UStreamPlaylistManager_AddPlaylist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (NewPlaylistName != nullptr)
		*NewPlaylistName = params.NewPlaylistName;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.ActivatePlaylist
// (Defined, Public)
// Parameters:
// int                            ListIndex                      (Parm)
// bool                           bNoFail                        (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylistManager::ActivatePlaylist(int ListIndex, bool bNoFail)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.ActivatePlaylist");

	UStreamPlaylistManager_ActivatePlaylist_Params params;
	params.ListIndex = ListIndex;
	params.bNoFail = bNoFail;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.CreateDefaultPlaylist
// (Defined, Protected)
// Parameters:
// class UStreamPlaylist*         ReturnValue                    (Parm, OutParm, ReturnParm)

class UStreamPlaylist* UStreamPlaylistManager::CreateDefaultPlaylist()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.CreateDefaultPlaylist");

	UStreamPlaylistManager_CreateDefaultPlaylist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylistManager.InitializeParsers
// (Defined, Protected)

void UStreamPlaylistManager::InitializeParsers()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.InitializeParsers");

	UStreamPlaylistManager_InitializeParsers_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.InitializePlaylists
// (Defined, Protected)

void UStreamPlaylistManager::InitializePlaylists()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.InitializePlaylists");

	UStreamPlaylistManager_InitializePlaylists_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.Initialize
// (Defined, Public)
// Parameters:
// class UStreamInterface*        InFileManager                  (Parm)

void UStreamPlaylistManager::Initialize(class UStreamInterface* InFileManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.Initialize");

	UStreamPlaylistManager_Initialize_Params params;
	params.InFileManager = InFileManager;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylistManager.ChangedActivePlaylist
// (Public, Delegate)
// Parameters:
// class UStreamPlaylist*         NewPlaylist                    (Parm)

void UStreamPlaylistManager::ChangedActivePlaylist(class UStreamPlaylist* NewPlaylist)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylistManager.ChangedActivePlaylist");

	UStreamPlaylistManager_ChangedActivePlaylist_Params params;
	params.NewPlaylist = NewPlaylist;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylist.Save
// (Defined, Public)

void UStreamPlaylist::Save()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.Save");

	UStreamPlaylist_Save_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylist.HandleDebugExec
// (Defined, Public)
// Parameters:
// struct FString                 Command                        (Parm, NeedCtorLink)
// struct FString                 Param                          (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::HandleDebugExec(const struct FString& Command, const struct FString& Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.HandleDebugExec");

	UStreamPlaylist_HandleDebugExec_Params params;
	params.Command = Command;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.DebugInfo
// (Defined, Public)

void UStreamPlaylist::DebugInfo()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.DebugInfo");

	UStreamPlaylist_DebugInfo_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylist.ValidStreamIndex
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::ValidStreamIndex(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.ValidStreamIndex");

	UStreamPlaylist_ValidStreamIndex_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.ValidStreamName
// (Defined, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::ValidStreamName(const struct FString& fileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.ValidStreamName");

	UStreamPlaylist_ValidStreamName_Params params;
	params.fileName = fileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.FindIndexByFileName
// (Defined, Public)
// Parameters:
// struct FString                 Test                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::FindIndexByFileName(const struct FString& Test)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.FindIndexByFileName");

	UStreamPlaylist_FindIndexByFileName_Params params;
	params.Test = Test;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.FindIndexByFullName
// (Defined, Public)
// Parameters:
// struct FString                 Test                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::FindIndexByFullName(const struct FString& Test)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.FindIndexByFullName");

	UStreamPlaylist_FindIndexByFullName_Params params;
	params.Test = Test;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.FindIndexByPath
// (Defined, Public)
// Parameters:
// struct FString                 Test                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::FindIndexByPath(const struct FString& Test)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.FindIndexByPath");

	UStreamPlaylist_FindIndexByPath_Params params;
	params.Test = Test;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.FindIndexByName
// (Defined, Public)
// Parameters:
// struct FString                 Test                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::FindIndexByName(const struct FString& Test)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.FindIndexByName");

	UStreamPlaylist_FindIndexByName_Params params;
	params.Test = Test;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.GetPlaylistLength
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::GetPlaylistLength()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetPlaylistLength");

	UStreamPlaylist_GetPlaylistLength_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.GetStreamAt
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// class UStream*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UStream* UStreamPlaylist::GetStreamAt(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetStreamAt");

	UStreamPlaylist_GetStreamAt_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.GetStream
// (Defined, Public)
// Parameters:
// struct FString                 StreamName                     (Parm, NeedCtorLink)
// class UStream*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UStream* UStreamPlaylist::GetStream(const struct FString& StreamName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetStream");

	UStreamPlaylist_GetStream_Params params;
	params.StreamName = StreamName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.GetCurrentStream
// (Defined, Public)
// Parameters:
// class UStream*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UStream* UStreamPlaylist::GetCurrentStream()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetCurrentStream");

	UStreamPlaylist_GetCurrentStream_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.GetSongs
// (Defined, Public)
// Parameters:
// TArray<class UStream*>         SongArray                      (Parm, OutParm, NeedCtorLink)

void UStreamPlaylist::GetSongs(TArray<class UStream*>* SongArray)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetSongs");

	UStreamPlaylist_GetSongs_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (SongArray != nullptr)
		*SongArray = params.SongArray;
}


// Function Engine.StreamPlaylist.GetCurrent
// (Defined, Public)
// Parameters:
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::GetCurrent()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetCurrent");

	UStreamPlaylist_GetCurrent_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.GetTitle
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylist::GetTitle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetTitle");

	UStreamPlaylist_GetTitle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.IsInitialized
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::IsInitialized()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.IsInitialized");

	UStreamPlaylist_IsInitialized_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.SetSongs
// (Defined, Public)
// Parameters:
// TArray<class UStream*>         NewSongs                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::SetSongs(TArray<class UStream*> NewSongs)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.SetSongs");

	UStreamPlaylist_SetSongs_Params params;
	params.NewSongs = NewSongs;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.SetCurrent
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::SetCurrent(int Index)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.SetCurrent");

	UStreamPlaylist_SetCurrent_Params params;
	params.Index = Index;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.SetTitle
// (Defined, Public)
// Parameters:
// struct FString                 NewTitle                       (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::SetTitle(const struct FString& NewTitle)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.SetTitle");

	UStreamPlaylist_SetTitle_Params params;
	params.NewTitle = NewTitle;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.ResetRandomPool
// (Defined, Public)

void UStreamPlaylist::ResetRandomPool()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.ResetRandomPool");

	UStreamPlaylist_ResetRandomPool_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylist.GetRandomSong
// (Defined, Public)
// Parameters:
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylist::GetRandomSong()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.GetRandomSong");

	UStreamPlaylist_GetRandomSong_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.ClearPlaylist
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::ClearPlaylist()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.ClearPlaylist");

	UStreamPlaylist_ClearPlaylist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.ReplaceWith
// (Defined, Public)
// Parameters:
// class UStreamPlaylist*         Other                          (Parm)

void UStreamPlaylist::ReplaceWith(class UStreamPlaylist* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.ReplaceWith");

	UStreamPlaylist_ReplaceWith_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.StreamPlaylist.PrevSong
// (Defined, Public)
// Parameters:
// bool                           bMayRepeat                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylist::PrevSong(bool bMayRepeat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.PrevSong");

	UStreamPlaylist_PrevSong_Params params;
	params.bMayRepeat = bMayRepeat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.NextSong
// (Defined, Public)
// Parameters:
// bool                           bMayRepeat                     (Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UStreamPlaylist::NextSong(bool bMayRepeat)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.NextSong");

	UStreamPlaylist_NextSong_Params params;
	params.bMayRepeat = bMayRepeat;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.RemoveSongAt
// (Defined, Public)
// Parameters:
// int                            idx                            (Parm)
// bool                           bSkipNotification              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::RemoveSongAt(int idx, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.RemoveSongAt");

	UStreamPlaylist_RemoveSongAt_Params params;
	params.idx = idx;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.RemoveSong
// (Defined, Public)
// Parameters:
// struct FString                 SongFileName                   (Parm, NeedCtorLink)
// bool                           bSkipNotification              (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::RemoveSong(const struct FString& SongFileName, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.RemoveSong");

	UStreamPlaylist_RemoveSong_Params params;
	params.SongFileName = SongFileName;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.InsertSong
// (Defined, Public)
// Parameters:
// int                            idx                            (Parm)
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           bSkipNotification              (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::InsertSong(int idx, const struct FString& Path, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.InsertSong");

	UStreamPlaylist_InsertSong_Params params;
	params.idx = idx;
	params.Path = Path;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.AddStream
// (Defined, Public)
// Parameters:
// int                            Index                          (Parm)
// class UStream*                 NewStream                      (Parm)
// bool                           bSkipNotification              (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::AddStream(int Index, class UStream* NewStream, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.AddStream");

	UStreamPlaylist_AddStream_Params params;
	params.Index = Index;
	params.NewStream = NewStream;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.AddSong
// (Defined, Public)
// Parameters:
// struct FString                 SongFileName                   (Parm, NeedCtorLink)
// bool                           bSkipNotification              (OptionalParm, Parm)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UStreamPlaylist::AddSong(const struct FString& SongFileName, bool bSkipNotification)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.AddSong");

	UStreamPlaylist_AddSong_Params params;
	params.SongFileName = SongFileName;
	params.bSkipNotification = bSkipNotification;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.CreateStream
// (Defined, Public)
// Parameters:
// struct FString                 fileName                       (Parm, NeedCtorLink)
// class UStream*                 ReturnValue                    (Parm, OutParm, ReturnParm)

class UStream* UStreamPlaylist::CreateStream(const struct FString& fileName)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.CreateStream");

	UStreamPlaylist_CreateStream_Params params;
	params.fileName = fileName;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.LoadPlaylist
// (Defined, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::LoadPlaylist()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.LoadPlaylist");

	UStreamPlaylist_LoadPlaylist_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.InitializePlaylist
// (Defined, Public)
// Parameters:
// class UStreamInterface*        InManager                      (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UStreamPlaylist::InitializePlaylist(class UStreamInterface* InManager)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.InitializePlaylist");

	UStreamPlaylist_InitializePlaylist_Params params;
	params.InManager = InManager;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.StreamPlaylist.OnPlaylistChanged
// (Public, Delegate)

void UStreamPlaylist::OnPlaylistChanged()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.StreamPlaylist.OnPlaylistChanged");

	UStreamPlaylist_OnPlaylistChanged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlaylistParserBase.HtmlDecode
// (Defined, Static, Public)
// Parameters:
// struct FString                 Src                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UPlaylistParserBase::STATIC_HtmlDecode(const struct FString& Src)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.HtmlDecode");

	UPlaylistParserBase_HtmlDecode_Params params;
	params.Src = Src;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlaylistParserBase.GetTagged
// (Defined, Static, Public)
// Parameters:
// struct FString                 Text                           (Parm, OutParm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UPlaylistParserBase::STATIC_GetTagged(struct FString* Text)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.GetTagged");

	UPlaylistParserBase_GetTagged_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (Text != nullptr)
		*Text = params.Text;

	return params.ReturnValue;
}


// Function Engine.PlaylistParserBase.GetValue
// (Defined, Static, Public)
// Parameters:
// struct FString                 KeyValuePair                   (Parm, NeedCtorLink)
// bool                           bAllowSpaces                   (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UPlaylistParserBase::STATIC_GetValue(const struct FString& KeyValuePair, bool bAllowSpaces)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.GetValue");

	UPlaylistParserBase_GetValue_Params params;
	params.KeyValuePair = KeyValuePair;
	params.bAllowSpaces = bAllowSpaces;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlaylistParserBase.ParseLines
// (Defined, Public)

void UPlaylistParserBase::ParseLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.ParseLines");

	UPlaylistParserBase_ParseLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlaylistParserBase.ImportedPlaylist
// (Defined, Public)
// Parameters:
// int                            PlaylistIndex                  (Parm)
// int                            InsertPosition                 (Parm)

void UPlaylistParserBase::ImportedPlaylist(int PlaylistIndex, int InsertPosition)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.ImportedPlaylist");

	UPlaylistParserBase_ImportedPlaylist_Params params;
	params.PlaylistIndex = PlaylistIndex;
	params.InsertPosition = InsertPosition;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlaylistParserBase.Import
// (Defined, Public)
// Parameters:
// int                            PlaylistIndex                  (Parm)
// int                            InsertPosition                 (Parm)
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UPlaylistParserBase::Import(int PlaylistIndex, int InsertPosition, const struct FString& Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.Import");

	UPlaylistParserBase_Import_Params params;
	params.PlaylistIndex = PlaylistIndex;
	params.InsertPosition = InsertPosition;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PlaylistParserBase.SetType
// (Defined, Public)
// Parameters:
// TEnumAsByte<EStreamPlaylistType> InType                         (Parm)

void UPlaylistParserBase::SetType(TEnumAsByte<EStreamPlaylistType> InType)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.SetType");

	UPlaylistParserBase_SetType_Params params;
	params.InType = InType;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlaylistParserBase.GetType
// (Defined, Public)
// Parameters:
// TEnumAsByte<EStreamPlaylistType> ReturnValue                    (Parm, OutParm, ReturnParm)

TEnumAsByte<EStreamPlaylistType> UPlaylistParserBase::GetType()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlaylistParserBase.GetType");

	UPlaylistParserBase_GetType_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.ZoneTrigger.UnTouch
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AZoneTrigger::UnTouch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ZoneTrigger.UnTouch");

	AZoneTrigger_UnTouch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.ZoneTrigger.Touch
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AZoneTrigger::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.ZoneTrigger.Touch");

	AZoneTrigger_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_NoWeapon.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_NoWeapon::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_NoWeapon.ClientReceive");

	AwMessage_NoWeapon_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_NoWeapon.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_NoWeapon::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_NoWeapon.GetString");

	AwMessage_NoWeapon_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Effect_ShadowController.SunLightDirectionUpdate
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 direction                      (Parm)

void AEffect_ShadowController::SunLightDirectionUpdate(const struct FVector& direction)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.SunLightDirectionUpdate");

	AEffect_ShadowController_SunLightDirectionUpdate_Params params;
	params.direction = direction;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowController.Destroyed
// (Defined, Public)

void AEffect_ShadowController::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.Destroyed");

	AEffect_ShadowController_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowController.SpawnShadow
// (Defined, Public)
// Parameters:
// struct FRotator                LightRotation                  (Parm)
// class AEffect_ShadowProjector* ReturnValue                    (Parm, OutParm, ReturnParm)

class AEffect_ShadowProjector* AEffect_ShadowController::SpawnShadow(const struct FRotator& LightRotation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.SpawnShadow");

	AEffect_ShadowController_SpawnShadow_Params params;
	params.LightRotation = LightRotation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Effect_ShadowController.UpdateShadows
// (Defined, Public)
// Parameters:
// float                          dt                             (Parm)

void AEffect_ShadowController::UpdateShadows(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.UpdateShadows");

	AEffect_ShadowController_UpdateShadows_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowController.Tick
// (Defined, Public)
// Parameters:
// float                          dt                             (Parm)

void AEffect_ShadowController::Tick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.Tick");

	AEffect_ShadowController_Tick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowController.IsVisible
// (Defined, Public)
// Parameters:
// struct FVector                 loc                            (Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AEffect_ShadowController::IsVisible(const struct FVector& loc)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.IsVisible");

	AEffect_ShadowController_IsVisible_Params params;
	params.loc = loc;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Effect_ShadowController.LightPriority
// (Defined, Public)
// Parameters:
// float                          Brightness                     (Parm)
// float                          Radius                         (Parm)
// float                          Distance                       (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AEffect_ShadowController::LightPriority(float Brightness, float Radius, float Distance)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.LightPriority");

	AEffect_ShadowController_LightPriority_Params params;
	params.Brightness = Brightness;
	params.Radius = Radius;
	params.Distance = Distance;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.Effect_ShadowController.FillLights
// (Defined, Public)

void AEffect_ShadowController::FillLights()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.FillLights");

	AEffect_ShadowController_FillLights_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowController.Timer
// (Defined, Public)

void AEffect_ShadowController::Timer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.Timer");

	AEffect_ShadowController_Timer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowController.Initialize
// (Defined, Public)

void AEffect_ShadowController::Initialize()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowController.Initialize");

	AEffect_ShadowController_Initialize_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.SetSpawnEmitter
// (Defined, Simulated, Public)

void AwRocket::SetSpawnEmitter()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.SetSpawnEmitter");

	AwRocket_SetSpawnEmitter_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.wLoadOut
// (Defined, Simulated, Public)
// Parameters:
// int                            iID                            (Parm)

void AwRocket::wLoadOut(int iID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.wLoadOut");

	AwRocket_wLoadOut_Params params;
	params.iID = iID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.Tick
// (Defined, Simulated, Public)
// Parameters:
// float                          DeltaTime                      (Parm)

void AwRocket::Tick(float DeltaTime)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.Tick");

	AwRocket_Tick_Params params;
	params.DeltaTime = DeltaTime;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.Explode
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AwRocket::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.Explode");

	AwRocket_Explode_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.SpawnExplosionDecal
// (Defined, Simulated, Public)
// Parameters:
// class APlayerController*       PC                             (Parm)
// struct FVector                 HitNormal                      (Parm)

void AwRocket::SpawnExplosionDecal(class APlayerController* PC, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.SpawnExplosionDecal");

	AwRocket_SpawnExplosionDecal_Params params;
	params.PC = PC;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.HitWall
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)
// class AActor*                  Wall                           (Parm)
// class UMaterial*               HitMaterial                    (Parm)

void AwRocket::HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.HitWall");

	AwRocket_HitWall_Params params;
	params.HitNormal = HitNormal;
	params.Wall = Wall;
	params.HitMaterial = HitMaterial;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.ProcessTouch
// (Defined, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// struct FVector                 HitLocation                    (Parm)

void AwRocket::ProcessTouch(class AActor* Other, const struct FVector& HitLocation)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.ProcessTouch");

	AwRocket_ProcessTouch_Params params;
	params.Other = Other;
	params.HitLocation = HitLocation;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.Landed
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitNormal                      (Parm)

void AwRocket::Landed(const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.Landed");

	AwRocket_Landed_Params params;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.PostNetBeginPlay
// (Defined, Simulated, Public)

void AwRocket::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.PostNetBeginPlay");

	AwRocket_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.SetSpeed
// (Defined, Public)
// Parameters:
// float                          fSpeed                         (Parm)

void AwRocket::SetSpeed(float fSpeed)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.SetSpeed");

	AwRocket_SetSpeed_Params params;
	params.fSpeed = fSpeed;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wRocket.Destroyed
// (Defined, Simulated, Public)

void AwRocket::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wRocket.Destroyed");

	AwRocket_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowProjector.Destroyed
// (Defined, Public)

void AEffect_ShadowProjector::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowProjector.Destroyed");

	AEffect_ShadowProjector_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowProjector.UpdateShadow
// (Defined, Public)
// Parameters:
// float                          dt                             (Parm)
// int                            LN                             (Parm)
// class AEffect_ShadowController* ShadowController               (Parm)

void AEffect_ShadowProjector::UpdateShadow(float dt, int LN, class AEffect_ShadowController* ShadowController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowProjector.UpdateShadow");

	AEffect_ShadowProjector_UpdateShadow_Params params;
	params.dt = dt;
	params.LN = LN;
	params.ShadowController = ShadowController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowProjector.InitializeFor
// (Defined, Public)
// Parameters:
// class AEffect_ShadowController* ShadowController               (Parm)

void AEffect_ShadowProjector::InitializeFor(class AEffect_ShadowController* ShadowController)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowProjector.InitializeFor");

	AEffect_ShadowProjector_InitializeFor_Params params;
	params.ShadowController = ShadowController;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowProjector.DisableShadow
// (Defined, Public)

void AEffect_ShadowProjector::DisableShadow()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowProjector.DisableShadow");

	AEffect_ShadowProjector_DisableShadow_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowProjector.Tick
// (Defined, Public)
// Parameters:
// float                          dt                             (Parm)

void AEffect_ShadowProjector::Tick(float dt)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowProjector.Tick");

	AEffect_ShadowProjector_Tick_Params params;
	params.dt = dt;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.Effect_ShadowProjector.PostBeginPlay
// (Defined, Public)

void AEffect_ShadowProjector::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.Effect_ShadowProjector.PostBeginPlay");

	AEffect_ShadowProjector_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialTrigger.Trigger
// (Defined, Public)
// Parameters:
// class AActor*                  Other                          (Parm)
// class APawn*                   EventInstigator                (Parm)

void AMaterialTrigger::Trigger(class AActor* Other, class APawn* EventInstigator)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialTrigger.Trigger");

	AMaterialTrigger_Trigger_Params params;
	params.Other = Other;
	params.EventInstigator = EventInstigator;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.MaterialTrigger.PostBeginPlay
// (Defined, Public)

void AMaterialTrigger::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.MaterialTrigger.PostBeginPlay");

	AMaterialTrigger_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.BGMTable.GetDuration
// (Defined, Static, Public)
// Parameters:
// struct FString                 File                           (Parm, NeedCtorLink)
// int                            ReturnValue                    (Parm, OutParm, ReturnParm)

int UBGMTable::STATIC_GetDuration(const struct FString& File)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.BGMTable.GetDuration");

	UBGMTable_GetDuration_Params params;
	params.File = File;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_Mode.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_Game_Mode::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Mode.ClientReceive");

	AwMessage_Game_Mode_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Game_Mode.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Game_Mode::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Mode.GetString");

	AwMessage_Game_Mode_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_Mode.GotoBTConsole
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_Mode::STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Mode.GotoBTConsole");

	AwMessage_Game_Mode_GotoBTConsole_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_Mode.GotoHud
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_Mode::STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Mode.GotoHud");

	AwMessage_Game_Mode_GotoHud_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WinBox.H
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UWinBox::H()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinBox.H");

	UWinBox_H_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WinBox.W
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UWinBox::W()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinBox.W");

	UWinBox_W_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WinBox.Y
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UWinBox::Y()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinBox.Y");

	UWinBox_Y_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WinBox.X
// (Defined, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UWinBox::X()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinBox.X");

	UWinBox_X_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WinFrameChanger.WinBoxToFloatBoxWH_OUT
// (Defined, Public)
// Parameters:
// class UWinBox*                 B                              (Parm)
// struct FFloatBoxWH             fb                             (Parm, OutParm)

void UWinFrameChanger::WinBoxToFloatBoxWH_OUT(class UWinBox* B, struct FFloatBoxWH* fb)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinFrameChanger.WinBoxToFloatBoxWH_OUT");

	UWinFrameChanger_WinBoxToFloatBoxWH_OUT_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	if (fb != nullptr)
		*fb = params.fb;
}


// Function Engine.WinFrameChanger.WinBoxToFloatBoxWH
// (Defined, Public)
// Parameters:
// class UWinBox*                 B                              (Parm)
// struct FFloatBoxWH             ReturnValue                    (Parm, OutParm, ReturnParm)

struct FFloatBoxWH UWinFrameChanger::WinBoxToFloatBoxWH(class UWinBox* B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinFrameChanger.WinBoxToFloatBoxWH");

	UWinFrameChanger_WinBoxToFloatBoxWH_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.WinFrameChanger.SetFrameByFloatBox
// (Defined, Public)
// Parameters:
// struct FFloatBox               B                              (Parm)

void UWinFrameChanger::SetFrameByFloatBox(const struct FFloatBox& B)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinFrameChanger.SetFrameByFloatBox");

	UWinFrameChanger_SetFrameByFloatBox_Params params;
	params.B = B;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.WinFrameChanger.SetFrame
// (Defined, Public)
// Parameters:
// float                          nx                             (Parm)
// float                          ny                             (Parm)
// float                          nw                             (Parm)
// float                          nh                             (Parm)

void UWinFrameChanger::SetFrame(float nx, float ny, float nw, float nh)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.WinFrameChanger.SetFrame");

	UWinFrameChanger_SetFrame_Params params;
	params.nx = nx;
	params.ny = ny;
	params.nw = nw;
	params.nh = nh;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Game_Defence.GotoBTConsole
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_Defence::STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Defence.GotoBTConsole");

	AwMessage_Game_Defence_GotoBTConsole_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_Defence.GotoHud
// (Defined, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool AwMessage_Game_Defence::STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Defence.GotoHud");

	AwMessage_Game_Defence_GotoHud_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_Defence.GetLifeTime
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (Parm)
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float AwMessage_Game_Defence::STATIC_GetLifeTime(int Switch)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Defence.GetLifeTime");

	AwMessage_Game_Defence_GetLifeTime_Params params;
	params.Switch = Switch;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wMessage_Game_Defence.ClientReceive
// (Defined, Simulated, Static, Public)
// Parameters:
// class APlayerController*       P                              (Parm)
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_2                   (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)

void AwMessage_Game_Defence::STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Defence.ClientReceive");

	AwMessage_Game_Defence_ClientReceive_Params params;
	params.P = P;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.RelatedPRI_2 = RelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wMessage_Game_Defence.GetString
// (Defined, Static, Public)
// Parameters:
// int                            Switch                         (OptionalParm, Parm)
// class APlayerReplicationInfo*  RelatedPRI_1                   (OptionalParm, Parm)
// class APlayerReplicationInfo*  sRelatedPRI_2                  (OptionalParm, Parm)
// class UObject*                 OptionalObject                 (OptionalParm, Parm)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString AwMessage_Game_Defence::STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* sRelatedPRI_2, class UObject* OptionalObject)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wMessage_Game_Defence.GetString");

	AwMessage_Game_Defence_GetString_Params params;
	params.Switch = Switch;
	params.RelatedPRI_1 = RelatedPRI_1;
	params.sRelatedPRI_2 = sRelatedPRI_2;
	params.OptionalObject = OptionalObject;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wProjectileFire.GetFireStart
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 X                              (Parm)
// struct FVector                 Y                              (Parm)
// struct FVector                 Z                              (Parm)
// struct FVector                 ReturnValue                    (Parm, OutParm, ReturnParm)

struct FVector UwProjectileFire::GetFireStart(const struct FVector& X, const struct FVector& Y, const struct FVector& Z)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectileFire.GetFireStart");

	UwProjectileFire_GetFireStart_Params params;
	params.X = X;
	params.Y = Y;
	params.Z = Z;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wProjectileFire.SpawnProjectile
// (Defined, Public)
// Parameters:
// struct FVector                 Start                          (Parm)
// struct FRotator                Dir                            (Parm)
// class AwProjectile*            ReturnValue                    (Parm, OutParm, ReturnParm)

class AwProjectile* UwProjectileFire::SpawnProjectile(const struct FVector& Start, const struct FRotator& Dir)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectileFire.SpawnProjectile");

	UwProjectileFire_SpawnProjectile_Params params;
	params.Start = Start;
	params.Dir = Dir;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wProjectileFire.DoFireEffect
// (Defined, Public)

void UwProjectileFire::DoFireEffect()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wProjectileFire.DoFireEffect");

	UwProjectileFire_DoFireEffect_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.Explode2
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AwC4Explosive::Explode2(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.Explode2");

	AwC4Explosive_Explode2_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.Explode
// (Defined, Simulated, Public)
// Parameters:
// struct FVector                 HitLocation                    (Parm)
// struct FVector                 HitNormal                      (Parm)

void AwC4Explosive::Explode(const struct FVector& HitLocation, const struct FVector& HitNormal)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.Explode");

	AwC4Explosive_Explode_Params params;
	params.HitLocation = HitLocation;
	params.HitNormal = HitNormal;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.Touch
// (Defined, Singular, Simulated, Public)
// Parameters:
// class AActor*                  Other                          (Parm)

void AwC4Explosive::Touch(class AActor* Other)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.Touch");

	AwC4Explosive_Touch_Params params;
	params.Other = Other;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.Reset
// (Defined, Public)

void AwC4Explosive::Reset()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.Reset");

	AwC4Explosive_Reset_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.OnEndRound
// (Defined, Public)

void AwC4Explosive::OnEndRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.OnEndRound");

	AwC4Explosive_OnEndRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.OnBeginRound
// (Defined, Public)

void AwC4Explosive::OnBeginRound()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.OnBeginRound");

	AwC4Explosive_OnBeginRound_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.Go
// (Defined, Simulated, Public)

void AwC4Explosive::Go()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.Go");

	AwC4Explosive_Go_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.Destroyed
// (Defined, Simulated, Event, Public)

void AwC4Explosive::Destroyed()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.Destroyed");

	AwC4Explosive_Destroyed_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.PostNetBeginPlay
// (Defined, Simulated, Public)

void AwC4Explosive::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.PostNetBeginPlay");

	AwC4Explosive_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wC4Explosive.PostBeginPlay
// (Defined, Simulated, Public)

void AwC4Explosive::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wC4Explosive.PostBeginPlay");

	AwC4Explosive_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachmentAlien.PlayIdle
// (Defined, Simulated, Public)

void AwFPWeaponAttachmentAlien::PlayIdle()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachmentAlien.PlayIdle");

	AwFPWeaponAttachmentAlien_PlayIdle_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachmentAlien.SetBodyItemID
// (Defined, Public)
// Parameters:
// int                            iBodyItemID                    (Parm)

void AwFPWeaponAttachmentAlien::SetBodyItemID(int iBodyItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachmentAlien.SetBodyItemID");

	AwFPWeaponAttachmentAlien_SetBodyItemID_Params params;
	params.iBodyItemID = iBodyItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachmentAlien.ChangeHands
// (Defined, Public)
// Parameters:
// int                            iBodyItemID                    (Parm)

void AwFPWeaponAttachmentAlien::ChangeHands(int iBodyItemID)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachmentAlien.ChangeHands");

	AwFPWeaponAttachmentAlien_ChangeHands_Params params;
	params.iBodyItemID = iBodyItemID;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wFPWeaponAttachmentAlien.wLoadOut
// (Defined, Simulated, Public)
// Parameters:
// int                            iID                            (Parm)
// int                            iAddPartsID                    (Parm)
// int                            iPaintID                       (Parm)
// class APawn*                   Pawn                           (Parm)

void AwFPWeaponAttachmentAlien::wLoadOut(int iID, int iAddPartsID, int iPaintID, class APawn* Pawn)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wFPWeaponAttachmentAlien.wLoadOut");

	AwFPWeaponAttachmentAlien_wLoadOut_Params params;
	params.iID = iID;
	params.iAddPartsID = iAddPartsID;
	params.iPaintID = iPaintID;
	params.Pawn = Pawn;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.DeadPlayer
// (Defined, Simulated, Public)

void UwSkill_CoolTime::DeadPlayer()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.DeadPlayer");

	UwSkill_CoolTime_DeadPlayer_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.ResetSkill
// (Defined, Simulated, Public)

void UwSkill_CoolTime::ResetSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.ResetSkill");

	UwSkill_CoolTime_ResetSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.UnuseSkill
// (Defined, Simulated, Public)

void UwSkill_CoolTime::UnuseSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.UnuseSkill");

	UwSkill_CoolTime_UnuseSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.UseSkill
// (Defined, Simulated, Public)

void UwSkill_CoolTime::UseSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.UseSkill");

	UwSkill_CoolTime_UseSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.CheckSkill
// (Simulated, Public)
// Parameters:
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UwSkill_CoolTime::CheckSkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.CheckSkill");

	UwSkill_CoolTime_CheckSkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill_CoolTime.ReadySkill
// (Defined, Simulated, Public)

void UwSkill_CoolTime::ReadySkill()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.ReadySkill");

	UwSkill_CoolTime_ReadySkill_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.UpdateProcess
// (Defined, Simulated, Public)

void UwSkill_CoolTime::UpdateProcess()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.UpdateProcess");

	UwSkill_CoolTime_UpdateProcess_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.GetMaxActiveTime
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwSkill_CoolTime::GetMaxActiveTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.GetMaxActiveTime");

	UwSkill_CoolTime_GetMaxActiveTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill_CoolTime.GetMaxCoolTime
// (Defined, Simulated, Public)
// Parameters:
// float                          ReturnValue                    (Parm, OutParm, ReturnParm)

float UwSkill_CoolTime::GetMaxCoolTime()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.GetMaxCoolTime");

	UwSkill_CoolTime_GetMaxCoolTime_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.wSkill_CoolTime.PostBeginPlay
// (Defined, Simulated, Public)

void UwSkill_CoolTime::PostBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.PostBeginPlay");

	UwSkill_CoolTime_PostBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.wSkill_CoolTime.Initialize
// (Defined, Simulated, Public)
// Parameters:
// class UwSkillBase*             SkillBase                      (Parm)
// class UwSkillBaseParam*        Param                          (Parm)

void UwSkill_CoolTime::Initialize(class UwSkillBase* SkillBase, class UwSkillBaseParam* Param)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.wSkill_CoolTime.Initialize");

	UwSkill_CoolTime_Initialize_Params params;
	params.SkillBase = SkillBase;
	params.Param = Param;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.PlayerStart_Alien.InitPosition
// (Defined, Public)

void APlayerStart_Alien::InitPosition()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PlayerStart_Alien.InitPosition");

	APlayerStart_Alien_InitPosition_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.B4SParser.ParseLines
// (Defined, Public)

void UB4SParser::ParseLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.B4SParser.ParseLines");

	UB4SParser_ParseLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.M3UParser.MatchPath
// (Defined, Public)
// Parameters:
// struct FString                 str                            (Parm, NeedCtorLink)
// struct FString                 ReturnValue                    (Parm, OutParm, ReturnParm, NeedCtorLink)

struct FString UM3UParser::MatchPath(const struct FString& str)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.M3UParser.MatchPath");

	UM3UParser_MatchPath_Params params;
	params.str = str;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.M3UParser.ParseLines
// (Defined, Public)

void UM3UParser::ParseLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.M3UParser.ParseLines");

	UM3UParser_ParseLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.M3UParser.Import
// (Defined, Public)
// Parameters:
// int                            PlaylistIndex                  (Parm)
// int                            InsertPosition                 (Parm)
// struct FString                 Path                           (Parm, NeedCtorLink)
// bool                           ReturnValue                    (Parm, OutParm, ReturnParm)

bool UM3UParser::Import(int PlaylistIndex, int InsertPosition, const struct FString& Path)
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.M3UParser.Import");

	UM3UParser_Import_Params params;
	params.PlaylistIndex = PlaylistIndex;
	params.InsertPosition = InsertPosition;
	params.Path = Path;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;

	return params.ReturnValue;
}


// Function Engine.PLSParser.ParseLines
// (Defined, Public)

void UPLSParser::ParseLines()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.PLSParser.ParseLines");

	UPLSParser_ParseLines_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterThirdPerson.PostNetBeginPlay
// (Defined, Event, Public)

void AEmitterThirdPerson::PostNetBeginPlay()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterThirdPerson.PostNetBeginPlay");

	AEmitterThirdPerson_PostNetBeginPlay_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


// Function Engine.EmitterThirdPerson.DestroyIfFirstPerson
// (Defined, Simulated, Public)

void AEmitterThirdPerson::DestroyIfFirstPerson()
{
	static auto fn = UObject::FindObject<UFunction>("Function Engine.EmitterThirdPerson.DestroyIfFirstPerson");

	AEmitterThirdPerson_DestroyIfFirstPerson_Params params;

	auto flags = fn->FunctionFlags;

	UObject::ProcessEvent(fn, &params);

	fn->FunctionFlags = flags;
}


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
