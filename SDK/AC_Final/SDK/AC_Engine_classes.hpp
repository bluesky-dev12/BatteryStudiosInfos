#pragma once

// Artic Combat (3369) SDK

#ifdef _MSC_VER
	#pragma pack(push, 0x4)
#endif

namespace Classes
{
//---------------------------------------------------------------------------
//Classes
//---------------------------------------------------------------------------

// Class Engine.wWeaponBaseParams
// 0x03A8 (0x03D4 - 0x002C)
class UwWeaponBaseParams : public UObject
{
public:
	EeWeaponType                                       eType;                                                    // 0x002C(0x0001) (Edit, EditConst)
	byte                                               Padding00[0x3];                                           // 0x002D(0x0003) MISSED OFFSET
	string                                             strName;                                                  // 0x0030(0x000C) (Edit, EditConst, NeedCtorLink)
	int                                                iWeaponID;                                                // 0x003C(0x0004) (Edit, EditConst)
	int                                                iInventoryGroup;                                          // 0x0040(0x0004) (Edit)
	int                                                iPriority;                                                // 0x0044(0x0004) (Edit)
	string                                             szClass_Resource;                                         // 0x0048(0x000C) (Edit, EditConst, NeedCtorLink)
	int                                                iFireMode;                                                // 0x0054(0x0004) (Edit)
	bool                                               bAimAvailable;                                            // 0x0058(0x0004) (Edit)
	float                                              fRateOfFire;                                              // 0x005C(0x0004) (Edit)
	float                                              fFireDelay;                                               // 0x0060(0x0004) (Edit)
	float                                              fMeleeDelay;                                              // 0x0064(0x0004) (Edit)
	int                                                iRoundBurstCount;                                         // 0x0068(0x0004) (Edit)
	float                                              fRoundBurstTime;                                          // 0x006C(0x0004) (Edit)
	float                                              fZoomFOV;                                                 // 0x0070(0x0004) (Edit)
	bool                                               bOverHeat;                                                // 0x0074(0x0004) (Edit)
	float                                              fOverHeat_Up;                                             // 0x0078(0x0004) (Edit)
	float                                              fOverHeat_Down;                                           // 0x007C(0x0004) (Edit)
	EBulletType                                        BulletType;                                               // 0x0080(0x0001) (Edit)
	EProjMoveType                                      ProjMoveType;                                             // 0x0081(0x0001) (Edit)
	byte                                               Padding01[0x2];                                           // 0x0082(0x0002) MISSED OFFSET
	int                                                iBulletCount;                                             // 0x0084(0x0004) (Edit)
	float                                              fProjSpeed;                                               // 0x0088(0x0004) (Edit)
	bool                                               bExplodeCollide;                                          // 0x008C(0x0004) (Edit)
	bool                                               bProjTakeDamage;                                          // 0x008C(0x0004) (Edit)
	int                                                iBombWeaponID;                                            // 0x0090(0x0004) (Edit)
	float                                              fFuseTime;                                                // 0x0094(0x0004) (Edit)
	bool                                               bFuseImpactTime;                                          // 0x0098(0x0004) (Edit)
	float                                              fActiveTime;                                              // 0x009C(0x0004) (Edit)
	float                                              fProjDecelEachBound;                                      // 0x00A0(0x0004) (Edit)
	float                                              fProjSpin;                                                // 0x00A4(0x0004) (Edit)
	float                                              fProjThrowPitch;                                          // 0x00A8(0x0004) (Edit)
	int                                                i2ndBulletCount;                                          // 0x00AC(0x0004) (Edit)
	bool                                               bBulletLandExplode;                                       // 0x00B0(0x0004) (Edit)
	EDamType                                           damtype;                                                  // 0x00B4(0x0001) (Edit)
	byte                                               Padding02[0x3];                                           // 0x00B5(0x0003) MISSED OFFSET
	int                                                iDamage;                                                  // 0x00B8(0x0004) (Edit)
	float                                              fDamWallShot;                                             // 0x00BC(0x0004) (Edit)
	float                                              fMomentum;                                                // 0x00C0(0x0004) (Edit)
	float                                              fMomentum_Pawn;                                           // 0x00C4(0x0004) (Edit)
	float                                              fDamRange_Eff;                                            // 0x00C8(0x0004) (Edit)
	float                                              fDamRange_Max;                                            // 0x00CC(0x0004) (Edit)
	int                                                iDam_OOR;                                                 // 0x00D0(0x0004) (Edit)
	int                                                iDamMelee;                                                // 0x00D4(0x0004) (Edit)
	int                                                iMeleeRange;                                              // 0x00D8(0x0004) (Edit)
	int                                                iMeleeExtent;                                             // 0x00DC(0x0004) (Edit)
	int                                                iMeleeExtent_Head;                                        // 0x00E0(0x0004) (Edit)
	int                                                iMeleeDam_Back;                                           // 0x00E4(0x0004) (Edit)
	float                                              fMeleeDam_Head;                                           // 0x00E8(0x0004) (Edit)
	float                                              fMeleeDam_UpperTorso;                                     // 0x00EC(0x0004) (Edit)
	float                                              fMeleeDam_LowerTorso;                                     // 0x00F0(0x0004) (Edit)
	float                                              fMeleeDam_UpperArm;                                       // 0x00F4(0x0004) (Edit)
	float                                              fMeleeDam_LowerArm;                                       // 0x00F8(0x0004) (Edit)
	float                                              fMeleeDam_UpperLeg;                                       // 0x00FC(0x0004) (Edit)
	float                                              fMeleeDam_LowerLeg;                                       // 0x0100(0x0004) (Edit)
	float                                              fDamPerc_Head;                                            // 0x0104(0x0004) (Edit)
	float                                              fDamPerc_UpperTorso;                                      // 0x0108(0x0004) (Edit)
	float                                              fDamPerc_LowerTorso;                                      // 0x010C(0x0004) (Edit)
	float                                              fDamPerc_UpperArm;                                        // 0x0110(0x0004) (Edit)
	float                                              fDamPerc_LowerArm;                                        // 0x0114(0x0004) (Edit)
	float                                              fDamPerc_UpperLeg;                                        // 0x0118(0x0004) (Edit)
	float                                              fDamPerc_LowerLeg;                                        // 0x011C(0x0004) (Edit)
	float                                              fDamPerc_Heli;                                            // 0x0120(0x0004) (Edit)
	float                                              fDamPerc_SentryGun;                                       // 0x0124(0x0004) (Edit)
	bool                                               bHitEffFriendly;                                          // 0x0128(0x0004) (Edit)
	float                                              fHitGunKick;                                              // 0x012C(0x0004) (Edit)
	float                                              fHitStunTime;                                             // 0x0130(0x0004) (Edit)
	float                                              fHitFlashTime;                                            // 0x0134(0x0004) (Edit)
	float                                              fHitFireTime;                                             // 0x0138(0x0004) (Edit)
	float                                              fHitFreezeTime;                                           // 0x013C(0x0004) (Edit)
	float                                              fHitEAXEffectTime;                                        // 0x0140(0x0004) (Edit)
	string                                             strHitEAXEffectClass;                                     // 0x0144(0x000C) (Edit, NeedCtorLink)
	EReloadType                                        ReloadType;                                               // 0x0150(0x0001) (Edit)
	byte                                               Padding03[0x3];                                           // 0x0151(0x0003) MISSED OFFSET
	bool                                               bRechamber;                                               // 0x0154(0x0004) (Edit)
	float                                              fRechamberRate;                                           // 0x0158(0x0004) (Edit)
	float                                              fReloadRate;                                              // 0x015C(0x0004) (Edit)
	float                                              fReloadEmptyRate;                                         // 0x0160(0x0004) (Edit)
	float                                              fReloadBeginRate;                                         // 0x0164(0x0004) (Edit)
	float                                              fReloadEndRate;                                           // 0x0168(0x0004) (Edit)
	float                                              fBulletGravity;                                           // 0x016C(0x0004) (Edit)
	float                                              fExplRad_Inner;                                           // 0x0170(0x0004) (Edit)
	float                                              fExplRad_Outer;                                           // 0x0174(0x0004) (Edit)
	float                                              fExplDam_Inner;                                           // 0x0178(0x0004) (Edit)
	float                                              fExplDam_Outer;                                           // 0x017C(0x0004) (Edit)
	float                                              fExplForce_Effect;                                        // 0x0180(0x0004) (Edit)
	float                                              fExplRad_Effect;                                          // 0x0184(0x0004) (Edit)
	int                                                iAmmo_Magazine;                                           // 0x0188(0x0004) (Edit)
	int                                                iAmmo_Reload;                                             // 0x018C(0x0004) (Edit)
	int                                                iAmmo_Initial;                                            // 0x0190(0x0004) (Edit)
	int                                                iAmmo_Max;                                                // 0x0194(0x0004) (Edit)
	int                                                iSpread_2nd_StartNum;                                     // 0x0198(0x0004) (Edit)
	float                                              fSpread_2nd_Add;                                          // 0x019C(0x0004) (Edit)
	float                                              fSpread_2nd_Max;                                          // 0x01A0(0x0004) (Edit)
	int                                                iSpread_Visual_Add;                                       // 0x01A4(0x0004) (Edit)
	float                                              fSpread_Shotgun;                                          // 0x01A8(0x0004) (Edit)
	float                                              fSpread_Jump;                                             // 0x01AC(0x0004) (Edit)
	float                                              fSpread_Stand_Min;                                        // 0x01B0(0x0004) (Edit)
	float                                              fSpread_Stand_Max;                                        // 0x01B4(0x0004) (Edit)
	float                                              fSpread_Ducked_Min;                                       // 0x01B8(0x0004) (Edit)
	float                                              fSpread_Ducked_Max;                                       // 0x01BC(0x0004) (Edit)
	float                                              fSpread_Prone_Min;                                        // 0x01C0(0x0004) (Edit)
	float                                              fSpread_Prone_Max;                                        // 0x01C4(0x0004) (Edit)
	float                                              fSpread_Move_Add;                                         // 0x01C8(0x0004) (Edit)
	float                                              fSpread_Fire_Add;                                         // 0x01CC(0x0004) (Edit)
	float                                              fSpread_Image_Increase;                                   // 0x01D0(0x0004) (Edit)
	float                                              fSpread_Stand_Reduce;                                     // 0x01D4(0x0004) (Edit)
	float                                              fSpread_Ducked_Reduce;                                    // 0x01D8(0x0004) (Edit)
	float                                              fSpread_Prone_Reduce;                                     // 0x01DC(0x0004) (Edit)
	float                                              fSpread_Aim_move_add;                                     // 0x01E0(0x0004) (Edit)
	float                                              fViewKickHip_XMin;                                        // 0x01E4(0x0004) (Edit)
	float                                              fViewKickHip_XMax;                                        // 0x01E8(0x0004) (Edit)
	float                                              fViewKickHip_YMin;                                        // 0x01EC(0x0004) (Edit)
	float                                              fViewKickHip_YMax;                                        // 0x01F0(0x0004) (Edit)
	float                                              fViewKickHip_Accel;                                       // 0x01F4(0x0004) (Edit)
	float                                              fViewKickHip_Decel;                                       // 0x01F8(0x0004) (Edit)
	float                                              fViewKickHip_StayTime;                                    // 0x01FC(0x0004) (Edit)
	float                                              fViewKickHip_DecaySpeed;                                  // 0x0200(0x0004) (Edit)
	float                                              fViewKickHip_DecayTimeFast;                               // 0x0204(0x0004) (Edit)
	float                                              fViewKickAds_XMin;                                        // 0x0208(0x0004) (Edit)
	float                                              fViewKickAds_XMax;                                        // 0x020C(0x0004) (Edit)
	float                                              fViewKickAds_YMin;                                        // 0x0210(0x0004) (Edit)
	float                                              fViewKickAds_YMax;                                        // 0x0214(0x0004) (Edit)
	float                                              fViewKickAds_Accel;                                       // 0x0218(0x0004) (Edit)
	float                                              fViewKickAds_Decel;                                       // 0x021C(0x0004) (Edit)
	float                                              fViewKickAds_StayTime;                                    // 0x0220(0x0004) (Edit)
	float                                              fViewKickAds_DecaySpeed;                                  // 0x0224(0x0004) (Edit)
	float                                              fViewKickAds_DecayTimeFast;                               // 0x0228(0x0004) (Edit)
	float                                              fAnimRate_PutDown;                                        // 0x022C(0x0004) (Edit)
	float                                              fAnimRate_PutDown_Quick;                                  // 0x0230(0x0004) (Edit)
	float                                              fAnimRate_BringUp;                                        // 0x0234(0x0004) (Edit)
	float                                              fAnimRate_SprintBringUp;                                  // 0x0238(0x0004) (Edit)
	float                                              fAnimRate_AdsOn;                                          // 0x023C(0x0004) (Edit)
	float                                              fAnimRate_AdsOff;                                         // 0x0240(0x0004) (Edit)
	bool                                               bApplyQuickDrop;                                          // 0x0244(0x0004) (Edit)
	float                                              fMaxPitch;                                                // 0x0248(0x0004) (Edit)
	int                                                iCrossHair;                                               // 0x024C(0x0004) (Edit)
	float                                              fMovePivot;                                               // 0x0250(0x0004) (Edit)
	float                                              fSprintStaminaRate;                                       // 0x0254(0x0004) (Edit)
	float                                              fSprintSpeed;                                             // 0x0258(0x0004) (Edit)
	float                                              fRunSpeed;                                                // 0x025C(0x0004) (Edit)
	float                                              fCrouchSpeed;                                             // 0x0260(0x0004) (Edit)
	float                                              fPronedSpeed;                                             // 0x0264(0x0004) (Edit)
	float                                              fAimRunSpeed;                                             // 0x0268(0x0004) (Edit)
	float                                              fAimCrouchSpeed;                                          // 0x026C(0x0004) (Edit)
	float                                              fStaminaRecovery;                                         // 0x0270(0x0004) (Edit)
	float                                              fHitMoveSpeed;                                            // 0x0274(0x0004) (Edit)
	float                                              fHitMoveTime;                                             // 0x0278(0x0004) (Edit)
	float                                              fHitMoveDelay;                                            // 0x027C(0x0004) (Edit)
	float                                              fBreathRadius_Idle;                                       // 0x0280(0x0004) (Edit)
	float                                              fBreathSpeed_Idle;                                        // 0x0284(0x0004) (Edit)
	float                                              fBreathRadius_Aim;                                        // 0x0288(0x0004) (Edit)
	float                                              fBreathSpeed_Aim;                                         // 0x028C(0x0004) (Edit)
	float                                              fBreathRadius_DuckedAim;                                  // 0x0290(0x0004) (Edit)
	float                                              fBreathSpeed_DuckedAim;                                   // 0x0294(0x0004) (Edit)
	float                                              fBreathRadius_ProneAim;                                   // 0x0298(0x0004) (Edit)
	float                                              fBreathSpeed_ProneAim;                                    // 0x029C(0x0004) (Edit)
	float                                              fBobWeapon_Move;                                          // 0x02A0(0x0004) (Edit)
	float                                              fBobScreen_Move;                                          // 0x02A4(0x0004) (Edit)
	float                                              fBobWeapon_Ads_Move;                                      // 0x02A8(0x0004) (Edit)
	float                                              fBobScreen_Ads_Move;                                      // 0x02AC(0x0004) (Edit)
	float                                              fBobWeapon_Ducked_Move;                                   // 0x02B0(0x0004) (Edit)
	float                                              fBobScreen_Ducked_Move;                                   // 0x02B4(0x0004) (Edit)
	float                                              fBobScreen_Prone_Move;                                    // 0x02B8(0x0004) (Edit)
	float                                              fBobWeapon_Sprint_Move;                                   // 0x02BC(0x0004) (Edit)
	float                                              fBobScreen_Sprint_Move;                                   // 0x02C0(0x0004) (Edit)
	float                                              fBobWeapon_sprint_y;                                      // 0x02C4(0x0004) (Edit)
	float                                              fBobScreen_sprint_y;                                      // 0x02C8(0x0004) (Edit)
	float                                              fBobWeapon_ads_move_y;                                    // 0x02CC(0x0004) (Edit)
	float                                              fBobScreen_ads_move_y;                                    // 0x02D0(0x0004) (Edit)
	float                                              fBobWeapon_move_y;                                        // 0x02D4(0x0004) (Edit)
	float                                              fBobScreen_move_y;                                        // 0x02D8(0x0004) (Edit)
	float                                              fBobWeapon_ducked_move_y;                                 // 0x02DC(0x0004) (Edit)
	float                                              fBobScreen_ducked_move_y;                                 // 0x02E0(0x0004) (Edit)
	float                                              fBobScreen_prone_move_y;                                  // 0x02E4(0x0004) (Edit)
	float                                              fSway_HipX_Max;                                           // 0x02E8(0x0004) (Edit)
	float                                              fSway_HipX_Incr;                                          // 0x02EC(0x0004) (Edit)
	float                                              fSway_HipX_Speed;                                         // 0x02F0(0x0004) (Edit)
	float                                              fSway_HipY_Max;                                           // 0x02F4(0x0004) (Edit)
	float                                              fSway_HipY_Incr;                                          // 0x02F8(0x0004) (Edit)
	float                                              fSway_HipY_Speed;                                         // 0x02FC(0x0004) (Edit)
	float                                              fSway_AdsX_Max;                                           // 0x0300(0x0004) (Edit)
	float                                              fSway_AdsX_Incr;                                          // 0x0304(0x0004) (Edit)
	float                                              fSway_AdsX_Speed;                                         // 0x0308(0x0004) (Edit)
	float                                              fSway_AdsY_Max;                                           // 0x030C(0x0004) (Edit)
	float                                              fSway_AdsY_Incr;                                          // 0x0310(0x0004) (Edit)
	float                                              fSway_AdsY_Speed;                                         // 0x0314(0x0004) (Edit)
	float                                              fFiringSway_HipX_Max;                                     // 0x0318(0x0004) (Edit)
	float                                              fFiringSway_HipX_Incr;                                    // 0x031C(0x0004) (Edit)
	float                                              fFiringSway_HipX_Speed;                                   // 0x0320(0x0004) (Edit)
	float                                              fFiringSway_HipY_Max;                                     // 0x0324(0x0004) (Edit)
	float                                              fFiringSway_HipY_Incr;                                    // 0x0328(0x0004) (Edit)
	float                                              fFiringSway_HipY_Speed;                                   // 0x032C(0x0004) (Edit)
	float                                              fFiringSway_AdsX_Max;                                     // 0x0330(0x0004) (Edit)
	float                                              fFiringSway_AdsX_Incr;                                    // 0x0334(0x0004) (Edit)
	float                                              fFiringSway_AdsX_Speed;                                   // 0x0338(0x0004) (Edit)
	float                                              fFiringSway_AdsY_Max;                                     // 0x033C(0x0004) (Edit)
	float                                              fFiringSway_AdsY_Incr;                                    // 0x0340(0x0004) (Edit)
	float                                              fFiringSway_AdsY_Speed;                                   // 0x0344(0x0004) (Edit)
	ECrosshairType                                     CrosshairType;                                            // 0x0348(0x0001) (Edit)
	byte                                               Padding04[0x3];                                           // 0x0349(0x0003) MISSED OFFSET
	string                                             CrosshairImage;                                           // 0x034C(0x000C) (Edit, NeedCtorLink)
	int                                                ui_damage;                                                // 0x0358(0x0004) (Edit)
	int                                                ui_spread;                                                // 0x035C(0x0004) (Edit)
	int                                                ui_view_kick;                                             // 0x0360(0x0004) (Edit)
	int                                                ui_rate_of_fire;                                          // 0x0364(0x0004) (Edit)
	int                                                ui_move;                                                  // 0x0368(0x0004) (Edit)
	int                                                ui_range;                                                 // 0x036C(0x0004) (Edit)
	float                                              fNPCSpreadRate;                                           // 0x0370(0x0004)
	float                                              fNPCRateOfFire;                                           // 0x0374(0x0004)
	int                                                iNPCFire;                                                 // 0x0378(0x0004)
	float                                              wt_BoundingMax;                                           // 0x037C(0x0004)
	float                                              wt_RandomMul;                                             // 0x0380(0x0004)
	float[]                                            wt_x;                                                     // 0x0384(0x000C) (NeedCtorLink)
	float[]                                            wt_y;                                                     // 0x0390(0x000C) (NeedCtorLink)
	float[]                                            wt_RandomWeight;                                          // 0x039C(0x000C) (NeedCtorLink)
	float                                              wtAim_BoundingMax;                                        // 0x03A8(0x0004)
	float                                              wtAim_RandomMul;                                          // 0x03AC(0x0004)
	float[]                                            wtAim_x;                                                  // 0x03B0(0x000C) (NeedCtorLink)
	float[]                                            wtAim_y;                                                  // 0x03BC(0x000C) (NeedCtorLink)
	float[]                                            wtAim_RandomWeight;                                       // 0x03C8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponBaseParams");
		return ptr;
	}


	ECrosshairType GetCrosshairType(const string& szValue);
	EReloadType GetReloadType(const string& szValue);
	EProjMoveType GetProjMoveType(const string& szValue);
	EBulletType GetBulletType(const string& szValue);
};


// Class Engine.wWeaponManager
// 0x006C (0x0098 - 0x002C)
class UwWeaponManager : public UObject
{
public:
	class UwWeaponBaseParams*[]                        WeaponParams;                                             // 0x002C(0x000C) (NeedCtorLink)
	string[]                                           arr_szResClass;                                           // 0x0038(0x000C) (NeedCtorLink)
	class UClass*[]                                    arr_classRes;                                             // 0x0044(0x000C) (NeedCtorLink)
	float[]                                            BaseSpeed_Sprint;                                         // 0x0050(0x000C) (NeedCtorLink)
	float[]                                            BaseSpeed_Run;                                            // 0x005C(0x000C) (NeedCtorLink)
	float[]                                            BaseSpeed_Aim;                                            // 0x0068(0x000C) (NeedCtorLink)
	float[]                                            BaseSpeed_Run_Cr;                                         // 0x0074(0x000C) (NeedCtorLink)
	float[]                                            BaseSpeed_Aim_Cr;                                         // 0x0080(0x000C) (NeedCtorLink)
	float[]                                            BaseSpeed_Prone;                                          // 0x008C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponManager");
		return ptr;
	}


	void STATIC_PrecacheSound();
	void STATIC_PrecacheMaterials(class ALevelInfo* Level);
	void STATIC_PrecacheClasses();
	class UwWeaponBaseParams* GetBaseParam(int id);
	void AddWeaponExParams(class UBTNetExcelData* excelWeapon, bool bCheat, class AwWeapon* Weapon);
	void AddWeaponParams(class UBTNetExcelData* excelWeapon, bool bCheat, class AwWeapon* Weapon);
	void LoadWeaponParams(const string& strExcelFileName, bool bCheat, class AwWeapon* Weapon);
	void AddWeaponRecoilParams(class UBTNetGameData* GameData);
	void LoadWeaponRecoilParams();
	class UClass* GetRes(const string& szRes);
	void InitWeaponPrecacheClasses();
	void LoadWeaponRes();
	bool IsEnableEquipGrenade(int ItemID, int ItemID1);
	bool IsUseWeapon_InGame(int iGameMode, int iWeaponID);
	void DestroyScript();
	void InitScript(const string& strExcelFileName);
};


// Class Engine.ObjectPool
// 0x0010 (0x003C - 0x002C)
class UObjectPool : public UObject
{
public:
	class UObject*[]                                   Objects;                                                  // 0x002C(0x000C) (NeedCtorLink)
	int                                                NewCount;                                                 // 0x0038(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ObjectPool");
		return ptr;
	}


	void Shrink();
	class UObject* FreeObjectDupCheck(class UObject* obj);
	class UObject* FreeObject(class UObject* obj);
	class UObject* AllocateObject(class UClass* ObjectClass);
	class UObject* PopObject(class UClass* ObjectClass);
};


// Class Engine.Actor
// 0x03AC (0x03D8 - 0x002C)
class AActor : public UObject
{
public:
	ELightType                                         LightType;                                                // 0x002C(0x0001) (Edit, Net)
	ELightEffect                                       LightEffect;                                              // 0x002D(0x0001) (Edit, Net)
	byte                                               LightHue;                                                 // 0x002E(0x0001) (Edit, Net)
	byte                                               LightSaturation;                                          // 0x002F(0x0001) (Edit, Net)
	float                                              LightBrightness;                                          // 0x0030(0x0004) (Edit, Net)
	float                                              LightRadius;                                              // 0x0034(0x0004) (Edit, Net)
	byte                                               LightPeriod;                                              // 0x0038(0x0001) (Edit, Net)
	byte                                               LightPhase;                                               // 0x0039(0x0001) (Edit, Net)
	byte                                               LightCone;                                                // 0x003A(0x0001) (Edit)
	byte                                               Padding00[0x1];                                           // 0x003B(0x0001) MISSED OFFSET
	float                                              LightBrightnessScale;                                     // 0x003C(0x0004) (Edit)
	float                                              PawnLightBrightnessScale;                                 // 0x0040(0x0004) (Edit)
	EDrawType                                          DrawType;                                                 // 0x0044(0x0001) (Edit, Const, Net)
	EFilterState                                       StaticFilterState;                                        // 0x0045(0x0001) (Const, Native)
	byte                                               Padding01[0x2];                                           // 0x0046(0x0002) MISSED OFFSET
	class UStaticMesh*                                 StaticMesh;                                               // 0x0048(0x0004) (Edit, Const, Net)
	class AActor*                                      Owner;                                                    // 0x004C(0x0004) (Const, Net)
	class AActor*                                      Base;                                                     // 0x0050(0x0004) (Const, Net)
	class UMaterial*                                   BaseMaterial;                                             // 0x0054(0x0004) (Const)
	struct FActorRenderDataPtr                         ActorRenderData;                                          // 0x0058(0x0004) (Const, Native)
	struct FLightRenderDataPtr                         LightRenderData;                                          // 0x005C(0x0004) (Const, Native)
	int                                                RenderRevision;                                           // 0x0060(0x0004) (Const, Native)
	int                                                FunctionReplicateCount;                                   // 0x0064(0x0004)
	int                                                VariableReplicateCount;                                   // 0x0068(0x0004)
	struct FBatchReference[]                           StaticSectionBatches;                                     // 0x006C(0x000C) (Const, Native)
	FName                                              ForcedVisibilityZoneTag;                                  // 0x0078(0x0004) (Edit, Const)
	float                                              CullDistance;                                             // 0x007C(0x0004) (Edit)
	float                                              fLightScale;                                              // 0x0080(0x0004) (Edit)
	bool                                               bDisableSorting;                                          // 0x0084(0x0004) (Edit)
	bool                                               bIgnoreEncroachers;                                       // 0x0084(0x0004) (Edit, Net)
	bool                                               bShowOctreeNodes;                                         // 0x0084(0x0004)
	bool                                               bHidden;                                                  // 0x0084(0x0004) (Edit, Net)
	bool                                               bDramaticLighting;                                        // 0x0084(0x0004)
	bool                                               bStatic;                                                  // 0x0084(0x0004) (Edit, Const)
	bool                                               bNoDelete;                                                // 0x0084(0x0004) (Edit, Const)
	bool                                               bDeleteMe;                                                // 0x0084(0x0004) (Const)
	bool                                               bTicked;                                                  // 0x0084(0x0004) (Const, Transient)
	bool                                               bDynamicLight;                                            // 0x0084(0x0004) (Edit)
	bool                                               bEnvironmentLight;                                        // 0x0084(0x0004) (Edit)
	bool                                               bTimerLoop;                                               // 0x0084(0x0004)
	bool                                               bOnlyOwnerSee;                                            // 0x0084(0x0004) (Net)
	bool                                               bHighDetail;                                              // 0x0084(0x0004) (Edit)
	bool                                               bSuperHighDetail;                                         // 0x0084(0x0004) (Edit)
	bool                                               bOnlyDrawIfAttached;                                      // 0x0084(0x0004) (Net)
	bool                                               bStasis;                                                  // 0x0084(0x0004) (Edit)
	bool                                               bTrailerAllowRotation;                                    // 0x0084(0x0004)
	bool                                               bTrailerSameRotation;                                     // 0x0084(0x0004)
	bool                                               bTrailerPrePivot;                                         // 0x0084(0x0004)
	bool                                               bWorldGeometry;                                           // 0x0084(0x0004)
	bool                                               bAcceptsProjectors;                                       // 0x0084(0x0004) (Edit)
	bool                                               bOrientOnSlope;                                           // 0x0084(0x0004)
	bool                                               bOnlyAffectPawns;                                         // 0x0084(0x0004) (Const)
	bool                                               bSpecialLit;                                              // 0x0084(0x0004) (Edit, Net)
	bool                                               bActorShadows;                                            // 0x0084(0x0004) (Edit)
	bool                                               bCorona;                                                  // 0x0084(0x0004) (Edit)
	bool                                               bDirectionalCorona;                                       // 0x0084(0x0004) (Edit)
	bool                                               bAttenByLife;                                             // 0x0084(0x0004) (Edit)
	bool                                               bLightingVisibility;                                      // 0x0084(0x0004) (Edit)
	bool                                               bUseDynamicLights;                                        // 0x0084(0x0004) (Edit)
	bool                                               bLightChanged;                                            // 0x0084(0x0004)
	bool                                               Padding02 : 24;                                           // 0x0088(0x0001)
	bool                                               bNetInitialRotation;                                      // 0x0088(0x0004) (Const)
	bool                                               bCompressedPosition;                                      // 0x0088(0x0004)
	bool                                               bAlwaysZeroBoneOffset;                                    // 0x0088(0x0004)
	bool                                               bIgnoreVehicles;                                          // 0x0088(0x0004)
	bool                                               bDeferRendering;                                          // 0x0088(0x0004) (Edit)
	bool                                               bBadStateCode;                                            // 0x0088(0x0004)
	bool                                               bSkipTimerInChangedHost;                                  // 0x0088(0x0004)
	bool                                               bSkipLifeSpanInChangedHost;                               // 0x0088(0x0004)
	bool                                               bReplicateMovement;                                       // 0x0088(0x0004)
	bool                                               bSkipActorPropertyReplication;                            // 0x0088(0x0004)
	bool                                               bUpdateSimulatedPosition;                                 // 0x0088(0x0004)
	bool                                               bTearOff;                                                 // 0x0088(0x0004) (Net)
	bool                                               bOnlyDirtyReplication;                                    // 0x0088(0x0004)
	bool                                               bReplicateAnimations;                                     // 0x0088(0x0004)
	bool                                               bWasSNFiltered;                                           // 0x0088(0x0004)
	bool                                               bShouldStopKarma;                                         // 0x0088(0x0004) (Const, Transient)
	bool                                               bDetailAttachment;                                        // 0x0088(0x0004) (Const)
	bool                                               bNetTemporary;                                            // 0x0088(0x0004) (Const)
	bool                                               bOnlyRelevantToOwner;                                     // 0x0088(0x0004)
	bool                                               bNetDirty;                                                // 0x0088(0x0004) (Const, Transient)
	bool                                               bAlwaysRelevant;                                          // 0x0088(0x0004)
	bool                                               bReplicateInstigator;                                     // 0x0088(0x0004)
	int                                                nOldActor;                                                // 0x008C(0x0004)
	class UObject*[]                                   DestroyListeners;                                         // 0x0090(0x000C) (NeedCtorLink)
	EPhysics                                           Physics;                                                  // 0x009C(0x0001) (Edit, Const, Net)
	ENetRole                                           RemoteRole;                                               // 0x009D(0x0001) (Net)
	ENetRole                                           Role;                                                     // 0x009E(0x0001) (Net)
	byte                                               Padding03[0x1];                                           // 0x009F(0x0001) MISSED OFFSET
	int                                                NetTag;                                                   // 0x00A0(0x0004) (Const, Transient)
	float                                              NetUpdateTime;                                            // 0x00A4(0x0004)
	float                                              NetUpdateFrequency;                                       // 0x00A8(0x0004) (Localized)
	float                                              NetPriority;                                              // 0x00AC(0x0004)
	class APawn*                                       Instigator;                                               // 0x00B0(0x0004) (Net)
	class USound*                                      AmbientSound;                                             // 0x00B4(0x0004) (Edit, Net)
	string                                             FmodAmbientSound;                                         // 0x00B8(0x000C) (Edit, NeedCtorLink)
	FName                                              AttachmentBone;                                           // 0x00C4(0x0004) (Const, Net)
	class ALevelInfo*                                  Level;                                                    // 0x00C8(0x0004) (Const)
	class ULevel*                                      XLevel;                                                   // 0x00CC(0x0004) (Const, Transient)
	float                                              LifeSpan;                                                 // 0x00D0(0x0004) (Edit)
	float                                              LifeSpanReplicated;                                       // 0x00D4(0x0004) (Net)
	float                                              LifeSpanReplicatedClient;                                 // 0x00D8(0x0004)
	struct FPointRegion                                Region;                                                   // 0x00DC(0x000C) (Const)
	float                                              TimerRate;                                                // 0x00E8(0x0004)
	class UMaterial*                                   OverlayMaterial;                                          // 0x00EC(0x0004) (Edit, Net)
	class UMesh*                                       Mesh;                                                     // 0x00F0(0x0004) (Edit, Const, Net)
	float                                              LastRenderTime;                                           // 0x00F4(0x0004) (Transient)
	FName                                              Tag;                                                      // 0x00F8(0x0004) (Edit)
	int[]                                              Leaves;                                                   // 0x00FC(0x000C) (Transient, NeedCtorLink)
	FName                                              Event;                                                    // 0x0108(0x0004) (Edit)
	class AInventory*                                  Inventory;                                                // 0x010C(0x0004) (Net)
	float                                              TimerCounter;                                             // 0x0110(0x0004) (Const)
	class UMeshInstance*                               MeshInstance;                                             // 0x0114(0x0004) (Transient)
	float                                              LODBias;                                                  // 0x0118(0x0004) (Edit)
	FName                                              InitialState;                                             // 0x011C(0x0004) (Edit)
	FName                                              Group;                                                    // 0x0120(0x0004) (Edit)
	class AActor*[]                                    Touching;                                                 // 0x0124(0x000C) (Const, NeedCtorLink)
	struct FPointer[]                                  OctreeNodes;                                              // 0x0130(0x000C) (Const, Transient, NeedCtorLink)
	struct FBox                                        OctreeBox;                                                // 0x013C(0x001C) (Const, Transient)
	struct FVector                                     OctreeBoxCenter;                                          // 0x0158(0x000C) (Const, Transient)
	struct FVector                                     OctreeBoxRadii;                                           // 0x0164(0x000C) (Const, Transient)
	class AActor*                                      Deleted;                                                  // 0x0170(0x0004) (Const)
	float                                              LatentFloat;                                              // 0x0174(0x0004) (Const)
	int                                                CollisionTag;                                             // 0x0178(0x0004) (Const, Native)
	int                                                JoinedTag;                                                // 0x017C(0x0004) (Const, Transient)
	class APhysicsVolume*                              PhysicsVolume;                                            // 0x0180(0x0004) (Const)
	struct FVector                                     Location;                                                 // 0x0184(0x000C) (Edit, Const, Net)
	struct FRotator                                    Rotation;                                                 // 0x0190(0x000C) (Edit, Const, Net)
	struct FVector                                     Velocity;                                                 // 0x019C(0x000C) (Edit, Net)
	struct FVector                                     Acceleration;                                             // 0x01A8(0x000C)
	float                                              fLeanAcc;                                                 // 0x01B4(0x0004)
	struct FVector                                     vLeanVel;                                                 // 0x01B8(0x000C)
	struct FVector                                     vLeanAcc;                                                 // 0x01C4(0x000C)
	struct FVector                                     CachedLocation;                                           // 0x01D0(0x000C) (Const)
	struct FRotator                                    CachedRotation;                                           // 0x01DC(0x000C) (Const)
	struct FMatrix                                     CachedLocalToWorld;                                       // 0x01E8(0x0040)
	FName                                              AttachTag;                                                // 0x0228(0x0004) (Edit)
	class AActor*[]                                    Attached;                                                 // 0x022C(0x000C) (Const, NeedCtorLink)
	struct FVector                                     RelativeLocation;                                         // 0x0238(0x000C) (Const, Net)
	struct FRotator                                    RelativeRotation;                                         // 0x0244(0x000C) (Const, Net)
	bool                                               bUseRelativeBaseRotation;                                 // 0x0250(0x0004)
	struct FMatrix                                     HardRelMatrix;                                            // 0x0254(0x0040) (Const)
	struct FProjectorRenderInfoPtr[]                   Projectors;                                               // 0x0294(0x000C) (Const, Native)
	struct FStaticMeshProjectorRenderInfoPtr[]         StaticMeshProjectors;                                     // 0x02A0(0x000C) (Const, Native)
	class UMaterial*                                   Texture;                                                  // 0x02AC(0x0004) (Edit, Net)
	class UStaticMeshInstance*                         StaticMeshInstance;                                       // 0x02B0(0x0004)
	class UModel*                                      Brush;                                                    // 0x02B4(0x0004) (Const, ExportObject)
	float                                              DrawScale;                                                // 0x02B8(0x0004) (Edit, Const, Net)
	struct FVector                                     DrawScale3D;                                              // 0x02BC(0x000C) (Edit, Const)
	struct FVector                                     PrePivot;                                                 // 0x02C8(0x000C) (Edit, Net)
	bool                                               bSyncCollsionSizeHK;                                      // 0x02D4(0x0004)
	class UMaterial*[]                                 Skins;                                                    // 0x02D8(0x000C) (Edit, NeedCtorLink)
	class UMaterial*                                   RepSkin;                                                  // 0x02E4(0x0004) (Net)
	byte                                               AmbientGlow;                                              // 0x02E8(0x0001) (Edit, Net)
	byte                                               MaxLights;                                                // 0x02E9(0x0001) (Edit)
	EUV2Mode                                           UV2Mode;                                                  // 0x02EA(0x0001) (Edit)
	byte                                               Padding04[0x1];                                           // 0x02EB(0x0001) MISSED OFFSET
	class UConvexVolume*                               AntiPortal;                                               // 0x02EC(0x0004) (Edit, ExportObject)
	class UMaterial*                                   UV2Texture;                                               // 0x02F0(0x0004) (Edit)
	int                                                UV2TextureSize;                                           // 0x02F4(0x0004) (Edit)
	class UMaterial*                                   UV2DirectionalLightmaps;                                  // 0x02F8(0x0004) (Edit)
	float                                              ScaleGlow;                                                // 0x02FC(0x0004) (Edit)
	class UMaterial*                                   EnvironmentMap;                                           // 0x0300(0x0004) (Edit)
	int                                                CurrentLODLevel;                                          // 0x0304(0x0004)
	bool                                               bShadowMap;                                               // 0x0308(0x0004) (Edit)
	bool                                               bSelfShadowCast;                                          // 0x0308(0x0004) (Edit)
	bool                                               bExcludeVisibilityTest;                                   // 0x0308(0x0004) (Edit)
	bool                                               bIsFar;                                                   // 0x0308(0x0004) (Edit)
	bool                                               bDontBatch;                                               // 0x0308(0x0004) (Edit)
	EActor_ESurfaceTypes                               SurfaceType;                                              // 0x030C(0x0001) (Edit)
	ERenderStyle                                       Style;                                                    // 0x030D(0x0001) (Edit, Net)
	byte                                               Padding05[0x2];                                           // 0x030E(0x0002) MISSED OFFSET
	bool                                               bOwnerNoSee;                                              // 0x0310(0x0004)
	bool                                               bCanTeleport;                                             // 0x0310(0x0004) (Edit)
	bool                                               bClientAnim;                                              // 0x0310(0x0004)
	bool                                               bDisturbFluidSurface;                                     // 0x0310(0x0004)
	bool                                               bShouldBaseAtStartup;                                     // 0x0310(0x0004) (Edit)
	bool                                               bMovable;                                                 // 0x0310(0x0004) (Edit)
	bool                                               bDestroyInPainVolume;                                     // 0x0310(0x0004)
	bool                                               bCanBeDamaged;                                            // 0x0310(0x0004)
	bool                                               bPendingDelete;                                           // 0x0310(0x0004)
	bool                                               bAnimByOwner;                                             // 0x0310(0x0004)
	bool                                               bUnlit;                                                   // 0x0310(0x0004) (Edit, Net)
	bool                                               bShadowCast;                                              // 0x0310(0x0004) (Edit)
	bool                                               bStaticLighting;                                          // 0x0310(0x0004) (Edit)
	bool                                               bUseLightingFromBase;                                     // 0x0310(0x0004) (Edit)
	bool                                               bHurtEntry;                                               // 0x0310(0x0004)
	bool                                               bGameRelevant;                                            // 0x0310(0x0004) (Edit)
	bool                                               bCollideWhenPlacing;                                      // 0x0310(0x0004) (Edit)
	bool                                               bTravel;                                                  // 0x0310(0x0004)
	float                                              FluidSurfaceShootStrengthMod;                             // 0x0314(0x0004)
	bool                                               bAlwaysTick;                                              // 0x0318(0x0004) (Const)
	bool                                               bFullVolume;                                              // 0x0318(0x0004) (Edit)
	bool                                               bNotifyLocalPlayerTeamReceived;                           // 0x0318(0x0004)
	bool                                               bHardAttach;                                              // 0x0318(0x0004) (Edit)
	bool                                               bForceSkelUpdate;                                         // 0x0318(0x0004)
	bool                                               bClientAuthoritative;                                     // 0x0318(0x0004) (Const)
	bool                                               bNotDrawSelf;                                             // 0x0318(0x0004) (Net)
	byte                                               SoundVolume;                                              // 0x031C(0x0001) (Edit, Net)
	byte                                               SoundPitch;                                               // 0x031D(0x0001) (Edit, Net)
	ESoundOcclusion                                    SoundOcclusion;                                           // 0x031E(0x0001) (Edit)
	byte                                               Padding06[0x1];                                           // 0x031F(0x0001) MISSED OFFSET
	float                                              SoundRadius;                                              // 0x0320(0x0004) (Edit, Net)
	float                                              TransientSoundVolume;                                     // 0x0324(0x0004) (Edit)
	float                                              TransientSoundRadius;                                     // 0x0328(0x0004) (Edit)
	float                                              CollisionRadius;                                          // 0x032C(0x0004) (Edit, Const, Net)
	float                                              CollisionHeight;                                          // 0x0330(0x0004) (Edit, Const, Net)
	bool                                               bIgnoreOutOfWorld;                                        // 0x0334(0x0004)
	bool                                               bBounce;                                                  // 0x0334(0x0004) (Edit)
	bool                                               bFixedRotationDir;                                        // 0x0334(0x0004) (Edit, Net)
	bool                                               bRotateToDesired;                                         // 0x0334(0x0004) (Edit, Net)
	bool                                               bIgnoreTerminalVelocity;                                  // 0x0334(0x0004) (Edit)
	bool                                               bOrientToVelocity;                                        // 0x0334(0x0004) (Edit)
	bool                                               bInterpolating;                                           // 0x0334(0x0004)
	bool                                               bJustTeleported;                                          // 0x0334(0x0004) (Const)
	bool                                               bAutoAlignToTerrain;                                      // 0x0334(0x0004) (Edit)
	bool                                               bUseCylinderCollision;                                    // 0x0334(0x0004) (Edit)
	bool                                               bBlockKarma;                                              // 0x0334(0x0004) (Edit, Const)
	bool                                               bBlocksTeleport;                                          // 0x0334(0x0004)
	bool                                               bAlwaysFaceCamera;                                        // 0x0334(0x0004) (Edit)
	bool                                               bNetNotify;                                               // 0x0334(0x0004)
	bool                                               bClientTrigger;                                           // 0x0334(0x0004) (Net)
	bool                                               bUseCollisionStaticMesh;                                  // 0x0334(0x0004)
	bool                                               bSmoothKarmaStateUpdates;                                 // 0x0334(0x0004)
	bool                                               bForceCollision;                                          // 0x0334(0x0004) (Edit)
	bool                                               bCollideActors;                                           // 0x0334(0x0004) (Edit, Const, Net)
	bool                                               bCollideWorld;                                            // 0x0334(0x0004) (Net)
	bool                                               bBlockActors;                                             // 0x0334(0x0004) (Edit, Net)
	bool                                               bBlockPlayers;                                            // 0x0334(0x0004)
	bool                                               bBlockProjectiles;                                        // 0x0334(0x0004)
	bool                                               bProjTarget;                                              // 0x0334(0x0004) (Edit, Net)
	bool                                               bBlockZeroExtentTraces;                                   // 0x0334(0x0004) (Edit)
	bool                                               bBlockNonZeroExtentTraces;                                // 0x0334(0x0004) (Edit)
	float                                              Mass;                                                     // 0x0338(0x0004) (Edit)
	float                                              Buoyancy;                                                 // 0x033C(0x0004) (Edit)
	struct FRotator                                    RotationRate;                                             // 0x0340(0x000C) (Edit, Net)
	struct FRotator                                    DesiredRotation;                                          // 0x034C(0x000C) (Edit, Net)
	bool                                               DesiredRotationCheck_Yaw;                                 // 0x0358(0x0004)
	bool                                               DesiredRotationCheck_Pitch;                               // 0x0358(0x0004)
	bool                                               DesiredRotationCheck_Roll;                                // 0x0358(0x0004)
	float                                              DesiredRotationThreshold_Yaw;                             // 0x035C(0x0004)
	float                                              DesiredRotationThreshold_Pitch;                           // 0x0360(0x0004)
	float                                              DesiredRotationThreshold_Roll;                            // 0x0364(0x0004)
	class AActor*                                      PendingTouch;                                             // 0x0368(0x0004)
	struct FVector                                     ColLocation;                                              // 0x036C(0x000C) (Const)
	FName                                              ExcludeTag[0x8];                                          // 0x0378(0x0004) (Edit)
	class UKarmaParamsCollision*                       KParams;                                                  // 0x0398(0x0004) (Edit, ExportObject, NeedCtorLink, EditInline)
	int                                                KStepTag;                                                 // 0x039C(0x0004) (Const, Native)
	float                                              AccumKarmaAngleError;                                     // 0x03A0(0x0004)
	struct FAnimRep                                    SimAnim;                                                  // 0x03A4(0x000C) (Net)
	EForceType                                         ForceType;                                                // 0x03B0(0x0001) (Edit)
	byte                                               Padding07[0x3];                                           // 0x03B1(0x0003) MISSED OFFSET
	float                                              ForceRadius;                                              // 0x03B4(0x0004) (Edit)
	float                                              ForceScale;                                               // 0x03B8(0x0004) (Edit)
	float                                              ForceNoise;                                               // 0x03BC(0x0004) (Edit)
	bool                                               bNoProne;                                                 // 0x03C0(0x0004) (Edit)
	bool                                               bNoRepMesh;                                               // 0x03C0(0x0004)
	bool                                               bNotOnDedServer;                                          // 0x03C0(0x0004)
	bool                                               bAlreadyPrecachedMaterials;                               // 0x03C0(0x0004)
	bool                                               bAlreadyPrecachedMeshes;                                  // 0x03C0(0x0004)
	bool                                               bAlreadyPrecachedSkeletalMeshes;                          // 0x03C0(0x0004)
	bool                                               bHiddenEd;                                                // 0x03C0(0x0004) (Edit)
	bool                                               bHiddenEdGroup;                                           // 0x03C0(0x0004) (Edit)
	bool                                               bDirectional;                                             // 0x03C0(0x0004) (Edit)
	bool                                               bSelected;                                                // 0x03C0(0x0004) (Const)
	bool                                               bEdShouldSnap;                                            // 0x03C0(0x0004) (Edit)
	bool                                               bEdSnap;                                                  // 0x03C0(0x0004) (Transient)
	bool                                               bTempEditor;                                              // 0x03C0(0x0004) (Const, Transient)
	bool                                               bObsolete;                                                // 0x03C0(0x0004)
	bool                                               bPathColliding;                                           // 0x03C0(0x0004) (Edit)
	bool                                               bPathTemp;                                                // 0x03C0(0x0004) (Transient)
	bool                                               bScriptInitialized;                                       // 0x03C0(0x0004)
	bool                                               bLockLocation;                                            // 0x03C0(0x0004) (Edit)
	bool                                               bTraceWater;                                              // 0x03C0(0x0004)
	bool                                               bNetInitial;                                              // 0x03C0(0x0004) (Const)
	bool                                               bNetOwner;                                                // 0x03C0(0x0004) (Const, Net)
	bool                                               bNetRelevant;                                             // 0x03C0(0x0004) (Const)
	bool                                               bDemoRecording;                                           // 0x03C0(0x0004) (Const)
	bool                                               bClientDemoRecording;                                     // 0x03C0(0x0004) (Const)
	bool                                               bRepClientDemo;                                           // 0x03C0(0x0004) (Const)
	bool                                               bClientDemoNetFunc;                                       // 0x03C0(0x0004) (Const)
	bool                                               bDemoOwner;                                               // 0x03C0(0x0004) (Const)
	class UClass*                                      MessageClass;                                             // 0x03C4(0x0004)
	float                                              OverlayTimer;                                             // 0x03C8(0x0004) (Edit, Net)
	float                                              ClientOverlayTimer;                                       // 0x03CC(0x0004) (Edit, Transient)
	float                                              ClientOverlayCounter;                                     // 0x03D0(0x0004) (Edit, Transient)
	class UMaterial*                                   HighDetailOverlay;                                        // 0x03D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Actor");
		return ptr;
	}


	void OnEndRound();
	void OnBeginRound();
	void SunLightDirectionUpdate(const struct FVector& direction);
	bool BlocksShotAt(class AActor* Other);
	void PawnBaseDied();
	void RecoverFromHostChange();
	float GetAngleH(const struct FVector& V);
	float GetDotH(const struct FVector& V);
	bool IsStationary();
	void InitBot(int Grade);
	void rpclog(const string& rpc);
	void dblog(const string& Msg);
	void crlog(const string& Msg);
	void clog(const string& Msg);
	void ctlog(const string& Msg);
	void alllog(const string& Msg);
	void NotifyLocalPlayerTeamReceived();
	void NotifyLocalPlayerDead(class APlayerController* PC);
	void SetDelayedDamageInstigatorController(class AController* C);
	bool TeamLink(int TeamNum);
	bool SelfTriggered();
	bool EffectIsRelevant(const struct FVector& SpawnLocation, bool bForceDedicated);
	bool CheckMaxEffectDistance(class APlayerController* P, const struct FVector& SpawnLocation);
	void SetOverlayMaterial(class UMaterial* mat, float Time, bool bOverride);
	void STATIC_Crash();
	struct FVector GetCollisionExtent();
	bool CanSplash();
	void PlayTeleportEffect(bool bOut, bool bSound);
	bool IsInPain();
	bool IsInVolume(class AVolume* aVolume);
	void UntriggerEvent(const FName& EventName, class AActor* Other, class APawn* EventInstigator);
	void TriggerEvent(const FName& EventName, class AActor* Other, class APawn* EventInstigator);
	void Reset();
	void StartInterpolation();
	bool TouchingActor(class AActor* A);
	bool NearSpot(const struct FVector& Spot);
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	string GetDebugName();
	void SetGRI(class AGameReplicationInfo* GRI);
	void MatchStarting();
	string STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2);
	void SetDefaultDisplayProperties();
	void SetDisplayProperties(ERenderStyle NewStyle, class UMaterial* NewTexture, bool bLighting);
	string GetHumanReadableName();
	void POVChanged(class APlayerController* PC, bool bBehindViewChanged);
	void BecomeViewTarget();
	void TravelPostAccept();
	void TravelPreAccept();
	bool CheckForErrors();
	void HurtRadius(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation);
	void PrecacheAnnouncer(class AAnnouncerVoice* V, bool bRewardSounds);
	void UpdateAnnouncements();
	void UpdatePrecacheSkeletalMeshes();
	void UpdatePrecacheStaticMeshes();
	void UpdatePrecacheMaterials();
	void PostNetBeginPlay();
	void SetGRIInitialState();
	void SetInitialState();
	void PostBeginPlay();
	void BroadcastLocalizedMessage(class UClass* MessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void ForceBegin();
	void PreBeginPlay();
	void RenderTexture(class UScriptedTexture* Tex);
	void RenderOverlays(class UCanvas* Canvas);
	void RecoverFromBadStateCode();
	struct FColor STATIC_Multiply_ColorFloat(const struct FColor& A, float B);
	struct FColor STATIC_Add_ColorColor(const struct FColor& A, const struct FColor& B);
	struct FColor STATIC_Multiply_FloatColor(float A, const struct FColor& B);
	struct FColor STATIC_Subtract_ColorColor(const struct FColor& A, const struct FColor& B);
	void IterateObjectArray(class UObject*[] ObjectArray, class UClass* baseClass, class UObject** Object);
	void IterateActorArray(class AActor*[] ActorArray, class UClass* baseClass, const FName& MatchTag, class AActor** Actor);
	void CollidingActors(class UClass* baseClass, float Radius, const struct FVector& loc, class AActor** Actor);
	void VisibleCollidingActors(class UClass* baseClass, float Radius, const struct FVector& loc, bool bIgnoreHidden, class AActor** Actor);
	void VisibleActors(class UClass* baseClass, float Radius, const struct FVector& loc, class AActor** Actor);
	void RadiusActors(class UClass* baseClass, float Radius, const struct FVector& loc, class AActor** Actor);
	void TraceActors(class UClass* baseClass, const struct FVector& End, const struct FVector& Start, const struct FVector& Extent, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm);
	void TouchingActors(class UClass* baseClass, class AActor** Actor);
	void BasedActors(class UClass* baseClass, class AActor** Actor);
	void ChildActors(class UClass* baseClass, class AActor** Actor);
	void DynamicActors(class UClass* baseClass, const FName& MatchTag, class AActor** Actor);
	void AllActors(class UClass* baseClass, const FName& MatchTag, class AActor** Actor);
	bool MoveCacheEntry(const string& Guid, const string& NewFilename);
	bool GetCacheEntry(int Num, string* Guid, string* fileName);
	void STATIC_GetAllIntDesc(const string& MetaClass, string[]* Entry, string[]* Description);
	void STATIC_GetAllInt(const string& MetaClass, string[] Entries);
	void GetNextIntDesc(const string& ClassName, int Num, string* Entry, string* Description);
	string GetNextInt(const string& ClassName, int Num);
	string GetURLMap(bool bIncludeOptions);
	void GetNextSkin(const string& Prefix, const string& CurrentSkin, int Dir, string* SkinName, string* SkinDesc);
	string GetMapName(const string& NameEnding, const string& MapName, int Dir);
	void AddToPackageMap(const string& PackageName);
	void ResetStaticFilterState();
	void BeginPlay();
	void PostTeleport(class ATeleporter* OutTeleporter);
	bool PreTeleport(class ATeleporter* InTeleporter);
	struct FVector SuggestFallVelocity(const struct FVector& Destination, const struct FVector& Start, float MaxZ, float MaxXYSpeed);
	bool PlayerCanSeeMe();
	void MakeNoise(float Loudness);
	bool ForceFeedbackSupported(bool Enable);
	void ChangeBaseParamsFeedbackEffect(const string& EffectName, float DirectionX, float DirectionY, float Gain);
	void ChangeSpringFeedbackEffect(const string& EffectName, float CenterX, float CenterY);
	void StopFeedbackEffect(const string& EffectName);
	void PlayFeedbackEffect(const string& EffectName);
	float GetSoundDuration(const string& Sound);
	bool IsSoundPlayingUseID(int SoundID);
	bool StopSoundUseID(int SoundID);
	void StopLoopSoundByActor();
	void StopAllSoundByActor();
	void StopAllSound();
	void StopSound(ESoundSlot Slot, bool bNoOverride);
	void FmodDemoPlaySound(const string& SoundName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate);
	int FmodPlaySoundLocal(const string& fileName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, const struct FVector& soundLocation);
	int FmodServerSpecPlaySound(const string& fileName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner);
	int FmodPlaySoundUseID(const string& fileName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner);
	int FmodSpecPlaySound(const string& fileName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner);
	int FmodPlayOwnedSound(const string& fileName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner);
	int FmodPlaySound(const string& fileName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner);
	void PostLoadSavedGame();
	void PreSaveGame();
	void SetTimer(float NewTimerRate, bool bLoop);
	void TornOff();
	bool Destroy();
	class AActor* Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation, bool bNoCollisionFail);
	bool TraceThisActorHitPart(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, bool bSkipHead, struct FVector* HitLocation, struct FVector* HitNormal, byte* HitCollisionPart);
	bool TraceThisActor(const struct FVector& TraceEnd, const struct FVector& TraceStart, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal);
	bool FastTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart);
	void MultiTrace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, bool bTraceMaterial, const struct FVector& Extent, class UBtrTraceResult** BtrResult);
	class AActor* Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material, ECollisionPartsType* CollPart);
	bool GetNameFromStr(const string& strName, FName* retName);
	void TakeHeadRoundBullet(const struct FVector& HitLocation, int WeaponType);
	bool HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void TakeDamage(int Damage, class APawn* EventInstigator, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void KilledBy(class APawn* EventInstigator);
	void FellOutOfWorld(EeKillZType KillType);
	void UsedBy(class APawn* User);
	void EndedRotation();
	void FinishedInterpolation();
	void RanInto(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void Detach(class AActor* Other);
	void Attach(class AActor* Other);
	void BaseChange();
	void Bump(class AActor* Other);
	void UnTouch(class AActor* Other);
	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other);
	void PhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void ZoneChange(class AZoneInfo* NewZone);
	void Landed(const struct FVector& HitNormal);
	void Falling();
	void HitWall(const struct FVector& HitNormal, class AActor* HitWall, class UMaterial* HitMaterial);
	void Timer();
	void TimerPop(class AVolumeTimer* t);
	void EndEvent();
	void BeginEvent();
	void UnTrigger(class AActor* Other, class APawn* EventInstigator);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void ClientTrigger();
	void PostNetReceive();
	void Tick(float DeltaTime);
	void LostChild(class AActor* Other);
	void GainedChild(class AActor* Other);
	void CheckLifeSpanReplicated();
	void RegisterDestroyListener(class UObject* o);
	void Destroyed();
	bool IsPenetrate();
	float GetMusicDuration(int SongHandle);
	void StopAllMusicAndClearQueue(float FadeOutTime);
	void StopAllMusic(float FadeOutTime);
	void StopMusic(int SongHandle, float FadeOutTime);
	bool IsPlayingMusic(int SongHandle);
	int PlayMusic(const string& Song, float FadeInTime, float InitialSeekTime);
	bool PauseStream(int Handle);
	bool AdjustVolume(int Handle, float NewVolume);
	int SeekStream(int Handle, float Seconds);
	void StopStream(int Handle, float FadeOutTime);
	int PlayStream(const string& Song, bool UseMusicVolume, float Volume, float FadeInTime, float SeekTime);
	void AllowMusicPlayback(bool Allow);
	void UnClock(float* Time);
	void Clock(float* Time);
	bool KUpdateState(struct FKRigidBodyState* NewState);
	void KApplyForce(struct FVector* Force, struct FVector* Torque);
	void KSkelConvulse();
	void KVelDropBelow();
	void KImpact(class AActor* Other, const struct FVector& pos, const struct FVector& impactVel, const struct FVector& impactNorm);
	bool KIsRagdollAvailable();
	void KMakeRagdollAvailable();
	void KRemoveAllBoneLifters();
	void KRemoveLifterFromBone(const FName& BoneName);
	void KAddBoneLifter(const FName& BoneName, const struct FInterpCurve& LiftVel, float LateralFriction, const struct FInterpCurve& Softness);
	void KScaleJointLimits(float Scale, float stiffness);
	void KFreezeRagdoll();
	float KGetSkelMass();
	void KSetSkelVel(const struct FVector& Velocity, const struct FVector& AngVelocity, bool AddToCurrent);
	void KEnableCollision(class AActor* Other);
	void KDisableCollision(class AActor* Other);
	float KGetActorGravScale();
	void KSetActorGravScale(float ActorGravScale);
	void KSetBlockKarma(bool newBlock);
	void KSetStayUprightParams(float stiffness, float damping);
	void KSetStayUpright(bool stayUpright, bool allowRotate);
	void KAddAngularImpulse(const struct FVector& AngImpulse);
	void KAddImpulse(const struct FVector& Impulse, const struct FVector& Position, const FName& BoneName);
	bool KIsAwake();
	void KWake();
	float KGetImpactThreshold();
	void KSetImpactThreshold(float thresh);
	void KGetCOMPosition(struct FVector* pos);
	void KGetCOMOffset(struct FVector* offset);
	void KSetCOMOffset(const struct FVector& offset);
	float KGetRestitution();
	void KSetRestitution(float rest);
	float KGetFriction();
	void KSetFriction(float friction);
	void KGetDampingProps(float* lindamp, float* angdamp);
	void KSetDampingProps(float lindamp, float angdamp);
	void KGetInertiaTensor(struct FVector* it1, struct FVector* it2);
	void KSetInertiaTensor(const struct FVector& it1, const struct FVector& it2);
	float KGetMass();
	void KSetMass(float Mass);
	struct FKRBVec KRBVecFromVector(const struct FVector& V);
	struct FVector KRBVecToVector(const struct FKRBVec& RBvec);
	void KDrawRigidBodyState(const struct FKRigidBodyState& RBstate, bool AltColour);
	void KGetRigidBodyState(struct FKRigidBodyState* RBstate);
	struct FQuat KGetRBQuaternion();
	void KSetSimParams(const struct FKSimParams& SimParams);
	void KGetSimParams(struct FKSimParams* SimParams);
	void OnlyAffectPawns(bool B);
	void SetPhysics(EPhysics newPhysics);
	void FinishInterpolation();
	void DebugUnclock();
	void DebugClock();
	void ClearStayingDebugLines();
	void DrawDebugSphere(const struct FVector& Base, float Radius, int NumDivisions, byte R, byte G, byte B);
	void DrawDebugCircle(const struct FVector& Base, const struct FVector& X, const struct FVector& Y, float Radius, int NumSides, byte R, byte G, byte B);
	void DrawStayingDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, byte R, byte G, byte B);
	void DrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, byte R, byte G, byte B);
	struct FPlane GetRenderBoundingSphere();
	string GetUrlOption(const string& Option);
	void UpdateURL(const string& NewOption, const string& NewValue, bool bSaveDefault);
	FName GetClosestBone(const struct FVector& loc, const struct FVector& ray, const FName& BiasBone, float BiasDistance, float* boneDist);
	bool AnimIsInGroup(int Channel, const FName& GroupName);
	void GetAnimParams(int Channel, FName* OutSeqName, float* OutAnimFrame, float* OutAnimRate);
	void SetBoneRotation(const FName& BoneName, const struct FRotator& BoneTurn, int Space, float Alpha);
	void SetBoneLocation(const FName& BoneName, const struct FVector& BoneTrans, float Alpha);
	void SetBoneDirection(const FName& BoneName, const struct FRotator& BoneTurn, const struct FVector& BoneTrans, float Alpha, int Space);
	void SetBoneScale(int Slot, float BoneScale, const FName& BoneName);
	void LockRootMotion(int Lock);
	bool DetachFromBone(class AActor* Attachment);
	bool AttachToBone(class AActor* Attachment, const FName& BoneName);
	struct FRotator GetRootRotationDelta();
	struct FVector GetRootLocationDelta();
	struct FRotator GetRootRotation();
	struct FVector GetRootLocation();
	struct FRotator GetBoneRotation(const FName& BoneName, int Space);
	struct FCoords GetBoneCoords(const FName& BoneName);
	void AnimBlendToAlpha(int Stage, float TargetAlpha, float TimeInterval);
	void AnimBlendParams(int Stage, float BlendAlpha, float InTime, float OutTime, const FName& BoneName, bool bGlobalPose);
	void BoneRefresh();
	void LinkMesh(class UMesh* NewMesh, bool bKeepAnim);
	void LinkSkelAnim(class UMeshAnimation* Anim, class UMesh* NewMesh);
	int GetNotifyChannel();
	void EnableChannelNotify(int Channel, int Switch);
	void AnimEnd(int Channel);
	void LIPSincAnimEnd();
	string CurrentLIPSincAnim();
	bool IsPlayingLIPSincAnim();
	bool HasLIPSincAnim(const FName& LIPSincAnimName);
	void StopLIPSincAnim();
	void PlayLIPSincAnim(const FName& LIPSincAnimName, float Volume, float Radius, float Pitch);
	void AnimStopLooping(int Channel);
	bool IsTweening(int Channel);
	void SetAnimFrame(float Time, int Channel, int UnitFlag);
	void FreezeAnimAt(float Time, int Channel);
	void StopAnimating(bool ClearAllButBase);
	bool HasAnim(const FName& Sequence);
	void FinishAnim(int Channel);
	bool IsAnimating(int Channel);
	bool TweenAnim(const FName& Sequence, float Time, int Channel);
	bool LoopAnim(const FName& Sequence, float Rate, float TweenTime, int Channel);
	bool PlayAnim(const FName& Sequence, float Rate, float TweenTime, int Channel);
	string GetMeshName();
	bool IsJoinedTo(class AActor* Other);
	void SetOwner(class AActor* NewOwner);
	void SetBase(class AActor* NewBase, const struct FVector& NewFloor);
	void SetBaseMaterial(class UMaterial* NewBaseMaterial);
	void AutonomousPhysics(float DeltaSeconds);
	bool MoveSmooth(const struct FVector& Delta, bool TestCollide);
	bool SetRelativeLocation(const struct FVector& NewLocation);
	bool SetRelativeRotation(const struct FRotator& NewRotation);
	bool SetForceRotation(const struct FRotator& NewRotation);
	bool SetRotation(const struct FRotator& NewRotation);
	bool SetLocation(const struct FVector& NewLocation);
	bool Move(const struct FVector& Delta);
	void SetDrawType(EDrawType NewDrawType);
	void SetStaticMesh(class UStaticMesh* NewStaticMesh);
	void SetDrawScale3D(const struct FVector& NewScale3D);
	void SetDrawScale(float NewScale);
	bool SetCollisionSize(float NewRadius, float NewHeight);
	void SetCollision(bool NewColActors, bool NewBlockActors, bool NewBlockPlayers);
	void Sleep(float Seconds);
	bool STATIC_ShouldBeHidden();
	void Error(const string& S);
	void TextToSpeech(const string& Text, float Volume);
	void CopyObjectToClipboard(class UObject* obj);
	string ConsoleCommand(const string& Command, bool bWriteToLog);
};


// Class Engine.wAILevelBase
// 0x0000 (0x03D8 - 0x03D8)
class AwAILevelBase : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAILevelBase");
		return ptr;
	}


	void ClearReferences();
	void KillBotsTeam(int Num, int inTeam);
	void KillBots(int Num);
	void KillBot(class AAIController* Bot);
	void Initialize();
};


// Class Engine.wMatchMaker
// 0x07B0 (0x07DC - 0x002C)
class UwMatchMaker : public UObject
{
public:
	struct FTencentLoginInfo                           LoginInfo;                                                // 0x002C(0x0088)
	string[]                                           SelectedServerIPs;                                        // 0x00B4(0x000C) (NeedCtorLink)
	int[]                                              SelectedServerPorts;                                      // 0x00C0(0x000C) (NeedCtorLink)
	EGamePageState                                     GamePageState;                                            // 0x00CC(0x0001)
	EGameEndType                                       GameEndType;                                              // 0x00CD(0x0001)
	byte                                               Padding00[0x2];                                           // 0x00CE(0x0002) MISSED OFFSET
	struct FPingTime[]                                 arrPingTime;                                              // 0x00D0(0x000C) (NeedCtorLink)
	class UInteraction*                                Console;                                                  // 0x00DC(0x0004) (Transient)
	bool                                               bForceSDRespawn;                                          // 0x00E0(0x0004)
	bool                                               bAutoStart;                                               // 0x00E0(0x0004)
	bool                                               bForceGameOut;                                            // 0x00E0(0x0004)
	bool                                               bKickOut;                                                 // 0x00E0(0x0004)
	bool                                               bUsing;                                                   // 0x00E0(0x0004)
	bool                                               bIsOwner;                                                 // 0x00E0(0x0004)
	bool                                               bListen;                                                  // 0x00E0(0x0004)
	bool                                               bServerConnected;                                         // 0x00E0(0x0004)
	bool                                               IsRelayServerOff;                                         // 0x00E0(0x0004)
	bool                                               bSDRespawn;                                               // 0x00E0(0x0004)
	string                                             strLoadingErrorMsg;                                       // 0x00E4(0x000C) (NeedCtorLink)
	string                                             szGameClass;                                              // 0x00F0(0x000C) (NeedCtorLink)
	string                                             szSeverName;                                              // 0x00FC(0x000C) (NeedCtorLink)
	string                                             szChannelGroup;                                           // 0x0108(0x000C) (NeedCtorLink)
	string                                             szChannelName;                                            // 0x0114(0x000C) (NeedCtorLink)
	string                                             szMapName;                                                // 0x0120(0x000C) (NeedCtorLink)
	string                                             szRoomName;                                               // 0x012C(0x000C) (NeedCtorLink)
	string                                             szRoomPassword;                                           // 0x0138(0x000C) (NeedCtorLink)
	int                                                iNumTeam;                                                 // 0x0144(0x0004)
	int                                                iGoalRound;                                               // 0x0148(0x0004)
	int                                                iTimeLimit;                                               // 0x014C(0x0004)
	bool                                               bFriendlyFire;                                            // 0x0150(0x0004)
	bool                                               bAllowSpectate;                                           // 0x0150(0x0004)
	bool                                               bAutobalance;                                             // 0x0150(0x0004)
	bool                                               bAllowJoin;                                               // 0x0150(0x0004)
	bool                                               bAllow3rdPersonView;                                      // 0x0150(0x0004)
	bool                                               bChatVictimOnly;                                          // 0x0150(0x0004)
	bool                                               bHasChannelTCP;                                           // 0x0150(0x0004)
	int                                                LoadingSleepTime;                                         // 0x0154(0x0004)
	int                                                LoadingSleepTimePrecache;                                 // 0x0158(0x0004)
	EWeaponLimit                                       eWeaponLimit;                                             // 0x015C(0x0001)
	byte                                               Padding01[0x3];                                           // 0x015D(0x0003) MISSED OFFSET
	int                                                iMinutesKickAFK;                                          // 0x0160(0x0004)
	int                                                iMinPlayers;                                              // 0x0164(0x0004)
	int                                                iMaxPlayers;                                              // 0x0168(0x0004)
	bool                                               InGamePlaying;                                            // 0x016C(0x0004)
	int                                                InGameOver;                                               // 0x0170(0x0004)
	bool                                               bIsLoading;                                               // 0x0174(0x0004)
	bool                                               TR_bNewRespawn;                                           // 0x0174(0x0004)
	bool                                               bFreeView;                                                // 0x0174(0x0004)
	string                                             OldHostName;                                              // 0x0178(0x000C) (NeedCtorLink)
	bool                                               bHardCore;                                                // 0x0184(0x0004)
	bool                                               bAdminSpectator;                                          // 0x0184(0x0004)
	bool                                               bMultiBomb;                                               // 0x0184(0x0004)
	int                                                SD_ChangeRound;                                           // 0x0188(0x0004)
	bool                                               SD_ChangeAttackTeam;                                      // 0x018C(0x0004)
	bool                                               IsUsingTenProtect;                                        // 0x018C(0x0004)
	string[]                                           BlockUserListForOption;                                   // 0x0190(0x000C) (NeedCtorLink)
	int                                                kFriendListCount;                                         // 0x019C(0x0004)
	struct FFriendStruct[]                             kFriendList;                                              // 0x01A0(0x000C) (NeedCtorLink)
	int                                                kClanListCount;                                           // 0x01AC(0x0004)
	struct FClanStruct[]                               kClanList;                                                // 0x01B0(0x000C) (NeedCtorLink)
	int                                                kPCBangListCount;                                         // 0x01BC(0x0004)
	struct FPCBangStruct[]                             kPCBangList;                                              // 0x01C0(0x000C) (NeedCtorLink)
	int                                                kBlockListCount;                                          // 0x01CC(0x0004)
	struct FBlockStruct[]                              kBlockList;                                               // 0x01D0(0x000C) (NeedCtorLink)
	byte                                               kConnectAlpha;                                            // 0x01DC(0x0001)
	byte                                               kChannelingType;                                          // 0x01DD(0x0001)
	byte                                               Padding02[0x2];                                           // 0x01DE(0x0002) MISSED OFFSET
	int                                                kServerType;                                              // 0x01E0(0x0004)
	bool                                               kIsDSHost;                                                // 0x01E4(0x0004)
	bool                                               kDediIsQuited;                                            // 0x01E4(0x0004)
	bool                                               kIsInDSChannel;                                           // 0x01E4(0x0004)
	bool                                               kDS_SavedOwnerInfo;                                       // 0x01E4(0x0004)
	bool                                               kClanMatch_InChannel;                                     // 0x01E4(0x0004)
	bool                                               kClanMatch_InReadyRoom;                                   // 0x01E4(0x0004)
	bool                                               kClanMatch_Leader;                                        // 0x01E4(0x0004)
	int                                                kClanMatch_ReadyRoomID;                                   // 0x01E8(0x0004)
	bool                                               kClanMatch_InMatchRoom;                                   // 0x01EC(0x0004)
	int                                                kClanMatch_ChannelID;                                     // 0x01F0(0x0004)
	int                                                kClanMatch_RoomID;                                        // 0x01F4(0x0004)
	bool                                               kClanMatch_OpenState;                                     // 0x01F8(0x0004)
	int                                                kClanMatch_VersusMode;                                    // 0x01FC(0x0004)
	int[]                                              kClanMatch_Map;                                           // 0x0200(0x000C) (NeedCtorLink)
	string                                             kClanMatch_RoomName;                                      // 0x020C(0x000C) (NeedCtorLink)
	bool                                               bNewDailyQuestAvailable;                                  // 0x0218(0x0004)
	bool                                               bNoUpdateQuestInfo;                                       // 0x0218(0x0004)
	bool                                               bRecvProtocolUpdateQuest;                                 // 0x0218(0x0004)
	bool                                               bSortQuestList;                                           // 0x0218(0x0004)
	class UObject*                                     kMainMenu;                                                // 0x021C(0x0004)
	class UBTTcpLink_Channel*                          kTcpChannel;                                              // 0x0220(0x0004)
	class UBTTcpLink_Process2Agent*                    kTcpDStoDP;                                               // 0x0224(0x0004)
	int                                                kDediServerID;                                            // 0x0228(0x0004)
	int                                                kDediChannelNum;                                          // 0x022C(0x0004)
	int                                                kDediRoomNum;                                             // 0x0230(0x0004)
	int                                                kPID;                                                     // 0x0234(0x0004)
	bool                                               kDediIsConnectedWithServer;                               // 0x0238(0x0004)
	bool                                               kCharacterCreation;                                       // 0x0238(0x0004)
	byte                                               kInterfaceGuideStep;                                      // 0x023C(0x0001)
	byte                                               Padding03[0x3];                                           // 0x023D(0x0003) MISSED OFFSET
	bool                                               kFirstTutorial;                                           // 0x0240(0x0004)
	float                                              TutorialGrade;                                            // 0x0244(0x0004)
	bool                                               kRecvPaidPCBangInfo;                                      // 0x0248(0x0004)
	bool                                               bAutoMoveNoviceChannel;                                   // 0x0248(0x0004)
	bool                                               kNotifyGrenadeLimited;                                    // 0x0248(0x0004)
	bool                                               kFirstIntoInventory;                                      // 0x0248(0x0004)
	bool                                               kFirstIntoStore;                                          // 0x0248(0x0004)
	bool                                               kNeedUpdateItemList;                                      // 0x0248(0x0004)
	bool                                               kNeedUpdateSkillList;                                     // 0x0248(0x0004)
	bool                                               kNeedUpdatePoint;                                         // 0x0248(0x0004)
	bool                                               kNeedUpdateCash;                                          // 0x0248(0x0004)
	int                                                kIsPaidPCBang;                                            // 0x024C(0x0004)
	int                                                kIsRegisteredPCBang;                                      // 0x0250(0x0004)
	int                                                kIsMainPCBang;                                            // 0x0254(0x0004)
	string                                             kPCBangName;                                              // 0x0258(0x000C) (NeedCtorLink)
	int                                                kPCBangType;                                              // 0x0264(0x0004)
	bool                                               kClanLookingFor;                                          // 0x0268(0x0004)
	string                                             kPrevClanName;                                            // 0x026C(0x000C) (NeedCtorLink)
	string                                             kClanName;                                                // 0x0278(0x000C) (NeedCtorLink)
	int                                                kClanPattern;                                             // 0x0284(0x0004)
	int                                                kClanBG;                                                  // 0x0288(0x0004)
	int                                                kClanBL;                                                  // 0x028C(0x0004)
	int                                                kInClanGrade;                                             // 0x0290(0x0004)
	bool                                               bInverseWeapon;                                           // 0x0294(0x0004)
	int                                                kClanLevel;                                               // 0x0298(0x0004)
	int                                                kClanExp;                                                 // 0x029C(0x0004)
	string                                             kClanMasterName;                                          // 0x02A0(0x000C) (NeedCtorLink)
	int                                                kClanWin;                                                 // 0x02AC(0x0004)
	int                                                kClanLose;                                                // 0x02B0(0x0004)
	int                                                kClanDraw;                                                // 0x02B4(0x0004)
	int                                                kClanKill;                                                // 0x02B8(0x0004)
	int                                                kClanDeath;                                               // 0x02BC(0x0004)
	int                                                kClanAssist;                                              // 0x02C0(0x0004)
	int                                                kClanPrevRanking;                                         // 0x02C4(0x0004)
	int                                                kClanRanking;                                             // 0x02C8(0x0004)
	int                                                kClanMonthlyPrevRanking;                                  // 0x02CC(0x0004)
	int                                                kClanMonthlyRanking;                                      // 0x02D0(0x0004)
	byte                                               kClanRegion;                                              // 0x02D4(0x0001)
	byte                                               Padding04[0x3];                                           // 0x02D5(0x0003) MISSED OFFSET
	int                                                kClanMemberCount;                                         // 0x02D8(0x0004)
	int                                                kClanMemberMaximum;                                       // 0x02DC(0x0004)
	byte                                               kClanIsRecruit;                                           // 0x02E0(0x0001)
	byte                                               Padding05[0x3];                                           // 0x02E1(0x0003) MISSED OFFSET
	string                                             kClanHowOld;                                              // 0x02E4(0x000C) (NeedCtorLink)
	string                                             kClanKeyword;                                             // 0x02F0(0x000C) (NeedCtorLink)
	string                                             kClanIntro;                                               // 0x02FC(0x000C) (NeedCtorLink)
	string                                             kClanNotice;                                              // 0x0308(0x000C) (NeedCtorLink)
	int                                                kClanActivity;                                            // 0x0314(0x0004)
	int                                                kClanActivityRank;                                        // 0x0318(0x0004)
	int                                                kClanActivityRankPrev;                                    // 0x031C(0x0004)
	int                                                kClanActivityMRank;                                       // 0x0320(0x0004)
	int                                                kClanActivityMRankPrev;                                   // 0x0324(0x0004)
	string                                             kUserName;                                                // 0x0328(0x000C) (NeedCtorLink)
	int                                                kLevel;                                                   // 0x0334(0x0004)
	int                                                kUID;                                                     // 0x0338(0x0004)
	int                                                kExp;                                                     // 0x033C(0x0004)
	int                                                kStartExp;                                                // 0x0340(0x0004)
	int                                                kEndExp;                                                  // 0x0344(0x0004)
	int                                                kLevelMarkID;                                             // 0x0348(0x0004)
	int                                                kTitleMarkID;                                             // 0x034C(0x0004)
	int                                                kReserved1;                                               // 0x0350(0x0004)
	int                                                kReserved2;                                               // 0x0354(0x0004)
	int                                                kReserved3;                                               // 0x0358(0x0004)
	bool                                               kTest;                                                    // 0x035C(0x0004)
	bool                                               bExistUseAdvCamShake;                                     // 0x035C(0x0004)
	byte                                               GMLevelFlag;                                              // 0x0360(0x0001)
	byte                                               Padding06[0x3];                                           // 0x0361(0x0003) MISSED OFFSET
	bool                                               isGMRoom;                                                 // 0x0364(0x0004)
	int[]                                              kGMListInGameRoom;                                        // 0x0368(0x000C) (NeedCtorLink)
	int                                                kPrevRanking;                                             // 0x0374(0x0004)
	int                                                kRanking;                                                 // 0x0378(0x0004)
	int                                                kPrevHeadShotRanking;                                     // 0x037C(0x0004)
	int                                                kHeadShotRanking;                                         // 0x0380(0x0004)
	int                                                kPrevWomanRanking;                                        // 0x0384(0x0004)
	int                                                kWomanRanking;                                            // 0x0388(0x0004)
	int                                                kMonthlyPrevRanking;                                      // 0x038C(0x0004)
	int                                                kMonthlyRanking;                                          // 0x0390(0x0004)
	int                                                kMonthlyPrevHeadShotRanking;                              // 0x0394(0x0004)
	int                                                kMonthlyHeadShotRanking;                                  // 0x0398(0x0004)
	int                                                kMonthlyPrevWomanRanking;                                 // 0x039C(0x0004)
	int                                                kMonthlyWomanRanking;                                     // 0x03A0(0x0004)
	int                                                kKill;                                                    // 0x03A4(0x0004)
	int                                                kDeath;                                                   // 0x03A8(0x0004)
	int                                                kWin;                                                     // 0x03AC(0x0004)
	int                                                kLose;                                                    // 0x03B0(0x0004)
	int                                                kAssist;                                                  // 0x03B4(0x0004)
	int                                                kHeadShot;                                                // 0x03B8(0x0004)
	int                                                kDisConnectCount;                                         // 0x03BC(0x0004)
	int                                                kTotalPlayTime;                                           // 0x03C0(0x0004)
	byte                                               kCommunityOptions[0x4];                                   // 0x03C4(0x0001)
	byte                                               kTempCommunityOptions[0x4];                               // 0x03C8(0x0001)
	int                                                kUser_ClanContribue;                                      // 0x03CC(0x0004)
	int                                                kUser_ClanWin;                                            // 0x03D0(0x0004)
	int                                                kUser_ClanLose;                                           // 0x03D4(0x0004)
	int                                                kUser_ClanKill;                                           // 0x03D8(0x0004)
	int                                                kUser_ClanDeath;                                          // 0x03DC(0x0004)
	int                                                kUser_ClanAssist;                                         // 0x03E0(0x0004)
	int                                                kUser_ClanHeadshot;                                       // 0x03E4(0x0004)
	int                                                kUser_ClanDiscon;                                         // 0x03E8(0x0004)
	int                                                kFaceID;                                                  // 0x03EC(0x0004)
	int                                                kHelmetID;                                                // 0x03F0(0x0004)
	int                                                kFaceAccessoryID;                                         // 0x03F4(0x0004)
	int                                                kAFSpecialID;                                             // 0x03F8(0x0004)
	int                                                kRSASpecialID;                                            // 0x03FC(0x0004)
	int                                                kPrimaryID;                                               // 0x0400(0x0004)
	int                                                kSecondaryID;                                             // 0x0404(0x0004)
	int                                                kThrow1ID;                                                // 0x0408(0x0004)
	int                                                kThrow2ID;                                                // 0x040C(0x0004)
	int                                                kSkill1ID;                                                // 0x0410(0x0004)
	int                                                kSkill2ID;                                                // 0x0414(0x0004)
	int                                                kSkill3ID;                                                // 0x0418(0x0004)
	int                                                kSkill4ID;                                                // 0x041C(0x0004)
	int                                                kPoint;                                                   // 0x0420(0x0004)
	int                                                kCash;                                                    // 0x0424(0x0004)
	int                                                kCCoinCash;                                               // 0x0428(0x0004)
	int                                                kCurPos;                                                  // 0x042C(0x0004)
	int                                                kCurSubPos;                                               // 0x0430(0x0004)
	int                                                kChatStatus;                                              // 0x0434(0x0004)
	int                                                kServerGroupID;                                           // 0x0438(0x0004)
	string                                             kServerGroupName;                                         // 0x043C(0x000C) (NeedCtorLink)
	int                                                kServerID;                                                // 0x0448(0x0004)
	string                                             kServerName;                                              // 0x044C(0x000C) (NeedCtorLink)
	string                                             kServerShortName;                                         // 0x0458(0x000C) (NeedCtorLink)
	int                                                kChannelID;                                               // 0x0464(0x0004)
	string                                             kChannelName;                                             // 0x0468(0x000C) (NeedCtorLink)
	bool                                               kIsInNovcieChannel;                                       // 0x0474(0x0004)
	int                                                kRoomID;                                                  // 0x0478(0x0004)
	int                                                kTeamID;                                                  // 0x047C(0x0004)
	int                                                kServerPing;                                              // 0x0480(0x0004)
	string                                             kGame_RoomName;                                           // 0x0484(0x000C) (NeedCtorLink)
	bool                                               kGame_bOwner;                                             // 0x0490(0x0004)
	string                                             kGame_Password;                                           // 0x0494(0x000C) (NeedCtorLink)
	string                                             kGame_MapName;                                            // 0x04A0(0x000C) (NeedCtorLink)
	int                                                kGame_MapNum;                                             // 0x04AC(0x0004)
	int                                                kGame_GameMode;                                           // 0x04B0(0x0004)
	int                                                kGame_UserCount;                                          // 0x04B4(0x0004)
	int                                                kGame_GameTime;                                           // 0x04B8(0x0004)
	int                                                kGame_GameRound;                                          // 0x04BC(0x0004)
	int                                                kGame_WeaponLimit;                                        // 0x04C0(0x0004)
	bool                                               kGame_TeamBalance;                                        // 0x04C4(0x0004)
	bool                                               kGame_bHardCore;                                          // 0x04C4(0x0004)
	struct FDisplayMode[]                              SupportModes;                                             // 0x04C8(0x000C) (NeedCtorLink)
	int                                                DefaultSupportModeIdx;                                    // 0x04D4(0x0004)
	float                                              Quest_LastUpdateTime;                                     // 0x04D8(0x0004)
	struct FQuestItem[]                                QuestList;                                                // 0x04DC(0x000C) (NeedCtorLink)
	int[]                                              CompletedQuestList;                                       // 0x04E8(0x000C) (NeedCtorLink)
	int[]                                              NewQuestList;                                             // 0x04F4(0x000C) (NeedCtorLink)
	struct FMissionItem[]                              MissionList;                                              // 0x0500(0x000C) (NeedCtorLink)
	struct FMissionItem[]                              TMissionList;                                             // 0x050C(0x000C) (NeedCtorLink)
	int                                                My_iUID;                                                  // 0x0518(0x0004)
	int                                                My_iRoom;                                                 // 0x051C(0x0004)
	int                                                My_iTeam;                                                 // 0x0520(0x0004)
	int                                                My_Level;                                                 // 0x0524(0x0004)
	string                                             My_szName;                                                // 0x0528(0x000C) (NeedCtorLink)
	byte                                               My_AASLevel;                                              // 0x0534(0x0001)
	byte                                               Padding07[0x3];                                           // 0x0535(0x0003) MISSED OFFSET
	class UGameEngine*                                 gEngine;                                                  // 0x0538(0x0004)
	class ALevelInfo*                                  playingLevelInfo;                                         // 0x053C(0x0004)
	bool                                               bShowFont;                                                // 0x0540(0x0004)
	bool                                               bChangingHost;                                            // 0x0540(0x0004)
	bool                                               IsChangeHost_InLoading;                                   // 0x0540(0x0004)
	bool                                               IsChangeNewGuest_InLoading;                               // 0x0540(0x0004)
	bool                                               DrawChangeHost_Host;                                      // 0x0540(0x0004)
	bool                                               DrawChangeHost_Guest;                                     // 0x0540(0x0004)
	string                                             newHostAddr;                                              // 0x0544(0x000C) (NeedCtorLink)
	bool                                               bForceGameOver;                                           // 0x0550(0x0004)
	bool                                               bPendingStarted;                                          // 0x0550(0x0004)
	bool                                               bSendedLoadingFailed;                                     // 0x0550(0x0004)
	int                                                ConnectClientNum;                                         // 0x0554(0x0004)
	int                                                ConnectedCount;                                           // 0x0558(0x0004)
	int                                                DisConnectedUserID;                                       // 0x055C(0x0004)
	bool                                               IsDisconnected;                                           // 0x0560(0x0004)
	int                                                ReconnectClientNum;                                       // 0x0564(0x0004)
	bool                                               bIntervention;                                            // 0x0568(0x0004)
	class UwMapSettings*                               MapSettings;                                              // 0x056C(0x0004)
	bool                                               bShowWarningHostPoint;                                    // 0x0570(0x0004)
	int                                                iHardwarePoint;                                           // 0x0574(0x0004)
	int                                                iAvgFrameRate;                                            // 0x0578(0x0004)
	int                                                iAvgPing;                                                 // 0x057C(0x0004)
	int                                                iHostPoint;                                               // 0x0580(0x0004)
	bool                                               bShowMessageHostUnsuitableness;                           // 0x0584(0x0004)
	class UwMatchUserInfo*[]                           UserInfos;                                                // 0x0588(0x000C) (NeedCtorLink)
	int                                                GmUserNum;                                                // 0x0594(0x0004)
	struct FResultInfo[]                               ResultInfos;                                              // 0x0598(0x000C) (NeedCtorLink)
	struct FRewardInfo[]                               RewardInfos;                                              // 0x05A4(0x000C) (NeedCtorLink)
	int[]                                              ResultTeamScores;                                         // 0x05B0(0x000C) (NeedCtorLink)
	int[]                                              ResultBonusOwnerID;                                       // 0x05BC(0x000C) (NeedCtorLink)
	int[]                                              ResultBonusID;                                            // 0x05C8(0x000C) (NeedCtorLink)
	int[]                                              ResultMainWeaponIDs;                                      // 0x05D4(0x000C) (NeedCtorLink)
	byte[]                                             ResultMainWeaponRanks;                                    // 0x05E0(0x000C) (NeedCtorLink)
	byte[]                                             ResultMainWeaponExps;                                     // 0x05EC(0x000C) (NeedCtorLink)
	bool                                               PlayWithBots;                                             // 0x05F8(0x0004)
	int                                                BotUserTeam;                                              // 0x05FC(0x0004)
	int                                                BotNum0;                                                  // 0x0600(0x0004)
	int                                                BotNum1;                                                  // 0x0604(0x0004)
	int                                                BotDifficulty;                                            // 0x0608(0x0004)
	bool                                               bBotModeTeamBalance;                                      // 0x060C(0x0004)
	bool                                               BotTutorial;                                              // 0x060C(0x0004)
	bool                                               bCompletedBotTutorial;                                    // 0x060C(0x0004)
	bool                                               BeginnerMode;                                             // 0x060C(0x0004)
	byte                                               ResultIsGiveType;                                         // 0x0610(0x0001)
	byte                                               Padding08[0x3];                                           // 0x0611(0x0003) MISSED OFFSET
	bool                                               ResultIsBootyGet;                                         // 0x0614(0x0004)
	bool                                               ResultIsOverlapWeapon;                                    // 0x0614(0x0004)
	struct FBootyInfo[]                                ResultBootyInfo;                                          // 0x0618(0x000C) (NeedCtorLink)
	class UBTNetGameData*                              NetGameData;                                              // 0x0624(0x0004)
	bool                                               IsTestMode;                                               // 0x0628(0x0004)
	class UBTPingCheckerLinker*                        PingChecker;                                              // 0x062C(0x0004)
	string                                             szChannelIP;                                              // 0x0630(0x000C) (NeedCtorLink)
	int                                                nChannelPort;                                             // 0x063C(0x0004)
	string                                             szRelayIP;                                                // 0x0640(0x000C) (NeedCtorLink)
	int                                                nRelayPort;                                               // 0x064C(0x0004)
	int                                                nNatType;                                                 // 0x0650(0x0004)
	bool                                               m_bHostBlocking;                                          // 0x0654(0x0004)
	bool                                               IsFixedAssistPoint;                                       // 0x0654(0x0004)
	float                                              FixedAssistTime;                                          // 0x0658(0x0004)
	string                                             lastBuyItemName;                                          // 0x065C(0x000C) (NeedCtorLink)
	int                                                lastBuyItemType;                                          // 0x0668(0x0004)
	int                                                lastBuyItemGrade;                                         // 0x066C(0x0004)
	int                                                lastBuyItemID;                                            // 0x0670(0x0004)
	string                                             ERServerIP;                                               // 0x0674(0x000C) (NeedCtorLink)
	int                                                ERServerPort;                                             // 0x0680(0x0004)
	int                                                MinimapMode;                                              // 0x0684(0x0004)
	int[]                                              ChannelRestrictionMaps;                                   // 0x0688(0x000C) (NeedCtorLink)
	int[]                                              ChannelRestrictionModes;                                  // 0x0694(0x000C) (NeedCtorLink)
	struct FstATTEND_INFO                              stAttendInfo;                                             // 0x06A0(0x002C) (NeedCtorLink)
	struct FstATTEND_INFO                              stPuzzleInfo;                                             // 0x06CC(0x002C) (NeedCtorLink)
	struct FstDAILY_REWARD_ITEM_INFO                   stDailyRewardItemInfo;                                    // 0x06F8(0x0030) (NeedCtorLink)
	string[]                                           SpecialQuestRankList;                                     // 0x0728(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __UpdatePCBangInfo__Delegate;                             // 0x0734(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateGameRoomInfo__Delegate;                           // 0x073C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateCharInfo__Delegate;                               // 0x0744(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateRankingInfo__Delegate;                            // 0x074C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateEquipItemInfo__Delegate;                          // 0x0754(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateMoneyInfo__Delegate;                              // 0x075C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateClanInfo__Delegate;                               // 0x0764(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdatePositionInfo__Delegate;                           // 0x076C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateRecv_CharInfo__Delegate;                          // 0x0774(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateQuestList__Delegate;                              // 0x077C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __AccomplishMission25Percent__Delegate;                   // 0x0784(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __AccomplishMission50Percent__Delegate;                   // 0x078C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __AccomplishMission75Percent__Delegate;                   // 0x0794(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __AccomplishMission100Percent__Delegate;                  // 0x079C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __QuestLog__Delegate;                                     // 0x07A4(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __OnReqSuccessStartGame__Delegate;                        // 0x07AC(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __OnRecivedPing__Delegate;                                // 0x07B4(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateFriendList__Delegate;                             // 0x07BC(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateClanList__Delegate;                               // 0x07C4(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdatePCBangList__Delegate;                             // 0x07CC(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateBlockList__Delegate;                              // 0x07D4(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMatchMaker");
		return ptr;
	}


	bool IsEnableUsingItem();
	bool IsNewDefenceMode();
	string GetDefenceGameInfo();
	void SendUpdateUserPerformenceInfo(int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing);
	void SetLastBuyItemInfo(const string& ItemName, int ItemType, int ItemGrade, int ItemID);
	bool IsPCBangItem(class UwItemBoxHK* ItemInfo);
	bool CheckUsingItem(class UwItemBoxHK* ItemInfo);
	bool IsPlayingPCBangPlus();
	bool IsPlayingPCBang();
	void SetAASLevel(byte _level);
	byte GetIsAASLevel();
	bool CheckEquipLevel(class UwItemBoxHK* ItemInfo);
	bool IsSDRespawn();
	bool IsFriendlyUser(const string& CharName, const string& ClanName);
	bool IsBlockUser(const string& UserName);
	void UpdateBlockList(class UwMatchMaker* MM);
	void UpdatePCBangList(class UwMatchMaker* MM);
	void UpdateClanList(class UwMatchMaker* MM);
	void UpdateFriendList(class UwMatchMaker* MM);
	void ReplaceBlockNickName(const string& old_name, const string& new_name);
	void AddBlockList(const string& UserName);
	void SetBlockListCount(int cnt);
	void ClearBlockList();
	void AddClanList(const string& UserName, byte IsLogOn, int Level, int ClanGrade, int ClanWin, int ClanLose, int LevelMarkID, int TitleMarkID);
	void SetClanListCount(int cnt);
	void ClearClanList();
	void AddPCBangList2(const string& UserName, byte IsLogOn, int ClanMark, int ClanBG, int ClanBL, const string& ClanName, int Level, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3);
	void AddPCBangList(const string& UserName, int ClanMark, int ClanBG, int ClanBL, const string& ClanName, int Level, const string& ServerName, const string& ServerShortName, const string& ServerIP, int serverPort, int CurPos, int ChannelNum, const string& ChannelNickName, int RoomNum, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3);
	void RemovePCBangList(const string& UserName);
	void SetPCBangListCount(int cnt);
	void ClearPCBangList();
	void AddFriendList(const string& UserName, byte IsLogOn, int ClanMark, int ClanBG, int ClanBL, const string& ClanName, int Level, byte IsLookForClan, int ClanLevel, int LevelMarkID);
	void SetFriendListCount(int cnt);
	void ClearFriendList();
	bool IsDisconnectedUser();
	void SetDisconnectedUser(bool bSet, int UserID);
	int GetHostPoint();
	int CalculateHostPoint(bool bInGame);
	int ReceivedPing(const string& fromAddr, int msec);
	void OnRecivedPing(class UwMatchMaker* MM, const string& fromAddr, int msec);
	void ReceivedPingHK(const string& fromAddr, int msec);
	void ClearReceivedPingHK();
	int GetLastestPingValue(const string& fromAddr);
	void SendPingHK(const string& fromAddr);
	void SendPingToClient();
	void DrawOtherLoadingState(int UserID, byte bLoadingState);
	void OnReqSuccessStartGame(int Step);
	void ReqSuccessStartGame(int Step);
	void GetItemDurabilityInfo(int[]* OwnerID, int[]* PlayedNumber, int[]* PlayedRound, struct FBtrDouble[]* UniqueItemID, int[]* UsingTime, int[]* PlayedCount);
	bool ForceGameOver(class APlayerReplicationInfo* Winner);
	void ProcessPendingChangeNewHostOrChangeNewGuest();
	void PendingChangeNewGuest(const string& hostAddress);
	void PendingChangeHost(int ClientNum);
	void SetChangeHostMessageFlag();
	bool ChangeNewGuest(const string& HostIP);
	bool ChangeHost(int ClientNum);
	void SetChangingHostFlag(bool flag);
	bool ResetChangingHostGuest();
	bool IsLoading();
	void EndLoading();
	void StartLoading();
	class UMaterial* GetMiniMapInfoImage();
	class UMaterial* GetLoadingImage();
	void InitializeMapSettings_DS_Server();
	void InitializeMapSettings();
	void ClearConsole();
	void EndMatch(bool bForceEndMatch);
	void ResetGameFlag();
	int GetTeamCount();
	byte GetGameModeNum(const string& szGameClassName);
	void SetCurMatchState(const struct FMatchState& kState);
	bool IsHost(const string& UserName);
	void SetNewHost(const string& UserName);
	string GetUserClanNameByUserName(const string& UserName);
	int GetUserLevelMarkIDByUserName(const string& UserName);
	bool ReplaceUserName(const string& OldName, const string& NewName);
	int GetUserGradeByUserName(const string& UserName);
	int GetUIDByUserName(const string& UserName);
	class UwMatchUserInfo* GetUserInfoByUserName(const string& UserName);
	class UwMatchUserInfo* GetUserInfoByUID(int UserID);
	void SetMyTeam(int iTeam);
	string GetMyNetworkCheckFailedMsg(int LoadingStep);
	string GetHostNetworkCheckFailedMsg(int LoadingStep);
	bool FailedNetworkChecking();
	bool StartNetworkChecking(int ClientsCount, bool bConnectGame);
	bool SendPingToChannelServer();
	bool SendPingToOtherUser(const string& toAddr);
	bool SendText(const string& d_ip, int d_port, const string& dText);
	void SendErrorReportC(int Code, int windowtype, const string& ct);
	void SendErrorReportS(int Code, const string& ct);
	class UBTPingCheckerLinker* CreatePingChecker();
	bool GetHostBlocking();
	void SetHostBlocking(bool Blocking);
	void MakeHSResponseData(byte[] Data, byte[]* Result);
	void AddServerIP(const string& ServerIP);
	bool TenProtectRelease();
	bool TenProtectCreate(int QQUserID);
	bool TenProtectDProtoEncrypt();
	bool TenProtectDProtoDecrypt();
	bool TenProtectUpdate_AntiBot();
	bool TenProtectStopLocalCheck();
	bool TenProtectStartLocalOnceCheck();
	bool TenProtectSendInitData();
	bool TenProtectSetInitData();
	string GetParamsExcelPathFileName();
	string GetParamsFileName();
	int GetClientVersion();
	bool ConsoleCmd_DS(const string& strCmd);
	bool ForceSetLoadingStep(int LoadingStep);
	bool StartHolePunchingClient(int GameType, int ReqStartUserID);
	bool StartHolePunchingHost(int GameType, int ReqStartUserID);
	bool SetTcpTimeOutInTempReset();
	bool SetTcpTimeOutInGame();
	bool SetTcpTimeOutInUI();
	bool ForceDisconnectGameWithErrMessage(const string& strErrMsg);
	bool SetUDPConnectionTimeLimit(float fLimitSec);
	bool IsCompletedLoading();
	bool CheckHolePunchingResult(int Result, byte Phrase, int InterventionUserID, byte Intervention, int[] FailedUserIDs);
	string GetStrLoadingState(byte bState);
	bool PrintLoadingMsg(const struct FLoadingMessageItem& Item);
	string MakeMD5(const string& strsrc);
	bool DestoryLoadingStater();
	bool CreateLoadingStater(const string& LoginName);
	bool LowRelayServerOff();
	bool LowRelayServerOn(const string& RelayServerIP, int RelayServerPortNum);
	bool LowChangeClient(const string& HostAddr);
	bool LowChangeServer();
	bool ForceDisconnectUDPConnectionClientSide();
	bool ForceDisconnectUDPConnectionHostSide(int UserID);
	bool StartTickCheck();
	bool SetNatTypeToEngine(int NatType);
	bool ClientInitNatChecker(int HostUserID, const string& HostIP, int hostPortNum, byte NatType, byte Intervention, const string& HostInnerIP, int HostInnerPort);
	bool HostInitNatChecker(int ClientUserID, const string& ClientIP, int clientPortNum, byte NatType, byte Intervention_Own);
	bool NatServerAddrStoreToEngine(const string& natServerIP1, int natServerPortNum1, const string& natServerIP2, int natServerPortNum2);
	bool StartMatch(int GameRoomNum, bool bHost, const string& szHostAddr, int hostPortNum);
	void UpdateQuest_WinnerInBotMode(int Level, int RecodeType);
	void UpdateQuest_RoundCompletedInBotMode(int Level, int CompletedRound);
	void UpdateQuest_MatchCompletedInBotMode(int Level);
	void UpdateQuest_SprintTime(int sec);
	void UpdateQuest_AcquireTrophy(int ItemID);
	void UpdateQuest_MatchEndInBotMode(int difficult, int Map);
	void UpdateQuest_KillInBotMode(int difficult, int Map);
	void UpdateQuest_MatchEnd(int Mode, int Map);
	void UpdateQuest_CombatTime(int Mode, int Map, int Min);
	void UpdateQuest_ExecTime(int Mode, int Map, int Min);
	void UpdateQuest_Death(int WeaponType, int weaponID);
	void UpdateQuest_Assist(int WeaponType, int weaponID);
	void UpdateQuest_15Kill(int WeaponType, int weaponID);
	void UpdateQuest_10Kill(int WeaponType, int weaponID);
	void UpdateQuest_9Kill(int WeaponType, int weaponID);
	void UpdateQuest_8Kill(int WeaponType, int weaponID);
	void UpdateQuest_7Kill(int WeaponType, int weaponID);
	void UpdateQuest_6Kill(int WeaponType, int weaponID);
	void UpdateQuest_5Kill(int WeaponType, int weaponID);
	void UpdateQuest_4Kill(int WeaponType, int weaponID);
	void UpdateQuest_3Kill(int WeaponType, int weaponID);
	void UpdateQuest_2Kill(int WeaponType, int weaponID);
	void UpdateQuest_MeeleAttackKill();
	void UpdateQuest_HeadshotKill(int WeaponType, int weaponID);
	void UpdateQuest_AimedKill(int WeaponType, int weaponID);
	void UpdateQuest_Kill(int WeaponType, int weaponID);
	void QuestLog(const string& Msg);
	int GetNextQuestID();
	void UpdateTutorial(int QuestID, int AddCount);
	void UpdateQuest(int MissionType, int MissionOption1, int MissionOption2, int AddCount);
	void CheckMissionProgress(int i, int AddCount);
	void AccomplishMission100Percent(const string& MissionDesc, int cur, int Max);
	void AccomplishMission75Percent(const string& MissionDesc, int cur, int Max);
	void AccomplishMission50Percent(const string& MissionDesc, int cur, int Max);
	void AccomplishMission25Percent(const string& MissionDesc, int cur, int Max);
	void GenerateMissionList(class UwGameManager* GameMgr);
	void SortQuestList(class UwGameManager* GameMgr);
	int FindQuest(int nQuestID);
	void RemoveDailyQuestArray(int[] QuestID);
	void AddDailyQuestArray(int[] QuestID);
	void RemoveDailyQuest(int QuestID);
	void AddDailyQuest(int QuestID);
	void RemoveQuestArray(int[] QuestID);
	void AddQuestArray(int[] QuestID);
	void RemoveQuest(int QuestID);
	void AddQuest(int QuestID);
	bool IsEnableAltTab();
	void SetCurSubPos(int CurSubPos);
	void SetCurpos(int CurPos, int CurSubPos);
	bool IsClanGrade(int Grade);
	bool IsClanMember();
	void RI_Clear();
	void PI_LeavelRoom();
	void RemoveGMList(int GMUID);
	void AddGMList(int GMUID);
	void ClearGMList();
	void PI_EnterRoom(int RoomID, int TeamID);
	void PI_LeaveChannel();
	void PI_EnterChannel(int ServerGroupID, const string& ServerGroupName, int ServerID, const string& ServerName, int ChannelID, const string& ChannelName, bool bClanWarChannel, bool IsDedicatedServer, bool IsInNovcieChannel);
	void UpdateCharInfoAndReqClanUserList();
	void UpdateQuestList(class UwMatchMaker* MM);
	void UpdateRecv_CharInfo(class UwMatchMaker* MM);
	void UpdatePositionInfo(class UwMatchMaker* MM);
	void UpdateClanInfo(class UwMatchMaker* MM);
	void UpdateMoneyInfo(class UwMatchMaker* MM);
	void UpdateEquipItemInfo(class UwMatchMaker* MM);
	void UpdateRankingInfo(class UwMatchMaker* MM);
	void UpdateCharInfo(class UwMatchMaker* MM);
	void UpdateGameRoomInfo(class UwMatchMaker* MM);
	void UpdatePCBangInfo(class UwMatchMaker* MM);
	bool IsChannelRestrictionMaps(int MapNum);
	bool IsChannelRestrictionModes(int ModeNum);
};


// Class Engine.wWeaponFire
// 0x018C (0x01B8 - 0x002C)
class UwWeaponFire : public UObject
{
public:
	bool                                               bModeExclusive;                                           // 0x002C(0x0004) (Edit)
	bool                                               bWaitForRelease;                                          // 0x002C(0x0004) (Edit)
	bool                                               bTimerLoop;                                               // 0x002C(0x0004)
	bool                                               bFireOnRelease;                                           // 0x002C(0x0004) (Edit)
	bool                                               bInputFire;                                               // 0x002C(0x0004)
	bool                                               bIsFiring;                                                // 0x002C(0x0004)
	bool                                               bNowWaiting;                                              // 0x002C(0x0004)
	bool                                               bServerDelayStopFire;                                     // 0x002C(0x0004)
	bool                                               bServerDelayStartFire;                                    // 0x002C(0x0004)
	bool                                               bInstantStop;                                             // 0x002C(0x0004)
	bool                                               bAttachSmokeEmitter;                                      // 0x002C(0x0004) (Edit)
	bool                                               bAttachFlashEmitter;                                      // 0x002C(0x0004) (Edit)
	bool                                               bSplashDamage;                                            // 0x002C(0x0004) (Edit)
	bool                                               bSplashJump;                                              // 0x002C(0x0004) (Edit)
	bool                                               bRecommendSplashDamage;                                   // 0x002C(0x0004) (Edit)
	bool                                               bTossed;                                                  // 0x002C(0x0004) (Edit)
	bool                                               bLeadTarget;                                              // 0x002C(0x0004) (Edit)
	bool                                               bInstantHit;                                              // 0x002C(0x0004) (Edit)
	bool                                               bPawnRapidFireAnim;                                       // 0x002C(0x0004) (Edit)
	bool                                               bReflective;                                              // 0x002C(0x0004) (Edit)
	float                                              TimerInterval;                                            // 0x0030(0x0004)
	float                                              NextTimerPop;                                             // 0x0034(0x0004)
	class AwWeapon*                                    Weapon;                                                   // 0x0038(0x0004) (Edit)
	class APawn*                                       Instigator;                                               // 0x003C(0x0004)
	class ALevelInfo*                                  Level;                                                    // 0x0040(0x0004)
	class AActor*                                      Owner;                                                    // 0x0044(0x0004)
	float                                              NextFireTime;                                             // 0x0048(0x0004)
	float                                              PreFireTime;                                              // 0x004C(0x0004) (Edit)
	float                                              MaxHoldTime;                                              // 0x0050(0x0004) (Edit)
	float                                              HoldTime;                                                 // 0x0054(0x0004) (Edit)
	int                                                ThisModeNum;                                              // 0x0058(0x0004) (Edit)
	float                                              TransientSoundVolume;                                     // 0x005C(0x0004)
	float                                              TransientSoundRadius;                                     // 0x0060(0x0004)
	FName                                              PreFireAnim;                                              // 0x0064(0x0004) (Edit)
	FName                                              FireAnim;                                                 // 0x0068(0x0004) (Edit)
	FName                                              FireLoopAnim;                                             // 0x006C(0x0004) (Edit)
	FName                                              FireEndAnim;                                              // 0x0070(0x0004) (Edit)
	FName                                              ReloadAnim;                                               // 0x0074(0x0004) (Edit)
	float                                              PreFireAnimRate;                                          // 0x0078(0x0004) (Edit)
	float                                              FireAnimRate;                                             // 0x007C(0x0004) (Edit)
	float                                              FireLoopAnimRate;                                         // 0x0080(0x0004) (Edit)
	float                                              FireEndAnimRate;                                          // 0x0084(0x0004) (Edit)
	float                                              ReloadAnimRate;                                           // 0x0088(0x0004) (Edit)
	float                                              TweenTime;                                                // 0x008C(0x0004) (Edit)
	string                                             FmodFireSound_Stereo;                                     // 0x0090(0x000C) (Edit, NeedCtorLink)
	string                                             FmodFireSound;                                            // 0x009C(0x000C) (Edit, NeedCtorLink)
	string                                             FmodReloadSound;                                          // 0x00A8(0x000C) (Edit, NeedCtorLink)
	string                                             FmodNoAmmoSound;                                          // 0x00B4(0x000C) (Edit, NeedCtorLink)
	string                                             FireForce;                                                // 0x00C0(0x000C) (Edit, NeedCtorLink)
	string                                             ReloadForce;                                              // 0x00CC(0x000C) (Edit, NeedCtorLink)
	string                                             NoAmmoForce;                                              // 0x00D8(0x000C) (Edit, NeedCtorLink)
	float                                              FireRate;                                                 // 0x00E4(0x0004) (Edit)
	float                                              ServerStartFireTime;                                      // 0x00E8(0x0004)
	bool                                               bEnableBustMode;                                          // 0x00EC(0x0004)
	bool                                               IsFiringBustMode;                                         // 0x00EC(0x0004)
	int                                                iFireRBC;                                                 // 0x00F0(0x0004)
	int                                                iFireCount;                                               // 0x00F4(0x0004)
	float                                              fFireRBT;                                                 // 0x00F8(0x0004)
	bool                                               bReleasedFiring;                                          // 0x00FC(0x0004)
	class UClass*                                      AmmoClass;                                                // 0x0100(0x0004) (Edit)
	int                                                AmmoPerFire;                                              // 0x0104(0x0004) (Edit)
	int                                                AmmoClipSize;                                             // 0x0108(0x0004) (Edit)
	float                                              Load;                                                     // 0x010C(0x0004) (Edit)
	struct FVector                                     ShakeRotMag;                                              // 0x0110(0x000C) (Edit)
	struct FVector                                     ShakeRotRate;                                             // 0x011C(0x000C) (Edit)
	float                                              ShakeRotTime;                                             // 0x0128(0x0004) (Edit)
	struct FVector                                     ShakeOffsetMag;                                           // 0x012C(0x000C) (Edit)
	struct FVector                                     ShakeOffsetRate;                                          // 0x0138(0x000C) (Edit)
	float                                              ShakeOffsetTime;                                          // 0x0144(0x0004) (Edit)
	class UClass*                                      ProjectileClass;                                          // 0x0148(0x0004) (Edit)
	float                                              BotRefireRate;                                            // 0x014C(0x0004) (Edit)
	float                                              WarnTargetPct;                                            // 0x0150(0x0004) (Edit)
	class UClass*                                      FlashEmitterClass;                                        // 0x0154(0x0004) (Edit)
	class AwEmitter*                                   FlashEmitter;                                             // 0x0158(0x0004) (Edit)
	class UClass*                                      FlashFirstPersonEmitterClass;                             // 0x015C(0x0004) (Edit)
	class UClass*                                      SmokeEmitterClass;                                        // 0x0160(0x0004) (Edit)
	class AwEmitter*                                   SmokeEmitter;                                             // 0x0164(0x0004) (Edit)
	class UClass*                                      SmokeFirstPersonEmitterClass;                             // 0x0168(0x0004) (Edit)
	float                                              AimError;                                                 // 0x016C(0x0004) (Edit)
	float                                              Spread;                                                   // 0x0170(0x0004) (Edit)
	ESpreadStyle                                       SpreadStyle;                                              // 0x0174(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0175(0x0003) MISSED OFFSET
	int                                                FireCount;                                                // 0x0178(0x0004)
	int                                                iPartsDamage;                                             // 0x017C(0x0004)
	int                                                iPartsDamage_Outer;                                       // 0x0180(0x0004)
	float                                              fPartsDamRange_Eff;                                       // 0x0184(0x0004)
	float                                              fPartsDamRange_Max;                                       // 0x0188(0x0004)
	struct FFireProperties                             SavedFireProperties;                                      // 0x018C(0x0014)
	class UwWeaponBaseParams*                          BaseParams;                                               // 0x01A0(0x0004)
	class UClass*                                      ResParams;                                                // 0x01A4(0x0004)
	bool                                               bMakeRadarNoise;                                          // 0x01A8(0x0004)
	ESpreadStance                                      SpreadStance;                                             // 0x01AC(0x0001)
	byte                                               Padding01[0x3];                                           // 0x01AD(0x0003) MISSED OFFSET
	int                                                nBulletPerfire;                                           // 0x01B0(0x0004)
	int                                                AutoAimCount;                                             // 0x01B4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponFire");
		return ptr;
	}


	void DamageLog(class APawn* Victim, float fDam, float fDist, ECollisionPartsType CParts);
	void MakeFireNoise();
	void SetSpreadStance(ESpreadStance ss);
	void wLoadOut();
	class AActor* Trace(const struct FVector& TraceEnd, const struct FVector& TraceStart, bool bTraceActors, const struct FVector& Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material);
	class AActor* Spawn(class UClass* SpawnClass, class AActor* SpawnOwner, const FName& SpawnTag, const struct FVector& SpawnLocation, const struct FRotator& SpawnRotation);
	float MaxRange();
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	struct FVector GetFireStart(const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	struct FRotator AdjustAim(const struct FVector& Start, float InAimError);
	void PlayFireEnd();
	void PlayFiring();
	void PlayStartHold();
	void PlayPreFire();
	void ServerPlayFiring();
	bool AllowFire();
	void ModeHoldFire();
	void ModeDoFire();
	void SyncRandSeed();
	void ModeTick(float dt);
	bool IsFiring();
	void StopFiring();
	void StartFiring();
	void Update(float dt);
	void StopForceFeedback(const string& EffectName);
	void ClientPlayForceFeedback(const string& EffectName);
	void ShakeView();
	void StartMuzzleSmoke();
	void FlashMuzzleFlash();
	void DrawMuzzleFlash(class UCanvas* Canvas);
	void DoFireEffectForClient();
	void DoFireEffect();
	bool AllowEffects();
	void InitEffects();
	void DestroyEffects();
	void PostBeginPlay();
	void SetInitialState();
	void PostNetBeginPlay();
	void BeginPlay();
	void PreBeginPlay();
	void Timer();
	void SetTimer(float NewTimerRate, bool bLoop);
	float GetCollisionPartsDamage(int partsType);
};


// Class Engine.BtrTraceResult
// 0x000C (0x0038 - 0x002C)
class UBtrTraceResult : public UObject
{
public:
	struct FResultData[]                               TraceResultArray;                                         // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BtrTraceResult");
		return ptr;
	}


	void clearResultArray();
	void getResult(int Index, struct FResultData* Data);
	void addResult(const struct FResultData& Data);
};


// Class Engine.wInstantFire
// 0x005C (0x0214 - 0x01B8)
class UwInstantFire : public UwWeaponFire
{
public:
	class UClass*                                      DamageType;                                               // 0x01B8(0x0004)
	float                                              TraceRange;                                               // 0x01BC(0x0004)
	float                                              Momentum;                                                 // 0x01C0(0x0004)
	float                                              Momentum_Pawn;                                            // 0x01C4(0x0004)
	float                                              HeadShotExtent;                                           // 0x01C8(0x0004)
	FName                                              Aim_FireAnim;                                             // 0x01CC(0x0004) (Edit)
	FName                                              Aim_FireLoopAnim;                                         // 0x01D0(0x0004) (Edit)
	float                                              Aim_FireAnimRate;                                         // 0x01D4(0x0004) (Edit)
	float                                              Aim_FireLoopAnimRate;                                     // 0x01D8(0x0004) (Edit)
	class UClass*                                      SilencerSmokeEmitterClass;                                // 0x01DC(0x0004) (Edit)
	class AwEmitter*                                   SilencerSmokeEmitter;                                     // 0x01E0(0x0004) (Edit)
	bool                                               bToggleSlot;                                              // 0x01E4(0x0004)
	float                                              fSpread_Weapon;                                           // 0x01E8(0x0004)
	float                                              fSpread_Char;                                             // 0x01EC(0x0004)
	float                                              fSpread_Min;                                              // 0x01F0(0x0004)
	float                                              fSpread_Max;                                              // 0x01F4(0x0004)
	float                                              fSpreadReduce;                                            // 0x01F8(0x0004)
	float                                              fSpreadReduce_Normal;                                     // 0x01FC(0x0004)
	float                                              fLastRecoilReduceTime;                                    // 0x0200(0x0004)
	string                                             fSound_Fire_Silencer;                                     // 0x0204(0x000C) (NeedCtorLink)
	float                                              fSpread_2nd_Max_Curr;                                     // 0x0210(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wInstantFire");
		return ptr;
	}


	void MakeFireNoise();
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void CalcSpread();
	void SetSpreadStance(ESpreadStance ss);
	void StartMuzzleSmoke();
	void DrawMuzzleFlash(class UCanvas* Canvas);
	void DestroyEffects();
	void InitEffects();
	void wLoadOut();
	void FlashMuzzleFlash();
	void DoTrace(const struct FVector& Start, const struct FRotator& Dir);
	void DoTraceForClient(const struct FVector& Start, const struct FRotator& Dir);
	void DoFireEffectForClient();
	void DoTraceNative(const struct FVector& Start, const struct FRotator& Dir);
	void DoFireEffect();
	void ModeTick(float dt);
	float MaxRange();
	void ServerPlayFiring();
	void PlayFiring();
	bool AllowFire();
	void ModeDoFire();
};


// Class Engine.wDailyQuestRewardParam
// 0x0010 (0x003C - 0x002C)
class UwDailyQuestRewardParam : public UObject
{
public:
	int                                                rewardType;                                               // 0x002C(0x0004)
	int                                                CheckValue;                                               // 0x0030(0x0004)
	int                                                RewardID;                                                 // 0x0034(0x0004)
	int                                                RewardNum;                                                // 0x0038(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDailyQuestRewardParam");
		return ptr;
	}

};


// Class Engine.wCapsuleRewardParam
// 0x0010 (0x003C - 0x002C)
class UwCapsuleRewardParam : public UObject
{
public:
	int                                                rewardType;                                               // 0x002C(0x0004)
	int                                                RewardUniqueIndex;                                        // 0x0030(0x0004)
	int                                                RewardNeedNum;                                            // 0x0034(0x0004)
	int                                                Reward_ID;                                                // 0x0038(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wCapsuleRewardParam");
		return ptr;
	}


	void SetRewardType(const string& _type);
};


// Class Engine.wAlienCharParam
// 0x0078 (0x00A4 - 0x002C)
class UwAlienCharParam : public UObject
{
public:
	byte                                               SkinID;                                                   // 0x002C(0x0001)
	byte                                               Padding00[0x3];                                           // 0x002D(0x0003) MISSED OFFSET
	bool                                               bIsAlienType;                                             // 0x0030(0x0004)
	int                                                ShopID;                                                   // 0x0034(0x0004)
	float                                              fKnockRatio;                                              // 0x0038(0x0004)
	int                                                charID[0x3];                                              // 0x003C(0x0004)
	int                                                add_HP[0x3];                                              // 0x0048(0x0004)
	float                                              F_DiagmoveRatio;                                          // 0x0054(0x0004)
	float                                              SideMoveRatio;                                            // 0x0058(0x0004)
	float                                              B_DiagmoveRatio;                                          // 0x005C(0x0004)
	float                                              BackMoveRatio;                                            // 0x0060(0x0004)
	float                                              AccelRate;                                                // 0x0064(0x0004)
	float                                              JumpMaxAcc;                                               // 0x0068(0x0004)
	float                                              JumpMinAcc;                                               // 0x006C(0x0004)
	float                                              JumpReduceRate;                                           // 0x0070(0x0004)
	float                                              JumpRecoverRate;                                          // 0x0074(0x0004)
	float                                              Land_Dropspeed_Rate;                                      // 0x0078(0x0004)
	float                                              ProneCam_MaxPicth;                                        // 0x007C(0x0004)
	float                                              ProneCam_MaxYaw;                                          // 0x0080(0x0004)
	float                                              ProneCam_RotSpeed;                                        // 0x0084(0x0004)
	int                                                add_MainWeaponID;                                         // 0x0088(0x0004)
	int                                                add_SubWeaponID[0x2];                                     // 0x008C(0x0004)
	int                                                add_SkillID[0x2];                                         // 0x0094(0x0004)
	float                                              CollisionHeight;                                          // 0x009C(0x0004)
	float                                              CollisionRadius;                                          // 0x00A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAlienCharParam");
		return ptr;
	}

};


// Class Engine.wAlienGameParam
// 0x00D4 (0x0100 - 0x002C)
class UwAlienGameParam : public UObject
{
public:
	byte                                               PlayerStart_Alien_Count[0x3];                             // 0x002C(0x0001)
	byte                                               PlayerStart_Hero_Count[0x3];                              // 0x002F(0x0001)
	byte                                               PlayerStart_Hero_Appear_Per[0x3];                         // 0x0032(0x0001)
	byte                                               PlayerStart_SuperHero_Count[0x3];                         // 0x0035(0x0001)
	float                                              fSuperAlien_KnockBackRatio;                               // 0x0038(0x0004)
	float                                              fSuperAlien_SpeedRatio;                                   // 0x003C(0x0004)
	float                                              fSuperAlien_RemainingTime;                                // 0x0040(0x0004)
	float                                              fGunAttackDamagePer[0x7];                                 // 0x0044(0x0004)
	float                                              fAlien_Hit_Delay_Time;                                    // 0x0060(0x0004)
	float                                              fAlien_Hit_Move_Time;                                     // 0x0064(0x0004)
	float                                              fAlien_Hit_Move_Speed;                                    // 0x0068(0x0004)
	float                                              fAttackBuffValue[0xA];                                    // 0x006C(0x0004)
	int                                                iBaseAlienMaxHP[0x3];                                     // 0x0094(0x0004)
	int                                                iHostAlienMaxHP[0x3];                                     // 0x00A0(0x0004)
	int                                                iMasterAlienMaxHP[0x3];                                   // 0x00AC(0x0004)
	byte                                               AlienKnockBack_UseDamage;                                 // 0x00B8(0x0001)
	byte                                               Padding00[0x3];                                           // 0x00B9(0x0003) MISSED OFFSET
	float                                              AlienKnockBack_Time;                                      // 0x00BC(0x0004)
	float                                              AlienKnockBack_Momentum;                                  // 0x00C0(0x0004)
	int                                                AlienSupplyPackWeaponArray[0xA];                          // 0x00C4(0x0004)
	byte                                               AlienSupplyPackWeaponCount;                               // 0x00EC(0x0001)
	byte                                               Padding01[0x3];                                           // 0x00ED(0x0003) MISSED OFFSET
	float                                              AlienSupplyPackDropTime;                                  // 0x00F0(0x0004)
	byte                                               AlienSupplyPackOneTimeCount[0x3];                         // 0x00F4(0x0001)
	byte                                               AlienSupplyPackDropMaxCount[0x3];                         // 0x00F7(0x0001)
	byte                                               AlienSupplyPackDropTryCount[0x3];                         // 0x00FA(0x0001)
	byte                                               Padding02[0x3];                                           // 0x00FD(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAlienGameParam");
		return ptr;
	}

};


// Class Engine.wWeaponCustomPartsParam
// 0x0084 (0x00B0 - 0x002C)
class UwWeaponCustomPartsParam : public UObject
{
public:
	int                                                iItemID;                                                  // 0x002C(0x0004)
	EItemType                                          eType;                                                    // 0x0030(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0031(0x0003) MISSED OFFSET
	int                                                iPartID;                                                  // 0x0034(0x0004)
	string                                             strDisplayName;                                           // 0x0038(0x000C) (NeedCtorLink)
	string                                             strAddPartGroupID;                                        // 0x0044(0x000C) (NeedCtorLink)
	string                                             strPartImageName;                                         // 0x0050(0x000C) (NeedCtorLink)
	float                                              fDurability_Weight;                                       // 0x005C(0x0004)
	bool                                               bUsableAR;                                                // 0x0060(0x0004)
	bool                                               bUsableSMG;                                               // 0x0060(0x0004)
	bool                                               bUsableSR;                                                // 0x0060(0x0004)
	bool                                               bUsablePS;                                                // 0x0060(0x0004)
	bool                                               bUsableSG;                                                // 0x0060(0x0004)
	bool                                               bUsableETC;                                               // 0x0060(0x0004)
	struct FVector                                     vAddAimDiff;                                              // 0x0064(0x000C)
	int                                                ui_damage_range;                                          // 0x0070(0x0004)
	int                                                ui_firesound;                                             // 0x0074(0x0004)
	string                                             ui_zoom_1;                                                // 0x0078(0x000C) (NeedCtorLink)
	string                                             ui_zoom_2;                                                // 0x0084(0x000C) (NeedCtorLink)
	int                                                UI_Durability;                                            // 0x0090(0x0004)
	int                                                ui_damage;                                                // 0x0094(0x0004)
	int                                                ui_spread;                                                // 0x0098(0x0004)
	int                                                ui_view_kick;                                             // 0x009C(0x0004)
	int                                                ui_rate_of_fire;                                          // 0x00A0(0x0004)
	int                                                ui_move;                                                  // 0x00A4(0x0004)
	int                                                ui_range;                                                 // 0x00A8(0x0004)
	int                                                iSkillID;                                                 // 0x00AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponCustomPartsParam");
		return ptr;
	}

};


// Class Engine.wWeaponCustomInfoParam
// 0x0098 (0x00C4 - 0x002C)
class UwWeaponCustomInfoParam : public UObject
{
public:
	int                                                iItemID;                                                  // 0x002C(0x0004)
	string                                             strDisplayName;                                           // 0x0030(0x000C) (NeedCtorLink)
	string                                             strAddPartSightGroupID;                                   // 0x003C(0x000C) (NeedCtorLink)
	string                                             strAddPartBarrelGroupID;                                  // 0x0048(0x000C) (NeedCtorLink)
	string                                             strAddPartSilencerGroupID;                                // 0x0054(0x000C) (NeedCtorLink)
	string                                             strAddPartMuzzleGroupID;                                  // 0x0060(0x000C) (NeedCtorLink)
	string                                             strAddPartGunstockGroupID;                                // 0x006C(0x000C) (NeedCtorLink)
	bool                                               bCustomSight;                                             // 0x0078(0x0004)
	bool                                               bCustomSilencer;                                          // 0x0078(0x0004)
	bool                                               bCustomBarrel;                                            // 0x0078(0x0004)
	bool                                               bCustomGunstock;                                          // 0x0078(0x0004)
	bool                                               bCustomPainting;                                          // 0x0078(0x0004)
	int                                                iDefaultSightUniID;                                       // 0x007C(0x0004)
	int                                                iDefaultSilencerUniID;                                    // 0x0080(0x0004)
	int                                                iDefaultBarrelUniID;                                      // 0x0084(0x0004)
	int                                                iDefaultGunstockUniID;                                    // 0x0088(0x0004)
	int                                                iDefaultPaintingID;                                       // 0x008C(0x0004)
	int                                                iSightOnAddItemID;                                        // 0x0090(0x0004)
	int                                                iSightOffAddItemID;                                       // 0x0094(0x0004)
	struct FVector                                     vAimDiff;                                                 // 0x0098(0x000C)
	struct FVector                                     vDisplay_3d;                                              // 0x00A4(0x000C)
	float                                              fDisplay_3d_rot_y;                                        // 0x00B0(0x0004)
	struct FVector                                     vBootyitem_3d;                                            // 0x00B4(0x000C)
	float                                              fBootyitem_3d_rot_y;                                      // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponCustomInfoParam");
		return ptr;
	}

};


// Class Engine.wModeDOAParam
// 0x0018 (0x0044 - 0x002C)
class UwModeDOAParam : public UObject
{
public:
	int                                                GroupID;                                                  // 0x002C(0x0004)
	int                                                WeaponID0;                                                // 0x0030(0x0004)
	int                                                WeaponID1;                                                // 0x0034(0x0004)
	int                                                WeaponID2;                                                // 0x0038(0x0004)
	int                                                WeaponID3;                                                // 0x003C(0x0004)
	int                                                WeaponID4;                                                // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wModeDOAParam");
		return ptr;
	}

};


// Class Engine.wDefenceLevelInfoParam
// 0x0014 (0x0040 - 0x002C)
class UwDefenceLevelInfoParam : public UObject
{
public:
	byte                                               byDifficulty;                                             // 0x002C(0x0001)
	byte                                               Padding00[0x3];                                           // 0x002D(0x0003) MISSED OFFSET
	bool                                               bEnable;                                                  // 0x0030(0x0004)
	float                                              fAddNpcHP;                                                // 0x0034(0x0004)
	float                                              fAddNpcDamage;                                            // 0x0038(0x0004)
	float                                              fAddNpcDefence;                                           // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDefenceLevelInfoParam");
		return ptr;
	}

};


// Class Engine.wDefenceRewardParam
// 0x0010 (0x003C - 0x002C)
class UwDefenceRewardParam : public UObject
{
public:
	int                                                nGainRewardMinScore;                                      // 0x002C(0x0004)
	int                                                nGainRewardMaxScore;                                      // 0x0030(0x0004)
	int                                                nRewardItemID;                                            // 0x0034(0x0004)
	byte                                               nRewardItemType;                                          // 0x0038(0x0001)
	byte                                               nDifficulty;                                              // 0x0039(0x0001)
	byte                                               nRewardGroup;                                             // 0x003A(0x0001)
	byte                                               nRewardItemCount;                                         // 0x003B(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDefenceRewardParam");
		return ptr;
	}

};


// Class Engine.wDefenceShopParam
// 0x000C (0x0038 - 0x002C)
class UwDefenceShopParam : public UObject
{
public:
	int                                                nBuyItemID;                                               // 0x002C(0x0004)
	int                                                nBuyItemPrice;                                            // 0x0030(0x0004)
	byte                                               nBuyItemIndex;                                            // 0x0034(0x0001)
	byte                                               nBuyEnableLevel;                                          // 0x0035(0x0001)
	byte                                               Padding00[0x2];                                           // 0x0036(0x0002) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDefenceShopParam");
		return ptr;
	}

};


// Class Engine.wDefenceGameParam
// 0x0010 (0x003C - 0x002C)
class UwDefenceGameParam : public UObject
{
public:
	int                                                nMapID;                                                   // 0x002C(0x0004)
	int                                                nDelayTime;                                               // 0x0030(0x0004)
	int                                                nGrade;                                                   // 0x0034(0x0004)
	byte                                               nRound;                                                   // 0x0038(0x0001)
	byte                                               nRegenLoc;                                                // 0x0039(0x0001)
	byte                                               nUnit;                                                    // 0x003A(0x0001)
	byte                                               nLevel;                                                   // 0x003B(0x0001)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDefenceGameParam");
		return ptr;
	}

};


// Class Engine.wNPCActionGroupParam
// 0x0010 (0x003C - 0x002C)
class UwNPCActionGroupParam : public UObject
{
public:
	int                                                ActionGroupID;                                            // 0x002C(0x0004)
	string                                             ActionID;                                                 // 0x0030(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wNPCActionGroupParam");
		return ptr;
	}

};


// Class Engine.wNPCItemGroupParam
// 0x000C (0x0038 - 0x002C)
class UwNPCItemGroupParam : public UObject
{
public:
	int                                                GroupID;                                                  // 0x002C(0x0004)
	int                                                ItemID;                                                   // 0x0030(0x0004)
	int                                                PartsID;                                                  // 0x0034(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wNPCItemGroupParam");
		return ptr;
	}

};


// Class Engine.wNPCNameGroupParam
// 0x0010 (0x003C - 0x002C)
class UwNPCNameGroupParam : public UObject
{
public:
	int                                                GroupID;                                                  // 0x002C(0x0004)
	string                                             NickName;                                                 // 0x0030(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wNPCNameGroupParam");
		return ptr;
	}

};


// Class Engine.wNPCParam
// 0x00D4 (0x0100 - 0x002C)
class UwNPCParam : public UObject
{
public:
	int                                                NPCID;                                                    // 0x002C(0x0004)
	int                                                NameGroupID;                                              // 0x0030(0x0004)
	int                                                Lv;                                                       // 0x0034(0x0004)
	string                                             Type;                                                     // 0x0038(0x000C) (NeedCtorLink)
	int                                                MainWeaponGroupID;                                        // 0x0044(0x0004)
	int                                                PistolGroupID;                                            // 0x0048(0x0004)
	int                                                KnifeGroupID;                                             // 0x004C(0x0004)
	int                                                Grenade1GroupID;                                          // 0x0050(0x0004)
	int                                                Grenade2GroupID;                                          // 0x0054(0x0004)
	int                                                SkillActiveGroupID;                                       // 0x0058(0x0004)
	int                                                SkillPassive1GroupID;                                     // 0x005C(0x0004)
	int                                                SkillPassive2GroupID;                                     // 0x0060(0x0004)
	int                                                SkillPassive3GroupID;                                     // 0x0064(0x0004)
	int                                                SpCharGroupID_AF;                                         // 0x0068(0x0004)
	int                                                SpCharGroupID_RSA;                                        // 0x006C(0x0004)
	int                                                HeadGroupID;                                              // 0x0070(0x0004)
	int                                                FaceGroupID;                                              // 0x0074(0x0004)
	int                                                AccessoryGroupID;                                         // 0x0078(0x0004)
	int                                                HP;                                                       // 0x007C(0x0004)
	int                                                SprintRate;                                               // 0x0080(0x0004)
	int                                                DefaultRunSpeed;                                          // 0x0084(0x0004)
	int                                                ActionGroupID;                                            // 0x0088(0x0004)
	float                                              DamageRate;                                               // 0x008C(0x0004)
	float                                              ExplosionDmageRate;                                       // 0x0090(0x0004)
	float                                              MeleeDamageRate;                                          // 0x0094(0x0004)
	float                                              ReactionTime;                                             // 0x0098(0x0004)
	float                                              DetourRate;                                               // 0x009C(0x0004)
	float                                              DetourWeightMin;                                          // 0x00A0(0x0004)
	float                                              DetourWeightMax;                                          // 0x00A4(0x0004)
	float                                              SafeWeightMin;                                            // 0x00A8(0x0004)
	float                                              SafeWeightMax;                                            // 0x00AC(0x0004)
	float                                              HeadshotChance;                                           // 0x00B0(0x0004)
	float                                              HeadshotChanceMG;                                         // 0x00B4(0x0004)
	float                                              HeadshotSpreadRate;                                       // 0x00B8(0x0004)
	float                                              RotationgSpeed;                                           // 0x00BC(0x0004)
	float                                              MeleeActionRange;                                         // 0x00C0(0x0004)
	float                                              MeleeRange;                                               // 0x00C4(0x0004)
	float                                              MeleeDamage;                                              // 0x00C8(0x0004)
	float                                              EffectiveRange;                                           // 0x00CC(0x0004)
	float                                              CloseRange;                                               // 0x00D0(0x0004)
	float                                              OuterRangeSpreadMin;                                      // 0x00D4(0x0004)
	float                                              OuterRangeSpreadMax;                                      // 0x00D8(0x0004)
	float                                              EffectiveRangeSpreadMin;                                  // 0x00DC(0x0004)
	float                                              EffectiveRangeSpreadMax;                                  // 0x00E0(0x0004)
	float                                              CloseRangeSpreadMin;                                      // 0x00E4(0x0004)
	float                                              CloseRangeSpreadMax;                                      // 0x00E8(0x0004)
	float                                              ZeroRangeSpreadMin;                                       // 0x00EC(0x0004)
	float                                              ZeroRangeSpreadMax;                                       // 0x00F0(0x0004)
	int                                                RewardPoint;                                              // 0x00F4(0x0004)
	int                                                IngamePoint;                                              // 0x00F8(0x0004)
	int                                                BonusPoint;                                               // 0x00FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wNPCParam");
		return ptr;
	}

};


// Class Engine.wNPCSpawnParam
// 0x0014 (0x0040 - 0x002C)
class UwNPCSpawnParam : public UObject
{
public:
	int                                                Grade;                                                    // 0x002C(0x0004)
	string                                             Type;                                                     // 0x0030(0x000C) (NeedCtorLink)
	int                                                NPCID;                                                    // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wNPCSpawnParam");
		return ptr;
	}

};


// Class Engine.wMapInfo
// 0x0148 (0x0174 - 0x002C)
class UwMapInfo : public UObject
{
public:
	int                                                MapID;                                                    // 0x002C(0x0004)
	string                                             File;                                                     // 0x0030(0x000C) (NeedCtorLink)
	string                                             FriendlyName;                                             // 0x003C(0x000C) (NeedCtorLink)
	int                                                MapDifficulty;                                            // 0x0048(0x0004)
	string                                             MapDifficultyDisplay;                                     // 0x004C(0x000C) (NeedCtorLink)
	float                                              m_afDropItem[0x5];                                        // 0x0058(0x0004)
	float                                              m_BlackBoxItemID;                                         // 0x006C(0x0004)
	float                                              m_BlackBoxInfo;                                           // 0x0070(0x0004)
	string                                             ResourceLoadingImage;                                     // 0x0074(0x000C) (NeedCtorLink)
	string                                             ResourceMapImage;                                         // 0x0080(0x000C) (NeedCtorLink)
	string                                             ResourceSupplyImages[0x3];                                // 0x008C(0x000C) (NeedCtorLink)
	string                                             ResourceMiniMapInfoImage[0x4];                            // 0x00B0(0x000C) (NeedCtorLink)
	string                                             BGM1;                                                     // 0x00E0(0x000C) (NeedCtorLink)
	int                                                BGM1_Times[0x4];                                          // 0x00EC(0x0004)
	string                                             BGM2;                                                     // 0x00FC(0x000C) (NeedCtorLink)
	int                                                BGM2_Times[0x4];                                          // 0x0108(0x0004)
	byte                                               ModeFFA;                                                  // 0x0118(0x0001)
	byte                                               ModeTDM;                                                  // 0x0119(0x0001)
	byte                                               ModeSD;                                                   // 0x011A(0x0001)
	byte                                               ModeDOA;                                                  // 0x011B(0x0001)
	byte                                               ModeDomination;                                           // 0x011C(0x0001)
	byte                                               ModeSabotage;                                             // 0x011D(0x0001)
	byte                                               ModeBotFFA;                                               // 0x011E(0x0001)
	byte                                               ModeBotTDM;                                               // 0x011F(0x0001)
	byte                                               ModeBotDomination;                                        // 0x0120(0x0001)
	byte                                               ModeBotBeginner;                                          // 0x0121(0x0001)
	byte                                               ModeDefence;                                              // 0x0122(0x0001)
	byte                                               ModeAlien;                                                // 0x0123(0x0001)
	int                                                ModeFFA_Max;                                              // 0x0124(0x0004)
	int                                                ModeTDM_Max;                                              // 0x0128(0x0004)
	int                                                ModeSD_Max;                                               // 0x012C(0x0004)
	int                                                ModeDOA_Max;                                              // 0x0130(0x0004)
	int                                                ModeDomination_Max;                                       // 0x0134(0x0004)
	int                                                ModeSabotage_Max;                                         // 0x0138(0x0004)
	int                                                ModeBotFFA_Max;                                           // 0x013C(0x0004)
	int                                                ModeBotTDM_Max;                                           // 0x0140(0x0004)
	int                                                ModeBotDomination_Max;                                    // 0x0144(0x0004)
	int                                                ModeBotBeginner_Max;                                      // 0x0148(0x0004)
	int                                                ModeDefence_Max;                                          // 0x014C(0x0004)
	int                                                ModeAlien_Max;                                            // 0x0150(0x0004)
	byte                                               SubMode_All;                                              // 0x0154(0x0001)
	byte                                               SubMode_Knife;                                            // 0x0155(0x0001)
	byte                                               SubMode_Pistol;                                           // 0x0156(0x0001)
	byte                                               SubMode_Grenade;                                          // 0x0157(0x0001)
	byte                                               SubMode_Rocket;                                           // 0x0158(0x0001)
	byte                                               SubMode_Sniper;                                           // 0x0159(0x0001)
	byte                                               SubMode_SniperX;                                          // 0x015A(0x0001)
	byte                                               SubMode_FlameThower;                                      // 0x015B(0x0001)
	byte                                               SubMode_ShotGun;                                          // 0x015C(0x0001)
	byte                                               SubMode_MG;                                               // 0x015D(0x0001)
	byte                                               ModeTDM_RandomRespawn;                                    // 0x015E(0x0001)
	byte                                               ModeDOMI_RandomRespawn;                                   // 0x015F(0x0001)
	byte                                               GameLevel;                                                // 0x0160(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0161(0x0003) MISSED OFFSET
	int                                                MapDisplaySort;                                           // 0x0164(0x0004)
	string                                             NewMapIcon;                                               // 0x0168(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMapInfo");
		return ptr;
	}


	void CopyTo(class UwMapInfo* Dest);
};


// Class Engine.wClanLevelInfoParam
// 0x0014 (0x0040 - 0x002C)
class UwClanLevelInfoParam : public UObject
{
public:
	int                                                nLevel;                                                   // 0x002C(0x0004)
	string                                             sLevelName;                                               // 0x0030(0x000C) (NeedCtorLink)
	int                                                nAccumExp;                                                // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wClanLevelInfoParam");
		return ptr;
	}

};


// Class Engine.wLevelInfoParam
// 0x0014 (0x0040 - 0x002C)
class UwLevelInfoParam : public UObject
{
public:
	int                                                nLevel;                                                   // 0x002C(0x0004)
	string                                             sLevelName;                                               // 0x0030(0x000C) (NeedCtorLink)
	int                                                nAccumExp;                                                // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wLevelInfoParam");
		return ptr;
	}

};


// Class Engine.wItemBoxParam
// 0x00A8 (0x00D4 - 0x002C)
class UwItemBoxParam : public UObject
{
public:
	int                                                nItemBoxID;                                               // 0x002C(0x0004)
	int                                                nItemCount;                                               // 0x0030(0x0004)
	int                                                nItemID[0x14];                                            // 0x0034(0x0004)
	int                                                nPartID[0x14];                                            // 0x0084(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wItemBoxParam");
		return ptr;
	}

};


// Class Engine.wClanMarkParam
// 0x002C (0x0058 - 0x002C)
class UwClanMarkParam : public UObject
{
public:
	int                                                nClanMark_ID;                                             // 0x002C(0x0004)
	int                                                nClanMark_Type_1;                                         // 0x0030(0x0004)
	int                                                nClanMark_Type_2;                                         // 0x0034(0x0004)
	int                                                nSell_Type;                                               // 0x0038(0x0004)
	int                                                nDisplay_Order;                                           // 0x003C(0x0004)
	string                                             sClanMark_Resource_32;                                    // 0x0040(0x000C) (NeedCtorLink)
	string                                             sClanMark_Resource_128;                                   // 0x004C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wClanMarkParam");
		return ptr;
	}

};


// Class Engine.wRandBoxParam
// 0x01A4 (0x01D0 - 0x002C)
class UwRandBoxParam : public UObject
{
public:
	int                                                ItemID;                                                   // 0x002C(0x0004)
	int                                                RandNum;                                                  // 0x0030(0x0004)
	int                                                BestItemID[0x3];                                          // 0x0034(0x0004)
	int                                                RandItemID[0x32];                                         // 0x0040(0x0004)
	int                                                RandPartID[0x32];                                         // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wRandBoxParam");
		return ptr;
	}

};


// Class Engine.wDailyQuestParam
// 0x000C (0x0038 - 0x002C)
class UwDailyQuestParam : public UObject
{
public:
	int                                                DailyQuestType;                                           // 0x002C(0x0004)
	int                                                Step;                                                     // 0x0030(0x0004)
	int                                                QuestID;                                                  // 0x0034(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDailyQuestParam");
		return ptr;
	}

};


// Class Engine.wQuestParam
// 0x009C (0x00C8 - 0x002C)
class UwQuestParam : public UObject
{
public:
	int                                                QuestType;                                                // 0x002C(0x0004)
	int                                                QuestID;                                                  // 0x0030(0x0004)
	int                                                LinkQuestID;                                              // 0x0034(0x0004)
	int                                                LinkQuestStep;                                            // 0x0038(0x0004)
	int                                                LimitArea;                                                // 0x003C(0x0004)
	struct FBtrDouble                                  EventStartTime;                                           // 0x0040(0x0008)
	struct FBtrDouble                                  EventEndTime;                                             // 0x0048(0x0008)
	int                                                QuestCreateLv;                                            // 0x0050(0x0004)
	int                                                DisplayOrder;                                             // 0x0054(0x0004)
	string                                             LinkQuestName;                                            // 0x0058(0x000C) (NeedCtorLink)
	string                                             QuestMissionDesc;                                         // 0x0064(0x000C) (NeedCtorLink)
	string                                             QuestExtDesc;                                             // 0x0070(0x000C) (NeedCtorLink)
	int                                                MissionType;                                              // 0x007C(0x0004)
	int                                                MissionOption[0x2];                                       // 0x0080(0x0004)
	int                                                MissionBotMode;                                           // 0x0088(0x0004)
	int                                                MissionCount;                                             // 0x008C(0x0004)
	int                                                RewardExp;                                                // 0x0090(0x0004)
	int                                                RewardPoint;                                              // 0x0094(0x0004)
	int                                                RewardItemID[0x2];                                        // 0x0098(0x0004)
	int                                                RewardItemPartID[0x2];                                    // 0x00A0(0x0004)
	int                                                RewardQuestID[0x5];                                       // 0x00A8(0x0004)
	string                                             HelpResource;                                             // 0x00BC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wQuestParam");
		return ptr;
	}


	bool IsEnabledEventQuest(const struct FBtrDouble& CurrentTime);
	bool IsEventQuest();
};


// Class Engine.wPromotionParam
// 0x0014 (0x0040 - 0x002C)
class UwPromotionParam : public UObject
{
public:
	int                                                nLevel;                                                   // 0x002C(0x0004)
	string                                             sAcquireItem;                                             // 0x0030(0x000C) (NeedCtorLink)
	int                                                nPartID;                                                  // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wPromotionParam");
		return ptr;
	}

};


// Class Engine.wPaintGroupParam
// 0x002C (0x0058 - 0x002C)
class UwPaintGroupParam : public UObject
{
public:
	int                                                PaintingID;                                               // 0x002C(0x0004)
	string                                             PaintingGroupID;                                          // 0x0030(0x000C) (NeedCtorLink)
	int                                                PaintingNum;                                              // 0x003C(0x0004)
	int                                                PaintingItemID;                                           // 0x0040(0x0004)
	float                                              RepairCost;                                               // 0x0044(0x0004)
	int                                                UI_Durability;                                            // 0x0048(0x0004)
	string                                             strUI_Icon;                                               // 0x004C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wPaintGroupParam");
		return ptr;
	}

};


// Class Engine.wPartsGroupParam
// 0x00E0 (0x010C - 0x002C)
class UwPartsGroupParam : public UObject
{
public:
	int                                                iAddPartID;                                               // 0x002C(0x0004)
	string                                             strPartsGroupID;                                          // 0x0030(0x000C) (NeedCtorLink)
	byte                                               byAddpartNum;                                             // 0x003C(0x0001)
	byte                                               Padding00[0x3];                                           // 0x003D(0x0003) MISSED OFFSET
	string                                             strName;                                                  // 0x0040(0x000C) (NeedCtorLink)
	int                                                iPointPrice;                                              // 0x004C(0x0004)
	int                                                iCashPrice;                                               // 0x0050(0x0004)
	int                                                iSightID;                                                 // 0x0054(0x0004)
	int                                                iSightID_Sub;                                             // 0x0058(0x0004)
	int                                                iSilencerID;                                              // 0x005C(0x0004)
	int                                                iCamoID;                                                  // 0x0060(0x0004)
	int                                                iPaintingID;                                              // 0x0064(0x0004)
	int                                                iChar_HeadID;                                             // 0x0068(0x0004)
	int                                                iChar_FaceID;                                             // 0x006C(0x0004)
	int                                                iChar_AccessoryID;                                        // 0x0070(0x0004)
	int                                                iChar_BackPackID;                                         // 0x0074(0x0004)
	int                                                iChar_PouchID;                                            // 0x0078(0x0004)
	int                                                iChar_CamouflageID;                                       // 0x007C(0x0004)
	int                                                iSkillID;                                                 // 0x0080(0x0004)
	int                                                iAddOption[0x2];                                          // 0x0084(0x0004)
	int                                                iOptionValue[0x2];                                        // 0x008C(0x0004)
	string                                             strDescription;                                           // 0x0094(0x000C) (NeedCtorLink)
	float                                              fAimDiffX;                                                // 0x00A0(0x0004)
	float                                              fAimDiffY;                                                // 0x00A4(0x0004)
	float                                              fAimDiffZ;                                                // 0x00A8(0x0004)
	string                                             strResource_UI_Icon;                                      // 0x00AC(0x000C) (NeedCtorLink)
	int                                                ui_damage_range;                                          // 0x00B8(0x0004)
	int                                                ui_firesound;                                             // 0x00BC(0x0004)
	string                                             ui_zoom_1;                                                // 0x00C0(0x000C) (NeedCtorLink)
	string                                             ui_zoom_2;                                                // 0x00CC(0x000C) (NeedCtorLink)
	int                                                UI_Durability;                                            // 0x00D8(0x0004)
	float                                              display_3d_x;                                             // 0x00DC(0x0004)
	float                                              display_3d_y;                                             // 0x00E0(0x0004)
	float                                              display_3d_z;                                             // 0x00E4(0x0004)
	float                                              display_3d_rot_y;                                         // 0x00E8(0x0004)
	float                                              Bootyitem_3d_x;                                           // 0x00EC(0x0004)
	float                                              Bootyitem_3d_y;                                           // 0x00F0(0x0004)
	float                                              Bootyitem_3d_z;                                           // 0x00F4(0x0004)
	float                                              Bootyitem_3d_rot_y;                                       // 0x00F8(0x0004)
	class UMaterial*                                   matWeapon_1st;                                            // 0x00FC(0x0004)
	class UMaterial*                                   matWeapon_3rd;                                            // 0x0100(0x0004)
	class UMaterial*                                   matWeapon_1st_Painting;                                   // 0x0104(0x0004)
	class UMaterial*                                   matWeapon_3rd_Painting;                                   // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wPartsGroupParam");
		return ptr;
	}

};


// Class Engine.wSkillBaseParam
// 0x003C (0x0068 - 0x002C)
class UwSkillBaseParam : public UObject
{
public:
	int                                                iSkillID;                                                 // 0x002C(0x0004)
	string                                             strName;                                                  // 0x0030(0x000C) (NeedCtorLink)
	string                                             strClassName;                                             // 0x003C(0x000C) (NeedCtorLink)
	int                                                iRequirementSkillid;                                      // 0x0048(0x0004)
	int                                                iCheckStreakCount;                                        // 0x004C(0x0004)
	int                                                iAttachWeaponID;                                          // 0x0050(0x0004)
	ESkillType                                         ESkillType;                                               // 0x0054(0x0001)
	ESkillActiveType                                   eActiveType;                                              // 0x0055(0x0001)
	byte                                               Padding00[0x2];                                           // 0x0056(0x0002) MISSED OFFSET
	int                                                iUseKey;                                                  // 0x0058(0x0004)
	string                                             strDescription;                                           // 0x005C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkillBaseParam");
		return ptr;
	}

};


// Class Engine.wItemResourceParam
// 0x0110 (0x013C - 0x002C)
class UwItemResourceParam : public UObject
{
public:
	int                                                iItemResourceID;                                          // 0x002C(0x0004)
	string                                             strResName;                                               // 0x0030(0x000C) (NeedCtorLink)
	string                                             strRes_1st;                                               // 0x003C(0x000C) (NeedCtorLink)
	string                                             strRes_3rd;                                               // 0x0048(0x000C) (NeedCtorLink)
	string                                             strRes_Icon;                                              // 0x0054(0x000C) (NeedCtorLink)
	string                                             strHaveDotName;                                           // 0x0060(0x000C) (NeedCtorLink)
	string                                             strRes_3rd_AF_Backpack;                                   // 0x006C(0x000C) (NeedCtorLink)
	string                                             strRes_3rd_AF_Gore;                                       // 0x0078(0x000C) (NeedCtorLink)
	string                                             strRes_3rd_AF_Gore_Static;                                // 0x0084(0x000C) (NeedCtorLink)
	string                                             strRes_1st_RSA;                                           // 0x0090(0x000C) (NeedCtorLink)
	string                                             strRes_3rd_RSA;                                           // 0x009C(0x000C) (NeedCtorLink)
	string                                             strRes_3rd_RSA_Backpack;                                  // 0x00A8(0x000C) (NeedCtorLink)
	string                                             strRes_3rd_RSA_Gore;                                      // 0x00B4(0x000C) (NeedCtorLink)
	string                                             strRes_3rd_RSA_Gore_Static;                               // 0x00C0(0x000C) (NeedCtorLink)
	string                                             strRes_1st_AF_Camouflage;                                 // 0x00CC(0x000C) (NeedCtorLink)
	string                                             strRes_1st_RSA_Camouflage;                                // 0x00D8(0x000C) (NeedCtorLink)
	class UMesh*                                       mesh_Base_1st;                                            // 0x00E4(0x0004)
	class UMesh*                                       mesh_Base_3rd;                                            // 0x00E8(0x0004)
	class UMesh*                                       mesh_Base_1st_RSA;                                        // 0x00EC(0x0004)
	class UMesh*                                       mesh_Base_3rd_RSA;                                        // 0x00F0(0x0004)
	class UMesh*                                       mesh_AF_Backpack;                                         // 0x00F4(0x0004)
	class UMesh*                                       mesh_RSA_Backpack;                                        // 0x00F8(0x0004)
	class UStaticMesh*                                 stmesh_Base_1st;                                          // 0x00FC(0x0004)
	class UStaticMesh*                                 stmesh_Base_3rd;                                          // 0x0100(0x0004)
	class UStaticMesh*                                 stmesh_Base_1st_RSA;                                      // 0x0104(0x0004)
	class UStaticMesh*                                 stmesh_Base_3rd_RSA;                                      // 0x0108(0x0004)
	string                                             Resource_UI_Weapon_Ani;                                   // 0x010C(0x000C) (NeedCtorLink)
	string                                             Resource_UI_CapsuleIcon_File;                             // 0x0118(0x000C) (NeedCtorLink)
	string                                             Resource_UI_HUDEnable_File;                               // 0x0124(0x000C) (NeedCtorLink)
	string                                             Resource_UI_HUDDisable_File;                              // 0x0130(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wItemResourceParam");
		return ptr;
	}

};


// Class Engine.wItemBaseParam
// 0x0134 (0x0160 - 0x002C)
class UwItemBaseParam : public UObject
{
public:
	EItemType                                          eType;                                                    // 0x002C(0x0001)
	EItemGrade                                         eGrade;                                                   // 0x002D(0x0001)
	byte                                               Padding00[0x2];                                           // 0x002E(0x0002) MISSED OFFSET
	string                                             strGradeDisplay;                                          // 0x0030(0x000C) (NeedCtorLink)
	int                                                iItemID;                                                  // 0x003C(0x0004)
	string                                             strDisplayName;                                           // 0x0040(0x000C) (NeedCtorLink)
	int                                                iResourceID;                                              // 0x004C(0x0004)
	int                                                iShopDisplayOrder;                                        // 0x0050(0x0004)
	int                                                iInvenDisplayOrder;                                       // 0x0054(0x0004)
	int                                                iEquipLevel;                                              // 0x0058(0x0004)
	int                                                iEquipTeam;                                               // 0x005C(0x0004)
	EEquipSlot                                         EEquipSlot;                                               // 0x0060(0x0001)
	byte                                               Padding01[0x3];                                           // 0x0061(0x0003) MISSED OFFSET
	bool                                               bOverlap;                                                 // 0x0064(0x0004)
	byte                                               byModeItem;                                               // 0x0068(0x0001)
	byte                                               Padding02[0x3];                                           // 0x0069(0x0003) MISSED OFFSET
	string                                             strAddPartGroupID;                                        // 0x006C(0x000C) (NeedCtorLink)
	string                                             strPaintingGroupID;                                       // 0x0078(0x000C) (NeedCtorLink)
	string                                             strAddOption[0x2];                                        // 0x0084(0x000C) (NeedCtorLink)
	string                                             strOptionValue[0x2];                                      // 0x009C(0x000C) (NeedCtorLink)
	ECostType                                          ECostType;                                                // 0x00B4(0x0001)
	byte                                               Padding03[0x3];                                           // 0x00B5(0x0003) MISSED OFFSET
	int                                                iRepairCost;                                              // 0x00B8(0x0004)
	byte                                               byDurabilityWeight;                                       // 0x00BC(0x0001)
	byte                                               Padding04[0x3];                                           // 0x00BD(0x0003) MISSED OFFSET
	int                                                iAdType;                                                  // 0x00C0(0x0004)
	bool                                               bSell;                                                    // 0x00C4(0x0004)
	int                                                iSellingPrice;                                            // 0x00C8(0x0004)
	int                                                iPeriodNum[0x5];                                          // 0x00CC(0x0004)
	int                                                iCashPrice[0x5];                                          // 0x00E0(0x0004)
	int                                                iPointPrice[0x5];                                         // 0x00F4(0x0004)
	int                                                iDBRemainTime;                                            // 0x0108(0x0004)
	int                                                iDBAddPartID;                                             // 0x010C(0x0004)
	int                                                iDBDurability;                                            // 0x0110(0x0004)
	int                                                iDBImpair;                                                // 0x0114(0x0004)
	int                                                iDBEquipUpgrade;                                          // 0x0118(0x0004)
	bool                                               bAuction;                                                 // 0x011C(0x0004)
	int                                                iAuctionMaxPrice;                                         // 0x0120(0x0004)
	int                                                iAuctionMinPrice;                                         // 0x0124(0x0004)
	string                                             strDescription;                                           // 0x0128(0x000C) (NeedCtorLink)
	int                                                start_ammo;                                               // 0x0134(0x0004)
	int                                                clip_size;                                                // 0x0138(0x0004)
	byte                                               ui_damage;                                                // 0x013C(0x0001)
	byte                                               ui_spread;                                                // 0x013D(0x0001)
	byte                                               ui_view_kick;                                             // 0x013E(0x0001)
	byte                                               ui_rate_of_fire;                                          // 0x013F(0x0001)
	byte                                               ui_move;                                                  // 0x0140(0x0001)
	byte                                               ui_range;                                                 // 0x0141(0x0001)
	byte                                               Padding05[0x2];                                           // 0x0142(0x0002) MISSED OFFSET
	int                                                StartSellDate_Year;                                       // 0x0144(0x0004)
	byte                                               StartSellDate_Month;                                      // 0x0148(0x0001)
	byte                                               StartSellDate_Day;                                        // 0x0149(0x0001)
	byte                                               StartSellDate_Hour;                                       // 0x014A(0x0001)
	byte                                               StartSellDate_Min;                                        // 0x014B(0x0001)
	byte                                               StartSellDate_Sec;                                        // 0x014C(0x0001)
	byte                                               Padding06[0x3];                                           // 0x014D(0x0003) MISSED OFFSET
	int                                                EndSellDate_Year;                                         // 0x0150(0x0004)
	byte                                               EndSellDate_Month;                                        // 0x0154(0x0001)
	byte                                               EndSellDate_Day;                                          // 0x0155(0x0001)
	byte                                               EndSellDate_Hour;                                         // 0x0156(0x0001)
	byte                                               EndSellDate_Min;                                          // 0x0157(0x0001)
	byte                                               EndSellDate_Sec;                                          // 0x0158(0x0001)
	byte                                               Padding07[0x3];                                           // 0x0159(0x0003) MISSED OFFSET
	int                                                iResourceArrayIndex;                                      // 0x015C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wItemBaseParam");
		return ptr;
	}

};


// Class Engine.BTCustomDrawHK
// 0x0000 (0x002C - 0x002C)
class UBTCustomDrawHK : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTCustomDrawHK");
		return ptr;
	}


	void STATIC_DrawTextPaddingOffsetRatio(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB);
	float STATIC_DrawTextArrayRatio(class UCanvas* C, struct FText[] textArray, EDrawType dt, ETextArrayDrawType tadt, float tL, float tT, float tR, float tB, int Level);
	void STATIC_DrawStringPaddingOffsetRatio(class UCanvas* C, const string& Text, EDrawType dt, float FontSize, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont);
	void STATIC_DrawStringRatio(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont);
	void STATIC_DrawTextCacheRatio(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int Level);
	void STATIC_DrawImagePaddingCacheRatio(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, int Level, struct FImage* img);
	void STATIC_DrawImageCacheRatio(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img);
	void STATIC_DrawImagePaddingOffsetRatio(class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, struct FImage* img);
	void STATIC_DrawImagePaddingRatio(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, struct FImage* img);
	void STATIC_DrawTextRatio(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont);
	void STATIC_DrawImageRatio(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img);
	string STATIC_Get_0x0A_RemoveString(const string& S);
	string STATIC_GetNumberString(int Num, bool fixedsize, int fixedlen);
	bool STATIC_IsInBox(float boxx1, float boxx2, float boxy1, float boxy2, float X, float Y);
	bool STATIC_IsInFloatBox(const struct FFloatBox& Box, float X, float Y);
	int STATIC_GetRatioIndex(int width, int Height);
	class UIntClass* STATIC_MakeIntClass(int A);
	string[] STATIC_FormatStringDiviedArray(const string& original, string[] args);
	bool STATIC_SplitString(const string& original, int ExceptDivideMode, const string& divider1, const string& divider2, const string& divider3, string[]* temp);
	string STATIC_FormatStringArray(const string& original, string[] args);
	string STATIC_FormatString(const string& original, const string& arg0, const string& arg1, const string& arg2, const string& arg3, const string& arg4, const string& arg5, const string& arg6, const string& arg7, const string& arg8);
	struct FFloatBox STATIC_MakeResizeBox(const struct FFloatBox& inBox, int resizeX, int resizeY);
	struct FFloatBox STATIC_MakeEmptyBox();
	struct FFloatBox STATIC_MakeFloatBox(float X1, float Y1, float X2, float Y2);
	bool STATIC_HasString(const string& Check, const string& word);
	void STATIC_SplitTextBounds(class UCanvas* C, const string& Text, int FontSize, float clientWidth, string[]* tarray);
	void STATIC_DrawImageStretchedHK(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img);
	void STATIC_DrawImageStretchedCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img);
	void STATIC_DrawImageStretched(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img);
	void STATIC_DrawImageStretchedWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img);
	void STATIC_DrawImageScaleCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img);
	void STATIC_DrawImageScale(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img);
	void STATIC_DrawImageScaleWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img);
	void STATIC_DrawImageOriginalWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img);
	void STATIC_DrawImageWithClipArea(class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img);
	void STATIC_DrawImageOriginalCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img);
	void STATIC_DrawImageOriginal(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img);
	void STATIC_DrawImageCache(class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img);
	void STATIC_DrawImage_Alpha(class UCanvas* C, float tL, float tT, float tR, float tB, float Alpha, struct FImage* img);
	void STATIC_DrawImage(class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img);
	void STATIC_DrawImagePaddingCache(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, int Level, struct FImage* img);
	void STATIC_DrawImagePadding(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, struct FImage* img);
	void STATIC_DrawImagePaddingOffset(class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, struct FImage* img);
	void STATIC_DrawImageScaleAllAndPaddingOffsetAndClipping(class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, float cL, float ct, float cR, float cb, struct FImage* img);
	void STATIC_DrawImageScaleAllAndPaddingAndClipping(class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, float cL, float ct, float cR, float cb, struct FImage* img);
	void STATIC_DrawEllipsisStringPaddingOffset(class UCanvas* C, const string& Text, EDrawType dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, const struct FColor& BackShadowColor, int Level);
	void STATIC_DrawEllipsisStringPadding(class UCanvas* C, const string& Text, EDrawType dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, const struct FColor& BackShadowColor, int Level);
	void STATIC_DrawCullingString(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float widthPerc, float tL, float tT, float tR, float tB, bool cullRight, const struct FColor& BackShadowColor, int Level);
	void STATIC_DrawEllipsisString(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float widthPerc, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int Level);
	struct FFloatBox STATIC_GetDrawStringFloatBoxOLD(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor);
	struct FFloatBox STATIC_GetDrawStringFloatBoxLH(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor);
	struct FFloatBox STATIC_GetDrawStringFloatBox(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor);
	void STATIC_DrawStringCache(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int Level);
	void STATIC_DrawString(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont);
	void STATIC_DrawStringModulateAlpha(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont);
	void STATIC_DrawString_UseModulateColor(class UCanvas* C, const string& Text, EDrawType dt, float fntSize, float tL, float tT, float tR, float tB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, const struct FPlane& mColor);
	void STATIC_DrawStringPaddingOffset(class UCanvas* C, const string& Text, EDrawType dt, float FontSize, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, const struct FColor& BackShadowColor, int PresetIndex, bool bUseD3DFont);
	void STATIC_DrawStringPadding(class UCanvas* C, const string& Text, EDrawType dt, float FontSize, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, const struct FColor& BackShadowColor, int Level);
	float STATIC_DrawTextArray(class UCanvas* C, struct FText[] textArray, EDrawType dt, ETextArrayDrawType tadt, float tL, float tT, float tR, float tB, int Level);
	void STATIC_DrawTextCache(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int Level);
	void STATIC_DrawText_UseModulateColor(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, const struct FPlane& mColor);
	void STATIC_DrawText(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont);
	void STATIC_DrawTextPaddingOffset(class UCanvas* C, const struct FText& Text, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB);
	void STATIC_DrawTextArrayPadding(class UCanvas* C, struct FText[] textArray, EDrawType dt, ETextArrayDrawType tadt, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB);
	string STATIC_ToDollarString(const string& money);
	string STATIC_ToWonString(const string& money);
	struct FColor STATIC_MakeColorRGB(byte R, byte G, byte B);
	struct FImage STATIC_MakeImageColor(int width, int Height, EDrawType dt, class UMaterial* img, const struct FColor& frontColor, const struct FColor& BackShadowColor);
	struct FImage STATIC_MakeImage(int width, int Height, EDrawType dt, class UMaterial* img);
	struct FText STATIC_MakeTextColor(int fntSize, EDrawType fntDrawType, const string& txt, const struct FColor& frontColor, const struct FColor& BackShadowColor);
	struct FText STATIC_MakeText(int fntSize, EDrawType fntDrawType, const string& txt);
};


// Class Engine.wGameManager
// 0x0350 (0x037C - 0x002C)
class UwGameManager : public UObject
{
public:
	class UGameEngine*                                 gEngine;                                                  // 0x002C(0x0004)
	class UwItemBaseParam*[]                           ItemParams;                                               // 0x0030(0x000C) (NeedCtorLink)
	class UwItemResourceParam*[]                       ItemResParams;                                            // 0x003C(0x000C) (NeedCtorLink)
	class UwSkillBaseParam*[]                          SkillParams;                                              // 0x0048(0x000C) (NeedCtorLink)
	class UwPartsGroupParam*[]                         AddPartsGroupParams;                                      // 0x0054(0x000C) (NeedCtorLink)
	class UwPaintGroupParam*[]                         PaintGroupParams;                                         // 0x0060(0x000C) (NeedCtorLink)
	class UwPromotionParam*[]                          PromotionParams;                                          // 0x006C(0x000C) (NeedCtorLink)
	class UwQuestParam*[]                              QuestParams;                                              // 0x0078(0x000C) (NeedCtorLink)
	class UwDailyQuestParam*[]                         DailyQuestParams;                                         // 0x0084(0x000C) (NeedCtorLink)
	class UwDailyQuestRewardParam*[]                   DailyQuestRewardParams;                                   // 0x0090(0x000C) (NeedCtorLink)
	class UwRandBoxParam*[]                            RandBoxParams;                                            // 0x009C(0x000C) (NeedCtorLink)
	class UwClanMarkParam*[]                           ClanMarkParams;                                           // 0x00A8(0x000C) (NeedCtorLink)
	class UwItemBoxParam*[]                            ItemBoxParams;                                            // 0x00B4(0x000C) (NeedCtorLink)
	class UwMapInfo*[]                                 MapInfos;                                                 // 0x00C0(0x000C) (NeedCtorLink)
	class UwModeDOAParam*[]                            ModeDOAParams;                                            // 0x00CC(0x000C) (NeedCtorLink)
	class UwLevelInfoParam*[]                          LevelInfoParams;                                          // 0x00D8(0x000C) (NeedCtorLink)
	class UwClanLevelInfoParam*[]                      ClanLevelInfoParams;                                      // 0x00E4(0x000C) (NeedCtorLink)
	class UwWeaponCustomInfoParam*[]                   WeaponCustomInfoParams;                                   // 0x00F0(0x000C) (NeedCtorLink)
	class UwWeaponCustomPartsParam*[]                  WeaponCustomPartsParams;                                  // 0x00FC(0x000C) (NeedCtorLink)
	class UwCapsuleRewardParam*[]                      CapsuleRewardParams;                                      // 0x0108(0x000C) (NeedCtorLink)
	int[]                                              LevelExps;                                                // 0x0114(0x000C) (NeedCtorLink)
	string[]                                           LevelImages;                                              // 0x0120(0x000C) (NeedCtorLink)
	class UMaterial*[]                                 LevelTextures;                                            // 0x012C(0x000C) (NeedCtorLink)
	string[]                                           ClanLevelImages;                                          // 0x0138(0x000C) (NeedCtorLink)
	class UMaterial*[]                                 ClanLevelTextures;                                        // 0x0144(0x000C) (NeedCtorLink)
	class UwSkillBoxHK*[]                              SkillBoxList;                                             // 0x0150(0x000C) (NeedCtorLink)
	class UwQuickSlotBoxHK*[]                          QuickSlotBoxList;                                         // 0x015C(0x000C) (NeedCtorLink)
	class UwItemBoxHK*[]                               UIShowItemLists;                                          // 0x0168(0x000C) (NeedCtorLink)
	class UwItemBoxHK*[]                               CandidateLists;                                           // 0x0174(0x000C) (NeedCtorLink)
	class UwItemBoxInstanceHK*[]                       InstanceItemLists;                                        // 0x0180(0x000C) (NeedCtorLink)
	string[]                                           TotalLevelImages;                                         // 0x018C(0x000C) (NeedCtorLink)
	struct FIntBox[]                                   TotalLevelImageCoordinates;                               // 0x0198(0x000C) (NeedCtorLink)
	string[]                                           BadWords;                                                 // 0x01A4(0x000C) (NeedCtorLink)
	string[]                                           BadNicks;                                                 // 0x01B0(0x000C) (NeedCtorLink)
	float[]                                            SupplyRandomArray;                                        // 0x01BC(0x000C) (NeedCtorLink)
	class UwNPCSpawnParam*[]                           NPCSpawnParams;                                           // 0x01C8(0x000C) (NeedCtorLink)
	class UwNPCParam*[]                                NPCParams;                                                // 0x01D4(0x000C) (NeedCtorLink)
	class UwNPCNameGroupParam*[]                       NPCNameGroupParams;                                       // 0x01E0(0x000C) (NeedCtorLink)
	class UwNPCItemGroupParam*[]                       NPCItemGroupParams;                                       // 0x01EC(0x000C) (NeedCtorLink)
	class UwNPCActionGroupParam*[]                     NPCActionGroupParams;                                     // 0x01F8(0x000C) (NeedCtorLink)
	class UwDefenceGameParam*[]                        DefenceGameParamsEasy;                                    // 0x0204(0x000C) (NeedCtorLink)
	class UwDefenceGameParam*[]                        DefenceGameParamsNormal;                                  // 0x0210(0x000C) (NeedCtorLink)
	class UwDefenceGameParam*[]                        DefenceGameParamsHard;                                    // 0x021C(0x000C) (NeedCtorLink)
	class UwDefenceGameParam*[]                        DefenceGameParamsVeryHard;                                // 0x0228(0x000C) (NeedCtorLink)
	class UwDefenceShopParam*[]                        DefenceShopParams;                                        // 0x0234(0x000C) (NeedCtorLink)
	class UwDefenceRewardParam*[]                      DefenceRewardParams;                                      // 0x0240(0x000C) (NeedCtorLink)
	class UwDefenceLevelInfoParam*[]                   DefenceLevelInfoParams;                                   // 0x024C(0x000C) (NeedCtorLink)
	class UwAlienGameParam*                            AlienGameParam;                                           // 0x0258(0x0004)
	class UwAlienCharParam*[]                          AlienCharParams;                                          // 0x025C(0x000C) (NeedCtorLink)
	struct FSEAXEffect[]                               EAXEffectList;                                            // 0x0268(0x000C) (NeedCtorLink)
	class UwGameManagerScriptPart*                     SP;                                                       // 0x0274(0x0004)
	string                                             VoicePackageName;                                         // 0x0278(0x000C) (NeedCtorLink)
	int                                                LanguageType;                                             // 0x0284(0x0004)
	int                                                TeamIndex;                                                // 0x0288(0x0004)
	bool                                               bUseRagdoll;                                              // 0x028C(0x0004)
	bool                                               bUseGore;                                                 // 0x028C(0x0004)
	bool                                               bUseMouseRevision;                                        // 0x028C(0x0004)
	bool                                               bUseStanceToggle;                                         // 0x028C(0x0004)
	bool                                               bUseAdvCamShake;                                          // 0x028C(0x0004)
	int                                                ShopItemListCount;                                        // 0x0290(0x0004)
	int[]                                              ShopItemList;                                             // 0x0294(0x000C) (NeedCtorLink)
	int                                                FlagModify;                                               // 0x02A0(0x0004)
	int                                                FlagDurability;                                           // 0x02A4(0x0004)
	int                                                FlagRenew;                                                // 0x02A8(0x0004)
	int                                                FlagCash;                                                 // 0x02AC(0x0004)
	int                                                FlagPCBang;                                               // 0x02B0(0x0004)
	int                                                FlagSellShop;                                             // 0x02B4(0x0004)
	int                                                FlagBuyShop;                                              // 0x02B8(0x0004)
	class UClanMarkManager*                            cmm;                                                      // 0x02BC(0x0004)
	struct FBtrDouble[]                                kBlockedItemIdx;                                          // 0x02C0(0x000C) (NeedCtorLink)
	struct FBtrDouble                                  kServerTime;                                              // 0x02CC(0x0008)
	int                                                kClientMSec;                                              // 0x02D4(0x0004)
	struct FBtrDouble                                  kClientTime;                                              // 0x02D8(0x0008)
	struct FBtrDouble                                  kDiffTime;                                                // 0x02E0(0x0008)
	bool                                               bForceUpdateEventTimer;                                   // 0x02E8(0x0004)
	struct FEventTimerStruct[]                         kEventTimerList;                                          // 0x02EC(0x000C) (NeedCtorLink)
	int                                                kWebzenShopVer_Year;                                      // 0x02F8(0x0004)
	int                                                kWebzenShopVer_YearID;                                    // 0x02FC(0x0004)
	int                                                kWebzenShopVer_SalesZoneCode;                             // 0x0300(0x0004)
	struct FWebzenInven[]                              kWZInvenList;                                             // 0x0304(0x000C) (NeedCtorLink)
	struct FWebzenShopCategory[]                       kWZCategoryList;                                          // 0x0310(0x000C) (NeedCtorLink)
	struct FWebzenShopPackage[]                        kWZPackageList;                                           // 0x031C(0x000C) (NeedCtorLink)
	int                                                GP20ShopVersion;                                          // 0x0328(0x0004)
	class UwGP20Product*[]                             kGP20ProductList;                                         // 0x032C(0x000C) (NeedCtorLink)
	bool                                               ReceiveRandomBox_Use;                                     // 0x0338(0x0004)
	struct FScriptDelegate                             __UpdateServerTime__Delegate;                             // 0x033C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateWebzenShopVerInfo__Delegate;                      // 0x0344(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateWebzenShopItemList__Delegate;                     // 0x034C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateItemList__Delegate;                               // 0x0354(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateWebzenItemList__Delegate;                         // 0x035C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateSkillBoxList__Delegate;                           // 0x0364(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __UpdateQuickSlotBoxList__Delegate;                       // 0x036C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __dele_UpdateEventTimer__Delegate;                        // 0x0374(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGameManager");
		return ptr;
	}


	void AddCapsuleRewardParams(class UBTNetGameData* GameData);
	void LoadCapsuleRewardParameters();
	bool STATIC_IsAlienMasterType(EAlienModeType eObjType);
	bool STATIC_IsAlienType(EAlienModeType eObjType);
	bool STATIC_IsAlienHostType(EAlienModeType eObjType);
	bool STATIC_IsAlienTeamType(EAlienModeType eObjType);
	bool STATIC_IsHumanTeamType(EAlienModeType eObjType);
	bool STATIC_IsSuperHeroType(EAlienModeType eObjType);
	bool STATIC_IsHumanType(EAlienModeType eObjType);
	bool STATIC_IsHeroType(EAlienModeType eObjType);
	bool IsUseSkill_InGame(int iGameMode, int iItemID, byte* byModeItem);
	bool IsUseItem_InGame(int iGameMode, int iItemID, byte* byModeItem);
	int GetAlienModeAttackBuff(int iWeaponType, int Damage, float AttackLevel);
	int STATIC_GetSkillTypeMax();
	bool IsSameQuickSlotItem(int iQuickSlotIndex, ESLOT_POS eSlotPos, class UwItemBoxHK* ItemInfo, class UwItemBoxInstanceHK* instanceInfo);
	int ConvertQuickSlotTypeToIndex(ESLOT_POS eSlotPos);
	ESLOT_POS ConvertIndexToQuickSlotType(int iQuickSlotType, bool bIsSkill);
	ESLOT_POS ConvertUIIndexToSlotPos(int iUIIndex);
	int ConvertSlotPosToUIIndex(ESLOT_POS eSlotPos);
	int GetItemSlotByUniqueSkillID(int UniqueSkillID);
	int GetItemSlotByUniqueID(const struct FBtrDouble& dwUniqueID);
	bool IsEnableSkillSlot(int iSkillSlotIndex);
	bool IsEnableQuickSlot(int iQuickSlotIndex);
	int GetItemSlotByItemType(class UwItemBoxHK* ItemInfo, int iQuickSlotIndex, byte byTeamIndex);
	bool CheckSameQuickSlotItem(int iQuickSlotIndex, ESLOT_POS eSlotPos, int iItemID, const struct FBtrDouble& dwUniqueID);
	bool CheckOnlyModeItem(byte byModeItem);
	bool CheckBlackbox_Key(int iItemType);
	bool CheckCapsule_Coupon(int iItemType);
	bool CheckBlackbox(int iItemType);
	bool CheckCapsuleItem(int iItemType);
	bool CheckSpCharItem(int iItemType);
	bool CheckAccessoryItem(int iItemType);
	bool CheckFaceItem(int iItemType);
	bool CheckHeadItem(int iItemType);
	bool CheckMeleeWeapon(int iItemType);
	bool CheckThrowingWeapon(int iItemType);
	bool CheckCamouflage(int iItemType);
	bool CheckPouch(int iItemType);
	bool CheckBackPack(int iItemType);
	bool CheckLvMark(int iItemType);
	bool CheckRandBoxItem(int iItemType);
	bool CheckUseItem(int iItemType);
	bool CheckItemBox(int iItemType);
	bool CheckSkillItem(int iItemType);
	bool CheckPistolItem(int iItemType);
	bool CheckMGItem(int iItemType);
	bool CheckSGItem(int iItemType);
	bool CheckSRItem(int iItemType);
	bool CheckSMGItem(int iItemType);
	bool CheckARItem(int iItemType);
	bool CheckEquipSlotItem(int iItemType);
	bool CheckQuickSlotItem(int iItemType);
	bool CheckTotalEquipSlotItem(int iItemType);
	bool CheckExtendSkillSlot(int iItemType);
	bool CheckExtendQuickSlot(int iItemType);
	bool CheckSubWeaponItem(int iItemType);
	bool CheckMainWeaponItem(int iItemType);
	bool CheckWeaponItem(int iItemType);
	bool CheckWeaponSlot(ESLOT_POS eSlotPos);
	bool CheckSkillSlot(ESLOT_POS eSlotPos);
	class UI3DL2Listener* GetEAXEffect(const string& strEffectClassName);
	string GetLevelImageString(int Level, int LevelMarkID);
	struct FFloatBox GetLevelImageCoordi(int Level, int LevelMarkID);
	string GetClanLevelImages(int Level);
	int GetLevelByLevelMarkID(int LevelMarkID);
	int GetLevel(int Exp);
	void LoadSupplyRandomTable();
	void LoadMapInfos();
	int GetPaintingItemIDbyPaintingID(int PaintingID);
	int GetPaintGroupParamsIndex(int PaintingID);
	class UwPaintGroupParam* GetPaintGroupParam(int iPaintingID);
	string GetPaintingUIIcon(int iItemID);
	void AddPaintGroupParam_NullData();
	void AddPaintGroupParams(class UBTNetGameData* GameData);
	void LoadPaintGroupParameters();
	class UMaterial* GetPartsGroupPainting(int iItemID, int iPartsID, bool bThird, int iPainting_Item_ID);
	class UwPartsGroupParam* GetDefaultAddPartsGroupParam(int iItemID);
	class UwPartsGroupParam* GetAddPartsGroupParam(int iPartsGrouplID);
	void AddAddPartsGroupParam_NullData();
	void AddAddPartsGroupParams(class UBTNetGameData* GameData);
	void LoadAddPartsGroupParameters();
	void AddItemBoxParams(class UBTNetGameData* GameData);
	void AddItemBoxParam_NullData();
	void LoadItemBoxParameters();
	struct FImage GetClanMark128(int clanmarkid);
	struct FImage GetClanMark32(int clanmarkid);
	struct FImage GetMyClanBL();
	struct FImage GetMyClanBG();
	struct FImage GetMyClanPattern();
	int FindClanMarkIndex(int clanmarkid);
	class UwClanMarkParam* FindClanMarkParams(int clanmarkid);
	void AddClanMarkParams(class UBTNetGameData* GameData);
	void AddClanMarkParam_NullData();
	void LoadModeDOAParameters();
	bool GetRandBoxItems(int ItemID, int RandNum, int[]* ItemIDs, int[]* PartIDs, int[]* BestItemIDs);
	int GetRandBoxItemsCount(int ItemID);
	bool GetItemBoxItems(int ItemID, int RandNum, int[]* ItemIDs, int[]* PartIDs, int[]* BestItemIDs);
	int GetItemBoxItemsCount(int ItemID);
	void AddRandBoxParams(class UBTNetGameData* GameData);
	void AddRandBoxParam_NullData();
	void LoadRandBoxParameters();
	int GetLastDailyQuestID(int QuestID);
	int GetPrevDailyQuestID(int QuestID);
	int GetDailyQuestIDFromTypeAndStep(int ServerTime, int DailyQuestType, int Step);
	int GetDailyQuestRewardItemCount(int RewardID);
	int GetDailyQuestType(int QuestID);
	void AddDailyQuestRewardParams(class UBTNetGameData* GameData);
	void AddDailyQuestParams(class UBTNetGameData* GameData);
	void AddDailyQuestParam_NullData();
	void LoadDailyQuestRewardParameters();
	void LoadDailyQuestParameters();
	struct FBtrTime TimeStringToBtrTime(const string& strInTime);
	bool HasEnableEventQuest(const struct FBtrDouble& ServerTime, class UwMatchMaker* wMM);
	int GetLinkQuestMaxStep(int LinkQuestID);
	class UwQuestParam* GetLinkQuestInfo(int LinkQuestID, int LinkQuestStep);
	int GetQuestInfoIndex(int QuestID);
	class UwQuestParam* GetQuestInfoFromIndex(int Index);
	class UwQuestParam* GetQuestInfo(int QuestID);
	int GetItemType(class UwItemBoxHK* ItemInfo, class UwItemBoxInstanceHK* instanceInfo);
	bool IsEnableWeaponModify(class UwItemBoxHK* ItemInfo);
	void AddQuestParams(class UBTNetGameData* GameData);
	void AddQuestParam_NullData();
	void LoadQuestParameters();
	void GetPromotionItems(int Level, class UwPromotionParam*[]* arrItems);
	int GetPromotionItemsCount(int Level);
	void AddPromotionParams(class UBTNetGameData* GameData);
	void AddPromotionParam_NullData();
	void LoadPromotionParameters();
	void AddClanLevelInfoParams(class UBTNetGameData* GameData);
	void AddClanLevelInfoParam_NullData();
	void LoadClanLevelInfoParams();
	void AddLevelInfoParams(class UBTNetGameData* GameData);
	void AddLevelInfoParam_NullData();
	void LoadLevelInfoParams();
	class UwSkillBaseParam* GetSkillParam(int iSkillID);
	void AddSkillParam_NullData();
	void AddSkillParams(class UBTNetGameData* GameData);
	void LoadSkillParameters();
	class UStaticMesh* GetItemResourceStaticMesh(int iItemID, bool b3rd, byte byTeam, byte byCase);
	class UMesh* GetItemResourceMesh(int iItemID, bool b3rd, byte byTeam, byte byCase);
	void PrecacheItemResources(class ALevelInfo* Level);
	class UwItemResourceParam* GetItemResourceParam(int iItemID);
	void AddItemResourceParam_NullData();
	void AddItemResourceParams(class UBTNetGameData* GameData);
	void LoadItemResourceParams();
	class UwItemBaseParam* GetItemParam(int iItemID);
	void AddItemParam_NullData();
	void AddItemParams(class UBTNetGameData* GameData, class UwWeaponManager* weaponManager);
	void LoadItemParameters(class UwWeaponManager* weaponManager);
	void DestroyScript();
	bool ContainsBadNicks(const string& S, string* badword);
	bool FilterBadWords(string* S);
	bool ContainsBadWords(const string& S, string* badword);
	void LoadBadwords(const string& strExcelFileName);
	class UwAlienCharParam* GetAlienCharParamByShopId(int ItemID);
	class UwAlienCharParam* GetAlienCharParam(EAlienMode_Object_Type eSkinType);
	float GetAlienGameAttackBuff(byte Level);
	int GetMaxSuperHeroCount(int iPlayerCount);
	int GetMaxHeroCount(int iPlayerCount);
	int GetMaxHostAlienCount(int iPlayerCount);
	int GetStartAlienHP(EAlienModeType eObjType, EAlienMode_Object_Type eSkinType, int iPlayerCount);
	void LoadAlienGameInfo(const string& strExcelFileName);
	void LoadAlienGameCharParams(const string& strExcelFileName);
	void LoadAlienGameRandomBoxParam(const string& strExcelFileName);
	bool LoadAlienGameParam(const string& strExcelFileName);
	void LoadDefenceLevelInfoParam(const string& strExcelFileName);
	void LoadDefenceRewardParam();
	void LoadDefenceShopParam();
	int GetDefenceGameRoundCount2(int Level, int MapID);
	void GetDefenceGameBotGradeList2(int Level, int MapID, int Round, int[]* GradeList);
	void GetDefenceGamePrams2(int Level, int MapID, int Round, int[]* DelayTime, int[]* RegenLoc, int[]* Grade, int[]* Unit);
	void LoadDefenceGameInfo(const string& strExcelFileName);
	void LoadClanMarkParameters();
	void GetLevelDefenceGameParam(int iLevel, class UwDefenceGameParam*[]* params);
	void SetLevelDefenceGameParam(int iLevel, class UwDefenceGameParam*[] params);
	void LoadNPCActionGroup(const string& strExcelFileName);
	void LoadNPCItemGroup(const string& strExcelFileName);
	void LoadNPCNameGroup(const string& strExcelFileName);
	void LoadNPC(const string& strExcelFileName);
	void LoadNPCSpawn(const string& strExcelFileName);
	class UMaterial* GetMaterial(const string& str);
	void LoadLevelTextures();
	void InitPrecacheItems();
	void InitHK(bool bIsClient);
	int GetWeaponPartsIDByCustomInfo(int iItemID);
	void LoadWeaponCustomPartsParameters(const string& strExcelFileName);
	void LoadWeaponCustomInfoParameters(const string& strExcelFileName);
	class UwWeaponCustomInfoParam* GetWeaponCustomInfoParam(int iInItemID);
	class UwWeaponCustomPartsParam* GetWeaponCustomPartsParamByUnionedPartID(int iInUnionedPartID);
	class UwWeaponCustomPartsParam* GetWeaponCustomPartsParamByItemID(int iInItemID);
	void InitScript(const string& strExcelFileName, class UwWeaponManager* weaponManager);
	int GetWeaponCustomPartsIndex(int iUnionedPartID);
	void SetWeaponCustomPartsIndex(int iUnionedPartID, int iArrayIndex);
	int GetWeaponCustomInfoIndex(int iItemIndex);
	void SetWeaponCustomInfoIndex(int iItemIndex, int iArrayIndex);
	int GetPartsGroupArrayIndex(int iPartsGroupIndex);
	void SetPartsGroupIndex(int iPartsGroupIndex, int iArrayIndex);
	int GetSkillArrayIndex(int iSkillIndex);
	void SetSkillIndex(int iSkillIndex, int iArrayIndex);
	int GetItemArrayIndex(int iItemIndex);
	void SetItemIndex(int iItemIndex, int iArrayIndex);
	struct FBtrDouble GetUniqueID(int nItemID);
	struct FBtrDouble GetDefaultMeleeWeaponUniqueID();
	struct FBtrDouble GetSubWeaponUniqueID();
	struct FBtrDouble GetMainWeaponUniqueID();
	int GetDefaultMeleeWeaponID();
	int GetSubWeaponID();
	int GetMainWeaponID();
	void ClearInstanceItem();
	int FindInstanceItemIDBySlotPos(int SlotPos);
	class UwItemBoxInstanceHK* FindInstanceItemBySlotPos(int SlotPos);
	int FindInstanceItemReturnIndexByUniqueSkillID(int UniqueSkillID);
	int FindInstanceItemReturnIndex(const struct FBtrDouble& UniqueID);
	bool RemoveInstanceItemByUniqueSkillID(int UniqueSkillID);
	bool RemoveInstanceItem(const struct FBtrDouble& UniqueID);
	class UwItemBoxInstanceHK* FindFirstInstanceItemByItemType(int ItemType);
	int FindInstanceSkillItemReturnIndex(int UniqueID);
	class UwItemBoxInstanceHK* FindFirstInstanceItemByItemID(int ItemID);
	class UwItemBoxInstanceHK* FindInstanceSkillItem(int UniqueID);
	class UwItemBoxInstanceHK* FindInstanceItemSameWeapon(int ItemID, int PartID);
	class UwItemBoxInstanceHK* FindInstanceItem(const struct FBtrDouble& UniqueID);
	void UnsetInstance_SkillSlotPos(int iQuickSlotIndex, int iSlotPos);
	bool SetInstance_SkillSlotPos(int iQuickSlotIndex, int SkillUniqueID, int iSlotPos);
	void AvoidDuplication_QSlotItemSlotPosByItemID(int iItemID, ESLOT_POS eSlotPos, int iSlotPos);
	void AvoidDuplication_QSlotItemSlotPos(int iItemID, const struct FBtrDouble& UniqueID, ESLOT_POS eSlotPos, int iSlotPos);
	void UnsetInstance_QSlotItemSlotPos(int iQuickSlotIndex, int iSlotPos);
	bool SetInstance_QSlotItemSlotPos(int iQuickSlotIndex, class UwItemBoxInstanceHK* instanceInfo, int iSlotPos);
	bool SetInstance_ItemSlotPos(const struct FBtrDouble& UniqueID, int SlotPos);
	bool ChangeInstance_ItemSlotPos(const struct FBtrDouble& UniqueID, int SlotPos);
	bool ChangeInstance_StackCount(const struct FBtrDouble& UniqueID, int StackCount);
	bool ChangeInstance_ItemReduceDurability(const struct FBtrDouble& UniqueID, int dur);
	bool ChangeInstance_ItemDamageDegree(const struct FBtrDouble& UniqueID, int dd);
	bool ChangeInstance_ItemDurability(const struct FBtrDouble& UniqueID, int dur);
	bool ChangeInstance_DefaultWeapon(int SlotPos);
	void ChangeInstance_ItemLeftTime(const struct FBtrDouble& CurrentTime);
	bool AddInstanceItem(class UwItemBoxInstanceHK* Item);
	bool AddCashItem(const string& strEndDate, class UwItemBoxHK** ItemInfo, class UwItemBoxInstanceHK** instanceInfo);
	bool AddInstanceItemByItemID(int ItemID, int PartID);
	class UwItemBoxInstanceHK* AddInstanceItemByParameter(int ItemID, const struct FBtrDouble& UniqueID, int UniqueSkillID, int SlotPos, int ItemState, int Durability, int PartID, int PaintID, int StackCount, int DamageDegree, const struct FBtrDouble& UntilTime, bool bStackAdd, int TradeCount);
	bool AddInstanceSkillItemFromSkillBoxList();
	bool IsShowInventory(int ItemID);
	bool IsShowStore(int ItemID);
	int FindUIItemReturnIndex(int ItemID);
	class UwItemBoxHK* FindUIItem(int ItemID);
	bool AddUIItem(class UwItemBoxHK* Item);
	bool CompareLE_UIShowItemLists(class UwItemBoxHK* L, class UwItemBoxHK* R);
	void FindQuickSlotBoxBySlotPosition(int iQuickSlotIndex, ESLOT_POS eSlotPos, int* iItemID, struct FBtrDouble* UniqueID);
	bool FindQuickSlotSkillByUniqueID(int dwUniqueID, int* iQuickSlotIndex, int* iSlotIndex);
	bool FindQuickSlotItemByUnqiueID(const struct FBtrDouble& dwUniqueID, int* iQuickSlotIndex, int* iSlotIndex);
	bool SetQuickSlotBox_Skill(int DispOrder, int SlotPos, int SkillID, int UniqueSkillID);
	bool SetQuickSlotBox_Item(int DispOrder, int SlotPos, int ItemID, const struct FBtrDouble& UniqueID);
	void RemoveQuickSlotItem(const struct FBtrDouble& UniqueID);
	bool SetQuickSlotBox_ID(int DispOrder, int QuickSlotID);
	bool SetQuickSlotBox_Name(int DispOrder, const string& QSName);
	void AllocateQuickSlotBoxList(int Len);
	void ClearQuickSlotBoxList();
	void ReplaceQuickSkillSlotItem(int SkillID, int UniqueSkillID);
	bool RemoveQuickSlotBoxSkillItem(int UniqueID);
	void GetQuickSlotIndexOfBoxSkillItem(int UniqueSkillID, int[]* QuickSlotIdx, int[]* SlotPosition);
	bool IsQuickSlotBoxSkillItem(int UniqueSkillID);
	void ReplaceQuickSlotBoxItem(const struct FBtrDouble& OldUniqueID, int ItemID, const struct FBtrDouble& NewUniqueID);
	int GetQuickSlotIndexOfBoxItem(const struct FBtrDouble& UniqueID);
	bool IsQuickSlotBoxItem(const struct FBtrDouble& UniqueID);
	bool RemoveQuickSlotBoxItem(const struct FBtrDouble& UniqueID);
	bool AddUISkillBox(byte SlotPos, int SkillID, int UniqueSkillID, const struct FBtrDouble& UntilTime);
	void SetSkillBox_SlotPos(int SkillUniqueID, int SlotPos);
	void ChangeSkillBox_SlotPos(int SkillUniqueID, int SlotPos);
	class UwSkillBoxHK* FindSkillBoxBySlotPos(int SlotPos);
	class UwSkillBoxHK* FindSkillBox(int UniqueSkillID);
	void ClearSkillBoxList();
	void LoadUILists(bool bIsClient);
	int IsEnableRemovePart(class UwItemBaseParam* Inip, EItemType InType);
	int IsUsablePartItem(int iItemID, int iPartsArrayIndex);
	int IsExistShopItemList(int iItemID);
	bool GetClanLevelMarkInfo(const string& ClanName, int* ClanPattern, int* ClanBG, int* ClanBL);
	struct FImage GetClanLevelImage(int Level);
	class UTexture* GetClanLevelTexture(int Level);
	string GetClanLevelName(int Level);
	int GetClanEndExp(int Level);
	int GetClanStartExp(int Level);
	class UTexture* GetLevelTexture(int Level, int LevelMarkID);
	void GetLevelImage(int Level, int LevelMarkID, struct FImage* LevelImage);
	string GetLevelName(int Level);
	int GetEndExp(int Level);
	int GetStartExp(int Level);
	void dele_UpdateEventTimer(int EventType, const struct FBtrDouble& EventTime);
	struct FBtrDouble NextEventTime(const struct FBtrDouble& t);
	void UpdateEventTimer(const struct FBtrDouble& st, int msec);
	void LogEventTimerList(int AddItemIndex);
	int GetEventTimerCount(int EventType);
	struct FBtrDouble GetLeftEventTime(int EventType);
	void RemoveEventTimer(int EventType);
	void AddEventTimerCount(int EventType);
	void AddEventTimer(int EventType, const struct FBtrDouble& EventTime, class UDelegateEventTimer* EventDelegate, int EventMSec);
	bool IsBlockedItemIdx(const struct FBtrDouble& D);
	void AddBlockedItem(const struct FBtrDouble& D);
	void ClearBlockedItem();
	void AddEventTimerHMS(int EventType, int Hour, int Min, int sec, class UDelegateEventTimer* EventDelegate, int msec);
	struct FBtrDouble GetClientTime(bool bUpdate);
	void UpdateClientTime();
	void SetServerTime(const struct FBtrDouble& S);
	void UpdateQuickSlotBoxList(class UwGameManager* GameMgr);
	void UpdateSkillBoxList(class UwGameManager* GameMgr);
	void UpdateWebzenItemList(class UwGameManager* GameMgr);
	void UpdateItemList(class UwGameManager* GameMgr);
	void UpdateWebzenShopItemList(class UwGameManager* GameMgr);
	void UpdateWebzenShopVerInfo(class UwGameManager* GameMgr);
	void UpdateServerTime(class UwGameManager* GameMgr);
	void DownloadWebzenShopItemList(int Year, int YearId, int salescode);
	int GetGP20ProductNo(int ProductCode, int ProductCost, byte SaleType);
	void SetGP20CashItemInfo(class UwItemBoxHK* ItemInfo, int cashType, class UwItemBoxCashHK** cashItemInfo);
	class UwGP20Product* GetGP20ProductFromCode(int ProductCode, int* iResult);
	struct FWebzenShopPackage GetWebzenShopPackage2(int ItemID, int* iResult);
	struct FWebzenShopProduct GetWebzenShopProduct(int ProductSeq, int PriceSeq);
	struct FWebzenShopPackage GetWebzenShopPackage(int ProductSeq, int PriceSeq);
};


// Class Engine.WebzenShopItemListDownloader
// 0x0004 (0x0030 - 0x002C)
class UWebzenShopItemListDownloader : public UObject
{
public:
	byte                                               Padding00[0x4];                                           // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WebzenShopItemListDownloader");
		return ptr;
	}

};


// Class Engine.wWeaponParams
// 0x001C (0x0048 - 0x002C)
class UwWeaponParams : public UObject
{
public:
	float                                              SprintSpeed;                                              // 0x002C(0x0004) (Edit)
	float                                              RunSpeed;                                                 // 0x0030(0x0004) (Edit)
	float                                              CrouchSpeed;                                              // 0x0034(0x0004) (Edit)
	float                                              PronedSpeed;                                              // 0x0038(0x0004) (Edit)
	float                                              AimRunSpeed;                                              // 0x003C(0x0004) (Edit)
	float                                              AimCrouchSpeed;                                           // 0x0040(0x0004) (Edit)
	float                                              fDamage;                                                  // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponParams");
		return ptr;
	}

};


// Class Engine.wCharacterManager
// 0x0020 (0x004C - 0x002C)
class UwCharacterManager : public UObject
{
public:
	int                                                iTest;                                                    // 0x002C(0x0004)
	class UwMyPlayerStatus*                            MyPlayer;                                                 // 0x0030(0x0004) (EditInline)
	struct FPlayerProperty[]                           BasePlayers;                                              // 0x0034(0x000C) (NeedCtorLink)
	struct FPlayerPartsInfo[]                          PartsInfoRecords;                                         // 0x0040(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wCharacterManager");
		return ptr;
	}


	void RemoveBasePlayers();
	void AddBasePlayers();
	void InitMyPlayer();
	void LoadCacheMoveParam();
	void LoadPartsData();
	struct FPlayerPartsInfo GetPartsById(int iID);
	struct FPlayerSet GetPlayerSetTest(const string& TestName);
	class UwMyPlayerStatus* GetMyStatus();
	void DestroyScript();
	void InitScript(const string& strExcelFileName);
	void STATIC_InitNative();
	void STATIC_Get(class AActor* P);
};


// Class Engine.wSkills
// 0x0000 (0x002C - 0x002C)
class UwSkills : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkills");
		return ptr;
	}

};


// Class Engine.wInventory
// 0x000C (0x0038 - 0x002C)
class UwInventory : public UObject
{
public:
	struct FWeaponPart[]                               Weapons;                                                  // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wInventory");
		return ptr;
	}

};


// Class Engine.wMyPlayerStatus
// 0x0280 (0x02AC - 0x002C)
class UwMyPlayerStatus : public UObject
{
public:
	struct FBtrDouble                                  CurrentTime;                                              // 0x002C(0x0008)
	int                                                UserID;                                                   // 0x0034(0x0004) (Edit, EditConst)
	string                                             NickName;                                                 // 0x0038(0x000C) (Edit, EditConst, NeedCtorLink)
	string                                             ClanName;                                                 // 0x0044(0x000C) (Edit, EditConst, NeedCtorLink)
	int                                                Level;                                                    // 0x0050(0x0004) (Edit, EditConst)
	int                                                nExp;                                                     // 0x0054(0x0004) (Edit, EditConst)
	int                                                Stamina;                                                  // 0x0058(0x0004) (Edit, EditConst)
	int                                                HP;                                                       // 0x005C(0x0004) (Edit, EditConst)
	int                                                Ranking;                                                  // 0x0060(0x0004) (Edit, EditConst)
	int                                                Kill;                                                     // 0x0064(0x0004) (Edit, EditConst)
	int                                                Death;                                                    // 0x0068(0x0004) (Edit, EditConst)
	int                                                Win;                                                      // 0x006C(0x0004) (Edit, EditConst)
	int                                                Lose;                                                     // 0x0070(0x0004) (Edit, EditConst)
	int                                                TeamKill;                                                 // 0x0074(0x0004) (Edit, EditConst)
	int                                                Assist;                                                   // 0x0078(0x0004) (Edit, EditConst)
	int                                                Point;                                                    // 0x007C(0x0004) (Edit, EditConst)
	int                                                Cash;                                                     // 0x0080(0x0004) (Edit, EditConst)
	int                                                HeadShot2;                                                // 0x0084(0x0004) (Edit, EditConst)
	int                                                DisCon;                                                   // 0x0088(0x0004) (Edit, EditConst)
	int                                                TotPlayTime;                                              // 0x008C(0x0004) (Edit, EditConst)
	int                                                DispHeadItem;                                             // 0x0090(0x0004) (Edit, EditConst)
	int                                                DispHeadAddItem;                                          // 0x0094(0x0004) (Edit, EditConst)
	int                                                DispFaceItem;                                             // 0x0098(0x0004) (Edit, EditConst)
	int                                                DispBodyItem;                                             // 0x009C(0x0004) (Edit, EditConst)
	int                                                DispUniformItem;                                          // 0x00A0(0x0004) (Edit, EditConst)
	int                                                DispBackpack;                                             // 0x00A4(0x0004) (Edit, EditConst)
	int                                                DispPouch;                                                // 0x00A8(0x0004) (Edit, EditConst)
	int                                                DispCamouflage;                                           // 0x00AC(0x0004) (Edit, EditConst)
	byte                                               Activated;                                                // 0x00B0(0x0001)
	byte                                               Padding00[0x3];                                           // 0x00B1(0x0003) MISSED OFFSET
	struct FsItem[]                                    ItemList;                                                 // 0x00B4(0x000C) (NeedCtorLink)
	struct FsSkill[]                                   SkillList;                                                // 0x00C0(0x000C) (NeedCtorLink)
	struct FsQuickSlot[]                               QuickSlotList;                                            // 0x00CC(0x000C) (NeedCtorLink)
	float                                              SprintSpeed;                                              // 0x00D8(0x0004) (Edit)
	float                                              RunSpeed;                                                 // 0x00DC(0x0004) (Edit)
	float                                              CrouchSpeed;                                              // 0x00E0(0x0004) (Edit)
	float                                              PronedSpeed;                                              // 0x00E4(0x0004) (Edit)
	float                                              AimRunSpeed;                                              // 0x00E8(0x0004) (Edit)
	float                                              AimCrouchSpeed;                                           // 0x00EC(0x0004) (Edit)
	float                                              F_DiagmoveRatio;                                          // 0x00F0(0x0004) (Edit)
	float                                              SideMoveRatio;                                            // 0x00F4(0x0004) (Edit)
	float                                              B_DiagmoveRatio;                                          // 0x00F8(0x0004) (Edit)
	float                                              BackMoveRatio;                                            // 0x00FC(0x0004) (Edit)
	float                                              AccelRate;                                                // 0x0100(0x0004) (Edit)
	float                                              JumpMaxAcc;                                               // 0x0104(0x0004) (Edit)
	float                                              JumpMinAcc;                                               // 0x0108(0x0004) (Edit)
	float                                              JumpReduceRate;                                           // 0x010C(0x0004) (Edit)
	float                                              JumpRecoverRate;                                          // 0x0110(0x0004) (Edit)
	float                                              Land_Dropspeed_Rate;                                      // 0x0114(0x0004) (Edit)
	float                                              ProneCam_MaxPicth;                                        // 0x0118(0x0004) (Edit)
	float                                              ProneCam_MaxYaw;                                          // 0x011C(0x0004) (Edit)
	float                                              ProneCam_RotSpeed;                                        // 0x0120(0x0004) (Edit)
	float                                              Stm_MaxTime;                                              // 0x0124(0x0004) (Edit)
	float                                              Stm_Delay_Stand;                                          // 0x0128(0x0004) (Edit)
	float                                              Stm_Delay_Crouch;                                         // 0x012C(0x0004) (Edit)
	float                                              Stm_Delay_Hit;                                            // 0x0130(0x0004) (Edit)
	struct FVector                                     FL_Rot;                                                   // 0x0134(0x000C) (Edit)
	struct FVector                                     FR_Rot;                                                   // 0x0140(0x000C) (Edit)
	struct FVector                                     BL_Rot;                                                   // 0x014C(0x000C) (Edit)
	struct FVector                                     BR_Rot;                                                   // 0x0158(0x000C) (Edit)
	struct FVector                                     CFL_Rot;                                                  // 0x0164(0x000C) (Edit)
	struct FVector                                     CFR_Rot;                                                  // 0x0170(0x000C) (Edit)
	struct FVector                                     CBL_Rot;                                                  // 0x017C(0x000C) (Edit)
	struct FVector                                     CBR_Rot;                                                  // 0x0188(0x000C) (Edit)
	float                                              BodyFL_Rot;                                               // 0x0194(0x0004) (Edit)
	float                                              BodyFR_Rot;                                               // 0x0198(0x0004) (Edit)
	float                                              BodyBL_Rot;                                               // 0x019C(0x0004) (Edit)
	float                                              BodyBR_Rot;                                               // 0x01A0(0x0004) (Edit)
	struct FRotator                                    Lean_L_Stand_0;                                           // 0x01A4(0x000C) (Edit)
	struct FRotator                                    Lean_L_Stand_1;                                           // 0x01B0(0x000C) (Edit)
	struct FRotator                                    Lean_L_Stand_2;                                           // 0x01BC(0x000C) (Edit)
	struct FRotator                                    Lean_R_Stand_0;                                           // 0x01C8(0x000C) (Edit)
	struct FRotator                                    Lean_R_Stand_1;                                           // 0x01D4(0x000C) (Edit)
	struct FRotator                                    Lean_R_Stand_2;                                           // 0x01E0(0x000C) (Edit)
	struct FRotator                                    Lean_L_Crouch_0;                                          // 0x01EC(0x000C) (Edit)
	struct FRotator                                    Lean_L_Crouch_1;                                          // 0x01F8(0x000C) (Edit)
	struct FRotator                                    Lean_L_Crouch_2;                                          // 0x0204(0x000C) (Edit)
	struct FRotator                                    Lean_R_Crouch_0;                                          // 0x0210(0x000C) (Edit)
	struct FRotator                                    Lean_R_Crouch_1;                                          // 0x021C(0x000C) (Edit)
	struct FRotator                                    Lean_R_Crouch_2;                                          // 0x0228(0x000C) (Edit)
	struct FRotator                                    Lean_L_Prone_0;                                           // 0x0234(0x000C) (Edit)
	struct FRotator                                    Lean_L_Prone_1;                                           // 0x0240(0x000C) (Edit)
	struct FRotator                                    Lean_L_Prone_2;                                           // 0x024C(0x000C) (Edit)
	struct FRotator                                    Lean_R_Prone_0;                                           // 0x0258(0x000C) (Edit)
	struct FRotator                                    Lean_R_Prone_1;                                           // 0x0264(0x000C) (Edit)
	struct FRotator                                    Lean_R_Prone_2;                                           // 0x0270(0x000C) (Edit)
	float                                              TweenRate_Proned_Run;                                     // 0x027C(0x0004) (Edit)
	float                                              TweenRate_Crouched_Run;                                   // 0x0280(0x0004) (Edit)
	float                                              TweenRate_Sprint;                                         // 0x0284(0x0004) (Edit)
	float                                              TweenRate_Run;                                            // 0x0288(0x0004) (Edit)
	float                                              TweenRate_Aim_Run;                                        // 0x028C(0x0004) (Edit)
	float                                              TweenRate_Idle;                                           // 0x0290(0x0004) (Edit)
	float                                              TweenRate_Proned_Idle;                                    // 0x0294(0x0004) (Edit)
	float                                              TweenRate_Crouched_Idle;                                  // 0x0298(0x0004) (Edit)
	float                                              TweenRate_SideStep;                                       // 0x029C(0x0004) (Edit)
	int                                                iCurWeaponId;                                             // 0x02A0(0x0004)
	int                                                iReceivedItemTotalCount;                                  // 0x02A4(0x0004)
	int                                                iReceivedSkillTotalCount;                                 // 0x02A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMyPlayerStatus");
		return ptr;
	}


	void ApplyQuickSlotData();
	void SetQSlotData(byte QSlotDispOrder, const struct FBtrDouble& MWItemID, const struct FBtrDouble& PistolItemID, const struct FBtrDouble& KnifeItemID, const struct FBtrDouble& TWItemID1, const struct FBtrDouble& TWItemID2, int Skill1, int Skill2, int Skill3, int Skill4);
	void SetQSlotList(int[] QSlotID, string[] QSlotName, byte[] QSlotDispOrder, struct FBtrDouble[] MWItemID, struct FBtrDouble[] PistolItemID, struct FBtrDouble[] KnifeItemID, struct FBtrDouble[] TWItemID1, struct FBtrDouble[] TWItemID2, int[] Skill1, int[] Skill2, int[] Skill3, int[] Skill4);
	void SetSkillListEnd();
	void SetSkillList(int[] UniqueSkillID, int[] SkillID, struct FBtrDouble[] UntilTime, byte[] SlotPosition);
	void SetSkillListStart(int Count);
	void SetItemListEnd();
	void SetItemList(struct FBtrDouble[] UniqueID, int[] ItemID, int[] ItemType, int[] Durability, struct FBtrDouble[] UntilTime, int[] SlotPosition, int[] AddPartsID, int[] DamageDegree, byte[] ItemState, int[] StackCount, int[] PaintID);
	void SetItemListStart(int Count);
	void RemoveQuickSlotSkillItem(int UniqueID);
	void RemoveQuickSlotItem(const struct FBtrDouble& UniqueID);
	void RemoveItem(const struct FBtrDouble& UniqueID);
	bool IsQuickSlotSkillItem(int UniqueID);
	bool IsQuickSlotItem(const struct FBtrDouble& UniqueID);
	int FindSkillItemIndexByUniqueID(int UniqueID);
	int FindItemIndexByUniqueID(const struct FBtrDouble& UniqueID);
	int FindItemIDBySlotPos(int SlotPos);
};


// Class Engine.wBtrIni
// 0x000C (0x0038 - 0x002C)
class UwBtrIni : public UObject
{
public:
	string                                             m_IniSection;                                             // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wBtrIni");
		return ptr;
	}


	void RegistMap();
	bool AddBoolToMap(const string& key, bool Value);
	bool AddFloatToMap(const string& key, float Value);
	bool AddIntToMap(const string& key, int Value);
	bool AddStringToMap(const string& key, const string& Value);
};


// Class Engine.StreamBase
// 0x0000 (0x002C - 0x002C)
class UStreamBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamBase");
		return ptr;
	}


	bool HandleDebugExec(const string& Command, const string& Param);
	bool STATIC_CompareNames(const string& NameA, const string& NameB);
	EFileType STATIC_ConvertToFileType(const string& Extension);
	string STATIC_ConvertToFileExtension(EFileType Type);
	string STATIC_FormatTimeDisplay(float Seconds);
	int STATIC_RevInStr(const string& Src, const string& Match);
	string[] STATIC_ParseDirectories(string* InPath);
	string STATIC_ParseExtension(string* FileNameWithExtension);
	bool STATIC_ParsePath(const string& InPath, struct FFilePath* ParsedPath);
	bool STATIC_HasExtension(const string& test);
	string STATIC_GetPathRoot(string* InPath);
	bool STATIC_IsCaseSensitive();
	string STATIC_GetPathSeparator();
	string STATIC_MultiplyEqual_StrStr(const string& B, string* A);
	string STATIC_Multiply_StrStr(const string& A, const string& B);
};


// Class Engine.StreamTag
// 0x013C (0x0168 - 0x002C)
class UStreamTag : public UStreamBase
{
public:
	struct FID3Field                                   TagID;                                                    // 0x002C(0x0024) (Edit, Const, EditConst, NeedCtorLink)
	struct FID3Field                                   TrackNumber;                                              // 0x0050(0x0024) (Edit, Const, EditConst, NeedCtorLink)
	struct FID3Field                                   Title;                                                    // 0x0074(0x0024) (Edit, Const, EditConst, NeedCtorLink)
	struct FID3Field                                   Artist;                                                   // 0x0098(0x0024) (Edit, Const, EditConst, NeedCtorLink)
	struct FID3Field                                   Album;                                                    // 0x00BC(0x0024) (Edit, Const, EditConst, NeedCtorLink)
	struct FID3Field                                   Year;                                                     // 0x00E0(0x0024) (Edit, Const, EditConst, NeedCtorLink)
	struct FID3Field                                   Genre;                                                    // 0x0104(0x0024) (Edit, Const, EditConst, NeedCtorLink)
	struct FID3Field                                   Duration;                                                 // 0x0128(0x0024) (Edit, EditConst, NeedCtorLink)
	struct FID3Field[]                                 Fields;                                                   // 0x014C(0x000C) (Edit, Const, EditFixedSize, EditConst, NeedCtorLink)
	struct FPointer                                    NativeID3Tag[0x2];                                        // 0x0158(0x0004) (Transient)
	struct FScriptDelegate                             __OnRefresh__Delegate;                                    // 0x0160(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamTag");
		return ptr;
	}


	void DumpTag();
	void DumpScriptTag();
	void OnRefresh();
};


// Class Engine.Stream
// 0x0058 (0x0084 - 0x002C)
class UStream : public UStreamBase
{
public:
	int                                                Handle;                                                   // 0x002C(0x0004) (Edit, EditConst)
	string                                             DefaultExtension;                                         // 0x0030(0x000C) (Edit, Const, EditConst, NeedCtorLink)
	class UStreamTag*                                  IDTag;                                                    // 0x003C(0x0004) (Edit, Const, EditConst, EditInline)
	struct FFilePath                                   PathName;                                                 // 0x0040(0x003C) (Edit, Const, EditConst, NeedCtorLink, EditInline)
	EFileType                                          Type;                                                     // 0x007C(0x0001) (Edit, Const, EditConst)
	byte                                               Padding00[0x3];                                           // 0x007D(0x0003) MISSED OFFSET
	bool                                               bReadOnly;                                                // 0x0080(0x0004) (Edit, Const, EditConst)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Stream");
		return ptr;
	}


	void DumpTags();
	void DumpScriptTag();
	bool SetHandle(int NewHandle);
	string GetSongTitle();
	string GetFullName();
	string GetPath();
	string GetExtension();
	string GetFileName();
	string GetDirectory();
	EFileType GetType();
	class UStreamTag* GetTag();
	int GetHandle();
	bool IsReadOnly();
	bool LoadID3Tag();
	bool SaveID3Tag();
};


// Class Engine.StreamInterface
// 0x000C (0x0038 - 0x002C)
class UStreamInterface : public UStreamBase
{
public:
	string                                             CurrentDirectory;                                         // 0x002C(0x000C) (Config, GlobalConfig, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamInterface");
		return ptr;
	}


	bool HandleDebugExec(const string& Command, const string& Param);
	void ChangeDirectory(const string& DirectoryName);
	string GetCurrentDirectory();
	bool LoadPlaylist(const string& fileName, bool bStrict, string[]* Lines);
	bool ValidFile(const string& fileName);
	class UStream* CreateStream(const string& fileName, bool bStrict);
	bool ValidDirectory(const string& DirectoryPath);
	bool RemoveDirectory(const string& DirectoryName);
	string CreateDirectory(const string& DirectoryName);
	bool GetDirectoryContents(const string& DirectoryName, EFileType FileType, string[]* contents);
	bool GetDriveLetters(string[]* Letters);
	string GetBaseDirectory();
};


// Class Engine.Interactions
// 0x0000 (0x002C - 0x002C)
class UInteractions : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interactions");
		return ptr;
	}


	bool STATIC_IsMouseKey(byte key);
	bool STATIC_IsKeyboardKey(byte key);
	string STATIC_GetFriendlyName(EInputKey iKey);
};


// Class Engine.Interaction
// 0x000C (0x0038 - 0x002C)
class UInteraction : public UInteractions
{
public:
	bool                                               bOldNativeEvents;                                         // 0x002C(0x0004)
	bool                                               bActive;                                                  // 0x002C(0x0004)
	bool                                               bVisible;                                                 // 0x002C(0x0004)
	bool                                               bRequiresTick;                                            // 0x002C(0x0004)
	bool                                               bNativeEvents;                                            // 0x002C(0x0004)
	bool                                               bDisabledInteraction;                                     // 0x002C(0x0004)
	bool                                               bOldActive;                                               // 0x002C(0x0004)
	bool                                               bOldVisible;                                              // 0x002C(0x0004)
	bool                                               bOldRequiresTick;                                         // 0x002C(0x0004)
	class UPlayer*                                     ViewportOwner;                                            // 0x0030(0x0004)
	class UInteractionMaster*                          Master;                                                   // 0x0034(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Interaction");
		return ptr;
	}


	bool OnIME_Notify(int Type, int LangID, const string& strText, int StartPos, int Size);
	void EnableInteraction();
	void DisableInteraction();
	void NotifyMusicChange();
	void StreamFinished(int Handle, EStreamFinishReason Reason);
	void Tick(float DeltaTime);
	void SetFocus();
	void PostRender(class UCanvas* Canvas);
	void PreRender(class UCanvas* Canvas);
	bool KeyEvent(float Delta, EInputKey* key, EInputAction* Action);
	bool KeyType(const string& Unicode, EInputKey* key);
	void Message(const string& Msg, float MsgLife);
	void NotifyLevelChange();
	void Initialized();
	struct FVector ScreenToWorld(const struct FVector& Location, const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	struct FVector WorldToScreen(const struct FVector& Location, const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	bool ConsoleCommand(const string& S);
	void Initialize();
};


// Class Engine.StreamInteraction
// 0x0058 (0x0090 - 0x0038)
class UStreamInteraction : public UInteraction
{
public:
	float                                              FadeInSeconds;                                            // 0x0038(0x0004) (Edit, Config)
	float                                              FadeOutSeconds;                                           // 0x003C(0x0004) (Edit, Config)
	string                                             PlaylistManagerType;                                      // 0x0040(0x000C) (Edit, Config, NeedCtorLink)
	class UStreamPlaylistManager*                      PlaylistManager;                                          // 0x004C(0x0004) (Edit, EditConst, NoExport, EditInline)
	class UStreamInterface*                            FileManager;                                              // 0x0050(0x0004) (Edit, EditConst, NoExport, EditInline)
	int                                                CurrentSongHandle;                                        // 0x0054(0x0004) (Edit, EditConst, NoExport)
	float                                              CurrentSongPosition;                                      // 0x0058(0x0004) (Edit, EditConst, NoExport)
	float                                              LastPlayTime;                                             // 0x005C(0x0004) (Edit, EditConst, NoExport)
	float                                              CurrentSongDuration;                                      // 0x0060(0x0004) (Edit, EditConst, NoExport)
	string                                             CurrentSong;                                              // 0x0064(0x000C) (Edit, EditConst, NeedCtorLink, NoExport)
	class UStream*                                     CurrentStreamAttachment;                                  // 0x0070(0x0004) (Edit, EditConst, NoExport)
	bool                                               bAutoStart;                                               // 0x0074(0x0004) (Edit, Config)
	bool                                               bDisplayTrackChanges;                                     // 0x0074(0x0004) (Edit, Config)
	bool                                               bRestartTrack;                                            // 0x0074(0x0004) (Edit, Transient, EditConst, NoExport)
	bool                                               bTrackWaiting;                                            // 0x0074(0x0004) (Edit, Transient, EditConst, NoExport)
	struct FScriptDelegate                             __OnStreamChanged__Delegate;                              // 0x0078(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __OnStreamingStopped__Delegate;                           // 0x0080(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __OnAdjustVolume__Delegate;                               // 0x0088(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamInteraction");
		return ptr;
	}


	void streamdebug(const string& Command, const string& Param);
	class APlayerController* PC();
	void KillMusic();
	void ClearSongInfo();
	bool HasPlayer();
	bool IsPlaying();
	float GetStreamDuration();
	float GetStreamVolume();
	float GetStreamPosition();
	void PlayStream(const string& fileName, int SeekSeconds);
	bool Seek(float SeekSeconds);
	void SeekStream(float Seconds);
	void SetMusicVolume(float NewVolume);
	void StopSong();
	void PlaySong(const string& SongName, float InitialTime);
	void PauseSong();
	void PrevSong(bool bForce);
	void NextSong(bool bForce);
	int CurrentHandle();
	string GetCurrentStream();
	void NotifyLevelChange();
	void StreamFinished(int Handle, EStreamFinishReason Reason);
	void SetStreamAttachment(class UStream* StreamObj);
	bool IsPaused(int SongHandle);
	void Tick(float DeltaTime);
	void QueueNextSong();
	class UStreamPlaylistManager* CreatePlaylistManager();
	class UStreamInterface* CreateFileManager();
	void Initialized();
	void OnAdjustVolume(float NewVolume);
	void OnStreamingStopped();
	void OnStreamChanged(const string& NewStreamFileName);
};


// Class Engine.Spline
// 0x0094 (0x00C0 - 0x002C)
class USpline : public UObject
{
public:
	struct FVector                                     SplineA;                                                  // 0x002C(0x000C)
	struct FVector                                     SplineB;                                                  // 0x0038(0x000C)
	struct FVector                                     SplineC;                                                  // 0x0044(0x000C)
	struct FVector                                     SplineD;                                                  // 0x0050(0x000C)
	struct FRotator                                    SplineE;                                                  // 0x005C(0x000C)
	struct FRotator                                    SplineF;                                                  // 0x0068(0x000C)
	struct FRotator                                    SplineG;                                                  // 0x0074(0x000C)
	struct FRotator                                    SplineH;                                                  // 0x0080(0x000C)
	float                                              mStartT;                                                  // 0x008C(0x0004)
	float                                              mEndT;                                                    // 0x0090(0x0004)
	bool                                               mbInit;                                                   // 0x0094(0x0004)
	float                                              mTime;                                                    // 0x0098(0x0004)
	float                                              maDeltaTimes[0x5];                                        // 0x009C(0x0004)
	int                                                mIndex;                                                   // 0x00B0(0x0004)
	float                                              mTotalTime;                                               // 0x00B4(0x0004)
	bool                                               mbRotatorSpline;                                          // 0x00B8(0x0004)
	int                                                mCnt;                                                     // 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Spline");
		return ptr;
	}


	bool NextSplineRot(float dt, bool bSmoothDt, bool bAccumDeltas, struct FRotator* D, struct FRotator* V, struct FRotator* A, float* outdt);
	bool NextSplinePos(float dt, bool bSmoothDt, bool bAccumDeltas, struct FVector* D, struct FVector* V, struct FVector* A, float* outdt);
	bool InitSplineRot(float t0, const struct FRotator& d0, const struct FRotator& v0, float t1, const struct FRotator& d1, const struct FRotator& v1);
	bool InitSplinePath(float t0, const struct FVector& d0, const struct FVector& v0, float t1, const struct FVector& d1, const struct FVector& v1);
};


// Class Engine.WebLog
// 0x0010 (0x003C - 0x002C)
class UWebLog : public UObject
{
public:
	byte                                               Padding00[0x10];                                          // 0x002C(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WebLog");
		return ptr;
	}

};


// Class Engine.wBTLoadingScreenDrawer
// 0x0394 (0x03C0 - 0x002C)
class UwBTLoadingScreenDrawer : public UObject
{
public:
	class UMaterial*                                   Mat_img_point_help;                                       // 0x002C(0x0004)
	class UMaterial*                                   Mat_gauge_loading;                                        // 0x0030(0x0004)
	class UMaterial*                                   Mat_gauge_loading_back;                                   // 0x0034(0x0004)
	class UMaterial*                                   Mat_img_load_pllist;                                      // 0x0038(0x0004)
	class UMaterial*                                   Mat_img_hud_text;                                         // 0x003C(0x0004)
	class UMaterial*                                   Mat_img_hud_text2;                                        // 0x0040(0x0004)
	class UMaterial*                                   Mat_img_help_all;                                         // 0x0044(0x0004)
	class UMaterial*                                   Mat_img_help_line;                                        // 0x0048(0x0004)
	class UMaterial*                                   Mat_img_RespawnLevelStar[0x5];                            // 0x004C(0x0004)
	class UMaterial*                                   LoadingBackGroundImage;                                   // 0x0060(0x0004)
	class UMaterial*                                   MiniMapInfoImage;                                         // 0x0064(0x0004)
	class UMaterial*                                   Mat_img_SupplyIcon[0x5];                                  // 0x0068(0x0004)
	int                                                TeamCountAF;                                              // 0x007C(0x0004)
	int                                                TeamCountRSA;                                             // 0x0080(0x0004)
	string                                             strSupplyIcon[0x5];                                       // 0x0084(0x000C) (Localized, NeedCtorLink)
	int                                                SupplyImgNum[0x3];                                        // 0x00C0(0x0004)
	struct FFloatBox                                   ModeHelp[0xB];                                            // 0x00CC(0x0010)
	string                                             strModeHelp1[0xB];                                        // 0x017C(0x000C) (Localized, NeedCtorLink)
	int                                                SelectHelp;                                               // 0x0200(0x0004)
	struct FFloatBox[]                                 ModeFB;                                                   // 0x0204(0x000C) (NeedCtorLink)
	struct FFloatBox[]                                 ModeFB2;                                                  // 0x0210(0x000C) (NeedCtorLink)
	string[]                                           ModeNames;                                                // 0x021C(0x000C) (NeedCtorLink)
	string[]                                           ModeDescriptions;                                         // 0x0228(0x000C) (NeedCtorLink)
	string                                             GameSubMode;                                              // 0x0234(0x000C) (NeedCtorLink)
	string                                             GameDifficulty;                                           // 0x0240(0x000C) (NeedCtorLink)
	string                                             GameRespawnType;                                          // 0x024C(0x000C) (NeedCtorLink)
	int                                                MapDifficulty;                                            // 0x0258(0x0004)
	int                                                MapID;                                                    // 0x025C(0x0004)
	class UwMatchMaker*                                MM;                                                       // 0x0260(0x0004)
	struct FOtherLoadingStateItem[]                    OtherLoadingState;                                        // 0x0264(0x000C) (NeedCtorLink)
	string                                             MyLoadingState;                                           // 0x0270(0x000C) (NeedCtorLink)
	float                                              iProgress;                                                // 0x027C(0x0004)
	float                                              iPrevProgress;                                            // 0x0280(0x0004)
	float                                              Alpha;                                                    // 0x0284(0x0004)
	bool                                               bRefreshRender;                                           // 0x0288(0x0004)
	bool                                               bFirstRender;                                             // 0x0288(0x0004)
	string                                             szTipText[0x5];                                           // 0x028C(0x000C) (Localized, NeedCtorLink)
	string                                             szMapInfo[0x5];                                           // 0x02C8(0x000C) (Localized, NeedCtorLink)
	int                                                iTipIndex;                                                // 0x0304(0x0004)
	int                                                iRespawnIndex;                                            // 0x0308(0x0004)
	string                                             szTipText_Defence[0x5];                                   // 0x030C(0x000C) (Localized, NeedCtorLink)
	string                                             CantUseSupplyLineText1;                                   // 0x0348(0x000C) (Localized, NeedCtorLink)
	string                                             CantUseSupplyLineText2;                                   // 0x0354(0x000C) (Localized, NeedCtorLink)
	struct FFloatBox                                   fbSupplyIcon[0x3];                                        // 0x0360(0x0010)
	struct FFloatBox                                   fbSupplyStr[0x3];                                         // 0x0390(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wBTLoadingScreenDrawer");
		return ptr;
	}


	void DrawLoadingScreen(class UCanvas* C);
	void ClearOtherLoadingState();
	void UpdateOtherLoadingState(const struct FLoadingMessageItem& Item, const string& strMsg);
	void UpdateMyLoadingState(const string& LoadingState);
	bool UpdateProgress(int CurrenetProgress);
	bool DestroyBackGroundImage();
	bool CreateBackGroundImage(class UwMatchMaker* MatchMaker);
	void Initialize();
	void RemoveFromRoot(class UMaterial* Image);
	void AddToRoot(class UMaterial* Image);
};


// Class Engine.DecoVolumeObject
// 0x0000 (0x03D8 - 0x03D8)
class ADecoVolumeObject : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecoVolumeObject");
		return ptr;
	}

};


// Class Engine.Keypoint
// 0x0000 (0x03D8 - 0x03D8)
class AKeypoint : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Keypoint");
		return ptr;
	}

};


// Class Engine.DecorationList
// 0x000C (0x03E4 - 0x03D8)
class ADecorationList : public AKeypoint
{
public:
	struct FDecorationType[]                           Decorations;                                              // 0x03D8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecorationList");
		return ptr;
	}

};


// Class Engine.Info
// 0x0054 (0x042C - 0x03D8)
class AInfo : public AActor
{
public:
	string                                             RulesGroup;                                               // 0x03D8(0x000C) (Const, Localized, NeedCtorLink)
	string                                             GameGroup;                                                // 0x03E4(0x000C) (Const, Localized, NeedCtorLink)
	string                                             ServerGroup;                                              // 0x03F0(0x000C) (Const, Localized, NeedCtorLink)
	string                                             ChatGroup;                                                // 0x03FC(0x000C) (Const, Localized, NeedCtorLink)
	string                                             BotsGroup;                                                // 0x0408(0x000C) (Const, Localized, NeedCtorLink)
	string                                             MapVoteGroup;                                             // 0x0414(0x000C) (Const, Localized, NeedCtorLink)
	string                                             KickVoteGroup;                                            // 0x0420(0x000C) (Const, Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Info");
		return ptr;
	}


	string STATIC_GetDescriptionText(const string& PropName);
	byte STATIC_GetSecurityLevel(const string& PropName);
	bool STATIC_AllowClassRemoval();
	bool STATIC_AcceptPlayInfoProperty(const string& PropertyName);
	void STATIC_FillPlayInfo(class UPlayInfo* PlayInfo);
};


// Class Engine.PlayerChatManager
// 0x0004 (0x0430 - 0x042C)
class APlayerChatManager : public AInfo
{
public:
	class APlayerController*                           PlayerOwner;                                              // 0x042C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerChatManager");
		return ptr;
	}


	void ChatDebug();
	int Count();
	byte GetPlayerRestriction(int PlayerID);
	bool ClientIsBanned(const string& PlayerHash);
	bool IsBanned(class APlayerReplicationInfo* PRI);
	bool ClearRestrictionID(int PlayerID, byte Type);
	bool ClearRestriction(const string& PlayerHash, byte Type);
	bool AddRestrictionID(int PlayerID, byte Type);
	bool AddRestriction(const string& PlayerHash, byte Type);
	bool SetRestrictionID(int PlayerID, byte Type);
	bool SetRestriction(const string& PlayerHash, byte Type);
	bool AcceptVoice(class APlayerReplicationInfo* Sender);
	bool AcceptSpeech(class APlayerReplicationInfo* Sender);
	bool AcceptLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj);
	bool AcceptText(class APlayerReplicationInfo* Sender, const FName& Type, string* Msg);
	void UnTrackPlayer(int PlayerID);
	void TrackNewPlayer(int PlayerID, const string& PlayerHash, const string& PlayerAddress);
	void ReceiveBanInfo(const string& S);
	void PostBeginPlay();
};


// Class Engine.VoiceChatRoom
// 0x0030 (0x045C - 0x042C)
class AVoiceChatRoom : public AInfo
{
public:
	class AGameReplicationInfo*                        GRI;                                                      // 0x042C(0x0004)
	class AVoiceChatReplicationInfo*                   VoiceChatManager;                                         // 0x0430(0x0004)
	class AVoiceChatRoom*                              Parent;                                                   // 0x0434(0x0004)
	class AVoiceChatRoom*[]                            Children;                                                 // 0x0438(0x000C) (NeedCtorLink)
	string                                             Password;                                                 // 0x0444(0x000C) (NeedCtorLink)
	int                                                ChannelIndex;                                             // 0x0450(0x0004)
	bool                                               bLocal;                                                   // 0x0454(0x0004)
	int                                                TeamIndex;                                                // 0x0458(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChatRoom");
		return ptr;
	}


	bool NotifyTeamChange(class APlayerReplicationInfo* PRI, int NewTeamIndex);
	bool RemoveChild(class AVoiceChatRoom* Child);
	bool AddChild(class AVoiceChatRoom* NewChild);
	void SetChannelPassword(const string& InPassword);
	void SetMemberMask(int NewMask);
	void SetTeam(int NewTeam);
	void RemoveMember(class APlayerReplicationInfo* PRI);
	void AddMember(class APlayerReplicationInfo* PRI);
	bool LeaveChannel(class APlayerReplicationInfo* LeavingPRI);
	EJoinChatResult JoinChannel(class APlayerReplicationInfo* NewPRI, const string& InPassword);
	bool IsMember(class APlayerReplicationInfo* PRI, bool bNoCascade);
	bool IsFull();
	bool CanJoinChannel(class APlayerReplicationInfo* PRI);
	bool IsPrivateChannel();
	bool IsTeamChannel();
	bool IsPublicChannel();
	int GetTeam();
	string GetTitle();
	bool ValidMask();
	string GetPassword();
	int GetMask();
	int GetMaxChatters();
	class APlayerReplicationInfo*[] GetMembers();
};


// Class Engine.ReplicationInfo
// 0x0000 (0x042C - 0x042C)
class AReplicationInfo : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReplicationInfo");
		return ptr;
	}

};


// Class Engine.VoiceChatReplicationInfo
// 0x00F8 (0x0524 - 0x042C)
class AVoiceChatReplicationInfo : public AReplicationInfo
{
public:
	int                                                PublicMask;                                               // 0x042C(0x0004) (Net)
	int                                                LocalMask;                                                // 0x0430(0x0004) (Net)
	class AVoiceChatRoom*[]                            Channels;                                                 // 0x0434(0x000C) (NeedCtorLink)
	string[]                                           PublicChannelNames;                                       // 0x0440(0x000C) (Localized, NeedCtorLink)
	string                                             VCDisplayText[0x6];                                       // 0x044C(0x000C) (Localized, NeedCtorLink)
	string                                             VCDescText[0x6];                                          // 0x0494(0x000C) (Localized, NeedCtorLink)
	class AGameReplicationInfo*                        GRI;                                                      // 0x04DC(0x0004)
	class UClass*                                      ChatRoomClass;                                            // 0x04E0(0x0004)
	struct FVoiceChatCodec[]                           InstalledCodec;                                           // 0x04E4(0x000C) (NeedCtorLink)
	string[]                                           VoIPInternetCodecs;                                       // 0x04F0(0x000C) (NeedCtorLink)
	string[]                                           VoIPLANCodecs;                                            // 0x04FC(0x000C) (NeedCtorLink)
	bool                                               bEnableVoiceChat;                                         // 0x0508(0x0004) (Net)
	bool                                               bAllowLocalBroadcast;                                     // 0x0508(0x0004)
	int                                                MaxChatters;                                              // 0x050C(0x0004)
	int                                                DefaultChannel;                                           // 0x0510(0x0004) (Net)
	float                                              LocalBroadcastRange;                                      // 0x0514(0x0004)
	float                                              DefaultBroadcastRadius;                                   // 0x0518(0x0004)
	float                                              BroadcastRadius;                                          // 0x051C(0x0004) (Net)
	bool                                               bPrivateChat;                                             // 0x0520(0x0004) (Net)
	bool                                               bRefresh;                                                 // 0x0520(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChatReplicationInfo");
		return ptr;
	}


	string GetTitle(class AVoiceChatRoom* Room);
	int GetMask(class AVoiceChatRoom* Room);
	void SetMask(class AVoiceChatRoom* Room, int NewMask);
	bool ValidRoom(class AVoiceChatRoom* Room);
	bool STATIC_GetCodecInfo(const string& Codec, string* CodecName, string* CodecDescription);
	void STATIC_GetInstalledCodecs(string[]* Codecs);
	string STATIC_GetDescriptionText(const string& PropName);
	void STATIC_FillPlayInfo(class UPlayInfo* PlayInfo);
	void CheckChannels();
	void DestroyVoiceChannel(class AVoiceChatRoom* Channel);
	class AVoiceChatRoom* CreateNewVoiceChannel(class APlayerReplicationInfo* PRI);
	bool IsMember(class APlayerReplicationInfo* TestPRI, int ChannelIndex, bool bNoCascade);
	int GetPlayerChannelCount();
	int GetPublicChannelCount(bool bSingleTeam);
	class AVoiceChatRoom*[] GetPlayerChannels();
	class AVoiceChatRoom*[] GetPublicChannels();
	class AVoiceChatRoom*[] GetChannels();
	string GetDefaultChannel();
	int[] GetMemberChannels(class APlayerReplicationInfo* PRI);
	int[] GetChannelMembersAt(int Index);
	int[] GetChannelMembers(const string& ChatRoomName, int TeamIndex);
	class AVoiceChatRoom* GetChannelAt(int Index);
	class AVoiceChatRoom* GetChannel(const string& ChatRoomName, int TeamIndex);
	int GetChannelIndex(const string& ChannelTitle, int TeamIndex);
	int GetChannelCount();
	void NotifyTeamChange(class APlayerReplicationInfo* PRI, int TeamIndex);
	bool RemoveVoiceChannel(class APlayerReplicationInfo* PRI);
	class AVoiceChatRoom* AddVoiceChannel(class APlayerReplicationInfo* PRI);
	bool LeaveChannel(const string& ChannelTitle, class APlayerReplicationInfo* PRI);
	EJoinChatResult JoinChannelAt(int ChannelIndex, class APlayerReplicationInfo* PRI, const string& Password);
	EJoinChatResult JoinChannel(const string& ChannelTitle, class APlayerReplicationInfo* PRI, const string& Password);
	bool CanJoinChannel(const string& ChannelTitle, class APlayerReplicationInfo* PRI);
	void RemoveVoiceChatter(class APlayerReplicationInfo* PRI);
	void AddVoiceChatter(class APlayerReplicationInfo* NewPRI);
	void InitChannels();
	void PostNetBeginPlay();
	void PostBeginPlay();
	void Timer();
};


// Class Engine.Primitive
// 0x002C (0x0058 - 0x002C)
class UPrimitive : public UObject
{
public:
	byte                                               Padding00[0x2C];                                          // 0x002C(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Primitive");
		return ptr;
	}

};


// Class Engine.MeshInstance
// 0x0000 (0x0058 - 0x0058)
class UMeshInstance : public UPrimitive
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshInstance");
		return ptr;
	}

};


// Class Engine.LodMeshInstance
// 0x0028 (0x0080 - 0x0058)
class ULodMeshInstance : public UMeshInstance
{
public:
	byte                                               Padding00[0x28];                                          // 0x0058(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LodMeshInstance");
		return ptr;
	}

};


// Class Engine.VertMeshInstance
// 0x00A4 (0x0124 - 0x0080)
class UVertMeshInstance : public ULodMeshInstance
{
public:
	byte                                               Padding00[0xA4];                                          // 0x0080(0x00A4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertMeshInstance");
		return ptr;
	}

};


// Class Engine.VertMeshActor
// 0x0000 (0x03D8 - 0x03D8)
class AVertMeshActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertMeshActor");
		return ptr;
	}


	void PostBeginPlay();
};


// Class Engine.Mesh
// 0x0004 (0x005C - 0x0058)
class UMesh : public UPrimitive
{
public:
	byte                                               Padding00[0x4];                                           // 0x0058(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Mesh");
		return ptr;
	}

};


// Class Engine.LodMesh
// 0x00E8 (0x0144 - 0x005C)
class ULodMesh : public UMesh
{
public:
	byte                                               Padding00[0xE8];                                          // 0x005C(0x00E8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LodMesh");
		return ptr;
	}

};


// Class Engine.VertMesh
// 0x012C (0x0270 - 0x0144)
class UVertMesh : public ULodMesh
{
public:
	byte                                               Padding00[0x12C];                                         // 0x0144(0x012C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertMesh");
		return ptr;
	}

};


// Class Engine.ParticleEmitter
// 0x0460 (0x048C - 0x002C)
class UParticleEmitter : public UObject
{
public:
	bool                                               AcceptsProjectors;                                        // 0x002C(0x0004) (Edit)
	bool                                               UseRevolutionScale;                                       // 0x002C(0x0004) (Edit)
	bool                                               SpinParticles;                                            // 0x002C(0x0004) (Edit)
	bool                                               DampRotation;                                             // 0x002C(0x0004) (Edit)
	bool                                               UseSizeScale;                                             // 0x002C(0x0004) (Edit)
	bool                                               UseAbsoluteTimeForSizeScale;                              // 0x002C(0x0004) (Edit)
	bool                                               UseRegularSizeScale;                                      // 0x002C(0x0004) (Edit)
	bool                                               UniformSize;                                              // 0x002C(0x0004) (Edit)
	bool                                               ResetAfterChange;                                         // 0x002C(0x0004) (Edit)
	bool                                               RespawnDeadParticles;                                     // 0x002C(0x0004) (Edit)
	bool                                               AutoDestroy;                                              // 0x002C(0x0004) (Edit)
	bool                                               AutoReset;                                                // 0x002C(0x0004) (Edit)
	bool                                               Disabled;                                                 // 0x002C(0x0004) (Edit)
	bool                                               Backup_Disabled;                                          // 0x002C(0x0004)
	bool                                               DisableFogging;                                           // 0x002C(0x0004) (Edit)
	bool                                               VelocityFromMesh;                                         // 0x002C(0x0004) (Edit)
	bool                                               UniformMeshScale;                                         // 0x002C(0x0004) (Edit)
	bool                                               UniformVelocityScale;                                     // 0x002C(0x0004) (Edit)
	bool                                               UseColorFromMesh;                                         // 0x002C(0x0004) (Edit)
	bool                                               SpawnOnlyInDirectionOfNormal;                             // 0x002C(0x0004) (Edit)
	bool                                               AlphaTest;                                                // 0x002C(0x0004) (Edit)
	bool                                               ZTest;                                                    // 0x002C(0x0004) (Edit)
	bool                                               ZWrite;                                                   // 0x002C(0x0004) (Edit)
	bool                                               UseRevolution;                                            // 0x002C(0x0004) (Edit)
	bool                                               UseCollision;                                             // 0x002C(0x0004) (Edit)
	bool                                               UseCollisionPlanes;                                       // 0x002C(0x0004) (Edit)
	bool                                               UseMaxCollisions;                                         // 0x002C(0x0004) (Edit)
	bool                                               UseSpawnedVelocityScale;                                  // 0x002C(0x0004) (Edit)
	bool                                               UseColorScale;                                            // 0x002C(0x0004) (Edit)
	bool                                               FadeOut;                                                  // 0x002C(0x0004) (Edit)
	bool                                               FadeIn;                                                   // 0x002C(0x0004) (Edit)
	bool                                               UseActorForces;                                           // 0x002C(0x0004) (Edit)
	bool                                               Padding00 : 24;                                           // 0x0030(0x0001)
	bool                                               UseVelocityScale;                                         // 0x0030(0x0004) (Edit)
	bool                                               AddVelocityFromOwner;                                     // 0x0030(0x0004) (Edit)
	bool                                               TriggerDisabled;                                          // 0x0030(0x0004) (Edit)
	bool                                               ResetOnTrigger;                                           // 0x0030(0x0004) (Edit)
	bool                                               DetermineVelocityByLocationDifference;                    // 0x0030(0x0004) (Edit)
	bool                                               ScaleSizeXByVelocity;                                     // 0x0030(0x0004) (Edit)
	bool                                               ScaleSizeYByVelocity;                                     // 0x0030(0x0004) (Edit)
	bool                                               ScaleSizeZByVelocity;                                     // 0x0030(0x0004) (Edit)
	bool                                               AutomaticInitialSpawning;                                 // 0x0030(0x0004) (Edit)
	bool                                               BlendBetweenSubdivisions;                                 // 0x0030(0x0004) (Edit)
	bool                                               UseSubdivisionScale;                                      // 0x0030(0x0004) (Edit)
	bool                                               UseRandomSubdivision;                                     // 0x0030(0x0004) (Edit)
	float                                              LowDetailFactor;                                          // 0x0034(0x0004) (Edit)
	struct FVector                                     Acceleration;                                             // 0x0038(0x000C) (Edit)
	struct FVector                                     ExtentMultiplier;                                         // 0x0044(0x000C) (Edit)
	struct FRangeVector                                DampingFactorRange;                                       // 0x0050(0x0018) (Edit)
	struct FPlane[]                                    CollisionPlanes;                                          // 0x0068(0x000C) (Edit, NeedCtorLink)
	struct FRange                                      MaxCollisions;                                            // 0x0074(0x0008) (Edit)
	int                                                SpawnFromOtherEmitter;                                    // 0x007C(0x0004) (Edit)
	int                                                SpawnAmount;                                              // 0x0080(0x0004) (Edit)
	struct FRangeVector                                SpawnedVelocityScaleRange;                                // 0x0084(0x0018) (Edit)
	struct FParticleColorScale[]                       ColorScale;                                               // 0x009C(0x000C) (Edit, NeedCtorLink)
	float                                              ColorScaleRepeats;                                        // 0x00A8(0x0004) (Edit)
	struct FRangeVector                                ColorMultiplierRange;                                     // 0x00AC(0x0018) (Edit)
	float                                              Opacity;                                                  // 0x00C4(0x0004) (Edit)
	struct FPlane                                      FadeOutFactor;                                            // 0x00C8(0x0010) (Edit)
	float                                              FadeOutStartTime;                                         // 0x00D8(0x0004) (Edit)
	struct FPlane                                      FadeInFactor;                                             // 0x00DC(0x0010) (Edit)
	float                                              FadeInEndTime;                                            // 0x00EC(0x0004) (Edit)
	EParticleCoordinateSystem                          CoordinateSystem;                                         // 0x00F0(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x00F1(0x0003) MISSED OFFSET
	int                                                MaxParticles;                                             // 0x00F4(0x0004) (Edit, Const)
	EParticleEffectAxis                                EffectAxis;                                               // 0x00F8(0x0001) (Edit)
	byte                                               Padding02[0x3];                                           // 0x00F9(0x0003) MISSED OFFSET
	struct FRange                                      AutoResetTimeRange;                                       // 0x00FC(0x0008) (Edit)
	string                                             Name;                                                     // 0x0104(0x000C) (Edit, NeedCtorLink)
	EDetailMode                                        DetailMode;                                               // 0x0110(0x0001) (Edit)
	byte                                               Padding03[0x3];                                           // 0x0111(0x0003) MISSED OFFSET
	struct FVector                                     StartLocationOffset;                                      // 0x0114(0x000C) (Edit)
	struct FRangeVector                                StartLocationRange;                                       // 0x0120(0x0018) (Edit)
	int                                                AddLocationFromOtherEmitter;                              // 0x0138(0x0004) (Edit)
	EParticleStartLocationShape                        StartLocationShape;                                       // 0x013C(0x0001) (Edit)
	byte                                               Padding04[0x3];                                           // 0x013D(0x0003) MISSED OFFSET
	struct FRange                                      SphereRadiusRange;                                        // 0x0140(0x0008) (Edit)
	struct FRangeVector                                StartLocationPolarRange;                                  // 0x0148(0x0018) (Edit)
	struct FRange                                      StartMassRange;                                           // 0x0160(0x0008) (Edit)
	class UStaticMesh*                                 MeshSpawningStaticMesh;                                   // 0x0168(0x0004) (Edit)
	EParticleMeshSpawning                              MeshSpawning;                                             // 0x016C(0x0001) (Edit)
	byte                                               Padding05[0x3];                                           // 0x016D(0x0003) MISSED OFFSET
	struct FRangeVector                                VelocityScaleRange;                                       // 0x0170(0x0018) (Edit)
	struct FRangeVector                                MeshScaleRange;                                           // 0x0188(0x0018) (Edit)
	struct FVector                                     MeshNormal;                                               // 0x01A0(0x000C) (Edit)
	struct FRange                                      MeshNormalThresholdRange;                                 // 0x01AC(0x0008) (Edit)
	int                                                AlphaRef;                                                 // 0x01B4(0x0004) (Edit)
	struct FRangeVector                                RevolutionCenterOffsetRange;                              // 0x01B8(0x0018) (Edit)
	struct FRangeVector                                RevolutionsPerSecondRange;                                // 0x01D0(0x0018) (Edit)
	struct FParticleRevolutionScale[]                  RevolutionScale;                                          // 0x01E8(0x000C) (Edit, NeedCtorLink)
	float                                              RevolutionScaleRepeats;                                   // 0x01F4(0x0004) (Edit)
	EParticleRotationSource                            UseRotationFrom;                                          // 0x01F8(0x0001) (Edit)
	byte                                               Padding06[0x3];                                           // 0x01F9(0x0003) MISSED OFFSET
	struct FRotator                                    RotationOffset;                                           // 0x01FC(0x000C) (Edit)
	struct FVector                                     SpinCCWorCW;                                              // 0x0208(0x000C) (Edit)
	struct FRangeVector                                SpinsPerSecondRange;                                      // 0x0214(0x0018) (Edit)
	struct FRangeVector                                StartSpinRange;                                           // 0x022C(0x0018) (Edit)
	struct FRangeVector                                RotationDampingFactorRange;                               // 0x0244(0x0018) (Edit)
	struct FVector                                     RotationNormal;                                           // 0x025C(0x000C) (Edit)
	struct FParticleTimeScale[]                        SizeScale;                                                // 0x0268(0x000C) (Edit, NeedCtorLink)
	float                                              SizeScaleRepeats;                                         // 0x0274(0x0004) (Edit)
	struct FRangeVector                                StartSizeRange;                                           // 0x0278(0x0018) (Edit)
	struct FVector                                     ScaleSizeByVelocityMultiplier;                            // 0x0290(0x000C) (Edit)
	float                                              ScaleSizeByVelocityMax;                                   // 0x029C(0x0004) (Edit)
	ESkelLocationUpdate                                UseSkeletalLocationAs;                                    // 0x02A0(0x0001) (Edit)
	byte                                               Padding07[0x3];                                           // 0x02A1(0x0003) MISSED OFFSET
	class AActor*                                      SkeletalMeshActor;                                        // 0x02A4(0x0004) (Edit)
	struct FVector                                     SkeletalScale;                                            // 0x02A8(0x000C) (Edit)
	struct FRange                                      RelativeBoneIndexRange;                                   // 0x02B4(0x0008) (Edit)
	struct FParticleSound[]                            Sounds;                                                   // 0x02BC(0x000C) (Edit, NeedCtorLink)
	EParticleCollisionSound                            SpawningSound;                                            // 0x02C8(0x0001) (Edit)
	byte                                               Padding08[0x3];                                           // 0x02C9(0x0003) MISSED OFFSET
	struct FRange                                      SpawningSoundIndex;                                       // 0x02CC(0x0008) (Edit)
	struct FRange                                      SpawningSoundProbability;                                 // 0x02D4(0x0008) (Edit)
	EParticleCollisionSound                            CollisionSound;                                           // 0x02DC(0x0001) (Edit)
	byte                                               Padding09[0x3];                                           // 0x02DD(0x0003) MISSED OFFSET
	struct FRange                                      CollisionSoundIndex;                                      // 0x02E0(0x0008) (Edit)
	struct FRange                                      CollisionSoundProbability;                                // 0x02E8(0x0008) (Edit)
	float                                              ParticlesPerSecond;                                       // 0x02F0(0x0004) (Edit)
	float                                              InitialParticlesPerSecond;                                // 0x02F4(0x0004) (Edit)
	EParticleDrawStyle                                 DrawStyle;                                                // 0x02F8(0x0001) (Edit)
	byte                                               Padding10[0x3];                                           // 0x02F9(0x0003) MISSED OFFSET
	class UTexture*                                    Texture;                                                  // 0x02FC(0x0004) (Edit)
	int                                                TextureUSubdivisions;                                     // 0x0300(0x0004) (Edit)
	int                                                TextureVSubdivisions;                                     // 0x0304(0x0004) (Edit)
	float[]                                            SubdivisionScale;                                         // 0x0308(0x000C) (Edit, NeedCtorLink)
	int                                                SubdivisionStart;                                         // 0x0314(0x0004) (Edit)
	int                                                SubdivisionEnd;                                           // 0x0318(0x0004) (Edit)
	float                                              SecondsBeforeInactive;                                    // 0x031C(0x0004) (Edit)
	float                                              MinSquaredVelocity;                                       // 0x0320(0x0004) (Edit)
	struct FRange                                      InitialTimeRange;                                         // 0x0324(0x0008) (Edit)
	struct FRange                                      LifetimeRange;                                            // 0x032C(0x0008) (Edit)
	struct FRange                                      InitialDelayRange;                                        // 0x0334(0x0008) (Edit)
	struct FRange                                      SpawnOnTriggerRange;                                      // 0x033C(0x0008) (Edit)
	float                                              SpawnOnTriggerPPS;                                        // 0x0344(0x0004) (Edit)
	struct FRangeVector                                StartVelocityRange;                                       // 0x0348(0x0018) (Edit)
	struct FRange                                      StartVelocityRadialRange;                                 // 0x0360(0x0008) (Edit)
	struct FVector                                     MaxAbsVelocity;                                           // 0x0368(0x000C) (Edit)
	struct FRangeVector                                VelocityLossRange;                                        // 0x0374(0x0018) (Edit)
	bool                                               RotateVelocityLossRange;                                  // 0x038C(0x0004) (Edit)
	int                                                AddVelocityFromOtherEmitter;                              // 0x0390(0x0004) (Edit)
	struct FRangeVector                                AddVelocityMultiplierRange;                               // 0x0394(0x0018) (Edit)
	EParticleVelocityDirection                         GetVelocityDirectionFrom;                                 // 0x03AC(0x0001) (Edit)
	byte                                               Padding11[0x3];                                           // 0x03AD(0x0003) MISSED OFFSET
	struct FParticleVelocityScale[]                    VelocityScale;                                            // 0x03B0(0x000C) (Edit, NeedCtorLink)
	float                                              VelocityScaleRepeats;                                     // 0x03BC(0x0004) (Edit)
	float                                              WarmupTicksPerSecond;                                     // 0x03C0(0x0004) (Edit)
	float                                              RelativeWarmupTime;                                       // 0x03C4(0x0004) (Edit)
	float                                              CullDistance;                                             // 0x03C8(0x0004) (Edit)
	bool                                               DisableIfCulled;                                          // 0x03CC(0x0004) (Edit)
	bool                                               ForceCullDistanceOnUseCollision;                          // 0x03CC(0x0004) (Edit)
	class AEmitter*                                    Owner;                                                    // 0x03D0(0x0004) (Transient)
	bool                                               Initialized;                                              // 0x03D4(0x0004) (Transient)
	bool                                               Inactive;                                                 // 0x03D4(0x0004) (Transient)
	bool                                               RealDisableFogging;                                       // 0x03D4(0x0004) (Transient)
	bool                                               AllParticlesDead;                                         // 0x03D4(0x0004) (Transient)
	bool                                               WarmedUp;                                                 // 0x03D4(0x0004) (Transient)
	float                                              InactiveTime;                                             // 0x03D8(0x0004) (Transient)
	struct FParticle[]                                 Particles;                                                // 0x03DC(0x000C) (Transient, NeedCtorLink)
	int                                                ParticleIndex;                                            // 0x03E8(0x0004) (Transient)
	int                                                ActiveParticles;                                          // 0x03EC(0x0004) (Transient)
	float                                              PPSFraction;                                              // 0x03F0(0x0004) (Transient)
	struct FBox                                        BoundingBox;                                              // 0x03F4(0x001C) (Transient)
	struct FVector                                     RealExtentMultiplier;                                     // 0x0410(0x000C) (Transient)
	int                                                OtherIndex;                                               // 0x041C(0x0004) (Transient)
	float                                              InitialDelay;                                             // 0x0420(0x0004) (Transient)
	struct FVector                                     GlobalOffset;                                             // 0x0424(0x000C) (Transient)
	float                                              TimeTillReset;                                            // 0x0430(0x0004) (Transient)
	int                                                PS2Data;                                                  // 0x0434(0x0004) (Transient)
	int                                                MaxActiveParticles;                                       // 0x0438(0x0004) (Transient)
	int                                                CurrentCollisionSoundIndex;                               // 0x043C(0x0004) (Transient)
	int                                                CurrentSpawningSoundIndex;                                // 0x0440(0x0004) (Transient)
	int                                                CurrentMeshSpawningIndex;                                 // 0x0444(0x0004) (Transient)
	float                                              MaxSizeScale;                                             // 0x0448(0x0004) (Transient)
	int                                                KillPending;                                              // 0x044C(0x0004) (Transient)
	int                                                DeferredParticles;                                        // 0x0450(0x0004) (Transient)
	struct FVector                                     RealMeshNormal;                                           // 0x0454(0x000C) (Transient)
	struct FVector[]                                   MeshVertsAndNormals;                                      // 0x0460(0x000C) (Transient, NeedCtorLink)
	int                                                CurrentSpawnOnTrigger;                                    // 0x046C(0x0004) (Transient)
	int                                                RenderableParticles;                                      // 0x0470(0x0004) (Transient)
	struct FRangeVector                                RealVelocityLossRange;                                    // 0x0474(0x0018) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleEmitter");
		return ptr;
	}


	void Reset();
	void Trigger();
	void SpawnParticle(int Amount);
};


// Class Engine.TrailEmitter
// 0x0044 (0x04D0 - 0x048C)
class UTrailEmitter : public UParticleEmitter
{
public:
	ETrailShadeType                                    TrailShadeType;                                           // 0x048C(0x0001) (Edit)
	ETrailLocation                                     TrailLocation;                                            // 0x048D(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x048E(0x0002) MISSED OFFSET
	int                                                MaxPointsPerTrail;                                        // 0x0490(0x0004) (Edit)
	float                                              DistanceThreshold;                                        // 0x0494(0x0004) (Edit)
	bool                                               UseCrossedSheets;                                         // 0x0498(0x0004) (Edit)
	int                                                MaxTrailTwistAngle;                                       // 0x049C(0x0004) (Edit)
	float                                              PointLifeTime;                                            // 0x04A0(0x0004) (Edit)
	struct FParticleTrailData[]                        TrailData;                                                // 0x04A4(0x000C) (Transient, NeedCtorLink)
	struct FParticleTrailInfo[]                        TrailInfo;                                                // 0x04B0(0x000C) (Transient, NeedCtorLink)
	class UVertexBuffer*                               VertexBuffer;                                             // 0x04BC(0x0004) (Transient)
	class UIndexBuffer*                                IndexBuffer;                                              // 0x04C0(0x0004) (Transient)
	int                                                VerticesPerParticle;                                      // 0x04C4(0x0004) (Transient)
	int                                                IndicesPerParticle;                                       // 0x04C8(0x0004) (Transient)
	int                                                PrimitivesPerParticle;                                    // 0x04CC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TrailEmitter");
		return ptr;
	}


	void ResetTrail();
};


// Class Engine.Material
// 0x0014 (0x0040 - 0x002C)
class UMaterial : public UObject
{
public:
	class UMaterial*                                   FallbackMaterial;                                         // 0x002C(0x0004) (Edit)
	class UMaterial*                                   DefaultMaterial;                                          // 0x0030(0x0004)
	bool                                               UseFallback;                                              // 0x0034(0x0004) (Const, Transient)
	bool                                               Validated;                                                // 0x0034(0x0004) (Const, Transient)
	EMaterial_ESurfaceTypes                            SurfaceType;                                              // 0x0038(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0039(0x0003) MISSED OFFSET
	int                                                MaterialType;                                             // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Material");
		return ptr;
	}


	int MaterialVSize();
	int MaterialUSize();
	void Trigger(class AActor* Other, class AActor* EventInstigator);
	void Reset();
};


// Class Engine.RenderedMaterial
// 0x0004 (0x0044 - 0x0040)
class URenderedMaterial : public UMaterial
{
public:
	int                                                renderedmaterial_dummy;                                   // 0x0040(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RenderedMaterial");
		return ptr;
	}

};


// Class Engine.BitmapMaterial
// 0x0018 (0x005C - 0x0044)
class UBitmapMaterial : public URenderedMaterial
{
public:
	ETextureFormat                                     Format;                                                   // 0x0044(0x0001) (Edit, Const, EditConst)
	ETexClampMode                                      UClampMode;                                               // 0x0045(0x0001) (Edit)
	ETexClampMode                                      VClampMode;                                               // 0x0046(0x0001) (Edit)
	byte                                               UBits;                                                    // 0x0047(0x0001) (Const)
	byte                                               VBits;                                                    // 0x0048(0x0001) (Const)
	byte                                               Padding00[0x3];                                           // 0x0049(0x0003) MISSED OFFSET
	int                                                USize;                                                    // 0x004C(0x0004) (Const)
	int                                                VSize;                                                    // 0x0050(0x0004) (Const)
	int                                                UClamp;                                                   // 0x0054(0x0004) (Edit, Const)
	int                                                VClamp;                                                   // 0x0058(0x0004) (Edit, Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BitmapMaterial");
		return ptr;
	}

};


// Class Engine.Texture
// 0x0090 (0x00EC - 0x005C)
class UTexture : public UBitmapMaterial
{
public:
	class UPalette*                                    Palette;                                                  // 0x005C(0x0004) (Edit)
	class UMaterial*                                   Detail;                                                   // 0x0060(0x0004) (Edit)
	float                                              DetailScale;                                              // 0x0064(0x0004) (Edit)
	struct FColor                                      MipZero;                                                  // 0x0068(0x0004) (Const)
	struct FColor                                      MaxColor;                                                 // 0x006C(0x0004) (Const)
	int                                                InternalTime[0x2];                                        // 0x0070(0x0004) (Const)
	class UTexture*                                    DetailTexture;                                            // 0x0078(0x0004) (Deprecated)
	class UTexture*                                    EnvironmentMap;                                           // 0x007C(0x0004) (Deprecated)
	EEnvMapTransformType                               EnvMapTransformType;                                      // 0x0080(0x0001) (Deprecated)
	byte                                               Padding00[0x3];                                           // 0x0081(0x0003) MISSED OFFSET
	float                                              Specular;                                                 // 0x0084(0x0004) (Deprecated)
	bool                                               bHasComp;                                                 // 0x0088(0x0004) (Const, EditConst)
	bool                                               bMasked;                                                  // 0x0088(0x0004) (Edit)
	bool                                               bAlphaTexture;                                            // 0x0088(0x0004) (Edit)
	bool                                               bTwoSided;                                                // 0x0088(0x0004) (Edit)
	bool                                               bHighColorQuality;                                        // 0x0088(0x0004) (Edit)
	bool                                               bHighTextureQuality;                                      // 0x0088(0x0004) (Edit)
	bool                                               bRealtime;                                                // 0x0088(0x0004)
	bool                                               bParametric;                                              // 0x0088(0x0004)
	bool                                               bRealtimeChanged;                                         // 0x0088(0x0004) (Transient)
	ELODSet                                            LODSet;                                                   // 0x008C(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x008D(0x0003) MISSED OFFSET
	int                                                NormalLOD;                                                // 0x0090(0x0004) (Edit)
	int                                                MinLOD;                                                   // 0x0094(0x0004)
	int                                                MaxLOD;                                                   // 0x0098(0x0004) (Transient)
	class UTexture*                                    AnimNext;                                                 // 0x009C(0x0004) (Edit)
	class UTexture*                                    AnimCurrent;                                              // 0x00A0(0x0004) (Transient)
	byte                                               PrimeCount;                                               // 0x00A4(0x0001) (Edit)
	byte                                               PrimeCurrent;                                             // 0x00A5(0x0001) (Transient)
	byte                                               Padding02[0x2];                                           // 0x00A6(0x0002) MISSED OFFSET
	float                                              MinFrameRate;                                             // 0x00A8(0x0004) (Edit)
	float                                              MaxFrameRate;                                             // 0x00AC(0x0004) (Edit)
	float                                              Accumulator;                                              // 0x00B0(0x0004) (Transient)
	int[]                                              Mips;                                                     // 0x00B4(0x000C) (Const, Native)
	ETextureFormat                                     CompFormat;                                               // 0x00C0(0x0001) (Const, EditConst)
	byte                                               PS2FirstMip;                                              // 0x00C1(0x0001)
	byte                                               PS2NumMips;                                               // 0x00C2(0x0001)
	byte                                               Padding03[0x1];                                           // 0x00C3(0x0001) MISSED OFFSET
	int                                                ResidentMips;                                             // 0x00C4(0x0004) (Const)
	int                                                RequestedMips;                                            // 0x00C8(0x0004) (Const)
	int                                                StreamingIndex;                                           // 0x00CC(0x0004) (Const)
	float                                              Priority;                                                 // 0x00D0(0x0004) (Const)
	int                                                LastRenderTime[0x2];                                      // 0x00D4(0x0004) (Const)
	bool                                               bIsStreamable;                                            // 0x00DC(0x0004) (Const)
	struct FPointer                                    RenderInterface;                                          // 0x00E0(0x0004) (Const, Transient)
	int                                                __LastUpdateTime[0x2];                                    // 0x00E4(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Texture");
		return ptr;
	}

};


// Class Engine.Cubemap
// 0x001C (0x0108 - 0x00EC)
class UCubemap : public UTexture
{
public:
	class UTexture*                                    Faces[0x6];                                               // 0x00EC(0x0004) (Edit)
	struct FPointer                                    CubemapRenderInterface;                                   // 0x0104(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Cubemap");
		return ptr;
	}

};


// Class Engine.Palette
// 0x000C (0x0038 - 0x002C)
class UPalette : public UObject
{
public:
	struct FColor[]                                    Colors;                                                   // 0x002C(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Palette");
		return ptr;
	}

};


// Class Engine.TerrainMaterial
// 0x0014 (0x0058 - 0x0044)
class UTerrainMaterial : public URenderedMaterial
{
public:
	struct FTerrainMaterialLayer[]                     Layers;                                                   // 0x0044(0x000C) (Const, NeedCtorLink)
	byte                                               RenderMethod;                                             // 0x0050(0x0001) (Const)
	byte                                               Padding00[0x3];                                           // 0x0051(0x0003) MISSED OFFSET
	bool                                               FirstPass;                                                // 0x0054(0x0004) (Const)
	bool                                               UseDirectionalColors;                                     // 0x0054(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainMaterial");
		return ptr;
	}

};


// Class Engine.TerrainInfo
// 0x1080 (0x14AC - 0x042C)
class ATerrainInfo : public AInfo
{
public:
	int                                                TerrainSectorSize;                                        // 0x042C(0x0004) (Edit)
	class UTexture*                                    TerrainMap;                                               // 0x0430(0x0004) (Edit)
	class UTexture*                                    VertexLightMap;                                           // 0x0434(0x0004) (Edit)
	struct FVector                                     TerrainScale;                                             // 0x0438(0x000C) (Edit)
	struct FTerrainLayer                               Layers[0x20];                                             // 0x0444(0x0078) (Edit)
	struct FDecorationLayer[]                          DecoLayers;                                               // 0x1344(0x000C) (Edit, NeedCtorLink)
	float                                              DecoLayerOffset;                                          // 0x1350(0x0004) (Edit)
	bool                                               Inverted;                                                 // 0x1354(0x0004) (Edit)
	bool                                               bKCollisionHalfRes;                                       // 0x1354(0x0004) (Edit)
	int                                                JustLoaded;                                               // 0x1358(0x0004) (Transient)
	struct FDecorationLayerData[]                      DecoLayerData;                                            // 0x135C(0x000C) (Const, Native)
	class UTerrainSector*[]                            Sectors;                                                  // 0x1368(0x000C) (Const, Native)
	struct FVector[]                                   Vertices;                                                 // 0x1374(0x000C) (Const, Native)
	int                                                HeightmapX;                                               // 0x1380(0x0004) (Const, Native)
	int                                                HeightmapY;                                               // 0x1384(0x0004) (Const, Native)
	int                                                SectorsX;                                                 // 0x1388(0x0004) (Const, Native)
	int                                                SectorsY;                                                 // 0x138C(0x0004) (Const, Native)
	class UTerrainPrimitive*                           Primitive;                                                // 0x1390(0x0004) (Const, Native)
	struct FNormalPair[]                               FaceNormals;                                              // 0x1394(0x000C) (Const, Native)
	struct FVector                                     ToWorld[0x4];                                             // 0x13A0(0x000C) (Const, Native)
	struct FVector                                     ToHeightmap[0x4];                                         // 0x13D0(0x000C) (Const, Native)
	int[]                                              SelectedVertices;                                         // 0x1400(0x000C) (Const, Native)
	int                                                ShowGrid;                                                 // 0x140C(0x0004) (Const, Native)
	int[]                                              QuadVisibilityBitmap;                                     // 0x1410(0x000C) (Const, NeedCtorLink)
	int[]                                              EdgeTurnBitmap;                                           // 0x141C(0x000C) (Const, NeedCtorLink)
	class UMaterial*[]                                 QuadDomMaterialBitmap;                                    // 0x1428(0x000C) (Const, NeedCtorLink)
	int[]                                              RenderCombinations;                                       // 0x1434(0x000C) (Const, Native)
	int[]                                              VertexStreams;                                            // 0x1440(0x000C) (Const, Native)
	struct FColor[]                                    VertexColors;                                             // 0x144C(0x000C) (Const, Native)
	struct FColor[]                                    PaintedColor;                                             // 0x1458(0x000C) (Const, Native)
	class UTexture*                                    CollapsedLayers;                                          // 0x1464(0x0004) (Const, Native)
	class UTexture*                                    OldTerrainMap;                                            // 0x1468(0x0004) (Const, Native)
	byte[]                                             OldHeightmap;                                             // 0x146C(0x000C) (Const, Native)
	struct FColor[]                                    Emisions;                                                 // 0x1478(0x000C) (Const, Native)
	struct FColor[]                                    Excidents;                                                // 0x1484(0x000C) (Const, Native)
	struct FColor                                      AmbientLighting;                                          // 0x1490(0x0004) (Const, Native)
	int[]                                              DLColors;                                                 // 0x1494(0x000C) (Const, Native)
	int[]                                              DLColorStreams;                                           // 0x14A0(0x000C) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainInfo");
		return ptr;
	}


	void PokeTerrain(const struct FVector& WorldLocation, int Radius, int MaxDepth);
};


// Class Engine.TerrainPrimitive
// 0x0004 (0x005C - 0x0058)
class UTerrainPrimitive : public UPrimitive
{
public:
	byte                                               Padding00[0x4];                                           // 0x0058(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainPrimitive");
		return ptr;
	}

};


// Class Engine.TerrainSector
// 0x0098 (0x00C4 - 0x002C)
class UTerrainSector : public UObject
{
public:
	byte                                               Padding00[0x98];                                          // 0x002C(0x0098) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TerrainSector");
		return ptr;
	}

};


// Class Engine.SVehicleWheel
// 0x00D4 (0x0100 - 0x002C)
class USVehicleWheel : public UObject
{
public:
	float                                              Steer;                                                    // 0x002C(0x0004) (Edit)
	float                                              DriveForce;                                               // 0x0030(0x0004) (Edit)
	float                                              LongFriction;                                             // 0x0034(0x0004) (Edit)
	float                                              LatFriction;                                              // 0x0038(0x0004) (Edit)
	float                                              LongSlip;                                                 // 0x003C(0x0004) (Edit)
	float                                              LatSlip;                                                  // 0x0040(0x0004) (Edit)
	float                                              ChassisTorque;                                            // 0x0044(0x0004) (Edit)
	bool                                               bPoweredWheel;                                            // 0x0048(0x0004) (Edit)
	bool                                               bHandbrakeWheel;                                          // 0x0048(0x0004) (Edit)
	bool                                               bTrackWheel;                                              // 0x0048(0x0004) (Edit)
	bool                                               bLeftTrack;                                               // 0x0048(0x0004) (Edit)
	EVehicleSteerType                                  SteerType;                                                // 0x004C(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x004D(0x0003) MISSED OFFSET
	FName                                              BoneName;                                                 // 0x0050(0x0004) (Edit)
	EAxis                                              BoneRollAxis;                                             // 0x0054(0x0001) (Edit)
	EAxis                                              BoneSteerAxis;                                            // 0x0055(0x0001) (Edit)
	byte                                               Padding01[0x2];                                           // 0x0056(0x0002) MISSED OFFSET
	struct FVector                                     BoneOffset;                                               // 0x0058(0x000C) (Edit)
	float                                              WheelRadius;                                              // 0x0064(0x0004) (Edit)
	float                                              Softness;                                                 // 0x0068(0x0004) (Edit)
	float                                              PenScale;                                                 // 0x006C(0x0004) (Edit)
	float                                              PenOffset;                                                // 0x0070(0x0004) (Edit)
	float                                              Restitution;                                              // 0x0074(0x0004) (Edit)
	float                                              Adhesion;                                                 // 0x0078(0x0004) (Edit)
	float                                              WheelInertia;                                             // 0x007C(0x0004) (Edit)
	float                                              SuspensionTravel;                                         // 0x0080(0x0004) (Edit)
	float                                              SuspensionOffset;                                         // 0x0084(0x0004) (Edit)
	float                                              HandbrakeSlipFactor;                                      // 0x0088(0x0004) (Edit)
	float                                              HandbrakeFrictionFactor;                                  // 0x008C(0x0004) (Edit)
	float                                              SuspensionMaxRenderTravel;                                // 0x0090(0x0004) (Edit)
	FName                                              SupportBoneName;                                          // 0x0094(0x0004) (Edit)
	EAxis                                              SupportBoneAxis;                                          // 0x0098(0x0001) (Edit)
	byte                                               Padding02[0x3];                                           // 0x0099(0x0003) MISSED OFFSET
	struct FInterpCurve                                LongFrictionFunc;                                         // 0x009C(0x000C) (Edit, NeedCtorLink)
	struct FInterpCurve                                LatSlipFunc;                                              // 0x00A8(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     WheelPosition;                                            // 0x00B4(0x000C)
	float                                              SupportPivotDistance;                                     // 0x00C0(0x0004)
	bool                                               bWheelOnGround;                                           // 0x00C4(0x0004)
	float                                              TireLoad;                                                 // 0x00C8(0x0004)
	struct FVector                                     WheelDir;                                                 // 0x00CC(0x000C)
	struct FVector                                     WheelAxle;                                                // 0x00D8(0x000C)
	float                                              SpinVel;                                                  // 0x00E4(0x0004)
	float                                              TrackVel;                                                 // 0x00E8(0x0004)
	float                                              SlipAngle;                                                // 0x00EC(0x0004)
	float                                              SlipVel;                                                  // 0x00F0(0x0004)
	float                                              SuspensionPosition;                                       // 0x00F4(0x0004)
	float                                              CurrentRotation;                                          // 0x00F8(0x0004)
	struct FPointer                                    KContact;                                                 // 0x00FC(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleWheel");
		return ptr;
	}

};


// Class Engine.Pawn
// 0x0CA4 (0x107C - 0x03D8)
class APawn : public AActor
{
public:
	class AController*                                 Controller;                                               // 0x03D8(0x0004) (Net)
	float                                              NetRelevancyTime;                                         // 0x03DC(0x0004)
	class APlayerController*                           LastRealViewer;                                           // 0x03E0(0x0004)
	class AActor*                                      LastViewer;                                               // 0x03E4(0x0004)
	float                                              LastLocTime;                                              // 0x03E8(0x0004) (Const)
	bool                                               bForceDesiredRotation;                                    // 0x03EC(0x0004)
	bool                                               CannotFindPath;                                           // 0x03EC(0x0004)
	int                                                CannotFindPathCount;                                      // 0x03F0(0x0004)
	float                                              CannotFindPathTime;                                       // 0x03F4(0x0004)
	float                                              CannotFindPathTimeHoldDuration;                           // 0x03F8(0x0004)
	bool                                               bTryToUncrouch;                                           // 0x03FC(0x0004) (Const)
	bool                                               bIsCrouching;                                             // 0x03FC(0x0004)
	bool                                               bCanCrouch;                                               // 0x03FC(0x0004) (Edit)
	bool                                               bWasCrouched;                                             // 0x03FC(0x0004)
	bool                                               bDrawNameTag;                                             // 0x03FC(0x0004)
	bool                                               NametagVisInFront;                                        // 0x03FC(0x0004)
	bool                                               NametagVisFastTrace;                                      // 0x03FC(0x0004)
	bool                                               NametagVisTraceThisActor;                                 // 0x03FC(0x0004)
	bool                                               bWasAimMode;                                              // 0x03FC(0x0004)
	bool                                               bWarping;                                                 // 0x03FC(0x0004)
	bool                                               bAddToLevelPawnList;                                      // 0x03FC(0x0004)
	bool                                               bWantsToCrouch;                                           // 0x03FC(0x0004)
	bool                                               bIsCrouched;                                              // 0x03FC(0x0004) (Const, Net)
	bool                                               CannotReachPath;                                          // 0x03FC(0x0004)
	bool                                               bDoNotBackPathFinding;                                    // 0x03FC(0x0004)
	bool                                               bJustLanded;                                              // 0x03FC(0x0004)
	bool                                               bLandRecovery;                                            // 0x03FC(0x0004)
	bool                                               bUpAndOut;                                                // 0x03FC(0x0004)
	bool                                               bIsSprinting;                                             // 0x03FC(0x0004) (Net)
	bool                                               bIsDefencing;                                             // 0x03FC(0x0004) (Net)
	bool                                               bIsAiming;                                                // 0x03FC(0x0004) (Net)
	struct FVector                                     NametagPosition;                                          // 0x0400(0x000C)
	struct FVector                                     NametagScreenPos;                                         // 0x040C(0x000C)
	bool                                               bIsStanding;                                              // 0x0418(0x0004)
	float                                              fWeaponSpread;                                            // 0x041C(0x0004)
	byte                                               byGoToProne;                                              // 0x0420(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0421(0x0003) MISSED OFFSET
	bool                                               bWantsToProne;                                            // 0x0424(0x0004)
	bool                                               bIsProned;                                                // 0x0424(0x0004) (Const, Net)
	bool                                               bIsProning;                                               // 0x0424(0x0004)
	bool                                               bWasProned;                                               // 0x0424(0x0004)
	float                                              ProneHeight;                                              // 0x0428(0x0004)
	float                                              ProneRadius;                                              // 0x042C(0x0004)
	float                                              StandHeight;                                              // 0x0430(0x0004)
	float                                              StandRadius;                                              // 0x0434(0x0004)
	byte                                               byUseKey;                                                 // 0x0438(0x0001) (Net)
	byte                                               Padding01[0x3];                                           // 0x0439(0x0003) MISSED OFFSET
	bool                                               bFlyingKarma;                                             // 0x043C(0x0004)
	bool                                               bDrawCorona;                                              // 0x043C(0x0004)
	bool                                               bNoCoronas;                                               // 0x043C(0x0004)
	bool                                               bEnableSentryGunInstall;                                  // 0x043C(0x0004)
	bool                                               bThumped;                                                 // 0x043C(0x0004)
	bool                                               bInvulnerableBody;                                        // 0x043C(0x0004)
	bool                                               bClientCollision;                                         // 0x043C(0x0004)
	bool                                               bSimGravityDisabled;                                      // 0x043C(0x0004) (Const)
	bool                                               bCanStrafe;                                               // 0x043C(0x0004)
	bool                                               bCanDoubleJump;                                           // 0x043C(0x0004)
	bool                                               bCanWallDodge;                                            // 0x043C(0x0004) (Net)
	bool                                               bAvoidLedges;                                             // 0x043C(0x0004)
	bool                                               bStopAtLedges;                                            // 0x043C(0x0004)
	bool                                               bNoJumpAdjust;                                            // 0x043C(0x0004)
	bool                                               bCountJumps;                                              // 0x043C(0x0004)
	bool                                               bSimulateGravity;                                         // 0x043C(0x0004) (Const, Net)
	bool                                               bUpdateEyeheight;                                         // 0x043C(0x0004)
	bool                                               bIgnoreForces;                                            // 0x043C(0x0004)
	bool                                               bNoVelocityUpdate;                                        // 0x043C(0x0004) (Const)
	bool                                               bCanWalkOffLedges;                                        // 0x043C(0x0004)
	bool                                               bSteadyFiring;                                            // 0x043C(0x0004) (Net)
	bool                                               bCanBeBaseForPawns;                                       // 0x043C(0x0004)
	bool                                               bDirectHitWall;                                           // 0x043C(0x0004)
	bool                                               bServerMoveSetPawnRot;                                    // 0x043C(0x0004)
	bool                                               bCrawler;                                                 // 0x043C(0x0004)
	bool                                               bReducedSpeed;                                            // 0x043C(0x0004) (Const)
	bool                                               bJumpCapable;                                             // 0x043C(0x0004)
	bool                                               bCanJump;                                                 // 0x043C(0x0004)
	bool                                               bCanWalk;                                                 // 0x043C(0x0004)
	bool                                               bCanSwim;                                                 // 0x043C(0x0004)
	bool                                               bCanFly;                                                  // 0x043C(0x0004)
	bool                                               bCanClimbLadders;                                         // 0x043C(0x0004)
	bool                                               Padding02 : 24;                                           // 0x0440(0x0001)
	bool                                               bMuffledHearing;                                          // 0x0440(0x0004) (Edit)
	bool                                               bIsFemale;                                                // 0x0440(0x0004)
	bool                                               bAutoActivate;                                            // 0x0440(0x0004)
	bool                                               bCanPickupInventory;                                      // 0x0440(0x0004)
	bool                                               bUpdatingDisplay;                                         // 0x0440(0x0004)
	bool                                               bAmbientCreature;                                         // 0x0440(0x0004)
	bool                                               bLOSHearing;                                              // 0x0440(0x0004) (Edit)
	bool                                               bSameZoneHearing;                                         // 0x0440(0x0004) (Edit)
	bool                                               bAdjacentZoneHearing;                                     // 0x0440(0x0004) (Edit)
	float                                              fWallHearingFactor;                                       // 0x0444(0x0004) (Edit)
	bool                                               bSpecialCalcView;                                         // 0x0448(0x0004)
	bool                                               bNoTeamBeacon;                                            // 0x0448(0x0004)
	bool                                               bNoWeaponFiring;                                          // 0x0448(0x0004)
	bool                                               bIsTyping;                                                // 0x0448(0x0004)
	bool                                               bScriptPostRender;                                        // 0x0448(0x0004)
	bool                                               bCanUse;                                                  // 0x0448(0x0004)
	bool                                               bSuperSize;                                               // 0x0448(0x0004)
	bool                                               bWaterStepup;                                             // 0x0448(0x0004)
	bool                                               bUseCompressedPosition;                                   // 0x0448(0x0004)
	bool                                               bWeaponBob;                                               // 0x0448(0x0004)
	bool                                               bHideRegularHUD;                                          // 0x0448(0x0004)
	bool                                               bSpecialHUD;                                              // 0x0448(0x0004) (Net)
	bool                                               bSpecialCrosshair;                                        // 0x0448(0x0004)
	bool                                               bAroundCornerHearing;                                     // 0x0448(0x0004) (Edit)
	bool                                               bDontPossess;                                             // 0x0448(0x0004) (Edit)
	bool                                               bAutoFire;                                                // 0x0448(0x0004)
	bool                                               bRollToDesired;                                           // 0x0448(0x0004)
	bool                                               bIgnorePlayFiring;                                        // 0x0448(0x0004)
	bool                                               bStationary;                                              // 0x0448(0x0004)
	bool                                               bPenetrate;                                               // 0x0448(0x0004)
	bool                                               bCachedRelevant;                                          // 0x0448(0x0004)
	byte                                               FlashCount;                                               // 0x044C(0x0001)
	byte                                               Visibility;                                               // 0x044D(0x0001)
	byte                                               Padding03[0x2];                                           // 0x044E(0x0002) MISSED OFFSET
	float                                              DesiredSpeed;                                             // 0x0450(0x0004)
	float                                              MaxDesiredSpeed;                                          // 0x0454(0x0004)
	FName                                              AIScriptTag;                                              // 0x0458(0x0004) (Edit)
	float                                              HearingThreshold;                                         // 0x045C(0x0004) (Edit)
	float                                              Alertness;                                                // 0x0460(0x0004) (Edit)
	float                                              SightRadius;                                              // 0x0464(0x0004) (Edit)
	float                                              PeripheralVision;                                         // 0x0468(0x0004) (Edit)
	float                                              SkillModifier;                                            // 0x046C(0x0004) (Edit)
	float                                              AvgPhysicsTime;                                           // 0x0470(0x0004) (Const)
	float                                              MeleeRange;                                               // 0x0474(0x0004)
	float                                              MeleeDamage;                                              // 0x0478(0x0004)
	float                                              NavigationPointRange;                                     // 0x047C(0x0004)
	class ANavigationPoint*                            Anchor;                                                   // 0x0480(0x0004)
	class ANavigationPoint*                            LastAnchor;                                               // 0x0484(0x0004) (Const)
	float                                              FindAnchorFailedTime;                                     // 0x0488(0x0004)
	float                                              LastValidAnchorTime;                                      // 0x048C(0x0004)
	float                                              DestinationOffset;                                        // 0x0490(0x0004)
	float                                              NextPathRadius;                                           // 0x0494(0x0004)
	struct FVector                                     SerpentineDir;                                            // 0x0498(0x000C)
	float                                              SerpentineDist;                                           // 0x04A4(0x0004)
	float                                              SerpentineTime;                                           // 0x04A8(0x0004)
	float                                              UncrouchTime;                                             // 0x04AC(0x0004) (Const)
	float                                              SpawnTime;                                                // 0x04B0(0x0004)
	float                                              GroundSpeed;                                              // 0x04B4(0x0004) (Net)
	float                                              WaterSpeed;                                               // 0x04B8(0x0004) (Net)
	float                                              AirSpeed;                                                 // 0x04BC(0x0004) (Net)
	float                                              LadderSpeed;                                              // 0x04C0(0x0004)
	float                                              AccelRate;                                                // 0x04C4(0x0004) (Net)
	float                                              JumpZ;                                                    // 0x04C8(0x0004) (Net)
	float                                              AirControl;                                               // 0x04CC(0x0004) (Net)
	float                                              SprintSpeed;                                              // 0x04D0(0x0004)
	float                                              CrouchedSpeed;                                            // 0x04D4(0x0004)
	float                                              PronedSpeed;                                              // 0x04D8(0x0004)
	float                                              AimedGroundSpeed;                                         // 0x04DC(0x0004)
	float                                              AimedCrouchedSpeed;                                       // 0x04E0(0x0004)
	float                                              F_DiagmoveRatio;                                          // 0x04E4(0x0004)
	float                                              SideMoveRatio;                                            // 0x04E8(0x0004)
	float                                              B_DiagmoveRatio;                                          // 0x04EC(0x0004)
	float                                              BackMoveRatio;                                            // 0x04F0(0x0004)
	float                                              WalkZDamp;                                                // 0x04F4(0x0004)
	float                                              MaxFallSpeed;                                             // 0x04F8(0x0004)
	struct FVector                                     ConstantAcceleration;                                     // 0x04FC(0x000C)
	class AVehicle*                                    DrivenVehicle;                                            // 0x0508(0x0004) (Net)
	class AVehicle*                                    EntryVehicle;                                             // 0x050C(0x0004) (Net)
	struct FVector                                     ImpactVelocity;                                           // 0x0510(0x000C)
	int                                                PitchUpLimit;                                             // 0x051C(0x0004) (Edit, Net)
	int                                                PitchDownLimit;                                           // 0x0520(0x0004) (Edit, Net)
	string                                             OwnerName;                                                // 0x0524(0x000C) (Net, NeedCtorLink)
	class AwWeapon*                                    Weapon;                                                   // 0x0530(0x0004)
	class AwWeapon*                                    PendingWeapon;                                            // 0x0534(0x0004)
	class APowerups*                                   SelectedItem;                                             // 0x0538(0x0004) (Net)
	float                                              BaseEyeHeight;                                            // 0x053C(0x0004)
	float                                              BaseEyeHeightCroucned;                                    // 0x0540(0x0004)
	float                                              BaseEyeHeightProned;                                      // 0x0544(0x0004)
	float                                              EyeHeight;                                                // 0x0548(0x0004)
	struct FVector                                     Floor;                                                    // 0x054C(0x000C)
	float                                              SplashTime;                                               // 0x0558(0x0004)
	float                                              CrouchHeight;                                             // 0x055C(0x0004)
	float                                              CrouchRadius;                                             // 0x0560(0x0004)
	float                                              DrivingHeight;                                            // 0x0564(0x0004) (Edit)
	float                                              DrivingRadius;                                            // 0x0568(0x0004) (Edit)
	float                                              OldZ;                                                     // 0x056C(0x0004)
	class APhysicsVolume*                              HeadVolume;                                               // 0x0570(0x0004)
	float                                              HealthMax;                                                // 0x0574(0x0004) (Net)
	float                                              SuperHealthMax;                                           // 0x0578(0x0004)
	int                                                Health;                                                   // 0x057C(0x0004) (Net)
	float                                              BreathTime;                                               // 0x0580(0x0004)
	float                                              UnderWaterTime;                                           // 0x0584(0x0004)
	float                                              LastPainTime;                                             // 0x0588(0x0004)
	class UClass*                                      ReducedDamageType;                                        // 0x058C(0x0004)
	float                                              HeadRadius;                                               // 0x0590(0x0004)
	float                                              HeadHeight;                                               // 0x0594(0x0004)
	float                                              HeadScale;                                                // 0x0598(0x0004) (Net)
	bool                                               bSetPCRotOnPossess;                                       // 0x059C(0x0004)
	struct FVector                                     noise1spot;                                               // 0x05A0(0x000C) (Const)
	float                                              noise1time;                                               // 0x05AC(0x0004) (Const)
	class APawn*                                       noise1other;                                              // 0x05B0(0x0004) (Const)
	float                                              noise1loudness;                                           // 0x05B4(0x0004) (Const)
	struct FVector                                     noise2spot;                                               // 0x05B8(0x000C) (Const)
	float                                              noise2time;                                               // 0x05C4(0x0004) (Const)
	class APawn*                                       noise2other;                                              // 0x05C8(0x0004) (Const)
	float                                              noise2loudness;                                           // 0x05CC(0x0004) (Const)
	float                                              LastPainSound;                                            // 0x05D0(0x0004)
	float                                              Bob;                                                      // 0x05D4(0x0004)
	float                                              BobMagicValue1;                                           // 0x05D8(0x0004)
	float                                              BobMagicValue2;                                           // 0x05DC(0x0004)
	float                                              BobMagicValue3;                                           // 0x05E0(0x0004)
	float                                              BobMagicValue4;                                           // 0x05E4(0x0004)
	float                                              LandBob;                                                  // 0x05E8(0x0004)
	float                                              AppliedBob;                                               // 0x05EC(0x0004)
	float                                              bobtime;                                                  // 0x05F0(0x0004)
	float                                              bobTimeX;                                                 // 0x05F4(0x0004)
	float                                              bobTimeY;                                                 // 0x05F8(0x0004)
	float                                              bobTimeZ;                                                 // 0x05FC(0x0004)
	struct FVector                                     WalkBob;                                                  // 0x0600(0x000C)
	struct FVector                                     WalkBobCamera;                                            // 0x060C(0x000C)
	float                                              SoundDampening;                                           // 0x0618(0x0004)
	float                                              DamageScaling;                                            // 0x061C(0x0004)
	float                                              AmbientSoundScaling;                                      // 0x0620(0x0004)
	string                                             MenuName;                                                 // 0x0624(0x000C) (Localized, NeedCtorLink)
	class AProjector*                                  Shadow;                                                   // 0x0630(0x0004)
	class UClass*                                      BloodEffect;                                              // 0x0634(0x0004)
	class UClass*                                      LowGoreBlood;                                             // 0x0638(0x0004)
	class UClass*                                      ControllerClass;                                          // 0x063C(0x0004)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x0640(0x0004) (Net)
	class ALadderVolume*                               OnLadder;                                                 // 0x0644(0x0004)
	FName                                              LandMovementState;                                        // 0x0648(0x0004)
	FName                                              WaterMovementState;                                       // 0x064C(0x0004)
	class APlayerStart*                                LastStartSpot;                                            // 0x0650(0x0004)
	float                                              LastStartTime;                                            // 0x0654(0x0004)
	FName                                              AnimAction;                                               // 0x0658(0x0004) (Net)
	struct FVector                                     TakeHitLocation;                                          // 0x065C(0x000C) (Net)
	class UClass*                                      HitDamageType;                                            // 0x0668(0x0004) (Net)
	int                                                HitCollisionPart;                                         // 0x066C(0x0004) (Net)
	struct FVector                                     TearOffMomentum;                                          // 0x0670(0x000C) (Net)
	EPhysics                                           OldPhysics;                                               // 0x067C(0x0001)
	byte                                               Padding04[0x3];                                           // 0x067D(0x0003) MISSED OFFSET
	bool                                               FootStill;                                                // 0x0680(0x0004) (Const)
	bool                                               bPhysicsAnimUpdate;                                       // 0x0680(0x0004)
	bool                                               bInitializeAnimation;                                     // 0x0680(0x0004)
	bool                                               bPlayedDeath;                                             // 0x0680(0x0004)
	bool                                               bIsIdle;                                                  // 0x0680(0x0004)
	bool                                               bWaitForAnim;                                             // 0x0680(0x0004)
	bool                                               bReverseRun;                                              // 0x0680(0x0004) (Const)
	bool                                               bDoTorsoTwist;                                            // 0x0680(0x0004)
	bool                                               FootTurning;                                              // 0x0680(0x0004) (Const)
	byte                                               byRunCase;                                                // 0x0684(0x0001)
	byte                                               ViewPitch;                                                // 0x0685(0x0001) (Const, Net)
	byte                                               Padding05[0x2];                                           // 0x0686(0x0002) MISSED OFFSET
	int                                                SmoothViewPitch;                                          // 0x0688(0x0004)
	int                                                SmoothViewYaw;                                            // 0x068C(0x0004)
	float                                              OldRotYaw;                                                // 0x0690(0x0004)
	struct FVector                                     OldAcceleration;                                          // 0x0694(0x000C)
	float                                              BlendChangeTime;                                          // 0x06A0(0x0004) (Edit)
	float                                              MovementBlendStartTime;                                   // 0x06A4(0x0004)
	float                                              ForwardStrafeBias;                                        // 0x06A8(0x0004)
	float                                              BackwardStrafeBias;                                       // 0x06AC(0x0004)
	float                                              DodgeSpeedFactor;                                         // 0x06B0(0x0004)
	float                                              DodgeSpeedZ;                                              // 0x06B4(0x0004)
	int                                                OldAnimDir;                                               // 0x06B8(0x0004) (Const)
	struct FVector                                     OldVelocity;                                              // 0x06BC(0x000C) (Const)
	float                                              IdleTime;                                                 // 0x06C8(0x0004)
	FName                                              SwimAnims[0x4];                                           // 0x06CC(0x0004)
	FName                                              DoubleJumpAnims[0x4];                                     // 0x06DC(0x0004)
	FName                                              DodgeAnims[0x4];                                          // 0x06EC(0x0004)
	FName                                              IdleSwimAnim;                                             // 0x06FC(0x0004)
	FName                                              IdleAnim;                                                 // 0x0700(0x0004)
	FName                                              IdleWeaponAnim;                                           // 0x0704(0x0004)
	FName                                              IdleChatAnim;                                             // 0x0708(0x0004)
	bool                                               bIsNeedUpdateAnim;                                        // 0x070C(0x0004)
	FName                                              Prone_Anim;                                               // 0x0710(0x0004)
	FName                                              WeaponSelectAnim;                                         // 0x0714(0x0004)
	FName                                              WeaponPutDownAnim;                                        // 0x0718(0x0004)
	FName                                              WeaponIdleRestAnim;                                       // 0x071C(0x0004)
	struct FPlayerDamageInfo[]                         DamageInfo;                                               // 0x0720(0x000C) (NeedCtorLink)
	class AController*[]                               AssistList;                                               // 0x072C(0x000C) (NeedCtorLink)
	class UI3DL2Listener*                              curEAXEffect;                                             // 0x0738(0x0004)
	float                                              EAXEffectTime;                                            // 0x073C(0x0004)
	float                                              RepPawnPositionTime;                                      // 0x0740(0x0004)
	struct FVector                                     PrevLocation;                                             // 0x0744(0x000C)
	struct FVector                                     PrevMoveDir;                                              // 0x0750(0x000C)
	struct FVector                                     PrevInterpoLocation;                                      // 0x075C(0x000C)
	int                                                PrevTime;                                                 // 0x0768(0x0004)
	FName                                              IdleRifleAnim;                                            // 0x076C(0x0004)
	FName                                              IdleRestAnim[0x2];                                        // 0x0770(0x0004)
	FName                                              MovementAnims[0x4];                                       // 0x0778(0x0004)
	FName                                              FireRifleRapidAnim;                                       // 0x0788(0x0004)
	FName                                              FireRifleBurstAnim;                                       // 0x078C(0x0004)
	FName                                              Rifle_BoltLeverAnim;                                      // 0x0790(0x0004)
	FName                                              Reload_Rifle_Anim;                                        // 0x0794(0x0004)
	FName                                              Putdown_Rifle_Anim;                                       // 0x0798(0x0004)
	FName                                              PutdownQuick_Rifle_Anim;                                  // 0x079C(0x0004)
	FName                                              Select_Rifle_Anim;                                        // 0x07A0(0x0004)
	FName                                              SelectNew_Rifle_Anim;                                     // 0x07A4(0x0004)
	FName                                              SprintAnims[0x4];                                         // 0x07A8(0x0004)
	FName                                              IdleAimAnim;                                              // 0x07B8(0x0004)
	FName                                              AimAnims[0x4];                                            // 0x07BC(0x0004)
	FName                                              FireAimRifleRapidAnim;                                    // 0x07CC(0x0004)
	FName                                              FireAimRifleSemiAnim;                                     // 0x07D0(0x0004)
	FName                                              TakeoffStillAnim;                                         // 0x07D4(0x0004)
	FName                                              AirStillAnim;                                             // 0x07D8(0x0004)
	FName                                              TakeoffAnims[0x4];                                        // 0x07DC(0x0004)
	FName                                              AirAnims[0x4];                                            // 0x07EC(0x0004)
	FName                                              LandAnims[0x5];                                           // 0x07FC(0x0004)
	FName                                              Pistol_TakeoffStillAnim;                                  // 0x0810(0x0004)
	FName                                              Pistol_AirStillAnim;                                      // 0x0814(0x0004)
	FName                                              Pistol_TakeoffAnims[0x4];                                 // 0x0818(0x0004)
	FName                                              Pistol_AirAnims[0x4];                                     // 0x0828(0x0004)
	FName                                              Pistol_LandAnims[0x5];                                    // 0x0838(0x0004)
	FName                                              Frag_TakeoffStillAnim;                                    // 0x084C(0x0004)
	FName                                              Frag_AirStillAnim;                                        // 0x0850(0x0004)
	FName                                              Frag_TakeoffAnims[0x4];                                   // 0x0854(0x0004)
	FName                                              Frag_AirAnims[0x4];                                       // 0x0864(0x0004)
	FName                                              Frag_LandAnims[0x5];                                      // 0x0874(0x0004)
	FName                                              Rpg_TakeoffStillAnim;                                     // 0x0888(0x0004)
	FName                                              Rpg_AirStillAnim;                                         // 0x088C(0x0004)
	FName                                              Rpg_TakeoffAnims[0x4];                                    // 0x0890(0x0004)
	FName                                              Rpg_AirAnims[0x4];                                        // 0x08A0(0x0004)
	FName                                              Rpg_LandAnims[0x5];                                       // 0x08B0(0x0004)
	FName                                              IdleCrouchAnim;                                           // 0x08C4(0x0004)
	FName                                              IdleCrouchRestAnim[0x2];                                  // 0x08C8(0x0004)
	FName                                              CrouchAnims[0x4];                                         // 0x08D0(0x0004)
	FName                                              FireCrouchRifleRapidAnim;                                 // 0x08E0(0x0004)
	FName                                              IdleAimCrouchAnim;                                        // 0x08E4(0x0004)
	FName                                              AimCrouchAnims[0x4];                                      // 0x08E8(0x0004)
	FName                                              IdleProneAnim;                                            // 0x08F8(0x0004)
	FName                                              ProneAnims[0x4];                                          // 0x08FC(0x0004)
	FName                                              FireProneRifleRapidAnim;                                  // 0x090C(0x0004)
	FName                                              Rifle_Prone_BoltLeverAnim;                                // 0x0910(0x0004)
	FName                                              Reload_Prone_Rifle_Anim;                                  // 0x0914(0x0004)
	FName                                              Putdown_Prone_Rifle_Anim;                                 // 0x0918(0x0004)
	FName                                              PutdownQuick_Prone_Rifle_Anim;                            // 0x091C(0x0004)
	FName                                              Select_Prone_Rifle_Anim;                                  // 0x0920(0x0004)
	FName                                              SelectNew_Prone_Rifle_Anim;                               // 0x0924(0x0004)
	FName                                              Prone_Standup_Anim;                                       // 0x0928(0x0004)
	FName                                              Meele_Rifle;                                              // 0x092C(0x0004)
	FName                                              Meele_Rifle_Cr;                                           // 0x0930(0x0004)
	FName                                              Meele_Rifle_Pr;                                           // 0x0934(0x0004)
	FName                                              Meele_Rifle_F;                                            // 0x0938(0x0004)
	FName                                              Meele_Rifle_Cr_F;                                         // 0x093C(0x0004)
	FName                                              Meele_Knife;                                              // 0x0940(0x0004)
	FName                                              Meele_Knife_Cr;                                           // 0x0944(0x0004)
	FName                                              Meele_Knife_Pr;                                           // 0x0948(0x0004)
	FName                                              Meele_Knife_F;                                            // 0x094C(0x0004)
	FName                                              Meele_Knife_Cr_F;                                         // 0x0950(0x0004)
	FName                                              Meele_Scharge;                                            // 0x0954(0x0004)
	FName                                              Pistol_IdleRifleAnim;                                     // 0x0958(0x0004)
	FName                                              Pistol_IdleRestAnim[0x2];                                 // 0x095C(0x0004)
	FName                                              Pistol_MovementAnims[0x4];                                // 0x0964(0x0004)
	FName                                              Pistol_FireAimRifleRapidAnim;                             // 0x0974(0x0004)
	FName                                              Pistol_Reload_Rifle_Anim;                                 // 0x0978(0x0004)
	FName                                              Pistol_Putdown_Rifle_Anim;                                // 0x097C(0x0004)
	FName                                              Pistol_PutdownQuick_Rifle_Anim;                           // 0x0980(0x0004)
	FName                                              Pistol_Select_Rifle_Anim;                                 // 0x0984(0x0004)
	FName                                              Pistol_SprintAnims[0x4];                                  // 0x0988(0x0004)
	FName                                              Pistol_IdleCrouchAnim;                                    // 0x0998(0x0004)
	FName                                              Pistol_IdleCrouchRest[0x2];                               // 0x099C(0x0004)
	FName                                              Pistol_CrouchAnims[0x4];                                  // 0x09A4(0x0004)
	FName                                              Pistol_FireCrouchRifleRapidAnim;                          // 0x09B4(0x0004)
	FName                                              Pistol_IdleProne;                                         // 0x09B8(0x0004)
	FName                                              Pistol_ProneBurst;                                        // 0x09BC(0x0004)
	FName                                              Pistol_ProneReload;                                       // 0x09C0(0x0004)
	FName                                              Pistol_PronePutdown;                                      // 0x09C4(0x0004)
	FName                                              Pistol_PronePutdownQuick;                                 // 0x09C8(0x0004)
	FName                                              Pistol_ProneSelect;                                       // 0x09CC(0x0004)
	FName                                              Frag_Idle_Anim;                                           // 0x09D0(0x0004)
	FName                                              Frag_Rest_Idle_Anim[0x2];                                 // 0x09D4(0x0004)
	FName                                              Frag_MovementAnims[0x4];                                  // 0x09DC(0x0004)
	FName                                              Frag_PutDown_Anim;                                        // 0x09EC(0x0004)
	FName                                              Frag_PutDownQuick_Anim;                                   // 0x09F0(0x0004)
	FName                                              Frag_Select_Anim;                                         // 0x09F4(0x0004)
	FName                                              Frag_Burst_Anim;                                          // 0x09F8(0x0004)
	FName                                              Frag_SprintAnims[0x4];                                    // 0x09FC(0x0004)
	FName                                              Frag_IdleCrouchAnim;                                      // 0x0A0C(0x0004)
	FName                                              Frag_CrouchMovementAnims[0x4];                            // 0x0A10(0x0004)
	FName                                              Frag_IdleProne;                                           // 0x0A20(0x0004)
	FName                                              Frag_ProneBurst;                                          // 0x0A24(0x0004)
	FName                                              Frag_PronePutdown;                                        // 0x0A28(0x0004)
	FName                                              Frag_PronePutdownQuick;                                   // 0x0A2C(0x0004)
	FName                                              Frag_ProneSelect;                                         // 0x0A30(0x0004)
	FName                                              Rpg_Idle_Anim;                                            // 0x0A34(0x0004)
	FName                                              Rpg_Rest_Idle_Anim;                                       // 0x0A38(0x0004)
	FName                                              Rpg_MovementAnims[0x4];                                   // 0x0A3C(0x0004)
	FName                                              Rpg_Burst_Anim;                                           // 0x0A4C(0x0004)
	FName                                              Rpg_Reload_Anim;                                          // 0x0A50(0x0004)
	FName                                              Rpg_PutDown_Anim;                                         // 0x0A54(0x0004)
	FName                                              Rpg_PutDownQuick_Anim;                                    // 0x0A58(0x0004)
	FName                                              Rpg_Select_Anim;                                          // 0x0A5C(0x0004)
	FName                                              Rpg_SprintAnims[0x4];                                     // 0x0A60(0x0004)
	FName                                              Rpg_Idle_AimAnim;                                         // 0x0A70(0x0004)
	FName                                              Rpg_AimAnims[0x4];                                        // 0x0A74(0x0004)
	FName                                              Rpg_AimAnims_Cr[0x4];                                     // 0x0A84(0x0004)
	FName                                              Rpg_IdleCrouchAnim;                                       // 0x0A94(0x0004)
	FName                                              Rpg_IdleCrouchRest;                                       // 0x0A98(0x0004)
	FName                                              Rpg_CrouchMovementAnims[0x4];                             // 0x0A9C(0x0004)
	FName                                              Rpg_FireCrouchRifleRapidAnim;                             // 0x0AAC(0x0004)
	FName                                              Rpg_IdleProne;                                            // 0x0AB0(0x0004)
	FName                                              Rpg_ProneBurst;                                           // 0x0AB4(0x0004)
	FName                                              Rpg_ProneReload;                                          // 0x0AB8(0x0004)
	FName                                              Rpg_PronePutdown;                                         // 0x0ABC(0x0004)
	FName                                              Rpg_PronePutdownQuick;                                    // 0x0AC0(0x0004)
	FName                                              Rpg_ProneSelect;                                          // 0x0AC4(0x0004)
	FName                                              Rpg_Prone_Standup_Anim;                                   // 0x0AC8(0x0004)
	FName                                              SentryGunPack_IdleAnim;                                   // 0x0ACC(0x0004)
	FName                                              SentryGunPack_MovementAnims[0x4];                         // 0x0AD0(0x0004)
	FName                                              SentryGunPack_PutDown;                                    // 0x0AE0(0x0004)
	FName                                              SentryGunPack_Select_Anim;                                // 0x0AE4(0x0004)
	FName                                              SentryGunPack_Plant;                                      // 0x0AE8(0x0004)
	FName                                              SentryGunPack_PlantStop;                                  // 0x0AEC(0x0004)
	FName                                              SentryGunPack_TakeoffStillAnim;                           // 0x0AF0(0x0004)
	FName                                              SentryGunPack_AirStillAnim;                               // 0x0AF4(0x0004)
	FName                                              SentryGunPack_TakeoffAnims[0x4];                          // 0x0AF8(0x0004)
	FName                                              SentryGunPack_AirAnims[0x4];                              // 0x0B08(0x0004)
	FName                                              SentryGunPack_LandAnims[0x5];                             // 0x0B18(0x0004)
	FName                                              SentryGunPack_Weapon_Select_Anim;                         // 0x0B2C(0x0004)
	FName                                              SentryGunPack_Weapon_Plant_Anim;                          // 0x0B30(0x0004)
	FName                                              SentryGunPack_Weapon_Idle_Anim;                           // 0x0B34(0x0004)
	FName                                              TurretIdle;                                               // 0x0B38(0x0004)
	FName                                              TurretIdleUpDown;                                         // 0x0B3C(0x0004)
	FName                                              TurretBurst;                                              // 0x0B40(0x0004)
	FName                                              ShotGun_BoltLeverAnim;                                    // 0x0B44(0x0004)
	FName                                              ShotGun_Reload;                                           // 0x0B48(0x0004)
	FName                                              ShotGun_Crouch_Pump;                                      // 0x0B4C(0x0004)
	FName                                              ShotGun_Crouch_Reload3;                                   // 0x0B50(0x0004)
	FName                                              ShotGun_Prone_Pump;                                       // 0x0B54(0x0004)
	FName                                              ShotGun_Prone_Reload3;                                    // 0x0B58(0x0004)
	FName                                              Hit_AR[0x4];                                              // 0x0B5C(0x0004)
	FName                                              Hit_Head;                                                 // 0x0B6C(0x0004)
	FName                                              Hit_AR_Cr[0x4];                                           // 0x0B70(0x0004)
	FName                                              Hit_Pr;                                                   // 0x0B80(0x0004)
	FName                                              Death_F[0x3];                                             // 0x0B84(0x0004)
	FName                                              Death_B[0x3];                                             // 0x0B90(0x0004)
	FName                                              Death_L[0x3];                                             // 0x0B9C(0x0004)
	FName                                              Death_R[0x3];                                             // 0x0BA8(0x0004)
	FName                                              Death_Head;                                               // 0x0BB4(0x0004)
	FName                                              Death_Cr_F[0x2];                                          // 0x0BB8(0x0004)
	FName                                              Death_Cr_B[0x2];                                          // 0x0BC0(0x0004)
	FName                                              Death_Cr_L[0x2];                                          // 0x0BC8(0x0004)
	FName                                              Death_Cr_R[0x2];                                          // 0x0BD0(0x0004)
	FName                                              Death_Cr_Head;                                            // 0x0BD8(0x0004)
	FName                                              Death_Pr;                                                 // 0x0BDC(0x0004)
	FName                                              Death_Frag_F;                                             // 0x0BE0(0x0004)
	FName                                              Death_Frag_B;                                             // 0x0BE4(0x0004)
	FName                                              Death_Frag_L;                                             // 0x0BE8(0x0004)
	FName                                              Death_Frag_R;                                             // 0x0BEC(0x0004)
	FName                                              Bomb_Plant;                                               // 0x0BF0(0x0004)
	FName                                              Bomb_Defuse;                                              // 0x0BF4(0x0004)
	FName                                              Crouch_Bomb_Plant;                                        // 0x0BF8(0x0004)
	FName                                              Crouch_Bomb_Defuse;                                       // 0x0BFC(0x0004)
	FName                                              Prone_Bomb_Plant;                                         // 0x0C00(0x0004)
	FName                                              Prone_Bomb_Defuse;                                        // 0x0C04(0x0004)
	FName                                              Bomb_Throw;                                               // 0x0C08(0x0004)
	FName                                              DemoPack_Plant_PutDown_Anim;                              // 0x0C0C(0x0004)
	FName                                              DemoPack_Defuse_PutDown_Anim;                             // 0x0C10(0x0004)
	FName                                              DemoPack_Plant_Crouch_PutDown_Anim;                       // 0x0C14(0x0004)
	FName                                              DemoPack_Defuse_Crouch_PutDown_Anim;                      // 0x0C18(0x0004)
	FName                                              DemoPack_Plant_Prone_PutDown_Anim;                        // 0x0C1C(0x0004)
	FName                                              DemoPack_Defuse_Prone_PutDown_Anim;                       // 0x0C20(0x0004)
	FName                                              DemoPack_Throw_Anim;                                      // 0x0C24(0x0004)
	FName                                              DemoPack_Throw_Crouch_Anim;                               // 0x0C28(0x0004)
	FName                                              DemoPack_Throw_Prone_Anim;                                // 0x0C2C(0x0004)
	byte                                               byThrowsWeapon;                                           // 0x0C30(0x0001)
	byte                                               Padding06[0x3];                                           // 0x0C31(0x0003) MISSED OFFSET
	class UwMyPlayerStatus*                            wMyParam;                                                 // 0x0C34(0x0004)
	FName[]                                            TauntAnims;                                               // 0x0C38(0x000C) (NeedCtorLink)
	string                                             TauntAnimNames[0x10];                                     // 0x0C44(0x000C) (Localized, NeedCtorLink)
	int                                                FootRot;                                                  // 0x0D04(0x0004) (Const)
	int                                                TurnDir;                                                  // 0x0D08(0x0004) (Const)
	FName                                              MainRootBone;                                             // 0x0D0C(0x0004)
	FName                                              MainRotateBone;                                           // 0x0D10(0x0004)
	FName                                              RootBone;                                                 // 0x0D14(0x0004)
	FName                                              HeadBone;                                                 // 0x0D18(0x0004)
	FName                                              SpineBone;                                                // 0x0D1C(0x0004)
	FName                                              SpineBone1;                                               // 0x0D20(0x0004)
	FName                                              SpineBone2;                                               // 0x0D24(0x0004)
	FName                                              PelvisBone;                                               // 0x0D28(0x0004)
	struct FVector                                     vDiagonalRot;                                             // 0x0D2C(0x000C)
	float                                              fDiagonalBodyRot;                                         // 0x0D38(0x0004)
	struct FVector                                     vFL_Rot;                                                  // 0x0D3C(0x000C)
	struct FVector                                     vFR_Rot;                                                  // 0x0D48(0x000C)
	struct FVector                                     vBL_Rot;                                                  // 0x0D54(0x000C)
	struct FVector                                     vBR_Rot;                                                  // 0x0D60(0x000C)
	struct FVector                                     vCFL_Rot;                                                 // 0x0D6C(0x000C)
	struct FVector                                     vCFR_Rot;                                                 // 0x0D78(0x000C)
	struct FVector                                     vCBL_Rot;                                                 // 0x0D84(0x000C)
	struct FVector                                     vCBR_Rot;                                                 // 0x0D90(0x000C)
	float                                              fBodyFL_Rot;                                              // 0x0D9C(0x0004)
	float                                              fBodyFR_Rot;                                              // 0x0DA0(0x0004)
	float                                              fBodyBL_Rot;                                              // 0x0DA4(0x0004)
	float                                              fBodyBR_Rot;                                              // 0x0DA8(0x0004)
	float                                              ShieldStrength;                                           // 0x0DAC(0x0004) (Edit, Net, Transient)
	struct FHitFXData                                  HitFx[0x8];                                               // 0x0DB0(0x0028) (Edit, Net)
	int                                                HitFxTicker;                                              // 0x0EF0(0x0004) (Net, Transient)
	struct FCompressedPosition                         PawnPosition;                                             // 0x0EF4(0x0024) (Net, Transient)
	class AController*                                 DelayedDamageInstigatorController;                        // 0x0F18(0x0004)
	class AController*                                 LastHitBy;                                                // 0x0F1C(0x0004)
	float                                              MinFlySpeed;                                              // 0x0F20(0x0004)
	float                                              MaxRotation;                                              // 0x0F24(0x0004)
	int                                                iDelayedDamageInstigatorID;                               // 0x0F28(0x0004)
	bool                                               bReloading;                                               // 0x0F2C(0x0004)
	bool                                               bWasReloading;                                            // 0x0F2C(0x0004) (Net)
	bool                                               bMeleeAttacking;                                          // 0x0F2C(0x0004)
	bool                                               bWaitingPreAnim;                                          // 0x0F2C(0x0004) (Net)
	byte                                               TypeOfWeapon;                                             // 0x0F30(0x0001) (Net)
	byte                                               Padding07[0x3];                                           // 0x0F31(0x0003) MISSED OFFSET
	float                                              DriverCurrentFrame;                                       // 0x0F34(0x0004) (Net)
	float                                              DriverUpDownFrame;                                        // 0x0F38(0x0004) (Net)
	bool                                               bIsTurreting;                                             // 0x0F3C(0x0004) (Net)
	string                                             LoginName;                                                // 0x0F40(0x000C) (Net, NeedCtorLink)
	int                                                IDNum;                                                    // 0x0F4C(0x0004) (Net)
	int                                                iSoundChannel_SuffEff;                                    // 0x0F50(0x0004)
	float                                              fTimer_SuffEff;                                           // 0x0F54(0x0004)
	float                                              fLastFireNoiseTime;                                       // 0x0F58(0x0004)
	struct FVector                                     vFormerFireNoisePos;                                      // 0x0F5C(0x000C)
	struct FVector                                     vLastFireNoisePos;                                        // 0x0F68(0x000C)
	float                                              FireNoiseDistance;                                        // 0x0F74(0x0004)
	float                                              fLastRadioMessageTime;                                    // 0x0F78(0x0004)
	struct FVector                                     vFormerRadioMessagePos;                                   // 0x0F7C(0x000C)
	struct FVector                                     vLastRadioMessagePos;                                     // 0x0F88(0x000C)
	float                                              RadioMessageDistance;                                     // 0x0F94(0x0004)
	float                                              UAVScannedTime;                                           // 0x0F98(0x0004)
	struct FVector                                     UAVLastScannedPos;                                        // 0x0F9C(0x000C)
	struct FVector                                     LastKnownPos;                                             // 0x0FA8(0x000C)
	float                                              LastKnownTime;                                            // 0x0FB4(0x0004)
	class AwWeaponPickup*                              kPendingWPick;                                            // 0x0FB8(0x0004) (Net)
	float                                              LastDamageDealtTime;                                      // 0x0FBC(0x0004) (Net)
	int                                                LastDamageCollisionPart;                                  // 0x0FC0(0x0004) (Net)
	float                                              LastDamageReceiveTime;                                    // 0x0FC4(0x0004)
	int                                                TeamIndex;                                                // 0x0FC8(0x0004) (Net)
	float                                              DealDamageRatio_Default;                                  // 0x0FCC(0x0004)
	float                                              DealDamageRatio_Explosive;                                // 0x0FD0(0x0004)
	float                                              DealDamageRatio_Melee;                                    // 0x0FD4(0x0004)
	struct FVector                                     RespawnLocation;                                          // 0x0FD8(0x000C)
	bool                                               bInvulnerableOnRespawn;                                   // 0x0FE4(0x0004)
	float                                              fRespawnInvulnerableTime;                                 // 0x0FE8(0x0004)
	float                                              fRespawnInvulnerableTime_SDMode;                          // 0x0FEC(0x0004)
	float                                              fRespawnInvulnerableTimeBeginner;                         // 0x0FF0(0x0004)
	struct FsStartWeaponInfo[]                         arStartWeaponInfo;                                        // 0x0FF4(0x000C) (NeedCtorLink)
	float                                              fReduceVelRate;                                           // 0x1000(0x0004)
	float                                              fSequenceAnimRate;                                        // 0x1004(0x0004)
	bool                                               bCanQuickReload;                                          // 0x1008(0x0004) (Net)
	bool                                               bCanQuickWeaponChange;                                    // 0x1008(0x0004) (Net)
	struct FVector                                     AttackerLoc;                                              // 0x100C(0x000C) (Net)
	float                                              TweenRate_Proned_Run;                                     // 0x1018(0x0004)
	float                                              TweenRate_Crouched_Run;                                   // 0x101C(0x0004)
	float                                              TweenRate_Sprint;                                         // 0x1020(0x0004)
	float                                              TweenRate_Run;                                            // 0x1024(0x0004)
	float                                              TweenRate_Aim_Run;                                        // 0x1028(0x0004)
	float                                              TweenRate_Idle;                                           // 0x102C(0x0004)
	float                                              TweenRate_SideStep;                                       // 0x1030(0x0004)
	float                                              TweenRate_Proned_Idle;                                    // 0x1034(0x0004)
	float                                              TweenRate_Crouched_Idle;                                  // 0x1038(0x0004)
	float                                              fMinStaminaRatio;                                         // 0x103C(0x0004)
	FName                                              naSpecificBoneName[0x3];                                  // 0x1040(0x0004) (Net)
	struct FRotator                                    rotSpecificBoneRotator[0x3];                              // 0x104C(0x000C)
	bool                                               bApplyInverseBoneRotation;                                // 0x1070(0x0004)
	struct FScriptDelegate                             __OnReachedDestination__Delegate;                         // 0x1074(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pawn");
		return ptr;
	}


	void SetCollisionSizeEx(float fRadius, float fHeight);
	void AdjustCollisionSize();
	float GetBaseStaminaTime();
	void Set1stFov(float f);
	void SetInfiniteAmmoTutorial(bool bDeleteGranade, int iGranadeCount);
	bool CanQuickWeaponChange();
	void SetRemoveWeaponSkill(class AwWeapon* W);
	void SetWeaponQuickChange(bool bOn);
	void SetWeaponQuickReload(bool bOn);
	void SetWeaponQuickAimZoom(bool bOn);
	bool AddWeaponFillAmmoAndMagazine();
	bool AddWeaponMagazine();
	bool IsEnableBombSetting();
	void GetWeaponAttachmentInfo(byte* byFlashCount, byte* byFiringMode);
	void QuickTurn();
	void SetDesiredRotationCheck(bool Yaw, bool Pitch, bool Roll);
	void ServerRefreshCollisionHash();
	void GetBoneNameByCollisionID(int CollisionID, FName* BoneName);
	class AwWeapon* AddWeapon(const struct FBtrDouble& iUniqueID, int iWeaponID, int iAddPartsID, bool bPickupChange, int iPainting_Item_ID);
	void AddWeaponFromSkill(const struct FBtrDouble& iUniqueID, int iWeaponID);
	void ServerAddWeapon(const struct FBtrDouble& iUniqueID, int iWeaponID);
	void UAVScan();
	int GetCurHealth();
	float GetMaxHealth();
	void UpdateLastKnownPosAndTime(const struct FVector& loc, float Time);
	void CalcRadioMessageTime();
	void MakeRadioMessage();
	void CalcFireNoiseTime();
	void MakeFireNoise();
	void SetEaxEffect(class UI3DL2Listener* EAXEffect, float fTime);
	bool RemoveSpecificBoneRotator(const FName& nameBone, int iAddIndex);
	bool AddSpecificBoneRotator(const FName& nameBone, int iAddIndex);
	void UpdateSpecificBoneRotation(float fElapsedTime);
	void Tick(float Delta);
	void ServerSetTypeOfWeapon(byte ty);
	void ClientSetWaitingPreAnimMode(bool bWaiting);
	void ServerSetWaitingPreAnimMode(bool bWaiting);
	void ClientSetWasReloadMode(bool bReload);
	void ServerSetWasReloadMode(bool bReload);
	void ClientSetReloadMode(bool bReload);
	void ServerSetReloadMode(bool bReload);
	void ClientSetTurretingMode(bool bTurret);
	void ServerSetTurretingMode(bool bTurret);
	void SetTurretIdleAnimFrame(float frame, float UpDownFrame);
	void PlayTurretIdleAnim(bool UpDown);
	void SetDriverFrame(float frame, float UpDownFrame);
	void SetAimModeValueOnly(bool bToggle);
	void SetAimMode(bool bToggle);
	struct FVector GetTargetLocation();
	float RangedAttackTime();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void Suicide();
	void RawInput(float DeltaTime, float aBaseX, float aBaseY, float aBaseZ, float aMouseX, float aMouseY, float aForward, float aTurn, float aStrafe, float aUp, float aLookUp);
	void IncrementSpree();
	int GetSpree();
	class AVehicle* GetVehicleBase();
	void PlayVictoryAnimation();
	void PlayLandingAnimation(float impactVel);
	void PlayLanded(float impactVel);
	void CheckProneAni(bool bGoProne);
	void PlayRechamber();
	void PlayReload();
	void PlayWaiting();
	void PlayMoving();
	void PlayFalling();
	void PlayJump();
	void StopFiring();
	bool CannotJumpNow();
	void AnimEnd(int Channel);
	void ChangeAnimation();
	void PlayTakeHit(const struct FVector& HitLoc, int Damage, class UClass* DamageType);
	void StopPlayFiring();
	void ServerThrowsWeaponAnim(bool bQuick);
	void ServerPlayPutdownWeaponAnim(bool bQuick);
	void PlayWeaponSwitch(class AwWeapon* newWeapon);
	void PlayFiring(float Rate, const FName& FiringMode);
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc, int CollisionPart);
	void SetAnimAction(const FName& NewAction, bool bNoBlendAnim);
	void ServerSetAnimAction(const FName& NewAction);
	bool IsInLoadout(class UClass* InventoryClass);
	void TurnOff();
	void ChunkUp(const struct FRotator& HitRotation, float ChunkPerterbation);
	void PlayHit(float Damage, class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, const struct FVector& Momentum, int CollisionPart);
	void PlayDyingSound();
	void PlayMoverHitSound();
	float GetSprintJumpZ();
	bool DoJump(bool bUpdating);
	bool Dodge(EDoubleClickDir DoubleClickMove);
	void ProcessMove(float DeltaTime, const struct FVector& NewAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot);
	void UpdateRocketAcceleration(float DeltaTime, float YawChange, float PitchChange);
	bool CanMultiJump();
	bool CanDoubleJump();
	void DoDoubleJump(bool bUpdating);
	bool CheckWaterJump(struct FVector* WallNormal);
	void TakeDrowningDamage();
	void BreathTimer();
	bool IsInPain();
	bool TouchingWaterVolume();
	void HeadVolumeChange(class APhysicsVolume* newHeadVolume);
	void Landed(const struct FVector& HitNormal);
	void PlayLandedSound(int SurfType);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial);
	void Falling();
	void RemovePowerups();
	bool IsTossWeapon(class ALevelInfo* levenInfo, class APawn* Pawn, class AwWeapon* Weapon);
	void Process_TossWeapon_When_Dying(class ALevelInfo* levenInfo, class APawn* Pawn, class AwWeapon* Weapon);
	void Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, int CollisionPart, int WeaponType, bool bWallShot);
	void CalcItemUsedTime(class UwMatchUserInfo* kUser);
	void CalcItemUsedTimeSelf();
	class AController* GetKillerController();
	class ATeamInfo* GetTeam();
	int GetTeamNum();
	int GetDelayedDamageInstigatorID();
	void SetDelayedDamageInstigatorID(int iInstigatorID);
	void SetDelayedDamageInstigatorController(class AController* C);
	class AController*[] GetAssistList(class APawn* Killer);
	int GetAssistScore(int UID);
	void AddDamageInfo(class APawn* instigatedBy, int Damage, class UClass* DamageType);
	void UpdateDied(int ActualDamage, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, int CollisionPart, int WeaponType, bool bWallShot);
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	class AController* GetDamagedByKiller(class UClass* DamageType, class APawn* instigatedBy);
	void ApplyDealDamageRatio(class APawn* instigatedBy, class UClass* DamageType, int WeaponType, int* ActualDamage);
	class AController* GetDelayedInstigatorController(class APawn* instigatedBy);
	void TakeDamageSound(int LeftHealth, int ActualDamage, const struct FVector& HitLocation, class UClass* DamageType, int CollisionPart, int WeaponType, class AController* Killer);
	void TakeHeadRoundBullet(const struct FVector& HitLocation, int WeaponType);
	int ShieldAbsorb(int Damage);
	bool HasUDamage();
	bool GiveHealth(int HealAmount, int HealMax);
	void SetMovementPhysics();
	void Gasp();
	void SetMesh();
	void SetShadowLight(const struct FVector& vLightDir);
	void PostNetBeginPlay();
	void PostBeginPlay();
	void PreBeginPlay();
	void Destroyed();
	struct FVector EyePosition();
	void UpdateEyeHeightScript(float DeltaTime);
	void UpdateEyeHeight(float DeltaTime);
	void UpdateEyeHeightNative(float DeltaTime);
	void BaseChange();
	void JumpOffPawn();
	void gibbedBy(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	bool IsHeadShot(const struct FVector& loc, const struct FVector& ray, float AdditionalScale);
	void ServerChangedWeapon(class AwWeapon* OldWeapon, class AwWeapon* newWeapon);
	FName GetWeaponBoneFor(class AInventory* i);
	FName GetOffhandBoneFor(class AInventory* i);
	void ChangedWeapon();
	void ClientForceChangedWeapon(class AwWeapon* newWeapon);
	void DeleteInventory(class AInventory* Item);
	void DeleteInventoryFromStorage(class AInventory* Item);
	void DeleteInventoriesFromStorage();
	bool AddInventory(class AInventory* NewItem);
	class AInventory* FindInventoryType(class UClass* DesiredClass);
	void NextItem();
	void ServerNoTranslocator();
	bool SwitchWeaponByWeaponID(int iItemID, bool bQuickGr);
	void SwitchWeaponWClass(const FName& ClassName, const string& sReason);
	bool SwitchWeaponByWeaponItem(class AwWeapon* wSwitchWeapon, bool bQuickGr);
	bool SwitchWeapon(byte f, bool bQuickGr);
	void SelectPrevWeapon();
	void NextWeapon();
	void PrevWeapon();
	void SwitchToLastWeapon_ThrowsWeapon();
	void SwitchToLastWeapon();
	void ClientPickupWeapon();
	void ServerPickupWeapon();
	void CheckEntryVehicle();
	void CheckTouchWeaponPickup();
	void TossWeapon(const struct FVector& TossVel);
	bool CanThrowWeapon();
	int CanUseShield(int Amount);
	bool AddShieldStrength(int Amount);
	float GetShieldStrength();
	float GetShieldStrengthMax();
	void DisableUDamage();
	void EnableUDamage(float Amount);
	bool InCurrentCombo();
	void DoComboName(const string& ComboClassName);
	void ClientDying(class UClass* DamageType, const struct FVector& HitLocation);
	int LimitPitch(int Pitch);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	void ClientSetRotation(const struct FRotator& NewRotation);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void ClientReStart();
	void TakeFallingDamage();
	void KilledBy(class APawn* EventInstigator);
	void AddVelocity(const struct FVector& NewVelocity);
	void RestartPlayer();
	void StartProne(float HeightAdjust);
	void EndProne(float HeightAdjust);
	void StartCrouch(float HeightAdjust);
	void EndCrouch(float HeightAdjust);
	void ServerSetUseKeyState(byte byKey);
	void ShouldProne(bool Prone);
	void ShouldCrouch(bool crouch);
	void FellOutOfWorld(EeKillZType KillType);
	void ModifyVelocity(float DeltaTime, const struct FVector& OldVelocity);
	void JumpOutOfWater(const struct FVector& jumpDir);
	void FinishedInterpolation();
	void SetDefaultDisplayProperties();
	void SetDisplayProperties(ERenderStyle NewStyle, class UMaterial* NewTexture, bool bLighting);
	void GiveWeapon(const string& aClassName);
	class AInventory* CreateInventory(const string& InventoryClassName);
	bool CanTrigger(class ATrigger* t);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void ClientMessage(const string& S, const FName& Type);
	void ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void HandlePickup(class APickup* pick);
	float AdjustedStrength();
	class AActor* ShootSpecial(class AActor* A);
	struct FRotator AdjustAim(const struct FFireProperties& FiredAmmunition, const struct FVector& projStart, int AimError);
	bool LineOfSightTo(class AActor* Other);
	void SetMoveTarget(class AActor* NewTarget);
	class AActor* GetMoveTarget();
	bool PressingAltFire();
	bool PressingFire();
	bool NearMoveTarget();
	bool InGodMode();
	void SetViewRotation(const struct FRotator& NewRotation);
	struct FRotator GetViewRotationForFP();
	struct FRotator GetViewRotation();
	bool IsLocalPlayerViewtarget();
	bool IsFirstPerson();
	bool IsLocallyControlled();
	bool IsHumanControlled();
	bool WasPlayerPawn();
	bool IsPlayerPawn();
	bool CheckTauntValid(const FName& Sequence);
	bool FindValidTaunt(FName* Sequence);
	void StopDriving(class AVehicle* V);
	void StartDriving(class AVehicle* V);
	void ForceStandup();
	void InitialPlayer();
	void CheckBob(float DeltaTime, const struct FVector& Y);
	void GetBobParam(float* Bob, float* BobCamera, float* fBobZ, float* fBobCameraZ);
	float GetMaxSpeed();
	struct FVector WeaponBob(float BobDamping);
	struct FVector ModifiedPlayerViewOffset(class AInventory* Inv);
	struct FVector CameraShake();
	struct FVector CalcFPSpectatorDrawOffset(const struct FVector& VOffset, const struct FRotator& rRotation, const struct FVector& vBobOffset);
	struct FVector CalcDrawOffset(class AInventory* Inv);
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void ClimbLadder(class ALadderVolume* L);
	void EndClimbLadder(class ALadderVolume* OldLadder);
	bool CanSplash();
	void SetSprinting(bool bNewIsSprinting);
	bool CanGrabLadder();
	void DropToGround();
	void BecomeViewTarget();
	bool PointOfView();
	void UnPossessed();
	void PossessedBy(class AController* C);
	void ChangeInventoryByQSlot();
	void AddDefaultSkills(bool bQuickslotChange);
	void NotifyEquipItemChanged();
	void NotifyTeamChanged();
	bool PerformDodge(EDoubleClickDir DoubleClickMove, const struct FVector& Dir, const struct FVector& Cross);
	void DropFlag(const string& sReason);
	void HoldFlag(class AActor* FlagActor);
	void PlayTeleportEffect(bool bOut, bool bSound);
	string GetHumanReadableName();
	bool SpectatorSpecialCalcView(class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	bool SpecialCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void SpecialDrawCrosshair(class UCanvas* C);
	void DrawHUD(class UCanvas* Canvas);
	float ModifyThreat(float current, class APawn* Threat);
	bool NeedToTurn(const struct FVector& targ);
	bool FireOnRelease();
	bool IsWeaponSingleFire();
	bool IsFiring();
	float RefireRate();
	bool TooCloseToAttack(class AActor* Other);
	bool CanAttack(class AActor* Other);
	bool RecommendLongRangedAttack();
	void AltFire(float f);
	void Fire(float f);
	bool StopWeaponFiring();
	void ChooseFireAt(class AActor* A);
	class AwWeapon* GetWeaponByInvenGroup(int nInvenGroupID);
	bool HasWeaponByWeaponID(int weaponID);
	bool HasWeapon();
	void Reset();
	void PlayerChangedTeam();
	class AActor* GetPathTo(class AActor* Dest);
	void DeactivateSpawnProtection();
	class APawn* GetAimTarget();
	bool GetIsFiring();
	void SetBaseEyeheight();
	class AwWeapon* GetDemoRecordingWeapon();
	int GetPostureIndex();
	int SpawnBlackbox();
	void SpawnMedals();
	int SpawnSupplyItem();
	void MakeShellEffect_Rechamber();
	void MakeShellEffect();
	void ForcePlayIdle();
	bool CheckProneRotate(int CurYaw, int NewYaw);
	void RefreshCollisionHash();
	void ForceCrouch();
	bool ReachedDestination(class AActor* Goal);
	void PostRender2D(class UCanvas* C, float ScreenLocX, float ScreenLocY);
	struct FVector GetDetailOffset(const struct FVector& vLoc, const struct FRotator& rRot);
	void AddNoWeaponChangeMessage(byte bySlot);
	void SetHeadScale(float NewScale);
	bool EnablePositionSentryGunInstall(struct FVector* v3Normal, int* iUpside);
	bool GetIsEnableProne();
	int Get4WayDirection();
	void SetTwistLook(int twist, int look);
	void SetViewPitch(int NewPitch);
	void STATIC_StaticPrecache(class ALevelInfo* L);
	void ServerStanceChanged(ESpreadStance ss);
	void ServerSetPlayerScoreInfo(int TeamIndex, int Kills, int Assists, int Deaths, int EXPs, int Points, int Scores);
	void ClientSetPlayerScoreInfo();
	void StorePlayerScoreInfo();
	void ServerSetWeaponInfo(int WeaponClassNumber, int WeaponAddPartsID, int WeaponTotalAmmo, int WeaponCurrentAmmo);
	void ClientSetWeaponInfo();
	void StoreWeaponInfo();
	void PlayEquipHitSound();
	void PlayBreathSounds();
	void PlayBreathSound();
	void FootStepping(int side);
	string CanSee();
	string IsNetReady();
	string CheckRelevantTimeOut();
	string HasChannel();
	void ServerStopLoopSoundByActor();
	void ServerStopAllSoundByActor();
	void ServerFmodPlaySound(const string& SoundName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner);
	bool OnReachedDestination(const struct FVector& Dir, class AActor* GoalActor);
};


// Class Engine.Vehicle
// 0x0200 (0x127C - 0x107C)
class AVehicle : public APawn
{
public:
	bool                                               bShowDamageOverlay;                                       // 0x107C(0x0004)
	bool                                               bAutoTurret;                                              // 0x107C(0x0004)
	bool                                               bRemoteControlled;                                        // 0x107C(0x0004)
	bool                                               bEjectDriver;                                             // 0x107C(0x0004)
	bool                                               bTurnInPlace;                                             // 0x107C(0x0004)
	bool                                               bFollowLookDir;                                           // 0x107C(0x0004)
	bool                                               bNonHumanControl;                                         // 0x107C(0x0004)
	bool                                               bStalled;                                                 // 0x107C(0x0004)
	bool                                               bVehicleDestroyed;                                        // 0x107C(0x0004) (Net)
	bool                                               bDropDetail;                                              // 0x107C(0x0004)
	bool                                               bNoFriendlyFire;                                          // 0x107C(0x0004)
	bool                                               bCanHover;                                                // 0x107C(0x0004)
	bool                                               bCanDoTrickJumps;                                         // 0x107C(0x0004)
	bool                                               bDrawMeshInFP;                                            // 0x107C(0x0004) (Edit)
	bool                                               bZeroPCRotOnEntry;                                        // 0x107C(0x0004) (Edit)
	bool                                               bPCRelativeFPRotation;                                    // 0x107C(0x0004)
	bool                                               bWeaponisFiring;                                          // 0x107C(0x0004)
	bool                                               bWeaponisAltFiring;                                       // 0x107C(0x0004)
	bool                                               bTeamLocked;                                              // 0x107C(0x0004) (Net)
	bool                                               bEnterringUnlocks;                                        // 0x107C(0x0004)
	bool                                               bCanFlip;                                                 // 0x107C(0x0004)
	bool                                               bAllowViewChange;                                         // 0x107C(0x0004)
	bool                                               bAllowWeaponToss;                                         // 0x107C(0x0004)
	bool                                               bHUDTrackVehicle;                                         // 0x107C(0x0004) (Edit, Net)
	bool                                               bVehicleShadows;                                          // 0x107C(0x0004)
	bool                                               bDriving;                                                 // 0x107C(0x0004) (Net)
	bool                                               bOldDriving;                                              // 0x107C(0x0004)
	bool                                               bDrawVehicleShadow;                                       // 0x107C(0x0004)
	bool                                               bDrawDriverInTP;                                          // 0x107C(0x0004) (Edit)
	bool                                               bDriverCollideActors;                                     // 0x107C(0x0004) (Edit)
	bool                                               bRelativeExitPos;                                         // 0x107C(0x0004) (Edit)
	bool                                               bDefensive;                                               // 0x107C(0x0004)
	bool                                               Padding00 : 24;                                           // 0x1080(0x0001)
	bool                                               bDesiredBehindView;                                       // 0x1080(0x0004)
	bool                                               bHideRemoteDriver;                                        // 0x1080(0x0004)
	bool                                               bShowChargingBar;                                         // 0x1080(0x0004)
	bool                                               bDriverHoldsFlag;                                         // 0x1080(0x0004)
	bool                                               bCanCarryFlag;                                            // 0x1080(0x0004)
	bool                                               bSpawnProtected;                                          // 0x1080(0x0004)
	bool                                               bFPNoZFromCameraPitch;                                    // 0x1080(0x0004) (Edit)
	bool                                               bHasRadar;                                                // 0x1080(0x0004)
	bool                                               bHasHandbrake;                                            // 0x1080(0x0004)
	bool                                               bScriptedRise;                                            // 0x1080(0x0004)
	bool                                               bKeyVehicle;                                              // 0x1080(0x0004)
	bool                                               bSeparateTurretFocus;                                     // 0x1080(0x0004)
	bool                                               bHighScoreKill;                                           // 0x1080(0x0004) (Edit)
	bool                                               bAdjustDriversHead;                                       // 0x1080(0x0004)
	bool                                               bEnemyLockedOn;                                           // 0x1080(0x0004)
	byte                                               StuckCount;                                               // 0x1084(0x0001)
	byte                                               Team;                                                     // 0x1085(0x0001) (Edit, Net)
	byte                                               OldTeam;                                                  // 0x1086(0x0001)
	byte                                               PrevTeam;                                                 // 0x1087(0x0001)
	struct FRotator                                    PlayerEnterredRotation;                                   // 0x1088(0x000C)
	float                                              EjectMomentum;                                            // 0x1094(0x0004)
	class UClass*                                      AutoTurretControllerClass;                                // 0x1098(0x0004)
	float                                              Steering;                                                 // 0x109C(0x0004) (Edit)
	float                                              Throttle;                                                 // 0x10A0(0x0004) (Edit)
	float                                              Rise;                                                     // 0x10A4(0x0004) (Edit)
	int                                                DriverViewPitch;                                          // 0x10A8(0x0004)
	int                                                DriverViewYaw;                                            // 0x10AC(0x0004)
	float                                              ThrottleTime;                                             // 0x10B0(0x0004)
	float                                              StuckTime;                                                // 0x10B4(0x0004)
	float                                              VehicleMovingTime;                                        // 0x10B8(0x0004)
	struct FVector                                     DrivePos;                                                 // 0x10BC(0x000C) (Edit)
	struct FRotator                                    DriveRot;                                                 // 0x10C8(0x000C) (Edit)
	FName                                              DriveAnim;                                                // 0x10D4(0x0004) (Edit)
	struct FVector[]                                   ExitPositions;                                            // 0x10D8(0x000C) (Edit, NeedCtorLink)
	struct FVector                                     EntryPosition;                                            // 0x10E4(0x000C) (Edit)
	float                                              EntryRadius;                                              // 0x10F0(0x0004) (Edit)
	struct FVector                                     FPCamPos;                                                 // 0x10F4(0x000C) (Edit)
	struct FVector                                     FPCamViewOffset;                                          // 0x1100(0x000C) (Edit)
	float                                              TPCamDistance;                                            // 0x110C(0x0004)
	string                                             CenterSpringForce;                                        // 0x1110(0x000C) (NeedCtorLink)
	int                                                CenterSpringRangePitch;                                   // 0x111C(0x0004)
	int                                                CenterSpringRangeRoll;                                    // 0x1120(0x0004)
	struct FVector                                     TPCamLookat;                                              // 0x1124(0x000C) (Edit)
	struct FVector                                     TPCamWorldOffset;                                         // 0x1130(0x000C) (Edit)
	float                                              DesiredTPCamDistance;                                     // 0x113C(0x0004)
	float                                              LastCameraCalcTime;                                       // 0x1140(0x0004)
	float                                              CameraSpeed;                                              // 0x1144(0x0004)
	struct FRange                                      TPCamDistRange;                                           // 0x1148(0x0008) (Edit)
	int                                                MaxViewYaw;                                               // 0x1150(0x0004) (Edit)
	int                                                MaxViewPitch;                                             // 0x1154(0x0004) (Edit)
	class APawn*                                       Driver;                                                   // 0x1158(0x0004) (Net)
	class ASVehicleFactory*                            ParentFactory;                                            // 0x115C(0x0004)
	class AwArrangeTurret*                             ParentTurret;                                             // 0x1160(0x0004)
	string                                             TransEffects[0x2];                                        // 0x1164(0x000C) (NeedCtorLink)
	class AShadowProjector*                            VehicleShadow;                                            // 0x117C(0x0004)
	float                                              ShadowMaxTraceDist;                                       // 0x1180(0x0004)
	float                                              ShadowCullDistance;                                       // 0x1184(0x0004)
	float                                              MomentumMult;                                             // 0x1188(0x0004)
	float                                              DriverDamageMult;                                         // 0x118C(0x0004)
	string                                             LockOnClassString;                                        // 0x1190(0x000C) (NeedCtorLink)
	float                                              LastLockWarningTime;                                      // 0x119C(0x0004)
	float                                              LockWarningInterval;                                      // 0x11A0(0x0004)
	class AVehicle*                                    NextVehicle;                                              // 0x11A4(0x0004)
	string                                             VehiclePositionString;                                    // 0x11A8(0x000C) (Localized, NeedCtorLink)
	string                                             VehicleNameString;                                        // 0x11B4(0x000C) (Localized, NeedCtorLink, NoImport)
	string                                             VehicleDescription;                                       // 0x11C0(0x000C) (Localized, NeedCtorLink, NoImport)
	class UTexture*                                    TeamBeaconTexture;                                        // 0x11CC(0x0004)
	class UTexture*                                    NoEntryTexture;                                           // 0x11D0(0x0004)
	class UMaterial*                                   TeamBeaconBorderMaterial;                                 // 0x11D4(0x0004)
	class AAIMarker*                                   myMarker;                                                 // 0x11D8(0x0004)
	float                                              MinRunOverSpeed;                                          // 0x11DC(0x0004)
	class UClass*                                      RanOverDamageType;                                        // 0x11E0(0x0004)
	class UClass*                                      CrushedDamageType;                                        // 0x11E4(0x0004)
	FName                                              StolenAnnouncement;                                       // 0x11E8(0x0004)
	float                                              LinkHealMult;                                             // 0x11EC(0x0004)
	float                                              OldSteering;                                              // 0x11F0(0x0004)
	float                                              VehicleLostTime;                                          // 0x11F4(0x0004)
	float                                              TeamUseTime;                                              // 0x11F8(0x0004)
	float                                              PlayerStartTime;                                          // 0x11FC(0x0004)
	float                                              MaxDesireability;                                         // 0x1200(0x0004)
	float                                              AIMoveCheckTime;                                          // 0x1204(0x0004) (Const)
	float                                              ObjectiveGetOutDist;                                      // 0x1208(0x0004)
	FName                                              FlagBone;                                                 // 0x120C(0x0004)
	struct FVector                                     FlagOffset;                                               // 0x1210(0x000C)
	struct FRotator                                    FlagRotation;                                             // 0x121C(0x000C)
	float                                              WheelsScale;                                              // 0x1228(0x0004) (Net)
	float                                              LastHornTime;                                             // 0x122C(0x0004)
	string                                             BulletSounds;                                             // 0x1230(0x000C) (Edit, NeedCtorLink)
	float                                              WaterDamage;                                              // 0x123C(0x0004) (Edit)
	class UClass*                                      VehicleDrowningDamType;                                   // 0x1240(0x0004)
	class UClass*                                      HUDOverlayClass;                                          // 0x1244(0x0004)
	class AActor*                                      HudOverlay;                                               // 0x1248(0x0004)
	struct FVector                                     HUDOverlayOffset;                                         // 0x124C(0x000C) (Edit)
	float                                              HUDOverlayFOV;                                            // 0x1258(0x0004) (Edit)
	class UMaterial*                                   SpawnOverlay[0x2];                                        // 0x125C(0x0004) (Edit)
	struct FSVehicleIcon                               VehicleIcon;                                              // 0x1264(0x0018)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Vehicle");
		return ptr;
	}


	void SetExitViewRotation(class APawn* Driver);
	void SetEntryViewRotation(const struct FRotator& R);
	bool IsArtillery();
	bool ImportantVehicle();
	void ShootMissile(class AwProjectile* P);
	void ShouldTargetMissile(class AwProjectile* P);
	class AActor* AlternateTarget();
	bool VerifyLock(class AActor* Aggressor, class AActor** NewTarget);
	void CheckSuperBerserk();
	class AVehicle*[] GetTurrets();
	void PlayTakeHit(const struct FVector& HitLocation, int Damage, class UClass* DamageType);
	void POVChanged(class APlayerController* PC, bool bBehindViewChanged);
	void IncrementSpree();
	int GetSpree();
	void STATIC_StaticPrecache(class ALevelInfo* L);
	float AdjustedStrength();
	bool HasOccupiedTurret();
	bool IsVehicleEmpty();
	class AAIController* GetBotPassenger();
	class APawn* GetInstigator();
	int NumPassengers();
	void ServerPlayHorn(int HornIndex);
	void StopForceFeedback(const string& EffectName);
	void ClientPlayForceFeedback(const string& EffectName);
	float ChargeBar();
	void Flip(const struct FVector& HitNormal, float ForceScale);
	bool NeedsFlip();
	bool TeamLink(int TeamNum);
	void PrevWeapon();
	void NextWeapon();
	void UnStalled();
	void Stalled();
	class AActor* ShootSpecial(class AActor* A);
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void TeamChanged();
	void SetTeamNum(byte t);
	void NotifyEnemyLostLock();
	void IncomingMissile(class AwProjectile* P);
	void NotifyEnemyLockedOn();
	int GetTeamNum();
	void PlayDying(class UClass* DamageType, const struct FVector& HitLoc, int CollisionPart);
	void PlayTeleportEffect(bool bOut, bool bSound);
	bool PointOfView();
	void LockOnWarning();
	void TakeWaterDamage(float DeltaTime);
	void DrivingStatusChanged();
	class AVehicle* GetMoveTargetFor(class APawn* P);
	class AActor* GetBestEntry(class APawn* P);
	bool IndependentVehicle();
	class AVehicle* OpenPositionFor(class APawn* P);
	void SetReservation(class AController* C);
	bool SpokenFor(class AController* C);
	bool ChangedReservation(class APawn* P);
	float NewReservationCostMultiplier(class APawn* P);
	float ReservationCostMultiplier();
	bool Occupied();
	bool CheckTauntValid(const FName& Sequence);
	bool FindValidTaunt(FName* Sequence);
	bool EncroachingOn(class AActor* Other);
	void RanInto(class AActor* Other);
	void EncroachedBy(class AActor* Other);
	void SetAnimAction(const FName& NewAction, bool bNoBlendAnim);
	void FaceRotation(const struct FRotator& NewRotation, float DeltaTime);
	void UpdateEyeHeight(float DeltaTime);
	bool StopWeaponFiring();
	void VehicleCeaseFire(bool bWasAltFire);
	void VehicleFire(bool bWasAltFire);
	void ClientVehicleCeaseFire(bool bWasAltFire);
	void AltFire(float f);
	void Fire(float f);
	void UsedBy(class APawn* User);
	void EjectDriver();
	void AdjustDriverDamage(class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum);
	void Died(class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation, int CollisionPart, int WeaponType, bool bWallShot);
	void DriverDied();
	void DriverRadiusDamage(float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, const struct FVector& HitLocation);
	bool HealDamage(int Amount, class AController* Healer, class UClass* DamageType);
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	class APawn* CheckForHeadShot(const struct FVector& loc, const struct FVector& ray, float AdditionalScale);
	bool PlaceExitingDriver();
	void DetachDriver(class APawn* P);
	void AttachDriver(class APawn* P);
	void FixPCRotation(class APlayerController* PC);
	void ActivateOverlay(bool bActive);
	void ClientKDriverLeave(class APlayerController* PC);
	void ClientClearController();
	void ClientKDriverEnter(class APlayerController* PC);
	void UpdateTiltForceFeedback();
	void DriverLeft();
	bool KDriverLeave(bool bForceLeave);
	void SetWheelsScale(float NewScale);
	void AttachFlag(class AActor* FlagActor);
	void KDriverEnter(class APawn* P);
	void UnPossessed();
	void PossessedBy(class AController* C);
	void VehicleLocked(class APawn* P);
	bool TryToDrive(class APawn* P);
	class AVehicle* FindEntryVehicle(class APawn* P);
	bool SpectatorSpecialCalcView(class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	bool SpecialCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void SpecialCalcFirstPersonView(class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void SpecialCalcBehindView(class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	struct FVector GetCameraLocationStart();
	void Destroyed_HandleDriver();
	void Destroyed();
	float BotDesireability(class AActor* S, int TeamIndex, class AActor* Objective);
	bool StronglyRecommended(class AActor* S, int TeamIndex, class AActor* Objective);
	void SetInitialState();
	void PostBeginPlay();
	void RegisterTurret();
	bool CheatFly();
	bool CheatGhost();
	bool CheatWalk();
	void Suicide();
	string GetVehiclePositionString();
	void SetBaseEyeheight();
	void PlayerChangedTeam();
	void PreBeginPlay();
};


// Class Engine.SVehicle
// 0x0034 (0x12B0 - 0x127C)
class ASVehicle : public AVehicle
{
public:
	class USVehicleWheel*[]                            Wheels;                                                   // 0x127C(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	bool                                               bVehicleOnGround;                                         // 0x1288(0x0004) (Const)
	float                                              VehicleMass;                                              // 0x128C(0x0004) (Edit)
	float                                              FlipTorque;                                               // 0x1290(0x0004) (Edit)
	float                                              FlipTime;                                                 // 0x1294(0x0004) (Edit)
	float                                              FlipScale;                                                // 0x1298(0x0004)
	float                                              FlipTimeLeft;                                             // 0x129C(0x0004)
	struct FVector                                     FlipAxis;                                                 // 0x12A0(0x000C)
	class UClass*                                      DestroyEffectClass;                                       // 0x12AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicle");
		return ptr;
	}


	void Destroyed();
	void Tick(float DeltaTime);
	void KApplyForce(struct FVector* Force, struct FVector* Torque);
	void Flip(const struct FVector& HitNormal, float ForceScale);
	void SVehicleUpdateParams();
	void JumpOffPawn();
	void PostNetBeginPlay();
	void UpdateVehicle(float DeltaTime);
	void VehicleStateReceived();
	void GraphData(const string& DataName, float DataValue);
};


// Class Engine.StaticMeshActor
// 0x0004 (0x03DC - 0x03D8)
class AStaticMeshActor : public AActor
{
public:
	bool                                               bExactProjectileCollision;                                // 0x03D8(0x0004) (Edit)
	bool                                               ShowInSD;                                                 // 0x03D8(0x0004) (Edit)
	bool                                               ShowInSBT;                                                // 0x03D8(0x0004) (Edit)
	bool                                               ShowInDOM;                                                // 0x03D8(0x0004) (Edit)
	bool                                               ShowInTDM;                                                // 0x03D8(0x0004) (Edit)
	bool                                               ShowInFFA;                                                // 0x03D8(0x0004) (Edit)
	bool                                               _PLEASE_TURN_OFF_STATIC_;                                 // 0x03D8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshActor");
		return ptr;
	}


	void PreBeginPlay();
};


// Class Engine.StaticMeshInstance
// 0x00CC (0x00F8 - 0x002C)
class UStaticMeshInstance : public UObject
{
public:
	byte                                               Padding00[0xCC];                                          // 0x002C(0x00CC) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMeshInstance");
		return ptr;
	}

};


// Class Engine.StaticMesh
// 0x01B8 (0x0210 - 0x0058)
class UStaticMesh : public UPrimitive
{
public:
	float                                              LODStrength;                                              // 0x0058(0x0004) (Edit)
	byte                                               Padding00[0x4];                                           // 0x005C(0x0004) MISSED OFFSET
	struct FStaticMeshLod[]                            LodMesh;                                                  // 0x0060(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	byte                                               Padding01[0xDC];                                          // 0x006C(0x00DC) MISSED OFFSET
	struct FStaticMeshMaterial[]                       Materials;                                                // 0x0148(0x000C) (Edit, EditFixedSize, NeedCtorLink)
	byte                                               Padding02[0x1C];                                          // 0x0154(0x001C) MISSED OFFSET
	bool                                               UseSimpleLineCollision;                                   // 0x0170(0x0004) (Edit)
	bool                                               Padding03 : 31;                                           // 0x0170(0x0001)
	bool                                               UseSimpleBoxCollision;                                    // 0x0174(0x0004) (Edit)
	bool                                               Padding04 : 31;                                           // 0x0174(0x0001)
	bool                                               UseVertexColor;                                           // 0x0178(0x0004) (Edit)
	bool                                               Padding05 : 31;                                           // 0x0178(0x0001)
	bool                                               UseSimpleKarmaCollision;                                  // 0x017C(0x0004) (Edit)
	bool                                               Padding06 : 31;                                           // 0x017C(0x0001)
	bool                                               UseHardwareOccluder;                                      // 0x0180(0x0004) (Edit)
	bool                                               Padding07 : 31;                                           // 0x0180(0x0001)
	bool                                               UseBoundingBoxOcclusion;                                  // 0x0184(0x0004) (Edit)
	bool                                               Padding08 : 31;                                           // 0x0184(0x0001)
	bool                                               OnlyOccluder;                                             // 0x0188(0x0004) (Edit)
	bool                                               Padding09 : 31;                                           // 0x0188(0x0001)
	bool                                               SkipOcclusionTest;                                        // 0x018C(0x0004) (Edit)
	byte                                               Padding10[0x64];                                          // 0x0190(0x0064) MISSED OFFSET
	bool                                               bPenetrate;                                               // 0x01F4(0x0004) (Edit)
	byte                                               Padding11[0x18];                                          // 0x01F8(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StaticMesh");
		return ptr;
	}

};


// Class Engine.SpriteEmitter
// 0x001C (0x04A8 - 0x048C)
class USpriteEmitter : public UParticleEmitter
{
public:
	EParticleDirectionUsage                            UseDirectionAs;                                           // 0x048C(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x048D(0x0003) MISSED OFFSET
	struct FVector                                     ProjectionNormal;                                         // 0x0490(0x000C) (Edit)
	struct FVector                                     RealProjectionNormal;                                     // 0x049C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SpriteEmitter");
		return ptr;
	}

};


// Class Engine.SparkEmitter
// 0x003C (0x04C8 - 0x048C)
class USparkEmitter : public UParticleEmitter
{
public:
	struct FRange                                      LineSegmentsRange;                                        // 0x048C(0x0008) (Edit)
	struct FRange                                      TimeBeforeVisibleRange;                                   // 0x0494(0x0008) (Edit)
	struct FRange                                      TimeBetweenSegmentsRange;                                 // 0x049C(0x0008) (Edit)
	struct FParticleSparkData[]                        SparkData;                                                // 0x04A4(0x000C) (Transient, NeedCtorLink)
	class UVertexBuffer*                               VertexBuffer;                                             // 0x04B0(0x0004) (Transient)
	class UIndexBuffer*                                IndexBuffer;                                              // 0x04B4(0x0004) (Transient)
	int                                                NumSegments;                                              // 0x04B8(0x0004) (Transient)
	int                                                VerticesPerParticle;                                      // 0x04BC(0x0004) (Transient)
	int                                                IndicesPerParticle;                                       // 0x04C0(0x0004) (Transient)
	int                                                PrimitivesPerParticle;                                    // 0x04C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SparkEmitter");
		return ptr;
	}

};


// Class Engine.AnimNotify
// 0x0004 (0x0030 - 0x002C)
class UAnimNotify : public UObject
{
public:
	int                                                Revision;                                                 // 0x002C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify");
		return ptr;
	}

};


// Class Engine.AnimNotify_MatSubAction
// 0x0004 (0x0034 - 0x0030)
class UAnimNotify_MatSubAction : public UAnimNotify
{
public:
	class UMatSubAction*                               SubAction;                                                // 0x0030(0x0004) (Edit, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_MatSubAction");
		return ptr;
	}

};


// Class Engine.AnimNotify_Scripted
// 0x0000 (0x0030 - 0x0030)
class UAnimNotify_Scripted : public UAnimNotify
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Scripted");
		return ptr;
	}


	void Notify(class AActor* Owner);
};


// Class Engine.AnimNotify_Script
// 0x0004 (0x0034 - 0x0030)
class UAnimNotify_Script : public UAnimNotify
{
public:
	FName                                              NotifyName;                                               // 0x0030(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Script");
		return ptr;
	}

};


// Class Engine.AnimNotify_LIPSinc
// 0x0010 (0x0040 - 0x0030)
class UAnimNotify_LIPSinc : public UAnimNotify
{
public:
	FName                                              LIPSincAnimName;                                          // 0x0030(0x0004) (Edit)
	float                                              Volume;                                                   // 0x0034(0x0004) (Edit)
	int                                                Radius;                                                   // 0x0038(0x0004) (Edit)
	float                                              Pitch;                                                    // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_LIPSinc");
		return ptr;
	}

};


// Class Engine.AnimNotify_Sound
// 0x000C (0x003C - 0x0030)
class UAnimNotify_Sound : public UAnimNotify
{
public:
	class USound*                                      Sound;                                                    // 0x0030(0x0004) (Edit)
	float                                              Volume;                                                   // 0x0034(0x0004) (Edit)
	int                                                Radius;                                                   // 0x0038(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Sound");
		return ptr;
	}

};


// Class Engine.AnimNotify_DestroyEffect
// 0x0008 (0x0038 - 0x0030)
class UAnimNotify_DestroyEffect : public UAnimNotify
{
public:
	FName                                              DestroyTag;                                               // 0x0030(0x0004) (Edit)
	bool                                               bExpireParticles;                                         // 0x0034(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_DestroyEffect");
		return ptr;
	}

};


// Class Engine.AnimNotify_Effect
// 0x003C (0x006C - 0x0030)
class UAnimNotify_Effect : public UAnimNotify
{
public:
	class UClass*                                      EffectClass;                                              // 0x0030(0x0004) (Edit)
	FName                                              Bone;                                                     // 0x0034(0x0004) (Edit)
	struct FVector                                     OffsetLocation;                                           // 0x0038(0x000C) (Edit)
	struct FRotator                                    OffsetRotation;                                           // 0x0044(0x000C) (Edit)
	bool                                               Attach;                                                   // 0x0050(0x0004) (Edit)
	FName                                              Tag;                                                      // 0x0054(0x0004) (Edit)
	float                                              DrawScale;                                                // 0x0058(0x0004) (Edit)
	struct FVector                                     DrawScale3D;                                              // 0x005C(0x000C) (Edit)
	class AActor*                                      LastSpawnedEffect;                                        // 0x0068(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnimNotify_Effect");
		return ptr;
	}

};


// Class Engine.SkeletalMeshInstance
// 0x032C (0x03AC - 0x0080)
class USkeletalMeshInstance : public ULodMeshInstance
{
public:
	byte                                               Padding00[0x32C];                                         // 0x0080(0x032C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMeshInstance");
		return ptr;
	}

};


// Class Engine.SkeletalMesh
// 0x0214 (0x0358 - 0x0144)
class USkeletalMesh : public ULodMesh
{
public:
	byte                                               Padding00[0x214];                                         // 0x0144(0x0214) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkeletalMesh");
		return ptr;
	}

};


// Class Engine.Animation
// 0x0000 (0x002C - 0x002C)
class UAnimation : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Animation");
		return ptr;
	}

};


// Class Engine.MeshAnimation
// 0x002C (0x0058 - 0x002C)
class UMeshAnimation : public UObject
{
public:
	byte                                               Padding00[0x2C];                                          // 0x002C(0x002C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshAnimation");
		return ptr;
	}

};


// Class Engine.ShadowBitmapMaterial
// 0x0030 (0x008C - 0x005C)
class UShadowBitmapMaterial : public UBitmapMaterial
{
public:
	struct FPointer                                    TextureInterfaces[0x2];                                   // 0x005C(0x0004) (Const, Transient)
	class AActor*                                      ShadowActor;                                              // 0x0064(0x0004)
	struct FVector                                     LightDirection;                                           // 0x0068(0x000C)
	float                                              LightDistance;                                            // 0x0074(0x0004)
	float                                              LightFOV;                                                 // 0x0078(0x0004)
	bool                                               Dirty;                                                    // 0x007C(0x0004)
	bool                                               Invalid;                                                  // 0x007C(0x0004)
	bool                                               bBlobShadow;                                              // 0x007C(0x0004)
	float                                              CullDistance;                                             // 0x0080(0x0004)
	byte                                               ShadowDarkness;                                           // 0x0084(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0085(0x0003) MISSED OFFSET
	class UBitmapMaterial*                             BlobShadow;                                               // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowBitmapMaterial");
		return ptr;
	}

};


// Class Engine.Security
// 0x001C (0x0448 - 0x042C)
class ASecurity : public AInfo
{
public:
	int                                                LastType;                                                 // 0x042C(0x0004)
	string                                             LastParams[0x2];                                          // 0x0430(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Security");
		return ptr;
	}


	void ClientMessage(const string& S);
	void BadClient(int Code, const string& Data);
	void Perform(int SecType, const string& Param1, const string& Param2, float TimeOut);
	void ServerCallback(int SecType, const string& Data);
	void ClientPerform(int SecType, const string& Param1, const string& Param2);
	void LocalPerform(int SecType, const string& Param1, const string& Param2, string[]* Results);
	void NativePerform(int SecType, const string& Param1, const string& Param2);
};


// Class Engine.ScriptedTexture
// 0x0018 (0x0074 - 0x005C)
class UScriptedTexture : public UBitmapMaterial
{
public:
	struct FPointer                                    RenderTarget;                                             // 0x005C(0x0004) (Const, Transient)
	class UViewport*                                   RenderViewport;                                           // 0x0060(0x0004) (Const, Transient)
	class AActor*                                      Client;                                                   // 0x0064(0x0004)
	int                                                Revision;                                                 // 0x0068(0x0004) (Transient)
	int                                                OldRevision;                                              // 0x006C(0x0004) (Const, Transient)
	int                                                Invalid;                                                  // 0x0070(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScriptedTexture");
		return ptr;
	}


	void DrawPortal(int X, int Y, int width, int Height, class AActor* CamActor, const struct FVector& CamLocation, const struct FRotator& CamRotation, int FOV, bool ClearZ);
	void DrawTile(float X, float Y, float XL, float YL, float U, float V, float UL, float VL, class UMaterial* Material, const struct FColor& Color);
	void TextSize(const string& Text, class UFont* Font, int* width, int* Height);
	void DrawText(int startX, int startY, const string& Text, class UFont* Font, const struct FColor& Color);
	void SetSize(int width, int Height);
};


// Class Engine.LookTarget
// 0x0000 (0x03D8 - 0x03D8)
class ALookTarget : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LookTarget");
		return ptr;
	}

};


// Class Engine.MatObject
// 0x0000 (0x002C - 0x002C)
class UMatObject : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatObject");
		return ptr;
	}

};


// Class Engine.MatSubAction
// 0x0028 (0x0054 - 0x002C)
class UMatSubAction : public UMatObject
{
public:
	float                                              Delay;                                                    // 0x002C(0x0004) (Edit)
	float                                              Duration;                                                 // 0x0030(0x0004) (Edit)
	class UTexture*                                    Icon;                                                     // 0x0034(0x0004)
	ESAStatus                                          Status;                                                   // 0x0038(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0039(0x0003) MISSED OFFSET
	string                                             Desc;                                                     // 0x003C(0x000C) (Localized, NeedCtorLink)
	float                                              PctStarting;                                              // 0x0048(0x0004) (Transient)
	float                                              PctEnding;                                                // 0x004C(0x0004) (Transient)
	float                                              PctDuration;                                              // 0x0050(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatSubAction");
		return ptr;
	}

};


// Class Engine.SubActionSubTitle
// 0x0004 (0x0058 - 0x0054)
class USubActionSubTitle : public UMatSubAction
{
public:
	ESST_Mode                                          SubTitleMode;                                             // 0x0054(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionSubTitle");
		return ptr;
	}

};


// Class Engine.SubActionSceneSpeed
// 0x0008 (0x005C - 0x0054)
class USubActionSceneSpeed : public UMatSubAction
{
public:
	struct FRange                                      SceneSpeed;                                               // 0x0054(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionSceneSpeed");
		return ptr;
	}

};


// Class Engine.SubActionGameSpeed
// 0x0008 (0x005C - 0x0054)
class USubActionGameSpeed : public UMatSubAction
{
public:
	struct FRange                                      GameSpeed;                                                // 0x0054(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionGameSpeed");
		return ptr;
	}

};


// Class Engine.SubActionOrientation
// 0x0038 (0x008C - 0x0054)
class USubActionOrientation : public UMatSubAction
{
public:
	struct UMatObject_FOrientation                     CamOrientation;                                           // 0x0054(0x0038) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionOrientation");
		return ptr;
	}

};


// Class Engine.SubActionCameraShake
// 0x0018 (0x006C - 0x0054)
class USubActionCameraShake : public UMatSubAction
{
public:
	struct FRangeVector                                Shake;                                                    // 0x0054(0x0018) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionCameraShake");
		return ptr;
	}

};


// Class Engine.SubActionFOV
// 0x0008 (0x005C - 0x0054)
class USubActionFOV : public UMatSubAction
{
public:
	struct FRange                                      FOV;                                                      // 0x0054(0x0008) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionFOV");
		return ptr;
	}

};


// Class Engine.SubActionTrigger
// 0x0004 (0x0058 - 0x0054)
class USubActionTrigger : public UMatSubAction
{
public:
	FName                                              EventName;                                                // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionTrigger");
		return ptr;
	}

};


// Class Engine.SubActionFade
// 0x0008 (0x005C - 0x0054)
class USubActionFade : public UMatSubAction
{
public:
	struct FColor                                      FadeColor;                                                // 0x0054(0x0004) (Edit)
	bool                                               bFadeOut;                                                 // 0x0058(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionFade");
		return ptr;
	}

};


// Class Engine.MatDemoActor
// 0x0000 (0x03D8 - 0x03D8)
class AMatDemoActor : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatDemoActor");
		return ptr;
	}

};


// Class Engine.MatAction
// 0x0060 (0x008C - 0x002C)
class UMatAction : public UMatObject
{
public:
	class AInterpolationPoint*                         IntPoint;                                                 // 0x002C(0x0004) (Edit)
	string                                             Comment;                                                  // 0x0030(0x000C) (Edit, NeedCtorLink)
	float                                              Duration;                                                 // 0x003C(0x0004) (Edit)
	class UMatSubAction*[]                             SubActions;                                               // 0x0040(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	bool                                               bSmoothCorner;                                            // 0x004C(0x0004) (Edit)
	struct FVector                                     StartControlPoint;                                        // 0x0050(0x000C) (Edit)
	struct FVector                                     EndControlPoint;                                          // 0x005C(0x000C) (Edit)
	bool                                               bConstantPathVelocity;                                    // 0x0068(0x0004) (Edit)
	float                                              PathVelocity;                                             // 0x006C(0x0004) (Edit)
	float                                              PathLength;                                               // 0x0070(0x0004)
	struct FVector[]                                   SampleLocations;                                          // 0x0074(0x000C) (Transient, NeedCtorLink)
	float                                              PctStarting;                                              // 0x0080(0x0004) (Transient)
	float                                              PctEnding;                                                // 0x0084(0x0004) (Transient)
	float                                              PctDuration;                                              // 0x0088(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatAction");
		return ptr;
	}

};


// Class Engine.ActionPause
// 0x0000 (0x008C - 0x008C)
class UActionPause : public UMatAction
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActionPause");
		return ptr;
	}

};


// Class Engine.ActionMoveCamera
// 0x0004 (0x0090 - 0x008C)
class UActionMoveCamera : public UMatAction
{
public:
	EPathStyle                                         PathStyle;                                                // 0x008C(0x0001) (Edit, Config)
	byte                                               Padding00[0x3];                                           // 0x008D(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActionMoveCamera");
		return ptr;
	}

};


// Class Engine.MeshObject
// 0x0000 (0x002C - 0x002C)
class UMeshObject : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshObject");
		return ptr;
	}

};


// Class Engine.SceneManager
// 0x0108 (0x0534 - 0x042C)
class ASceneManager : public AInfo
{
public:
	class UMatAction*[]                                Actions;                                                  // 0x042C(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	EAffect                                            Affect;                                                   // 0x0438(0x0001) (Edit, Config)
	byte                                               Padding00[0x3];                                           // 0x0439(0x0003) MISSED OFFSET
	class AActor*                                      AffectedActor;                                            // 0x043C(0x0004) (Edit)
	bool                                               bLooping;                                                 // 0x0440(0x0004) (Edit)
	bool                                               bCinematicView;                                           // 0x0440(0x0004) (Edit)
	FName                                              PlayerScriptTag;                                          // 0x0444(0x0004) (Edit)
	FName                                              NextSceneTag;                                             // 0x0448(0x0004) (Edit)
	FName                                              EventStart;                                               // 0x044C(0x0004) (Edit)
	FName                                              EventEnd;                                                 // 0x0450(0x0004) (Edit)
	bool                                               bHideHUD;                                                 // 0x0454(0x0004) (Edit)
	float                                              PctSceneComplete;                                         // 0x0458(0x0004) (Transient)
	class UMatAction*                                  CurrentAction;                                            // 0x045C(0x0004) (Transient)
	float                                              SceneSpeed;                                               // 0x0460(0x0004) (Transient)
	float                                              TotalSceneTime;                                           // 0x0464(0x0004) (Transient)
	class AActor*                                      Viewer;                                                   // 0x0468(0x0004) (Transient)
	class APawn*                                       OldPawn;                                                  // 0x046C(0x0004) (Transient)
	bool                                               bIsRunning;                                               // 0x0470(0x0004) (Transient)
	bool                                               bIsSceneStarted;                                          // 0x0470(0x0004) (Transient)
	float                                              CurrentTime;                                              // 0x0474(0x0004) (Transient)
	struct FVector[]                                   SampleLocations;                                          // 0x0478(0x000C) (Transient, NeedCtorLink)
	class UMatSubAction*[]                             SubActions;                                               // 0x0484(0x000C) (Transient, NeedCtorLink)
	struct ASceneManager_FOrientation                  CamOrientation;                                           // 0x0490(0x0038) (Transient)
	struct ASceneManager_FOrientation                  PrevOrientation;                                          // 0x04C8(0x0038) (Transient)
	struct FInterpolator                               RotInterpolator;                                          // 0x0500(0x0018) (Transient)
	struct FVector                                     CameraShake;                                              // 0x0518(0x000C) (Transient)
	struct FVector                                     DollyOffset;                                              // 0x0524(0x000C) (Transient)
	bool                                               bAbortCinematic;                                          // 0x0530(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneManager");
		return ptr;
	}


	void SceneEnded();
	void SceneStarted();
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void BeginPlay();
	void AbortScene();
	float GetTotalSceneTime();
};


// Class Engine.RenderResource
// 0x0004 (0x0030 - 0x002C)
class URenderResource : public UObject
{
public:
	byte                                               Padding00[0x4];                                           // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RenderResource");
		return ptr;
	}

};


// Class Engine.SkinVertexBuffer
// 0x000C (0x003C - 0x0030)
class USkinVertexBuffer : public URenderResource
{
public:
	byte                                               Padding00[0xC];                                           // 0x0030(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkinVertexBuffer");
		return ptr;
	}

};


// Class Engine.IndexBuffer
// 0x000C (0x003C - 0x0030)
class UIndexBuffer : public URenderResource
{
public:
	byte                                               Padding00[0xC];                                           // 0x0030(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.IndexBuffer");
		return ptr;
	}

};


// Class Engine.VertexStreamBase
// 0x000C (0x003C - 0x0030)
class UVertexStreamBase : public URenderResource
{
public:
	byte                                               Padding00[0xC];                                           // 0x0030(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexStreamBase");
		return ptr;
	}

};


// Class Engine.VertexBuffer
// 0x000C (0x0048 - 0x003C)
class UVertexBuffer : public UVertexStreamBase
{
public:
	byte                                               Padding00[0xC];                                           // 0x003C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexBuffer");
		return ptr;
	}

};


// Class Engine.VertexStreamPosNormTex
// 0x000C (0x0048 - 0x003C)
class UVertexStreamPosNormTex : public UVertexStreamBase
{
public:
	byte                                               Padding00[0xC];                                           // 0x003C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexStreamPosNormTex");
		return ptr;
	}

};


// Class Engine.VertexStreamUV
// 0x000C (0x0048 - 0x003C)
class UVertexStreamUV : public UVertexStreamBase
{
public:
	byte                                               Padding00[0xC];                                           // 0x003C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexStreamUV");
		return ptr;
	}

};


// Class Engine.VertexStreamCOLOR
// 0x000C (0x0048 - 0x003C)
class UVertexStreamCOLOR : public UVertexStreamBase
{
public:
	byte                                               Padding00[0xC];                                           // 0x003C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexStreamCOLOR");
		return ptr;
	}

};


// Class Engine.VertexStreamVECTOR
// 0x000C (0x0048 - 0x003C)
class UVertexStreamVECTOR : public UVertexStreamBase
{
public:
	byte                                               Padding00[0xC];                                           // 0x003C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexStreamVECTOR");
		return ptr;
	}

};


// Class Engine.ProjectorMaterial
// 0x0094 (0x00D8 - 0x0044)
class UProjectorMaterial : public URenderedMaterial
{
public:
	class UBitmapMaterial*                             Gradient;                                                 // 0x0044(0x0004) (Const, Transient)
	class UMaterial*                                   Projected;                                                // 0x0048(0x0004) (Const, Transient)
	class UMaterial*                                   BaseMaterial;                                             // 0x004C(0x0004) (Const, Transient)
	byte                                               BaseMaterialBlending;                                     // 0x0050(0x0001) (Const, Transient)
	byte                                               FrameBufferBlending;                                      // 0x0051(0x0001) (Const, Transient)
	byte                                               Padding00[0x2];                                           // 0x0052(0x0002) MISSED OFFSET
	struct FMatrix                                     Matrix;                                                   // 0x0054(0x0040) (Const, Transient)
	struct FMatrix                                     GradientMatrix;                                           // 0x0094(0x0040) (Const, Transient)
	bool                                               bProjected;                                               // 0x00D4(0x0004) (Const, Transient)
	bool                                               bProjectOnUnlit;                                          // 0x00D4(0x0004) (Const, Transient)
	bool                                               bGradient;                                                // 0x00D4(0x0004) (Const, Transient)
	bool                                               bProjectOnAlpha;                                          // 0x00D4(0x0004) (Const, Transient)
	bool                                               bProjectOnBackfaces;                                      // 0x00D4(0x0004) (Const, Transient)
	bool                                               bStaticProjector;                                         // 0x00D4(0x0004) (Const, Transient)
	bool                                               bTwoSided;                                                // 0x00D4(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProjectorMaterial");
		return ptr;
	}

};


// Class Engine.Projector
// 0x0190 (0x0568 - 0x03D8)
class AProjector : public AActor
{
public:
	EProjectorBlending                                 MaterialBlendingOp;                                       // 0x03D8(0x0001) (Edit)
	EProjectorBlending                                 FrameBufferBlendingOp;                                    // 0x03D9(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x03DA(0x0002) MISSED OFFSET
	class UMaterial*                                   ProjTexture;                                              // 0x03DC(0x0004) (Edit)
	int                                                FOV;                                                      // 0x03E0(0x0004) (Edit)
	int                                                MaxTraceDistance;                                         // 0x03E4(0x0004) (Edit)
	bool                                               bProjectOnUnlit;                                          // 0x03E8(0x0004) (Edit)
	bool                                               bGradient;                                                // 0x03E8(0x0004) (Edit)
	bool                                               bProjectOnBackfaces;                                      // 0x03E8(0x0004) (Edit)
	bool                                               bProjectOnAlpha;                                          // 0x03E8(0x0004) (Edit)
	bool                                               bProjectOnParallelBSP;                                    // 0x03E8(0x0004) (Edit)
	bool                                               bProjectBSP;                                              // 0x03E8(0x0004) (Edit)
	bool                                               bProjectTerrain;                                          // 0x03E8(0x0004) (Edit)
	bool                                               bProjectStaticMesh;                                       // 0x03E8(0x0004) (Edit)
	bool                                               bProjectParticles;                                        // 0x03E8(0x0004) (Edit)
	bool                                               bProjectActor;                                            // 0x03E8(0x0004) (Edit)
	bool                                               bLevelStatic;                                             // 0x03E8(0x0004) (Edit)
	bool                                               bClipBSP;                                                 // 0x03E8(0x0004) (Edit)
	bool                                               bClipStaticMesh;                                          // 0x03E8(0x0004) (Edit)
	FName                                              ProjectTag;                                               // 0x03EC(0x0004) (Edit)
	bool                                               bDynamicAttach;                                           // 0x03F0(0x0004) (Edit)
	bool                                               bNoProjectOnOwner;                                        // 0x03F0(0x0004) (Edit)
	float                                              FadeInTime;                                               // 0x03F4(0x0004)
	struct FPlane                                      FrustumPlanes[0x6];                                       // 0x03F8(0x0010) (Const, Transient)
	struct FVector                                     FrustumVertices[0x8];                                     // 0x0458(0x000C) (Const, Transient)
	struct FBox                                        Box;                                                      // 0x04B8(0x001C) (Const, Transient)
	struct FProjectorRenderInfoPtr                     RenderInfo;                                               // 0x04D4(0x0004) (Const, Transient)
	class UTexture*                                    GradientTexture;                                          // 0x04D8(0x0004)
	struct FMatrix                                     GradientMatrix;                                           // 0x04DC(0x0040) (Transient)
	struct FMatrix                                     Matrix;                                                   // 0x051C(0x0040) (Transient)
	struct FVector                                     OldLocation;                                              // 0x055C(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Projector");
		return ptr;
	}


	void UpdateSunLight(const struct FVector& SunDir);
	void LightUpdate(class AActor*[] LightSources);
	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other);
	void PostBeginPlay();
	void DetachActor(class AActor* A);
	void AttachActor(class AActor* A);
	void AbandonProjector(float Lifetime);
	void DetachProjector(bool Force);
	void AttachProjector(float FadeInTime);
};


// Class Engine.ProjectorPrimitive
// 0x0000 (0x0058 - 0x0058)
class UProjectorPrimitive : public UPrimitive
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProjectorPrimitive");
		return ptr;
	}

};


// Class Engine.PostProcessEffect
// 0x0008 (0x0034 - 0x002C)
class UPostProcessEffect : public UObject
{
public:
	int                                                PriorityEffect;                                           // 0x002C(0x0004)
	bool                                               Active;                                                   // 0x0030(0x0004)
	bool                                               NeedFXAA;                                                 // 0x0030(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PostProcessEffect");
		return ptr;
	}

};


// Class Engine.GlowEffect
// 0x0018 (0x004C - 0x0034)
class UGlowEffect : public UPostProcessEffect
{
public:
	struct FPointer                                    DownSampledTex;                                           // 0x0034(0x0004) (Const, Transient)
	struct FPointer                                    DownSampledTex2;                                          // 0x0038(0x0004) (Const, Transient)
	struct FPointer                                    HorizontalBlur;                                           // 0x003C(0x0004) (Const, Transient)
	struct FPointer                                    VerticalBlur;                                             // 0x0040(0x0004) (Const, Transient)
	struct FPointer                                    TempTex0;                                                 // 0x0044(0x0004) (Const, Transient)
	class UTexture*                                    ShaftsMask;                                               // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GlowEffect");
		return ptr;
	}

};


// Class Engine.SSAOEffect
// 0x0014 (0x0048 - 0x0034)
class USSAOEffect : public UPostProcessEffect
{
public:
	struct FPointer                                    NormalDepthTarget;                                        // 0x0034(0x0004) (Const, Transient)
	struct FPointer                                    RandomTarget;                                             // 0x0038(0x0004) (Const, Transient)
	struct FPointer                                    HBlurTarget;                                              // 0x003C(0x0004) (Const, Transient)
	struct FPointer                                    VBlurTarget;                                              // 0x0040(0x0004) (Const, Transient)
	struct FPointer                                    SourceTarget;                                             // 0x0044(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SSAOEffect");
		return ptr;
	}

};


// Class Engine.FinalEffect
// 0x00A4 (0x00D8 - 0x0034)
class UFinalEffect : public UPostProcessEffect
{
public:
	class UTexture*                                    NoiseMap;                                                 // 0x0034(0x0004)
	struct FPointer                                    FinalTarget;                                              // 0x0038(0x0004) (Const, Transient)
	struct FPlane                                      CurrentBase;                                              // 0x003C(0x0010)
	struct FPlane                                      CurrentBalance;                                           // 0x004C(0x0010)
	struct FPlane                                      CurrentHighlight;                                         // 0x005C(0x0010)
	float                                              CurrentFinalAdd;                                          // 0x006C(0x0004)
	byte                                               PrevIndex;                                                // 0x0070(0x0001)
	byte                                               CurrentIndex;                                             // 0x0071(0x0001)
	byte                                               Padding00[0x2];                                           // 0x0072(0x0002) MISSED OFFSET
	struct FPlane                                      Base;                                                     // 0x0074(0x0010) (Edit)
	struct FPlane                                      Balance;                                                  // 0x0084(0x0010) (Edit)
	struct FPlane                                      Highlight;                                                // 0x0094(0x0010) (Edit)
	float                                              FinalAdd;                                                 // 0x00A4(0x0004) (Edit)
	byte                                               bySet;                                                    // 0x00A8(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x00A9(0x0003) MISSED OFFSET
	string                                             strMapName;                                               // 0x00AC(0x000C) (Edit, EditConst, NeedCtorLink)
	struct FColorPreset[]                              aPresets;                                                 // 0x00B8(0x000C) (NeedCtorLink)
	struct FLevelColorPreset[]                         LevelPresets;                                             // 0x00C4(0x000C) (NeedCtorLink)
	bool                                               bFadeEnd;                                                 // 0x00D0(0x0004)
	bool                                               bToBlackWhite;                                            // 0x00D0(0x0004)
	float                                              fFadeTime;                                                // 0x00D4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FinalEffect");
		return ptr;
	}


	void FadeToColor(float inFadeTime);
	void FadeToBlackWhite(float inFadeTime);
	void InitNewPresets();
	void InitPresets();
};


// Class Engine.DripEffect
// 0x0018 (0x004C - 0x0034)
class UDripEffect : public UPostProcessEffect
{
public:
	class UTexture*                                    DripNormal;                                               // 0x0034(0x0004)
	struct FPointer                                    DripTarget;                                               // 0x0038(0x0004) (Const, Transient)
	struct FWaterDrop[]                                WaterDrops;                                               // 0x003C(0x000C) (NeedCtorLink)
	int                                                WaterDropMaxNum;                                          // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DripEffect");
		return ptr;
	}

};


// Class Engine.MotionBlurEffect
// 0x0014 (0x0048 - 0x0034)
class UMotionBlurEffect : public UPostProcessEffect
{
public:
	struct FPointer                                    BlurTargets[0x5];                                         // 0x0034(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MotionBlurEffect");
		return ptr;
	}

};


// Class Engine.DOFEffect
// 0x0018 (0x004C - 0x0034)
class UDOFEffect : public UPostProcessEffect
{
public:
	struct FPointer                                    BlurFactor;                                               // 0x0034(0x0004) (Const, Transient)
	struct FPointer                                    BlurFactorDown;                                           // 0x0038(0x0004) (Const, Transient)
	struct FPointer                                    BlurTarget;                                               // 0x003C(0x0004) (Const, Transient)
	struct FPointer                                    DownSampledTex;                                           // 0x0040(0x0004) (Const, Transient)
	struct FPointer                                    HorizontalBlur;                                           // 0x0044(0x0004) (Const, Transient)
	struct FPointer                                    VerticalBlur;                                             // 0x0048(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DOFEffect");
		return ptr;
	}

};


// Class Engine.PlayInfo
// 0x003C (0x0068 - 0x002C)
class UPlayInfo : public UObject
{
public:
	struct FPlayInfoData[]                             Settings;                                                 // 0x002C(0x000C) (Const, NeedCtorLink)
	class UClass*[]                                    InfoClasses;                                              // 0x0038(0x000C) (Const, NeedCtorLink)
	int[]                                              ClassStack;                                               // 0x0044(0x000C) (Const, NeedCtorLink)
	string[]                                           Groups;                                                   // 0x0050(0x000C) (Const, NeedCtorLink)
	string                                             LastError;                                                // 0x005C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayInfo");
		return ptr;
	}


	void SplitStringToArray(const string& Source, const string& Delim, string[]* Parts);
	class UClass* GetGameInfo();
	bool Init(class UClass*[] Classes, bool bStrict);
	void Dump(const string& Group);
	void Sort(byte SortingMethod);
	int FindIndex(const string& SettingName);
	bool GetSettings(const string& GroupName, struct FPlayInfoData[]* GroupSettings);
	bool StoreSetting(int Index, const string& NewVal, const string& RangeData);
	bool SaveSettings();
	bool AddSetting(const string& Group, const string& PropertyName, const string& Description, byte SecLevel, byte Weight, const string& RenderType, const string& Extras, const string& ExtraPrivs, bool bMultiPlayerOnly, bool bAdvanced);
	bool PopClass();
	bool RemoveClass(class UClass* RemovingClass);
	bool AddClass(class UClass* AddingClass);
	bool Clear();
};


// Class Engine.Player
// 0x0048 (0x0074 - 0x002C)
class UPlayer : public UObject
{
public:
	struct FPointer                                    vfOut;                                                    // 0x002C(0x0004) (Const, Native, Transient)
	struct FPointer                                    vfExec;                                                   // 0x0030(0x0004) (Const, Native, Transient)
	class APlayerController*                           Actor;                                                    // 0x0034(0x0004) (Const, Transient)
	class APlayerController*                           OldActor;                                                 // 0x0038(0x0004) (Const, Transient)
	class UConsole*                                    Console;                                                  // 0x003C(0x0004) (Transient)
	bool                                               bWindowsMouseAvailable;                                   // 0x0040(0x0004) (Const, Transient)
	bool                                               bShowWindowsMouse;                                        // 0x0040(0x0004)
	float                                              WindowsMouseX;                                            // 0x0044(0x0004) (Const, Transient)
	float                                              WindowsMouseY;                                            // 0x0048(0x0004) (Const, Transient)
	int                                                CurrentVoiceBandwidth;                                    // 0x004C(0x0004) (Transient)
	int                                                CurrentNetSpeed;                                          // 0x0050(0x0004) (Const)
	int                                                ConfiguredInternetSpeed;                                  // 0x0054(0x0004)
	int                                                ConfiguredLanSpeed;                                       // 0x0058(0x0004)
	byte                                               SelectedCursor;                                           // 0x005C(0x0001)
	byte                                               Padding00[0x3];                                           // 0x005D(0x0003) MISSED OFFSET
	class UInteractionMaster*                          InteractionMaster;                                        // 0x0060(0x0004) (Transient)
	class UInteraction*[]                              LocalInteractions;                                        // 0x0064(0x000C) (Transient, NeedCtorLink)
	class UBaseGUIController*                          GUIController;                                            // 0x0070(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Player");
		return ptr;
	}

};


// Class Engine.PendingLevel
// 0x008C (0x00B8 - 0x002C)
class UPendingLevel : public UObject
{
public:
	byte                                               Padding00[0x8C];                                          // 0x002C(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PendingLevel");
		return ptr;
	}

};


// Class Engine.ServerPendingLevel
// 0x004C (0x0104 - 0x00B8)
class UServerPendingLevel : public UPendingLevel
{
public:
	byte                                               Padding00[0x4C];                                          // 0x00B8(0x004C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ServerPendingLevel");
		return ptr;
	}

};


// Class Engine.NetPendingLevel
// 0x000C (0x00C4 - 0x00B8)
class UNetPendingLevel : public UPendingLevel
{
public:
	byte                                               Padding00[0xC];                                           // 0x00B8(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetPendingLevel");
		return ptr;
	}

};


// Class Engine.ParticleMaterial
// 0x0290 (0x02D4 - 0x0044)
class UParticleMaterial : public URenderedMaterial
{
public:
	int                                                ParticleBlending;                                         // 0x0044(0x0004) (Const)
	int                                                BlendBetweenSubdivisions;                                 // 0x0048(0x0004) (Const)
	int                                                RenderTwoSided;                                           // 0x004C(0x0004) (Const)
	int                                                UseTFactor;                                               // 0x0050(0x0004) (Const)
	class UBitmapMaterial*                             BitmapMaterial;                                           // 0x0054(0x0004) (Const)
	int                                                AlphaTest;                                                // 0x0058(0x0004) (Const)
	int                                                AlphaRef;                                                 // 0x005C(0x0004) (Const)
	int                                                ZTest;                                                    // 0x0060(0x0004) (Const)
	int                                                ZWrite;                                                   // 0x0064(0x0004) (Const)
	int                                                Wireframe;                                                // 0x0068(0x0004) (Const)
	bool                                               AcceptsProjectors;                                        // 0x006C(0x0004) (Transient)
	int                                                NumProjectors;                                            // 0x0070(0x0004) (Const, Transient)
	struct FParticleProjectorInfo                      Projectors[0x8];                                          // 0x0074(0x004C) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ParticleMaterial");
		return ptr;
	}

};


// Class Engine.Emitter
// 0x0090 (0x0468 - 0x03D8)
class AEmitter : public AActor
{
public:
	class UParticleEmitter*[]                          Emitters;                                                 // 0x03D8(0x000C) (Edit, ExportObject, NeedCtorLink, EditInline)
	struct FRangeVector                                GlobalOffsetRange;                                        // 0x03E4(0x0018) (Edit)
	struct FRange                                      TimeTillResetRange;                                       // 0x03FC(0x0008) (Edit)
	bool                                               AutoDestroy;                                              // 0x0404(0x0004) (Edit)
	bool                                               AutoReset;                                                // 0x0404(0x0004) (Edit)
	bool                                               DisableFogging;                                           // 0x0404(0x0004) (Edit)
	struct FVector                                     OldLocation;                                              // 0x0408(0x000C) (Transient)
	struct FVector                                     GlobalOffset;                                             // 0x0414(0x000C) (Transient)
	struct FVector                                     AbsoluteVelocity;                                         // 0x0420(0x000C) (Transient)
	int                                                Initialized;                                              // 0x042C(0x0004) (Transient)
	struct FBox                                        BoundingBox;                                              // 0x0430(0x001C) (Transient)
	float                                              EmitterRadius;                                            // 0x044C(0x0004) (Transient)
	float                                              EmitterHeight;                                            // 0x0450(0x0004) (Transient)
	float                                              TimeTillReset;                                            // 0x0454(0x0004) (Transient)
	bool                                               UseParticleProjectors;                                    // 0x0458(0x0004) (Transient)
	bool                                               DeleteParticleEmitters;                                   // 0x0458(0x0004) (Transient)
	bool                                               ActorForcesEnabled;                                       // 0x0458(0x0004) (Transient)
	class UParticleMaterial*                           ParticleMaterial;                                         // 0x045C(0x0004) (Transient)
	float                                              fFadeOutTime;                                             // 0x0460(0x0004) (Net)
	bool                                               bChecked;                                                 // 0x0464(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Emitter");
		return ptr;
	}


	void Reset();
	void SpawnParticle(int Amount);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void UpdatePrecacheMaterials();
	void SetFadeOutTime(float fTotal, float fFadeOutGap);
	void Kill();
};


// Class Engine.PackageCheckInfo
// 0x0020 (0x004C - 0x002C)
class UPackageCheckInfo : public UObject
{
public:
	byte                                               Padding00[0x20];                                          // 0x002C(0x0020) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageCheckInfo");
		return ptr;
	}

};


// Class Engine.NetDriver
// 0x11DC (0x120C - 0x0030)
class UNetDriver : public USubsystem
{
public:
	byte                                               Padding00[0x1120];                                        // 0x0030(0x1120) MISSED OFFSET
	float                                              ConnectionTimeout;                                        // 0x1150(0x0004) (Edit)
	float                                              InitialConnectTimeout;                                    // 0x1154(0x0004) (Edit)
	byte                                               Padding01[0x38];                                          // 0x1158(0x0038) MISSED OFFSET
	int                                                MaxDownloadSize;                                          // 0x1190(0x0004) (Config)
	string[]                                           DownloadManagers;                                         // 0x1194(0x000C) (Edit, NeedCtorLink)
	bool                                               DisableKSecFix;                                           // 0x11A0(0x0004) (Config)
	string[]                                           ClientRedirectURLs;                                       // 0x11A4(0x000C) (Config, NeedCtorLink)
	byte                                               Padding02[0x5C];                                          // 0x11B0(0x005C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetDriver");
		return ptr;
	}

};


// Class Engine.TickChecker
// 0x0018 (0x0044 - 0x002C)
class UTickChecker : public UObject
{
public:
	byte                                               Padding00[0x18];                                          // 0x002C(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TickChecker");
		return ptr;
	}

};


// Class Engine.PackageMapLevel
// 0x0004 (0x0078 - 0x0074)
class UPackageMapLevel : public UPackageMap
{
public:
	byte                                               Padding00[0x4];                                           // 0x0074(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PackageMapLevel");
		return ptr;
	}

};


// Class Engine.Mover
// 0x03C4 (0x079C - 0x03D8)
class AMover : public AActor
{
public:
	EMoverEncroachType                                 MoverEncroachType;                                        // 0x03D8(0x0001) (Edit)
	EMoverGlideType                                    MoverGlideType;                                           // 0x03D9(0x0001) (Edit)
	EBumpType                                          BumpType;                                                 // 0x03DA(0x0001) (Edit)
	byte                                               KeyNum;                                                   // 0x03DB(0x0001) (Edit)
	byte                                               PrevKeyNum;                                               // 0x03DC(0x0001)
	byte                                               NumKeys;                                                  // 0x03DD(0x0001) (Edit, Const)
	byte                                               WorldRaytraceKey;                                         // 0x03DE(0x0001) (Edit, Const)
	byte                                               BrushRaytraceKey;                                         // 0x03DF(0x0001) (Edit, Const)
	byte                                               StartKeyNum;                                              // 0x03E0(0x0001)
	byte                                               Padding00[0x3];                                           // 0x03E1(0x0003) MISSED OFFSET
	float                                              MoveTime;                                                 // 0x03E4(0x0004) (Edit)
	float                                              StayOpenTime;                                             // 0x03E8(0x0004) (Edit)
	float                                              OtherTime;                                                // 0x03EC(0x0004) (Edit)
	int                                                EncroachDamage;                                           // 0x03F0(0x0004) (Edit)
	bool                                               bToggleDirection;                                         // 0x03F4(0x0004) (Edit)
	bool                                               bTriggerOnceOnly;                                         // 0x03F4(0x0004) (Edit)
	bool                                               bSlave;                                                   // 0x03F4(0x0004) (Edit)
	bool                                               bUseTriggered;                                            // 0x03F4(0x0004) (Edit)
	bool                                               bDamageTriggered;                                         // 0x03F4(0x0004) (Edit)
	bool                                               bDynamicLightMover;                                       // 0x03F4(0x0004) (Edit)
	bool                                               bUseShortestRotation;                                     // 0x03F4(0x0004) (Edit)
	bool                                               bIsLeader;                                                // 0x03F4(0x0004) (Edit)
	FName                                              PlayerBumpEvent;                                          // 0x03F8(0x0004) (Edit)
	FName                                              BumpEvent;                                                // 0x03FC(0x0004) (Edit)
	class AActor*                                      SavedTrigger;                                             // 0x0400(0x0004)
	float                                              DamageThreshold;                                          // 0x0404(0x0004) (Edit)
	int                                                numTriggerEvents;                                         // 0x0408(0x0004)
	class AMover*                                      Leader;                                                   // 0x040C(0x0004)
	class AMover*                                      Follower;                                                 // 0x0410(0x0004)
	FName                                              ReturnGroup;                                              // 0x0414(0x0004) (Edit)
	float                                              DelayTime;                                                // 0x0418(0x0004) (Edit)
	string                                             FmodOpeningSound;                                         // 0x041C(0x000C) (Edit, NeedCtorLink)
	string                                             FmodOpenedSound;                                          // 0x0428(0x000C) (Edit, NeedCtorLink)
	string                                             FmodClosingSound;                                         // 0x0434(0x000C) (Edit, NeedCtorLink)
	string                                             FmodClosedSound;                                          // 0x0440(0x000C) (Edit, NeedCtorLink)
	string                                             FmodMoveAmbientSound;                                     // 0x044C(0x000C) (Edit, NeedCtorLink)
	string                                             FmodLoopSound;                                            // 0x0458(0x000C) (Edit, NeedCtorLink)
	class USound*                                      OpeningSound;                                             // 0x0464(0x0004) (Edit)
	class USound*                                      OpenedSound;                                              // 0x0468(0x0004) (Edit)
	class USound*                                      ClosingSound;                                             // 0x046C(0x0004) (Edit)
	class USound*                                      ClosedSound;                                              // 0x0470(0x0004) (Edit)
	class USound*                                      MoveAmbientSound;                                         // 0x0474(0x0004) (Edit)
	class USound*                                      LoopSound;                                                // 0x0478(0x0004) (Edit)
	FName                                              OpeningEvent;                                             // 0x047C(0x0004) (Edit)
	FName                                              OpenedEvent;                                              // 0x0480(0x0004) (Edit)
	FName                                              ClosingEvent;                                             // 0x0484(0x0004) (Edit)
	FName                                              ClosedEvent;                                              // 0x0488(0x0004) (Edit)
	FName                                              LoopEvent;                                                // 0x048C(0x0004) (Edit)
	struct FVector                                     KeyPos[0x18];                                             // 0x0490(0x000C)
	struct FRotator                                    KeyRot[0x18];                                             // 0x05B0(0x000C)
	struct FVector                                     BasePos;                                                  // 0x06D0(0x000C)
	struct FVector                                     OldPos;                                                   // 0x06DC(0x000C)
	struct FVector                                     OldPrePivot;                                              // 0x06E8(0x000C)
	struct FVector                                     SavedPos;                                                 // 0x06F4(0x000C)
	struct FRotator                                    BaseRot;                                                  // 0x0700(0x000C)
	struct FRotator                                    OldRot;                                                   // 0x070C(0x000C)
	struct FRotator                                    SavedRot;                                                 // 0x0718(0x000C)
	float                                              PhysAlpha;                                                // 0x0724(0x0004)
	float                                              PhysRate;                                                 // 0x0728(0x0004)
	class ANavigationPoint*                            myMarker;                                                 // 0x072C(0x0004)
	bool                                               bOscillatingLoop;                                         // 0x0730(0x0004) (Edit)
	bool                                               bOpening;                                                 // 0x0730(0x0004)
	bool                                               bDelaying;                                                // 0x0730(0x0004)
	bool                                               bClientPause;                                             // 0x0730(0x0004)
	bool                                               bClosed;                                                  // 0x0730(0x0004)
	bool                                               bPlayerOnly;                                              // 0x0730(0x0004)
	bool                                               bAutoDoor;                                                // 0x0730(0x0004) (Edit)
	bool                                               bNoAIRelevance;                                           // 0x0730(0x0004) (Edit)
	bool                                               bJumpLift;                                                // 0x0730(0x0004)
	byte                                               ClientStop;                                               // 0x0734(0x0001)
	byte                                               Padding01[0x3];                                           // 0x0735(0x0003) MISSED OFFSET
	struct FVector                                     SimOldPos;                                                // 0x0738(0x000C) (Net)
	int                                                SimOldRotPitch;                                           // 0x0744(0x0004) (Net)
	int                                                SimOldRotYaw;                                             // 0x0748(0x0004) (Net)
	int                                                SimOldRotRoll;                                            // 0x074C(0x0004) (Net)
	struct FVector                                     SimInterpolate;                                           // 0x0750(0x000C) (Net)
	struct FVector                                     RealPosition;                                             // 0x075C(0x000C) (Net)
	struct FRotator                                    RealRotation;                                             // 0x0768(0x000C) (Net)
	int                                                ClientUpdate;                                             // 0x0774(0x0004)
	byte                                               StoppedPosition;                                          // 0x0778(0x0001) (Net)
	byte                                               Padding02[0x3];                                           // 0x0779(0x0003) MISSED OFFSET
	int                                                StepDirection;                                            // 0x077C(0x0004)
	class AAntiPortalActor*[]                          AntiPortals;                                              // 0x0780(0x000C) (NeedCtorLink)
	FName                                              AntiPortalTag;                                            // 0x078C(0x0004) (Edit)
	bool                                               bResetting;                                               // 0x0790(0x0004)
	bool                                               BACKUP_bHidden;                                           // 0x0790(0x0004)
	FName                                              Backup_InitialState;                                      // 0x0794(0x0004)
	bool                                               bDamageOnceOnly;                                          // 0x0798(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Mover");
		return ptr;
	}


	void UpdatePrecacheStaticMeshes();
	void BaseFinished();
	void BaseStarted();
	void MoverLooped();
	void SetStoppedPosition(byte NewPos);
	void EnableTrigger();
	void DisableTrigger();
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void Bump(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void MakeGroupReturn();
	void MakeGroupStop();
	void Reset();
	void SetResetStatus(bool bNewStatus);
	void PostBeginPlay();
	void BeginPlay();
	void DoClose();
	void DoOpen();
	void FinishedOpening();
	void FinishedClosing();
	void FinishNotify();
	void KeyFrameReached();
	void SetKeyframe(byte NewKeyNum, const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void InterpolateTo(byte NewKeyNum, float Seconds);
	void Timer();
	void StartInterpolation();
	class AActor* SpecialHandling(class APawn* Other);
	bool SelfTriggered();
};


// Class Engine.Model
// 0x06D8 (0x0730 - 0x0058)
class UModel : public UPrimitive
{
public:
	byte                                               Padding00[0x6D8];                                         // 0x0058(0x06D8) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Model");
		return ptr;
	}

};


// Class Engine.MeshEmitter
// 0x0014 (0x04A0 - 0x048C)
class UMeshEmitter : public UParticleEmitter
{
public:
	class UStaticMesh*                                 StaticMesh;                                               // 0x048C(0x0004) (Edit)
	bool                                               UseMeshBlendMode;                                         // 0x0490(0x0004) (Edit)
	bool                                               RenderTwoSided;                                           // 0x0490(0x0004) (Edit)
	bool                                               UseParticleColor;                                         // 0x0490(0x0004) (Edit)
	struct FVector                                     MeshExtent;                                               // 0x0494(0x000C) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MeshEmitter");
		return ptr;
	}

};


// Class Engine.HardwareShader
// 0x1394 (0x13D8 - 0x0044)
class UHardwareShader : public URenderedMaterial
{
public:
	struct FSConstantsInfo                             VSConstants[0xC8];                                        // 0x0044(0x0014) (Edit)
	string                                             VertexShaderText[0x4];                                    // 0x0FE4(0x000C) (Edit, NeedCtorLink)
	int[]                                              StreamMapping;                                            // 0x1014(0x000C) (Edit, NeedCtorLink)
	struct FSConstantsInfo                             PSConstants[0x20];                                        // 0x1020(0x0014) (Edit)
	string                                             PixelShaderText[0x4];                                     // 0x12A0(0x000C) (Edit, NeedCtorLink)
	class UTexture*                                    Textures[0x20];                                           // 0x12D0(0x0004) (Edit)
	int                                                PixelShader[0x4];                                         // 0x1350(0x0004) (Const, Transient)
	int                                                VertexShader[0x4];                                        // 0x1360(0x0004) (Const, Transient)
	int                                                NumPasses;                                                // 0x1370(0x0004) (Edit)
	int                                                AlphaBlending[0x4];                                       // 0x1374(0x0004) (Edit)
	int                                                AlphaTest[0x4];                                           // 0x1384(0x0004) (Edit)
	byte                                               AlphaRef[0x4];                                            // 0x1394(0x0001) (Edit)
	int                                                ZTest[0x4];                                               // 0x1398(0x0004) (Edit)
	int                                                ZWrite[0x4];                                              // 0x13A8(0x0004) (Edit)
	byte                                               SrcBlend[0x10];                                           // 0x13B8(0x0001) (Edit)
	byte                                               DestBlend[0x10];                                          // 0x13C8(0x0001) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HardwareShader");
		return ptr;
	}

};


// Class Engine.Modifier
// 0x0004 (0x0044 - 0x0040)
class UModifier : public UMaterial
{
public:
	class UMaterial*                                   Material;                                                 // 0x0040(0x0004) (Edit, EditInline, EditInlineUse)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Modifier");
		return ptr;
	}


	void Trigger(class AActor* Other, class AActor* EventInstigator);
	void Reset();
};


// Class Engine.OpacityModifier
// 0x0008 (0x004C - 0x0044)
class UOpacityModifier : public UModifier
{
public:
	class UMaterial*                                   Opacity;                                                  // 0x0044(0x0004)
	bool                                               bOverrideTexModifier;                                     // 0x0048(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.OpacityModifier");
		return ptr;
	}

};


// Class Engine.MaterialSequence
// 0x0020 (0x0064 - 0x0044)
class UMaterialSequence : public UModifier
{
public:
	struct FMaterialSequenceItem[]                     SequenceItems;                                            // 0x0044(0x000C) (Edit, NeedCtorLink)
	EMaterialSequenceTriggerActon                      TriggerAction;                                            // 0x0050(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0051(0x0003) MISSED OFFSET
	bool                                               Loop;                                                     // 0x0054(0x0004) (Edit)
	bool                                               Paused;                                                   // 0x0054(0x0004) (Edit)
	float                                              CurrentTime;                                              // 0x0058(0x0004) (Transient)
	float                                              LastTime;                                                 // 0x005C(0x0004) (Transient)
	float                                              TotalTime;                                                // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialSequence");
		return ptr;
	}


	void Trigger(class AActor* Other, class AActor* EventInstigator);
	void Reset();
};


// Class Engine.MaterialSwitch
// 0x0010 (0x0054 - 0x0044)
class UMaterialSwitch : public UModifier
{
public:
	int                                                current;                                                  // 0x0044(0x0004) (Edit, Transient)
	class UMaterial*[]                                 Materials;                                                // 0x0048(0x000C) (Edit, NeedCtorLink, EditInline, EditInlineUse)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaterialSwitch");
		return ptr;
	}


	void Trigger(class AActor* Other, class AActor* EventInstigator);
	void Reset();
};


// Class Engine.FinalBlend
// 0x0010 (0x0054 - 0x0044)
class UFinalBlend : public UModifier
{
public:
	EFrameBufferBlending                               FrameBufferBlending;                                      // 0x0044(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0045(0x0003) MISSED OFFSET
	bool                                               ZWrite;                                                   // 0x0048(0x0004) (Edit)
	bool                                               ZTest;                                                    // 0x0048(0x0004) (Edit)
	bool                                               AlphaTest;                                                // 0x0048(0x0004) (Edit)
	bool                                               TwoSided;                                                 // 0x0048(0x0004) (Edit)
	byte                                               AlphaRef;                                                 // 0x004C(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x004D(0x0003) MISSED OFFSET
	bool                                               UseShader;                                                // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FinalBlend");
		return ptr;
	}

};


// Class Engine.VertexColor
// 0x0000 (0x0044 - 0x0044)
class UVertexColor : public URenderedMaterial
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VertexColor");
		return ptr;
	}

};


// Class Engine.TexModifier
// 0x000C (0x0050 - 0x0044)
class UTexModifier : public UModifier
{
public:
	ETexCoordSrc                                       TexCoordSource;                                           // 0x0044(0x0001)
	ETexCoordCount                                     TexCoordCount;                                            // 0x0045(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x0046(0x0002) MISSED OFFSET
	bool                                               TexCoordProjected;                                        // 0x0048(0x0004) (Edit)
	int                                                texmodifier_dummy;                                        // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexModifier");
		return ptr;
	}

};


// Class Engine.TexCoordSource
// 0x0004 (0x0054 - 0x0050)
class UTexCoordSource : public UTexModifier
{
public:
	int                                                SourceChannel;                                            // 0x0050(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexCoordSource");
		return ptr;
	}

};


// Class Engine.TexMatrix
// 0x0040 (0x0090 - 0x0050)
class UTexMatrix : public UTexModifier
{
public:
	struct FMatrix                                     Matrix;                                                   // 0x0050(0x0040)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexMatrix");
		return ptr;
	}

};


// Class Engine.TexEnvMap
// 0x0004 (0x0054 - 0x0050)
class UTexEnvMap : public UTexModifier
{
public:
	ETexEnvMapType                                     EnvMapType;                                               // 0x0050(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0051(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexEnvMap");
		return ptr;
	}

};


// Class Engine.TexOscillator
// 0x0074 (0x00C4 - 0x0050)
class UTexOscillator : public UTexModifier
{
public:
	float                                              UOscillationRate;                                         // 0x0050(0x0004) (Edit)
	float                                              VOscillationRate;                                         // 0x0054(0x0004) (Edit)
	float                                              UOscillationPhase;                                        // 0x0058(0x0004) (Edit)
	float                                              VOscillationPhase;                                        // 0x005C(0x0004) (Edit)
	float                                              UOscillationAmplitude;                                    // 0x0060(0x0004) (Edit)
	float                                              VOscillationAmplitude;                                    // 0x0064(0x0004) (Edit)
	ETexOscillationType                                UOscillationType;                                         // 0x0068(0x0001) (Edit)
	ETexOscillationType                                VOscillationType;                                         // 0x0069(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x006A(0x0002) MISSED OFFSET
	float                                              UOffset;                                                  // 0x006C(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x0070(0x0004) (Edit)
	struct FMatrix                                     M;                                                        // 0x0074(0x0040)
	float                                              LastSu;                                                   // 0x00B4(0x0004)
	float                                              LastSv;                                                   // 0x00B8(0x0004)
	float                                              CurrentUJitter;                                           // 0x00BC(0x0004)
	float                                              CurrentVJitter;                                           // 0x00C0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexOscillator");
		return ptr;
	}

};


// Class Engine.TexOscillatorTriggered
// 0x0010 (0x00D4 - 0x00C4)
class UTexOscillatorTriggered : public UTexOscillator
{
public:
	ERetriggerAction                                   RetriggerAction;                                          // 0x00C4(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x00C5(0x0003) MISSED OFFSET
	float                                              StopAfterPeriod;                                          // 0x00C8(0x0004) (Edit)
	float                                              TriggeredTime;                                            // 0x00CC(0x0004) (Transient)
	bool                                               Reverse;                                                  // 0x00D0(0x0004) (Transient)
	bool                                               Triggered;                                                // 0x00D0(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexOscillatorTriggered");
		return ptr;
	}


	void Reset();
	void Trigger(class AActor* Other, class AActor* EventInstigator);
};


// Class Engine.TexRotator
// 0x0080 (0x00D0 - 0x0050)
class UTexRotator : public UTexModifier
{
public:
	struct FMatrix                                     M;                                                        // 0x0050(0x0040)
	ETexRotationType                                   TexRotationType;                                          // 0x0090(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0091(0x0003) MISSED OFFSET
	struct FRotator                                    Rotation;                                                 // 0x0094(0x000C) (Edit)
	bool                                               ConstantRotation;                                         // 0x00A0(0x0004) (Deprecated)
	float                                              UOffset;                                                  // 0x00A4(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x00A8(0x0004) (Edit)
	struct FRotator                                    OscillationRate;                                          // 0x00AC(0x000C) (Edit)
	struct FRotator                                    OscillationAmplitude;                                     // 0x00B8(0x000C) (Edit)
	struct FRotator                                    OscillationPhase;                                         // 0x00C4(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexRotator");
		return ptr;
	}

};


// Class Engine.TexScaler
// 0x0050 (0x00A0 - 0x0050)
class UTexScaler : public UTexModifier
{
public:
	struct FMatrix                                     M;                                                        // 0x0050(0x0040)
	float                                              UScale;                                                   // 0x0090(0x0004) (Edit)
	float                                              VScale;                                                   // 0x0094(0x0004) (Edit)
	float                                              UOffset;                                                  // 0x0098(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x009C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexScaler");
		return ptr;
	}

};


// Class Engine.VariableTexPanner
// 0x0058 (0x00A8 - 0x0050)
class UVariableTexPanner : public UTexModifier
{
public:
	struct FRotator                                    PanDirection;                                             // 0x0050(0x000C) (Edit)
	float                                              PanRate;                                                  // 0x005C(0x0004) (Edit)
	struct FMatrix                                     M;                                                        // 0x0060(0x0040)
	float                                              LastTime;                                                 // 0x00A0(0x0004)
	float                                              PanOffset;                                                // 0x00A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VariableTexPanner");
		return ptr;
	}

};


// Class Engine.TexPanner
// 0x0050 (0x00A0 - 0x0050)
class UTexPanner : public UTexModifier
{
public:
	struct FRotator                                    PanDirection;                                             // 0x0050(0x000C) (Edit)
	float                                              PanRate;                                                  // 0x005C(0x0004) (Edit)
	struct FMatrix                                     M;                                                        // 0x0060(0x0040)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexPanner");
		return ptr;
	}

};


// Class Engine.TexPannerTriggered
// 0x0010 (0x00B0 - 0x00A0)
class UTexPannerTriggered : public UTexPanner
{
public:
	ERetriggerAction                                   RetriggerAction;                                          // 0x00A0(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x00A1(0x0003) MISSED OFFSET
	float                                              StopAfterPeriod;                                          // 0x00A4(0x0004) (Edit)
	float                                              TriggeredTime;                                            // 0x00A8(0x0004) (Transient)
	bool                                               Reverse;                                                  // 0x00AC(0x0004) (Transient)
	bool                                               Triggered;                                                // 0x00AC(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexPannerTriggered");
		return ptr;
	}


	void Reset();
	void Trigger(class AActor* Other, class AActor* EventInstigator);
};


// Class Engine.ConstantMaterial
// 0x0000 (0x0044 - 0x0044)
class UConstantMaterial : public URenderedMaterial
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ConstantMaterial");
		return ptr;
	}

};


// Class Engine.FadeColor
// 0x0014 (0x0058 - 0x0044)
class UFadeColor : public UConstantMaterial
{
public:
	struct FColor                                      Color1;                                                   // 0x0044(0x0004) (Edit)
	struct FColor                                      Color2;                                                   // 0x0048(0x0004) (Edit)
	float                                              FadePeriod;                                               // 0x004C(0x0004) (Edit)
	float                                              FadePhase;                                                // 0x0050(0x0004) (Edit)
	EColorFadeType                                     ColorFadeType;                                            // 0x0054(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0055(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FadeColor");
		return ptr;
	}

};


// Class Engine.ConstantColor
// 0x0004 (0x0048 - 0x0044)
class UConstantColor : public UConstantMaterial
{
public:
	struct FColor                                      Color;                                                    // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ConstantColor");
		return ptr;
	}

};


// Class Engine.Combiner
// 0x0018 (0x0058 - 0x0040)
class UCombiner : public UMaterial
{
public:
	int                                                combiner_dummy;                                           // 0x0040(0x0004)
	EColorOperation                                    CombineOperation;                                         // 0x0044(0x0001) (Edit)
	EAlphaOperation                                    AlphaOperation;                                           // 0x0045(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x0046(0x0002) MISSED OFFSET
	class UMaterial*                                   Material1;                                                // 0x0048(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Material2;                                                // 0x004C(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Mask;                                                     // 0x0050(0x0004) (Edit, EditInline, EditInlineUse)
	bool                                               InvertMask;                                               // 0x0054(0x0004) (Edit)
	bool                                               Modulate2X;                                               // 0x0054(0x0004) (Edit)
	bool                                               Modulate4X;                                               // 0x0054(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Combiner");
		return ptr;
	}

};


// Class Engine.DecalShader
// 0x0078 (0x00BC - 0x0044)
class UDecalShader : public URenderedMaterial
{
public:
	class UMaterial*                                   Diffuse;                                                  // 0x0044(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Opacity;                                                  // 0x0048(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Specular;                                                 // 0x004C(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   SpecularityMask;                                          // 0x0050(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Normal;                                                   // 0x0054(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   SelfIllumination;                                         // 0x0058(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   SelfIlluminationMask;                                     // 0x005C(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Detail;                                                   // 0x0060(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Cubemap;                                                  // 0x0064(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   DecalMap;                                                 // 0x0068(0x0004) (Edit, EditInline, EditInlineUse)
	ERenderTechnique                                   RenderTechnique;                                          // 0x006C(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x006D(0x0003) MISSED OFFSET
	float                                              DetailScale;                                              // 0x0070(0x0004) (Edit)
	struct FColor                                      LocalAmbientColor;                                        // 0x0074(0x0004) (Edit)
	float                                              SpecularLevel;                                            // 0x0078(0x0004) (Edit)
	float                                              Grossiness;                                               // 0x007C(0x0004) (Edit)
	EOutputBlending                                    OutputBlending;                                           // 0x0080(0x0001) (Edit)
	byte                                               AlphaRef;                                                 // 0x0081(0x0001) (Edit)
	byte                                               Padding01[0x2];                                           // 0x0082(0x0002) MISSED OFFSET
	bool                                               TwoSided;                                                 // 0x0084(0x0004) (Edit)
	bool                                               Wireframe;                                                // 0x0084(0x0004) (Edit)
	bool                                               ModulateStaticLighting2X;                                 // 0x0084(0x0004)
	bool                                               PerformLightingOnSpecularPass;                            // 0x0084(0x0004) (Edit)
	bool                                               ModulateSpecular2X;                                       // 0x0084(0x0004) (Edit)
	float                                              NormalZScale;                                             // 0x0088(0x0004) (Edit)
	float                                              LightScale;                                               // 0x008C(0x0004) (Edit)
	float                                              AmbientLightScale;                                        // 0x0090(0x0004) (Edit)
	float                                              RimLightStrength;                                         // 0x0094(0x0004) (Edit)
	float                                              RimLightPow;                                              // 0x0098(0x0004) (Edit)
	bool                                               UseSpecRGBGlossA;                                         // 0x009C(0x0004) (Edit)
	struct FPlane                                      EnvMapParms;                                              // 0x00A0(0x0010) (Edit)
	float                                              DecalUScale;                                              // 0x00B0(0x0004) (Edit)
	float                                              DecalVScale;                                              // 0x00B4(0x0004) (Edit)
	float                                              DecalBlendScale;                                          // 0x00B8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DecalShader");
		return ptr;
	}


	void Trigger(class AActor* Other, class AActor* EventInstigator);
	void Reset();
};


// Class Engine.BlendShader
// 0x003C (0x0080 - 0x0044)
class UBlendShader : public URenderedMaterial
{
public:
	class UMaterial*                                   DiffuseMap1;                                              // 0x0044(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   DiffuseMap2;                                              // 0x0048(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   NormalMap1;                                               // 0x004C(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   NormalMap2;                                               // 0x0050(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   MaskMap;                                                  // 0x0054(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   BS_CubeMap;                                               // 0x0058(0x0004) (Edit, EditInline, EditInlineUse)
	byte                                               BlendTexcoordIndex;                                       // 0x005C(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x005D(0x0003) MISSED OFFSET
	bool                                               AlphaTest;                                                // 0x0060(0x0004) (Edit)
	bool                                               AlphaBlend;                                               // 0x0060(0x0004) (Edit)
	byte                                               AlphaRef;                                                 // 0x0064(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x0065(0x0003) MISSED OFFSET
	bool                                               TwoSided;                                                 // 0x0068(0x0004) (Edit)
	bool                                               UseDynamicCubeMap;                                        // 0x0068(0x0004) (Edit)
	struct FPlane                                      EnvMapParms;                                              // 0x006C(0x0010) (Edit)
	float                                              SpecularLevel;                                            // 0x007C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlendShader");
		return ptr;
	}


	void Trigger(class AActor* Other, class AActor* EventInstigator);
	void Reset();
};


// Class Engine.Shader
// 0x0068 (0x00AC - 0x0044)
class UShader : public URenderedMaterial
{
public:
	class UMaterial*                                   Diffuse;                                                  // 0x0044(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Opacity;                                                  // 0x0048(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Specular;                                                 // 0x004C(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   SpecularityMask;                                          // 0x0050(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Normal;                                                   // 0x0054(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   SelfIllumination;                                         // 0x0058(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   SelfIlluminationMask;                                     // 0x005C(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Detail;                                                   // 0x0060(0x0004) (Edit, EditInline, EditInlineUse)
	class UMaterial*                                   Cubemap;                                                  // 0x0064(0x0004) (Edit, EditInline, EditInlineUse)
	ERenderTechnique                                   RenderTechnique;                                          // 0x0068(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0069(0x0003) MISSED OFFSET
	float                                              DetailScale;                                              // 0x006C(0x0004) (Edit)
	struct FColor                                      LocalAmbientColor;                                        // 0x0070(0x0004) (Edit)
	float                                              SpecularLevel;                                            // 0x0074(0x0004) (Edit)
	float                                              Grossiness;                                               // 0x0078(0x0004) (Edit)
	EOutputBlending                                    OutputBlending;                                           // 0x007C(0x0001) (Edit)
	byte                                               AlphaRef;                                                 // 0x007D(0x0001) (Edit)
	byte                                               Padding01[0x2];                                           // 0x007E(0x0002) MISSED OFFSET
	bool                                               TwoSided;                                                 // 0x0080(0x0004) (Edit)
	bool                                               Wireframe;                                                // 0x0080(0x0004) (Edit)
	bool                                               ModulateStaticLighting2X;                                 // 0x0080(0x0004)
	bool                                               PerformLightingOnSpecularPass;                            // 0x0080(0x0004) (Edit)
	bool                                               ModulateSpecular2X;                                       // 0x0080(0x0004) (Edit)
	float                                              NormalZScale;                                             // 0x0084(0x0004) (Edit)
	float                                              LightScale;                                               // 0x0088(0x0004) (Edit)
	float                                              AmbientLightScale;                                        // 0x008C(0x0004) (Edit)
	float                                              RimLightStrength;                                         // 0x0090(0x0004) (Edit)
	float                                              RimLightPow;                                              // 0x0094(0x0004) (Edit)
	bool                                               UseSpecRGBGlossA;                                         // 0x0098(0x0004) (Edit)
	struct FPlane                                      EnvMapParms;                                              // 0x009C(0x0010) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Shader");
		return ptr;
	}


	void Trigger(class AActor* Other, class AActor* EventInstigator);
	void Reset();
};


// Class Engine.ColorModifier
// 0x0008 (0x004C - 0x0044)
class UColorModifier : public UModifier
{
public:
	struct FColor                                      Color;                                                    // 0x0044(0x0004) (Edit)
	bool                                               RenderTwoSided;                                           // 0x0048(0x0004) (Edit)
	bool                                               AlphaBlend;                                               // 0x0048(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ColorModifier");
		return ptr;
	}

};


// Class Engine.TexCoordMaterial
// 0x0008 (0x004C - 0x0044)
class UTexCoordMaterial : public URenderedMaterial
{
public:
	byte                                               Padding00[0x8];                                           // 0x0044(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TexCoordMaterial");
		return ptr;
	}

};


// Class Engine.ProxyBitmapMaterial
// 0x0004 (0x0060 - 0x005C)
class UProxyBitmapMaterial : public UBitmapMaterial
{
public:
	byte                                               Padding00[0x4];                                           // 0x005C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProxyBitmapMaterial");
		return ptr;
	}

};


// Class Engine.ItemIterator
// 0x0064 (0x0090 - 0x002C)
class UItemIterator : public UObject
{
public:
	byte                                               Padding00[0x64];                                          // 0x002C(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ItemIterator");
		return ptr;
	}

};


// Class Engine.LevelBase
// 0x0068 (0x0094 - 0x002C)
class ULevelBase : public UObject
{
public:
	byte                                               Padding00[0x68];                                          // 0x002C(0x0068) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelBase");
		return ptr;
	}

};


// Class Engine.Level
// 0x11C0 (0x1254 - 0x0094)
class ULevel : public ULevelBase
{
public:
	byte                                               Padding00[0x11C0];                                        // 0x0094(0x11C0) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Level");
		return ptr;
	}

};


// Class Engine.InteractionMaster
// 0x001C (0x0048 - 0x002C)
class UInteractionMaster : public UInteractions
{
public:
	class UClient*                                     Client;                                                   // 0x002C(0x0004) (Transient)
	class UInteraction*                                BaseMenu;                                                 // 0x0030(0x0004) (Const, Transient)
	class UInteraction*                                Console;                                                  // 0x0034(0x0004) (Const, Transient)
	class UInteraction*[]                              GlobalInteractions;                                       // 0x0038(0x000C) (Transient, NeedCtorLink)
	bool                                               bRequireRawJoystick;                                      // 0x0044(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InteractionMaster");
		return ptr;
	}


	void EnableInteractions(class UInteraction*[] InteractionArray);
	void DisableInteractions(class UInteraction*[] InteractionArray);
	void NotifyLevelChange(class UInteraction*[] InteractionArray);
	void Process_Message(const string& Msg, float MsgLife, class UInteraction*[] InteractionArray);
	void Process_Tick(class UInteraction*[] InteractionArray, float DeltaTime);
	void Process_PostRender(class UInteraction*[] InteractionArray, class UCanvas* Canvas);
	void Process_PreRender(class UInteraction*[] InteractionArray, class UCanvas* Canvas);
	bool Process_KeyEvent(class UInteraction*[] InteractionArray, float Delta, EInputKey* key, EInputAction* Action);
	bool Process_KeyType(class UInteraction*[] InteractionArray, const string& Unicode, EInputKey* key);
	void SetFocusTo(class UInteraction* Inter, class UPlayer* ViewportOwner);
	void RemoveInteraction(class UInteraction* RemoveMe);
	class UInteraction* AddInteraction(const string& InteractionName, class UPlayer* AttachTo);
	void Travel(const string& URL);
};


// Class Engine.BaseGUIController
// 0x0038 (0x0070 - 0x0038)
class UBaseGUIController : public UInteraction
{
public:
	class UMaterial*                                   DefaultPens[0x3];                                         // 0x0038(0x0004)
	string                                             NetworkMsgMenu;                                           // 0x0044(0x000C) (NeedCtorLink)
	string                                             QuestionMenuClass;                                        // 0x0050(0x000C) (NeedCtorLink)
	int                                                Time;                                                     // 0x005C(0x0004)
	int                                                LocalTime;                                                // 0x0060(0x0004)
	float                                              CumulatedElapsedTime;                                     // 0x0064(0x0004)
	struct FScriptDelegate                             __OnAdminReply__Delegate;                                 // 0x0068(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BaseGUIController");
		return ptr;
	}


	void SetTime(int newTime);
	bool NeedToOffIME();
	void SetRequiredGameResolution(const string& GameRes);
	bool NeedsMenuResolution();
	void InitializeController();
	void SetControllerStatus(bool On);
	bool ClickCloseWndBtn();
	void CloseAll(bool bCancel, bool bForced);
	bool CloseMenu(bool bCanceled);
	bool ReplaceMenu(const string& NewMenuName, const string& Param1, const string& Param2, bool bCancelled);
	void AutoLoadMenus();
	bool OpenMenu(const string& NewMenuName, const string& Param1, const string& Param2);
	void OnAdminReply(const string& Reply);
};


// Class Engine.Console
// 0x0424 (0x045C - 0x0038)
class UConsole : public UInteraction
{
public:
	byte                                               ConsoleHotKey;                                            // 0x0038(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0039(0x0003) MISSED OFFSET
	int                                                HistoryTop;                                               // 0x003C(0x0004)
	int                                                HistoryBot;                                               // 0x0040(0x0004)
	int                                                HistoryCur;                                               // 0x0044(0x0004)
	string                                             TypedStr;                                                 // 0x0048(0x000C) (NeedCtorLink)
	string                                             History[0x10];                                            // 0x0054(0x000C) (NeedCtorLink)
	int                                                TypedStrPos;                                              // 0x0114(0x0004)
	bool                                               bTyping;                                                  // 0x0118(0x0004)
	bool                                               bIgnoreKeys;                                              // 0x0118(0x0004)
	int                                                CheatKeyStringMaxLength;                                  // 0x011C(0x0004)
	string                                             cheatKeyString;                                           // 0x0120(0x000C) (NeedCtorLink)
	bool                                               bRunningDemo;                                             // 0x012C(0x0004) (Edit, Transient)
	bool                                               bHoldingStart;                                            // 0x012C(0x0004) (Edit, Transient)
	bool                                               bHoldingBack;                                             // 0x012C(0x0004) (Edit, Transient)
	float                                              TimeIdle;                                                 // 0x0130(0x0004) (Edit, Transient)
	float                                              TimeHoldingReboot;                                        // 0x0134(0x0004) (Edit, Transient)
	float                                              TimePerTitle;                                             // 0x0138(0x0004) (Edit)
	float                                              TimePerDemo;                                              // 0x013C(0x0004) (Edit)
	float                                              TimeTooIdle;                                              // 0x0140(0x0004) (Edit)
	float                                              TimeBeforeReboot;                                         // 0x0144(0x0004) (Edit)
	float                                              TimePerSoak;                                              // 0x0148(0x0004) (Edit)
	string                                             DemoLevels[0x40];                                         // 0x014C(0x000C) (Edit, NeedCtorLink)
	string[]                                           BufferedConsoleCommands;                                  // 0x044C(0x000C) (NeedCtorLink)
	bool                                               bUseConsole;                                              // 0x0458(0x0004)
	bool                                               bUseCheat;                                                // 0x0458(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Console");
		return ptr;
	}


	bool NeedToOffIME();
	bool IsInputTimeTooIdle();
	bool IsBGMPlaying();
	void SetTermBetweenBGM(float val);
	void UpdateBGM(float dt);
	void NextBGM();
	void SetBGMAdvanced(string[] List, bool partialPlay, int partialDuration, struct FIntArray[] initialSeeks);
	void SetBGM(string[] List);
	void SetOneBGM(const string& List);
	void SetOneChangeIgnore();
	void StopBGM();
	string GetCurrentBGM();
	void ClearMessageItems();
	void AddMessageItem(const struct FMessageItem& Item);
	struct FMessageItem ConstructMessageItem(const string& Text, EMessageType MessageType);
	string SetInitialMusic(const string& NewSong);
	void SetMusic(const string& NewSong);
	void ConnectFailure(const string& FailCode, const string& URL);
	void Tick(float Delta);
	void TypingClose();
	void TypingOpen();
	bool KeyEvent(EInputKey key, EInputAction Action, float Delta);
	void ProcessCheat(EInputKey key, EInputAction Action);
	bool HasCheat(const string& str);
	void Message(const string& Msg, float MsgLife);
	void Chat(const string& Msg, float MsgLife, class APlayerReplicationInfo* PRI);
	void DelayedConsoleCommand(const string& Command);
	void NotifyLevelChange();
	void StopRollingDemo();
	void StartRollingDemo();
	void ConsoleToggle();
	void ConsoleClose();
	void ConsoleOpen();
	void TeamTalk();
	void Talk();
	void Type();
	void UnPressButtons();
	void NativeConsoleOpen();
	void ViewportInitialized();
	void Initialized();
	void RecordOn_Exception(int retCode);
};


// Class Engine.Input
// 0x0F94 (0x0FC4 - 0x0030)
class UInput : public USubsystem
{
public:
	struct FAlias                                      Aliases[0x28];                                            // 0x0030(0x0010) (Edit, NeedCtorLink)
	string                                             StrProperty0;                                             // 0x02B0(0x000C) (Edit, NeedCtorLink)
	string                                             LeftMouse;                                                // 0x02BC(0x000C) (Edit, NeedCtorLink)
	string                                             RightMouse;                                               // 0x02C8(0x000C) (Edit, NeedCtorLink)
	string                                             Cancel;                                                   // 0x02D4(0x000C) (Edit, NeedCtorLink)
	string                                             MiddleMouse;                                              // 0x02E0(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown05;                                                // 0x02EC(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown06;                                                // 0x02F8(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown07;                                                // 0x0304(0x000C) (Edit, NeedCtorLink)
	string                                             Backspace;                                                // 0x0310(0x000C) (Edit, NeedCtorLink)
	string                                             Tab;                                                      // 0x031C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown0A;                                                // 0x0328(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown0B;                                                // 0x0334(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown0C;                                                // 0x0340(0x000C) (Edit, NeedCtorLink)
	string                                             Enter;                                                    // 0x034C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown0E;                                                // 0x0358(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown0F;                                                // 0x0364(0x000C) (Edit, NeedCtorLink)
	string                                             Shift;                                                    // 0x0370(0x000C) (Edit, NeedCtorLink)
	string                                             Ctrl;                                                     // 0x037C(0x000C) (Edit, NeedCtorLink)
	string                                             alt;                                                      // 0x0388(0x000C) (Edit, NeedCtorLink)
	string                                             Pause;                                                    // 0x0394(0x000C) (Edit, NeedCtorLink)
	string                                             CapsLock;                                                 // 0x03A0(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown15;                                                // 0x03AC(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown16;                                                // 0x03B8(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown17;                                                // 0x03C4(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown18;                                                // 0x03D0(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown19;                                                // 0x03DC(0x000C) (Edit, NeedCtorLink)
	string                                             Uwwwwwnknown1A;                                           // 0x03E8(0x000C) (Edit, NeedCtorLink)
	string                                             Escape;                                                   // 0x03F4(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown1C;                                                // 0x0400(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown1D;                                                // 0x040C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown1E;                                                // 0x0418(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown1F;                                                // 0x0424(0x000C) (Edit, NeedCtorLink)
	string                                             Space;                                                    // 0x0430(0x000C) (Edit, NeedCtorLink)
	string                                             PageUp;                                                   // 0x043C(0x000C) (Edit, NeedCtorLink)
	string                                             PageDown;                                                 // 0x0448(0x000C) (Edit, NeedCtorLink)
	string                                             End;                                                      // 0x0454(0x000C) (Edit, NeedCtorLink)
	string                                             home;                                                     // 0x0460(0x000C) (Edit, NeedCtorLink)
	string                                             Left;                                                     // 0x046C(0x000C) (Edit, NeedCtorLink)
	string                                             Up;                                                       // 0x0478(0x000C) (Edit, NeedCtorLink)
	string                                             Right;                                                    // 0x0484(0x000C) (Edit, NeedCtorLink)
	string                                             Down;                                                     // 0x0490(0x000C) (Edit, NeedCtorLink)
	string                                             Select;                                                   // 0x049C(0x000C) (Edit, NeedCtorLink)
	string                                             Print;                                                    // 0x04A8(0x000C) (Edit, NeedCtorLink)
	string                                             Execute;                                                  // 0x04B4(0x000C) (Edit, NeedCtorLink)
	string                                             PrintScrn;                                                // 0x04C0(0x000C) (Edit, NeedCtorLink)
	string                                             Insert;                                                   // 0x04CC(0x000C) (Edit, NeedCtorLink)
	string                                             Delete;                                                   // 0x04D8(0x000C) (Edit, NeedCtorLink)
	string                                             Help;                                                     // 0x04E4(0x000C) (Edit, NeedCtorLink)
	string                                             _0;                                                       // 0x04F0(0x000C) (Edit, NeedCtorLink)
	string                                             _1;                                                       // 0x04FC(0x000C) (Edit, NeedCtorLink)
	string                                             _2;                                                       // 0x0508(0x000C) (Edit, NeedCtorLink)
	string                                             _3;                                                       // 0x0514(0x000C) (Edit, NeedCtorLink)
	string                                             _4;                                                       // 0x0520(0x000C) (Edit, NeedCtorLink)
	string                                             _5;                                                       // 0x052C(0x000C) (Edit, NeedCtorLink)
	string                                             _6;                                                       // 0x0538(0x000C) (Edit, NeedCtorLink)
	string                                             _7;                                                       // 0x0544(0x000C) (Edit, NeedCtorLink)
	string                                             _8;                                                       // 0x0550(0x000C) (Edit, NeedCtorLink)
	string                                             _9;                                                       // 0x055C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown3A;                                                // 0x0568(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown3B;                                                // 0x0574(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown3C;                                                // 0x0580(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown3D;                                                // 0x058C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown3E;                                                // 0x0598(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown3F;                                                // 0x05A4(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown40;                                                // 0x05B0(0x000C) (Edit, NeedCtorLink)
	string                                             A;                                                        // 0x05BC(0x000C) (Edit, NeedCtorLink)
	string                                             B;                                                        // 0x05C8(0x000C) (Edit, NeedCtorLink)
	string                                             C;                                                        // 0x05D4(0x000C) (Edit, NeedCtorLink)
	string                                             D;                                                        // 0x05E0(0x000C) (Edit, NeedCtorLink)
	string                                             E;                                                        // 0x05EC(0x000C) (Edit, NeedCtorLink)
	string                                             f;                                                        // 0x05F8(0x000C) (Edit, NeedCtorLink)
	string                                             G;                                                        // 0x0604(0x000C) (Edit, NeedCtorLink)
	string                                             H;                                                        // 0x0610(0x000C) (Edit, NeedCtorLink)
	string                                             i;                                                        // 0x061C(0x000C) (Edit, NeedCtorLink)
	string                                             j;                                                        // 0x0628(0x000C) (Edit, NeedCtorLink)
	string                                             k;                                                        // 0x0634(0x000C) (Edit, NeedCtorLink)
	string                                             L;                                                        // 0x0640(0x000C) (Edit, NeedCtorLink)
	string                                             M;                                                        // 0x064C(0x000C) (Edit, NeedCtorLink)
	string                                             N;                                                        // 0x0658(0x000C) (Edit, NeedCtorLink)
	string                                             o;                                                        // 0x0664(0x000C) (Edit, NeedCtorLink)
	string                                             P;                                                        // 0x0670(0x000C) (Edit, NeedCtorLink)
	string                                             q;                                                        // 0x067C(0x000C) (Edit, NeedCtorLink)
	string                                             R;                                                        // 0x0688(0x000C) (Edit, NeedCtorLink)
	string                                             S;                                                        // 0x0694(0x000C) (Edit, NeedCtorLink)
	string                                             t;                                                        // 0x06A0(0x000C) (Edit, NeedCtorLink)
	string                                             U;                                                        // 0x06AC(0x000C) (Edit, NeedCtorLink)
	string                                             V;                                                        // 0x06B8(0x000C) (Edit, NeedCtorLink)
	string                                             W;                                                        // 0x06C4(0x000C) (Edit, NeedCtorLink)
	string                                             X;                                                        // 0x06D0(0x000C) (Edit, NeedCtorLink)
	string                                             Y;                                                        // 0x06DC(0x000C) (Edit, NeedCtorLink)
	string                                             Z;                                                        // 0x06E8(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown5B;                                                // 0x06F4(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown5C;                                                // 0x0700(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown5D;                                                // 0x070C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown5E;                                                // 0x0718(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown5F;                                                // 0x0724(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad0;                                                  // 0x0730(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad1;                                                  // 0x073C(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad2;                                                  // 0x0748(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad3;                                                  // 0x0754(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad4;                                                  // 0x0760(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad5;                                                  // 0x076C(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad6;                                                  // 0x0778(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad7;                                                  // 0x0784(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad8;                                                  // 0x0790(0x000C) (Edit, NeedCtorLink)
	string                                             NumPad9;                                                  // 0x079C(0x000C) (Edit, NeedCtorLink)
	string                                             GreyStar;                                                 // 0x07A8(0x000C) (Edit, NeedCtorLink)
	string                                             GreyPlus;                                                 // 0x07B4(0x000C) (Edit, NeedCtorLink)
	string                                             Separator;                                                // 0x07C0(0x000C) (Edit, NeedCtorLink)
	string                                             GreyMinus;                                                // 0x07CC(0x000C) (Edit, NeedCtorLink)
	string                                             NumPadPeriod;                                             // 0x07D8(0x000C) (Edit, NeedCtorLink)
	string                                             GreySlash;                                                // 0x07E4(0x000C) (Edit, NeedCtorLink)
	string                                             F1;                                                       // 0x07F0(0x000C) (Edit, NeedCtorLink)
	string                                             F2;                                                       // 0x07FC(0x000C) (Edit, NeedCtorLink)
	string                                             F3;                                                       // 0x0808(0x000C) (Edit, NeedCtorLink)
	string                                             F4;                                                       // 0x0814(0x000C) (Edit, NeedCtorLink)
	string                                             F5;                                                       // 0x0820(0x000C) (Edit, NeedCtorLink)
	string                                             F6;                                                       // 0x082C(0x000C) (Edit, NeedCtorLink)
	string                                             F7;                                                       // 0x0838(0x000C) (Edit, NeedCtorLink)
	string                                             F8;                                                       // 0x0844(0x000C) (Edit, NeedCtorLink)
	string                                             F9;                                                       // 0x0850(0x000C) (Edit, NeedCtorLink)
	string                                             F10;                                                      // 0x085C(0x000C) (Edit, NeedCtorLink)
	string                                             F11;                                                      // 0x0868(0x000C) (Edit, NeedCtorLink)
	string                                             F12;                                                      // 0x0874(0x000C) (Edit, NeedCtorLink)
	string                                             F13;                                                      // 0x0880(0x000C) (Edit, NeedCtorLink)
	string                                             F14;                                                      // 0x088C(0x000C) (Edit, NeedCtorLink)
	string                                             F15;                                                      // 0x0898(0x000C) (Edit, NeedCtorLink)
	string                                             F16;                                                      // 0x08A4(0x000C) (Edit, NeedCtorLink)
	string                                             F17;                                                      // 0x08B0(0x000C) (Edit, NeedCtorLink)
	string                                             F18;                                                      // 0x08BC(0x000C) (Edit, NeedCtorLink)
	string                                             F19;                                                      // 0x08C8(0x000C) (Edit, NeedCtorLink)
	string                                             F20;                                                      // 0x08D4(0x000C) (Edit, NeedCtorLink)
	string                                             F21;                                                      // 0x08E0(0x000C) (Edit, NeedCtorLink)
	string                                             F22;                                                      // 0x08EC(0x000C) (Edit, NeedCtorLink)
	string                                             F23;                                                      // 0x08F8(0x000C) (Edit, NeedCtorLink)
	string                                             F24;                                                      // 0x0904(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown88;                                                // 0x0910(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown89;                                                // 0x091C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown8A;                                                // 0x0928(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown8B;                                                // 0x0934(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown8C;                                                // 0x0940(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown8D;                                                // 0x094C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown8E;                                                // 0x0958(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown8F;                                                // 0x0964(0x000C) (Edit, NeedCtorLink)
	string                                             NumLock;                                                  // 0x0970(0x000C) (Edit, NeedCtorLink)
	string                                             ScrollLock;                                               // 0x097C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown92;                                                // 0x0988(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown93;                                                // 0x0994(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown94;                                                // 0x09A0(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown95;                                                // 0x09AC(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown96;                                                // 0x09B8(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown97;                                                // 0x09C4(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown98;                                                // 0x09D0(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown99;                                                // 0x09DC(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown9A;                                                // 0x09E8(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown9B;                                                // 0x09F4(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown9C;                                                // 0x0A00(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown9D;                                                // 0x0A0C(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown9E;                                                // 0x0A18(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown9F;                                                // 0x0A24(0x000C) (Edit, NeedCtorLink)
	string                                             LShift;                                                   // 0x0A30(0x000C) (Edit, NeedCtorLink)
	string                                             RShift;                                                   // 0x0A3C(0x000C) (Edit, NeedCtorLink)
	string                                             LControl;                                                 // 0x0A48(0x000C) (Edit, NeedCtorLink)
	string                                             RControl;                                                 // 0x0A54(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownA4;                                                // 0x0A60(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownA5;                                                // 0x0A6C(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownA6;                                                // 0x0A78(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownA7;                                                // 0x0A84(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownA8;                                                // 0x0A90(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownA9;                                                // 0x0A9C(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownAA;                                                // 0x0AA8(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownAB;                                                // 0x0AB4(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownAC;                                                // 0x0AC0(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownAD;                                                // 0x0ACC(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownAE;                                                // 0x0AD8(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownAF;                                                // 0x0AE4(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB0;                                                // 0x0AF0(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB1;                                                // 0x0AFC(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB2;                                                // 0x0B08(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB3;                                                // 0x0B14(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB4;                                                // 0x0B20(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB5;                                                // 0x0B2C(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB6;                                                // 0x0B38(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB7;                                                // 0x0B44(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownB8;                                                // 0x0B50(0x000C) (Edit, NeedCtorLink)
	string                                             Unicode;                                                  // 0x0B5C(0x000C) (Edit, NeedCtorLink)
	string                                             Semicolon;                                                // 0x0B68(0x000C) (Edit, NeedCtorLink)
	string                                             Equals;                                                   // 0x0B74(0x000C) (Edit, NeedCtorLink)
	string                                             Comma;                                                    // 0x0B80(0x000C) (Edit, NeedCtorLink)
	string                                             Minus;                                                    // 0x0B8C(0x000C) (Edit, NeedCtorLink)
	string                                             Period;                                                   // 0x0B98(0x000C) (Edit, NeedCtorLink)
	string                                             Slash;                                                    // 0x0BA4(0x000C) (Edit, NeedCtorLink)
	string                                             Tilde;                                                    // 0x0BB0(0x000C) (Edit, NeedCtorLink)
	string                                             Mouse4;                                                   // 0x0BBC(0x000C) (Edit, NeedCtorLink)
	string                                             Mouse5;                                                   // 0x0BC8(0x000C) (Edit, NeedCtorLink)
	string                                             Mouse6;                                                   // 0x0BD4(0x000C) (Edit, NeedCtorLink)
	string                                             Mouse7;                                                   // 0x0BE0(0x000C) (Edit, NeedCtorLink)
	string                                             Mouse8;                                                   // 0x0BEC(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownC6;                                                // 0x0BF8(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownC7;                                                // 0x0C04(0x000C) (Edit, NeedCtorLink)
	string                                             Joy1;                                                     // 0x0C10(0x000C) (Edit, NeedCtorLink)
	string                                             Joy2;                                                     // 0x0C1C(0x000C) (Edit, NeedCtorLink)
	string                                             Joy3;                                                     // 0x0C28(0x000C) (Edit, NeedCtorLink)
	string                                             Joy4;                                                     // 0x0C34(0x000C) (Edit, NeedCtorLink)
	string                                             Joy5;                                                     // 0x0C40(0x000C) (Edit, NeedCtorLink)
	string                                             Joy6;                                                     // 0x0C4C(0x000C) (Edit, NeedCtorLink)
	string                                             Joy7;                                                     // 0x0C58(0x000C) (Edit, NeedCtorLink)
	string                                             Joy8;                                                     // 0x0C64(0x000C) (Edit, NeedCtorLink)
	string                                             Joy9;                                                     // 0x0C70(0x000C) (Edit, NeedCtorLink)
	string                                             Joy10;                                                    // 0x0C7C(0x000C) (Edit, NeedCtorLink)
	string                                             Joy11;                                                    // 0x0C88(0x000C) (Edit, NeedCtorLink)
	string                                             Joy12;                                                    // 0x0C94(0x000C) (Edit, NeedCtorLink)
	string                                             Joy13;                                                    // 0x0CA0(0x000C) (Edit, NeedCtorLink)
	string                                             Joy14;                                                    // 0x0CAC(0x000C) (Edit, NeedCtorLink)
	string                                             Joy15;                                                    // 0x0CB8(0x000C) (Edit, NeedCtorLink)
	string                                             Joy16;                                                    // 0x0CC4(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownD8;                                                // 0x0CD0(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownD9;                                                // 0x0CDC(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownDA;                                                // 0x0CE8(0x000C) (Edit, NeedCtorLink)
	string                                             LeftBracket;                                              // 0x0CF4(0x000C) (Edit, NeedCtorLink)
	string                                             Backslash;                                                // 0x0D00(0x000C) (Edit, NeedCtorLink)
	string                                             RightBracket;                                             // 0x0D0C(0x000C) (Edit, NeedCtorLink)
	string                                             SingleQuote;                                              // 0x0D18(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownDF;                                                // 0x0D24(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownE0;                                                // 0x0D30(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownE1;                                                // 0x0D3C(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownE2;                                                // 0x0D48(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownE3;                                                // 0x0D54(0x000C) (Edit, NeedCtorLink)
	string                                             MouseX;                                                   // 0x0D60(0x000C) (Edit, NeedCtorLink)
	string                                             MouseY;                                                   // 0x0D6C(0x000C) (Edit, NeedCtorLink)
	string                                             MouseZ;                                                   // 0x0D78(0x000C) (Edit, NeedCtorLink)
	string                                             MouseW;                                                   // 0x0D84(0x000C) (Edit, NeedCtorLink)
	string                                             JoyU;                                                     // 0x0D90(0x000C) (Edit, NeedCtorLink)
	string                                             JoyV;                                                     // 0x0D9C(0x000C) (Edit, NeedCtorLink)
	string                                             JoySlider1;                                               // 0x0DA8(0x000C) (Edit, NeedCtorLink)
	string                                             JoySlider2;                                               // 0x0DB4(0x000C) (Edit, NeedCtorLink)
	string                                             MouseWheelUp;                                             // 0x0DC0(0x000C) (Edit, NeedCtorLink)
	string                                             MouseWheelDown;                                           // 0x0DCC(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown10E;                                               // 0x0DD8(0x000C) (Edit, NeedCtorLink)
	string                                             Unknown10F;                                               // 0x0DE4(0x000C) (Edit, NeedCtorLink)
	string                                             JoyX;                                                     // 0x0DF0(0x000C) (Edit, NeedCtorLink)
	string                                             JoyY;                                                     // 0x0DFC(0x000C) (Edit, NeedCtorLink)
	string                                             JoyZ;                                                     // 0x0E08(0x000C) (Edit, NeedCtorLink)
	string                                             JoyR;                                                     // 0x0E14(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownF4;                                                // 0x0E20(0x000C) (Edit, NeedCtorLink)
	string                                             UnknownF5;                                                // 0x0E2C(0x000C) (Edit, NeedCtorLink)
	string                                             Attn;                                                     // 0x0E38(0x000C) (Edit, NeedCtorLink)
	string                                             CrSel;                                                    // 0x0E44(0x000C) (Edit, NeedCtorLink)
	string                                             ExSel;                                                    // 0x0E50(0x000C) (Edit, NeedCtorLink)
	string                                             ErEof;                                                    // 0x0E5C(0x000C) (Edit, NeedCtorLink)
	string                                             Play;                                                     // 0x0E68(0x000C) (Edit, NeedCtorLink)
	string                                             Zoom;                                                     // 0x0E74(0x000C) (Edit, NeedCtorLink)
	string                                             NoName;                                                   // 0x0E80(0x000C) (Edit, NeedCtorLink)
	string                                             PA1;                                                      // 0x0E8C(0x000C) (Edit, NeedCtorLink)
	string                                             OEMClear;                                                 // 0x0E98(0x000C) (Edit, NeedCtorLink)
	byte                                               Padding00[0x120];                                         // 0x0EA4(0x0120) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Input");
		return ptr;
	}

};


// Class Engine.WMFile
// 0x000C (0x0038 - 0x002C)
class UWMFile : public UObject
{
public:
	byte                                               Padding00[0xC];                                           // 0x002C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WMFile");
		return ptr;
	}

};


// Class Engine.GMFile
// 0x019C (0x01C8 - 0x002C)
class UGMFile : public UObject
{
public:
	byte                                               Padding00[0x19C];                                         // 0x002C(0x019C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GMFile");
		return ptr;
	}

};


// Class Engine.MaplistManagerBase
// 0x0000 (0x042C - 0x042C)
class AMaplistManagerBase : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaplistManagerBase");
		return ptr;
	}


	string[] GetCacheMapList(const string& Acronym);
	int FindCacheGameIndex(const string& GameType);
	void ShiftMap(int GameIndex, int RecordIndex, const string& MapName, int Count);
	bool SaveMapList(int GameIndex, int RecordIndex);
	bool SaveGame(int GameIndex);
	void MapChange(const string& NewMapName);
	bool ApplyMapList(int GameIndex, int RecordIndex);
	int GetActiveMap(int GameIndex, int RecordIndex);
	bool SetActiveList(int GameIndex, int NewActive);
	int GetActiveList(int GameIndex);
	string[] GetMapList(int GameIndex, int RecordIndex);
	string[] GetCurrentMapRotation();
	string[] GetMapListNames(int GameIndex);
	string GetMapListTitle(int GameIndex, int RecordIndex);
	int GetRecordIndex(int GameIndex, const string& MapListName);
	int GetMapIndex(int GameIndex, int RecordIndex, const string& MapName);
	int GetGameIndex(const string& GameType);
	bool RemoveMap(int GameIndex, int MapIndex, const string& MapName);
	bool AddMap(int GameIndex, int RecordIndex, const string& MapName);
	bool ClearList(int GameIndex, int RecordIndex);
	int RenameList(int GameIndex, int RecordIndex, const string& NewName);
	void ResetList(int GameIndex, int RecordIndex);
	void ResetGame(int GameIndex);
	int RemoveList(int GameIndex, int RecordIndex);
	int AddList(const string& GameType, const string& NewName, string[] Maps);
	bool ValidGameIndex(int i);
	bool ValidCacheGameIndex(int i);
	bool ValidName(const string& S);
	bool ValidGameType(const string& GameType);
};


// Class Engine.PrecacheHack
// 0x000C (0x03E4 - 0x03D8)
class APrecacheHack : public AActor
{
public:
	class UMaterial*[]                                 Materials;                                                // 0x03D8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecacheHack");
		return ptr;
	}

};


// Class Engine.CrosshairPack
// 0x000C (0x0038 - 0x002C)
class UCrosshairPack : public UObject
{
public:
	struct FCrosshairItem[]                            Crosshair;                                                // 0x002C(0x000C) (Edit, Const, NeedCtorLink, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CrosshairPack");
		return ptr;
	}

};


// Class Engine.Engine
// 0x00F0 (0x0120 - 0x0030)
class UEngine : public USubsystem
{
public:
	class UPrimitive*                                  Cylinder;                                                 // 0x0030(0x0004)
	class UClient*                                     Client;                                                   // 0x0034(0x0004) (Const)
	class UAudioSubsystem*                             Audio;                                                    // 0x0038(0x0004) (Const)
	class URenderDevice*                               GRenDev;                                                  // 0x003C(0x0004) (Const)
	class UwMatchMaker*                                GMatchMaker;                                              // 0x0040(0x0004) (Const)
	int                                                bShowFrameRate;                                           // 0x0044(0x0004)
	int                                                bShowRenderStats;                                         // 0x0048(0x0004)
	int                                                bShowHardwareStats;                                       // 0x004C(0x0004)
	int                                                bShowGameStats;                                           // 0x0050(0x0004)
	int                                                bShowNetStats;                                            // 0x0054(0x0004)
	int                                                bShowAnimStats;                                           // 0x0058(0x0004)
	int                                                bShowLIPSincStats;                                        // 0x005C(0x0004)
	int                                                bShowHistograph;                                          // 0x0060(0x0004)
	int                                                bShowXboxMemStats;                                        // 0x0064(0x0004)
	int                                                bShowMatineeStats;                                        // 0x0068(0x0004)
	int                                                bShowAudioStats;                                          // 0x006C(0x0004)
	int                                                bShowLightStats;                                          // 0x0070(0x0004)
	int                                                TickCycles;                                               // 0x0074(0x0004)
	int                                                GameCycles;                                               // 0x0078(0x0004)
	int                                                ClientCycles;                                             // 0x007C(0x0004)
	int                                                CacheSizeMegs;                                            // 0x0080(0x0004)
	bool                                               UseSound;                                                 // 0x0084(0x0004)
	bool                                               UseStaticMeshBatching;                                    // 0x0084(0x0004)
	bool                                               ServerReadsStdin;                                         // 0x0084(0x0004)
	bool                                               bSlowRefChecking;                                         // 0x0084(0x0004) (Config)
	float                                              CurrentTickRate;                                          // 0x0088(0x0004) (Edit)
	int                                                DetectedVideoMemory;                                      // 0x008C(0x0004)
	int                                                ClientFileVersion;                                        // 0x0090(0x0004)
	struct FColor                                      C_WorldBox;                                               // 0x0094(0x0004) (Edit, Config)
	struct FColor                                      C_GroundPlane;                                            // 0x0098(0x0004) (Edit, Config)
	struct FColor                                      C_GroundHighlight;                                        // 0x009C(0x0004) (Edit, Config)
	struct FColor                                      C_BrushWire;                                              // 0x00A0(0x0004) (Edit, Config)
	struct FColor                                      C_Pivot;                                                  // 0x00A4(0x0004) (Edit, Config)
	struct FColor                                      C_Select;                                                 // 0x00A8(0x0004) (Edit, Config)
	struct FColor                                      C_Current;                                                // 0x00AC(0x0004) (Edit, Config)
	struct FColor                                      C_AddWire;                                                // 0x00B0(0x0004) (Edit, Config)
	struct FColor                                      C_SubtractWire;                                           // 0x00B4(0x0004) (Edit, Config)
	struct FColor                                      C_GreyWire;                                               // 0x00B8(0x0004) (Edit, Config)
	struct FColor                                      C_BrushVertex;                                            // 0x00BC(0x0004) (Edit, Config)
	struct FColor                                      C_BrushSnap;                                              // 0x00C0(0x0004) (Edit, Config)
	struct FColor                                      C_Invalid;                                                // 0x00C4(0x0004) (Edit, Config)
	struct FColor                                      C_ActorWire;                                              // 0x00C8(0x0004) (Edit, Config)
	struct FColor                                      C_ActorHiWire;                                            // 0x00CC(0x0004) (Edit, Config)
	struct FColor                                      C_Black;                                                  // 0x00D0(0x0004) (Edit, Config)
	struct FColor                                      C_White;                                                  // 0x00D4(0x0004) (Edit, Config)
	struct FColor                                      C_Mask;                                                   // 0x00D8(0x0004) (Edit, Config)
	struct FColor                                      C_SemiSolidWire;                                          // 0x00DC(0x0004) (Edit, Config)
	struct FColor                                      C_NonSolidWire;                                           // 0x00E0(0x0004) (Edit, Config)
	struct FColor                                      C_WireBackground;                                         // 0x00E4(0x0004) (Edit, Config)
	struct FColor                                      C_WireGridAxis;                                           // 0x00E8(0x0004) (Edit, Config)
	struct FColor                                      C_ActorArrow;                                             // 0x00EC(0x0004) (Edit, Config)
	struct FColor                                      C_ScaleBox;                                               // 0x00F0(0x0004) (Edit, Config)
	struct FColor                                      C_ScaleBoxHi;                                             // 0x00F4(0x0004) (Edit, Config)
	struct FColor                                      C_ZoneWire;                                               // 0x00F8(0x0004) (Edit, Config)
	struct FColor                                      C_Mover;                                                  // 0x00FC(0x0004) (Edit, Config)
	struct FColor                                      C_OrthoBackground;                                        // 0x0100(0x0004) (Edit, Config)
	struct FColor                                      C_StaticMesh;                                             // 0x0104(0x0004) (Edit, Config)
	struct FColor                                      C_VolumeBrush;                                            // 0x0108(0x0004) (Edit, Config)
	struct FColor                                      C_ConstraintLine;                                         // 0x010C(0x0004) (Edit, Config)
	struct FColor                                      C_AnimMesh;                                               // 0x0110(0x0004) (Edit, Config)
	struct FColor                                      C_TerrainWire;                                            // 0x0114(0x0004) (Edit, Config)
	struct FColor                                      C_LinkAntiportalVolume;                                   // 0x0118(0x0004) (Edit, Config)
	struct FColor                                      C_CubemapVolume;                                          // 0x011C(0x0004) (Edit, Config)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Engine");
		return ptr;
	}

};


// Class Engine.GameEngine
// 0x016C (0x028C - 0x0120)
class UGameEngine : public UEngine
{
public:
	class ULevel*                                      GLevel;                                                   // 0x0120(0x0004)
	class ULevel*                                      GEntry;                                                   // 0x0124(0x0004)
	class UPendingLevel*                               GPendingLevel;                                            // 0x0128(0x0004)
	class UWebLog*                                     GWebLog;                                                  // 0x012C(0x0004)
	class UPendingLevel*                               GServerPendingLevel;                                      // 0x0130(0x0004)
	bool                                               IsRelayServer;                                            // 0x0134(0x0004)
	string                                             strRelayServerURL;                                        // 0x0138(0x000C) (NeedCtorLink)
	bool                                               IsNatCheck;                                               // 0x0144(0x0004)
	int                                                NatType;                                                  // 0x0148(0x0004)
	string                                             HostIP;                                                   // 0x014C(0x000C) (NeedCtorLink)
	int                                                hostPortNum;                                              // 0x0158(0x0004)
	string                                             natServerIP1;                                             // 0x015C(0x000C) (NeedCtorLink)
	int                                                natServerPortNum1;                                        // 0x0168(0x0004)
	string                                             natServerIP2;                                             // 0x016C(0x000C) (NeedCtorLink)
	int                                                natServerPortNum2;                                        // 0x0178(0x0004)
	class UTickChecker*                                GTickChecker;                                             // 0x017C(0x0004)
	class UBTMapLoader*                                GMapLoader;                                               // 0x0180(0x0004)
	class UBTLoadingAdvancer*                          GLoadingAdvancer;                                         // 0x0184(0x0004)
	class UBTPingChecker*                              GPingChecker;                                             // 0x0188(0x0004)
	class UBTTcpLink_Channel_DS*                       GBTTcpLink_Channel_DS;                                    // 0x018C(0x0004)
	class UBTTcpLink_DStoDP_DS*                        GBTTcpLink_DStoDP_DS;                                     // 0x0190(0x0004)
	float                                              CurrentTickTime;                                          // 0x0194(0x0004)
	class UwCharacterManager*                          GCharMgr;                                                 // 0x0198(0x0004)
	class UwWeaponManager*                             GWeaponMgr;                                               // 0x019C(0x0004)
	class UwGameManager*                               GGameMgr;                                                 // 0x01A0(0x0004)
	class UItemIterator*                               GItemIterator;                                            // 0x01A4(0x0004)
	bool                                               GIsDemoPlayback;                                          // 0x01A8(0x0004)
	class APlayerController*                           LevelLoadingController;                                   // 0x01AC(0x0004)
	int                                                LevelLoadingTotalActorCount;                              // 0x01B0(0x0004)
	int                                                LevelLoadingActorCount;                                   // 0x01B4(0x0004)
	bool                                               FramePresentPending;                                      // 0x01B8(0x0004)
	struct FURL                                        LastURL;                                                  // 0x01BC(0x0044) (NeedCtorLink)
	string[]                                           ServerActors;                                             // 0x0200(0x000C) (NeedCtorLink)
	string[]                                           ServerPackages;                                           // 0x020C(0x000C) (NeedCtorLink)
	class UObject*[]                                   DummyArray;                                               // 0x0218(0x000C) (NeedCtorLink)
	class UObject*                                     DummyObject;                                              // 0x0224(0x0004)
	string                                             DummyString;                                              // 0x0228(0x000C) (NeedCtorLink)
	string                                             MainMenuClass;                                            // 0x0234(0x000C) (NeedCtorLink)
	string                                             SinglePlayerMenuClass;                                    // 0x0240(0x000C) (NeedCtorLink)
	string                                             ConnectingMenuClass;                                      // 0x024C(0x000C) (NeedCtorLink)
	string                                             LoadingBackgroundVignetteClass;                           // 0x0258(0x000C) (NeedCtorLink)
	string                                             DisconnectMenuClass;                                      // 0x0264(0x000C) (NeedCtorLink)
	string                                             LoadingClass;                                             // 0x0270(0x000C) (NeedCtorLink)
	bool                                               bCheatProtection;                                         // 0x027C(0x0004)
	bool                                               ColorHighDetailMeshes;                                    // 0x027C(0x0004)
	bool                                               ColorSlowCollisionMeshes;                                 // 0x027C(0x0004)
	bool                                               ColorNoCollisionMeshes;                                   // 0x027C(0x0004)
	bool                                               ColorWorldTextures;                                       // 0x027C(0x0004)
	bool                                               ColorPlayerAndWeaponTextures;                             // 0x027C(0x0004)
	bool                                               ColorInterfaceTextures;                                   // 0x027C(0x0004)
	bool                                               VoIPAllowVAD;                                             // 0x027C(0x0004) (Edit)
	string                                             strMD5Digest;                                             // 0x0280(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameEngine");
		return ptr;
	}

};


// Class Engine.FXFile
// 0x0018 (0x0044 - 0x002C)
class UFXFile : public UObject
{
public:
	byte                                               Padding00[0x18];                                          // 0x002C(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FXFile");
		return ptr;
	}

};


// Class Engine.Polys
// 0x0010 (0x003C - 0x002C)
class UPolys : public UObject
{
public:
	byte                                               Padding00[0x10];                                          // 0x002C(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Polys");
		return ptr;
	}

};


// Class Engine.Font
// 0x0038 (0x0064 - 0x002C)
class UFont : public UObject
{
public:
	byte                                               Padding00[0x38];                                          // 0x002C(0x0038) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Font");
		return ptr;
	}

};


// Class Engine.FmodFile
// 0x0018 (0x0044 - 0x002C)
class UFmodFile : public UObject
{
public:
	byte                                               Padding00[0x18];                                          // 0x002C(0x0018) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FmodFile");
		return ptr;
	}

};


// Class Engine.FluidSurfaceOscillator
// 0x0018 (0x03F0 - 0x03D8)
class AFluidSurfaceOscillator : public AActor
{
public:
	class AFluidSurfaceInfo*                           FluidInfo;                                                // 0x03D8(0x0004) (Edit)
	float                                              Frequency;                                                // 0x03DC(0x0004) (Edit)
	byte                                               Phase;                                                    // 0x03E0(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x03E1(0x0003) MISSED OFFSET
	float                                              Strength;                                                 // 0x03E4(0x0004) (Edit)
	float                                              Radius;                                                   // 0x03E8(0x0004) (Edit)
	float                                              OscTime;                                                  // 0x03EC(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceOscillator");
		return ptr;
	}

};


// Class Engine.FluidSurfacePrimitive
// 0x0004 (0x005C - 0x0058)
class UFluidSurfacePrimitive : public UPrimitive
{
public:
	byte                                               Padding00[0x4];                                           // 0x0058(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfacePrimitive");
		return ptr;
	}

};


// Class Engine.FluidSurfaceInfo
// 0x0108 (0x0534 - 0x042C)
class AFluidSurfaceInfo : public AInfo
{
public:
	EFluidGridType                                     FluidGridType;                                            // 0x042C(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x042D(0x0003) MISSED OFFSET
	float                                              FluidGridSpacing;                                         // 0x0430(0x0004) (Edit)
	int                                                FluidXSize;                                               // 0x0434(0x0004) (Edit)
	int                                                FluidYSize;                                               // 0x0438(0x0004) (Edit)
	float                                              FluidHeightScale;                                         // 0x043C(0x0004) (Edit)
	float                                              FluidSpeed;                                               // 0x0440(0x0004) (Edit)
	float                                              FluidTimeScale;                                           // 0x0444(0x0004) (Edit)
	float                                              FluidDamping;                                             // 0x0448(0x0004) (Edit)
	float                                              FluidNoiseFrequency;                                      // 0x044C(0x0004) (Edit)
	struct FRange                                      FluidNoiseStrength;                                       // 0x0450(0x0008) (Edit)
	bool                                               TestRipple;                                               // 0x0458(0x0004) (Edit)
	float                                              TestRippleSpeed;                                          // 0x045C(0x0004) (Edit)
	float                                              TestRippleStrength;                                       // 0x0460(0x0004) (Edit)
	float                                              TestRippleRadius;                                         // 0x0464(0x0004) (Edit)
	float                                              UTiles;                                                   // 0x0468(0x0004) (Edit)
	float                                              UOffset;                                                  // 0x046C(0x0004) (Edit)
	float                                              VTiles;                                                   // 0x0470(0x0004) (Edit)
	float                                              VOffset;                                                  // 0x0474(0x0004) (Edit)
	float                                              AlphaCurveScale;                                          // 0x0478(0x0004) (Edit)
	float                                              AlphaHeightScale;                                         // 0x047C(0x0004) (Edit)
	byte                                               AlphaMax;                                                 // 0x0480(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x0481(0x0003) MISSED OFFSET
	float                                              ShootStrength;                                            // 0x0484(0x0004) (Edit)
	float                                              ShootRadius;                                              // 0x0488(0x0004) (Edit)
	float                                              RippleVelocityFactor;                                     // 0x048C(0x0004) (Edit)
	float                                              TouchStrength;                                            // 0x0490(0x0004) (Edit)
	class UClass*                                      ShootEffect;                                              // 0x0494(0x0004) (Edit)
	bool                                               OrientShootEffect;                                        // 0x0498(0x0004) (Edit)
	class UClass*                                      TouchEffect;                                              // 0x049C(0x0004) (Edit)
	bool                                               OrientTouchEffect;                                        // 0x04A0(0x0004) (Edit)
	int[]                                              ClampBitmap;                                              // 0x04A4(0x000C) (Const, NeedCtorLink)
	class ATerrainInfo*                                ClampTerrain;                                             // 0x04B0(0x0004) (Edit)
	bool                                               bShowBoundingBox;                                         // 0x04B4(0x0004) (Edit)
	bool                                               bUseNoRenderZ;                                            // 0x04B4(0x0004) (Edit)
	float                                              NoRenderZ;                                                // 0x04B8(0x0004) (Edit)
	float                                              WarmUpTime;                                               // 0x04BC(0x0004) (Edit)
	float                                              UpdateRate;                                               // 0x04C0(0x0004) (Edit)
	struct FColor                                      FluidColor;                                               // 0x04C4(0x0004) (Edit)
	float[]                                            Verts0;                                                   // 0x04C8(0x000C) (Const, Transient, NeedCtorLink)
	float[]                                            Verts1;                                                   // 0x04D4(0x000C) (Const, Transient, NeedCtorLink)
	byte[]                                             VertAlpha;                                                // 0x04E0(0x000C) (Const, Transient, NeedCtorLink)
	int                                                LatestVerts;                                              // 0x04EC(0x0004) (Const, Transient)
	struct FBox                                        FluidBoundingBox;                                         // 0x04F0(0x001C) (Const, Transient)
	struct FVector                                     FluidOrigin;                                              // 0x050C(0x000C) (Const, Transient)
	float                                              TimeRollover;                                             // 0x0518(0x0004) (Const, Transient)
	float                                              TestRippleAng;                                            // 0x051C(0x0004) (Const, Transient)
	class UFluidSurfacePrimitive*                      Primitive;                                                // 0x0520(0x0004) (Const, Transient)
	class AFluidSurfaceOscillator*[]                   Oscillators;                                              // 0x0524(0x000C) (Const, Transient, NeedCtorLink)
	bool                                               bHasWarmedUp;                                             // 0x0530(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FluidSurfaceInfo");
		return ptr;
	}


	void Touch(class AActor* Other);
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void Pling(const struct FVector& Position, float Strength, float Radius);
};


// Class Engine.GlobalTempObjects
// 0x000C (0x0038 - 0x002C)
class UGlobalTempObjects : public UObject
{
public:
	byte                                               Padding00[0xC];                                           // 0x002C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GlobalTempObjects");
		return ptr;
	}

};


// Class Engine.EncryptCommandlet
// 0x0000 (0x01E0 - 0x01E0)
class UEncryptCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EncryptCommandlet");
		return ptr;
	}

};


// Class Engine.VisibilityItemArray
// 0x000C (0x0038 - 0x002C)
class UVisibilityItemArray : public UObject
{
public:
	class UVisibilityItem*[]                           V;                                                        // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisibilityItemArray");
		return ptr;
	}

};


// Class Engine.VisibilityItem
// 0x000C (0x0038 - 0x002C)
class UVisibilityItem : public UObject
{
public:
	class UByteArray*[]                                V;                                                        // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VisibilityItem");
		return ptr;
	}

};


// Class Engine.ByteArray
// 0x000C (0x0038 - 0x002C)
class UByteArray : public UObject
{
public:
	byte[]                                             V;                                                        // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ByteArray");
		return ptr;
	}

};


// Class Engine.MasterMD5Commandlet
// 0x0010 (0x01F0 - 0x01E0)
class UMasterMD5Commandlet : public UCommandlet
{
public:
	byte                                               Padding00[0x10];                                          // 0x01E0(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MasterMD5Commandlet");
		return ptr;
	}

};


// Class Engine.UModUnpackCommandlet
// 0x0000 (0x01E0 - 0x01E0)
class UUModUnpackCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UModUnpackCommandlet");
		return ptr;
	}

};


// Class Engine.ServerCommandlet
// 0x0000 (0x01E0 - 0x01E0)
class UServerCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ServerCommandlet");
		return ptr;
	}

};


// Class Engine.RenderDevice
// 0x0094 (0x00C4 - 0x0030)
class URenderDevice : public USubsystem
{
public:
	byte                                               Padding00[0x10];                                          // 0x0030(0x0010) MISSED OFFSET
	bool                                               HighDetailActors;                                         // 0x0040(0x0004) (Edit)
	bool                                               Padding01 : 31;                                           // 0x0040(0x0001)
	bool                                               SuperHighDetailActors;                                    // 0x0044(0x0004) (Edit)
	byte                                               Padding02[0x7C];                                          // 0x0048(0x007C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RenderDevice");
		return ptr;
	}

};


// Class Engine.DownloadTexture
// 0x0038 (0x0094 - 0x005C)
class UDownloadTexture : public UBitmapMaterial
{
public:
	string                                             strImageURL;                                              // 0x005C(0x000C) (Edit, NeedCtorLink)
	string                                             strImageFileName;                                         // 0x0068(0x000C) (Edit, NeedCtorLink)
	string                                             strLinkUrl;                                               // 0x0074(0x000C) (Edit, NeedCtorLink)
	string                                             strLinkFileName;                                          // 0x0080(0x000C) (Edit, NeedCtorLink)
	bool                                               bIsDownloaded;                                            // 0x008C(0x0004) (Const, Transient)
	bool                                               bIsExistLink;                                             // 0x008C(0x0004) (Const, Transient)
	struct FPointer                                    RenderInterface;                                          // 0x0090(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DownloadTexture");
		return ptr;
	}

};


// Class Engine.Download
// 0x0430 (0x045C - 0x002C)
class UDownload : public UObject
{
public:
	byte                                               Padding00[0x430];                                         // 0x002C(0x0430) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Download");
		return ptr;
	}

};


// Class Engine.ChannelDownload
// 0x0004 (0x0460 - 0x045C)
class UChannelDownload : public UDownload
{
public:
	byte                                               Padding00[0x4];                                           // 0x045C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChannelDownload");
		return ptr;
	}

};


// Class Engine.DistortEmitter
// 0x0000 (0x04A8 - 0x04A8)
class UDistortEmitter : public USpriteEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DistortEmitter");
		return ptr;
	}

};


// Class Engine.DemoRecDriver
// 0x0098 (0x12A4 - 0x120C)
class UDemoRecDriver : public UNetDriver
{
public:
	byte                                               Padding00[0xC];                                           // 0x120C(0x000C) MISSED OFFSET
	string                                             DemoSpectatorClass;                                       // 0x1218(0x000C) (Edit, NeedCtorLink)
	byte                                               Padding01[0x80];                                          // 0x1224(0x0080) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecDriver");
		return ptr;
	}

};


// Class Engine.NetConnection
// 0x4F38 (0x4FAC - 0x0074)
class UNetConnection : public UPlayer
{
public:
	byte                                               Padding00[0x4F38];                                        // 0x0074(0x4F38) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NetConnection");
		return ptr;
	}

};


// Class Engine.DemoRecConnection
// 0x0000 (0x4FAC - 0x4FAC)
class UDemoRecConnection : public UNetConnection
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoRecConnection");
		return ptr;
	}

};


// Class Engine.DemoPlayPendingLevel
// 0x0000 (0x00B8 - 0x00B8)
class UDemoPlayPendingLevel : public UPendingLevel
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DemoPlayPendingLevel");
		return ptr;
	}

};


// Class Engine.ConvexVolume
// 0x0034 (0x008C - 0x0058)
class UConvexVolume : public UPrimitive
{
public:
	byte                                               Padding00[0x34];                                          // 0x0058(0x0034) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ConvexVolume");
		return ptr;
	}

};


// Class Engine.CacheManager
// 0x0068 (0x0094 - 0x002C)
class UCacheManager : public UObject
{
public:
	struct FStandard[]                                 DefaultContent;                                           // 0x002C(0x000C) (Edit, Const, NeedCtorLink)
	struct UCacheManager_FMutatorRecord[]              CacheMutators;                                            // 0x0038(0x000C) (Edit, Const, NeedCtorLink)
	struct FMapRecord[]                                CacheMaps;                                                // 0x0044(0x000C) (Edit, Const, NeedCtorLink)
	struct FWeaponRecord[]                             CacheWeapons;                                             // 0x0050(0x000C) (Edit, Const, NeedCtorLink)
	struct FVehicleRecord[]                            CacheVehicles;                                            // 0x005C(0x000C) (Edit, Const, NeedCtorLink)
	struct FCrosshairRecord[]                          CacheCrosshairs;                                          // 0x0068(0x000C) (Edit, Const, NeedCtorLink)
	struct FGameRecord[]                               CacheGameTypes;                                           // 0x0074(0x000C) (Edit, Const, NeedCtorLink)
	struct FAnnouncerRecord[]                          CacheAnnouncers;                                          // 0x0080(0x000C) (Edit, Const, NeedCtorLink)
	struct FPointer                                    FileManager;                                              // 0x008C(0x0004) (Const, Native, Transient)
	struct FPointer                                    Tracker;                                                  // 0x0090(0x0004) (Const, Native, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CacheManager");
		return ptr;
	}


	struct FAnnouncerRecord STATIC_GetAnnouncerRecord(const string& ClassName);
	struct FVehicleRecord STATIC_GetVehicleRecord(const string& ClassName);
	struct FWeaponRecord STATIC_GetWeaponRecord(const string& ClassName);
	struct UCacheManager_FMutatorRecord STATIC_GetMutatorRecord(const string& ClassName);
	struct FMapRecord STATIC_GetMapRecord(const string& MapName);
	struct FGameRecord STATIC_GetGameRecord(const string& ClassName);
	void STATIC_GetTeamSymbolList(bool bNoSinglePlayer, string[]* SymbolNames);
	void STATIC_GetAnnouncerList(struct FAnnouncerRecord[]* AnnouncerRecords);
	void STATIC_GetMutatorList(struct UCacheManager_FMutatorRecord[]* MutatorRecords);
	void STATIC_GetCrosshairList(struct FCrosshairRecord[]* CrosshairRecords);
	void STATIC_GetVehicleList(struct FVehicleRecord[]* VehicleRecords);
	void STATIC_GetWeaponList(struct FWeaponRecord[]* WeaponRecords);
	void STATIC_GetMapList(const string& Acronym, struct FMapRecord[]* MapRecords);
	void STATIC_GetGameTypeList(const string& FilterType, struct FGameRecord[]* GameRecords);
	bool STATIC_IsDefaultContent(const string& Item);
	bool STATIC_IsBPContent(const string& Item);
	bool STATIC_Is2004Content(const string& Item);
	bool STATIC_Is2003Content(const string& Item);
	void STATIC_InitCache();
};


// Class Engine.AdminBase
// 0x0134 (0x0160 - 0x002C)
class UAdminBase : public UObject
{
public:
	bool                                               bAdmin;                                                   // 0x002C(0x0004)
	class AAccessControl*                              Manager;                                                  // 0x0030(0x0004)
	string                                             Msg_PlayerList;                                           // 0x0034(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_AllGameMaps;                                          // 0x0040(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_AllMapLists;                                          // 0x004C(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_MapRotationList;                                      // 0x0058(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_NoMapsAdded;                                          // 0x0064(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_AddedMapToList;                                       // 0x0070(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_NoMapsRemoved;                                        // 0x007C(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_RemovedFromList;                                      // 0x0088(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_PlayerBanned;                                         // 0x0094(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_SessionBanned;                                        // 0x00A0(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_PlayerKicked;                                         // 0x00AC(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_NextMapNotFound;                                      // 0x00B8(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_ChangingMapTo;                                        // 0x00C4(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_NoMapInRotation;                                      // 0x00D0(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_NoMapsFound;                                          // 0x00DC(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_MapIsInRotation;                                      // 0x00E8(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_MapNotInRotation;                                     // 0x00F4(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_UnknownParam;                                         // 0x0100(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_NoParamsFound;                                        // 0x010C(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_ParamModified;                                        // 0x0118(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_ParamNotModified;                                     // 0x0124(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_MapListAdded;                                         // 0x0130(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_MapListRemoved;                                       // 0x013C(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_MapIsNotInRotation;                                   // 0x0148(0x000C) (Localized, NeedCtorLink)
	string                                             Msg_EditingMapList;                                       // 0x0154(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AdminBase");
		return ptr;
	}


	string[] SplitParams(const string& params);
	bool IsNumeric(const string& Param, bool bPositiveOnly);
	bool MaskedCompare(const string& SettingName, const string& Mask);
	void SendComplexMsg(string[] Arr, const string& Title);
	string FindGameType(const string& GameType);
	bool CanPerform(const string& priv);
	void Switch(const string& URL);
	void MapList(const string& Cmd, const string& Extra);
	void Map(const string& Cmd);
	void NextMap();
	void RestartMap();
	void KickBan(const string& S);
	void Kick(const string& Cmd, const string& Extra);
	void PlayerList();
	void RestartCurrentMap();
	void MaplistCommand(const string& Cmd, const string& Extra);
	string[] GetMapListNames(const string& GameType);
	void ShowCurrentMapList();
	void GoToNextMap();
	void DoSwitch(const string& URL);
	void DoLogout();
	void DoLogin(const string& UserName, const string& Password);
	void Created();
};


// Class Engine.PlayerInput
// 0x0064 (0x0090 - 0x002C)
class UPlayerInput : public UObject
{
public:
	bool                                               bEdgeRight;                                               // 0x002C(0x0004)
	bool                                               bAdjustSampling;                                          // 0x002C(0x0004)
	bool                                               bInvertMouse;                                             // 0x002C(0x0004)
	bool                                               bWasForward;                                              // 0x002C(0x0004)
	bool                                               bWasBack;                                                 // 0x002C(0x0004)
	bool                                               bWasLeft;                                                 // 0x002C(0x0004)
	bool                                               bWasRight;                                                // 0x002C(0x0004)
	bool                                               bEdgeForward;                                             // 0x002C(0x0004)
	bool                                               bEdgeBack;                                                // 0x002C(0x0004)
	bool                                               bEdgeLeft;                                                // 0x002C(0x0004)
	byte                                               MouseSmoothingMode;                                       // 0x0030(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0031(0x0003) MISSED OFFSET
	float                                              MouseSmoothingStrength;                                   // 0x0034(0x0004)
	float                                              MouseSensitivity;                                         // 0x0038(0x0004)
	float                                              MouseSensitivityActive;                                   // 0x003C(0x0004)
	float                                              MouseSensitivityAim;                                      // 0x0040(0x0004)
	float                                              MouseSamplingTime;                                        // 0x0044(0x0004)
	float                                              MouseAccelThreshold;                                      // 0x0048(0x0004)
	float                                              SmoothedMouse[0x2];                                       // 0x004C(0x0004)
	float                                              ZeroTime[0x2];                                            // 0x0054(0x0004)
	float                                              SamplingTime[0x2];                                        // 0x005C(0x0004)
	float                                              MaybeTime[0x2];                                           // 0x0064(0x0004)
	float                                              OldSamples[0x4];                                          // 0x006C(0x0004)
	int                                                MouseSamples[0x2];                                        // 0x007C(0x0004)
	float                                              DoubleClickTimer;                                         // 0x0084(0x0004)
	float                                              DoubleClickTime;                                          // 0x0088(0x0004)
	bool                                               bEnableDodging;                                           // 0x008C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerInput");
		return ptr;
	}


	EDoubleClickDir CheckForDoubleClickMove(float DeltaTime);
	void ChangeSnapView(bool B);
	void InvertMouse(const string& Invert);
	void UpdateSmoothing(int Mode);
	void UpdateAccel(float f);
	void UpdateSensitivityForAim(bool bZoom);
	void UpdateSensitivity(float f, bool bZooming);
	float SmoothMouse(float aMouse, float DeltaTime, int Index, byte* SampleCount);
	float AccelerateMouse(float aMouse);
	void SetSmoothingStrength(float f);
	void SetSmoothingMode(byte B);
	void PlayerInput(float DeltaTime);
	bool InvertLook();
};


// Class Engine.CheatManager
// 0x0010 (0x003C - 0x002C)
class UCheatManager : public UObject
{
public:
	struct FRotator                                    LockedRotation;                                           // 0x002C(0x000C)
	bool                                               bCheatsEnabled;                                           // 0x0038(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CheatManager");
		return ptr;
	}


	void ShowAllPlayers();
	void ruler();
	void DisableNextObjective();
	void WeakObjectives();
	void ReportCheat(const string& cheat);
	bool areCheatsEnabled();
	void EnableCheats();
	void WinMatch();
	void JumpMatch(int ladderrung);
	void SkipMatch();
	void AllWeapons();
	void Loaded();
	void ViewClass(class UClass* aClass, bool bQuiet, bool bCheat);
	void ViewTurret();
	void ViewNext(const FName& nameController);
	void ViewBot();
	void VAI();
	void VHD();
	void VH();
	void ViewFlag();
	void ViewActor(const FName& ActorName);
	void ViewPlayer(const string& S);
	void ViewSelf(bool bQuiet);
	void RememberSpot();
	void CheatView(class UClass* aClass, bool bQuiet);
	void ClearAllDebugLines();
	void FreezeAll();
	void PlayersOnly();
	void Summon(const string& ClassName);
	void Avatar(const string& ClassName);
	void KillPawns();
	void SetSpeed(float f);
	void SetPriction(float f);
	void SetGravity(float f);
	void SetJumpLandDrop(float f);
	void SetJumpZ(float f);
	void doSlomo(float t);
	void SloMo(float t);
	void God();
	void Phil();
	void Invisible(bool B);
	void AllAmmo();
	void Ghost();
	void Walk();
	void Fly();
	void Amphibious();
	void CauseEvent(const FName& EventName);
	void FreeCamera(bool B);
	void EndPath();
	void SetCameraDist(float f);
	void LockCamera();
	void ChangeSize(float f);
	void Teleport();
	void LogScriptedSequences();
	void KillViewedActor();
	void SetFogB(float f);
	void SetFogG(float f);
	void SetFogR(float f);
	void SetFlash(float f);
	void WriteToLog(const string& Param);
	void FreezeFrame(float Delay);
	void Pause(bool bPause);
	void ListDynamicActors();
	void ReviewJumpSpots(const FName& TestLabel);
};


// Class Engine.Channel
// 0x003C (0x0068 - 0x002C)
class UChannel : public UObject
{
public:
	byte                                               Padding00[0x3C];                                          // 0x002C(0x003C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Channel");
		return ptr;
	}

};


// Class Engine.VoiceChannel
// 0x0004 (0x006C - 0x0068)
class UVoiceChannel : public UChannel
{
public:
	byte                                               Padding00[0x4];                                           // 0x0068(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VoiceChannel");
		return ptr;
	}

};


// Class Engine.FileChannel
// 0x0210 (0x0278 - 0x0068)
class UFileChannel : public UChannel
{
public:
	byte                                               Padding00[0x210];                                         // 0x0068(0x0210) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileChannel");
		return ptr;
	}

};


// Class Engine.ActorChannel
// 0x0064 (0x00CC - 0x0068)
class UActorChannel : public UChannel
{
public:
	byte                                               Padding00[0x64];                                          // 0x0068(0x0064) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ActorChannel");
		return ptr;
	}

};


// Class Engine.ControlChannel
// 0x0004 (0x006C - 0x0068)
class UControlChannel : public UChannel
{
public:
	byte                                               Padding00[0x4];                                           // 0x0068(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ControlChannel");
		return ptr;
	}

};


// Class Engine.CascadedShadowMaps
// 0x01C4 (0x01F0 - 0x002C)
class UCascadedShadowMaps : public UObject
{
public:
	byte                                               Padding00[0x1C4];                                         // 0x002C(0x01C4) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CascadedShadowMaps");
		return ptr;
	}

};


// Class Engine.Canvas
// 0x00A0 (0x00CC - 0x002C)
class UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                                     // 0x002C(0x0004)
	float                                              FontScaleX;                                               // 0x0030(0x0004)
	float                                              FontScaleY;                                               // 0x0034(0x0004)
	float                                              SpaceX;                                                   // 0x0038(0x0004)
	float                                              SpaceY;                                                   // 0x003C(0x0004)
	float                                              OrgX;                                                     // 0x0040(0x0004)
	float                                              OrgY;                                                     // 0x0044(0x0004)
	float                                              ClipX;                                                    // 0x0048(0x0004)
	float                                              ClipY;                                                    // 0x004C(0x0004)
	float                                              CurX;                                                     // 0x0050(0x0004)
	float                                              CurY;                                                     // 0x0054(0x0004)
	float                                              Z;                                                        // 0x0058(0x0004)
	byte                                               Style;                                                    // 0x005C(0x0001)
	byte                                               Padding00[0x3];                                           // 0x005D(0x0003) MISSED OFFSET
	float                                              CurYL;                                                    // 0x0060(0x0004)
	struct FColor                                      DrawColor;                                                // 0x0064(0x0004)
	struct FColor                                      DrawBackColor;                                            // 0x0068(0x0004)
	bool                                               bCenter;                                                  // 0x006C(0x0004)
	bool                                               bNoSmooth;                                                // 0x006C(0x0004)
	int                                                SizeX;                                                    // 0x0070(0x0004) (Const)
	int                                                SizeY;                                                    // 0x0074(0x0004) (Const)
	struct FPlane                                      ColorModulate;                                            // 0x0078(0x0010)
	bool                                               bForceAlpha;                                              // 0x0088(0x0004)
	float                                              ForcedAlpha;                                              // 0x008C(0x0004)
	bool                                               bRenderLevel;                                             // 0x0090(0x0004)
	class UFont*                                       TinyFont;                                                 // 0x0094(0x0004)
	class UFont*                                       SmallFont;                                                // 0x0098(0x0004)
	class UFont*                                       MedFont;                                                  // 0x009C(0x0004)
	string                                             TinyFontName;                                             // 0x00A0(0x000C) (NeedCtorLink)
	string                                             SmallFontName;                                            // 0x00AC(0x000C) (NeedCtorLink)
	string                                             MedFontName;                                              // 0x00B8(0x000C) (NeedCtorLink)
	class UViewport*                                   Viewport;                                                 // 0x00C4(0x0004) (Const)
	struct FPointer                                    pCanvasUtil;                                              // 0x00C8(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Canvas");
		return ptr;
	}


	void DrawScreenText(const string& Text, float X, float Y, EDrawPivot Pivot);
	void DrawBox(class UCanvas* Canvas, float width, float Height);
	void DrawBracket(float width, float Height, float bracket_size);
	void DrawLine(int direction, float Size);
	void DrawHorizontal(float Y, float width);
	void DrawVertical(float X, float Height);
	struct FColor STATIC_MakeColorNoEmpty(byte R, byte G, byte B, byte A);
	struct FColor STATIC_MakeColor(byte R, byte G, byte B, byte A);
	void SetDrawColor(byte R, byte G, byte B, byte A);
	void DrawRect(class UTexture* Tex, float RectX, float RectY);
	void DrawIcon(class UTexture* Tex, float Scale);
	void DrawPattern(class UMaterial* Tex, float XL, float YL, float Scale);
	void SetClip(float X, float Y);
	void SetOrigin(float X, float Y);
	void SetPos(float X, float Y);
	void Reset();
	void BtrDrawTextJustifiedWithVolumeLineCache(const string& Text, byte Justification, float X1, float Y1, float X2, float Y2, int fntSize, const struct FColor& shadowC, int dropSX, int dropSY, int Level);
	void BtrDrawTextJustifiedWithVolumeLine(const string& Text, byte Justification, float X1, float Y1, float X2, float Y2, int fntSize, const struct FColor& shadowC, int dropSX, int dropSY, int Level, bool bUseD3DFont);
	void BtrDrawTextJustifiedWithVolumeLineNoCache(const string& Text, byte Justification, float X1, float Y1, float X2, float Y2, int fntSize, const struct FColor& shadowC, int dropSX, int dropSY, int Level);
	void Flush();
	void DrawTileExactWithRotation(class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, const struct FRotator& R);
	void DrawTileExact(class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL);
	void BtrDrawTextJustifiedCache(const string& Text, byte Justification, float X1, float Y1, float X2, float Y2, int FontSize, int Level);
	void DrawTileCache(class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL, int Level);
	void EndCache();
	void BeginCache();
	void BtrTextSizeOLD(const string& Text, int FontSize, float* XL, float* YL);
	void BtrTextSizeLH(const string& Text, int FontSize, float* XL, float* YL);
	void BtrTextSize(const string& Text, int FontSize, float* XL, float* YL);
	void BtrDrawTextHK_UseModulateColor(const string& Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, byte GCLevel, byte PresetIndex, bool bUseModulateColor, const struct FPlane& mColor);
	void BtrDrawTextHK(const string& Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, byte GCLevel, byte PresetIndex);
	void BtrFontTextureGC();
	void BtrFontReset();
	void BtrToggleUseD3DFont();
	void BtrSaveTexture();
	void BtrDrawTextJustified(const string& Text, byte Justification, float X1, float Y1, float X2, float Y2, int FontSize, bool bCache);
	void DrawActorClipped(class AActor* A, bool Wireframe, float Left, float Top, float width, float Height, bool ClearZ, float DisplayFOV);
	void DrawTextJustified(const string& String, byte Justification, float X1, float Y1, float X2, float Y2);
	void DrawTileScaled(class UMaterial* mat, float XScale, float YScale);
	void DrawTileJustified(class UMaterial* mat, byte Justification, float XL, float YL);
	void DrawTileCroppedStretched(class UMaterial* mat, float XL, float YL, float UL, float VL);
	void DrawTileStretched(class UMaterial* mat, float XL, float YL);
	void DrawTilePartialStretched(class UMaterial* mat, float XL, float YL);
	void STATIC_WrapText(float dx, class UFont* f, float FontScaleX, string* Text, string* Line);
	void WrapStringToArray(const string& Text, float dx, const string& EOL, string[]* OutArray);
	void Clear(bool ClearRGB, bool ClearZ);
	void DrawScreenActorWithViewport(class AActor* A, int X1, int Y1, int X2, int Y2, float AspectRatio, float FOV, bool Wireframe, bool ClearZ);
	void DrawScreenActor(class AActor* A, float FOV, bool Wireframe, bool ClearZ);
	void SetScreenProjector(int Index, const struct FVector& Position, const struct FColor& Color, float Radius, class UTexture* Tex);
	void SetScreenLight(int Index, const struct FVector& Position, const struct FColor& LightColor, float Radius);
	void SetFontScale(float fX, float fY);
	void Draw2DPoint(float X, float Y, const struct FColor& PointColor);
	void Draw2DLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor);
	float GetClientHeightRatio();
	void SetCameraRotation(const struct FRotator& CameraRotation);
	void SetCameraLocation(const struct FVector& CameraLocation);
	void GetCameraLocation(struct FVector* CameraLocation, struct FRotator* CameraRotation);
	struct FVector WorldToScreen(const struct FVector& WorldLoc);
	void DrawPortal(int X, int Y, int width, int Height, class AActor* CamActor, const struct FVector& CamLocation, const struct FRotator& CamRotation, int FOV, bool ClearZ);
	void TextSize(const string& String, float* XL, float* YL);
	void DrawTextClipped(const string& Text, bool bCheckHotKey);
	void DrawTileClipped(class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL);
	void DrawActor(class AActor* A, bool Wireframe, bool ClearZ, float DisplayFOV);
	void DrawTile(class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL);
	void DrawText(const string& Text, bool cR);
	void StrLen(const string& String, float* XL, float* YL);
};


// Class Engine.Client
// 0x014C (0x0178 - 0x002C)
class UClient : public UObject
{
public:
	byte                                               Padding00[0x10];                                          // 0x002C(0x0010) MISSED OFFSET
	bool                                               CaptureMouse;                                             // 0x003C(0x0004) (Edit)
	bool                                               Padding01 : 31;                                           // 0x003C(0x0001)
	bool                                               ScreenFlashes;                                            // 0x0040(0x0004) (Edit)
	bool                                               Padding02 : 31;                                           // 0x0040(0x0001)
	bool                                               NoLighting;                                               // 0x0044(0x0004) (Edit)
	bool                                               Padding03 : 31;                                           // 0x0044(0x0001)
	bool                                               Decals;                                                   // 0x0048(0x0004) (Edit)
	bool                                               Padding04 : 31;                                           // 0x0048(0x0001)
	bool                                               NoDynamicLights;                                          // 0x004C(0x0004) (Edit)
	bool                                               Padding05 : 31;                                           // 0x004C(0x0001)
	bool                                               NoFractalAnim;                                            // 0x0050(0x0004) (Edit)
	bool                                               Padding06 : 31;                                           // 0x0050(0x0001)
	bool                                               Coronas;                                                  // 0x0054(0x0004) (Edit)
	bool                                               Padding07 : 31;                                           // 0x0054(0x0001)
	bool                                               DecoLayers;                                               // 0x0058(0x0004) (Edit)
	bool                                               Padding08 : 31;                                           // 0x0058(0x0001)
	bool                                               Projectors;                                               // 0x005C(0x0004) (Edit)
	bool                                               Padding09 : 31;                                           // 0x005C(0x0001)
	bool                                               ReportDynamicUploads;                                     // 0x0060(0x0004) (Edit)
	bool                                               Padding10 : 31;                                           // 0x0060(0x0001)
	bool                                               WeatherEffects;                                           // 0x0064(0x0004) (Edit)
	byte                                               Padding11[0x4];                                           // 0x0068(0x0004) MISSED OFFSET
	bool                                               DOF;                                                      // 0x006C(0x0004) (Edit)
	byte                                               Padding12[0x4];                                           // 0x0070(0x0004) MISSED OFFSET
	bool                                               Shader;                                                   // 0x0074(0x0004) (Edit)
	byte                                               Padding13[0x4];                                           // 0x0078(0x0004) MISSED OFFSET
	bool                                               SpecularMap;                                              // 0x007C(0x0004) (Edit)
	bool                                               Padding14 : 31;                                           // 0x007C(0x0001)
	bool                                               Glow;                                                     // 0x0080(0x0004) (Edit)
	bool                                               Padding15 : 31;                                           // 0x0080(0x0001)
	bool                                               Shadows;                                                  // 0x0084(0x0004) (Edit)
	byte                                               Padding16[0x4];                                           // 0x0088(0x0004) MISSED OFFSET
	bool                                               UseInverseWeapon;                                         // 0x008C(0x0004) (Edit)
	byte                                               Padding17[0xC];                                           // 0x0090(0x000C) MISSED OFFSET
	int                                                GraphicQuality;                                           // 0x009C(0x0004) (Edit)
	int                                                GameViewportX;                                            // 0x00A0(0x0004) (Edit)
	int                                                GameViewportY;                                            // 0x00A4(0x0004) (Edit)
	int                                                PostProcessType;                                          // 0x00A8(0x0004) (Edit)
	int                                                Antialiasing;                                             // 0x00AC(0x0004) (Edit)
	byte                                               Padding18[0x7C];                                          // 0x00B0(0x007C) MISSED OFFSET
	float                                              Brightness;                                               // 0x012C(0x0004) (Edit)
	float                                              Contrast;                                                 // 0x0130(0x0004) (Edit)
	float                                              Gamma;                                                    // 0x0134(0x0004) (Edit)
	byte                                               Padding19[0x4];                                           // 0x0138(0x0004) MISSED OFFSET
	ETextureDetail                                     TextureDetailWorld;                                       // 0x013C(0x0001) (Edit)
	byte                                               Padding20[0x1B];                                          // 0x013D(0x001B) MISSED OFFSET
	float                                              MinDesiredFrameRate;                                      // 0x0158(0x0004) (Edit)
	byte                                               Padding21[0x4];                                           // 0x015C(0x0004) MISSED OFFSET
	float                                              ScaleHUDX;                                                // 0x0160(0x0004) (Edit)
	float                                              AnimMeshDynamicLOD;                                       // 0x0164(0x0004) (Edit)
	float                                              DrawDistanceLOD;                                          // 0x0168(0x0004) (Edit)
	byte                                               Padding22[0xC];                                           // 0x016C(0x000C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Client");
		return ptr;
	}

};


// Class Engine.CameraEffect
// 0x000C (0x0038 - 0x002C)
class UCameraEffect : public UObject
{
public:
	float                                              Alpha;                                                    // 0x002C(0x0004)
	bool                                               FinalEffect;                                              // 0x0030(0x0004)
	int                                                cameraeffect_dummy;                                       // 0x0034(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraEffect");
		return ptr;
	}

};


// Class Engine.FadeBlackWhite
// 0x0010 (0x0048 - 0x0038)
class UFadeBlackWhite : public UCameraEffect
{
public:
	byte                                               Padding00[0x10];                                          // 0x0038(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FadeBlackWhite");
		return ptr;
	}

};


// Class Engine.BlackWhite
// 0x0000 (0x0038 - 0x0038)
class UBlackWhite : public UCameraEffect
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlackWhite");
		return ptr;
	}

};


// Class Engine.CameraOverlay
// 0x0008 (0x0040 - 0x0038)
class UCameraOverlay : public UCameraEffect
{
public:
	struct FColor                                      OverlayColor;                                             // 0x0038(0x0004) (Edit)
	class UMaterial*                                   OverlayMaterial;                                          // 0x003C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CameraOverlay");
		return ptr;
	}

};


// Class Engine.MotionBlur
// 0x0010 (0x0048 - 0x0038)
class UMotionBlur : public UCameraEffect
{
public:
	byte                                               BlurAlpha;                                                // 0x0038(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0039(0x0003) MISSED OFFSET
	struct FPointer                                    RenderTargets[0x2];                                       // 0x003C(0x0004) (Const, Transient)
	float                                              LastFrameTime;                                            // 0x0044(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MotionBlur");
		return ptr;
	}

};


// Class Engine.SubActionCameraEffect
// 0x0010 (0x0064 - 0x0054)
class USubActionCameraEffect : public UMatSubAction
{
public:
	class UCameraEffect*                               CameraEffect;                                             // 0x0054(0x0004) (Edit, EditInline)
	float                                              StartAlpha;                                               // 0x0058(0x0004) (Edit)
	float                                              EndAlpha;                                                 // 0x005C(0x0004) (Edit)
	bool                                               DisableAfterDuration;                                     // 0x0060(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SubActionCameraEffect");
		return ptr;
	}

};


// Class Engine.Viewport
// 0x013C (0x01B0 - 0x0074)
class UViewport : public UPlayer
{
public:
	byte                                               Padding00[0x13C];                                         // 0x0074(0x013C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Viewport");
		return ptr;
	}

};


// Class Engine.BTTcpLink_DStoDP_DS
// 0x0024 (0x0050 - 0x002C)
class UBTTcpLink_DStoDP_DS : public UObject
{
public:
	byte                                               Padding00[0x24];                                          // 0x002C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTTcpLink_DStoDP_DS");
		return ptr;
	}

};


// Class Engine.BTTcpLink_Channel_DS
// 0x0024 (0x0050 - 0x002C)
class UBTTcpLink_Channel_DS : public UObject
{
public:
	byte                                               Padding00[0x24];                                          // 0x002C(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTTcpLink_Channel_DS");
		return ptr;
	}

};


// Class Engine.BTPingCheckerLinker
// 0x0008 (0x0034 - 0x002C)
class UBTPingCheckerLinker : public UObject
{
public:
	class UGameEngine*                                 m_GEngine;                                                // 0x002C(0x0004)
	class UwMatchMaker*                                m_MM;                                                     // 0x0030(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTPingCheckerLinker");
		return ptr;
	}


	void ReceivedPingAck(string[] fromAddr, int[] ElapsedMiliSec);
	bool SendText(const string& strDest_IP, int nDest_Port, const string& strTextData);
	bool SendPing(const string& toAddr);
};


// Class Engine.BTPingChecker
// 0x0004 (0x0030 - 0x002C)
class UBTPingChecker : public UObject
{
public:
	byte                                               Padding00[0x4];                                           // 0x002C(0x0004) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTPingChecker");
		return ptr;
	}

};


// Class Engine.BTNetInterface
// 0x0000 (0x002C - 0x002C)
class UBTNetInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTNetInterface");
		return ptr;
	}

};


// Class Engine.BTMapLoader
// 0x0010 (0x003C - 0x002C)
class UBTMapLoader : public UObject
{
public:
	byte                                               Padding00[0x10];                                          // 0x002C(0x0010) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTMapLoader");
		return ptr;
	}

};


// Class Engine.BTLoadingAdvancer
// 0x0008 (0x0034 - 0x002C)
class UBTLoadingAdvancer : public UObject
{
public:
	byte                                               Padding00[0x8];                                           // 0x002C(0x0008) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTLoadingAdvancer");
		return ptr;
	}

};


// Class Engine.BTLoadingState
// 0x008C (0x00B8 - 0x002C)
class UBTLoadingState : public UObject
{
public:
	byte                                               Padding00[0x8C];                                          // 0x002C(0x008C) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BTLoadingState");
		return ptr;
	}

};


// Class Engine.BeamEmitter
// 0x010C (0x0598 - 0x048C)
class UBeamEmitter : public UParticleEmitter
{
public:
	struct FRange                                      BeamDistanceRange;                                        // 0x048C(0x0008) (Edit)
	struct FParticleBeamEndPoint[]                     BeamEndPoints;                                            // 0x0494(0x000C) (Edit, NeedCtorLink)
	EBeamEndPointType                                  DetermineEndPointBy;                                      // 0x04A0(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x04A1(0x0003) MISSED OFFSET
	float                                              BeamTextureUScale;                                        // 0x04A4(0x0004) (Edit)
	float                                              BeamTextureVScale;                                        // 0x04A8(0x0004) (Edit)
	int                                                RotatingSheets;                                           // 0x04AC(0x0004) (Edit)
	bool                                               TriggerEndpoint;                                          // 0x04B0(0x0004) (Edit)
	struct FRangeVector                                LowFrequencyNoiseRange;                                   // 0x04B4(0x0018) (Edit)
	int                                                LowFrequencyPoints;                                       // 0x04CC(0x0004) (Edit)
	struct FRangeVector                                HighFrequencyNoiseRange;                                  // 0x04D0(0x0018) (Edit)
	int                                                HighFrequencyPoints;                                      // 0x04E8(0x0004) (Edit)
	struct FParticleBeamScale[]                        LFScaleFactors;                                           // 0x04EC(0x000C) (Edit, NeedCtorLink)
	struct FParticleBeamScale[]                        HFScaleFactors;                                           // 0x04F8(0x000C) (Edit, NeedCtorLink)
	float                                              LFScaleRepeats;                                           // 0x0504(0x0004) (Edit)
	float                                              HFScaleRepeats;                                           // 0x0508(0x0004) (Edit)
	bool                                               UseHighFrequencyScale;                                    // 0x050C(0x0004) (Edit)
	bool                                               UseLowFrequencyScale;                                     // 0x050C(0x0004) (Edit)
	bool                                               NoiseDeterminesEndPoint;                                  // 0x050C(0x0004) (Edit)
	struct FRangeVector                                DynamicHFNoiseRange;                                      // 0x0510(0x0018) (Edit)
	struct FRange                                      DynamicHFNoisePointsRange;                                // 0x0528(0x0008) (Edit)
	struct FRange                                      DynamicTimeBetweenNoiseRange;                             // 0x0530(0x0008) (Edit)
	bool                                               UseBranching;                                             // 0x0538(0x0004) (Edit)
	struct FRange                                      BranchProbability;                                        // 0x053C(0x0008) (Edit)
	struct FRange                                      BranchHFPointsRange;                                      // 0x0544(0x0008) (Edit)
	int                                                BranchEmitter;                                            // 0x054C(0x0004) (Edit)
	struct FRange                                      BranchSpawnAmountRange;                                   // 0x0550(0x0008) (Edit)
	bool                                               LinkupLifetime;                                           // 0x0558(0x0004) (Edit)
	int                                                SheetsUsed;                                               // 0x055C(0x0004) (Transient)
	int                                                VerticesPerParticle;                                      // 0x0560(0x0004) (Transient)
	int                                                IndicesPerParticle;                                       // 0x0564(0x0004) (Transient)
	int                                                PrimitivesPerParticle;                                    // 0x0568(0x0004) (Transient)
	float                                              BeamValueSum;                                             // 0x056C(0x0004) (Transient)
	struct FParticleBeamData[]                         HFPoints;                                                 // 0x0570(0x000C) (Transient, NeedCtorLink)
	struct FVector[]                                   LFPoints;                                                 // 0x057C(0x000C) (Transient, NeedCtorLink)
	class AActor*[]                                    HitActors;                                                // 0x0588(0x000C) (Transient, NeedCtorLink)
	float                                              TimeSinceLastDynamicNoise;                                // 0x0594(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BeamEmitter");
		return ptr;
	}

};


// Class Engine.I3DL2Listener
// 0x0074 (0x00A0 - 0x002C)
class UI3DL2Listener : public UObject
{
public:
	float                                              EnvironmentSize;                                          // 0x002C(0x0004) (Edit)
	float                                              EnvironmentDiffusion;                                     // 0x0030(0x0004) (Edit)
	int                                                Room;                                                     // 0x0034(0x0004) (Edit)
	int                                                RoomHF;                                                   // 0x0038(0x0004) (Edit)
	int                                                RoomLF;                                                   // 0x003C(0x0004) (Edit)
	float                                              DecayTime;                                                // 0x0040(0x0004) (Edit)
	float                                              DecayHFRatio;                                             // 0x0044(0x0004) (Edit)
	float                                              DecayLFRatio;                                             // 0x0048(0x0004) (Edit)
	int                                                Reflections;                                              // 0x004C(0x0004) (Edit)
	float                                              ReflectionsDelay;                                         // 0x0050(0x0004) (Edit)
	struct FVector                                     ReflectionsPan;                                           // 0x0054(0x000C) (Edit)
	int                                                Reverb;                                                   // 0x0060(0x0004) (Edit)
	float                                              ReverbDelay;                                              // 0x0064(0x0004) (Edit)
	struct FVector                                     ReverbPan;                                                // 0x0068(0x000C) (Edit)
	float                                              EchoTime;                                                 // 0x0074(0x0004) (Edit)
	float                                              EchoDepth;                                                // 0x0078(0x0004) (Edit)
	float                                              ModulationTime;                                           // 0x007C(0x0004) (Edit)
	float                                              ModulationDepth;                                          // 0x0080(0x0004) (Edit)
	float                                              RoomRolloffFactor;                                        // 0x0084(0x0004) (Edit)
	float                                              AirAbsorptionHF;                                          // 0x0088(0x0004) (Edit)
	float                                              HFReference;                                              // 0x008C(0x0004) (Edit)
	float                                              LFReference;                                              // 0x0090(0x0004) (Edit)
	bool                                               bDecayTimeScale;                                          // 0x0094(0x0004) (Edit)
	bool                                               bReflectionsScale;                                        // 0x0094(0x0004) (Edit)
	bool                                               bReflectionsDelayScale;                                   // 0x0094(0x0004) (Edit)
	bool                                               bReverbScale;                                             // 0x0094(0x0004) (Edit)
	bool                                               bReverbDelayScale;                                        // 0x0094(0x0004) (Edit)
	bool                                               bEchoTimeScale;                                           // 0x0094(0x0004) (Edit)
	bool                                               bModulationTimeScale;                                     // 0x0094(0x0004) (Edit)
	bool                                               bDecayHFLimit;                                            // 0x0094(0x0004) (Edit)
	int                                                Environment;                                              // 0x0098(0x0004) (Transient)
	int                                                Updated;                                                  // 0x009C(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.I3DL2Listener");
		return ptr;
	}

};


// Class Engine.AudioSubsystem
// 0x007C (0x00AC - 0x0030)
class UAudioSubsystem : public USubsystem
{
public:
	byte                                               Padding00[0x48];                                          // 0x0030(0x0048) MISSED OFFSET
	float                                              SoundVolume;                                              // 0x0078(0x0004) (Edit)
	byte                                               Padding01[0x4];                                           // 0x007C(0x0004) MISSED OFFSET
	float                                              MusicVolume;                                              // 0x0080(0x0004) (Edit)
	byte                                               Padding02[0x28];                                          // 0x0084(0x0028) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AudioSubsystem");
		return ptr;
	}

};


// Class Engine.Sound
// 0x0060 (0x008C - 0x002C)
class USound : public UObject
{
public:
	float                                              Likelihood;                                               // 0x002C(0x0004) (Edit, Native)
	byte                                               Data[0x2C];                                               // 0x0030(0x0001) (Const, Native)
	FName                                              FileType;                                                 // 0x005C(0x0004) (Const, Native)
	string                                             fileName;                                                 // 0x0060(0x000C) (Const, Native)
	int                                                OriginalSize;                                             // 0x006C(0x0004) (Const, Native)
	float                                              Duration;                                                 // 0x0070(0x0004) (Const, Native)
	struct FPointer                                    Handle;                                                   // 0x0074(0x0004) (Const, Native, Transient)
	int                                                Flags;                                                    // 0x0078(0x0004) (Const, Native)
	int                                                VoiceCodec;                                               // 0x007C(0x0004) (Const, Native)
	float                                              InitialSeekTime;                                          // 0x0080(0x0004) (Const, Native)
	float                                              BaseRadius;                                               // 0x0084(0x0004) (Edit)
	float                                              VelocityScale;                                            // 0x0088(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Sound");
		return ptr;
	}

};


// Class Engine.SoundGroup
// 0x0020 (0x00AC - 0x008C)
class USoundGroup : public USound
{
public:
	string                                             Package;                                                  // 0x008C(0x000C) (NeedCtorLink, Deprecated)
	class USound*[]                                    Sounds;                                                   // 0x0098(0x000C) (Edit, Native)
	float                                              TotalLikelihood;                                          // 0x00A4(0x0004) (Const, Native, Transient)
	class USound*                                      RenderedSound;                                            // 0x00A8(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SoundGroup");
		return ptr;
	}

};


// Class Engine.ProceduralSound
// 0x001C (0x00A8 - 0x008C)
class UProceduralSound : public USound
{
public:
	class USound*                                      BaseSound;                                                // 0x008C(0x0004) (Edit)
	float                                              PitchModification;                                        // 0x0090(0x0004) (Edit)
	float                                              VolumeModification;                                       // 0x0094(0x0004) (Edit)
	float                                              PitchVariance;                                            // 0x0098(0x0004) (Edit)
	float                                              VolumeVariance;                                           // 0x009C(0x0004) (Edit)
	float                                              RenderedPitchModification;                                // 0x00A0(0x0004) (Transient)
	float                                              RenderedVolumeModification;                               // 0x00A4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ProceduralSound");
		return ptr;
	}

};


// Class Engine.Brush
// 0x005C (0x0434 - 0x03D8)
class ABrush : public AActor
{
public:
	ECsgOper                                           CsgOper;                                                  // 0x03D8(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x03D9(0x0003) MISSED OFFSET
	class UObject*                                     UnusedLightMesh;                                          // 0x03DC(0x0004) (Const)
	struct FVector                                     PostPivot;                                                // 0x03E0(0x000C)
	struct FScale                                      MainScale;                                                // 0x03EC(0x0014)
	struct FScale                                      PostScale;                                                // 0x0400(0x0014)
	struct FScale                                      TempScale;                                                // 0x0414(0x0014)
	struct FColor                                      BrushColor;                                               // 0x0428(0x0004) (Edit)
	int                                                PolyFlags;                                                // 0x042C(0x0004) (Edit)
	bool                                               bColored;                                                 // 0x0430(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Brush");
		return ptr;
	}

};


// Class Engine.Volume
// 0x001C (0x0450 - 0x0434)
class AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                          // 0x0434(0x0004)
	FName                                              AssociatedActorTag;                                       // 0x0438(0x0004) (Edit)
	int                                                LocationPriority;                                         // 0x043C(0x0004) (Edit)
	string                                             LocationName;                                             // 0x0440(0x000C) (Edit, Localized, NeedCtorLink)
	class ADecorationList*                             DecoList;                                                 // 0x044C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Volume");
		return ptr;
	}


	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void PostBeginPlay();
	bool Encompasses(class AActor* Other);
};


// Class Engine.AmbientLightVolume
// 0x0054 (0x04A4 - 0x0450)
class AAmbientLightVolume : public AVolume
{
public:
	int                                                ALV_Width;                                                // 0x0450(0x0004) (Edit)
	int                                                ALV_Breadth;                                              // 0x0454(0x0004) (Edit)
	int                                                ALV_Height;                                               // 0x0458(0x0004) (Edit)
	bool                                               ShowAmbientCubes;                                         // 0x045C(0x0004) (Edit)
	float                                              AmbientIntensity;                                         // 0x0460(0x0004) (Edit)
	struct FColor                                      BaseColor;                                                // 0x0464(0x0004) (Edit)
	float                                              ShaderOff_AmbientIntensity;                               // 0x0468(0x0004) (Edit)
	float                                              GammaFactor;                                              // 0x046C(0x0004) (Edit)
	struct FAmbientCube[]                              AmbientCubes;                                             // 0x0470(0x000C) (Const, Native)
	struct FBox                                        VolumeBox;                                                // 0x047C(0x001C) (Const, Native)
	float                                              WidthGap;                                                 // 0x0498(0x0004) (Const, Native)
	float                                              BreadthGap;                                               // 0x049C(0x0004) (Const, Native)
	float                                              HeightGap;                                                // 0x04A0(0x0004) (Const, Native)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientLightVolume");
		return ptr;
	}

};


// Class Engine.NavigationPoint
// 0x00C8 (0x04A0 - 0x03D8)
class ANavigationPoint : public AActor
{
public:
	bool                                               bNotBased;                                                // 0x03D8(0x0004) (Const)
	bool                                               bNeverUseStrafing;                                        // 0x03D8(0x0004) (Edit)
	bool                                               bAlwaysUseStrafing;                                       // 0x03D8(0x0004) (Edit)
	bool                                               bForceNoStrafing;                                         // 0x03D8(0x0004) (Const)
	bool                                               bAutoBuilt;                                               // 0x03D8(0x0004) (Const)
	bool                                               bSpecialMove;                                             // 0x03D8(0x0004)
	bool                                               bNoAutoConnect;                                           // 0x03D8(0x0004)
	bool                                               bPathsChanged;                                            // 0x03D8(0x0004) (Const)
	bool                                               bDestinationOnly;                                         // 0x03D8(0x0004)
	bool                                               bSourceOnly;                                              // 0x03D8(0x0004)
	bool                                               bSpecialForced;                                           // 0x03D8(0x0004)
	bool                                               bMustBeReachable;                                         // 0x03D8(0x0004)
	bool                                               bBlockable;                                               // 0x03D8(0x0004)
	bool                                               bFlyingPreferred;                                         // 0x03D8(0x0004)
	bool                                               bMayCausePain;                                            // 0x03D8(0x0004)
	bool                                               bReceivePlayerToucherDiedNotify;                          // 0x03D8(0x0004)
	bool                                               bAlreadyVisited;                                          // 0x03D8(0x0004)
	bool                                               bVehicleDestination;                                      // 0x03D8(0x0004) (Edit)
	bool                                               bMakeSourceOnly;                                          // 0x03D8(0x0004) (Edit)
	bool                                               bNoSuperSize;                                             // 0x03D8(0x0004) (Edit)
	bool                                               bForcedOnly;                                              // 0x03D8(0x0004)
	bool                                               bEndPoint;                                                // 0x03D8(0x0004) (Transient)
	bool                                               bTransientEndPoint;                                       // 0x03D8(0x0004) (Transient)
	bool                                               bHideEditorPaths;                                         // 0x03D8(0x0004) (Transient)
	bool                                               bCanReach;                                                // 0x03D8(0x0004) (Transient)
	bool                                               taken;                                                    // 0x03D8(0x0004)
	bool                                               bBlocked;                                                 // 0x03D8(0x0004) (Edit)
	bool                                               bPropagatesSound;                                         // 0x03D8(0x0004) (Edit)
	bool                                               bOneWayPath;                                              // 0x03D8(0x0004) (Edit)
	class UReachSpec*[]                                PathList;                                                 // 0x03DC(0x000C) (Const, NeedCtorLink)
	FName                                              ProscribedPaths[0x4];                                     // 0x03E8(0x0004) (Edit)
	FName                                              ForcedPaths[0x4];                                         // 0x03F8(0x0004) (Edit)
	int                                                visitedWeight;                                            // 0x0408(0x0004)
	int                                                bestPathWeight;                                           // 0x040C(0x0004) (Const)
	class ANavigationPoint*                            nextNavigationPoint;                                      // 0x0410(0x0004) (Const)
	class ANavigationPoint*                            nextOrdered;                                              // 0x0414(0x0004) (Const)
	class ANavigationPoint*                            prevOrdered;                                              // 0x0418(0x0004) (Const)
	class ANavigationPoint*                            previousPath;                                             // 0x041C(0x0004) (Const)
	int                                                cost;                                                     // 0x0420(0x0004)
	int                                                ExtraCost;                                                // 0x0424(0x0004) (Edit)
	int                                                TransientCost;                                            // 0x0428(0x0004) (Transient)
	int                                                FearCost;                                                 // 0x042C(0x0004) (Transient)
	class APickup*                                     InventoryCache;                                           // 0x0430(0x0004)
	float                                              InventoryDist;                                            // 0x0434(0x0004)
	float                                              LastDetourWeight;                                         // 0x0438(0x0004) (Const)
	byte                                               BaseVisible[0x2];                                         // 0x043C(0x0001)
	byte                                               Padding00[0x2];                                           // 0x043E(0x0002) MISSED OFFSET
	float                                              BaseDist[0x2];                                            // 0x0440(0x0004)
	float                                              Influence;                                                // 0x0448(0x0004)
	struct FVector                                     MaxPathSize;                                              // 0x044C(0x000C)
	int                                                VisID;                                                    // 0x0458(0x0004) (Edit)
	int                                                VisCount;                                                 // 0x045C(0x0004) (Edit)
	class ANavigationPoint*[]                          VisPoints;                                                // 0x0460(0x000C) (Edit, NeedCtorLink)
	bool                                               HasGroundedLocation;                                      // 0x046C(0x0004) (Edit)
	struct FVector                                     GroundedLocation;                                         // 0x0470(0x000C) (Edit)
	float[]                                            MaxCoverAngle;                                            // 0x047C(0x000C) (Edit, NeedCtorLink)
	float                                              AcquireTime;                                              // 0x0488(0x0004) (Edit)
	int                                                AcquireTeam;                                              // 0x048C(0x0004) (Edit)
	bool                                               HasVisEnemyAcquiredPoints;                                // 0x0490(0x0004) (Edit)
	class ANavigationPoint*[]                          VisEnemyAcquiredPoints;                                   // 0x0494(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NavigationPoint");
		return ptr;
	}


	void PlayerToucherDied(class APawn* P);
	void MoverClosed();
	void MoverOpened();
	bool ProceedWithMove(class APawn* Other);
	bool SuggestMovePreparation(class APawn* Other);
	float DetourWeight(class APawn* Other, float PathWeight);
	bool Accept(class AActor* Incoming, class AActor* Source);
	int SpecialCost(class APawn* Seeker, class UReachSpec* Path);
	void SetBaseVisibility(int BaseNum);
	void SetBaseDistance(int BaseNum);
	void PostBeginPlay();
};


// Class Engine.SmallNavigationPoint
// 0x0000 (0x04A0 - 0x04A0)
class ASmallNavigationPoint : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SmallNavigationPoint");
		return ptr;
	}

};


// Class Engine.LevelLoadingView
// 0x0000 (0x04A0 - 0x04A0)
class ALevelLoadingView : public ASmallNavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelLoadingView");
		return ptr;
	}

};


// Class Engine.wArrangeTurret
// 0x0010 (0x03E8 - 0x03D8)
class AwArrangeTurret : public AActor
{
public:
	class UClass*                                      VehicleClass;                                             // 0x03D8(0x0004) (Edit)
	int                                                MaxVehicleCount;                                          // 0x03DC(0x0004) (Edit)
	int                                                VehicleCount;                                             // 0x03E0(0x0004)
	class ANavigationPoint*                            myMarker;                                                 // 0x03E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wArrangeTurret");
		return ptr;
	}


	void ForceSpawnVehicle();
	void ForceDestroyVehicle();
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void VehicleUnPossessed(class AVehicle* V);
	void VehiclePossessed(class AVehicle* V);
	void VehicleDestroyed(class AVehicle* V);
	void PreBeginPlay();
};


// Class Engine.AnnouncerVoice
// 0x0040 (0x046C - 0x042C)
class AAnnouncerVoice : public AInfo
{
public:
	string                                             SoundPackage;                                             // 0x042C(0x000C) (NeedCtorLink, NoImport)
	string                                             FallbackSoundPackage;                                     // 0x0438(0x000C) (NeedCtorLink, NoImport)
	string                                             AlternateFallbackSoundPackage;                            // 0x0444(0x000C) (NeedCtorLink)
	string                                             AnnouncerName;                                            // 0x0450(0x000C) (Localized, NeedCtorLink, NoImport)
	struct FCachedSound[]                              CachedSounds;                                             // 0x045C(0x000C) (NeedCtorLink)
	bool                                               bPrecachedBaseSounds;                                     // 0x0468(0x0004)
	bool                                               bPrecachedGameSounds;                                     // 0x0468(0x0004)
	bool                                               bEnglishOnly;                                             // 0x0468(0x0004) (Const, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnnouncerVoice");
		return ptr;
	}


	void STATIC_PrecacheList();
	void PrecacheAnnouncements(bool bRewardSounds);
	class USound* STATIC_PrecacheFallbackPackage(const string& Package, const string& AName, const string& strFullName);
	void STATIC_ResetPrecacheSound();
	string GetSound(const string& AName, bool isWomanVoice);
};


// Class Engine.PathNode
// 0x0000 (0x04A0 - 0x04A0)
class APathNode : public ANavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PathNode");
		return ptr;
	}

};


// Class Engine.RoadPathNode
// 0x0004 (0x04A4 - 0x04A0)
class ARoadPathNode : public APathNode
{
public:
	float                                              MaxRoadDist;                                              // 0x04A0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RoadPathNode");
		return ptr;
	}

};


// Class Engine.HoverPathNode
// 0x0000 (0x04A4 - 0x04A4)
class AHoverPathNode : public ARoadPathNode
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HoverPathNode");
		return ptr;
	}


	int SpecialCost(class APawn* Other, class UReachSpec* Path);
};


// Class Engine.FlyingPathNode
// 0x0008 (0x04A8 - 0x04A0)
class AFlyingPathNode : public APathNode
{
public:
	int                                                iPathPoint;                                               // 0x04A0(0x0004) (Edit)
	int                                                RegenLoc;                                                 // 0x04A4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FlyingPathNode");
		return ptr;
	}

};


// Class Engine.GameProfile
// 0x0118 (0x0144 - 0x002C)
class UGameProfile : public UObject
{
public:
	string                                             PackageName;                                              // 0x002C(0x000C) (Edit, NeedCtorLink)
	int                                                ManifestIndex;                                            // 0x0038(0x0004) (Edit)
	string                                             PositionName[0x5];                                        // 0x003C(0x000C) (Localized, NeedCtorLink)
	EPlayerPos                                         PlayerPositions[0x7];                                     // 0x0078(0x0001)
	byte                                               Padding00[0x1];                                           // 0x007F(0x0001) MISSED OFFSET
	string[]                                           PlayerTeam;                                               // 0x0080(0x000C) (Edit, NeedCtorLink)
	int                                                PlayerLineup[0x4];                                        // 0x008C(0x0004)
	string                                             EnemyTeam;                                                // 0x009C(0x000C) (NeedCtorLink)
	string                                             TeamName;                                                 // 0x00A8(0x000C) (NeedCtorLink)
	string                                             TeamSymbolName;                                           // 0x00B4(0x000C) (NeedCtorLink)
	float                                              BaseDifficulty;                                           // 0x00C0(0x0004) (Edit)
	float                                              Difficulty;                                               // 0x00C4(0x0004) (Edit)
	int                                                SalaryCap;                                                // 0x00C8(0x0004)
	string                                             PlayerName;                                               // 0x00CC(0x000C) (NeedCtorLink)
	string                                             PlayerCharacter;                                          // 0x00D8(0x000C) (NeedCtorLink)
	int                                                Kills;                                                    // 0x00E4(0x0004) (Edit)
	int                                                Assists;                                                  // 0x00E8(0x0004) (Edit)
	int                                                Goals;                                                    // 0x00EC(0x0004) (Edit)
	int                                                Deaths;                                                   // 0x00F0(0x0004) (Edit)
	int                                                Wins;                                                     // 0x00F4(0x0004) (Edit)
	int                                                Matches;                                                  // 0x00F8(0x0004) (Edit)
	int                                                ladderrung[0x6];                                          // 0x00FC(0x0004)
	string                                             SpecialEvent;                                             // 0x0114(0x000C) (NeedCtorLink)
	string                                             GameLadderName;                                           // 0x0120(0x000C) (NeedCtorLink)
	class UClass*                                      GameLadder;                                               // 0x012C(0x0004)
	int                                                CurrentLadder;                                            // 0x0130(0x0004)
	int                                                CurrentMenuRung;                                          // 0x0134(0x0004) (Transient)
	class UObject*                                     NextMatchObject;                                          // 0x0138(0x0004) (Transient)
	class UObject*                                     ChampBorderObject;                                        // 0x013C(0x0004) (Transient)
	bool                                               bInLadderGame;                                            // 0x0140(0x0004)
	bool                                               bWonMatch;                                                // 0x0140(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameProfile");
		return ptr;
	}


	bool CanChangeTeam(class AController* Other, int NewTeam);
	void ReportCheat(class APlayerController* Cheater, const string& cheat);
	void ClearTeammates();
	bool ReleaseTeammate(const string& botname);
	bool AddTeammate(const string& botname);
	void SetLineup(int lineuppos, int teampos);
	void SetPosition(int lineupnum, const string& posn);
	string GetPositionDescription(int PlayerNum);
	EPlayerPos STATIC_EnumPositionDescription(const string& posnval);
	string STATIC_TextPositionDescription(int posnval);
	int GetNumTeammatesForMatch();
	int STATIC_GetNumPositions();
	string GetMatchDescription();
	void ContinueSinglePlayerGame(class ALevelInfo* Level, bool bReplace);
	int FindFirstUnfinishedLadder();
	void StartNewMatch(int PickedLadder, class ALevelInfo* CurrentLevel);
	void RegisterGame(class AGameInfo* currentGame, class APlayerReplicationInfo* PRI);
	class UMatchInfo* GetMatchInfo(int Ladder, int rung);
	void CheatJumpMatch(class AGameInfo* currentGame, int Param);
	void CheatSkipMatch(class AGameInfo* currentGame);
	void Initialize(class AGameInfo* currentGame, const string& pn);
};


// Class Engine.GameInfo
// 0x0584 (0x09B0 - 0x042C)
class AGameInfo : public AInfo
{
public:
	int                                                SimpleLoginedClientNum;                                   // 0x042C(0x0004)
	float                                              fSendPingTime;                                            // 0x0430(0x0004)
	float                                              fCurrentPingTime;                                         // 0x0434(0x0004)
	bool                                               bWelcomePending;                                          // 0x0438(0x0004)
	bool                                               bAttractCam;                                              // 0x0438(0x0004)
	bool                                               bMustJoinBeforeStart;                                     // 0x0438(0x0004)
	bool                                               bTestMode;                                                // 0x0438(0x0004)
	bool                                               bAllowVehicles;                                           // 0x0438(0x0004)
	bool                                               bAllowMPGameSpeed;                                        // 0x0438(0x0004)
	bool                                               bEnableStatLogging;                                       // 0x0438(0x0004)
	bool                                               bIsSaveGame;                                              // 0x0438(0x0004)
	bool                                               bAlternateMode;                                           // 0x0438(0x0004) (Localized)
	bool                                               bCanViewOthers;                                           // 0x0438(0x0004)
	bool                                               bDelayedStart;                                            // 0x0438(0x0004)
	bool                                               bWaitingToStartMatch;                                     // 0x0438(0x0004)
	bool                                               bChangeLevels;                                            // 0x0438(0x0004)
	bool                                               bAlreadyChanged;                                          // 0x0438(0x0004)
	bool                                               bLoggingGame;                                             // 0x0438(0x0004)
	bool                                               bLiberalVehiclePaths;                                     // 0x0438(0x0004)
	bool                                               bAllowWeaponThrowing;                                     // 0x0438(0x0004)
	bool                                               bAllowBehindView;                                         // 0x0438(0x0004)
	bool                                               bAdminCanPause;                                           // 0x0438(0x0004)
	bool                                               bGameRestarted;                                           // 0x0438(0x0004)
	bool                                               bWeaponShouldViewShake;                                   // 0x0438(0x0004)
	bool                                               bModViewShake;                                            // 0x0438(0x0004)
	bool                                               bForceClassicView;                                        // 0x0438(0x0004)
	bool                                               bLowGore;                                                 // 0x0438(0x0004)
	bool                                               bManuallyBeginWaitingForStart;                            // 0x0438(0x0004)
	bool                                               bRestartLevel;                                            // 0x0438(0x0004)
	bool                                               bPauseable;                                               // 0x0438(0x0004)
	bool                                               bWeaponStay;                                              // 0x0438(0x0004)
	bool                                               bCanChangeSkin;                                           // 0x0438(0x0004)
	bool                                               bTeamGame;                                                // 0x0438(0x0004) (NoImport)
	bool                                               bGameEnded;                                               // 0x0438(0x0004)
	bool                                               bOverTime;                                                // 0x0438(0x0004)
	bool                                               Padding00 : 24;                                           // 0x0438(0x0001)
	bool                                               bLargeGameVOIP;                                           // 0x043C(0x0004)
	int                                                GoreLevel;                                                // 0x0440(0x0004)
	float                                              GameDifficulty;                                           // 0x0444(0x0004)
	float                                              AutoAim;                                                  // 0x0448(0x0004)
	float                                              GameSpeed;                                                // 0x044C(0x0004)
	float                                              StartTime;                                                // 0x0450(0x0004)
	string                                             DefaultPlayerClassName;                                   // 0x0454(0x000C) (NeedCtorLink)
	bool                                               bSendBot;                                                 // 0x0460(0x0004)
	string                                             ScoreBoardType;                                           // 0x0464(0x000C) (NeedCtorLink)
	string                                             ResultScoreBoardType;                                     // 0x0470(0x000C) (NeedCtorLink)
	string                                             ResultScoreBoardBootyType;                                // 0x047C(0x000C) (NeedCtorLink)
	string                                             BotMenuType;                                              // 0x0488(0x000C) (NeedCtorLink)
	string                                             RulesMenuType;                                            // 0x0494(0x000C) (NeedCtorLink, NoImport)
	string                                             SettingsMenuType;                                         // 0x04A0(0x000C) (NeedCtorLink)
	string                                             GameUMenuType;                                            // 0x04AC(0x000C) (NeedCtorLink)
	string                                             MultiplayerUMenuType;                                     // 0x04B8(0x000C) (NeedCtorLink)
	string                                             GameOptionsMenuType;                                      // 0x04C4(0x000C) (NeedCtorLink)
	string                                             HUDSettingsMenu;                                          // 0x04D0(0x000C) (NeedCtorLink, NoImport)
	string                                             HUDType;                                                  // 0x04DC(0x000C) (NeedCtorLink)
	string                                             MapListType;                                              // 0x04E8(0x000C) (NeedCtorLink, NoImport)
	string                                             MapPrefix;                                                // 0x04F4(0x000C) (NeedCtorLink, NoImport)
	string                                             BeaconName;                                               // 0x0500(0x000C) (NeedCtorLink)
	string                                             GoreLevelText[0x3];                                       // 0x050C(0x000C) (Localized, NeedCtorLink)
	int                                                ResetCountDown;                                           // 0x0530(0x0004) (Edit)
	int                                                ResetTimeDelay;                                           // 0x0534(0x0004) (Edit)
	int                                                MaxSpectators;                                            // 0x0538(0x0004)
	int                                                NumSpectators;                                            // 0x053C(0x0004)
	int                                                MaxPlayers;                                               // 0x0540(0x0004)
	int                                                NumPlayers;                                               // 0x0544(0x0004)
	int                                                NumPlayersFromStart;                                      // 0x0548(0x0004)
	int                                                NumBots;                                                  // 0x054C(0x0004)
	int                                                CurrentID;                                                // 0x0550(0x0004)
	string                                             DefaultPlayerName;                                        // 0x0554(0x000C) (Localized, NeedCtorLink)
	float                                              FearCostFallOff;                                          // 0x0560(0x0004)
	int                                                GoalScore;                                                // 0x0564(0x0004)
	int                                                MaxLives;                                                 // 0x0568(0x0004)
	int                                                TimeLimit;                                                // 0x056C(0x0004)
	class UClass*                                      DeathMessageClass;                                        // 0x0570(0x0004)
	class UClass*                                      GameMessageClass;                                         // 0x0574(0x0004)
	FName                                              OtherMesgGroup;                                           // 0x0578(0x0004)
	string                                             MutatorClass;                                             // 0x057C(0x000C) (NeedCtorLink)
	class AMutator*                                    BaseMutator;                                              // 0x0588(0x0004)
	string                                             AccessControlClass;                                       // 0x058C(0x000C) (Edit, NeedCtorLink)
	class AAccessControl*                              AccessControl;                                            // 0x0598(0x0004)
	class AGameRules*                                  GameRulesModifiers;                                       // 0x059C(0x0004)
	string                                             BroadcastHandlerClass;                                    // 0x05A0(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      BroadcastClass;                                           // 0x05AC(0x0004) (Edit)
	class ABroadcastHandler*                           BroadcastHandler;                                         // 0x05B0(0x0004)
	class UClass*                                      PlayerControllerClass;                                    // 0x05B4(0x0004)
	string                                             PlayerControllerClassName;                                // 0x05B8(0x000C) (NeedCtorLink)
	class UClass*                                      GameReplicationInfoClass;                                 // 0x05C4(0x0004) (Edit)
	class AGameReplicationInfo*                        GameReplicationInfo;                                      // 0x05C8(0x0004)
	class UClass*                                      VoiceReplicationInfoClass;                                // 0x05CC(0x0004) (Edit)
	class AVoiceChatReplicationInfo*                   VoiceReplicationInfo;                                     // 0x05D0(0x0004)
	string                                             MaplistHandlerType;                                       // 0x05D4(0x000C) (NeedCtorLink)
	class UClass*                                      MaplistHandlerClass;                                      // 0x05E0(0x0004)
	class AMaplistManagerBase*                         MaplistHandler;                                           // 0x05E4(0x0004) (Transient)
	class AGameStats*                                  GameStats;                                                // 0x05E8(0x0004)
	string                                             GameStatsClass;                                           // 0x05EC(0x000C) (NeedCtorLink)
	string                                             DemoCommand;                                              // 0x05F8(0x000C) (Transient, NeedCtorLink)
	float                                              RespawnTime;                                              // 0x0604(0x0004)
	string                                             SecurityClass;                                            // 0x0608(0x000C) (NeedCtorLink)
	string                                             GameName;                                                 // 0x0614(0x000C) (Edit, Localized, NeedCtorLink, NoImport)
	string                                             Description;                                              // 0x0620(0x000C) (Edit, Localized, NeedCtorLink, NoImport)
	string                                             ScreenShotName;                                           // 0x062C(0x000C) (Edit, NeedCtorLink, NoImport)
	string                                             DecoTextName;                                             // 0x0638(0x000C) (Edit, NeedCtorLink, NoImport)
	string                                             Acronym;                                                  // 0x0644(0x000C) (Edit, NeedCtorLink, NoImport)
	string                                             VotingHandlerType;                                        // 0x0650(0x000C) (NeedCtorLink)
	class UClass*                                      VotingHandlerClass;                                       // 0x065C(0x0004)
	class AVotingHandler*                              VotingHandler;                                            // 0x0660(0x0004) (Transient)
	class UGameProfile*                                CurrentGameProfile;                                       // 0x0664(0x0004) (Edit, Transient)
	class UManifest*                                   SaveGameManifest;                                         // 0x0668(0x0004) (Edit, Const, Transient)
	string                                             GIPropsDisplayText[0xF];                                  // 0x066C(0x000C) (Localized, NeedCtorLink)
	string                                             GIPropDescText[0xF];                                      // 0x0720(0x000C) (Localized, NeedCtorLink)
	string                                             GIPropsExtras[0x2];                                       // 0x07D4(0x000C) (Localized, NeedCtorLink)
	class AVehicle*                                    VehicleList;                                              // 0x07EC(0x0004)
	string                                             CallSigns[0xF];                                           // 0x07F0(0x000C) (NeedCtorLink)
	string                                             ServerSkillLevel;                                         // 0x08A4(0x000C) (NeedCtorLink)
	float                                              MaxIdleTime;                                              // 0x08B0(0x0004)
	string                                             NoBindString;                                             // 0x08B4(0x000C) (Localized, NeedCtorLink)
	struct FColor                                      BindColor;                                                // 0x08C0(0x0004)
	class UBTTcpLink_Channel*                          BTSend;                                                   // 0x08C4(0x0004)
	class UwMatchMaker*                                kMM;                                                      // 0x08C8(0x0004)
	float                                              GameAddScore;                                             // 0x08CC(0x0004)
	float                                              GameAddScore_KillHeli;                                    // 0x08D0(0x0004)
	float                                              GameAssistScore;                                          // 0x08D4(0x0004)
	float                                              GameDecScore;                                             // 0x08D8(0x0004)
	float                                              GameAddExp;                                               // 0x08DC(0x0004)
	float                                              GameAssistExp;                                            // 0x08E0(0x0004)
	float                                              GameDecExp;                                               // 0x08E4(0x0004)
	float                                              GamePenaltyExp;                                           // 0x08E8(0x0004)
	float                                              GameAddPoint;                                             // 0x08EC(0x0004)
	float                                              GameAssistPoint;                                          // 0x08F0(0x0004)
	float                                              GameDecPoint;                                             // 0x08F4(0x0004)
	float                                              GamePenaltyPoint;                                         // 0x08F8(0x0004)
	float[]                                            GameAddMultiKillExp;                                      // 0x08FC(0x000C) (NeedCtorLink)
	float[]                                            GameAddMultiKillPoint;                                    // 0x0908(0x000C) (NeedCtorLink)
	bool                                               SpawnWeaponPickupLocations;                               // 0x0914(0x0004)
	bool                                               bChangedHost;                                             // 0x0914(0x0004)
	int                                                ElapsedTimeInChangeHost;                                  // 0x0918(0x0004)
	int                                                UAVDuration;                                              // 0x091C(0x0004)
	int                                                UAVScanInterval;                                          // 0x0920(0x0004)
	bool                                               bLeaveRespawnLogInChat;                                   // 0x0924(0x0004)
	bool                                               bLeaveRespawnLogInChatReal;                               // 0x0924(0x0004)
	class APlayerStart*[]                              EveryPlayerStarts;                                        // 0x0928(0x000C) (NeedCtorLink)
	class APlayerStart_SD*[]                           EverySDPlayerStarts;                                      // 0x0934(0x000C) (NeedCtorLink)
	class APlayerStart_Defence*[]                      EveryDFPlayerStarts;                                      // 0x0940(0x000C) (NeedCtorLink)
	float                                              SDRespawnTime;                                            // 0x094C(0x0004)
	class ANavigationPoint*[]                          recentlySpawnedPoints;                                    // 0x0950(0x000C) (NeedCtorLink, NoExport)
	class ANavigationPoint*[]                          recentlySpawnedPointsTeamAF;                              // 0x095C(0x000C) (NeedCtorLink, NoExport)
	class ANavigationPoint*[]                          recentlySpawnedPointsTeamRSA;                             // 0x0968(0x000C) (NeedCtorLink, NoExport)
	byte                                               TeamQueue;                                                // 0x0974(0x0001)
	byte                                               Padding01[0x3];                                           // 0x0975(0x0003) MISSED OFFSET
	int                                                ChangedHostCompleteCountDown;                             // 0x0978(0x0004)
	int                                                ChangedHostCompleteCountDown_Initial;                     // 0x097C(0x0004)
	int                                                SupplyRandIndex;                                          // 0x0980(0x0004)
	bool                                               bHasRespawnRestriction;                                   // 0x0984(0x0004)
	int                                                RespawnRestrictionTime;                                   // 0x0988(0x0004)
	class AWaitView*[]                                 WaitViews;                                                // 0x098C(0x000C) (NeedCtorLink)
	class UGameInfoScriptPart*                         SC;                                                       // 0x0998(0x0004)
	class UwMatchMaker*                                myTeamMM;                                                 // 0x099C(0x0004)
	struct FVector[]                                   DeathPos;                                                 // 0x09A0(0x000C) (NeedCtorLink)
	int                                                nCurIndex;                                                // 0x09AC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInfo");
		return ptr;
	}


	class AActor* GetNuclearReactor();
	bool SetRepairNuclear(int iValue);
	bool IsEnableRepair();
	float GetAddHealthRatio();
	float GetAddDamageRatio();
	int GetItemBuyPrice(int Index);
	int GetItemBuyID(int Index);
	void PermitWeaponChangeInSpecialMode();
	bool rfAckGetBotID(int Result, byte RequestedAFCount, byte RequestedRSACount, int[] AFBotID, int[] RSABotID);
	class AActor* GetNearFlag(class AActor* A);
	void GetGameSpecificPurposes(class AController* Owner, class UObject*[]* purposes);
	void GetGameSpecificActions(class AController* C, class UwNPCActions* npcActions, class UObject*[]* Actions);
	float GetAttackBuff();
	struct FVector[] GetDeathPosArray();
	void PushDeathPos(const struct FVector& vPos);
	void Kill(class AController* C);
	void GetFlagsInfo(int* outNumFlags, int* outNumCapturedFlagsByTeam1, int* outNumCapturedFlagsByTeam2);
	float GetSupplyRandom();
	bool CanPawnTakeDamage();
	void SendRoundStartTime(int[] aPlayerIDs);
	void SendGameStartTime(int[] aPlayerIDs);
	void SendReqChangeWeaponSet(int PlayerID, int SlotIndex);
	void SendReqUpdateMyHostPriorityPoint(int Point);
	bool IsWarpPossible();
	bool IsRightTimeForRespawn(class AController* C);
	void SendMatchOverEnd();
	void SendMatchOver();
	int GetTotalPlayedTime();
	int CountPlayers();
	void SendMatchResult();
	byte GetIsAIClear();
	void SendRawMatchResult();
	int[] GetTeamScores();
	float GetResultPointRatio_Intervention(class APlayerReplicationInfo* PRI);
	void CalcResultPoints();
	void DeadUse(class APlayerController* PC);
	bool IsPawnAlive(class AController* C);
	bool IsRespawnRestrictionTime();
	void DisableNextObjective();
	void WeakObjectives();
	int MultiMinPlayers();
	bool JustStarted(float t);
	string StripColor(const string& S);
	void STATIC_AddServerDetail(const string& RuleName, const string& RuleValue, struct FServerResponseLine* ServerState);
	bool STATIC_AllowMutator(const string& MutatorClassName);
	bool STATIC_IsVehicleMutator(const string& MutatorClassName);
	int STATIC_GetBindWeight(byte KeyNumber);
	string STATIC_MakeColorCode(const struct FColor& NewColor);
	string STATIC_GetNextLoadHint(const string& MapName);
	string STATIC_GetKeyBindName(const string& Cmd, class APlayerController* Ref);
	string STATIC_ParseLoadingHint(const string& Hint, class APlayerController* Ref, const struct FColor& HintColor);
	string STATIC_GetLoadingHint(class APlayerController* Ref, const string& MapName, const struct FColor& HintColor);
	string[] STATIC_GetAllLoadHints(bool bThisClassOnly);
	void NoTranslocatorKeyPressed(class APlayerController* PC);
	void SceneAbort();
	void SceneEnded(class ASceneManager* SM, class AActor* Other);
	void SceneStarted(class ASceneManager* SM, class AActor* Other);
	void STATIC_AdjustBotInterface(bool bSinglePlayer);
	void ParseVoiceCommand(class APlayerController* Sender, const string& RecognizedString);
	void GetPlayerControllerList(class APlayerController*[]* ControllerArray);
	void LoadSRGrammar(const string& Grammar);
	void SetGrammar();
	int GetDefenderNum();
	class AActor* FindSpecGoalFor(class APlayerReplicationInfo* PRI, int TeamIndex);
	void RegisterVehicle(class AVehicle* V);
	void AdminSay(const string& Msg);
	void KillBots(int Num);
	class ATeamInfo* OtherTeam(class ATeamInfo* Requester);
	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	bool CanEnterVehicle(class AVehicle* V, class APawn* P);
	string NewRecommendCombo(const string& ComboName, class AAIController* C);
	string RecommendCombo(const string& ComboName);
	void ReviewJumpSpots(const FName& TestLabel);
	int STATIC_OrderToIndex(int Order);
	bool STATIC_AcceptPlayInfoProperty(const string& PropName);
	string STATIC_GetDescriptionText(const string& PropName);
	string STATIC_GetDisplayText(const string& PropName);
	void STATIC_FillPlayInfo(class UPlayInfo* PlayInfo);
	string STATIC_ParseMessageString(class AMutator* BaseMutator, class AController* Who, const string& Message);
	string STATIC_ParseChatPercVar(class AMutator* BaseMutator, class AController* Who, const string& Cmd);
	string STATIC_FindTeamDesignation(class AGameReplicationInfo* GRI, class AActor* A);
	class UTexture* STATIC_GetRandomTeamSymbol(int Base);
	bool TooManyBots(class AController* botToRemove);
	float GetMultykillBonusPoint(class AController* C, int* AddExp, int* AddPoint);
	void SendMessageAddScore(class AController* ReceiveController, class AController* Killer, class AController* Other, int KillWeapon, int iConKillorHeadShot);
	void SetAssistPoint(class AController* Killer, class AController* Other);
	int GetAssistScore(int iMessageCode, byte* byAssistType);
	void SendSeverScoreAndAssist(class AController* Killer, class AController* Other);
	void ScoreKill(class AController* Killer, class AController* Other);
	void ScoreKill_Suicide(class AController* Killer, class AController* Other);
	float GetAddScore(class AController* Killer, class AController* Other);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, float Score);
	void TeamScoreEvent(int Team, float Points, const string& Desc);
	void ScoreEvent(class APlayerReplicationInfo* Who, float Points, const string& Desc);
	void CheckScore(class APlayerReplicationInfo* Scorer);
	bool CheckLives(class APlayerReplicationInfo* Scorer);
	float RatePlayerStart(class ANavigationPoint* N, byte Team, class AController* Player);
	class ANavigationPoint* FindPlayerStart_TU(class AController* Player, byte inTeam, const string& incomingName);
	class ANavigationPoint* FindPlayerStart(class AController* Player, byte inTeam, const string& incomingName);
	bool IsSDRespawnTime();
	void LogNavigationPoints(class ANavigationPoint*[] ns);
	class ANavigationPoint* FindPlayerStart_SD(byte Team);
	void LogFinalRespawnPoint(class ANavigationPoint* respawnPoint, byte Team);
	class ANavigationPoint* GetRespawnPointRatingEnemy(bool giveNearnessScore, class ANavigationPoint*[] respawnCandidates, byte Team);
	class ANavigationPoint*[] GetRespawnPointsSortedByClosenessTo(class AActor* A, byte Team, int Count);
	void SortNavigationPoints2(const struct FVector& centerLoc, class ANavigationPoint*[]* candidates, float[]* candidateDists);
	void SortNavigationPoints(class AActor* center, class ANavigationPoint*[]* candidates, float[]* candidateDists);
	bool IsSafeFromEnemySight(class ANavigationPoint* N, byte Team);
	class APawn* PickAlly(byte Team);
	void Sort_KillSuccessionOfEnemy(class AActor*[]* enemies);
	class AActor*[] GetPersonalEnemyList(class APawn* myPawn);
	class AActor*[] GetDefenceModeEnemyList(byte myTeam);
	class AActor*[] GetEveryEnemyList2(byte myTeam);
	class AActor*[] GetEveryEnemyList(byte myTeam);
	void UpdatePositionLog();
	class APawn*[] GetEveryAllyList(byte Team);
	bool IsAnyAllyAlive(byte Team);
	class APawn*[] GetSafeAllyList(byte Team);
	class APawn*[] GetRecentlySpawnedAllyList();
	class ANavigationPoint* GetSafetestRespawnPoint(byte Team, class ANavigationPoint*[] starts, bool skipAppropriateCheck);
	bool IsAppropriateRespawnPoint(class ANavigationPoint* N, byte Team);
	bool IsRespawnPointFailedRecently(class ANavigationPoint* S);
	bool IsAnyPawnWithinRadius(class ANavigationPoint* N);
	bool IsRespawnSpecialCase();
	void EndLogging(const string& Reason);
	void TieOnTimeOver();
	void EndGame(class APlayerReplicationInfo* Winner, const string& Reason);
	bool CheckEndGameCondition();
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const string& Reason);
	void BroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void BroadcastTeam(class AController* Sender, const string& Msg, const FName& Type);
	void Broadcast(class AActor* Sender, const string& Msg, const FName& Type);
	void ChangeVoiceChannel(class APlayerReplicationInfo* PRI, int NewChannelIndex, int OldChannelIndex);
	class AMapList* GetMapList(const string& MapListClassType);
	string[] GetMapRotation();
	void RestartGame();
	void SendPlayer(class APlayerController* aPlayer, const string& URL);
	int GetTeamID_by_Balancing(int iTeamID, class AController* C);
	bool ChangeTeam(class AController* Other, int N, bool bNewTeam);
	bool ForcedChangeTeam(class AController* Other, int N, bool bNewTeam);
	void ChangeName(class AController* Other, const string& S, bool bNameChange);
	void DiscardInventory(class APawn* Other);
	bool PickupQuery(class APawn* Other, class APickup* Item);
	bool ShouldRespawn(class APickup* Other);
	int ReduceDamage(int Damage, class APawn* injured, class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum);
	bool CanSpectate(class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget);
	bool IsOnTeam(class AController* Other, int TeamNum);
	bool SameTeam(class AController* c1, class AController* c2);
	void KickBan(const string& S);
	void SessionKickBan(const string& S);
	void Kick(const string& S);
	string STATIC_ParseKillMessage(const string& KillerName, const string& VictimName, const string& DeathMessage);
	void BroadcastDeathMessage(class AController* Killer, class AController* Other, class UClass* DamageType, int CollisionPart, int WeaponType);
	int GetOptionalDeathMessageInfo(class AController* Killer, class AController* Killed, int IsHeadShot, int IsEnableAim);
	class UClass* GetWDamageType(class UClass* DamageType, int CollisionPart, int WeaponType, int* IsHeadShot, int* IsEnableAim);
	bool PreventSever(class APawn* Killed, const FName& BoneName, int Damage, class UClass* DamageType);
	bool PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	bool Killed_Special(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void ProcessDeathMessage(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	int GetDeathUID(class AController* Killed);
	int GetCharKillUID(class AController* Killer);
	bool IsSetKDLogData(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	bool IsProcessKDLog(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void Killed(class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	int ExceptionKillWeapon(int iKillWeaponID, class UClass* DamageType, int WeaponType);
	int GetChopperCallerID(class AController* HeliCopter);
	void KDLOG_Finalize_HeliCopter(int KillerUID, class AController* Killer, class AController* HeliCopter);
	void KDLOG_Finalize();
	void KDLOG_Initialize();
	bool DoProcessKillMessage(class UClass* DamageType);
	void SendQuest_KillSuccession(class AController* Killer, byte byKillSuccession);
	int SendMessageKillSuccssion(class AController* Killer, class APlayerController* PC, byte byKillSuccession);
	int ProcessKillMessageMulti(int iArray, class AController* ReceiveController, class AController* Killer, class AController* Other, int KillWeapon);
	void ProcessKillMessage(class AController* Killer, class AController* Killed, int CollisionPart, int WeaponType, bool bWallShot, int* iConKillorHeadShot);
	void KillEvent(const string& KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* KilledPawn);
	void SetPlayerDefaults(class APawn* PlayerPawn);
	void AddDefaultInventory(class APawn* PlayerPawn);
	void AddGameSpecificInventory(class APawn* P);
	void AcceptInventory(class APawn* PlayerPawn);
	void NotifyLogout(class AController* Exiting);
	void NotifyLogin(int NewPlayerID);
	void Logout(class AController* Exiting);
	void SetWeaponViewShake(class APlayerController* P);
	void PostLogin(class APlayerController* NewPlayer);
	class UClass* GetDefaultPlayerClass(class AController* C);
	void EndWaitingForStart();
	void BeginWaitingForStart();
	void RestartPlayer(class AController* aPlayer);
	void RefreshMaxPlayersDuringGame();
	void logrep();
	void GameAddDefaultInventory(class APawn* P);
	bool PlayerCanRestartGame(class APlayerController* aPlayer);
	bool PlayerCanRestart(class APlayerController* aPlayer);
	void StartAIPlayers();
	void StartHumanPlayers();
	void StartMatch();
	void TestLevel();
	void ContinueMatch();
	void GotoNextGameState();
	bool SimpleLogin(class APlayerController* NewPlayer, class APawn* NewPawn);
	bool SetPlayerID(class APlayerController* P);
	void ForcedStartMatch();
	void SetPRI4Intervention(class APlayerReplicationInfo* PRI);
	bool IsNewPlayerGotoSpectating();
	class APlayerController* Login(const string& Portal, const string& Options, string* Error);
	class AWaitView* GetWaitView(class UClass* classWaitView);
	class UClass* GetWaitViewClass(byte Team);
	bool CheckOverlapUserName(const string& LoginedUserName, string* ErrMsg);
	byte PopNextTeam();
	class APawn* GetPawn4ChangeHost(const string& nn);
	void InitSavedLevel();
	bool AtCapacity(bool bSpectator);
	bool AllowBecomeActivePlayer(class APlayerController* P);
	bool BecomeSpectator(class APlayerController* P);
	int GetIntOption(const string& Options, const string& ParseString, int CurrentValue);
	void PreLogin(const string& Options, const string& Address, const string& PlayerID, string* Error, string* FailCode);
	void ProcessServerTravel(const string& URL, bool bItems);
	string GetBeaconText();
	void AddGameModifier(class AGameRules* NewRule);
	void AddMutator(const string& mutname, bool bUserAdded);
	void InitGame(const string& Options, string* Error);
	bool STATIC_HasOption(const string& Options, const string& InKey);
	string STATIC_ParseOption(const string& Options, const string& InKey);
	void STATIC_GetKeyValue(const string& Pair, string* key, string* Value);
	bool STATIC_GrabOption(string* Options, string* Result);
	void DetailChange();
	void SetRPPFPS(float fps);
	void SetRPPTime(float limit);
	void gamego();
	void gamestop();
	void gamesetspeed(float t);
	void showrespawn();
	void SetSpeed(float t);
	void SetGameSpeed(float t);
	bool AllowGameSpeedChange();
	bool SetPause(bool bPause, class APlayerController* P);
	int GetServerPort();
	void GetServerPlayers(struct FServerResponseLine* ServerState);
	void GetServerDetails(struct FServerResponseLine* ServerState);
	int GetNumPlayers();
	void GetServerInfo(struct FServerResponseLine* ServerState);
	string GetNetworkNumber();
	void InitMaplistHandler();
	void InitVoiceReplicationInfo();
	void InitGameReplicationInfo();
	void KickIdler(class APlayerController* PC);
	void GameEnding();
	void Timer();
	void InitLogging();
	void Reset();
	void LogRespawnStatistics();
	void InitializeEveryPlayerStarts();
	void PostBeginPlay();
	bool STATIC_NoBlood();
	bool STATIC_UseLowGore();
	void ChangeMap(int ContextID);
	void TeamQueueAnnouncement(byte Team, const string& ASoundName, byte AnnouncementLevel, EAPriority Priority, byte Switch);
	void TeamReceiveLocalizedMessageDistance(byte Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, const struct FVector& vLocation, float fMaxDist, bool bExceptOwner);
	void TeamReceiveLocalizedMessage(byte Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void AllReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string FindPlayerByID(int PlayerID);
	void STATIC_PrecacheGore();
	void STATIC_PrecacheGameAnnouncements(class AAnnouncerVoice* V, bool bRewardSounds);
	void STATIC_PrecacheGameSkeletalMeshes(class ALevelInfo* myLevel);
	void STATIC_PrecacheGameStaticMeshes(class ALevelInfo* myLevel);
	void STATIC_PrecacheGameTextures(class ALevelInfo* myLevel);
	void STATIC_Precache(class ALevelInfo* Level);
	void UpdatePrecacheSkeletalMeshes();
	void UpdatePrecacheStaticMeshes();
	void UpdatePrecacheMaterials();
	void Destroyed();
	void SetOldTeamInfo(class AGameReplicationInfo* OldGRI);
	int GetBootySeedValue();
	void ForceSetGRIInitialState();
	void ForceSetInitialState();
	void ForcePostNetBeginPlay();
	void ForcePostBeginPlay();
	void ForceBeginPlay();
	void ForcePreBeginPlay();
	void PreBeginPlay();
	void AnnounceSentryGun_Destory(int iTeamIndex);
	void AnnounceSentryGun_Spawn(class AController* Caller);
	void AnnounceUAV(class AController* Caller);
	void AnnounceHelicopter(class AController* Caller);
	void AnnounceArtillery(class AController* Caller);
	void NativeSettingAfterChangedHost();
	void STATIC_LoadMapList(const string& MapPrefix, string[]* Maps);
	bool DeletePackage(const string& PackageName);
	bool SavePackage(const string& PackageName);
	void AllDataObjects(class UClass* objClass, const string& PackageName, class UObject** obj);
	class UObject* LoadDataObject(class UClass* objClass, const string& objName, const string& PackageName);
	bool DeleteDataObject(class UClass* objClass, const string& objName, const string& PackageName);
	class UObject* CreateDataObject(class UClass* objClass, const string& objName, const string& PackageName);
	class UManifest* GetSavedGames();
};


// Class Engine.Mutator
// 0x0054 (0x0480 - 0x042C)
class AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                              // 0x042C(0x0004)
	class UClass*                                      DefaultWeapon;                                            // 0x0430(0x0004)
	string                                             DefaultWeaponName;                                        // 0x0434(0x000C) (NeedCtorLink)
	bool                                               bUserAdded;                                               // 0x0440(0x0004)
	bool                                               bAddToServerPackages;                                     // 0x0440(0x0004)
	string                                             IconMaterialName;                                         // 0x0444(0x000C) (Edit, NeedCtorLink, NoImport)
	string                                             ConfigMenuClassName;                                      // 0x0450(0x000C) (Edit, NeedCtorLink, NoImport)
	string                                             GroupName;                                                // 0x045C(0x000C) (Edit, NeedCtorLink, NoImport)
	string                                             FriendlyName;                                             // 0x0468(0x000C) (Edit, Localized, NeedCtorLink, NoImport)
	string                                             Description;                                              // 0x0474(0x000C) (Edit, Localized, NeedCtorLink, NoImport)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Mutator");
		return ptr;
	}


	void DriverLeftVehicle(class AVehicle* V, class APawn* P);
	bool CanLeaveVehicle(class AVehicle* V, class APawn* P);
	void DriverEnteredVehicle(class AVehicle* V, class APawn* P);
	bool CanEnterVehicle(class AVehicle* V, class APawn* P);
	void ServerTraveling(const string& URL, bool bItems);
	bool OverrideDownload(const string& PlayerIP, const string& PlayerID, const string& PlayerURL, string* RedirectURL);
	void MutatorFillPlayInfo(class UPlayInfo* PlayInfo);
	string ParseChatPercVar(class AController* Who, const string& Cmd);
	void GetServerPlayers(struct FServerResponseLine* ServerState);
	void GetServerDetails(struct FServerResponseLine* ServerState);
	void PlayerChangedClass(class AController* aPlayer);
	bool CheckReplacement(class AActor* Other, byte* bSuperRelevant);
	bool CheckRelevance(class AActor* Other);
	bool IsRelevant(class AActor* Other, byte* bSuperRelevant);
	bool AlwaysKeep(class AActor* Other);
	bool ReplaceWith(class AActor* Other, const string& aClassName);
	string NewRecommendCombo(const string& ComboName, class AAIController* C);
	string RecommendCombo(const string& ComboName);
	void AddMutator(class AMutator* M);
	class UClass* MyDefaultWeapon();
	string GetInventoryClassOverride(const string& InventoryClassName);
	class UClass* GetInventoryClass(const string& InventoryClassName);
	class UClass* GetDefaultWeapon();
	void ModifyPlayer(class APawn* Other);
	void NotifyLogout(class AController* Exiting);
	void ModifyLogin(string* Portal, string* Options);
	void Mutate(const string& MutateString, class APlayerController* Sender);
	void Destroyed();
	bool MutatorIsAllowed();
	void PreBeginPlay();
};


// Class Engine.Triggers
// 0x0000 (0x03D8 - 0x03D8)
class ATriggers : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Triggers");
		return ptr;
	}

};


// Class Engine.AvoidMarker
// 0x0004 (0x03DC - 0x03D8)
class AAvoidMarker : public ATriggers
{
public:
	byte                                               TeamNum;                                                  // 0x03D8(0x0001)
	byte                                               Padding00[0x3];                                           // 0x03D9(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AvoidMarker");
		return ptr;
	}


	void StartleBots();
	bool RelevantTo(class APawn* P);
	void Touch(class AActor* Other);
};


// Class Engine.Manifest
// 0x000C (0x0038 - 0x002C)
class UManifest : public UObject
{
public:
	string[]                                           ManifestEntries;                                          // 0x002C(0x000C) (Edit, Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Manifest");
		return ptr;
	}

};


// Class Engine.JumpDest
// 0x00A8 (0x0548 - 0x04A0)
class AJumpDest : public ANavigationPoint
{
public:
	bool                                               bOptionalJumpDest;                                        // 0x04A0(0x0004)
	bool                                               bForceDoubleJump;                                         // 0x04A0(0x0004) (Edit)
	int                                                NumUpstreamPaths;                                         // 0x04A4(0x0004)
	class UReachSpec*                                  UpstreamPaths[0x8];                                       // 0x04A8(0x0004)
	struct FVector                                     NeededJump[0x8];                                          // 0x04C8(0x000C)
	float                                              CalculatedGravityZ[0x8];                                  // 0x0528(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.JumpDest");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	void DoJump(class APawn* Other);
	int SpecialCost(class APawn* Other, class UReachSpec* Path);
	int GetPathIndex(class UReachSpec* Path);
};


// Class Engine.JumpPad
// 0x0024 (0x04C4 - 0x04A0)
class AJumpPad : public ANavigationPoint
{
public:
	struct FVector                                     JumpVelocity;                                             // 0x04A0(0x000C)
	struct FVector                                     BACKUP_JumpVelocity;                                      // 0x04AC(0x000C)
	class AActor*                                      JumpTarget;                                               // 0x04B8(0x0004)
	float                                              JumpZModifier;                                            // 0x04BC(0x0004) (Edit)
	class USound*                                      JumpSound;                                                // 0x04C0(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.JumpPad");
		return ptr;
	}


	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other);
	void Reset();
	void PostBeginPlay();
};


// Class Engine.AntiPortalActor
// 0x0004 (0x03DC - 0x03D8)
class AAntiPortalActor : public AActor
{
public:
	EnumAntiPortalMode                                 AntiPortalMode;                                           // 0x03D8(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x03D9(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AntiPortalActor");
		return ptr;
	}

};


// Class Engine.InventoryAttachment
// 0x0008 (0x03E0 - 0x03D8)
class AInventoryAttachment : public AActor
{
public:
	bool                                               bFastAttachmentReplication;                               // 0x03D8(0x0004)
	int                                                inventoryattachment_dummy;                                // 0x03DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InventoryAttachment");
		return ptr;
	}


	void InitFor(class AInventory* i);
};


// Class Engine.WeaponAttachment
// 0x0D1C (0x10FC - 0x03E0)
class AWeaponAttachment : public AInventoryAttachment
{
public:
	class AActor*                                      HitActor[0x6];                                            // 0x03E0(0x0004)
	struct FVector                                     HitNormal[0x6];                                           // 0x03F8(0x000C)
	ECollisionPartsType                                CollisionPart[0x6];                                       // 0x0440(0x0001)
	byte                                               Padding00[0x2];                                           // 0x0446(0x0002) MISSED OFFSET
	class UMaterial*                                   HitMaterial[0x6];                                         // 0x0448(0x0004)
	struct FVector                                     vEffLocation[0x6];                                        // 0x0460(0x000C)
	struct FstMultiBulletPerFire                       stMBPF[0xA];                                              // 0x04A8(0x00CC)
	int                                                RepLastHitIdx[0xA];                                       // 0x0CA0(0x0004) (Net)
	struct FVector                                     RepEffectLocation[0x3C];                                  // 0x0CC8(0x000C) (Net)
	int                                                nIndexEffect[0x3C];                                       // 0x0F98(0x0004) (Net)
	int                                                nRepOffset;                                               // 0x1088(0x0004)
	int                                                nBulletCntPerFire;                                        // 0x108C(0x0004) (Net)
	int                                                LastHitIdx;                                               // 0x1090(0x0004) (Net)
	byte                                               FlashCount;                                               // 0x1094(0x0001) (Net)
	byte                                               FiringMode;                                               // 0x1095(0x0001) (Net)
	byte                                               SpawnHitCount;                                            // 0x1096(0x0001) (Net)
	byte                                               Padding01[0x1];                                           // 0x1097(0x0001) MISSED OFFSET
	bool                                               bAutoFire;                                                // 0x1098(0x0004) (Net)
	float                                              FiringSpeed;                                              // 0x109C(0x0004)
	bool                                               bMatchWeapons;                                            // 0x10A0(0x0004)
	struct FColor                                      BeaconColor;                                              // 0x10A4(0x0004)
	class AwWeapon*                                    Weapon;                                                   // 0x10A8(0x0004)
	class UClass*                                      SplashEffect;                                             // 0x10AC(0x0004)
	int                                                iLocalWeaponID;                                           // 0x10B0(0x0004)
	int                                                iLocalAddPartsID;                                         // 0x10B4(0x0004)
	int                                                iRepWeaponID;                                             // 0x10B8(0x0004) (Net)
	int                                                iRepAddPartsID;                                           // 0x10BC(0x0004) (Net)
	bool                                               bMeleeKnifeOrButt;                                        // 0x10C0(0x0004) (Net)
	class UwWeaponBaseParams*                          BaseParams;                                               // 0x10C4(0x0004)
	class UClass*                                      ResParams;                                                // 0x10C8(0x0004)
	int                                                iPainting_Item_ID;                                        // 0x10CC(0x0004) (Net)
	class AEmitter*                                    IdleEffect;                                               // 0x10D0(0x0004)
	bool                                               bLoopAnim;                                                // 0x10D4(0x0004)
	FName                                              AnimName;                                                 // 0x10D8(0x0004)
	float                                              AnimRate;                                                 // 0x10DC(0x0004)
	float                                              AnimTweenTime;                                            // 0x10E0(0x0004)
	int                                                AnimChannel;                                              // 0x10E4(0x0004)
	bool                                               RepLoopAnim;                                              // 0x10E8(0x0004) (Net)
	FName                                              RepAnimName;                                              // 0x10EC(0x0004) (Net)
	float                                              RepAnimRate;                                              // 0x10F0(0x0004) (Net)
	float                                              RepAnimTweenTime;                                         // 0x10F4(0x0004) (Net)
	int                                                RepAnimChannel;                                           // 0x10F8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WeaponAttachment");
		return ptr;
	}


	void LoopWeaponAnim(const FName& Sequence, float Rate, float TweenTime, int Channel);
	void PlayWeaponAnim(const FName& Sequence, float Rate, float TweenTime, int Channel);
	struct FCoords GetBoneTipLocation1st();
	struct FCoords GetBoneTipLocation3rd();
	FName GetBoneNameRotation();
	FName GetBoneNameTip();
	void wLoadOut(int iID, int iAddPartsID);
	void UpdatePenetrateHit(class AActor* mHitActor, const struct FVector& mHitLocation, const struct FVector& mHitNormal, class UMaterial* mHitMaterial, int mLastHitIdx);
	void UpdateHit(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, class UMaterial* HitMaterial);
	void CheckForSplash(int nIndex, int i);
	void ThirdPersonEffects();
	void FakeThirdPersonEffects(class AActor* HitActor, const struct FVector& HitLocation, const struct FVector& HitNormal, class UMaterial* HitMaterial);
	void FakeUpdateTracer(const struct FVector& LastHitLocation);
	void Destroyed();
	void ClearArray();
};


// Class Engine.TeamInfo
// 0x0064 (0x0490 - 0x042C)
class ATeamInfo : public AReplicationInfo
{
public:
	string                                             TeamName;                                                 // 0x042C(0x000C) (Net, Localized, NeedCtorLink)
	int                                                Size;                                                     // 0x0438(0x0004)
	float                                              Score;                                                    // 0x043C(0x0004) (Net)
	float                                              Score2;                                                   // 0x0440(0x0004) (Net)
	int                                                TeamIndex;                                                // 0x0444(0x0004) (Net)
	struct FColor                                      TeamColor;                                                // 0x0448(0x0004) (Net)
	struct FColor                                      AltTeamColor;                                             // 0x044C(0x0004) (Net)
	class AActor*                                      HomeBase;                                                 // 0x0450(0x0004) (Net)
	class UClass*                                      DefaultPlayerClass;                                       // 0x0454(0x0004) (Edit)
	string                                             ColorNames[0x4];                                          // 0x0458(0x000C) (Localized, NeedCtorLink)
	int                                                ElapsedTime_UAVBegin;                                     // 0x0488(0x0004) (Net)
	int                                                ElapsedTime_UAVEnd;                                       // 0x048C(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TeamInfo");
		return ptr;
	}


	void STATIC_GetAllCharacters(string[]* Chars);
	void STATIC_SetCharacters(string[] Chars);
	void RemoveFromTeam(class AController* Other);
	bool AddToTeam(class AController* Other);
	string GetHumanReadableName();
	bool BelongsOnTeam(class UClass* PawnClass);
	int GetUAVTime();
	bool IsUAVOn();
	void SetUAV();
};


// Class Engine.Door
// 0x0014 (0x04B4 - 0x04A0)
class ADoor : public ANavigationPoint
{
public:
	FName                                              DoorTag;                                                  // 0x04A0(0x0004) (Edit)
	class AMover*                                      MyDoor;                                                   // 0x04A4(0x0004)
	FName                                              DoorTrigger;                                              // 0x04A8(0x0004) (Edit)
	class AActor*                                      RecommendedTrigger;                                       // 0x04AC(0x0004)
	bool                                               bInitiallyClosed;                                         // 0x04B0(0x0004) (Edit)
	bool                                               bBlockedWhenClosed;                                       // 0x04B0(0x0004) (Edit)
	bool                                               bDoorOpen;                                                // 0x04B0(0x0004)
	bool                                               bTempNoCollide;                                           // 0x04B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Door");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	bool ProceedWithMove(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void MoverClosed();
	void MoverOpened();
	void PostBeginPlay();
};


// Class Engine.AutoDoor
// 0x0000 (0x04B4 - 0x04B4)
class AAutoDoor : public ADoor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoDoor");
		return ptr;
	}

};


// Class Engine.Ladder
// 0x0008 (0x04A8 - 0x04A0)
class ALadder : public ASmallNavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                                 // 0x04A0(0x0004)
	class ALadder*                                     LadderList;                                               // 0x04A4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Ladder");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
};


// Class Engine.AutoLadder
// 0x0000 (0x04A8 - 0x04A8)
class AAutoLadder : public ALadder
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AutoLadder");
		return ptr;
	}

};


// Class Engine.UserzoneInfo
// 0x0028 (0x0054 - 0x002C)
class UUserzoneInfo : public UObject
{
public:
	float                                              fMinimapWidth;                                            // 0x002C(0x0004)
	float                                              fMinimapHeight;                                           // 0x0030(0x0004)
	int                                                nRowCount;                                                // 0x0034(0x0004)
	int                                                nColcount;                                                // 0x0038(0x0004)
	float                                              fCellSize;                                                // 0x003C(0x0004)
	class AHUD*                                        wScoreBoardHud;                                           // 0x0040(0x0004)
	struct FSUserGroupInfo[]                           UserGroupInfos;                                           // 0x0044(0x000C) (NeedCtorLink)
	class UTexture*                                    kUserzoneTexture;                                         // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UserzoneInfo");
		return ptr;
	}


	int GetMaxCalcTime();
	void SetScoreboardHud(class AHUD* _hud);
	void GetScreenPos(int nGroupIndex, int* nPosX, int* nPosY);
	int GetCellIndex(const struct FVector& kPos);
	struct FVector GetInterpolationPos(const struct FVector& kStartPos, const struct FVector& kEndPos, float A);
	void AddCalcTime(const struct FVector& kStartPos, const struct FVector& kEndPos, float fTime);
	void ResetCalcTime();
	void Destroy();
	void CalcMapSize(float _fCellSize);
};


// Class Engine.TonemappingVolume
// 0x0004 (0x0454 - 0x0450)
class ATonemappingVolume : public AVolume
{
public:
	byte                                               TonemappingIndex;                                         // 0x0450(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0451(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TonemappingVolume");
		return ptr;
	}

};


// Class Engine.CubemapVolume
// 0x0004 (0x0454 - 0x0450)
class ACubemapVolume : public AVolume
{
public:
	class UMaterial*                                   Cubemap;                                                  // 0x0450(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.CubemapVolume");
		return ptr;
	}

};


// Class Engine.LinkAntiportalVolume
// 0x000C (0x045C - 0x0450)
class ALinkAntiportalVolume : public AVolume
{
public:
	class AAntiPortalActor*[]                          AntiPortals;                                              // 0x0450(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LinkAntiportalVolume");
		return ptr;
	}

};


// Class Engine.BlockingVolume
// 0x0010 (0x0460 - 0x0450)
class ABlockingVolume : public AVolume
{
public:
	bool                                               bClampFluid;                                              // 0x0450(0x0004) (Edit)
	bool                                               bClassBlocker;                                            // 0x0450(0x0004) (Edit)
	class UClass*[]                                    BlockedClasses;                                           // 0x0454(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BlockingVolume");
		return ptr;
	}

};


// Class Engine.PotentialClimbWatcher
// 0x0000 (0x042C - 0x042C)
class APotentialClimbWatcher : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PotentialClimbWatcher");
		return ptr;
	}


	void Tick(float DeltaTime);
};


// Class Engine.PhysicsVolume
// 0x0090 (0x04E0 - 0x0450)
class APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                             // 0x0450(0x000C) (Edit)
	struct FVector                                     Gravity;                                                  // 0x045C(0x000C) (Edit, Net)
	struct FVector                                     BACKUP_Gravity;                                           // 0x0468(0x000C)
	float                                              GroundFriction;                                           // 0x0474(0x0004) (Edit)
	float                                              TerminalVelocity;                                         // 0x0478(0x0004) (Edit)
	float                                              DamagePerSec;                                             // 0x047C(0x0004) (Edit)
	class UClass*                                      DamageType;                                               // 0x0480(0x0004) (Edit)
	int                                                Priority;                                                 // 0x0484(0x0004) (Edit)
	class USound*                                      EntrySound;                                               // 0x0488(0x0004) (Edit)
	class USound*                                      ExitSound;                                                // 0x048C(0x0004) (Edit)
	class UI3DL2Listener*                              VolumeEffect;                                             // 0x0490(0x0004) (Edit, EditInline)
	class UClass*                                      EntryActor;                                               // 0x0494(0x0004) (Edit)
	class UClass*                                      ExitActor;                                                // 0x0498(0x0004) (Edit)
	class UClass*                                      PawnEntryActor;                                           // 0x049C(0x0004) (Edit)
	float                                              FluidFriction;                                            // 0x04A0(0x0004) (Edit)
	struct FVector                                     ViewFlash;                                                // 0x04A4(0x000C) (Edit)
	struct FVector                                     ViewFog;                                                  // 0x04B0(0x000C) (Edit)
	bool                                               bNoDecals;                                                // 0x04BC(0x0004) (Edit)
	bool                                               bDamagesVehicles;                                         // 0x04BC(0x0004) (Edit)
	bool                                               bDistanceFog;                                             // 0x04BC(0x0004) (Edit)
	bool                                               bPainCausing;                                             // 0x04BC(0x0004) (Edit)
	bool                                               BACKUP_bPainCausing;                                      // 0x04BC(0x0004)
	bool                                               bDestructive;                                             // 0x04BC(0x0004) (Edit)
	bool                                               bNoInventory;                                             // 0x04BC(0x0004) (Edit)
	bool                                               bMoveProjectiles;                                         // 0x04BC(0x0004) (Edit)
	bool                                               bBounceVelocity;                                          // 0x04BC(0x0004) (Edit)
	bool                                               bNeutralZone;                                             // 0x04BC(0x0004) (Edit)
	bool                                               bWaterVolume;                                             // 0x04BC(0x0004) (Edit)
	struct FColor                                      DistanceFogColor;                                         // 0x04C0(0x0004) (Edit)
	float                                              DistanceFogStart;                                         // 0x04C4(0x0004) (Edit)
	float                                              DistanceFogEnd;                                           // 0x04C8(0x0004) (Edit)
	float                                              KExtraLinearDamping;                                      // 0x04CC(0x0004) (Edit)
	float                                              KExtraAngularDamping;                                     // 0x04D0(0x0004) (Edit)
	float                                              KBuoyancy;                                                // 0x04D4(0x0004) (Edit)
	class AInfo*                                       PainTimer;                                                // 0x04D8(0x0004)
	class APhysicsVolume*                              NextPhysicsVolume;                                        // 0x04DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PhysicsVolume");
		return ptr;
	}


	void CausePainTo(class AActor* Other);
	void PlayExitSplash(class AActor* Other);
	void UnTouch(class AActor* Other);
	void PlayEntrySplash(class AActor* Other);
	void Touch(class AActor* Other);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void TimerPop(class AVolumeTimer* t);
	void BaseChange();
	void PlayerPawnDiedInVolume(class APawn* Other);
	void PawnLeavingVolume(class APawn* Other);
	bool PawnEnteredVolume(class APawn* Other);
	void ActorLeavingVolume(class AActor* Other);
	void ActorEnteredVolume(class AActor* Other);
	void PhysicsChangedFor(class AActor* Other);
	void Reset();
	void PostBeginPlay();
	void PreBeginPlay();
};


// Class Engine.LadderVolume
// 0x0038 (0x0518 - 0x04E0)
class ALadderVolume : public APhysicsVolume
{
public:
	FName                                              ClimbingAnimation;                                        // 0x04E0(0x0004) (Edit)
	FName                                              TopAnimation;                                             // 0x04E4(0x0004) (Edit)
	struct FRotator                                    WallDir;                                                  // 0x04E8(0x000C) (Edit)
	struct FVector                                     LookDir;                                                  // 0x04F4(0x000C)
	struct FVector                                     ClimbDir;                                                 // 0x0500(0x000C)
	class ALadder*                                     LadderList;                                               // 0x050C(0x0004) (Const)
	bool                                               bNoPhysicalLadder;                                        // 0x0510(0x0004) (Edit)
	bool                                               bAutoPath;                                                // 0x0510(0x0004) (Edit)
	bool                                               bAllowLadderStrafing;                                     // 0x0510(0x0004) (Edit)
	class APawn*                                       PendingClimber;                                           // 0x0514(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderVolume");
		return ptr;
	}


	void PhysicsChangedFor(class AActor* Other);
	void PawnLeavingVolume(class APawn* P);
	bool PawnEnteredVolume(class APawn* P);
	bool InUse(class APawn* Ignored);
	void PostBeginPlay();
};


// Class Engine.DefaultPhysicsVolume
// 0x0000 (0x04E0 - 0x04E0)
class ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DefaultPhysicsVolume");
		return ptr;
	}


	void Destroyed();
};


// Class Engine.LineOfSightTrigger
// 0x001C (0x03F4 - 0x03D8)
class ALineOfSightTrigger : public ATriggers
{
public:
	float                                              MaxViewDist;                                              // 0x03D8(0x0004) (Edit)
	float                                              OldTickTime;                                              // 0x03DC(0x0004)
	bool                                               bEnabled;                                                 // 0x03E0(0x0004) (Edit)
	bool                                               bTriggered;                                               // 0x03E0(0x0004)
	FName                                              SeenActorTag;                                             // 0x03E4(0x0004) (Edit)
	class AActor*                                      SeenActor;                                                // 0x03E8(0x0004)
	int                                                MaxViewAngle;                                             // 0x03EC(0x0004) (Edit)
	float                                              RequiredViewDir;                                          // 0x03F0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LineOfSightTrigger");
		return ptr;
	}


	void Timer();
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void PlayerSeesMe(class APlayerController* P);
	void PostBeginPlay();
};


// Class Engine.AIScript
// 0x000C (0x03E4 - 0x03D8)
class AAIScript : public AKeypoint
{
public:
	class UClass*                                      ControllerClass;                                          // 0x03D8(0x0004) (Edit)
	bool                                               bNavigate;                                                // 0x03DC(0x0004)
	bool                                               bLoggingEnabled;                                          // 0x03DC(0x0004)
	class AAIMarker*                                   myMarker;                                                 // 0x03E0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AIScript");
		return ptr;
	}


	void TakeOver(class APawn* P);
	class AActor* GetMoveTarget();
	void SpawnControllerFor(class APawn* P);
};


// Class Engine.DamageType
// 0x00CC (0x04A4 - 0x03D8)
class ADamageType : public AActor
{
public:
	string                                             DeathString;                                              // 0x03D8(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             FemaleSuicide;                                            // 0x03E4(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             MaleSuicide;                                              // 0x03F0(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              ViewFlash;                                                // 0x03FC(0x0004) (Edit)
	struct FVector                                     ViewFog;                                                  // 0x0400(0x000C) (Edit)
	class UClass*                                      DamageEffect;                                             // 0x040C(0x0004) (Edit)
	string                                             DamageWeaponName;                                         // 0x0410(0x000C) (Edit, NeedCtorLink)
	bool                                               bDirectDamage;                                            // 0x041C(0x0004)
	bool                                               bExtraMomentumZ;                                          // 0x041C(0x0004)
	bool                                               bFlaming;                                                 // 0x041C(0x0004)
	bool                                               bRubbery;                                                 // 0x041C(0x0004)
	bool                                               bCausedByWorld;                                           // 0x041C(0x0004)
	bool                                               SkipDeathIncrement;                                       // 0x041C(0x0004)
	bool                                               bVehicleHit;                                              // 0x041C(0x0004)
	bool                                               bBulletHit;                                               // 0x041C(0x0004)
	bool                                               bSkeletize;                                               // 0x041C(0x0004) (Edit)
	bool                                               bCauseConvulsions;                                        // 0x041C(0x0004) (Edit)
	bool                                               bSuperWeapon;                                             // 0x041C(0x0004) (Edit)
	bool                                               bCausesBlood;                                             // 0x041C(0x0004) (Edit)
	bool                                               bKUseOwnDeathVel;                                         // 0x041C(0x0004) (Edit)
	bool                                               bKUseTearOffMomentum;                                     // 0x041C(0x0004) (Edit)
	bool                                               bDelayedDamage;                                           // 0x041C(0x0004)
	bool                                               bNeverSevers;                                             // 0x041C(0x0004)
	bool                                               bThrowRagdoll;                                            // 0x041C(0x0004)
	bool                                               bRagdollBullet;                                           // 0x041C(0x0004)
	bool                                               bLeaveBodyEffect;                                         // 0x041C(0x0004)
	bool                                               bArmorStops;                                              // 0x041C(0x0004) (Edit)
	bool                                               bInstantHit;                                              // 0x041C(0x0004) (Edit)
	bool                                               bFastInstantHit;                                          // 0x041C(0x0004) (Edit)
	bool                                               bAlwaysGibs;                                              // 0x041C(0x0004) (Edit)
	bool                                               bLocationalHit;                                           // 0x041C(0x0004) (Edit)
	bool                                               bAlwaysSevers;                                            // 0x041C(0x0004) (Edit)
	bool                                               bSpecial;                                                 // 0x041C(0x0004) (Edit)
	bool                                               bDetonatesGoop;                                           // 0x041C(0x0004) (Edit)
	float                                              GibModifier;                                              // 0x0420(0x0004) (Edit)
	bool                                               UseHitStunAni;                                            // 0x0424(0x0004)
	bool                                               Use2ndAni;                                                // 0x0424(0x0004)
	class UClass*                                      PawnDamageEffect;                                         // 0x0428(0x0004) (Edit)
	class UClass*                                      PawnDamageEmitter;                                        // 0x042C(0x0004) (Edit)
	class USound*[]                                    PawnDamageSounds;                                         // 0x0430(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      LowGoreDamageEffect;                                      // 0x043C(0x0004) (Edit)
	class UClass*                                      LowGoreDamageEmitter;                                     // 0x0440(0x0004) (Edit)
	class USound*[]                                    LowGoreDamageSounds;                                      // 0x0444(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      LowDetailEffect;                                          // 0x0450(0x0004) (Edit)
	class UClass*                                      LowDetailEmitter;                                         // 0x0454(0x0004) (Edit)
	float                                              FlashScale;                                               // 0x0458(0x0004) (Edit)
	struct FVector                                     FlashFog;                                                 // 0x045C(0x000C) (Edit)
	int                                                DamageDesc;                                               // 0x0468(0x0004) (Edit)
	int                                                DamageThreshold;                                          // 0x046C(0x0004) (Edit)
	struct FVector                                     DamageKick;                                               // 0x0470(0x000C) (Edit)
	class UMaterial*                                   DamageOverlayMaterial;                                    // 0x047C(0x0004) (Edit)
	class UMaterial*                                   DeathOverlayMaterial;                                     // 0x0480(0x0004) (Edit)
	float                                              DamageOverlayTime;                                        // 0x0484(0x0004) (Edit)
	float                                              DeathOverlayTime;                                         // 0x0488(0x0004) (Edit)
	float                                              GibPerterbation;                                          // 0x048C(0x0004) (Edit)
	float                                              KDamageImpulse;                                           // 0x0490(0x0004) (Edit)
	float                                              KDeathVel;                                                // 0x0494(0x0004) (Edit)
	float                                              KDeathUpKick;                                             // 0x0498(0x0004) (Edit)
	float                                              VehicleDamageScaling;                                     // 0x049C(0x0004)
	float                                              VehicleMomentumScaling;                                   // 0x04A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamageType");
		return ptr;
	}


	string STATIC_GetWeaponClass();
	void STATIC_GetHitEffects(int VictemHealth, class UClass** HitEffects);
	bool STATIC_IsOfType(int Description);
	class USound* STATIC_GetPawnDamageSound();
	class UClass* STATIC_GetPawnDamageEmitter(const struct FVector& HitLocation, float Damage, const struct FVector& Momentum, class APawn* Victim, bool bLowDetail);
	class UClass* STATIC_GetPawnDamageEffect(const struct FVector& HitLocation, float Damage, const struct FVector& Momentum, class APawn* Victim, bool bLowDetail);
	string STATIC_SuicideMessage(class APlayerReplicationInfo* Victim);
	string STATIC_DeathMessage(class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim);
	void STATIC_ScoreKill(class AController* Killer, class AController* Killed);
	void STATIC_IncrementKills(class AController* Killer);
};


// Class Engine.SVehicleTrigger
// 0x0008 (0x03E0 - 0x03D8)
class ASVehicleTrigger : public ATriggers
{
public:
	bool                                               bEnabled;                                                 // 0x03D8(0x0004) (Edit)
	bool                                               BACKUP_bEnabled;                                          // 0x03D8(0x0004)
	bool                                               bMarkWithPath;                                            // 0x03D8(0x0004)
	class ANavigationPoint*                            myMarker;                                                 // 0x03DC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleTrigger");
		return ptr;
	}


	void Reset();
	void UsedBy(class APawn* User);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void PostBeginPlay();
};


// Class Engine.SVehicleFactory
// 0x0010 (0x03E8 - 0x03D8)
class ASVehicleFactory : public AActor
{
public:
	class UClass*                                      VehicleClass;                                             // 0x03D8(0x0004) (Edit)
	int                                                MaxVehicleCount;                                          // 0x03DC(0x0004) (Edit)
	int                                                VehicleCount;                                             // 0x03E0(0x0004)
	class ANavigationPoint*                            myMarker;                                                 // 0x03E4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SVehicleFactory");
		return ptr;
	}


	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void VehicleUnPossessed(class AVehicle* V);
	void VehiclePossessed(class AVehicle* V);
	void VehicleDestroyed(class AVehicle* V);
	void PreBeginPlay();
};


// Class Engine.VehiclePart
// 0x0004 (0x03DC - 0x03D8)
class AVehiclePart : public AActor
{
public:
	bool                                               bUpdating;                                                // 0x03D8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VehiclePart");
		return ptr;
	}


	void Activate(bool bActive);
	void Update(float DeltaTime);
};


// Class Engine.Controller
// 0x0238 (0x0610 - 0x03D8)
class AController : public AActor
{
public:
	class APawn*                                       Pawn;                                                     // 0x03D8(0x0004) (Net)
	ECONTROLLER_TYPE                                   eControllerType;                                          // 0x03DC(0x0001)
	byte                                               Padding00[0x3];                                           // 0x03DD(0x0003) MISSED OFFSET
	float                                              BtrUpdateFrequency;                                       // 0x03E0(0x0004) (Localized)
	int                                                PlayerNum;                                                // 0x03E4(0x0004) (Const)
	float                                              SightCounter;                                             // 0x03E8(0x0004)
	float                                              FovAngle;                                                 // 0x03EC(0x0004)
	float                                              Handedness;                                               // 0x03F0(0x0004)
	bool                                               bAdrenalineEnabled;                                       // 0x03F4(0x0004) (Net)
	bool                                               bEnemyInfoValid;                                          // 0x03F4(0x0004)
	bool                                               bNotifyFallingHitWall;                                    // 0x03F4(0x0004)
	bool                                               bSlowerZAcquire;                                          // 0x03F4(0x0004)
	bool                                               bInDodgeMove;                                             // 0x03F4(0x0004)
	bool                                               bVehicleTransition;                                       // 0x03F4(0x0004)
	bool                                               bForceStrafe;                                             // 0x03F4(0x0004)
	bool                                               bNotifyPostLanded;                                        // 0x03F4(0x0004)
	bool                                               bControlAnimations;                                       // 0x03F4(0x0004)
	bool                                               bUseDynamicRegenLocation;                                 // 0x03F4(0x0004)
	bool                                               bNotifyApex;                                              // 0x03F4(0x0004)
	bool                                               bUsePlayerHearing;                                        // 0x03F4(0x0004)
	bool                                               bJumpOverWall;                                            // 0x03F4(0x0004)
	bool                                               bEnemyAcquired;                                           // 0x03F4(0x0004)
	bool                                               bSoaking;                                                 // 0x03F4(0x0004)
	bool                                               bHuntPlayer;                                              // 0x03F4(0x0004)
	bool                                               bAllowedToTranslocate;                                    // 0x03F4(0x0004)
	bool                                               bAllowedToImpactJump;                                     // 0x03F4(0x0004)
	bool                                               bIsPlayer;                                                // 0x03F4(0x0004)
	bool                                               bGodMode;                                                 // 0x03F4(0x0004)
	bool                                               bLOSflag;                                                 // 0x03F4(0x0004) (Const)
	bool                                               bAdvancedTactics;                                         // 0x03F4(0x0004)
	bool                                               bCanOpenDoors;                                            // 0x03F4(0x0004)
	bool                                               bCanDoSpecial;                                            // 0x03F4(0x0004)
	bool                                               bAdjusting;                                               // 0x03F4(0x0004)
	bool                                               bPreparingMove;                                           // 0x03F4(0x0004)
	byte                                               bRun;                                                     // 0x03F8(0x0001) (Input)
	byte                                               bDuck;                                                    // 0x03F9(0x0001) (Input)
	byte                                               bProne;                                                   // 0x03FA(0x0001) (Input)
	byte                                               bFire;                                                    // 0x03FB(0x0001) (Input)
	byte                                               bAltFire;                                                 // 0x03FC(0x0001) (Input)
	byte                                               bMeleeFire;                                               // 0x03FD(0x0001) (Input)
	byte                                               bUseKey;                                                  // 0x03FE(0x0001) (Input)
	byte                                               bVoiceTalk;                                               // 0x03FF(0x0001) (Input)
	byte                                               bOldRun;                                                  // 0x0400(0x0001)
	byte                                               bHitRun;                                                  // 0x0401(0x0001)
	byte                                               Padding01[0x2];                                           // 0x0402(0x0002) MISSED OFFSET
	float                                              fHitAccel;                                                // 0x0404(0x0004)
	struct FVector                                     OldVel;                                                   // 0x0408(0x000C)
	byte                                               bInputCrouch;                                             // 0x0414(0x0001) (Input)
	byte                                               bInputProne;                                              // 0x0415(0x0001) (Input)
	byte                                               byInputPosture;                                           // 0x0416(0x0001) (Input)
	byte                                               bOldInputCrouch;                                          // 0x0417(0x0001)
	byte                                               bOldInputProne;                                           // 0x0418(0x0001)
	byte                                               Padding02[0x3];                                           // 0x0419(0x0003) MISSED OFFSET
	float                                              fStandingTimeCount;                                       // 0x041C(0x0004)
	float                                              fCrouchingTimeCount;                                      // 0x0420(0x0004)
	float                                              fCrouchingTimeLimit;                                      // 0x0424(0x0004)
	float                                              fProningTimeCount;                                        // 0x0428(0x0004)
	float                                              fProningTimeLimit;                                        // 0x042C(0x0004)
	byte                                               byGoCrouch;                                               // 0x0430(0x0001)
	byte                                               byGoProne;                                                // 0x0431(0x0001)
	byte                                               bGotoProne;                                               // 0x0432(0x0001)
	byte                                               Padding03[0x1];                                           // 0x0433(0x0001) MISSED OFFSET
	float                                              fSprintTime;                                              // 0x0434(0x0004)
	float                                              fSprintPassTime;                                          // 0x0438(0x0004)
	bool                                               bSprint;                                                  // 0x043C(0x0004)
	bool                                               bDClickMove;                                              // 0x043C(0x0004)
	bool                                               bOldDClickMove;                                           // 0x043C(0x0004)
	float                                              fSprintDelayTime;                                         // 0x0440(0x0004)
	float                                              fSprintStopTime;                                          // 0x0444(0x0004)
	byte                                               bySaveFireState;                                          // 0x0448(0x0001)
	byte                                               bySprintState;                                            // 0x0449(0x0001)
	byte                                               Padding04[0x2];                                           // 0x044A(0x0002) MISSED OFFSET
	struct FVector                                     AdjustLoc;                                                // 0x044C(0x000C)
	class AController*                                 nextController;                                           // 0x0458(0x0004) (Const)
	class AController*                                 preController;                                            // 0x045C(0x0004) (Const)
	float                                              Stimulus;                                                 // 0x0460(0x0004)
	float                                              wFlashRemainTime;                                         // 0x0464(0x0004)
	float                                              wFlashForce;                                              // 0x0468(0x0004)
	float                                              wFreezeTime;                                              // 0x046C(0x0004)
	float                                              MoveTimer;                                                // 0x0470(0x0004)
	class AActor*                                      MoveTarget;                                               // 0x0474(0x0004)
	struct FVector                                     Destination;                                              // 0x0478(0x000C)
	struct FVector                                     FocalPoint;                                               // 0x0484(0x000C)
	class AActor*                                      Focus;                                                    // 0x0490(0x0004)
	float                                              FocusLead;                                                // 0x0494(0x0004)
	class AMover*                                      PendingMover;                                             // 0x0498(0x0004)
	class AActor*                                      GoalList[0x4];                                            // 0x049C(0x0004)
	class ANavigationPoint*                            home;                                                     // 0x04AC(0x0004)
	float                                              MinHitWall;                                               // 0x04B0(0x0004)
	float                                              RespawnPredictionTime;                                    // 0x04B4(0x0004)
	float                                              DodgeToGoalPct;                                           // 0x04B8(0x0004)
	int                                                AcquisitionYawRate;                                       // 0x04BC(0x0004)
	float                                              DodgeLandZ;                                               // 0x04C0(0x0004)
	class AVehicle*                                    LastBlockingVehicle;                                      // 0x04C4(0x0004)
	class APawn*                                       Enemy;                                                    // 0x04C8(0x0004)
	class AActor*                                      Target;                                                   // 0x04CC(0x0004)
	struct FVector                                     LastSeenPos;                                              // 0x04D0(0x000C)
	struct FVector                                     LastSeeingPos;                                            // 0x04DC(0x000C)
	float                                              LastSeenTime;                                             // 0x04E8(0x0004)
	string                                             VoiceType;                                                // 0x04EC(0x000C) (NeedCtorLink)
	float                                              OldMessageTime;                                           // 0x04F8(0x0004)
	class AActor*                                      RouteCache[0x10];                                         // 0x04FC(0x0004)
	class UReachSpec*                                  CurrentPath;                                              // 0x053C(0x0004)
	class UReachSpec*                                  NextRoutePath;                                            // 0x0540(0x0004)
	struct FVector                                     CurrentPathDir;                                           // 0x0544(0x000C)
	class AActor*                                      RouteGoal;                                                // 0x0550(0x0004)
	float                                              RouteDist;                                                // 0x0554(0x0004)
	float                                              LastRouteFind;                                            // 0x0558(0x0004)
	struct FVector                                     DirectionHint;                                            // 0x055C(0x000C)
	class UClass*                                      PlayerReplicationInfoClass;                               // 0x0568(0x0004) (Edit)
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                                    // 0x056C(0x0004) (Net)
	class UClass*                                      PawnClass;                                                // 0x0570(0x0004) (Net)
	class UClass*                                      PreviousPawnClass;                                        // 0x0574(0x0004)
	float                                              GroundPitchTime;                                          // 0x0578(0x0004)
	struct FVector                                     ViewX;                                                    // 0x057C(0x000C)
	struct FVector                                     ViewY;                                                    // 0x0588(0x000C)
	struct FVector                                     ViewZ;                                                    // 0x0594(0x000C)
	class ANavigationPoint*                            StartSpot;                                                // 0x05A0(0x0004)
	struct FVector                                     MonitorStartLoc;                                          // 0x05A4(0x000C)
	class APawn*                                       MonitoredPawn;                                            // 0x05B0(0x0004)
	float                                              MonitorMaxDistSq;                                         // 0x05B4(0x0004)
	class AController*                                 Caller;                                                   // 0x05B8(0x0004)
	class AAvoidMarker*                                FearSpots[0x2];                                           // 0x05BC(0x0004)
	float                                              WarningDelay;                                             // 0x05C4(0x0004)
	class AProjectile*                                 WarningProjectile;                                        // 0x05C8(0x0004)
	class APawn*                                       ShotTarget;                                               // 0x05CC(0x0004)
	class AActor*                                      LastFailedReach;                                          // 0x05D0(0x0004) (Const)
	float                                              FailedReachTime;                                          // 0x05D4(0x0004) (Const)
	struct FVector                                     FailedReachLocation;                                      // 0x05D8(0x000C) (Const)
	float                                              Adrenaline;                                               // 0x05E4(0x0004) (Net)
	float                                              AdrenalineMax;                                            // 0x05E8(0x0004)
	class UClass*                                      LastPawnWeapon;                                           // 0x05EC(0x0004)
	float                                              UAVQueue;                                                 // 0x05F0(0x0004)
	int                                                RegenLoc;                                                 // 0x05F4(0x0004)
	class UwSkillBase*                                 SkillBase;                                                // 0x05F8(0x0004)
	bool                                               bHit;                                                     // 0x05FC(0x0004)
	bool                                               bSet;                                                     // 0x05FC(0x0004)
	float                                              hit_gun_move_speed;                                       // 0x0600(0x0004)
	float                                              hit_gun_move_time;                                        // 0x0604(0x0004)
	float                                              hit_gun_move_delay;                                       // 0x0608(0x0004)
	float                                              hit_gun_delta_Time;                                       // 0x060C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Controller");
		return ptr;
	}


	void ChangeSkillAddValue(int SkillID, int addValue);
	void ClientEnableSkill(int SkillID);
	void SetActiveSkill(int SkillID);
	void ServerSkillUsedByWeapon(int iWeaponID);
	void SkillUsedByWeapon(int iWeaponID);
	bool IsSpecialMode_Pistol(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_Grenade(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_MG(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_FlameThrower(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_SG(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_Hold_Weapon(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_SR(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_RPG(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_Knife(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsPermitSpecialMode(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType, int KeyF);
	class AController* GetCaller();
	void NotifyVehicle(class AVehicle* V);
	void ClientUAV(int UAVDuration);
	bool AllowFire();
	void ReceiveMessage_QuestType4(class UClass* Message, int Switch, int iRDifficult, int iRRound);
	void ReceiveMessage_QuestType3(class UClass* Message, int Switch, int iRDifficult, int iRMap);
	void ReceiveMessage_QuestType2(class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec);
	void ReceiveMessage_QuestType1(class UClass* Message, int Switch, int iRWeaponType, int iRweaponId);
	void ClipAirStrikeLocation(struct FVector[] vLocation, struct FVector* vMin, struct FVector* vMax);
	struct FVector CalcAirStrikeLocation(float fMaxDist);
	void ServerCallAirStrike(class AController* Caller);
	void ServerCallUAV();
	bool IsActiveMyTeamSentryGun();
	bool IsActiveUAV();
	bool IsActiveHelicopter();
	bool IsActiveAirFire();
	bool ActivateSupplyItem(class AController* callingController, ESUPPLY_ITEM_TYPE eSupplyItemType);
	bool CanUseActivateSupplyItem(class AController* callingController, ESUPPLY_ITEM_TYPE eSupplyItemType, bool bShowMessage);
	void ZoomFOV(float fFOV, bool bInstant);
	void ClientReadyCoolTimeSkill(int iSkillID);
	void CallCoolTimeSkill(int iSkillID);
	void ClientCallCoolTimeSkill(int iSkillID);
	void ClientOnEndIntervented();
	void ClientOnBeginIntervented();
	void ClientOnBeginRound();
	void ClientOnEndWaitingForStart();
	void ClientOnBeginWaitingForStart();
	void ClientStopAllSound(class AActor* aactor);
	void StopAllSoundHK(class AActor* aactor);
	void SetMoveAtt(const string& gmv, const string& gmt, const string& gmd, bool isSet);
	void WeaponReload();
	string ParseChatPercVar(const string& Cmd);
	bool DontReuseTaunt(int t);
	bool AutoTaunt();
	void StartMonitoring(class APawn* P, float MaxDist);
	void MonitoredPawnAlert();
	void ServerGivePawn();
	void ServerReStartPlayer();
	void ChangedWeapon();
	class APlayerReplicationInfo* GetPRI();
	bool CheckFutureSight(float DeltaTime);
	void SetCaller(class AController* C);
	void SetPawnFemale();
	void SetPawnClass(const string& inClass, const string& InCharacter);
	void ClientSetWeapon(class UClass* WeaponClass);
	void ClientSwitchToBestWeapon();
	void SwitchToBestWeapon();
	void DelayedWarning();
	void ReceiveProjectileWarning(class AProjectile* proj);
	void ReceiveWarning(class APawn* shooter, float projSpeed, const struct FVector& FireDir);
	void InstantWarnTarget(class AActor* Target, const struct FFireProperties& FiredAmmunition, const struct FVector& FireDir);
	struct FRotator AdjustAim(const struct FFireProperties& FiredAmmunition, const struct FVector& projStart, int AimError);
	float WeaponPreference(class AwWeapon* W);
	float RateWeapon(class AwWeapon* W);
	void StopFiring();
	bool FireWeaponAt(class AActor* A);
	float AdjustDesireFor(class APickup* P);
	void damageAttitudeTo(class APawn* Other, float Damage);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* Other);
	void OnEndRound();
	void ShakeView(const struct FVector& shRotMag, const struct FVector& shRotRate, float shRotTime, const struct FVector& shOffsetMag, const struct FVector& shOffsetRate, float shOffsetTime);
	void DamageShake(int Damage);
	void EnemyNotVisible();
	void SeeMonster(class APawn* Seen);
	void SeePlayer(class APawn* Seen);
	void HearNoise(float Loudness, class AActor* NoiseMaker);
	void SetupSpecialPathAbilities();
	float SuperDesireability(class APickup* P);
	float Desireability(class APickup* P);
	void FearThisSpot(class AAvoidMarker* aSpot);
	void UnderLift(class AMover* M);
	void MoverFinished();
	void WaitForMover(class AMover* M);
	void PrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path);
	struct FVector AdjustToss(float TSpeed, const struct FVector& Start, const struct FVector& End, bool bNormalize);
	bool WouldReactToSeeing(class APawn* Seen);
	bool WouldReactToNoise(float Loudness, class AActor* NoiseMaker);
	void BotVoiceMessage(const FName& MessageType, byte MessageID, class AController* Sender);
	void ClientVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const FName& MessageType, byte MessageID);
	void SendVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const FName& MessageType, byte MessageID, const FName& BroadcastType);
	bool AllowVoiceMessage(const FName& MessageType);
	void SendMessage(class APlayerReplicationInfo* Recipient, const FName& MessageType, byte MessageID, float wait, const FName& BroadcastType);
	byte GetMessageIndex(const FName& PhraseName);
	int GetFacingDirection();
	void RenderSpectatorFPWeapon(class UCanvas* Canvas, bool bClearedZBuffer);
	void RenderOverlays(class UCanvas* Canvas);
	void StopPawnsAndControllers();
	void ClientRoundEnded();
	void RoundHasEnded();
	void ClientGameEnded();
	void GameHasEnded();
	bool WantsSmoothedViewNative();
	bool WantsSmoothedView();
	void AdjustView(float DeltaTime);
	bool AllowDetourTo(class ANavigationPoint* N);
	void Destroyed();
	void DestroyPlayerReplicationInfo();
	void HandlePickup(class APickup* pick);
	bool SameTeamAs(class AController* C);
	int GetTeamNum();
	void InitPlayerReplicationInfo();
	void PostBeginPlay();
	void PreBeginPlay();
	void HandleWalking();
	void Jump(float f);
	void TickStance(float DeltaTime);
	void SendMessageSprintTime();
	void TickSprint(float DeltaTime);
	void NotifyChangeSprint(bool bValue);
	void ServerSetVel(const struct FVector& Vel);
	void ServerSetOldRun(byte bSetVal, byte bHitVal);
	bool IsBehindView();
	void PawnIsInPain(class APhysicsVolume* PainVolume);
	void SetFall();
	void NotifyTakeHit(class APawn* instigatedBy, const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, int CollisionPart);
	void NotifyAddInventory(class AInventory* NewItem);
	void SetDoubleJump();
	void NotifyMissedJump();
	void NotifyJumpApex();
	void NotifyHitMover(const struct FVector& HitNormal, class AMover* Wall);
	bool NotifyBump(class AActor* Other);
	void NotifyFallingHitWall(const struct FVector& HitNormal, class AActor* Wall);
	bool NotifyHitWall(const struct FVector& HitNormal, class AActor* Wall);
	void NotifyPostLanded();
	bool NotifyLanded(const struct FVector& HitNormal);
	bool NotifyHeadVolumeChange(class APhysicsVolume* NewVolume);
	bool NotifyPhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void LongFall();
	void Restart();
	void PawnDied(class APawn* P);
	class UClass* GetLastWeapon();
	void WasKilledBy(class AController* Other);
	void UnPossess();
	void Possess(class APawn* aPawn);
	void SoakStop(const string& problem);
	void AIHearSound(class AActor* Actor, int id, class USound* S, const struct FVector& soundLocation, const struct FVector& Parameters, bool Attenuate);
	void ClientDying(class UClass* DamageType, const struct FVector& HitLocation);
	void ClientSetRotation(const struct FRotator& NewRotation);
	void ClientSetLocation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	bool AvoidCertainDeath();
	void Reset();
	struct FRotator GetViewRotation();
	string GetHumanReadableName();
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void ClientTestAllWeapons();
	void ClientTestWeapon(class AwWeapon* W, int iaWeaponID);
	bool NeedsAdrenaline();
	void AwardAdrenaline(float Amount);
	void wClientFreeze(float fTime);
	void wViewFlash(float fDeltaTime);
	void wClientFlash(float fTime);
	void PendingStasis();
	void Cmd(const string& P1, const string& P2, const string& p3, const string& p4, const string& p5);
	void MissedDodge();
	void MayDodgeToMoveTarget();
	void MayFall();
	bool CanMakePathTo(class AActor* A);
	void EndClimbLadder();
	void StopWaiting();
	bool InLatentExecution(int LatentActionNumber);
	class AActor* PickAnyTarget(const struct FVector& FireDir, const struct FVector& projStart, float* bestAim, float* BestDist);
	class APawn* PickTarget(const struct FVector& FireDir, const struct FVector& projStart, float MaxRange, float* bestAim, float* BestDist);
	void RemoveController();
	void AddController();
	class AActor* FindBestSuperPickup(float MaxDist);
	class AActor* FindBestInventoryPath(float* MinWeight);
	void WaitForLanding();
	bool PickWallAdjust(const struct FVector& HitNormal);
	bool actorReachable(class AActor* anActor);
	bool pointReachable(const struct FVector& aPoint);
	struct FVector EAdjustJump(float BaseZ, float XYSpeed);
	class ANavigationPoint* FindRandomDest();
	class AActor* FindPathTowardNearest(class UClass* GoalClass, bool bWeightDetours);
	class AActor* FindPathToIntercept(class APawn* P, class AActor* RouteGoal, bool bWeightDetours);
	class AActor* FindPathToward(class AActor* anActor, bool bWeightDetours);
	class AActor* FindPathTo(const struct FVector& aPoint);
	bool CanSee(class APawn* Other);
	bool LineOfSightTo(class AActor* Other);
	void FinishRotation();
	void MoveToward(class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldSprint);
	void MoveTo(const struct FVector& NewDestination, class AActor* ViewFocus, bool bShouldSprint, const struct FVector& FocalPoint);
};


// Class Engine.PlayerController
// 0x0798 (0x0DA8 - 0x0610)
class APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                                   // 0x0610(0x0004) (Const)
	bool                                               bZeroRoll;                                                // 0x0614(0x0004)
	bool                                               bCameraPositionLocked;                                    // 0x0614(0x0004)
	bool                                               bViewBot;                                                 // 0x0614(0x0004)
	bool                                               UseFixedVisibility;                                       // 0x0614(0x0004)
	bool                                               bPressedJump;                                             // 0x0614(0x0004)
	bool                                               bFreeCam;                                                 // 0x0614(0x0004)
	bool                                               bFreeCamZoom;                                             // 0x0614(0x0004)
	bool                                               bFreeCamSwivel;                                           // 0x0614(0x0004)
	bool                                               bFrozen;                                                  // 0x0614(0x0004)
	bool                                               bBlockCloseCamera;                                        // 0x0614(0x0004)
	bool                                               bDoubleJump;                                              // 0x0614(0x0004)
	bool                                               bUpdatePosition;                                          // 0x0614(0x0004)
	bool                                               bIsTyping;                                                // 0x0614(0x0004)
	bool                                               bFixedCamera;                                             // 0x0614(0x0004)
	bool                                               bJumpStatus;                                              // 0x0614(0x0004)
	bool                                               bUpdating;                                                // 0x0614(0x0004)
	bool                                               bNeverSwitchOnPickup;                                     // 0x0614(0x0004)
	bool                                               bHideSpectatorBeacons;                                    // 0x0614(0x0004)
	bool                                               bZooming;                                                 // 0x0614(0x0004)
	bool                                               bHideVehicleNoEntryIndicator;                             // 0x0614(0x0004)
	bool                                               bAlwaysLevel;                                             // 0x0614(0x0004)
	bool                                               bSetTurnRot;                                              // 0x0614(0x0004)
	bool                                               bCheatFlying;                                             // 0x0614(0x0004)
	bool                                               bFreeCamera;                                              // 0x0614(0x0004)
	bool                                               bLookUpStairs;                                            // 0x0614(0x0004)
	bool                                               bSnapToLevel;                                             // 0x0614(0x0004)
	bool                                               bAlwaysMouseLook;                                         // 0x0614(0x0004)
	bool                                               bKeyboardLook;                                            // 0x0614(0x0004)
	bool                                               bCenterView;                                              // 0x0614(0x0004)
	bool                                               bCanProcessTimer;                                         // 0x0614(0x0004)
	bool                                               DoServerViewNextPlayer;                                   // 0x0614(0x0004) (NoExport)
	bool                                               bBehindView;                                              // 0x0614(0x0004)
	bool                                               Padding00 : 24;                                           // 0x0618(0x0001)
	bool                                               bSmallWeapons;                                            // 0x0618(0x0004)
	bool                                               bAutoTaunt;                                               // 0x0618(0x0004)
	bool                                               bNoVoiceTaunts;                                           // 0x0618(0x0004)
	bool                                               bNoAutoTaunts;                                            // 0x0618(0x0004)
	bool                                               bNoTextToSpeechVoiceMessages;                             // 0x0618(0x0004)
	bool                                               bDynamicNetSpeed;                                         // 0x0618(0x0004)
	bool                                               bNoMatureLanguage;                                        // 0x0618(0x0004)
	bool                                               bFreeView;                                                // 0x0618(0x0004) (Net)
	bool                                               bNoVoiceMessages;                                         // 0x0618(0x0004)
	bool                                               bValidBehindCamera;                                       // 0x0618(0x0004)
	bool                                               bForcePrecache;                                           // 0x0618(0x0004)
	bool                                               bClientDemo;                                              // 0x0618(0x0004)
	bool                                               bAllActorsRelevant;                                       // 0x0618(0x0004) (Const)
	bool                                               bShortConnectTimeOut;                                     // 0x0618(0x0004)
	bool                                               bPendingDestroy;                                          // 0x0618(0x0004)
	bool                                               bEnableAmbientShake;                                      // 0x0618(0x0004)
	bool                                               bPlayFromStart;                                           // 0x0618(0x0004)
	float                                              fDeltaFOVAngle;                                           // 0x061C(0x0004)
	float                                              fAnimRate_AdsOn;                                          // 0x0620(0x0004)
	float                                              fAnimRate_AdsOff;                                         // 0x0624(0x0004)
	bool                                               bWeaponViewShake;                                         // 0x0628(0x0004)
	bool                                               bLandingShake;                                            // 0x0628(0x0004)
	bool                                               bAimingHelp;                                              // 0x0628(0x0004)
	int                                                BGMLastInitialSeekIdx;                                    // 0x062C(0x0004)
	bool                                               bMenuBeforeRespawn;                                       // 0x0630(0x0004)
	bool                                               bIsSpaceFighter;                                          // 0x0630(0x0004)
	bool                                               bLastPressedJump;                                         // 0x0630(0x0004)
	bool                                               bEnableStatsTracking;                                     // 0x0630(0x0004)
	bool                                               bOnlySpeakTeamText;                                       // 0x0630(0x0004)
	bool                                               bWasSpeedHack;                                            // 0x0630(0x0004)
	bool                                               bSkippedLastUpdate;                                       // 0x0630(0x0004)
	bool                                               bWasSaturated;                                            // 0x0630(0x0004) (Const)
	bool                                               bCustomListener;                                          // 0x0630(0x0004)
	bool                                               bAcuteHearing;                                            // 0x0630(0x0004)
	bool                                               bEnablePickupForceFeedback;                               // 0x0630(0x0004) (Edit)
	bool                                               bEnableWeaponForceFeedback;                               // 0x0630(0x0004) (Edit)
	bool                                               bEnableDamageForceFeedback;                               // 0x0630(0x0004) (Edit)
	bool                                               bEnableGUIForceFeedback;                                  // 0x0630(0x0004) (Edit)
	bool                                               bForceFeedbackSupported;                                  // 0x0630(0x0004) (Edit)
	bool                                               bVoiceChatEnabled;                                        // 0x0630(0x0004) (Edit)
	bool                                               bEnableInitialChatRoom;                                   // 0x0630(0x0004) (Edit)
	bool                                               bViewingMatineeCinematic;                                 // 0x0630(0x0004)
	float                                              FOVBias;                                                  // 0x0634(0x0004)
	byte                                               AutoJoinMask;                                             // 0x0638(0x0001) (Edit)
	byte                                               bStrafe;                                                  // 0x0639(0x0001) (Input)
	byte                                               bSnapLevel;                                               // 0x063A(0x0001) (Input)
	byte                                               bLook;                                                    // 0x063B(0x0001) (Input)
	byte                                               bFreeLook;                                                // 0x063C(0x0001) (Input)
	byte                                               bTurn180;                                                 // 0x063D(0x0001) (Input)
	byte                                               bTurnToNearest;                                           // 0x063E(0x0001) (Input)
	byte                                               bXAxis;                                                   // 0x063F(0x0001) (Input)
	byte                                               bYAxis;                                                   // 0x0640(0x0001) (Input)
	byte                                               bQuickGrenade;                                            // 0x0641(0x0001) (Input)
	byte                                               bQuickSubGrenade;                                         // 0x0642(0x0001) (Input)
	EDoubleClickDir                                    DoubleClickDir;                                           // 0x0643(0x0001)
	byte                                               AnnouncerLevel;                                           // 0x0644(0x0001)
	byte                                               AnnouncerVolume;                                          // 0x0645(0x0001)
	byte                                               Padding01[0x2];                                           // 0x0646(0x0002) MISSED OFFSET
	float                                              AnnouncerVolumeForce;                                     // 0x0648(0x0004) (Config, GlobalConfig)
	float                                              TextToSpeechVoiceVolume;                                  // 0x064C(0x0004)
	float                                              MaxResponseTime;                                          // 0x0650(0x0004)
	float                                              WaitDelay;                                                // 0x0654(0x0004)
	class APawn*                                       AcknowledgedPawn;                                         // 0x0658(0x0004)
	float                                              aBaseX;                                                   // 0x065C(0x0004) (Input)
	float                                              aBaseY;                                                   // 0x0660(0x0004) (Input)
	float                                              aBaseZ;                                                   // 0x0664(0x0004) (Input)
	float                                              aMouseX;                                                  // 0x0668(0x0004) (Input)
	float                                              aMouseY;                                                  // 0x066C(0x0004) (Input)
	float                                              aForward;                                                 // 0x0670(0x0004) (Input)
	float                                              aTurn;                                                    // 0x0674(0x0004) (Input)
	float                                              aStrafe;                                                  // 0x0678(0x0004) (Input)
	float                                              aUp;                                                      // 0x067C(0x0004) (Input)
	float                                              aLookUp;                                                  // 0x0680(0x0004) (Input)
	float                                              aLastForward;                                             // 0x0684(0x0004)
	float                                              aLastStrafe;                                              // 0x0688(0x0004)
	float                                              aLastUp;                                                  // 0x068C(0x0004)
	float                                              NumServerDrives;                                          // 0x0690(0x0004)
	float                                              NumSkips;                                                 // 0x0694(0x0004)
	float                                              VehicleCheckRadius;                                       // 0x0698(0x0004)
	bool                                               bSuccessfulUse;                                           // 0x069C(0x0004)
	int                                                ShowFlags;                                                // 0x06A0(0x0004)
	int                                                Misc1;                                                    // 0x06A4(0x0004)
	int                                                Misc2;                                                    // 0x06A8(0x0004)
	int                                                RendMap;                                                  // 0x06AC(0x0004)
	float                                              OrthoZoom;                                                // 0x06B0(0x0004)
	class AActor*                                      ViewTarget;                                               // 0x06B4(0x0004) (Const)
	class AController*                                 RealViewTarget;                                           // 0x06B8(0x0004) (Const)
	class APlayerController*                           DemoViewer;                                               // 0x06BC(0x0004)
	float                                              CameraDist;                                               // 0x06C0(0x0004)
	struct FRange                                      CameraDistRange;                                          // 0x06C4(0x0008)
	struct FVector                                     OldCameraLoc;                                             // 0x06CC(0x000C)
	struct FRotator                                    OldCameraRot;                                             // 0x06D8(0x000C)
	class UCameraEffect*[]                             CameraEffects;                                            // 0x06E4(0x000C) (Transient, NeedCtorLink)
	class UPostProcessEffect*[]                        PostProcessEffects;                                       // 0x06F0(0x000C) (Transient, NeedCtorLink)
	bool                                               bPPE_Fade_FirstStarted;                                   // 0x06FC(0x0004)
	bool                                               bNeedFadeClientRestart;                                   // 0x06FC(0x0004)
	bool                                               bForceFadeScreen;                                         // 0x06FC(0x0004)
	float                                              DesiredFOV;                                               // 0x0700(0x0004)
	float                                              DefaultFOV;                                               // 0x0704(0x0004)
	bool                                               bInstantZoom;                                             // 0x0708(0x0004) (Transient)
	struct FVector                                     ListenerLocation;                                         // 0x070C(0x000C)
	struct FRotator                                    ListenerRotation;                                         // 0x0718(0x000C)
	struct FVector                                     FixedLocation;                                            // 0x0724(0x000C)
	struct FRotator                                    FixedRotation;                                            // 0x0730(0x000C)
	struct FMatrix                                     RenderWorldToCamera;                                      // 0x073C(0x0040)
	struct FVector                                     FlashScale;                                               // 0x077C(0x000C)
	struct FVector                                     FlashFog;                                                 // 0x0788(0x000C)
	float                                              ConstantGlowScale;                                        // 0x0794(0x0004)
	struct FVector                                     ConstantGlowFog;                                          // 0x0798(0x000C)
	float                                              ScreenFlashScaling;                                       // 0x07A4(0x0004)
	float                                              FlashStep;                                                // 0x07A8(0x0004)
	struct FColor                                      LastDistanceFogColor;                                     // 0x07AC(0x0004)
	float                                              LastDistanceFogStart;                                     // 0x07B0(0x0004)
	float                                              LastDistanceFogEnd;                                       // 0x07B4(0x0004)
	float                                              CurrentDistanceFogEnd;                                    // 0x07B8(0x0004)
	float                                              TimeSinceLastFogChange;                                   // 0x07BC(0x0004)
	int                                                LastZone;                                                 // 0x07C0(0x0004)
	struct FRotator                                    TargetViewRotation;                                       // 0x07C4(0x000C) (Net)
	struct FRotator                                    BlendedTargetViewRotation;                                // 0x07D0(0x000C)
	float                                              TargetEyeHeight;                                          // 0x07DC(0x0004) (Net)
	struct FVector                                     TargetWeaponViewOffset;                                   // 0x07E0(0x000C)
	class AHUD*                                        myHUD;                                                    // 0x07EC(0x0004)
	float                                              LastPlaySound;                                            // 0x07F0(0x0004)
	float                                              LastPlaySpeech;                                           // 0x07F4(0x0004)
	string                                             Song;                                                     // 0x07F8(0x000C) (NeedCtorLink)
	EMusicTransition                                   Transition;                                               // 0x0804(0x0001)
	byte                                               Padding02[0x3];                                           // 0x0805(0x0003) MISSED OFFSET
	class ASavedMove*                                  SavedMoves;                                               // 0x0808(0x0004)
	class ASavedMove*                                  FreeMoves;                                                // 0x080C(0x0004)
	class ASavedMove*                                  PendingMove;                                              // 0x0810(0x0004)
	float                                              CurrentTimeStamp;                                         // 0x0814(0x0004)
	float                                              LastUpdateTime;                                           // 0x0818(0x0004)
	float                                              ServerTimeStamp;                                          // 0x081C(0x0004)
	float                                              TimeMargin;                                               // 0x0820(0x0004)
	float                                              ClientUpdateTime;                                         // 0x0824(0x0004)
	float                                              MaxTimeMargin;                                            // 0x0828(0x0004)
	float                                              TimeMarginSlack;                                          // 0x082C(0x0004)
	class AwWeapon*                                    OldClientWeapon;                                          // 0x0830(0x0004)
	int                                                WeaponUpdate;                                             // 0x0834(0x0004)
	string                                             ProgressMessage[0x4];                                     // 0x0838(0x000C) (NeedCtorLink)
	struct FColor                                      ProgressColor[0x4];                                       // 0x0868(0x0004)
	float                                              ProgressTimeOut;                                          // 0x0878(0x0004)
	string                                             QuickSaveString;                                          // 0x087C(0x000C) (Localized, NeedCtorLink)
	string                                             NoPauseMessage;                                           // 0x0888(0x000C) (Localized, NeedCtorLink)
	string                                             ViewingFrom;                                              // 0x0894(0x000C) (Localized, NeedCtorLink)
	string                                             OwnCamera;                                                // 0x08A0(0x000C) (Localized, NeedCtorLink)
	class AGameReplicationInfo*                        GameReplicationInfo;                                      // 0x08AC(0x0004) (Net)
	class AVoiceChatReplicationInfo*                   VoiceReplicationInfo;                                     // 0x08B0(0x0004) (Net)
	class AVotingReplicationInfoBase*                  VoteReplicationInfo;                                      // 0x08B4(0x0004)
	string                                             StatsUsername;                                            // 0x08B8(0x000C) (NeedCtorLink)
	string                                             StatsPassword;                                            // 0x08C4(0x000C) (NeedCtorLink)
	class UClass*                                      LocalMessageClass;                                        // 0x08D0(0x0004)
	class UClass*                                      ChatRoomMessageClass;                                     // 0x08D4(0x0004) (Edit)
	struct FVector                                     ShakeOffsetRate;                                          // 0x08D8(0x000C)
	struct FVector                                     ShakeOffset;                                              // 0x08E4(0x000C)
	struct FVector                                     ShakeOffsetTime;                                          // 0x08F0(0x000C)
	struct FVector                                     ShakeOffsetMax;                                           // 0x08FC(0x000C)
	struct FVector                                     ShakeRotRate;                                             // 0x0908(0x000C)
	struct FVector                                     ShakeRotMax;                                              // 0x0914(0x000C)
	struct FRotator                                    ShakeRot;                                                 // 0x0920(0x000C)
	struct FVector                                     ShakeRotTime;                                             // 0x092C(0x000C)
	EShakeState                                        wShakeState;                                              // 0x0938(0x0001)
	byte                                               Padding03[0x3];                                           // 0x0939(0x0003) MISSED OFFSET
	struct FRotator                                    wShakeDest;                                               // 0x093C(0x000C)
	float                                              wShakeStayingTime;                                        // 0x0948(0x0004)
	struct FVector                                     wShakeVelocity;                                           // 0x094C(0x000C)
	float                                              wShakeDist;                                               // 0x0958(0x0004)
	float                                              wShakeDecayStartDist;                                     // 0x095C(0x0004)
	float                                              wShakeSpeed;                                              // 0x0960(0x0004)
	float                                              wShakeDecel;                                              // 0x0964(0x0004)
	float                                              wShakeDecay;                                              // 0x0968(0x0004)
	float                                              wShakeDecayAcc;                                           // 0x096C(0x0004)
	struct FRotator                                    wShakeRot;                                                // 0x0970(0x000C)
	struct FRotator                                    wShakeKickedRot;                                          // 0x097C(0x000C)
	float                                              wShakeDeltaTime;                                          // 0x0988(0x0004)
	float                                              wShakeFixedTime;                                          // 0x098C(0x0004)
	float                                              wShakeDecayBeginTime;                                     // 0x0990(0x0004)
	float                                              wShakeDecayFastTime;                                      // 0x0994(0x0004)
	float                                              wDecayRemainTime;                                         // 0x0998(0x0004)
	float                                              wShakeDecayDist_Per_wt_index;                             // 0x099C(0x0004)
	struct FRotator                                    wShakeDecayed;                                            // 0x09A0(0x000C)
	EShockState                                        wShockState;                                              // 0x09AC(0x0001)
	byte                                               Padding04[0x3];                                           // 0x09AD(0x0003) MISSED OFFSET
	float                                              wShockForce;                                              // 0x09B0(0x0004)
	float                                              wShockStayingTime;                                        // 0x09B4(0x0004)
	struct FRotator                                    wShockRot;                                                // 0x09B8(0x000C)
	float                                              wShockStayTime;                                           // 0x09C4(0x0004)
	float                                              wShockDecayMul;                                           // 0x09C8(0x0004)
	struct FRotator                                    wBreathRot;                                               // 0x09CC(0x000C)
	float                                              AmbientShakeFalloffStartTime;                             // 0x09D8(0x0004)
	float                                              AmbientShakeFalloffTime;                                  // 0x09DC(0x0004)
	struct FVector                                     AmbientShakeOffsetMag;                                    // 0x09E0(0x000C)
	float                                              AmbientShakeOffsetFreq;                                   // 0x09EC(0x0004)
	struct FRotator                                    AmbientShakeRotMag;                                       // 0x09F0(0x000C)
	float                                              AmbientShakeRotFreq;                                      // 0x09FC(0x0004)
	class APawn*                                       TurnTarget;                                               // 0x0A00(0x0004)
	int                                                EnemyTurnSpeed;                                           // 0x0A04(0x0004)
	int                                                GroundPitch;                                              // 0x0A08(0x0004)
	struct FRotator                                    TurnRot180;                                               // 0x0A0C(0x000C)
	struct FVector                                     OldFloor;                                                 // 0x0A18(0x000C)
	float                                              wAttackedDeltaTime;                                       // 0x0A24(0x0004)
	float                                              wAttackedStayingTime;                                     // 0x0A28(0x0004)
	float                                              wAttackedStayTime;                                        // 0x0A2C(0x0004)
	float                                              wAttackedForce;                                           // 0x0A30(0x0004)
	float                                              wAttackedSpeed;                                           // 0x0A34(0x0004)
	float                                              wAttackedDecel;                                           // 0x0A38(0x0004)
	float                                              wAttackedDecay;                                           // 0x0A3C(0x0004)
	float                                              wAttackedDecayAcc;                                        // 0x0A40(0x0004)
	float                                              wAttackedDist;                                            // 0x0A44(0x0004)
	float                                              wAttackedAimRatio;                                        // 0x0A48(0x0004)
	float                                              wAttackedCameraRatioF;                                    // 0x0A4C(0x0004)
	float                                              wAttackedCameraRatioS;                                    // 0x0A50(0x0004)
	struct FVector                                     wAttackedVelocity;                                        // 0x0A54(0x000C)
	struct FVector                                     wApplyFront;                                              // 0x0A60(0x000C)
	struct FVector                                     wApplyBack;                                               // 0x0A6C(0x000C)
	struct FVector                                     wApplyRight;                                              // 0x0A78(0x000C)
	struct FVector                                     wApplyLeft;                                               // 0x0A84(0x000C)
	struct FRotator                                    wAttackedDest;                                            // 0x0A90(0x000C)
	struct FRotator                                    wAttackedRot;                                             // 0x0A9C(0x000C)
	struct FRotator                                    wPostAttackedRot;                                         // 0x0AA8(0x000C)
	EAttackedState                                     wAttackedState;                                           // 0x0AB4(0x0001)
	EAttackedDirState                                  wADirState;                                               // 0x0AB5(0x0001)
	byte                                               Padding05[0x2];                                           // 0x0AB6(0x0002) MISSED OFFSET
	class UCheatManager*                               CheatManager;                                             // 0x0AB8(0x0004) (Transient)
	class UClass*                                      CheatClass;                                               // 0x0ABC(0x0004)
	class UPlayerInput*                                PlayerInput;                                              // 0x0AC0(0x0004) (Transient)
	class UClass*                                      InputClass;                                               // 0x0AC4(0x0004)
	class UAdminBase*                                  AdminManager;                                             // 0x0AC8(0x0004) (Transient)
	class AMaplistManagerBase*                         MapHandler;                                               // 0x0ACC(0x0004) (Transient)
	string                                             PlayerChatType;                                           // 0x0AD0(0x000C) (NeedCtorLink)
	class APlayerChatManager*                          ChatManager;                                              // 0x0ADC(0x0004) (Net)
	struct FVector                                     FailedPathStart;                                          // 0x0AE0(0x000C) (Const)
	struct FRotator                                    CameraDeltaRotation;                                      // 0x0AEC(0x000C)
	float                                              CameraDeltaRad;                                           // 0x0AF8(0x0004)
	struct FRotator                                    CameraSwivel;                                             // 0x0AFC(0x000C)
	float                                              TeamBeaconMaxDist;                                        // 0x0B08(0x0004) (Edit)
	float                                              TeamBeaconPlayerInfoMaxDist;                              // 0x0B0C(0x0004) (Edit)
	class UTexture*                                    TeamBeaconTexture;                                        // 0x0B10(0x0004) (Edit)
	class UTexture*                                    LinkBeaconTexture;                                        // 0x0B14(0x0004) (Edit)
	class UTexture*                                    SpeakingBeaconTexture;                                    // 0x0B18(0x0004) (Edit)
	struct FColor                                      TeamBeaconTeamColors[0x2];                                // 0x0B1C(0x0004) (Edit)
	struct FColor                                      TeamBeaconCustomColor;                                    // 0x0B24(0x0004) (Edit)
	struct FPlayerNameInfo[]                           PlayerNameArray;                                          // 0x0B28(0x000C) (Const, NeedCtorLink)
	int                                                DemoViewPitch;                                            // 0x0B34(0x0004) (Net)
	int                                                DemoViewYaw;                                              // 0x0B38(0x0004) (Net)
	class ASecurity*                                   PlayerSecurity;                                           // 0x0B3C(0x0004)
	float                                              LoginDelay;                                               // 0x0B40(0x0004) (Net)
	float                                              NextLoginTime;                                            // 0x0B44(0x0004)
	float                                              ForcePrecacheTime;                                        // 0x0B48(0x0004)
	float                                              LastPingUpdate;                                           // 0x0B4C(0x0004)
	float                                              ExactPing;                                                // 0x0B50(0x0004)
	float                                              OldPing;                                                  // 0x0B54(0x0004)
	float                                              SpectateSpeed;                                            // 0x0B58(0x0004)
	float                                              DynamicPingThreshold;                                     // 0x0B5C(0x0004)
	float                                              NextSpeedChange;                                          // 0x0B60(0x0004)
	float                                              VoiceChangeLimit;                                         // 0x0B64(0x0004)
	int                                                ClientCap;                                                // 0x0B68(0x0004)
	string                                             MidGameMenuClass;                                         // 0x0B6C(0x000C) (Edit, NeedCtorLink)
	string                                             DemoMenuClass;                                            // 0x0B78(0x000C) (Edit, NeedCtorLink)
	string                                             AdminMenuClass;                                           // 0x0B84(0x000C) (Edit, NeedCtorLink)
	string                                             ChatPasswordMenuClass;                                    // 0x0B90(0x000C) (Edit, NeedCtorLink)
	struct FStoredChatPassword[]                       StoredChatPasswords;                                      // 0x0B9C(0x000C) (Edit, Config, GlobalConfig, NeedCtorLink)
	class AVoiceChatRoom*                              ActiveRoom;                                               // 0x0BA8(0x0004)
	string                                             LastActiveChannel;                                        // 0x0BAC(0x000C) (Edit, NeedCtorLink)
	string                                             VoiceChatCodec;                                           // 0x0BB8(0x000C) (Edit, NeedCtorLink)
	string                                             VoiceChatLANCodec;                                        // 0x0BC4(0x000C) (Edit, NeedCtorLink)
	string                                             ChatPassword;                                             // 0x0BD0(0x000C) (Edit, NeedCtorLink)
	string                                             DefaultActiveChannel;                                     // 0x0BDC(0x000C) (Edit, NeedCtorLink)
	struct FClientAdjustment                           PendingAdjustment;                                        // 0x0BE8(0x0034)
	class AAnnouncerQueueManager*                      AnnouncerQueueManager;                                    // 0x0C1C(0x0004)
	class AAnnouncerVoice*                             StatusAnnouncer;                                          // 0x0C20(0x0004)
	class AAnnouncerVoice*                             RewardAnnouncer;                                          // 0x0C24(0x0004)
	float                                              LastActiveTime;                                           // 0x0C28(0x0004)
	class AActor*                                      CalcViewActor;                                            // 0x0C2C(0x0004)
	struct FVector                                     CalcViewActorLocation;                                    // 0x0C30(0x000C)
	struct FVector                                     CalcViewLocation;                                         // 0x0C3C(0x000C)
	struct FRotator                                    CalcViewRotation;                                         // 0x0C48(0x000C)
	float                                              LastPlayerCalcView;                                       // 0x0C54(0x0004)
	float                                              LastBroadcastTime;                                        // 0x0C58(0x0004)
	string                                             LastBroadcastString[0x4];                                 // 0x0C5C(0x000C) (NeedCtorLink)
	float                                              LastSpeedHackLog;                                         // 0x0C8C(0x0004)
	string                                             PlayerOwnerName;                                          // 0x0C90(0x000C) (NeedCtorLink)
	bool                                               bAimMode;                                                 // 0x0C9C(0x0004) (Net)
	float                                              fTest00;                                                  // 0x0CA0(0x0004)
	float                                              fTest01;                                                  // 0x0CA4(0x0004)
	bool                                               bReloadMode;                                              // 0x0CA8(0x0004)
	bool                                               bMeleeAttackMode;                                         // 0x0CA8(0x0004)
	int                                                IDNum;                                                    // 0x0CAC(0x0004)
	string                                             LoginName;                                                // 0x0CB0(0x000C) (NeedCtorLink)
	bool                                               bShowAllPlayers;                                          // 0x0CBC(0x0004)
	byte                                               byOldUseKey;                                              // 0x0CC0(0x0001)
	byte                                               Padding06[0x3];                                           // 0x0CC1(0x0003) MISSED OFFSET
	int                                                MultiKillLevel;                                           // 0x0CC4(0x0004)
	int                                                iDebug;                                                   // 0x0CC8(0x0004)
	bool                                               bDamageLog;                                               // 0x0CCC(0x0004)
	string                                             PreviousStateName;                                        // 0x0CD0(0x000C) (NeedCtorLink)
	float                                              fRespawnTime;                                             // 0x0CDC(0x0004) (Edit)
	float                                              fDiedTime;                                                // 0x0CE0(0x0004)
	float                                              fMinTimeLookAt;                                           // 0x0CE4(0x0004) (Edit)
	class APawn*                                       KillerPawn;                                               // 0x0CE8(0x0004)
	struct FVector                                     KillerLocation;                                           // 0x0CEC(0x000C)
	bool                                               bDiedByCallWeapon;                                        // 0x0CF8(0x0004)
	int                                                iSelectedQSlotIndex;                                      // 0x0CFC(0x0004)
	int                                                iPrevSelectedQSlotIndex;                                  // 0x0D00(0x0004)
	int                                                iBupQSlotIndex;                                           // 0x0D04(0x0004)
	bool                                               bCanChangeQS;                                             // 0x0D08(0x0004)
	bool                                               bToggleQuickSlotWindow;                                   // 0x0D08(0x0004)
	bool                                               bToggleRadioMessage;                                      // 0x0D08(0x0004)
	int                                                iRadioMessageType;                                        // 0x0D0C(0x0004)
	float                                              fRadioMessageSendTime;                                    // 0x0D10(0x0004)
	bool                                               bToggleItemBuyWindow;                                     // 0x0D14(0x0004)
	int                                                iSellectedItemIndex;                                      // 0x0D18(0x0004)
	float                                              fBuyedTime;                                               // 0x0D1C(0x0004)
	float                                              fReqUsingItemTime;                                        // 0x0D20(0x0004)
	int                                                RemainTimeBeforeSpectating;                               // 0x0D24(0x0004)
	class AwGameStateStorageSender*                    GSSS;                                                     // 0x0D28(0x0004) (Net)
	float                                              fLastViewNextPlayerTime;                                  // 0x0D2C(0x0004)
	float                                              fSendPingTime;                                            // 0x0D30(0x0004)
	float                                              fLastSendPingTime;                                        // 0x0D34(0x0004)
	int                                                iRepShake;                                                // 0x0D38(0x0004)
	int                                                iRepShock;                                                // 0x0D3C(0x0004)
	int                                                iRepBreath;                                               // 0x0D40(0x0004)
	bool                                               bEnableRotate;                                            // 0x0D44(0x0004)
	bool                                               bPlayerWalkingFromChangeHost;                             // 0x0D44(0x0004)
	byte                                               AASLevel;                                                 // 0x0D48(0x0001)
	byte                                               Padding07[0x3];                                           // 0x0D49(0x0003) MISSED OFFSET
	float                                              fAirStrikeCenterX;                                        // 0x0D4C(0x0004) (Net)
	float                                              fAirStrikeCenterY;                                        // 0x0D50(0x0004) (Net)
	float                                              fAirStrikeRadius;                                         // 0x0D54(0x0004) (Net)
	int                                                iGMCamMode;                                               // 0x0D58(0x0004)
	int                                                changeCamViewIdx;                                         // 0x0D5C(0x0004)
	float                                              GmAccUp;                                                  // 0x0D60(0x0004) (Input)
	float                                              GmAccDown;                                                // 0x0D64(0x0004) (Input)
	struct FVector                                     CamPreLocation;                                           // 0x0D68(0x000C)
	struct FRotator                                    CamPreRotation;                                           // 0x0D74(0x000C)
	float                                              fPostBeginTime;                                           // 0x0D80(0x0004)
	float                                              fLastCalcTime;                                            // 0x0D84(0x0004)
	bool                                               bSentPerfInfo;                                            // 0x0D88(0x0004)
	int                                                iCalcCount;                                               // 0x0D8C(0x0004)
	int                                                iMaxFPS;                                                  // 0x0D90(0x0004)
	int                                                iMinFPS;                                                  // 0x0D94(0x0004)
	int                                                iSumFPS;                                                  // 0x0D98(0x0004)
	int                                                iMaxPing;                                                 // 0x0D9C(0x0004)
	int                                                iMinPing;                                                 // 0x0DA0(0x0004)
	int                                                iSumPing;                                                 // 0x0DA4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerController");
		return ptr;
	}


	class APawn* GetMyPawn();
	void ServerSendCheatMsg(const string& Msg);
	void SendCheatMsg(const string& Msg);
	void AddKill();
	void SetKillNum(int i);
	void DisplayDebugPHJ(class UCanvas* Canvas);
	void DisplayDebugChan1(class UCanvas* Canvas);
	void input_weapon(const string& S);
	void input_weaponex(const string& S);
	void ReWeaponParam();
	void SetWeaponTraceAim(const string& S);
	void SetWeaponTrace(const string& S);
	void ResetWeaponTrace();
	void ResetWeaponTraceIndex();
	void UnsetTestAim();
	void SetTestAim();
	void SetRMax(float f);
	void SetRMin(float f);
	void SetASSpeed(float f);
	void SetASSize(float f);
	void PlusCollisionHeight(float A);
	void ShowWebzenShop();
	void ClientChangeTcpTimeLimit();
	void setsdrespawn();
	void setautostart();
	void ClientUseSupplyItem(ESUPPLY_ITEM_TYPE eSupplyItemType);
	void ServerUseSupplyItem(ESUPPLY_ITEM_TYPE eSupplyItemType);
	void SMWL(const string& swmode, const string& Value);
	void Test3(float fActive);
	void Test2(float fAniFrame);
	void Test1(float fAniFrame);
	bool CheckChangeHostShowQS();
	void Bob(int idvalue, float Value);
	void Mark();
	void LODBias(float fBias);
	void GetPawnCount();
	void EverySetPktLoss(int ms);
	void ClientSetPktLoss(int ms);
	void EverySetPktLag(int ms);
	void ClientSetPktLag(int ms);
	void EverySos();
	void ClientSos();
	void Sos();
	void everysmall();
	void ClientSmall();
	void small();
	void ShowE();
	void ClientHoldFlag();
	class AwWeapon* GetDemoPackToMyInven();
	void DestroyEmitter();
	void PushAASNotice(const string& sNotice, float beginTime, byte byLevel);
	void PushGameNotice(const string& sNotice);
	void AllClientDeleteSuppliesPositions();
	void ClientDeleteSuppliesPositions(class AActor* act);
	void ChangeVoiceObjectLanguage(string* voiceObjectName);
	void VoiceObjectNameSetting();
	void SetVoiceLanguage(int iTeamIndex);
	void ClientSpawnInLogin(int iTeamIndex);
	void SpawnInLogin(int iTeamIndex);
	void ClientAddMagazine(bool bAdd);
	void ServerAddMagazine(bool bAdd);
	void ClientIncHealthPack(bool bAdd);
	void ServerIncHealthPack(bool bAdd);
	void ClientBombDetection(bool bAdd);
	void ServerBombDetection(bool bAdd);
	void ClientQuickDemolition(bool bAdd);
	void ServerQuickDemolition(bool bAdd);
	void ClientQuickRespawn(bool bAdd);
	void ServerQuickRespawn(bool bAdd);
	void ClientIncExplosion(bool bAdd);
	void ServerIncExplosion(bool bAdd);
	void ClientAddStamina(bool bAdd);
	void ServerAddStamina(bool bAdd);
	void ServerNotifyOnSkill(class UClass* onSkill);
	void ClientCheckSkill();
	bool IsBombDetection();
	void ClientTestAllWeapons();
	void ServerRequestWeapon(int iaWeaponID);
	void ClientTestWeapon(class AwWeapon* W, int iaWeaponID);
	void ClientSetHidden();
	void SelectPrevWeapon();
	void UpdateOption();
	void PlaySoundRadioMessage(int iKey, int iType);
	bool UsingItem_Slot8();
	bool UsingItem_Slot7();
	bool ReqUsingItem(byte byKey);
	bool ServerBuyItem(byte byIndex);
	bool SelectItemBuy(int iKey);
	void SelectRadioMessage(int iKey);
	void PlaySoundKilled(const string& strSound, bool bExceptOwner);
	void NotifyKilled(class AController* Killer, class AController* Killed, class APawn* Other);
	void ClientSetViewTargetDied(class AActor* Killer, class UObject* OptionalObject);
	void HCheck();
	void Air();
	void DLog(bool bEnable);
	void SelectQSlot(int iIndex);
	void ClientSetGRITimes(int RemainingTime, int ElapsedTime, int RemainingMinute);
	void ClientSelectQSlot(int iIndex);
	void ForceChangeQSlotIndex(int iIndex);
	void ServerSelectQSlot(int iIndex);
	void ServerWarp();
	void gggb();
	void ggga();
	void ServerCallSentryGunInstall(class AController* callingController);
	void ServerCallHelicopter(class APawn* lastHeliPawn, class AController* Caller);
	void ShowResultMenu();
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void ShowVoteMenu();
	void LostChild(class AActor* Other);
	void GainedChild(class AActor* Other);
	void ServerChatRestriction(int PlayerID, byte Type);
	void ServerRequestBanInfo(int PlayerID);
	void ServerChatDebug();
	void ChatDebug();
	void ClientSetActiveRoom(int ChannelIndex);
	void ServerChangeVoiceChatMode(bool bEnable);
	void ServerSetChatPassword(const string& NewPassword);
	void ServerSpeak(int ChannelIndex, const string& ChannelPassword);
	void ServerLeaveVoiceChannel(int ChannelIndex);
	EJoinChatResult ServerJoinVoiceChannel(int ChannelIndex, const string& ChannelPassword);
	string FindChannelPassword(const string& ChannelName);
	void SetChannelPassword(const string& ChannelName, const string& ChannelPassword);
	bool ChatBan(int PlayerID, byte Type);
	void ChangeVoiceChatMode(bool bEnable);
	void AutoJoinVoiceChat();
	string GetDefaultActiveChannel();
	void InitPrivateChatRoom();
	void InitializeVoiceChat();
	void DisableVoiceChat();
	void EnableVoiceChat();
	void SetChatPassword(const string& NewPassword);
	void SpeakLast();
	void SpeakDefault();
	void Speak(const string& ChannelTitle);
	void Leave(const string& ChannelTitle);
	void Join(const string& ChanName, const string& ChanPwd);
	void ServerVoiceCommand(const string& RecognizedString);
	void Command(const string& RecognizedString);
	void VoiceCommand(const string& RecognizedString, const string& RawString);
	bool NeedNetNotify();
	void SetCustomRewardAnnouncerClass(const string& NewAnnouncerClass);
	void SetCustomStatusAnnouncerClass(const string& NewAnnouncerClass);
	string GetCustomRewardAnnouncerClass();
	string GetCustomStatusAnnouncerClass();
	void DemoClientSetHUD(class UClass* newHUDClass, class UClass* newScoringClass);
	void ServerSetClientDemo();
	void StartClientDemoRec();
	void AdminGUI();
	void AdminLogout();
	void AdminReply(const string& Reply);
	void ReportAdmin(const string& ReportText);
	void AdminCommand(const string& CommandLine);
	void ServerAdminLogin(const string& CmdLine);
	void AdminLogin(const string& CmdLine);
	void AdminDebug(const string& CommandLine);
	void Admin(const string& CommandLine);
	bool CanRestartPlayer();
	void InvertLook();
	void UseAdvCamShake(bool bUse);
	void UseStanceToggle(bool bUse);
	void UseMouseRevision(bool bUse);
	void InvertMouse(const string& Invert);
	bool IsMouseInverted();
	void ClientNetworkMessage(const string& ParamA, const string& ParamB);
	void ClientCloseMenu(bool bCloseAll, bool bCancel);
	void ClientReplaceMenu(const string& Menu, bool bDisconnect, const string& Msg1, const string& Msg2);
	void ClientOpenMenu(const string& Menu, bool bDisconnect, const string& Msg1, const string& Msg2);
	void UnPressButtons();
	void ChangeAlwaysMouseLook(bool B);
	void ChangeStairLook(bool B);
	float AdjustRespawnTime();
	void StopPawnsAndControllers();
	void ClientFadeToColor();
	void ClientFadeToBlackWhite2();
	void ClientFadeToBlackWhite();
	void ClientOnEndIntervented();
	void ClientOnBeginIntervented();
	void ClientOnBeginRound();
	void ClientOnEndWaitingForStart();
	void ClientOnBeginWaitingForStart();
	void GotoDefaultState();
	void TryServerViewNextPlayer(bool cannotPickSelf, bool IsBack, int ViewStyle);
	bool IsSpecialMode_Grenade(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_Pistol(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_MG(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_SG(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_FlameThrower(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_TEST(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_Hold_Weapon(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_Knife(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_SR(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsSpecialMode_RPG(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType);
	bool IsPermitSpecialMode(bool bLimitInvenGroup, int InvenGroup, EeWeaponType QWeaponType, int KeyF);
	void ProcessSelectQuickSlot(int iIndex);
	void SelectQuickSlot(int iIndex);
	void ClientBecameActivePlayer();
	void BecomeActivePlayer();
	void ClientBecameSpectator();
	void BecomeSpectator();
	void ServerSpectate(bool cannotPickSelf);
	void LoadPlayers();
	void ServerViewSelf();
	void FindLostSpectators();
	void ServerViewNextPlayer(bool cannotPickSelf, bool IsPrevious, int ViewStyle);
	bool IsSpectating();
	void FixedVelocity(float DeltaTime);
	void FixedSprintState();
	void SetDodging(bool Enabled);
	bool DodgingIsEnabled();
	void ClearDoubleClick();
	void UpdateRotation(float DeltaTime, float maxPitch);
	void TurnAround();
	bool TurnTowardNearestEnemy();
	void SetViewValue();
	void ServerSetViewValue(int iShake, int iShock, int iBreath);
	void wViewBreath();
	void ServerSetwBreathRotation(int iBreath);
	void wViewShock(float fDeltaTime);
	void ServerSetwShockRotation(int iShock);
	void SetShakeState(EShakeState EShakeState);
	void wViewShake(float DeltaTime);
	struct FVector ReCalDecayVelocity();
	void wViewAttacked(float DeltaTime);
	float GetFovSpeed();
	void ServerSetwShakeRotation(int iShake);
	void ViewShake(float DeltaTime);
	void ServerSetShakeRotation(const struct FRotator& OrgShakeRot);
	void UpdateShakeRotComponent(float dt, bool bHigher, float* Max, int* current, float* Rate, float* Time);
	void CheckShake(float dt, bool bHigher, float* MaxOffset, float* offset, float* Rate, float* Time);
	int BlendRot(float DeltaTime, int BlendC, int NewC);
	void PlayerCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void DummyRotation(const struct FRotator& NewRotation);
	void CacheCalcView(class AActor* ViewActor, const struct FVector& CameraLocation, const struct FRotator& CameraRotation);
	struct FRotator GetViewRotation();
	void RemoveAllPostProcessEffects();
	void AdditionalPPEffectsOff();
	void SSAO(bool B);
	bool FadeToBlackWhite(float f_Fade_Time);
	bool FadeToColor(float f_Fade_Time);
	void PPEffectOff(const FName& PP_EffectClass);
	void PPEffectOn(const FName& PP_EffectClass);
	void CP(class UClass* PP_EffectClass);
	void CreatePostProcessEffect(class UClass* PP_EffectClass);
	void RemovePostProcessEffect(class UPostProcessEffect* PP_ExEffect);
	void AddPostProcessEffect(class UPostProcessEffect* PP_NewEffect, bool PP_RemoveExisting);
	void RemoveAllCameraEffects();
	void CreateCameraEffect(class UClass* EffectClass);
	void RemoveCameraEffect(class UCameraEffect* ExEffect);
	void AddCameraEffect(class UCameraEffect* NewEffect, bool RemoveExisting);
	void RotateByAttacked(struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void CalcFirstPersonView(struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void CalcBehindView(float dist, bool bDiedSelf, const struct FRotator& killerRot, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void AdjustView(float DeltaTime);
	bool NotifyLanded(const struct FVector& HitNormal);
	struct FRotator AdjustAim(const struct FFireProperties& FiredAmmunition, const struct FVector& projStart, int AimError);
	void TestMeleeAttackMode(bool bMelee);
	void SetAimMode(bool bAim);
	void ServerToggleAimMode(bool bToggle);
	void ClientToggleAimMode(bool bToggle);
	void PlayerMove(float DeltaTime);
	bool IsBehindView();
	void SendPingInGame(float DeltaTime);
	void ServerSetDClickMove();
	void DoPosture_CHINA();
	void DoPosture_KR();
	void DoPosture();
	void TickInput(float DeltaTime);
	void CheckPerformence(float DeltaTime);
	void PlayerTick(float DeltaTime);
	void TravelPostAccept();
	void ChangedWeapon();
	void ServerToggleBehindView();
	void ToggleBehindView();
	void BehindView(bool B);
	void ClientReStart(class APawn* NewPawn);
	void EnterStartState();
	void Restart();
	void SetProgressTime(float t);
	void SetProgressMessage(int Index, const string& S, const struct FColor& C);
	void ClearProgressMessages();
	void ProgressCommand(const string& Cmd, const string& Msg1, const string& Msg2);
	void SwitchLevel(const string& URL);
	void ServerChangeTeam3(int N);
	void ServerChangeTeam(int N);
	void ChangeTeam(int N);
	void SwitchTeam3();
	void SwitchTeam();
	void ChangeName(const string& S);
	void ChangeVoiceType(const string& NewVoiceType);
	void SetVoice(const string& S);
	void SetName(const string& S);
	void Suicide();
	bool ServerUse();
	void Use();
	void AltFire(float f);
	void Fire(float f);
	void ActivateItem();
	void PrevItem();
	bool IsSpecialGrenade(class AwWeapon* kWeapon);
	bool IsFragGrenade(class AwWeapon* kWeapon);
	class AwWeapon* GetWeaponByWeaponType(byte nWeaponType, class AInventory* SkipWeapon);
	class AwWeapon* GetWeaponByInventoryGroup(byte f, class AInventory* SkipWeapon);
	class AwWeapon* GetWeaponByID(int iWeaponID, class AInventory* SkipWeapon);
	void GetWeapon(class UClass* NewWeaponClass);
	void ThrowsTheWeapon();
	void SwitchWeapon(byte f, bool bQuickGr);
	void PipedSwitchWeapon(byte f);
	void NextWeapon();
	void PrevWeapon();
	void ServerThrowWeapon();
	void ThrowWeapon();
	void ActivateInventoryItem(class UClass* InvItem);
	void ShowMidGameMenu(bool bPause);
	void ShowMenu();
	void ServerPause();
	void Pause();
	bool SetPause(bool bPause);
	void QuickLoad();
	void QuickSave();
	void LocalTravel(const string& URL);
	void RestartLevel();
	void ServerSpeech(const FName& Type, int Index, const string& Callsign);
	void Speech(const FName& Type, int Index, const string& Callsign);
	void DoProneBtn(byte byDown);
	void DoDuckBtn(byte byDown);
	void DoDuckBtn_New(byte byDown);
	void DoProne();
	void DoDuck();
	void Jump(float f);
	void Typing(bool bTyping);
	void damageAttitudeTo(class APawn* Other, float Damage);
	void ShakeViewEvent(const struct FVector& shRotMag, const struct FVector& shRotRate, float shRotTime, const struct FVector& shOffsetMag, const struct FVector& shOffsetRate, float shOffsetTime);
	void SetAmbientShake(float FalloffStartTime, float FalloffTime, const struct FVector& OffsetMag, float OffsetFreq, const struct FRotator& RotMag, float RotFreq);
	void StopViewShaking();
	void wShakeView(int iPitch, int iYaw, float fSpeed, float fDecel, float fStayTime, float fDecay, float fDecayFastTime);
	void wShockView(float fForce);
	void wBreathView(const struct FRotator& rBreath);
	void ShakeView(const struct FVector& shRotMag, const struct FVector& shRotRate, float shRotTime, const struct FVector& shOffsetMag, const struct FVector& shOffsetRate, float shOffsetTime);
	void ClientDamageShake(int Damage);
	void CientSetHitSprintDelay();
	void DamageShake(int Damage);
	void ClientAdjustGlow(float Scale, const struct FVector& fog);
	void ClientFlash(float Scale, const struct FVector& fog);
	void SetFlashScaling(float f);
	void SetFOVAngle(float NewFOV);
	void ServerRestartGame();
	void CallServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPendingJumpStatus, bool NewbJumpStatus, bool NewbDoubleJump, EDoubleClickDir DoubleClickMove, byte ClientRoll, int View, byte OldTimeDelta, int OldAccel);
	void ReplicateMove(float DeltaTime, const struct FVector& NewAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot);
	int CompressAccel(int C);
	class ASavedMove* GetFreeMove();
	void ClientUpdatePosition();
	void ServerUpdatePing(int NewPing);
	void LongClientAdjustPosition(float TimeStamp, const FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ);
	void ClientAdjustPosition(float TimeStamp, const FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase);
	void ShortClientAdjustPosition(float TimeStamp, const FName& NewState, EPhysics newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void VeryShortClientAdjustPosition(float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase);
	void MoveAutonomous(float DeltaTime, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPressedJump, bool NewbDoubleJump, EDoubleClickDir DoubleClickMove, const struct FVector& NewAccel, const struct FRotator& DeltaRot);
	void ProcessMove(float DeltaTime, const struct FVector& NewAccel, EDoubleClickDir DoubleClickMove, const struct FRotator& DeltaRot);
	void ProcessDrive(float InForward, float InStrafe, float InUp, bool InJump);
	void ServerDrive(float InForward, float InStrafe, float aUp, bool InJump, int View);
	void SendClientAdjustment();
	void ServerMoveScript(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, EDoubleClickDir DoubleClickMove, byte ClientRoll, int View, byte OldTimeDelta, int OldAccel);
	void ServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, EDoubleClickDir DoubleClickMove, byte ClientRoll, int View, byte OldTimeDelta, int OldAccel);
	void ServerMoveNative(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, EDoubleClickDir DoubleClickMove, byte ClientRoll, int View, byte OldTimeDelta, int OldAccel);
	void DualServerMove(float TimeStamp0, const struct FVector& InAccel0, byte PendingCompress, EDoubleClickDir DoubleClickMove0, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, EDoubleClickDir DoubleClickMove, byte ClientRoll, int View, byte OldTimeDelta, int OldAccel);
	void ShortServerMove(float TimeStamp, const struct FVector& ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, byte ClientRoll, int View);
	void DualTurretServerMove(float TimeStamp0, bool NewbDuck0, bool NewbProne0, byte ClientRoll0, int View0, float TimeStamp, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, byte ClientRoll, int View);
	void TurretServerMove(float TimeStamp, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, byte ClientRoll, int View);
	void DualSpaceFighterServerMove(float TimeStamp0, const struct FVector& InAccel0, bool NewbDuck0, bool NewbProne0, int ViewPitch0, int ViewYaw0, int ViewRoll0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll);
	void SpaceFighterServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll);
	void DualRocketServerMove(float TimeStamp0, const struct FVector& InAccel0, bool NewbDuck0, bool NewbProne0, byte ClientRoll0, int View0, float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, byte ClientRoll, int View);
	void RocketServerMove(float TimeStamp, const struct FVector& InAccel, const struct FVector& ClientLoc, bool NewbDuck, bool NewbProne, byte ClientRoll, int View);
	void ForceDeathUpdate();
	void ClientVoiceMessage(class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, const FName& MessageType, byte MessageID);
	void ClientSetBehindView(bool B);
	void ClientSetFixedCamera(bool B);
	void PreClientTravel();
	void ShowGun();
	bool IsDead();
	void SetWeaponHand(const string& S);
	void SetHand(int IntValue);
	void ServerSetHandedness(float Hand);
	void SetAutoTaunt(bool Value);
	void ServerSetAutoTaunt(bool Value);
	void ServerTeamSay(const string& Msg, const FName& Type);
	void TeamSay(const string& Msg, const FName& Type);
	void PopMessage(const string& Msg, bool sameTeamOnly);
	void ClientPopMessage(const string& UserName, const string& Msg);
	void ServerPopMessage(const string& Msg, bool sameTeamOnly);
	void ServerSay(const string& Msg, const FName& Type);
	void Say(const string& Msg, const FName& Type);
	bool AllowTextMessage(const string& Msg);
	void ForceReload();
	void SetMouseAccel(float f);
	void SetMouseSmoothing(int Mode);
	float GetSensitivityAim();
	float GetSensitivity();
	float GetSensitivityActive();
	void SetSensitivity(float f, bool bZooming);
	void ServerMutate(const string& MutateString);
	void Mutate(const string& MutateString);
	void FOV(float f);
	void SetAimDiff(const string& S);
	void ClientResetAim();
	void ResetFOV();
	void SetFOV(float NewFOV);
	void FixFOV();
	void EndZoom();
	void ZoomFOV(float fFOV, bool bInstant);
	void ClientSetInitialMusic(const string& NewSong, EMusicTransition NewTransition);
	void ClientSetMusic(const string& NewSong, EMusicTransition NewTransition);
	void Destroyed();
	void ClientQueueAnnouncement(const FName& ASoundName, byte AnnouncementLevel, EAPriority Priority, byte Switch);
	void ClientFmodPlaySoundLocal(const string& SoundName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, const struct FVector& soundLocation);
	bool ClientStopLoopSoundByActor(class AActor* Target);
	bool ClientStopAllSoundByActor(class AActor* Target);
	void FmodClientPlaySound(const string& SoundName, bool bVolumeControl, float inAtten, ESoundSlot Slot);
	void ClientChangeSlot6(class AwWeapon* W);
	void ClientChangeSlot5(class AwWeapon* W, bool bAddSkill);
	bool AllowVoiceMessage(const FName& MessageType);
	void QueueAnnouncement(const string& ASoundName, byte AnnouncementLevel, EAPriority Priority, byte Switch);
	class USound* CustomizeAnnouncer(class USound* AnnouncementSound);
	void PlayAnnouncement(class USound* ASound, byte AnnouncementLevel, bool bForce);
	void PlayRewardAnnouncement(const FName& AName, byte AnnouncementLevel, bool bForce, ESoundSlot Slot, bool isWomanVoice);
	void PlayStatusAnnouncement(const string& AName, byte AnnouncementLevel, bool bForce);
	void PrecacheAnnouncements();
	void PlayBeepSound();
	void TeamMessage(class APlayerReplicationInfo* PRI, const string& S, const FName& Type);
	bool AllowTextToSpeech(class APlayerReplicationInfo* PRI, const FName& Type);
	void ClientMessage(const string& S, const FName& Type);
	void ChatRoomMessage(int Result, int ChannelIndex, class APlayerReplicationInfo* RelatedPRI);
	void ReceiveMessage_QuestType3(class UClass* Message, int Switch, int iRDifficult, int iRMap);
	void ReceiveMessage_QuestType2(class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec);
	void ReceiveMessage_QuestType1(class UClass* Message, int Switch, int iRWeaponType, int iRweaponId);
	void ReceiveLocalizedMessageWithKillerInfo(class UClass* Message, class AController* Killer, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void RemoveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, int iReserve);
	void ReceiveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, int iReserve);
	void ReceiveLocalizedMessage2(class UClass* Message, int Switch, bool bOption_Push, int Reserved1, int Reserved2, const string& Reserved3);
	void EndFlash();
	void ViewFlash(float DeltaTime);
	float UpdateFlashComponent(float current, float Step, float Goal);
	void ClientStopForceFeedback(const string& EffectName);
	void StopForceFeedback(const string& EffectName);
	void ClientPlayForceFeedback(const string& EffectName);
	void ClientSetHUD(class UClass* newHUDClass, class UClass* newScoringClass, class UClass* newResultClass, class UClass* newResultBootyClass);
	void ClientUpdateFlagHolder(class APlayerReplicationInfo* PRI, int i);
	void PawnDied(class APawn* P);
	void ViewNextBot();
	void UnPossess();
	void ServerAcknowledgePossession(class APawn* P, float NewHand, bool bNewAutoTaunt);
	void AcknowledgePossession(class APawn* P);
	void Possess(class APawn* aPawn);
	int GetFacingDirection();
	void ClientLogPawns();
	void DoLogPawns();
	void EveryLogPawns();
	void LogPawns();
	void GivePawn(class APawn* NewPawn);
	void AskForPawn();
	void ClientGotoState(const FName& NewState, const FName& NewLabel);
	void InitInputSystem();
	void preB();
	void preA();
	void tests();
	void CleanOutSavedMoves();
	void ChatResetInput();
	void ScriptResetInput();
	void ClientReset();
	void Reset();
	void SpawnDefaultHUD();
	void ServerVerifyViewTarget();
	void ClientSetViewTargetZZ(class AActor* A);
	void ClientSetViewTarget_NATIVE(class AActor* A);
	void ClientSetViewTarget_S(class AActor* A);
	void ClientSetViewTarget_R(class AActor* A);
	void ClientSetViewTarget_Q(class AActor* A);
	void ClientSetViewTarget_P(class AActor* A);
	void ClientSetViewTarget_O(class AActor* A);
	void ClientSetViewTarget_N(class AActor* A);
	void ClientSetViewTarget_M(class AActor* A);
	void ClientSetViewTarget_L(class AActor* A);
	void ClientSetViewTarget_K(class AActor* A);
	void ClientSetViewTarget_J(class AActor* A);
	void ClientSetViewTarget_I(class AActor* A);
	void ClientSetViewTarget_H(class AActor* A);
	void ClientSetViewTarget_G(class AActor* A);
	void ClientSetViewTarget_F(class AActor* A);
	void ClientSetViewTarget_E(class AActor* A);
	void ClientSetViewTarget_D(class AActor* A);
	void ClientSetViewTarget_C(class AActor* A);
	void ClientSetViewTarget_B(class AActor* A);
	void ClientSetViewTarget_A(class AActor* A);
	void HandlePickup(class APickup* pick);
	void MakeAdmin();
	void AddCheats();
	void PendingStasis();
	void ClientCapBandwidth(int Cap);
	void ServerGivePawn();
	void ServerSpectateSpeed(float f);
	void ClientSetClassicView();
	void ClientSetWeaponViewShake(bool B);
	void SetSpectateSpeed(float f);
	void ss(const string& t);
	void ToggleScreenShotMode();
	void KillAllPawns(class UClass* aClass);
	void KillAll(class UClass* aClass);
	void StreamFinished(int StreamHandle, EStreamFinishReason Reason);
	class AActor* GetPathTo(class AActor* Dest);
	void ServerShortTimeout();
	void ResetTimeMarginNative();
	void ResetTimeMargin();
	void KickWarning();
	bool BeyondViewDistance(const struct FVector& OtherLocation, float CullDistance);
	void ClientEndChangeHost();
	void EndChangeHost();
	void SendAllUserGameStateDataToInterventionUser();
	void DestroyGameStateStorageSender();
	void CreateGameStateStorageSender();
	void PostBeginPlay();
	void ServerGetWeaponStats(class AwWeapon* W);
	void testRS();
	void GetWeaponStats();
	void NotifyEndLoading();
	void NotifyRecordException(int retCode);
	class UPlayerInput* GetPlayerInput();
	void ServerNotifyEndLoading();
	void LocalNotifyEndLoading();
	void ServerSetPrecached();
	void SetPrecached();
	void LocalSetPrecached();
	void ShowPathToActor(class AActor* A);
	FName GetStateStrName(const string& strName);
	void SetTimeOutInPlaying();
	void Cmd(const string& P1, const string& P2, const string& p3, const string& p4, const string& p5);
	void SaveParams();
	void SplitForInputWeapon(const string& Src, string[]* Parts);
	void FmodClientHearSound(class AActor* Actor, int id, const string& SoundName, const struct FVector& soundLocation, float Pitch, bool Attenuate, bool Loop);
	int FindStairRotation(float DeltaTime);
	void SendWebLog(int sectionID, int FailCode);
	void ResetKeySleepTime();
	float GetKeySleepTime();
	void CloseWeb(const string& C);
	void OpenWeb(const string& C, int X, int Y, int width, int Height);
	bool CheckSpeedHack(float DeltaTime);
	void ServerValidationResponse(const string& R);
	void ClientValidate(const string& C);
	string PasteFromClipboard();
	void CopyToClipboard(const string& Text);
	string GetDefaultURL(const string& Option);
	string GetURLProtocol();
	void ClientTravel(const string& URL, ETravelType TravelType, bool bItems);
	void SetViewTarget(class AActor* NewViewTarget);
	void ResetInput();
	void ResetKeyboard();
	class ALevelInfo* GetEntryLevel();
	string ConsoleCommand(const string& Command, bool bWriteToLog);
	string GetServerNetworkAddress();
	string GetPlayerNetworkAddress();
	string GetPlayerIDHash();
	void SetNetSpeed(int NewSpeed);
};


// Class Engine.AIController
// 0x0010 (0x0620 - 0x0610)
class AAIController : public AController
{
public:
	bool                                               bHunting;                                                 // 0x0610(0x0004)
	bool                                               bAdjustFromWalls;                                         // 0x0610(0x0004)
	bool                                               bPlannedJump;                                             // 0x0610(0x0004)
	class AAIScript*                                   MyScript;                                                 // 0x0614(0x0004)
	float                                              Skill;                                                    // 0x0618(0x0004)
	class UwNPCParam*                                  NPCParam;                                                 // 0x061C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AIController");
		return ptr;
	}


	void Startle(class AActor* A);
	bool PriorityObjective();
	void UnderLift(class AMover* M);
	void MoverFinished();
	void WaitForMover(class AMover* M);
	void PrepareForMove(class ANavigationPoint* Goal, class UReachSpec* Path);
	FName GetOrders();
	class AActor* GetOrderObject();
	void SetOrders(const FName& NewOrders, class AController* OrderGiver);
	void AdjustView(float DeltaTime);
	int GetFacingDirection();
	float AdjustDesireFor(class APickup* P);
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	bool TriggerScript(class AActor* Other, class APawn* EventInstigator);
	bool WeaponFireAgain(float RefireRate, bool bFinishedFire);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	float RateWeapon(class AwWeapon* W);
	void Reset();
	void PreBeginPlay();
	void WaitToSeeEnemy();
};


// Class Engine.Inventory
// 0x0074 (0x044C - 0x03D8)
class AInventory : public AActor
{
public:
	byte                                               InventoryGroup;                                           // 0x03D8(0x0001)
	byte                                               GroupOffset;                                              // 0x03D9(0x0001)
	byte                                               Padding00[0x2];                                           // 0x03DA(0x0002) MISSED OFFSET
	bool                                               bDisplayableInv;                                          // 0x03DC(0x0004)
	bool                                               bTossedOut;                                               // 0x03DC(0x0004)
	class UClass*                                      PickupClass;                                              // 0x03E0(0x0004) (NoImport)
	int                                                Charge;                                                   // 0x03E4(0x0004) (Edit, Net)
	struct FVector                                     PlayerViewOffset;                                         // 0x03E8(0x000C)
	struct FRotator                                    PlayerViewPivot;                                          // 0x03F4(0x000C) (Edit)
	bool                                               bDrawingFirstPerson;                                      // 0x0400(0x0004) (Edit)
	float                                              BobDamping;                                               // 0x0404(0x0004) (Edit)
	class AActor*                                      ThirdPersonActor;                                         // 0x0408(0x0004) (Net)
	class UClass*                                      AttachmentClass;                                          // 0x040C(0x0004) (NoImport)
	class UMaterial*                                   IconMaterial;                                             // 0x0410(0x0004) (Edit)
	struct FIntBox                                     IconCoords;                                               // 0x0414(0x0010) (Edit)
	string                                             ItemName;                                                 // 0x0424(0x000C) (Edit, Localized, NeedCtorLink, NoImport)
	string                                             InventoryClassName;                                       // 0x0430(0x000C) (NeedCtorLink)
	int                                                InventoryClassNumber;                                     // 0x043C(0x0004) (Net)
	struct FBtrDouble                                  InventoryUniqueNumber;                                    // 0x0440(0x0008) (Net)
	int                                                InventoryClassAddPartsID;                                 // 0x0448(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Inventory");
		return ptr;
	}


	string STATIC_StaticItemName();
	void SetOwnerDisplay();
	void OwnerEvent(const FName& EventName);
	class AArmor* PrioritizeArmor(int Damage, class UClass* DamageType, const struct FVector& HitLocation);
	class AwWeapon* NextWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon);
	class AwWeapon* PrevWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon);
	class AwWeapon* WeaponChangeWID(int iWeaponID);
	class AwWeapon* WeaponChangeWClass(const FName& wClass);
	class AwWeapon* WeaponChange(byte f, bool bSilent);
	void Use(float Value);
	void DropFrom(const struct FVector& StartLocation, const struct FRotator& StartRotation);
	class APowerups* SelectNext();
	bool HandlePickupQuery(class APickup* Item);
	void GiveTo(class APawn* Other, class APickup* Pickup);
	void Destroyed();
	void TravelPostAccept();
	void TravelPreAccept();
	class AwWeapon* RecommendWeapon(float* rating);
	void PickupFunction(class APawn* Other);
	string GetHumanReadableName();
	void RenderOverlays(class UCanvas* Canvas);
	void DetachFromPawn(class APawn* P);
	void updaterelative(int Pitch, int Yaw, int Roll);
	void AttachToPawn(class APawn* P);
};


// Class Engine.wAmmunition
// 0x0030 (0x047C - 0x044C)
class AwAmmunition : public AInventory
{
public:
	int                                                MaxAmmo;                                                  // 0x044C(0x0004)
	int                                                AmmoAmount;                                               // 0x0450(0x0004) (Net)
	int                                                InitialAmount;                                            // 0x0454(0x0004)
	int                                                PickupAmmo;                                               // 0x0458(0x0004)
	bool                                               bRecommendSplashDamage;                                   // 0x045C(0x0004)
	bool                                               bTossed;                                                  // 0x045C(0x0004)
	bool                                               bTrySplash;                                               // 0x045C(0x0004)
	bool                                               bLeadTarget;                                              // 0x045C(0x0004)
	bool                                               bInstantHit;                                              // 0x045C(0x0004)
	bool                                               bSplashDamage;                                            // 0x045C(0x0004)
	bool                                               bTryHeadShot;                                             // 0x045C(0x0004)
	class UClass*                                      ProjectileClass;                                          // 0x0460(0x0004)
	class UClass*                                      MyDamageType;                                             // 0x0464(0x0004)
	float                                              WarnTargetPct;                                            // 0x0468(0x0004)
	float                                              RefireRate;                                               // 0x046C(0x0004)
	class USound*                                      FireSound;                                                // 0x0470(0x0004)
	float                                              MaxRange;                                                 // 0x0474(0x0004)
	class UMaterial*                                   IconFlashMaterial;                                        // 0x0478(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAmmunition");
		return ptr;
	}


	bool AddAmmo(int AmmoToAdd);
	bool HandlePickupQuery(class APickup* Item);
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	bool HasAmmo();
	bool UseAmmo(int AmountNeeded, bool bAmountNeededIsMax);
	void CheckOutOfAmmo();
};


// Class Engine.Powerups
// 0x001C (0x0468 - 0x044C)
class APowerups : public AInventory
{
public:
	int                                                NumCopies;                                                // 0x044C(0x0004) (Net)
	bool                                               bCanHaveMultipleCopies;                                   // 0x0450(0x0004) (Edit)
	bool                                               bAutoActivate;                                            // 0x0450(0x0004) (Edit)
	bool                                               bActivatable;                                             // 0x0450(0x0004) (Edit, Net)
	bool                                               bActive;                                                  // 0x0450(0x0004) (Net)
	string                                             ExpireMessage;                                            // 0x0454(0x000C) (Edit, Localized, NeedCtorLink)
	class USound*                                      ActivateSound;                                            // 0x0460(0x0004) (Edit)
	class USound*                                      DeActivateSound;                                          // 0x0464(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Powerups");
		return ptr;
	}


	string STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2);
	void UsedUp();
	void FireEffect();
	float UseCharge(float Amount);
	bool HandlePickupQuery(class APickup* Item);
	void Activate();
	class APowerups* SelectNext();
	void PickupFunction(class APawn* Other);
	void TravelPreAccept();
};


// Class Engine.Pickup
// 0x0064 (0x043C - 0x03D8)
class APickup : public AActor
{
public:
	float                                              MaxDesireability;                                         // 0x03D8(0x0004)
	class AInventorySpot*                              myMarker;                                                 // 0x03DC(0x0004)
	class ANavigationPoint*                            PickupCache;                                              // 0x03E0(0x0004)
	class UClass*                                      InventoryType;                                            // 0x03E4(0x0004) (Edit)
	bool                                               bInstantRespawn;                                          // 0x03E8(0x0004) (Edit)
	bool                                               bOnlyReplicateHidden;                                     // 0x03E8(0x0004)
	bool                                               bAmbientGlow;                                             // 0x03E8(0x0004) (Edit)
	bool                                               bDropped;                                                 // 0x03E8(0x0004)
	bool                                               bPredictRespawns;                                         // 0x03E8(0x0004)
	float                                              RespawnTime;                                              // 0x03EC(0x0004) (Edit)
	float                                              RespawnEffectTime;                                        // 0x03F0(0x0004)
	string                                             PickupMessage;                                            // 0x03F4(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             PickupSound;                                              // 0x0400(0x000C) (Edit, NeedCtorLink)
	string                                             PickupForce;                                              // 0x040C(0x000C) (Edit, NeedCtorLink)
	class AwPickUpBase*                                PickUpBase;                                               // 0x0418(0x0004) (Edit)
	class AController*                                 TeamOwner[0x4];                                           // 0x041C(0x0004)
	bool                                               bPostLandingCollision;                                    // 0x042C(0x0004) (Edit)
	float                                              PostLandingCollisionRadius;                               // 0x0430(0x0004) (Edit)
	float                                              PostLandingCollisionHeight;                               // 0x0434(0x0004) (Edit)
	float                                              CollisionHeightBuffer;                                    // 0x0438(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Pickup");
		return ptr;
	}


	float GetRespawnTime();
	void Landed(const struct FVector& HitNormal);
	bool ReadyToPickup(float MaxWait);
	void InitDroppedPack();
	void InitDroppedPickupFor(class AInventory* Inv);
	string STATIC_GetLocalString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2);
	void SetRespawn();
	void AnnouncePickup(class APawn* Receiver);
	void StartSleeping();
	class AInventory* SpawnCopy(class APawn* Other);
	float BotDesireability(class APawn* Bot);
	float DetourWeight(class APawn* Other, float PathWeight);
	class APickup* Transmogrify(class UClass* NewClass);
	void RespawnEffect();
	void Reset();
	void STATIC_UpdateHUD(class AHUD* H);
	bool IsSuperItem();
	string GetHumanReadableName();
	void Destroyed();
	void STATIC_StaticPrecache(class ALevelInfo* L);
	void RemoveFromNavigation();
	void AddToNavigation();
};


// Class Engine.wWeaponPickup
// 0x003C (0x0478 - 0x043C)
class AwWeaponPickup : public APickup
{
public:
	bool                                               bWeaponStay;                                              // 0x043C(0x0004)
	bool                                               bThrown;                                                  // 0x043C(0x0004) (Edit)
	bool                                               bSleeping;                                                // 0x043C(0x0004) (Net)
	int                                                AmmoAmount[0x2];                                          // 0x0440(0x0004) (Edit, Net)
	int                                                AmmoAmount_Loaded;                                        // 0x0448(0x0004) (Edit, Net)
	int                                                iLocalWeaponID;                                           // 0x044C(0x0004)
	int                                                iLocalAddPartsID;                                         // 0x0450(0x0004)
	int                                                iRepWeaponID;                                             // 0x0454(0x0004) (Net)
	int                                                iRepAddPartsID;                                           // 0x0458(0x0004) (Net)
	int                                                iPainting_Item_ID;                                        // 0x045C(0x0004) (Net)
	class UwWeaponBaseParams*                          BaseParams;                                               // 0x0460(0x0004)
	class UClass*                                      ResParams;                                                // 0x0464(0x0004)
	class APawn*[]                                     TouchingPawns;                                            // 0x0468(0x000C) (NeedCtorLink)
	bool                                               bUsed;                                                    // 0x0474(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponPickup");
		return ptr;
	}


	void Tick(float dt);
	void InitDroppedPickupFor(class AInventory* Inv);
	void UnTouch(class AActor* Other);
	bool CheckIsTouchingPawn(class APawn* P);
	class APawn* AddTouchingPawn(class APawn* P);
	void Destroyed();
	void PickWeapon(class AActor* Other);
	bool ValidTouch(class AActor* Other);
	void SetSkin(int iWeaponID, int iAddPartsID);
	void wLoadOut(int iID, int iAddPartsID);
	void Reset();
	float GetRespawnTime();
	float BotDesireability(class APawn* Bot);
	float DetourWeight(class APawn* Other, float PathWeight);
	void ForceBegin();
	bool AllowRepeatPickup();
	void StartSleeping();
	void STATIC_UpdateHUD(class AHUD* H);
	void SetWeaponStay();
	void PostNetBeginPlay();
	void PostBeginPlay();
};


// Class Engine.Ammo
// 0x0004 (0x0440 - 0x043C)
class AAmmo : public APickup
{
public:
	int                                                AmmoAmount;                                               // 0x043C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Ammo");
		return ptr;
	}


	class AInventory* SpawnCopy(class APawn* Other);
	float BotDesireability(class APawn* Bot);
	float DetourWeight(class APawn* Other, float PathWeight);
	void STATIC_UpdateHUD(class AHUD* H);
};


// Class Engine.LogEntry
// 0x001C (0x0048 - 0x002C)
class ULogEntry : public UObject
{
public:
	string                                             DateTime;                                                 // 0x002C(0x000C) (Edit, Config, NeedCtorLink)
	string                                             Entry;                                                    // 0x0038(0x000C) (Edit, Config, NeedCtorLink)
	class ULogEntry*                                   Next;                                                     // 0x0044(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LogEntry");
		return ptr;
	}


	int Count();
	class ULogEntry* Delete(class ULogEntry* delLE);
	void Insert(class ULogEntry* newLE);
};


// Class Engine.LevelSummary
// 0x005C (0x0088 - 0x002C)
class ULevelSummary : public UObject
{
public:
	string                                             Title;                                                    // 0x002C(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             Description;                                              // 0x0038(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             LevelEnterText;                                           // 0x0044(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             Author;                                                   // 0x0050(0x000C) (Edit, NeedCtorLink)
	string                                             DecoTextName;                                             // 0x005C(0x000C) (Edit, NeedCtorLink)
	int                                                IdealPlayerCountMin;                                      // 0x0068(0x0004) (Edit)
	int                                                IdealPlayerCountMax;                                      // 0x006C(0x0004) (Edit)
	bool                                               HideFromMenus;                                            // 0x0070(0x0004) (Edit)
	int                                                SinglePlayerTeamSize;                                     // 0x0074(0x0004) (Edit)
	class UMaterial*                                   Screenshot;                                               // 0x0078(0x0004) (Edit)
	string                                             ExtraInfo;                                                // 0x007C(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelSummary");
		return ptr;
	}

};


// Class Engine.GameReplicationInfo
// 0x0180 (0x05AC - 0x042C)
class AGameReplicationInfo : public AReplicationInfo
{
public:
	string                                             GameName;                                                 // 0x042C(0x000C) (Net, NeedCtorLink)
	string                                             GameClass;                                                // 0x0438(0x000C) (Net, NeedCtorLink)
	bool                                               bFastWeaponSwitching;                                     // 0x0444(0x0004) (Net)
	bool                                               bNoTeamChanges;                                           // 0x0444(0x0004) (Net)
	bool                                               bTeamGame;                                                // 0x0444(0x0004) (Net)
	bool                                               bStopCountDown;                                           // 0x0444(0x0004) (Net)
	bool                                               bMatchHasBegun;                                           // 0x0444(0x0004) (Net)
	bool                                               bTeamSymbolsUpdated;                                      // 0x0444(0x0004)
	bool                                               bNoTeamSkins;                                             // 0x0444(0x0004) (Net)
	bool                                               bForceTeamSkins;                                          // 0x0444(0x0004) (Net)
	bool                                               bForceNoPlayerLights;                                     // 0x0444(0x0004) (Net)
	bool                                               bAllowPlayerLights;                                       // 0x0444(0x0004) (Net)
	float                                              RespawnTime;                                              // 0x0448(0x0004) (Net)
	int                                                RemainingTime;                                            // 0x044C(0x0004) (Net)
	int                                                ElapsedTime;                                              // 0x0450(0x0004) (Net)
	int                                                RemainingMinute;                                          // 0x0454(0x0004) (Net)
	int                                                PostElapsedTime;                                          // 0x0458(0x0004) (Net)
	int                                                PostElapsedTimeClient;                                    // 0x045C(0x0004)
	int                                                PostRemaiingTime;                                         // 0x0460(0x0004) (Net)
	int                                                PostRemaiingTimeClient;                                   // 0x0464(0x0004)
	float                                              SecondCount;                                              // 0x0468(0x0004)
	int                                                GoalScore;                                                // 0x046C(0x0004) (Net)
	int                                                TimeLimit;                                                // 0x0470(0x0004) (Net)
	int                                                MaxLives;                                                 // 0x0474(0x0004) (Net)
	int                                                MinNetPlayers;                                            // 0x0478(0x0004) (Net)
	float                                              WeaponBerserk;                                            // 0x047C(0x0004) (Net)
	bool                                               bStartedMatch;                                            // 0x0480(0x0004) (Net)
	bool                                               bMatchOver;                                               // 0x0480(0x0004) (Net)
	bool                                               WaitingForStart;                                          // 0x0480(0x0004) (Net)
	int                                                WaitingForStartCountDown;                                 // 0x0484(0x0004) (Net)
	class ATeamInfo*                                   Teams[0x3];                                               // 0x0488(0x0004) (Net)
	string                                             ServerName;                                               // 0x0494(0x000C) (Edit, NeedCtorLink)
	string                                             ShortName;                                                // 0x04A0(0x000C) (Edit, NeedCtorLink)
	string                                             AdminName;                                                // 0x04AC(0x000C) (Edit, NeedCtorLink)
	string                                             AdminEmail;                                               // 0x04B8(0x000C) (Edit, NeedCtorLink)
	int                                                ServerRegion;                                             // 0x04C4(0x0004) (Edit)
	string                                             MessageOfTheDay;                                          // 0x04C8(0x000C) (Edit, NeedCtorLink)
	string                                             MOTDLine1;                                                // 0x04D4(0x000C) (Edit, NeedCtorLink, Deprecated)
	string                                             MOTDLine2;                                                // 0x04E0(0x000C) (Edit, NeedCtorLink, Deprecated)
	string                                             MOTDLine3;                                                // 0x04EC(0x000C) (Edit, NeedCtorLink, Deprecated)
	string                                             MOTDLine4;                                                // 0x04F8(0x000C) (Edit, NeedCtorLink, Deprecated)
	class AActor*                                      Winner;                                                   // 0x0504(0x0004) (Net)
	class AVoiceChatReplicationInfo*                   VoiceReplicationInfo;                                     // 0x0508(0x0004) (Net)
	class APlayerReplicationInfo*[]                    PRIArray;                                                 // 0x050C(0x000C) (Edit, NeedCtorLink)
	string                                             GRIPropsDisplayText[0x4];                                 // 0x0518(0x000C) (Localized, NeedCtorLink)
	string                                             GRIPropDescText[0x4];                                     // 0x0548(0x000C) (Localized, NeedCtorLink)
	struct FVector                                     FlagPos;                                                  // 0x0578(0x000C) (Net)
	EFlagState                                         FlagState[0x2];                                           // 0x0584(0x0001) (Net)
	byte                                               Padding00[0x2];                                           // 0x0586(0x0002) MISSED OFFSET
	class APlayerReplicationInfo*                      FlagHolder[0x2];                                          // 0x0588(0x0004)
	class APlayerReplicationInfo*                      FlagTarget;                                               // 0x0590(0x0004) (Net)
	int                                                MatchID;                                                  // 0x0594(0x0004) (Net)
	int                                                BotDifficulty;                                            // 0x0598(0x0004) (Net)
	EROUND_STATE                                       RoundState;                                               // 0x059C(0x0001) (Net)
	byte                                               Padding01[0x3];                                           // 0x059D(0x0003) MISSED OFFSET
	bool                                               bObjectivePlanted;                                        // 0x05A0(0x0004) (Net)
	bool                                               bMultiBomb;                                               // 0x05A0(0x0004) (Net)
	int                                                MaxPlayersDuringGame;                                     // 0x05A4(0x0004) (Net)
	int                                                CurrentAttackingTeam;                                     // 0x05A8(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameReplicationInfo");
		return ptr;
	}


	int GetCurAlienModeWaitingTimeCount();
	byte GetCurTeamMemberCount(int TeamIndex);
	int GetMaxRound();
	int GetCurRound();
	void SetMaxLives(int iMaxLives);
	int GetMaxLives();
	bool IsGhostChatting(class AActor* Sender);
	bool IsDefender(byte Team);
	void SyncRemainingTime();
	string STATIC_GetDescriptionText(const string& PropName);
	void STATIC_FillPlayInfo(class UPlayInfo* PlayInfo);
	void GetPRIArray(class APlayerReplicationInfo*[]* pris);
	void RemovePRI(class APlayerReplicationInfo* PRI);
	void AddPRI(class APlayerReplicationInfo* PRI);
	void ForcedRemovePRI(class APlayerReplicationInfo* PRI);
	void ForcedAddPRI(class APlayerReplicationInfo* PRI);
	class APlayerReplicationInfo* FindPlayerByID(int PlayerID);
	int GetWinTeamIndex();
	int[] GetTeamScores();
	int GetRemainingTime();
	void PlayTimerSound();
	void Timer();
	void Reset();
	void PostBeginPlay();
	void EventForceBegin();
	void UpdatePrecacheMaterials();
	void TeamSymbolNotify();
	void PostNetBeginPlay();
};


// Class Engine.InternetInfo
// 0x0000 (0x042C - 0x042C)
class AInternetInfo : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InternetInfo");
		return ptr;
	}


	string GetBeaconText(int i);
	string GetBeaconAddress(int i);
	int GetBeaconCount();
};


// Class Engine.LinkedReplicationInfo
// 0x0004 (0x0430 - 0x042C)
class ALinkedReplicationInfo : public AReplicationInfo
{
public:
	class ALinkedReplicationInfo*                      NextReplicationInfo;                                      // 0x042C(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LinkedReplicationInfo");
		return ptr;
	}

};


// Class Engine.PlayerReplicationInfo
// 0x01A4 (0x05D0 - 0x042C)
class APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                                    // 0x042C(0x0004) (Net)
	float                                              fExp;                                                     // 0x0430(0x0004) (Net)
	float                                              Point;                                                    // 0x0434(0x0004) (Net)
	float                                              PointIns;                                                 // 0x0438(0x0004) (Net)
	int                                                aiBodyItemID[0x2];                                        // 0x043C(0x0004) (Net)
	int                                                iHeadItemID;                                              // 0x0444(0x0004) (Net)
	int                                                iHelmetItemID;                                            // 0x0448(0x0004) (Net)
	int                                                iAccessoryItemID;                                         // 0x044C(0x0004) (Net)
	int                                                iBackPackItemID;                                          // 0x0450(0x0004) (Net)
	int                                                iPouchItemID;                                             // 0x0454(0x0004) (Net)
	int                                                iCamouflageItemID;                                        // 0x0458(0x0004) (Net)
	bool                                               bPickupWeaponDOA;                                         // 0x045C(0x0004)
	bool                                               bCanSeeEnemiesOnMinimap;                                  // 0x045C(0x0004) (Net)
	float                                              Deaths;                                                   // 0x0460(0x0004) (Net)
	class ADecoration*                                 HasFlag;                                                  // 0x0464(0x0004) (Net)
	int                                                Ping;                                                     // 0x0468(0x0004) (Net)
	class AVolume*                                     PlayerVolume;                                             // 0x046C(0x0004) (Net)
	class AZoneInfo*                                   PlayerZone;                                               // 0x0470(0x0004) (Net)
	int                                                NumLives;                                                 // 0x0474(0x0004) (Net)
	bool                                               bCannotChangeQS;                                          // 0x0478(0x0004) (Net)
	string                                             PlayerName;                                               // 0x047C(0x000C) (Net, NeedCtorLink)
	string                                             CharacterName;                                            // 0x0488(0x000C) (Net, NeedCtorLink)
	string                                             OldCharacterName;                                         // 0x0494(0x000C) (NeedCtorLink)
	string                                             OldName;                                                  // 0x04A0(0x000C) (NeedCtorLink)
	string                                             PreviousName;                                             // 0x04AC(0x000C) (NeedCtorLink)
	int                                                PlayerID;                                                 // 0x04B8(0x0004) (Net)
	int                                                NPCID;                                                    // 0x04BC(0x0004) (Net)
	int                                                UID;                                                      // 0x04C0(0x0004)
	class ATeamInfo*                                   Team;                                                     // 0x04C4(0x0004) (Net)
	int                                                TeamID;                                                   // 0x04C8(0x0004) (Net)
	int                                                SideID;                                                   // 0x04CC(0x0004) (Net)
	bool                                               bNoTeam;                                                  // 0x04D0(0x0004) (Net)
	bool                                               bWelcomed;                                                // 0x04D0(0x0004)
	bool                                               bReceivedPing;                                            // 0x04D0(0x0004)
	bool                                               bTeamNotified;                                            // 0x04D0(0x0004)
	bool                                               bAdmin;                                                   // 0x04D0(0x0004) (Net)
	bool                                               bIsFemale;                                                // 0x04D0(0x0004) (Net)
	bool                                               bIsSpectator;                                             // 0x04D0(0x0004) (Net)
	bool                                               bOnlySpectator;                                           // 0x04D0(0x0004) (Net)
	bool                                               bWaitingPlayer;                                           // 0x04D0(0x0004) (Net)
	bool                                               bReadyToPlay;                                             // 0x04D0(0x0004) (Net)
	bool                                               bOutOfLives;                                              // 0x04D0(0x0004) (Net)
	bool                                               bBot;                                                     // 0x04D0(0x0004) (Net)
	byte                                               PacketLoss;                                               // 0x04D4(0x0001) (Net)
	byte                                               Padding00[0x3];                                           // 0x04D5(0x0003) MISSED OFFSET
	bool                                               IsDead;                                                   // 0x04D8(0x0004) (Net)
	int                                                StartTime;                                                // 0x04DC(0x0004) (Net)
	string                                             StringDead;                                               // 0x04E0(0x000C) (Localized, NeedCtorLink)
	string                                             StringSpectating;                                         // 0x04EC(0x000C) (Localized, NeedCtorLink)
	string                                             StringUnknown;                                            // 0x04F8(0x000C) (Localized, NeedCtorLink)
	int                                                GoalsScored;                                              // 0x0504(0x0004)
	int                                                Kills;                                                    // 0x0508(0x0004) (Net)
	int                                                Assists;                                                  // 0x050C(0x0004) (Net)
	byte                                               AssistType;                                               // 0x0510(0x0001)
	byte                                               Padding01[0x3];                                           // 0x0511(0x0003) MISSED OFFSET
	class AVehicle*                                    CurrentVehicle;                                           // 0x0514(0x0004)
	class ALinkedReplicationInfo*                      CustomReplicationInfo;                                    // 0x0518(0x0004) (Net)
	class AVoiceChatReplicationInfo*                   VoiceInfo;                                                // 0x051C(0x0004)
	bool                                               bRegisteredChatRoom;                                      // 0x0520(0x0004)
	class AVoiceChatRoom*                              PrivateChatRoom;                                          // 0x0524(0x0004)
	int                                                ActiveChannel;                                            // 0x0528(0x0004) (Net)
	int                                                VoiceMemberMask;                                          // 0x052C(0x0004) (Net)
	byte                                               VoiceID;                                                  // 0x0530(0x0001) (Net)
	byte                                               Padding02[0x3];                                           // 0x0531(0x0003) MISSED OFFSET
	float                                              UAVScanBeginTime;                                         // 0x0534(0x0004) (Net)
	float                                              UAVScanEndTime;                                           // 0x0538(0x0004) (Net)
	byte                                               abySupplyItemFlag[0x5];                                   // 0x053C(0x0001) (Net)
	byte                                               Padding03[0x3];                                           // 0x0541(0x0003) MISSED OFFSET
	bool                                               EndPCBang;                                                // 0x0544(0x0004)
	class UMaterial*                                   ClassMark;                                                // 0x0548(0x0004)
	int                                                ClassLevel;                                               // 0x054C(0x0004) (Net)
	int                                                ClassLevelMark;                                           // 0x0550(0x0004) (Net)
	struct FFloatBox                                   ClassMarkBox;                                             // 0x0554(0x0010)
	class UMaterial*                                   ClanMark;                                                 // 0x0564(0x0004)
	int                                                ClanID;                                                   // 0x0568(0x0004) (Net)
	struct FIntBox                                     ClanMarkBox;                                              // 0x056C(0x0010)
	int                                                iCurrentWeaponID;                                         // 0x057C(0x0004) (Net)
	int                                                NumMedals;                                                // 0x0580(0x0004) (Net)
	bool                                               IsIntervented;                                            // 0x0584(0x0004) (Net)
	int                                                ElapsedTimeWhenIntervented;                               // 0x0588(0x0004) (Net)
	int                                                TimePlayed;                                               // 0x058C(0x0004)
	int                                                RoundWhenIntervented;                                     // 0x0590(0x0004) (Net)
	int                                                RoundPlayed;                                              // 0x0594(0x0004)
	bool                                               bPrecached;                                               // 0x0598(0x0004) (Net)
	int                                                KillSuccession;                                           // 0x059C(0x0004) (Net)
	float                                              fSpawnedTime;                                             // 0x05A0(0x0004) (Net)
	string                                             PopMessage;                                               // 0x05A4(0x000C) (NeedCtorLink)
	float                                              PopMessageEnd;                                            // 0x05B0(0x0004)
	bool                                               IsSendGameStartTime;                                      // 0x05B4(0x0004)
	bool                                               IsSendRoundStartTime;                                     // 0x05B4(0x0004)
	bool                                               IsInvulnerable;                                           // 0x05B4(0x0004) (Net)
	bool                                               IsCriticalState;                                          // 0x05B4(0x0004) (Net)
	int                                                nQuickSlotIdx;                                            // 0x05B8(0x0004) (Net)
	bool                                               IsConnected;                                              // 0x05BC(0x0004) (Net)
	bool                                               bAdminSpecator;                                           // 0x05BC(0x0004) (Net)
	int                                                IsFriendOrClanMember;                                     // 0x05C0(0x0004)
	bool                                               IsWaitingForStart;                                        // 0x05C4(0x0004) (Net)
	int                                                iWaitingForStartCountDown;                                // 0x05C8(0x0004) (Net)
	int                                                PlayerHealth;                                             // 0x05CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerReplicationInfo");
		return ptr;
	}


	int GetTeamIndex();
	int GetCheckFriendOrClanMember();
	void SetQuickSlotIdx(int nIdx);
	int GetUID();
	bool GetIsSendGameStartTime();
	void SetIsSendGameStartTime(bool bSend);
	string GetNameCallSign();
	string GetCallSign();
	void SetVoiceMemberMask(int NewMask);
	void SetChatPassword(const string& InPassword);
	void SetWaitingPlayer(bool B);
	void SetPlayerName(const string& S);
	void Timer();
	void ClientNameChange();
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void UpdatePlayerLocation();
	void UpdatePlayerState();
	void UpdateCharacter();
	class UMaterial* GetPortrait();
	string GetLocationName();
	string GetHumanReadableName();
	void Reset();
	void SetCharacterEquipItem(int iBodyID_AF, int iBodyID_RSA, int iHeadID, int iHelmetID, int iAccessoryID);
	void NewSetCharacterEquipItem(int iBodyID_AF, int iBodyID_RSA, int iHelmetID, int iAccessoryID, int iBackPackID, int iPouchID, int iCamouflageID);
	void SetCharacterName(const string& S);
	void SetCharacterVoice(const string& S);
	void LoadLevelMark();
	void ServerSetUAV(float Begin, float End);
	void Destroyed();
	void PostNetReceive();
	bool NeedNetNotify();
	void PostNetBeginPlay();
	void PostBeginPlay();
};


// Class Engine.LiftExit
// 0x0010 (0x04B0 - 0x04A0)
class ALiftExit : public ANavigationPoint
{
public:
	FName                                              LiftTag;                                                  // 0x04A0(0x0004) (Edit)
	class AMover*                                      MyLift;                                                   // 0x04A4(0x0004)
	byte                                               SuggestedKeyFrame;                                        // 0x04A8(0x0001) (Edit)
	byte                                               KeyFrame;                                                 // 0x04A9(0x0001)
	byte                                               Padding00[0x2];                                           // 0x04AA(0x0002) MISSED OFFSET
	bool                                               bLiftJumpExit;                                            // 0x04AC(0x0004) (Edit)
	bool                                               bNoDoubleJump;                                            // 0x04AC(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftExit");
		return ptr;
	}


	bool SuggestMovePreparation(class APawn* Other);
	bool CanBeReachedFromLiftBy(class APawn* Other);
	void PostBeginPlay();
};


// Class Engine.LiftCenter
// 0x0020 (0x04C0 - 0x04A0)
class ALiftCenter : public ANavigationPoint
{
public:
	FName                                              LiftTag;                                                  // 0x04A0(0x0004) (Edit)
	class AMover*                                      MyLift;                                                   // 0x04A4(0x0004)
	FName                                              LiftTrigger;                                              // 0x04A8(0x0004) (Edit)
	class ATrigger*                                    RecommendedTrigger;                                       // 0x04AC(0x0004)
	float                                              MaxDist2D;                                                // 0x04B0(0x0004)
	struct FVector                                     LiftOffset;                                               // 0x04B4(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LiftCenter");
		return ptr;
	}


	bool ProceedWithMove(class APawn* Other);
	bool SuggestMovePreparation(class APawn* Other);
	class AActor* SpecialHandling(class APawn* Other);
	void PostBeginPlay();
};


// Class Engine.SavedMove
// 0x0070 (0x049C - 0x042C)
class ASavedMove : public AInfo
{
public:
	class ASavedMove*                                  NextMove;                                                 // 0x042C(0x0004)
	float                                              TimeStamp;                                                // 0x0430(0x0004)
	float                                              Delta;                                                    // 0x0434(0x0004)
	bool                                               bRun;                                                     // 0x0438(0x0004)
	bool                                               bDuck;                                                    // 0x0438(0x0004)
	bool                                               bProne;                                                   // 0x0438(0x0004)
	bool                                               bPressedJump;                                             // 0x0438(0x0004)
	bool                                               bDoubleJump;                                              // 0x0438(0x0004)
	EDoubleClickDir                                    DoubleClickMove;                                          // 0x043C(0x0001)
	EPhysics                                           SavedPhysics;                                             // 0x043D(0x0001)
	byte                                               Padding00[0x2];                                           // 0x043E(0x0002) MISSED OFFSET
	struct FVector                                     StartLocation;                                            // 0x0440(0x000C)
	struct FVector                                     StartRelativeLocation;                                    // 0x044C(0x000C)
	struct FVector                                     StartVelocity;                                            // 0x0458(0x000C)
	struct FVector                                     StartFloor;                                               // 0x0464(0x000C)
	struct FVector                                     SavedLocation;                                            // 0x0470(0x000C)
	struct FVector                                     SavedVelocity;                                            // 0x047C(0x000C)
	struct FVector                                     SavedRelativeLocation;                                    // 0x0488(0x000C)
	class AActor*                                      StartBase;                                                // 0x0494(0x0004)
	class AActor*                                      EndBase;                                                  // 0x0498(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SavedMove");
		return ptr;
	}


	void SetMoveFor(class APlayerController* P, float DeltaTime, const struct FVector& NewAccel, EDoubleClickDir InDoubleClick);
	void SetInitialPosition(class APawn* P);
	struct FVector GetStartLocation();
	bool IsJumpMove();
	void PostUpdate(class APlayerController* P);
	void Clear();
};


// Class Engine.HUD
// 0x02F0 (0x06C8 - 0x03D8)
class AHUD : public AActor
{
public:
	class APlayerController*                           PlayerOwner;                                              // 0x03D8(0x0004) (Edit)
	class APawn*                                       PawnOwner;                                                // 0x03DC(0x0004) (Edit)
	class APlayerReplicationInfo*                      PawnOwnerPRI;                                             // 0x03E0(0x0004) (Edit)
	class UConsole*                                    PlayerConsole;                                            // 0x03E4(0x0004) (Edit)
	class AScoreBoard*                                 ScoreBoard;                                               // 0x03E8(0x0004) (Edit)
	class AScoreBoard*                                 ResultBoard;                                              // 0x03EC(0x0004) (Edit)
	class AScoreBoard*                                 ResultBoardBooty;                                         // 0x03F0(0x0004) (Edit)
	class AScoreBoard*                                 LocalStatsScreen;                                         // 0x03F4(0x0004) (Edit)
	class AActor*                                      VoteMenu;                                                 // 0x03F8(0x0004) (Edit)
	struct FColor                                      WhiteColor;                                               // 0x03FC(0x0004)
	struct FColor                                      DefaultShadow;                                            // 0x0400(0x0004)
	struct FColor                                      RedColor;                                                 // 0x0404(0x0004)
	struct FColor                                      GreenColor;                                               // 0x0408(0x0004)
	struct FColor                                      CyanColor;                                                // 0x040C(0x0004)
	struct FColor                                      BlueColor;                                                // 0x0410(0x0004)
	struct FColor                                      GoldColor;                                                // 0x0414(0x0004)
	struct FColor                                      PurpleColor;                                              // 0x0418(0x0004)
	struct FColor                                      TurqColor;                                                // 0x041C(0x0004)
	struct FColor                                      GrayColor;                                                // 0x0420(0x0004)
	struct FColor                                      BlackColor;                                               // 0x0424(0x0004)
	bool                                               bSmallWeaponBar;                                          // 0x0428(0x0004)
	bool                                               bBuiltMOTD;                                               // 0x0428(0x0004)
	bool                                               bShowLocalStats;                                          // 0x0428(0x0004)
	bool                                               bShowBadConnectionAlert;                                  // 0x0428(0x0004) (Edit)
	bool                                               bShowChanDebug;                                           // 0x0428(0x0004) (Edit)
	bool                                               bShowMapInfo;                                             // 0x0428(0x0004) (Edit)
	bool                                               bMessageBeep;                                             // 0x0428(0x0004) (Edit)
	bool                                               bShowWeaponInfo;                                          // 0x0428(0x0004) (Edit)
	bool                                               bShowPersonalInfo;                                        // 0x0428(0x0004) (Edit)
	bool                                               bShowPoints;                                              // 0x0428(0x0004) (Edit)
	bool                                               bShowWeaponBar;                                           // 0x0428(0x0004) (Edit)
	bool                                               bCrosshairShow;                                           // 0x0428(0x0004) (Edit)
	bool                                               bShowPortrait;                                            // 0x0428(0x0004) (Edit)
	bool                                               bShowPortraitVC;                                          // 0x0428(0x0004) (Edit)
	bool                                               bNoEnemyNames;                                            // 0x0428(0x0004)
	bool                                               bShowVoteMenu;                                            // 0x0428(0x0004) (Edit)
	bool                                               bHideHUD;                                                 // 0x0428(0x0004) (Edit)
	bool                                               bShowScoreBoard;                                          // 0x0428(0x0004) (Edit)
	bool                                               bShowDebugInfo;                                           // 0x0428(0x0004) (Edit)
	bool                                               bDrawDebug;                                               // 0x0428(0x0004) (Edit)
	bool                                               bDrawDebug2;                                              // 0x0428(0x0004) (Edit)
	bool                                               bDrawDebug3;                                              // 0x0428(0x0004) (Edit)
	bool                                               bDrawDebug4;                                              // 0x0428(0x0004) (Edit)
	struct FColor                                      ConsoleColor;                                             // 0x042C(0x0004) (Edit)
	class APlayerReplicationInfo*                      PortraitPRI;                                              // 0x0430(0x0004)
	string                                             ProgressFontName;                                         // 0x0434(0x000C) (Edit, NeedCtorLink)
	class UFont*                                       ProgressFontFont;                                         // 0x0440(0x0004) (Edit)
	string                                             OverrideConsoleFontName;                                  // 0x0444(0x000C) (Edit, Localized, NeedCtorLink)
	class UFont*                                       OverrideConsoleFont;                                      // 0x0450(0x0004) (Edit)
	float                                              ProgressFadeTime;                                         // 0x0454(0x0004) (Edit)
	struct FColor                                      MOTDColor;                                                // 0x0458(0x0004) (Edit)
	float                                              HudScale;                                                 // 0x045C(0x0004) (Edit)
	float                                              HudOpacity;                                               // 0x0460(0x0004) (Edit)
	float                                              HudCanvasScale;                                           // 0x0464(0x0004) (Edit)
	int                                                CrosshairStyle;                                           // 0x0468(0x0004) (Edit)
	float                                              CrosshairScale;                                           // 0x046C(0x0004) (Edit)
	float                                              CrosshairOpacity;                                         // 0x0470(0x0004) (Edit)
	struct FColor                                      CrossHairColor;                                           // 0x0474(0x0004) (Edit)
	float                                              ResScaleX;                                                // 0x0478(0x0004) (Transient)
	float                                              ResScaleY;                                                // 0x047C(0x0004) (Transient)
	int                                                ConsoleMessageCount;                                      // 0x0480(0x0004)
	int                                                ConsoleFontSize;                                          // 0x0484(0x0004)
	int                                                MessageFontOffset;                                        // 0x0488(0x0004)
	struct FConsoleMessage                             TextMessages[0x8];                                        // 0x048C(0x0018) (NeedCtorLink)
	float                                              ConsoleMessagePosX;                                       // 0x054C(0x0004) (Edit)
	float                                              ConsoleMessagePosY;                                       // 0x0550(0x0004) (Edit)
	string                                             FontArrayNames[0x9];                                      // 0x0554(0x000C) (Localized, NeedCtorLink)
	class UFont*                                       FontArrayFonts[0x9];                                      // 0x05C0(0x0004)
	int                                                FontScreenWidthMedium[0x9];                               // 0x05E4(0x0004)
	int                                                FontScreenWidthSmall[0x9];                                // 0x0608(0x0004)
	string                                             MOTD[0x4];                                                // 0x062C(0x000C) (NeedCtorLink)
	int                                                MOTDState;                                                // 0x065C(0x0004)
	float                                              LastPickupTime;                                           // 0x0660(0x0004)
	float                                              LastAmmoPickupTime;                                       // 0x0664(0x0004)
	float                                              LastWeaponPickupTime;                                     // 0x0668(0x0004)
	float                                              LastHealthPickupTime;                                     // 0x066C(0x0004)
	float                                              LastArmorPickupTime;                                      // 0x0670(0x0004)
	float                                              LastHeliPickupTime;                                       // 0x0674(0x0004)
	float                                              LastUAVPickupTime;                                        // 0x0678(0x0004)
	float                                              LastAirStirkePickupTime;                                  // 0x067C(0x0004)
	float                                              LastSentryGunPickupTime;                                  // 0x0680(0x0004)
	float                                              DiedTime;                                                 // 0x0684(0x0004)
	float                                              GoWalkingBeginTime;                                       // 0x0688(0x0004)
	float                                              LastVoiceGain;                                            // 0x068C(0x0004) (Const)
	float                                              LastVoiceGainTime;                                        // 0x0690(0x0004) (Const)
	int                                                LastPlayerIDTalking;                                      // 0x0694(0x0004)
	float                                              LastPlayerIDTalkingTime;                                  // 0x0698(0x0004) (Const)
	class ASceneSubtitles*                             SubTitles;                                                // 0x069C(0x0004)
	class AHudOverlay*[]                               Overlays;                                                 // 0x06A0(0x000C) (NeedCtorLink)
	string                                             SpecPlayerName;                                           // 0x06AC(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnPostRender__Delegate;                                 // 0x06B8(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __OnBuildMOTD__Delegate;                                  // 0x06C0(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HUD");
		return ptr;
	}


	void ChangeHudType(byte Type);
	void InsertUsingSkillList(int SkillID, int weaponID, int SubSkillID);
	int GetCurGameTime();
	void CacheSpecialPositions();
	float GetUAVScanLineTexturePos();
	void UpdateUAV();
	bool IsUAVOn();
	bool IsUAVScanning();
	float GetUAVScanProgress();
	void OnClientReceiveDeathMessage(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void OnClientReceiveFlyingDefenceBotDeathMessage(class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject);
	void OnClientReceiveSentryGunDeathMessage(class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject);
	void OnClientReceiveHeliDeathMessage(class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject);
	void NotifyTakeHit(const struct FVector& HitLocation, int Damage, class UClass* DamageType, const struct FVector& Momentum, int CollisionPart);
	void NotifyDeath(class APawn* P);
	void OnEndChangedHost();
	void RemoveHudOverlay(class AHudOverlay* Overlay);
	void AddHudOverlay(class AHudOverlay* Overlay);
	void DisplayHit(const struct FVector& HitDir, int Damage, class UClass* DamageType);
	void DrawTargeting(class UCanvas* C);
	void AnnouncementPlayed(const string& AnnouncerSound, byte Switch);
	class UFont* LoadProgressFont();
	class UFont* STATIC_LargerFontThan(class UFont* aFont);
	class UFont* GetMediumFont(float Size);
	class UFont* STATIC_GetMediumFontFor(class UCanvas* Canvas);
	class UFont* GetFontSizeIndex(class UCanvas* C, int FontSize);
	class UFont* STATIC_GetConsoleFont(class UCanvas* C);
	class UFont* LoadFont(int i);
	class UFont* STATIC_LoadFontStatic(int i);
	void SetCropping(bool Active);
	void DrawCrosshair(class UCanvas* C);
	void SetTargeting(bool bShow, const struct FVector& TargetLocation, float Size);
	void FadeZoom();
	void ShrinkHUD();
	void GrowHUD();
	void AddTextMessage(const string& M, class UClass* MessageClass, class APlayerReplicationInfo* PRI);
	void DisplayMessages(class UCanvas* C);
	void DisplayPortrait(class APlayerReplicationInfo* PRI);
	void Message(class APlayerReplicationInfo* PRI, const string& Msg, const FName& MsgType);
	void LinkActors();
	void ShowFont();
	void ShowHud();
	void SetScoreBoardClass(class UClass* ScoreboardClass, class UClass* ResultBoardClass, class UClass* ResultBoardBootyClass);
	void DrawTypingPrompt(class UCanvas* C, const string& Text, int pos);
	void RemoveLocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, const string& CriticalString);
	void LocalizedMessageOptional(class UClass* Message, int Switch, int iReserve1, int iReserve2);
	void LocalizedMessage2(class UClass* Message, int Switch, bool bOption_Push, const string& CriticalString);
	void LocalizedMessageEx(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, const string& CriticalString, int iReserve);
	void LocalizedMessage(class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, const string& CriticalString);
	bool IsInCinematic();
	void DisplayBadConnectionAlert(class UCanvas* C);
	bool IsEnableRepair();
	void CallUsingItem(int ItemID, int iReservation1, int iReservation2);
	void CallItemBuy(int iKey, int iReservation1, int iReservation2);
	void TutorialEvent(const string& S, const FName& Type, const FName& reserv);
	void CallRadioMessage(int iKey, int iReservation1, int iReservation2);
	void CallEvent(bool ItemCheck, int iReservation1, int iReservation2);
	void CallSkill(int iKey, bool bRequire, bool iSucess);
	bool DrawLevelAction(class UCanvas* C);
	void DrawGMSpectatingHud(class UCanvas* C);
	void DrawSpectatingHud(class UCanvas* C);
	void DrawHUD(class UCanvas* C);
	void ResetHud();
	void DisplayProgressMessages(class UCanvas* C);
	void DrawRoute();
	void CanvasDrawActors(class UCanvas* C, bool bClearedZBuffer);
	void SetInstructionKeyText(const string& Text);
	void SetInstructionText(const string& Text);
	void DrawInstructionGfx(class UCanvas* C);
	void DrawCinematicHUD(class UCanvas* C);
	void DrawDebugStates(class UCanvas* C);
	void DrawChangeHostGuest(class UCanvas* C);
	void PostRender(class UCanvas* Canvas);
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	bool NeedToDrawSpectatingHud();
	void ResetKillMessageTexture();
	void DrawDebug3(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_HostPoint(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug2(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_AllPlayerStates2(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_AllPawnNetStates(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_AllPlayerStates(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_Helicopter(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_Time(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_Spectating(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_SpectatingAllPlayers(class UCanvas* C, int X, int dy, int* Y);
	void DrawDebug_GSSS(class UCanvas* C, int X, int dy, int* Y);
	void PostRenderActors(class UCanvas* Canvas);
	void GetLocalStatsScreen();
	void ConnectFailure(const string& FailCode, const string& URL);
	void CheckCountdown(class AGameReplicationInfo* GRI);
	void WorldSpaceOverlays();
	void ShowDebug3();
	void ShowDebug2();
	void ShowDebug1();
	void ShowDebugChan();
	void ShowDebug();
	void NextStats();
	void ShowStats();
	void HideMapInfo();
	void ShowMapInfo();
	void HideScores();
	void ShowScores();
	void Destroyed();
	void CreateKeyMenus();
	void Reset();
	void PostBeginPlay();
	void BuildMOTD();
	void DrawCustomBeacon(class UCanvas* C, class APawn* P, float ScreenLocX, float ScreenLocY);
	void AllDeleteAASNotice();
	void PushAASNotice(const string& sNotice, float beginTime, byte byLevel);
	void AllDeleteGameNotice();
	void PushGameNotice(const string& sGameNotice);
	void AllDeleteSuppliesPositions();
	void DeleteSuppliesPositions(class AActor* act);
	void CacheSuppliesPositions(class AActor* act);
	void ChangeWeaponSlot5Hud(class AwWeapon* newWeapon, bool bAddSkill);
	void ChangeWeaponSlot6Hud(class AwWeapon* newWeapon);
	void OnBuildMOTD(class AHUD* Sender);
	void OnPostRender(class AHUD* Sender, class UCanvas* C);
	void CalculateMinimapSize(float* fWidth, float* fHeight);
	void CalculateWorldPostionToMinimapPosition(const struct FVector& Location, float* mx, float* my);
	void STATIC_StaticDrawCanvasLine(class UCanvas* C, float X1, float Y1, float X2, float Y2, const struct FColor& LineColor);
	void DrawCanvasLine(float X1, float Y1, float X2, float Y2, const struct FColor& LineColor);
	void DrawDirectionalArrow(const struct FVector& InLocation, const struct FRotator& InRotation, const struct FColor& InColor, float InDrawScale);
	void DrawSphere(const struct FVector& Base, const struct FColor& Color, float Radius, int NumDivisions);
	void DrawCircle(const struct FVector& Base, const struct FVector& X, const struct FVector& Y, const struct FColor& Color, float Radius, int NumSides);
	void DrawBox(const struct FVector& Min, const struct FVector& Max, const struct FColor& Color);
	void Draw3DLine(const struct FVector& Start, const struct FVector& End, const struct FColor& LineColor);
};


// Class Engine.WarpZoneMarker
// 0x000C (0x04AC - 0x04A0)
class AWarpZoneMarker : public ASmallNavigationPoint
{
public:
	class AWarpZoneInfo*                               markedWarpZone;                                           // 0x04A0(0x0004)
	class AActor*                                      TriggerActor;                                             // 0x04A4(0x0004)
	class AActor*                                      TriggerActor2;                                            // 0x04A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WarpZoneMarker");
		return ptr;
	}


	class AActor* SpecialHandling(class APawn* Other);
	void FindTriggerActor();
	void PostBeginPlay();
};


// Class Engine.Trigger
// 0x0038 (0x0410 - 0x03D8)
class ATrigger : public ATriggers
{
public:
	ETriggerType                                       TriggerType;                                              // 0x03D8(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x03D9(0x0003) MISSED OFFSET
	string                                             Message;                                                  // 0x03DC(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                UniqueID;                                                 // 0x03E8(0x0004) (Edit, Localized)
	bool                                               bTriggerOnceOnly;                                         // 0x03EC(0x0004) (Edit)
	bool                                               bInitiallyActive;                                         // 0x03EC(0x0004) (Edit)
	class UClass*                                      ClassProximityType;                                       // 0x03F0(0x0004) (Edit)
	float                                              RepeatTriggerTime;                                        // 0x03F4(0x0004) (Edit)
	float                                              ReTriggerDelay;                                           // 0x03F8(0x0004) (Edit)
	float                                              TriggerTime;                                              // 0x03FC(0x0004)
	float                                              DamageThreshold;                                          // 0x0400(0x0004) (Edit)
	class AActor*                                      TriggerActor;                                             // 0x0404(0x0004)
	class AActor*                                      TriggerActor2;                                            // 0x0408(0x0004)
	bool                                               bSavedInitialCollision;                                   // 0x040C(0x0004)
	bool                                               bSavedInitialActive;                                      // 0x040C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Trigger");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void Timer();
	void Touch(class AActor* Other);
	class AActor* FindInstigator(class AActor* Other);
	bool IsRelevant(class AActor* Other);
	void CheckTouchList();
	class AActor* SpecialHandling(class APawn* Other);
	void FindTriggerActor();
	void Reset();
	void PostBeginPlay();
	void PreBeginPlay();
	bool SelfTriggered();
	void PlayerToucherDied(class APawn* P);
};


// Class Engine.AIMarker
// 0x0004 (0x04A4 - 0x04A0)
class AAIMarker : public ASmallNavigationPoint
{
public:
	class AAIScript*                                   markedScript;                                             // 0x04A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AIMarker");
		return ptr;
	}

};


// Class Engine.InventorySpot
// 0x000C (0x04AC - 0x04A0)
class AInventorySpot : public ASmallNavigationPoint
{
public:
	class APickup*                                     markedItem;                                               // 0x04A0(0x0004)
	class AwPickUpBase*                                myPickupBase;                                             // 0x04A4(0x0004)
	bool                                               bSuperPickup;                                             // 0x04A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InventorySpot");
		return ptr;
	}


	float DetourWeight(class APawn* Other, float PathWeight);
	class AActor* GetMoveTargetFor(class AAIController* B, float MaxWait);
};


// Class Engine.PlayerStart
// 0x0024 (0x04C4 - 0x04A0)
class APlayerStart : public ASmallNavigationPoint
{
public:
	byte                                               TeamNumber;                                               // 0x04A0(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x04A1(0x0003) MISSED OFFSET
	bool                                               bSinglePlayerStart;                                       // 0x04A4(0x0004) (Edit)
	bool                                               bCoopStart;                                               // 0x04A4(0x0004) (Edit)
	bool                                               bEnabled;                                                 // 0x04A4(0x0004) (Edit)
	bool                                               bPrimaryStart;                                            // 0x04A4(0x0004) (Edit)
	string                                             ApplyGameInfo;                                            // 0x04A8(0x000C) (NeedCtorLink)
	float                                              LastSpawnFailTime;                                        // 0x04B4(0x0004)
	class ASatellite*[]                                Satellites;                                               // 0x04B8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart");
		return ptr;
	}

};


// Class Engine.PlayerStart_SD
// 0x0004 (0x04C8 - 0x04C4)
class APlayerStart_SD : public APlayerStart
{
public:
	ESpawnTeam                                         eTeamType;                                                // 0x04C4(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x04C5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart_SD");
		return ptr;
	}

};


// Class Engine.Teleporter
// 0x002C (0x04CC - 0x04A0)
class ATeleporter : public ASmallNavigationPoint
{
public:
	string                                             URL;                                                      // 0x04A0(0x000C) (Edit, Net, NeedCtorLink)
	FName                                              ProductRequired;                                          // 0x04AC(0x0004) (Edit)
	bool                                               bChangesVelocity;                                         // 0x04B0(0x0004) (Edit, Net)
	bool                                               bChangesYaw;                                              // 0x04B0(0x0004) (Edit, Net)
	bool                                               bReversesX;                                               // 0x04B0(0x0004) (Edit, Net)
	bool                                               bReversesY;                                               // 0x04B0(0x0004) (Edit, Net)
	bool                                               bReversesZ;                                               // 0x04B0(0x0004) (Edit, Net)
	bool                                               bEnabled;                                                 // 0x04B0(0x0004) (Edit, Net)
	struct FVector                                     TargetVelocity;                                           // 0x04B4(0x000C) (Edit, Net)
	class AActor*                                      TriggerActor;                                             // 0x04C0(0x0004)
	class AActor*                                      TriggerActor2;                                            // 0x04C4(0x0004)
	float                                              LastFired;                                                // 0x04C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Teleporter");
		return ptr;
	}


	int SpecialCost(class APawn* Other, class UReachSpec* Path);
	class AActor* SpecialHandling(class APawn* Other);
	void PostTouch(class AActor* Other);
	void Touch(class AActor* Other);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	bool Accept(class AActor* Incoming, class AActor* Source);
	void FindTriggerActor();
	void PostBeginPlay();
};


// Class Engine.ZoneInfo
// 0x0094 (0x04C0 - 0x042C)
class AZoneInfo : public AInfo
{
public:
	class ASkyZoneInfo*                                SkyZone;                                                  // 0x042C(0x0004)
	FName                                              ZoneTag;                                                  // 0x0430(0x0004) (Edit)
	string                                             LocationName;                                             // 0x0434(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              KillZ;                                                    // 0x0440(0x0004) (Edit)
	EeKillZType                                        KillZType;                                                // 0x0444(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0445(0x0003) MISSED OFFSET
	bool                                               bSoftKillZ;                                               // 0x0448(0x0004) (Edit)
	bool                                               bTerrainZone;                                             // 0x0448(0x0004) (Edit)
	bool                                               bDistanceFog;                                             // 0x0448(0x0004) (Edit)
	bool                                               bClearToFogColor;                                         // 0x0448(0x0004) (Edit)
	class ATerrainInfo*[]                              Terrains;                                                 // 0x044C(0x000C) (Const, NeedCtorLink)
	struct FVector                                     AmbientVectorShaderOff;                                   // 0x0458(0x000C)
	struct FVector                                     AmbientVector;                                            // 0x0464(0x000C)
	float                                              GammaFactor;                                              // 0x0470(0x0004) (Edit)
	int                                                AmbientBrightness;                                        // 0x0474(0x0004) (Edit)
	int                                                AmbientBrightnessShaderOff;                               // 0x0478(0x0004) (Edit)
	byte                                               AmbientHue;                                               // 0x047C(0x0001) (Edit)
	byte                                               AmbientSaturation;                                        // 0x047D(0x0001) (Edit)
	byte                                               Padding01[0x2];                                           // 0x047E(0x0002) MISSED OFFSET
	struct FColor                                      GroundColor;                                              // 0x0480(0x0004) (Edit)
	struct FColor                                      SkyColor;                                                 // 0x0484(0x0004) (Edit)
	struct FColor                                      DistanceFogColor;                                         // 0x0488(0x0004) (Edit)
	float                                              DistanceFogStart;                                         // 0x048C(0x0004) (Edit)
	float                                              DistanceFogEnd;                                           // 0x0490(0x0004) (Edit)
	float                                              RealDistanceFogEnd;                                       // 0x0494(0x0004) (Transient)
	float                                              DistanceFogEndMin;                                        // 0x0498(0x0004) (Edit)
	float                                              DistanceFogBlendTime;                                     // 0x049C(0x0004) (Edit)
	float                                              TexUPanSpeed;                                             // 0x04A0(0x0004) (Edit)
	float                                              TexVPanSpeed;                                             // 0x04A4(0x0004) (Edit)
	float                                              DramaticLightingScale;                                    // 0x04A8(0x0004) (Edit)
	class UI3DL2Listener*                              ZoneEffect;                                               // 0x04AC(0x0004) (Edit, EditInline)
	bool                                               bLonelyZone;                                              // 0x04B0(0x0004) (Edit)
	class AZoneInfo*[]                                 ManualExcludes;                                           // 0x04B4(0x000C) (Edit, NeedCtorLink, EditInline)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ZoneInfo");
		return ptr;
	}


	void ActorLeaving(class AActor* Other);
	void ActorEntered(class AActor* Other);
	void PreBeginPlay();
	void LinkToSkybox();
	void ZoneActors(class UClass* baseClass, class AActor** Actor);
};


// Class Engine.WarpZoneInfo
// 0x00B4 (0x0574 - 0x04C0)
class AWarpZoneInfo : public AZoneInfo
{
public:
	string                                             OtherSideURL;                                             // 0x04C0(0x000C) (Edit, Net, NeedCtorLink)
	FName                                              ThisTag;                                                  // 0x04CC(0x0004) (Edit, Net)
	bool                                               bNoTeleFrag;                                              // 0x04D0(0x0004) (Edit)
	int                                                iWarpZone;                                                // 0x04D4(0x0004) (Const)
	struct FCoords                                     WarpCoords;                                               // 0x04D8(0x0030) (Const)
	class AWarpZoneInfo*                               OtherSideActor;                                           // 0x0508(0x0004) (Net, Transient)
	class UObject*                                     OtherSideLevel;                                           // 0x050C(0x0004) (Transient)
	string                                             Destinations[0x8];                                        // 0x0510(0x000C) (Edit, NeedCtorLink)
	int                                                numDestinations;                                          // 0x0570(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WarpZoneInfo");
		return ptr;
	}


	void ActorLeaving(class AActor* Other);
	void ActorEntered(class AActor* Other);
	void ForceGenerate();
	void Generate();
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void PreBeginPlay();
	void UnWarp(struct FVector* loc, struct FVector* Vel, struct FRotator* R);
	void Warp(struct FVector* loc, struct FVector* Vel, struct FRotator* R);
};


// Class Engine.Projectile
// 0x005C (0x0434 - 0x03D8)
class AProjectile : public AActor
{
public:
	float                                              Speed;                                                    // 0x03D8(0x0004)
	float                                              MaxSpeed;                                                 // 0x03DC(0x0004)
	float                                              TossZ;                                                    // 0x03E0(0x0004)
	class AActor*                                      ZeroCollider;                                             // 0x03E4(0x0004)
	bool                                               bSwitchToZeroCollision;                                   // 0x03E8(0x0004)
	bool                                               bNoFX;                                                    // 0x03E8(0x0004)
	bool                                               bReadyToSplash;                                           // 0x03E8(0x0004)
	bool                                               bSpecialCalcView;                                         // 0x03E8(0x0004)
	float                                              Damage;                                                   // 0x03EC(0x0004)
	float                                              DamageRadius;                                             // 0x03F0(0x0004)
	float                                              MomentumTransfer;                                         // 0x03F4(0x0004)
	float                                              Momentum_Pawn;                                            // 0x03F8(0x0004)
	class UClass*                                      MyDamageType;                                             // 0x03FC(0x0004)
	EeWeaponType                                       MyWeaponType;                                             // 0x0400(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0401(0x0003) MISSED OFFSET
	class USound*                                      SpawnSound;                                               // 0x0404(0x0004)
	string                                             ImpactSound;                                              // 0x0408(0x000C) (NeedCtorLink)
	class UClass*                                      ExplosionDecal;                                           // 0x0414(0x0004)
	float                                              ExploWallOut;                                             // 0x0418(0x0004)
	class AController*                                 InstigatorController;                                     // 0x041C(0x0004)
	class AActor*                                      LastTouched;                                              // 0x0420(0x0004)
	class AActor*                                      HurtWall;                                                 // 0x0424(0x0004)
	float                                              MaxEffectDistance;                                        // 0x0428(0x0004)
	bool                                               bScriptPostRender;                                        // 0x042C(0x0004)
	float                                              fGravMass;                                                // 0x0430(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Projectile");
		return ptr;
	}


	void SufferEffect(class APawn* Victim, float fDist, float fReduceRate);
	void PostRender2D(class UCanvas* C, float ScreenLocX, float ScreenLocY);
	bool IsStationary();
	float STATIC_GetRange();
	void RandSpin(float spinRate);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void BlowUp(const struct FVector& HitLocation);
	void SpawnExplosionDecal(class APlayerController* PC, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation);
	void ClientSideTouch(class AActor* Other, const struct FVector& HitLocation);
	void Touch(class AActor* Other);
	bool EncroachingOn(class AActor* Other);
	void HurtRadius(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation);
	bool CheckMaxEffectDistance(class APlayerController* P, const struct FVector& SpawnLocation);
	void Reset();
	void OnEndRound();
	bool CanSplash();
	bool SpecialCalcView(bool bBehindView, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	void PostBeginPlay();
	float GetInstigatorsDirectionbyDot(const struct FRotator& pawnRotation, const struct FVector& pawnVelocity);
};


// Class Engine.Decoration
// 0x004C (0x0424 - 0x03D8)
class ADecoration : public AActor
{
public:
	class UClass*                                      EffectWhenDestroyed;                                      // 0x03D8(0x0004) (Edit)
	bool                                               bPushable;                                                // 0x03DC(0x0004) (Edit)
	bool                                               bDamageable;                                              // 0x03DC(0x0004) (Edit)
	bool                                               bPushSoundPlaying;                                        // 0x03DC(0x0004)
	bool                                               bSplash;                                                  // 0x03DC(0x0004)
	class USound*                                      PushSound;                                                // 0x03E0(0x0004) (Edit)
	class USound*                                      EndPushSound;                                             // 0x03E4(0x0004) (Edit)
	int                                                numLandings;                                              // 0x03E8(0x0004) (Const)
	class UClass*                                      contents;                                                 // 0x03EC(0x0004) (Edit)
	int                                                NumFrags;                                                 // 0x03F0(0x0004) (Edit)
	class UTexture*                                    FragSkin;                                                 // 0x03F4(0x0004) (Edit)
	class UClass*                                      FragType;                                                 // 0x03F8(0x0004) (Edit)
	struct FVector                                     FragMomentum;                                             // 0x03FC(0x000C)
	int                                                Health;                                                   // 0x0408(0x0004) (Edit, Net)
	int                                                MaxHealth;                                                // 0x040C(0x0004) (Edit, Net)
	float                                              SplashTime;                                               // 0x0410(0x0004) (Edit)
	int                                                DamageRadius;                                             // 0x0414(0x0004) (Edit)
	class ANavigationPoint*                            LastAnchor;                                               // 0x0418(0x0004) (Const)
	float                                              LastValidAnchorTime;                                      // 0x041C(0x0004)
	FName                                              EventTagName;                                             // 0x0420(0x0004) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Decoration");
		return ptr;
	}


	void Bump(class AActor* Other);
	void Timer();
	void Destroyed();
	void BaseChange();
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void PhysicsVolumeChange(class APhysicsVolume* NewVolume);
	void TakeDamage(int NDamage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial);
	void Landed(const struct FVector& HitNormal);
	void Drop(const struct FVector& NewVel, const string& sReason);
	bool CanSplash();
	void DecoRefreshCollisionHash();
	void NotReachableBy(class APawn* P);
};


// Class Engine.InterpolationPoint
// 0x0000 (0x03D8 - 0x03D8)
class AInterpolationPoint : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.InterpolationPoint");
		return ptr;
	}

};


// Class Engine.Scout
// 0x0004 (0x1080 - 0x107C)
class AScout : public APawn
{
public:
	float                                              MaxLandingVelocity;                                       // 0x107C(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Scout");
		return ptr;
	}


	void PreBeginPlay();
};


// Class Engine.ReachSpec
// 0x0024 (0x0050 - 0x002C)
class UReachSpec : public UObject
{
public:
	int                                                Distance;                                                 // 0x002C(0x0004)
	class ANavigationPoint*                            Start;                                                    // 0x0030(0x0004) (Const)
	class ANavigationPoint*                            End;                                                      // 0x0034(0x0004) (Const)
	int                                                CollisionRadius;                                          // 0x0038(0x0004)
	int                                                CollisionHeight;                                          // 0x003C(0x0004)
	int                                                reachFlags;                                               // 0x0040(0x0004)
	int                                                MaxLandingVelocity;                                       // 0x0044(0x0004)
	byte                                               bPruned;                                                  // 0x0048(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0049(0x0003) MISSED OFFSET
	bool                                               bForced;                                                  // 0x004C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ReachSpec");
		return ptr;
	}

};


// Class Engine.SkyZoneInfo
// 0x0000 (0x04C0 - 0x04C0)
class ASkyZoneInfo : public AZoneInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SkyZoneInfo");
		return ptr;
	}

};


// Class Engine.Camera
// 0x0000 (0x0DA8 - 0x0DA8)
class ACamera : public APlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Camera");
		return ptr;
	}

};


// Class Engine.LevelInfo
// 0x052C (0x09EC - 0x04C0)
class ALevelInfo : public AZoneInfo
{
public:
	struct FCombatSituationPoint[]                     CSReviewPoints;                                           // 0x04C0(0x000C) (NeedCtorLink)
	struct FCombatSituationLine[]                      CSReviewLines;                                            // 0x04CC(0x000C) (NeedCtorLink)
	struct FCombatSituationNameTag[]                   CSReviewNameTags;                                         // 0x04D8(0x000C) (NeedCtorLink)
	struct FCombatSituationArrow[]                     CSReviewArrows;                                           // 0x04E4(0x000C) (NeedCtorLink)
	struct FCombatSituationSphere[]                    CSReviewSpheres;                                          // 0x04F0(0x000C) (NeedCtorLink)
	int                                                iQueuedSendBytes;                                         // 0x04FC(0x0004)
	int                                                iQueuedRecvBytes;                                         // 0x0500(0x0004)
	float                                              TimeDilation;                                             // 0x0504(0x0004) (Net)
	float                                              AppDeltaTime;                                             // 0x0508(0x0004)
	float                                              TimeSeconds;                                              // 0x050C(0x0004)
	float                                              PlayTimeSeconds;                                          // 0x0510(0x0004)
	int                                                Year;                                                     // 0x0514(0x0004) (Transient)
	int                                                Month;                                                    // 0x0518(0x0004) (Transient)
	int                                                Day;                                                      // 0x051C(0x0004) (Transient)
	int                                                DayOfWeek;                                                // 0x0520(0x0004) (Transient)
	int                                                Hour;                                                     // 0x0524(0x0004) (Transient)
	int                                                Minute;                                                   // 0x0528(0x0004) (Transient)
	int                                                Second;                                                   // 0x052C(0x0004) (Transient)
	int                                                Millisecond;                                              // 0x0530(0x0004) (Transient)
	float                                              PauseDelay;                                               // 0x0534(0x0004)
	string                                             Title;                                                    // 0x0538(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             Author;                                                   // 0x0544(0x000C) (Edit, NeedCtorLink)
	string                                             Description;                                              // 0x0550(0x000C) (Edit, NeedCtorLink)
	class UMaterial*                                   Screenshot;                                               // 0x055C(0x0004) (Edit)
	string                                             DecoTextName;                                             // 0x0560(0x000C) (Edit, NeedCtorLink)
	int                                                IdealPlayerCountMin;                                      // 0x056C(0x0004) (Edit)
	int                                                IdealPlayerCountMax;                                      // 0x0570(0x0004) (Edit)
	string                                             ExtraInfo;                                                // 0x0574(0x000C) (Edit, NeedCtorLink)
	int                                                SinglePlayerTeamSize;                                     // 0x0580(0x0004) (Edit)
	class UMaterial*                                   RadarMapImage;                                            // 0x0584(0x0004) (Edit)
	float                                              CustomRadarRange;                                         // 0x0588(0x0004) (Edit)
	bool                                               bDoTraceNativeInstant;                                    // 0x058C(0x0004)
	bool                                               bServiceBuildHK;                                          // 0x058C(0x0004)
	class UClass*                                      PCI;                                                      // 0x0590(0x0004)
	bool                                               bServiceBuild;                                            // 0x0594(0x0004)
	bool                                               bServiceTestBuild;                                        // 0x0594(0x0004)
	bool                                               bTeenVersion;                                             // 0x0594(0x0004)
	bool                                               bConnectDMZ;                                              // 0x0594(0x0004)
	EPhysicsDetailLevel                                PhysicsDetailLevel;                                       // 0x0598(0x0001) (Edit)
	EMeshLODDetailLevel                                MeshLODDetailLevel;                                       // 0x0599(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x059A(0x0002) MISSED OFFSET
	float                                              KarmaTimeScale;                                           // 0x059C(0x0004) (Edit, Net)
	float                                              RagdollTimeScale;                                         // 0x05A0(0x0004) (Edit, Net)
	int                                                MaxRagdolls;                                              // 0x05A4(0x0004) (Edit)
	float                                              KarmaGravScale;                                           // 0x05A8(0x0004) (Edit, Net)
	bool                                               bKStaticFriction;                                         // 0x05AC(0x0004) (Edit)
	bool                                               bKNoInit;                                                 // 0x05AC(0x0004) (Edit)
	int                                                LastTaunt[0x2];                                           // 0x05B0(0x0004)
	float                                              DecalStayScale;                                           // 0x05B8(0x0004)
	string                                             LevelEnterText;                                           // 0x05BC(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             LocalizedPkg;                                             // 0x05C8(0x000C) (Edit, NeedCtorLink)
	class APlayerReplicationInfo*                      Pauser;                                                   // 0x05D4(0x0004) (Net)
	class ULevelSummary*                               Summary;                                                  // 0x05D8(0x0004)
	string                                             VisibleGroups;                                            // 0x05DC(0x000C) (NeedCtorLink)
	bool                                               HideFromMenus;                                            // 0x05E8(0x0004) (Edit)
	bool                                               bLonePlayer;                                              // 0x05E8(0x0004) (Edit)
	bool                                               bBegunPlay;                                               // 0x05E8(0x0004)
	bool                                               bPlayersOnly;                                             // 0x05E8(0x0004)
	bool                                               bFreezeKarma;                                             // 0x05E8(0x0004)
	EDetailMode                                        DetailMode;                                               // 0x05EC(0x0001) (Const)
	byte                                               Padding01[0x3];                                           // 0x05ED(0x0003) MISSED OFFSET
	bool                                               bKickLiveIdlers;                                          // 0x05F0(0x0004)
	bool                                               bDesireSkinPreload;                                       // 0x05F0(0x0004)
	bool                                               bSkinsPreloaded;                                          // 0x05F0(0x0004)
	bool                                               bClassicView;                                             // 0x05F0(0x0004)
	bool                                               bShowRadarMap;                                            // 0x05F0(0x0004) (Edit)
	bool                                               bUseTerrainForRadarRange;                                 // 0x05F0(0x0004) (Edit)
	bool                                               bIsSaveGame;                                              // 0x05F0(0x0004)
	bool                                               bSupportSaveGames;                                        // 0x05F0(0x0004) (Edit)
	bool                                               bNeverPrecache;                                           // 0x05F0(0x0004)
	bool                                               bDropDetail;                                              // 0x05F0(0x0004)
	bool                                               bAggressiveLOD;                                           // 0x05F0(0x0004)
	bool                                               bStartup;                                                 // 0x05F0(0x0004)
	bool                                               bLowSoundDetail;                                          // 0x05F0(0x0004)
	bool                                               bPathsRebuilt;                                            // 0x05F0(0x0004)
	bool                                               bHasPathNodes;                                            // 0x05F0(0x0004)
	bool                                               bLevelChange;                                             // 0x05F0(0x0004)
	bool                                               bShouldPreload;                                           // 0x05F0(0x0004)
	int                                                LevelTextureLODBias;                                      // 0x05F4(0x0004) (Edit)
	float                                              AnimMeshGlobalLOD;                                        // 0x05F8(0x0004)
	struct FVector                                     CameraLocationDynamic;                                    // 0x05FC(0x000C) (Edit)
	struct FVector                                     CameraLocationTop;                                        // 0x0608(0x000C) (Edit)
	struct FVector                                     CameraLocationFront;                                      // 0x0614(0x000C) (Edit)
	struct FVector                                     CameraLocationSide;                                       // 0x0620(0x000C) (Edit)
	struct FRotator                                    CameraRotationDynamic;                                    // 0x062C(0x000C) (Edit)
	string                                             Song;                                                     // 0x0638(0x000C) (Edit, NeedCtorLink)
	float                                              PlayerDoppler;                                            // 0x0644(0x0004) (Edit)
	float                                              MusicVolumeOverride;                                      // 0x0648(0x0004) (Edit)
	class UTexRotator*                                 BG;                                                       // 0x064C(0x0004) (Edit)
	struct FVector                                     TextureCoord1;                                            // 0x0650(0x000C) (Edit)
	struct FVector                                     WorldCoord1;                                              // 0x065C(0x000C) (Edit)
	struct FVector                                     TextureCoord2;                                            // 0x0668(0x000C) (Edit)
	struct FVector                                     WorldCoord2;                                              // 0x0674(0x000C) (Edit)
	struct FVector                                     AirStrikeLocation;                                        // 0x0680(0x000C) (Edit)
	struct FVector                                     MinimapCropCoords1;                                       // 0x068C(0x000C) (Edit)
	struct FVector                                     MinimapCropCoords2;                                       // 0x0698(0x000C) (Edit)
	class UMaterial*                                   BigmapBG;                                                 // 0x06A4(0x0004) (Edit)
	struct FVector                                     BigmapTextureCoord1;                                      // 0x06A8(0x000C) (Edit)
	struct FVector                                     BigmapTextureCoord2;                                      // 0x06B4(0x000C) (Edit)
	struct FVector                                     BigmapMinimapCropCoords1;                                 // 0x06C0(0x000C) (Edit)
	struct FVector                                     BigmapMinimapCropCoords2;                                 // 0x06CC(0x000C) (Edit)
	bool                                               IsAirStriking;                                            // 0x06D8(0x0004) (Net)
	float                                              fAirStrikeFadeTime;                                       // 0x06DC(0x0004)
	int                                                AirStrikeTeamIndex;                                       // 0x06E0(0x0004) (Net)
	bool                                               bLevelPrecached;                                          // 0x06E4(0x0004)
	float                                              Brightness;                                               // 0x06E8(0x0004) (Edit)
	class UTexture*                                    DefaultTexture;                                           // 0x06EC(0x0004)
	class UTexture*                                    WireframeTexture;                                         // 0x06F0(0x0004)
	class UTexture*                                    WhiteSquareTexture;                                       // 0x06F4(0x0004)
	class UTexture*                                    LargeVertex;                                              // 0x06F8(0x0004)
	int                                                HubStackLevel;                                            // 0x06FC(0x0004)
	ELevelAction                                       LevelAction;                                              // 0x0700(0x0001) (Transient)
	byte                                               Padding02[0x3];                                           // 0x0701(0x0003) MISSED OFFSET
	class AGameReplicationInfo*                        GRI;                                                      // 0x0704(0x0004) (Transient)
	ENetMode                                           NetMode;                                                  // 0x0708(0x0001)
	byte                                               Padding03[0x3];                                           // 0x0709(0x0003) MISSED OFFSET
	string                                             ComputerName;                                             // 0x070C(0x000C) (NeedCtorLink)
	string                                             EngineVersion;                                            // 0x0718(0x000C) (NeedCtorLink)
	string                                             MinNetVersion;                                            // 0x0724(0x000C) (NeedCtorLink)
	string                                             AuthLogin_AccountID;                                      // 0x0730(0x000C) (NeedCtorLink)
	string                                             AuthLogin_GUID;                                           // 0x073C(0x000C) (NeedCtorLink)
	int                                                AuthLogin_ChannelingType;                                 // 0x0748(0x0004)
	string                                             AuthLogin_AuthKey;                                        // 0x074C(0x000C) (NeedCtorLink)
	string                                             AuthLogin_RegionKey;                                      // 0x0758(0x000C) (NeedCtorLink)
	float                                              DeltaTime;                                                // 0x0764(0x0004)
	string                                             DefaultGameType;                                          // 0x0768(0x000C) (Edit, NeedCtorLink)
	string                                             PreCacheGame;                                             // 0x0774(0x000C) (Edit, NeedCtorLink)
	class AGameInfo*                                   Game;                                                     // 0x0780(0x0004)
	float                                              DefaultGravity;                                           // 0x0784(0x0004) (Net)
	float                                              LastVehicleCheck;                                         // 0x0788(0x0004)
	float                                              StallZ;                                                   // 0x078C(0x0004) (Edit)
	class ANavigationPoint*                            NavigationPointList;                                      // 0x0790(0x0004) (Const)
	class AController*                                 ControllerList;                                           // 0x0794(0x0004) (Const)
	class APlayerController*                           LocalPlayerController;                                    // 0x0798(0x0004)
	class AwGameStateStorageSender*                    GSSSList;                                                 // 0x079C(0x0004) (Const)
	bool                                               bUseHeadlights;                                           // 0x07A0(0x0004) (Edit)
	float                                              HeadlightScaling;                                         // 0x07A4(0x0004) (Edit)
	string                                             NextURL;                                                  // 0x07A8(0x000C) (NeedCtorLink)
	bool                                               bNextItems;                                               // 0x07B4(0x0004)
	float                                              NextSwitchCountdown;                                      // 0x07B8(0x0004)
	class UObjectPool*                                 ObjectPool;                                               // 0x07BC(0x0004) (Transient)
	class UMaterial*[]                                 PrecacheMaterials;                                        // 0x07C0(0x000C) (Transient, NeedCtorLink)
	class UStaticMesh*[]                               PrecacheStaticMeshes;                                     // 0x07CC(0x000C) (Transient, NeedCtorLink)
	class UMesh*[]                                     PrecacheSkeletalMeshes;                                   // 0x07D8(0x000C) (Transient, NeedCtorLink)
	class UStaticMesh*                                 IndoorCamouflageMesh;                                     // 0x07E4(0x0004) (Edit)
	float                                              IndoorMeshDrawscale;                                      // 0x07E8(0x0004) (Edit)
	class UStaticMesh*                                 OutdoorCamouflageMesh;                                    // 0x07EC(0x0004) (Edit)
	float                                              OutdoorMeshDrawscale;                                     // 0x07F0(0x0004) (Edit)
	struct FColor                                      DustColor;                                                // 0x07F4(0x0004) (Edit)
	struct FColor                                      WaterDustColor;                                           // 0x07F8(0x0004) (Edit)
	float                                              MoveRepSize;                                              // 0x07FC(0x0004)
	float                                              MaxClientFrameRate;                                       // 0x0800(0x0004)
	float                                              MaxTimeMargin;                                            // 0x0804(0x0004)
	float                                              TimeMarginSlack;                                          // 0x0808(0x0004)
	float                                              MinTimeMargin;                                            // 0x080C(0x0004)
	class APlayerController*                           ReplicationViewer;                                        // 0x0810(0x0004) (Const)
	class AActor*                                      ReplicationViewTarget;                                    // 0x0814(0x0004) (Const)
	class UwCharacterManager*                          CharMgr;                                                  // 0x0818(0x0004) (Const)
	class UwWeaponManager*                             WeaponMgr;                                                // 0x081C(0x0004) (Const)
	class UwGameManager*                               GameMgr;                                                  // 0x0820(0x0004) (Const)
	class UItemIterator*                               ItemItr;                                                  // 0x0824(0x0004) (Const)
	int[]                                              WeaponTotalAmmos;                                         // 0x0828(0x000C) (NeedCtorLink)
	int[]                                              WeaponCurrentAmmos;                                       // 0x0834(0x000C) (NeedCtorLink)
	int[]                                              WeaponClassNumbers;                                       // 0x0840(0x000C) (NeedCtorLink)
	int[]                                              WeaponAddPartsID;                                         // 0x084C(0x000C) (NeedCtorLink)
	int                                                TeamIndex;                                                // 0x0858(0x0004)
	int                                                Kills;                                                    // 0x085C(0x0004)
	int                                                Assists;                                                  // 0x0860(0x0004)
	int                                                Deaths;                                                   // 0x0864(0x0004)
	int                                                EXPs;                                                     // 0x0868(0x0004)
	int                                                Points;                                                   // 0x086C(0x0004)
	int                                                Scores;                                                   // 0x0870(0x0004)
	int[]                                              MainWeaponIDs;                                            // 0x0874(0x000C) (NeedCtorLink)
	int[]                                              MainWeaponUsingSeconds;                                   // 0x0880(0x000C) (NeedCtorLink)
	class APawn*[]                                     Helicopters;                                              // 0x088C(0x000C) (NeedCtorLink)
	class AVehicle*[]                                  Vehicles;                                                 // 0x0898(0x000C) (NeedCtorLink)
	class APawn*[]                                     PawnList;                                                 // 0x08A4(0x000C) (NeedCtorLink)
	class ADecoration*[]                               Barricade;                                                // 0x08B0(0x000C) (NeedCtorLink)
	class AActor*[]                                    AttackFlag;                                               // 0x08BC(0x000C) (NeedCtorLink)
	class APawn*[]                                     SentryGuns;                                               // 0x08C8(0x000C) (NeedCtorLink)
	class APickup*[]                                   SupplyList_Health;                                        // 0x08D4(0x000C) (NeedCtorLink)
	class APickup*[]                                   SupplyList_Artillery;                                     // 0x08E0(0x000C) (NeedCtorLink)
	class APickup*[]                                   SupplyList_Helicopter;                                    // 0x08EC(0x000C) (NeedCtorLink)
	class APickup*[]                                   SupplyList_UAV;                                           // 0x08F8(0x000C) (NeedCtorLink)
	class APickup*[]                                   SupplyList_SentryGun;                                     // 0x0904(0x000C) (NeedCtorLink)
	class APickup*[]                                   Medals;                                                   // 0x0910(0x000C) (NeedCtorLink)
	class APickup*[]                                   SupplyList_BonusPack;                                     // 0x091C(0x000C) (NeedCtorLink)
	class AwProjectile*[]                              Grenades;                                                 // 0x0928(0x000C) (NeedCtorLink)
	byte                                               PPE_ElementIndex;                                         // 0x0934(0x0001) (Edit)
	byte                                               Padding04[0x3];                                           // 0x0935(0x0003) MISSED OFFSET
	struct FToneElement[]                              SOn_PostEffects;                                          // 0x0938(0x000C) (Edit, NeedCtorLink)
	struct FToneElement[]                              SOff_PostEffects;                                         // 0x0944(0x000C) (Edit, NeedCtorLink)
	EPostProcessEffectMode                             PPE_a_Mode;                                               // 0x0950(0x0001) (Edit)
	byte                                               Padding05[0x3];                                           // 0x0951(0x0003) MISSED OFFSET
	float                                              Glow_SkyScale;                                            // 0x0954(0x0004) (Edit)
	float                                              Glow_GaussMultiplier;                                     // 0x0958(0x0004) (Edit)
	float                                              Glow_GaussMean;                                           // 0x095C(0x0004) (Edit)
	float                                              Glow_GaussStdDev;                                         // 0x0960(0x0004) (Edit)
	float                                              SunShafts_Decay;                                          // 0x0964(0x0004) (Edit)
	float                                              SunShafts_Weight;                                         // 0x0968(0x0004) (Edit)
	float                                              SunShafts_Density;                                        // 0x096C(0x0004) (Edit)
	float                                              SunShafts_Exposure;                                       // 0x0970(0x0004) (Edit)
	float                                              SunShafts_HeightScale;                                    // 0x0974(0x0004) (Edit)
	struct FColor                                      SunShafts_Color;                                          // 0x0978(0x0004) (Edit)
	float                                              MaxOcclusionDistance;                                     // 0x097C(0x0004) (Edit)
	float                                              OcclusionExponent;                                        // 0x0980(0x0004) (Edit)
	float                                              FullyOccludedSamplesFraction;                             // 0x0984(0x0004) (Edit)
	bool                                               bUseSDRespawnInTeamGame;                                  // 0x0988(0x0004) (Edit)
	float                                              fLowDetailBias;                                           // 0x098C(0x0004)
	float                                              fMediumDetailBias;                                        // 0x0990(0x0004)
	float                                              fHighDetailBias;                                          // 0x0994(0x0004)
	float                                              fUltraDetailBias;                                         // 0x0998(0x0004)
	bool                                               bTestFlag1;                                               // 0x099C(0x0004)
	bool                                               bTestFlag2;                                               // 0x099C(0x0004)
	bool                                               bTestFlag3;                                               // 0x099C(0x0004)
	float                                              fTestValue1;                                              // 0x09A0(0x0004)
	float                                              fTestValue2;                                              // 0x09A4(0x0004)
	float                                              fTestValue3;                                              // 0x09A8(0x0004)
	class UVisibilityItemArray*[]                      Visibility;                                               // 0x09AC(0x000C) (Edit, NeedCtorLink)
	int                                                VisibilityOneRowCount;                                    // 0x09B8(0x0004)
	int[]                                              VisibilityNew;                                            // 0x09BC(0x000C) (NeedCtorLink)
	class ANavigationPoint*                            InfluenceCurNav;                                          // 0x09C8(0x0004)
	int                                                InfluenceStepSize;                                        // 0x09CC(0x0004)
	float                                              InfluenceDistFactor;                                      // 0x09D0(0x0004)
	class AwAILevelBase*                               AILevel;                                                  // 0x09D4(0x0004)
	float                                              fMoveLogTimer;                                            // 0x09D8(0x0004)
	class UUserzoneInfo*                               kUserzoneInfo;                                            // 0x09DC(0x0004)
	struct FVector                                     SkyViewLocation;                                          // 0x09E0(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LevelInfo");
		return ptr;
	}


	void OnDisconnect();
	bool GetIsConnectDMZ();
	bool GetIsForceServiceBuild();
	bool GetIsServiceBuild();
	bool GetIsUseAdvCamShake();
	bool GetIsUseStanceToggle();
	bool GetIsUseMouseRevision();
	bool GetIsUseRagdoll();
	bool GetIsNoGore();
	bool GetIsTeenVersion();
	void ClearInvalidCache();
	void SetNoUpdateAllGSSS();
	class APlayerController* GetLocalPlayerController();
	void PreBeginPlay();
	void Reset();
	void ThisIsNeverExecuted();
	void ServerTravel(const string& URL, bool bItems);
	bool IsPendingConnection();
	string GetAddressURL();
	bool STATIC_IsSoftwareRendering();
	bool STATIC_IsDemoBuild();
	string GetLocalURL();
	void ResetPrecacheSkeletalMeshes();
	void AddPrecacheSkeletalMesh(class UMesh* mes);
	void ResetPrecacheStaticMesh();
	void AddPrecacheStaticMesh(class UStaticMesh* stat);
	void ResetPrecacheMaterials();
	void AddPrecacheMaterial(class UMaterial* mat);
	void FillPrecacheSkeletalMeshesArray(bool FullPrecache);
	void FillPrecacheStaticMeshesArray(bool FullPrecache);
	void PrecacheAnnouncements();
	void FillPrecacheMaterialsArray(bool FullPrecache);
	void PrecacheInit();
	class UClass* GetGameClass();
	void PostBeginPlay();
	void Tick(float DeltaTime);
	class ANavigationPoint* GetRandomNavigationPointAround(const struct FVector& V);
	class ANavigationPoint* GetClosestNavigationPoint(const struct FVector& V);
	bool IsVisibleByVisID(int sVisID, int eVisID, int sStance, int eStance);
	bool IsVisible(class ANavigationPoint* S, class ANavigationPoint* E, int sStance, int eStance);
	void UpdateInfluence();
	class AwAILevelBase* GetAILevel();
	class APhysicsVolume* GetPhysicsVolume(const struct FVector& loc);
	void ForceLoadTexture(class UTexture* Texture);
	void UpdateDistanceFogLOD(float LOD);
	bool IsEntry();
	void DetailChange(EDetailMode NewDetailMode);
	bool IsUseGraphicOption(const string& OptionName);
	class UwMatchMaker* GetMatchMaker();
	void SetCaptureQuality(int iValue);
	void SetCaptureResoultion(int iValue);
	bool IsCapturing();
	void SetCapture(bool bCapture);
	void ResetCombationSituationReview();
	bool LoadUsermove(const string& szPath, int nCommand, int nCombatNum, const string& szUserName);
	bool LoadUserzone(const string& szPath, int nCommand, const string& szUserName);
	bool LoadKilllog(const string& szPath, int nCommand, int nOption);
};


// Class Engine.TextToSpeechAlias
// 0x0018 (0x0044 - 0x002C)
class UTextToSpeechAlias : public UObject
{
public:
	struct FSpeechReplacement[]                        Aliases;                                                  // 0x002C(0x000C) (NeedCtorLink)
	string                                             RemoveCharacters;                                         // 0x0038(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.TextToSpeechAlias");
		return ptr;
	}

};


// Class Engine.AmbientSound
// 0x0014 (0x03EC - 0x03D8)
class AAmbientSound : public AKeypoint
{
public:
	struct FSoundEmitter[]                             SoundEmitters;                                            // 0x03D8(0x000C) (Edit, NeedCtorLink)
	float                                              AmbientVolume;                                            // 0x03E4(0x0004)
	bool                                               bPlaying;                                                 // 0x03E8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AmbientSound");
		return ptr;
	}

};


// Class Engine.Vignette
// 0x0010 (0x03E8 - 0x03D8)
class AVignette : public AActor
{
public:
	string                                             MapName;                                                  // 0x03D8(0x000C) (Edit, NeedCtorLink)
	class UClass*                                      GameClass;                                                // 0x03E4(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Vignette");
		return ptr;
	}


	void DrawVignette(class UCanvas* C, float Progress);
	void Init();
};


// Class Engine.Note
// 0x000C (0x03E4 - 0x03D8)
class ANote : public AActor
{
public:
	string                                             Text;                                                     // 0x03D8(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Note");
		return ptr;
	}

};


// Class Engine.wWeapon
// 0x032C (0x0778 - 0x044C)
class AwWeapon : public AInventory
{
public:
	class AwWeapon*                                    MyOldWeapon;                                              // 0x044C(0x0004)
	byte                                               bUseEkey;                                                 // 0x0450(0x0001)
	EeWeaponType                                       WeaponType;                                               // 0x0451(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x0452(0x0002) MISSED OFFSET
	class UwWeaponBaseParams*                          BaseParams;                                               // 0x0454(0x0004)
	class UClass*                                      ResParams;                                                // 0x0458(0x0004)
	string                                             BaseName;                                                 // 0x045C(0x000C) (NeedCtorLink)
	bool                                               bHoldFire;                                                // 0x0468(0x0004) (Net)
	float                                              fAccumulationOverHeat;                                    // 0x046C(0x0004) (Net)
	class UClass*                                      FireModeClass[0x3];                                       // 0x0470(0x0004) (Edit)
	class UwWeaponFire*                                FireMode[0x3];                                            // 0x047C(0x0004) (Edit)
	class AwAmmunition*                                Ammo[0x3];                                                // 0x0488(0x0004) (Edit, Net)
	FName                                              IdleAnim;                                                 // 0x0494(0x0004) (Edit)
	FName                                              RestAnim;                                                 // 0x0498(0x0004) (Edit)
	FName                                              RunAnim;                                                  // 0x049C(0x0004) (Edit)
	FName                                              SprintAnim;                                               // 0x04A0(0x0004) (Edit)
	FName                                              SelectAnim;                                               // 0x04A4(0x0004) (Edit)
	FName                                              SelectNewAnim;                                            // 0x04A8(0x0004) (Edit)
	FName                                              PutDownAnim;                                              // 0x04AC(0x0004) (Edit)
	FName                                              PutdownQuickAnim;                                         // 0x04B0(0x0004)
	FName                                              ProneMoveAnim;                                            // 0x04B4(0x0004)
	FName                                              SprintUpAnim;                                             // 0x04B8(0x0004)
	FName                                              DefenceAnim;                                              // 0x04BC(0x0004)
	float                                              IdleAnimRate;                                             // 0x04C0(0x0004) (Edit)
	float                                              RestAnimRate;                                             // 0x04C4(0x0004) (Edit)
	float                                              RunAnimRate;                                              // 0x04C8(0x0004) (Edit)
	float                                              SprintAnimRate;                                           // 0x04CC(0x0004) (Edit)
	float                                              SelectAnimRate;                                           // 0x04D0(0x0004) (Edit)
	float                                              SelectNewAnimRate;                                        // 0x04D4(0x0004) (Edit)
	float                                              PutDownAnimRate;                                          // 0x04D8(0x0004) (Edit)
	float                                              PutDownQuickAnimRate;                                     // 0x04DC(0x0004) (Edit)
	float                                              DefenceAnimRate;                                          // 0x04E0(0x0004) (Edit)
	string                                             SelectForce;                                              // 0x04E4(0x000C) (Edit, NeedCtorLink)
	string                                             FmodNullSound;                                            // 0x04F0(0x000C) (NeedCtorLink)
	int                                                BotMode;                                                  // 0x04FC(0x0004) (Edit)
	float                                              AIRating;                                                 // 0x0500(0x0004) (Edit)
	float                                              CurrentRating;                                            // 0x0504(0x0004)
	bool                                               bCanSelectNew;                                            // 0x0508(0x0004)
	bool                                               bDebugging;                                               // 0x0508(0x0004)
	bool                                               bNoVoluntarySwitch;                                       // 0x0508(0x0004)
	bool                                               bSpectated;                                               // 0x0508(0x0004)
	bool                                               bNoInstagibReplace;                                       // 0x0508(0x0004)
	bool                                               bInitOldMesh;                                             // 0x0508(0x0004)
	bool                                               bUseOldWeaponMesh;                                        // 0x0508(0x0004)
	bool                                               bEndOfRound;                                              // 0x0508(0x0004)
	bool                                               bNoAmmoInstances;                                         // 0x0508(0x0004)
	bool                                               bBerserk;                                                 // 0x0508(0x0004)
	bool                                               bQuickDropAnim;                                           // 0x0508(0x0004)
	bool                                               bQuickThrow;                                              // 0x0508(0x0004)
	bool                                               bMeleeWeapon;                                             // 0x0508(0x0004) (Edit)
	bool                                               bSniping;                                                 // 0x0508(0x0004) (Edit)
	bool                                               bShowChargingBar;                                         // 0x0508(0x0004)
	bool                                               bMatchWeapons;                                            // 0x0508(0x0004)
	bool                                               bCanThrow;                                                // 0x0508(0x0004) (Edit)
	bool                                               bForceSwitch;                                             // 0x0508(0x0004) (Edit)
	bool                                               bNotInPriorityList;                                       // 0x0508(0x0004) (Edit, Deprecated)
	bool                                               bNotInDemo;                                               // 0x0508(0x0004)
	int                                                AmmoCharge[0x3];                                          // 0x050C(0x0004) (Net)
	class UMesh*                                       OldMesh;                                                  // 0x0518(0x0004)
	string                                             OldPickup;                                                // 0x051C(0x000C) (NeedCtorLink)
	float                                              OldDrawScale;                                             // 0x0528(0x0004) (Edit)
	float                                              OldCenteredOffsetY;                                       // 0x052C(0x0004) (Edit)
	struct FVector                                     OldPlayerViewOffset;                                      // 0x0530(0x000C) (Edit)
	struct FVector                                     OldSmallViewOffset;                                       // 0x053C(0x000C) (Edit)
	struct FRotator                                    OldPlayerViewPivot;                                       // 0x0548(0x000C) (Edit)
	int                                                OldCenteredRoll;                                          // 0x0554(0x0004) (Edit)
	int                                                OldCenteredYaw;                                           // 0x0558(0x0004) (Edit)
	string                                             Description;                                              // 0x055C(0x000C) (Edit, Localized, NeedCtorLink, NoImport)
	bool                                               bPendingSwitch;                                           // 0x0568(0x0004) (Transient)
	struct FVector                                     EffectOffset;                                             // 0x056C(0x000C) (Edit)
	string                                             MessageNoAmmo;                                            // 0x0578(0x000C) (Edit, Localized, NeedCtorLink)
	float                                              DisplayFOV;                                               // 0x0584(0x0004) (Edit)
	EWeaponClientState                                 ClientState;                                              // 0x0588(0x0001) (Edit)
	byte                                               ExchangeFireModes;                                        // 0x0589(0x0001) (Edit)
	byte                                               Priority;                                                 // 0x058A(0x0001) (Edit)
	byte                                               DefaultPriority;                                          // 0x058B(0x0001) (Edit, Deprecated)
	float                                              Hand;                                                     // 0x058C(0x0004)
	float                                              RenderedHand;                                             // 0x0590(0x0004)
	struct FColor                                      HudColor;                                                 // 0x0594(0x0004)
	class AwWeapon*                                    OldWeapon;                                                // 0x0598(0x0004)
	struct FVector                                     SmallViewOffset;                                          // 0x059C(0x000C) (Edit)
	struct FVector                                     SmallEffectOffset;                                        // 0x05A8(0x000C) (Edit)
	float                                              CenteredOffsetY;                                          // 0x05B4(0x0004) (Edit)
	int                                                CenteredRoll;                                             // 0x05B8(0x0004) (Edit)
	int                                                CenteredYaw;                                              // 0x05BC(0x0004) (Edit)
	int                                                CustomCrosshair;                                          // 0x05C0(0x0004)
	struct FColor                                      CustomCrossHairColor;                                     // 0x05C4(0x0004)
	float                                              CustomCrossHairScale;                                     // 0x05C8(0x0004)
	string                                             CustomCrossHairTextureName;                               // 0x05CC(0x000C) (NeedCtorLink)
	class UTexture*                                    CustomCrossHairTexture;                                   // 0x05D8(0x0004)
	float                                              DownDelay;                                                // 0x05DC(0x0004)
	float                                              MinReloadPct;                                             // 0x05E0(0x0004)
	class AwSkinShell*                                 wHands;                                                   // 0x05E4(0x0004)
	string                                             szWeaponAttachmentName;                                   // 0x05E8(0x000C) (NeedCtorLink)
	class AwWeaponAcce*[]                              Parts;                                                    // 0x05F4(0x000C) (NeedCtorLink)
	bool                                               bSprint;                                                  // 0x0600(0x0004)
	string                                             szFireModeClass;                                          // 0x0604(0x000C) (NeedCtorLink)
	struct FVector                                     vStanceOffset;                                            // 0x0610(0x000C) (Transient)
	struct FVector                                     vPartsOffset;                                             // 0x061C(0x000C) (Transient)
	struct FVector                                     vBreathOffset;                                            // 0x0628(0x000C) (Transient)
	bool                                               bBreathOffsetXLeft;                                       // 0x0634(0x0004) (Transient)
	bool                                               bBreathOffsetYUp;                                         // 0x0634(0x0004) (Transient)
	float                                              fBreathOffsetReflecTime_X;                                // 0x0638(0x0004) (Transient)
	float                                              fBreathOffsetReflecTime_Y;                                // 0x063C(0x0004) (Transient)
	float                                              fBreathSeconds;                                           // 0x0640(0x0004) (Transient)
	float                                              fBreathRatio;                                             // 0x0644(0x0004)
	struct FVector                                     vAttackedOffset;                                          // 0x0648(0x000C) (Transient)
	struct FRotator                                    rAttackedRot;                                             // 0x0654(0x000C) (Transient)
	struct FRotator                                    rWalkingSwayRot;                                          // 0x0660(0x000C) (Transient)
	struct FRotator                                    rSwayDestRot;                                             // 0x066C(0x000C) (Transient)
	struct FRotator                                    rSwayRot;                                                 // 0x0678(0x000C) (Transient)
	struct FRotator                                    rSway_LastCameraRot;                                      // 0x0684(0x000C) (Transient)
	float                                              fSwayAccumTime_Pitch;                                     // 0x0690(0x0004) (Transient)
	float                                              fSwayAccumTime_Yaw;                                       // 0x0694(0x0004) (Transient)
	struct FRotator                                    rFiringSwayDestRot;                                       // 0x0698(0x000C) (Transient)
	struct FRotator                                    rFiringSwayRot;                                           // 0x06A4(0x000C) (Transient)
	struct FRotator                                    rFiringSway_LastCameraRot;                                // 0x06B0(0x000C) (Transient)
	float                                              fFiringSwayAccumTime_Pitch;                               // 0x06BC(0x0004) (Transient)
	float                                              fFiringSwayAccumTime_Yaw;                                 // 0x06C0(0x0004) (Transient)
	float                                              wFiringSwayDeltaTime;                                     // 0x06C4(0x0004)
	struct FRotator                                    rFiringSwayDestRot_Aim;                                   // 0x06C8(0x000C) (Transient)
	struct FRotator                                    rFiringSwayRot_Aim;                                       // 0x06D4(0x000C) (Transient)
	struct FRotator                                    rFiringSway_LastCameraRot_Aim;                            // 0x06E0(0x000C) (Transient)
	float                                              fFiringSwayAccumTime_Pitch_Aim;                           // 0x06EC(0x0004) (Transient)
	float                                              fFiringSwayAccumTime_Yaw_Aim;                             // 0x06F0(0x0004) (Transient)
	float                                              fMeleeDelay;                                              // 0x06F4(0x0004)
	float                                              fFireDelay;                                               // 0x06F8(0x0004)
	bool                                               bActiveMelee;                                             // 0x06FC(0x0004)
	bool                                               bActiveFire;                                              // 0x06FC(0x0004)
	int                                                iPainting_Item_ID;                                        // 0x0700(0x0004) (Net)
	byte                                               byActionThrowsWeapon;                                     // 0x0704(0x0001)
	EMeleeState                                        MeleeState;                                               // 0x0705(0x0001)
	byte                                               Padding01[0x2];                                           // 0x0706(0x0002) MISSED OFFSET
	float                                              fStancePivot;                                             // 0x0708(0x0004)
	bool                                               bLanding;                                                 // 0x070C(0x0004)
	bool                                               bQuickAimZoom;                                            // 0x070C(0x0004)
	bool                                               bQuickReload;                                             // 0x070C(0x0004)
	bool                                               bPickupChange;                                            // 0x070C(0x0004) (Net)
	bool                                               wt_TestAim;                                               // 0x070C(0x0004)
	int                                                wt_index;                                                 // 0x0710(0x0004)
	float                                              wt_RandomMul;                                             // 0x0714(0x0004)
	int                                                wt_BoundingMax;                                           // 0x0718(0x0004)
	float[]                                            wt_x;                                                     // 0x071C(0x000C) (NeedCtorLink)
	float[]                                            wt_y;                                                     // 0x0728(0x000C) (NeedCtorLink)
	float[]                                            wt_RandomWeight;                                          // 0x0734(0x000C) (NeedCtorLink)
	float                                              wtAim_RandomMul;                                          // 0x0740(0x0004)
	int                                                wtAim_BoundingMax;                                        // 0x0744(0x0004)
	float[]                                            wtAim_x;                                                  // 0x0748(0x000C) (NeedCtorLink)
	float[]                                            wtAim_y;                                                  // 0x0754(0x000C) (NeedCtorLink)
	float[]                                            wtAim_RandomWeight;                                       // 0x0760(0x000C) (NeedCtorLink)
	bool                                               bBlendSprint_AdsIdle;                                     // 0x076C(0x0004) (Transient)
	int                                                SRand_FireCount;                                          // 0x0770(0x0004)
	int                                                SRand_ReloadCount;                                        // 0x0774(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeapon");
		return ptr;
	}


	void SkillUseByWeapon(int Mode);
	void ServerMeleeFire();
	void ClientMeleeFire();
	void ServerThrowingWeapon();
	void ClientThrowingWeapon();
	void ActiveMeleeDelay();
	void ActiveFireDelay();
	int GetCurMagazineAmmoCount();
	int GetCurTotalAmmoCount();
	void ClientPlayDefence();
	void ClientQuickReload(bool bOn);
	void ServerQuickReload(bool bOn);
	void ClientQuickAimZoom(bool bOn);
	void ServerQuickAimZoom(bool bOn);
	void ClientAddMagazine();
	void ServerAddMagazine();
	int GetAmmountAddMagazine();
	void SetWalkingSwayRot(const struct FRotator& rRot);
	void SetAttackedRot(const struct FRotator& rRot);
	void SetAttackedOffset(const struct FVector& VOffset);
	void SetAmmoAmount(int Mode, int CurrentAmmo);
	void SetAmmoTotal(int Mode, int TotalAmmo);
	bool IsCanUseWeapon();
	void DelFireMode(int iMode);
	void CalcSwayRot(float fDeltaTime);
	void CalcFiringSwayRot(float fDeltaTime);
	void SetRandFiringSwayRot();
	void CalcBreathOffset();
	void CalcStanceOffset(float fDelta);
	float CalcDestPivot();
	bool IsExistParts(EAcceType Type);
	bool IsMeleeAttacking();
	bool IsPutdowning();
	bool IsWeaponChanging();
	bool IsReloading();
	bool GetSprint();
	void SetSprint(bool bValue);
	void AddParts(EAcceType Type, const string& szName, const string& szSkinName, const string& strHaveDotName, const struct FVector& AimDiff, int iItemID, int iPartsGroupID, bool bSightSub);
	void FireOne(int iFireMode);
	void AttachToPawn(class APawn* P);
	void AddPartsGroup(int iWeaponID, int iAddPartsID);
	void SetAddPartsParams();
	void wLoadOut(int iID, int iAddPartsID);
	void ReSetMeleeFireAnim_Client(int nWeaponID);
	void ReSetMeleeFireAnim_Server(int nWeaponID);
	void wLoadOut_Client(int iID, int iAddPartsID);
	void wLoadOut_Server(int iID, int iAddPartsID, bool bInGamePlaying);
	class UMaterial* Get1stCamouflageMt(int iItemID, byte byTeam);
	void SetHands_Client();
	void SetHands_Server();
	void SetHands();
	void SetResParams(class UClass* wRes);
	void SetFireModeClass_ToMode(class UwWeaponBaseParams* wBase);
	void SetBaseParams(class UwWeaponBaseParams* wBase);
	class UwWeaponFire* GetFireMode(byte Mode);
	void PawnUnpossessed();
	bool ShootHoop(class AController* B, const struct FVector& ShootLoc);
	bool ShouldFireWithoutTarget();
	bool CanHeal(class AActor* Other);
	bool WantsZoomFade();
	bool HandlePickupQuery(class APickup* Item);
	void DoReflectEffect(int Drain);
	bool CheckTryToDrive();
	bool CheckReflect(const struct FVector& HitLocation, int AmmoDrain, struct FVector* RefNormal);
	void PlayIdle();
	void AnimEnd(int Channel);
	void CheckSuperBerserk();
	void AdjustPlayerDamage(class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum);
	bool IsRapidFire();
	bool IsSingleFire();
	bool IsFiring();
	void Timer();
	void ImmediateStopFire();
	void StoreAmmo();
	void CancelFire(int Mode);
	void StopFire(int Mode);
	bool StartFire(int Mode);
	bool ReadyToFire(int Mode);
	void SetEKeyMeleeFire();
	void ServerCancelFire(byte Mode);
	void ServerStopFire(byte Mode);
	void SynchronizeWeapon(class AwWeapon* ClientWeapon);
	void ClientForceAmmoUpdate(int Mode, int NewAmount);
	void ServerStartFire(byte Mode);
	void ClientCancelFire(int Mode);
	void ClientStopFire(int Mode);
	void NotifyReloaded();
	void ClientStartFire(int Mode);
	void DoAutoSwitch();
	void OutOfAmmo();
	void ProcessMoveAni();
	void WeaponTick(float dt);
	void AltFire(float f);
	void Fire(float f);
	bool PutDown();
	void ServerActionThrowsWeapon(int Num);
	void ActionThrowsWeapon(int Num);
	void ServerFmodPlayOwnedSound(const string& SoundName, ESoundSlot Slot, float Pitch, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner);
	void BringUp(class AwWeapon* PrevWeapon);
	void ClientWeaponSet(bool bPossiblySwitch);
	void CheckPartsSet();
	void GiveAmmo(int M, class AWeaponPickup* WP, bool bJustSpawned);
	void GiveTo(class APawn* Other, class APickup* Pickup);
	void ClientWeaponThrown();
	void DetachFromPawn(class APawn* P);
	void DropFrom(const struct FVector& StartLocation, const struct FRotator& StartRotation);
	void RemoveWeapon();
	bool CanThrow();
	void HolderDied();
	class AwWeapon* NextWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon);
	class AwWeapon* PrevWeapon(class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon);
	class AwWeapon* WeaponChangeWID(int iWeaponID);
	class AwWeapon* WeaponChangeWClass(const FName& wClass);
	class AwWeapon* WeaponChange(byte f, bool bSilent);
	void ZeroFlashCount(int Mode);
	void IncrementFlashCount(int Mode);
	struct FVector GetEffectStart();
	struct FVector CenteredEffectStart();
	void GetViewAxes(struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis);
	void SetHand(float InHand);
	void PreDrawFPWeapon();
	void ApplyOffset();
	void ApplyOffset_Rot();
	void ApplyOffset_Trans();
	void RenderOverlays(class UCanvas* Canvas);
	void RenderScope(class UCanvas* Canv);
	bool WeaponCentered();
	void Reselect();
	void Destroyed();
	void SetGRI(class AGameReplicationInfo* G);
	bool CanAttack(class AActor* Other);
	bool SplashJump();
	float SuggestDefenseStyle();
	float SuggestAttackStyle();
	float GetAIRating();
	float RateSelf();
	struct FVector GetFireStart(const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	bool BotFire(bool bFinished, const FName& FiringMode);
	byte BestMode();
	void SetAITarget(class AActor* t);
	class AwWeapon* RecommendWeapon(float* rating);
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void Loaded();
	bool FireOnRelease();
	float RefireRate();
	float GetDamageRadius();
	bool RecommendSplashDamage();
	bool SplashDamage();
	void FireHack(byte Mode);
	bool FocusOnLeader(bool bLeaderFiring);
	bool RecommendLongRangedAttack();
	bool RecommendRangedAttack();
	float RangedAttackTime();
	void HackPlayFireSound();
	class UClass* GetDamageType();
	void ClientWriteStats(byte Mode, bool bMatch, bool bAllowFire, bool bDelay, bool bAlt, float wait);
	void StartDebugging();
	void NewDrawWeaponInfo(class UCanvas* C, float YPos);
	void DrawWeaponInfo(class UCanvas* C);
	void PostNetReceive();
	bool CheckOutOfAmmo();
	float DesireAmmo(class UClass* NewAmmoClass, bool bDetour);
	bool NeedAmmo(int Mode);
	bool HasAmmo();
	bool AddAmmo(int AmmoToAdd, int Mode);
	bool SeverConsumeAmmo(int Mode, float Load, bool bAmountNeededIsMax);
	float AmmoStatus(int Mode);
	void GetAmmoCount(float* MaxAmmoPrimary, float* CurAmmoPrimary);
	bool AmmoMaxed(int Mode);
	class UClass* AmmoPickupClass(int Mode);
	int AmmoAmount(int Mode);
	void FillToDefaultAmmo();
	void FillToInitialAmmo();
	int MaxAmmo(int Mode);
	void SuperMaxOutAmmo();
	void MaxOutAmmo();
	class UClass* GetAmmoClass(int Mode);
	float ChargeBar();
	void InitWeaponFires();
};


// Class Engine.PolyMarker
// 0x0000 (0x03D8 - 0x03D8)
class APolyMarker : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PolyMarker");
		return ptr;
	}

};


// Class Engine.ClipMarker
// 0x0000 (0x03D8 - 0x03D8)
class AClipMarker : public AKeypoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ClipMarker");
		return ptr;
	}

};


// Class Engine.Light
// 0x0014 (0x03EC - 0x03D8)
class ALight : public AActor
{
public:
	float                                              MinCoronaSize;                                            // 0x03D8(0x0004) (Edit)
	float                                              MaxCoronaSize;                                            // 0x03DC(0x0004) (Edit)
	float                                              CoronaRotation;                                           // 0x03E0(0x0004) (Edit)
	float                                              CoronaRotationOffset;                                     // 0x03E4(0x0004) (Edit)
	bool                                               UseOwnFinalBlend;                                         // 0x03E8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Light");
		return ptr;
	}

};


// Class Engine.ExportCacheCommandlet
// 0x0000 (0x01E0 - 0x01E0)
class UExportCacheCommandlet : public UCommandlet
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ExportCacheCommandlet");
		return ptr;
	}

};


// Class Engine.NullRenderDevice
// 0x0024 (0x00E8 - 0x00C4)
class UNullRenderDevice : public URenderDevice
{
public:
	byte                                               Padding00[0x24];                                          // 0x00C4(0x0024) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.NullRenderDevice");
		return ptr;
	}

};


// Class Engine.KRepulsor
// 0x0024 (0x03FC - 0x03D8)
class AKRepulsor : public AActor
{
public:
	bool                                               bEnableRepulsion;                                         // 0x03D8(0x0004) (Edit)
	bool                                               bRepulseWater;                                            // 0x03D8(0x0004) (Edit)
	bool                                               bRepulsorInContact;                                       // 0x03D8(0x0004)
	bool                                               bRepulsorOnWater;                                         // 0x03D8(0x0004)
	struct FVector                                     CheckDir;                                                 // 0x03DC(0x000C) (Edit)
	float                                              CheckDist;                                                // 0x03E8(0x0004) (Edit)
	float                                              Softness;                                                 // 0x03EC(0x0004) (Edit)
	float                                              PenScale;                                                 // 0x03F0(0x0004) (Edit)
	float                                              PenOffset;                                                // 0x03F4(0x0004) (Edit)
	struct FPointer                                    KContact;                                                 // 0x03F8(0x0004) (Const, Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KRepulsor");
		return ptr;
	}

};


// Class Engine.KVehicle
// 0x004C (0x12C8 - 0x127C)
class AKVehicle : public AVehicle
{
public:
	class UClass*                                      DestroyEffectClass;                                       // 0x127C(0x0004) (Edit)
	bool                                               bAutoDrive;                                               // 0x1280(0x0004) (Edit)
	bool                                               bVehicleIsFiring;                                         // 0x1280(0x0004)
	bool                                               bVehicleIsAltFiring;                                      // 0x1280(0x0004)
	struct FVector                                     CameraHistory[0x5];                                       // 0x1284(0x000C)
	int                                                NextHistorySlot;                                          // 0x12C0(0x0004)
	bool                                               bHistoryWarmup;                                           // 0x12C4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KVehicle");
		return ptr;
	}


	void Tick(float DeltaSeconds);
	void Destroyed();
	bool SpecialCalcView(class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation);
	bool KDriverLeave(bool bForceLeave);
	void ClientKDriverLeave(class APlayerController* PC);
	void KDriverEnter(class APawn* P);
	void ClientKDriverEnter(class APlayerController* PC);
	bool TryToDrive(class APawn* P);
	void KVehicleUpdateParams();
	void VehicleStateReceived();
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void GraphData(const string& DataName, float DataValue);
};


// Class Engine.KActor
// 0x0024 (0x03FC - 0x03D8)
class AKActor : public AActor
{
public:
	bool                                               bKTakeShot;                                               // 0x03D8(0x0004) (Edit)
	class USound*[]                                    ImpactSounds;                                             // 0x03DC(0x000C) (Edit, NeedCtorLink)
	float                                              ImpactVolume;                                             // 0x03E8(0x0004) (Edit)
	class UClass*                                      ImpactEffect;                                             // 0x03EC(0x0004) (Edit)
	bool                                               bOrientImpactEffect;                                      // 0x03F0(0x0004) (Edit)
	float                                              ImpactInterval;                                           // 0x03F4(0x0004) (Edit)
	float                                              LastImpactTime;                                           // 0x03F8(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KActor");
		return ptr;
	}


	void KImpact(class AActor* Other, const struct FVector& pos, const struct FVector& impactVel, const struct FVector& impactNorm);
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
};


// Class Engine.KTire
// 0x0080 (0x047C - 0x03FC)
class AKTire : public AKActor
{
public:
	class AKCarWheelJoint*                             WheelJoint;                                               // 0x03FC(0x0004)
	float                                              RollFriction;                                             // 0x0400(0x0004)
	float                                              LateralFriction;                                          // 0x0404(0x0004)
	float                                              RollSlip;                                                 // 0x0408(0x0004)
	float                                              LateralSlip;                                              // 0x040C(0x0004)
	float                                              MinSlip;                                                  // 0x0410(0x0004)
	float                                              SlipRate;                                                 // 0x0414(0x0004)
	float                                              Softness;                                                 // 0x0418(0x0004)
	float                                              Adhesion;                                                 // 0x041C(0x0004)
	float                                              Restitution;                                              // 0x0420(0x0004)
	bool                                               bTireOnGround;                                            // 0x0424(0x0004) (Const)
	float                                              GroundSlipVel;                                            // 0x0428(0x0004) (Const)
	struct FVector                                     GroundSlipVec;                                            // 0x042C(0x000C) (Const)
	float                                              SpinSpeed;                                                // 0x0438(0x0004) (Const)
	class UMaterial*                                   GroundMaterial;                                           // 0x043C(0x0004) (Const)
	EActor_ESurfaceTypes                               GroundSurfaceType;                                        // 0x0440(0x0001) (Const)
	byte                                               Padding00[0x3];                                           // 0x0441(0x0003) MISSED OFFSET
	struct FKRigidBodyState                            ReceiveState;                                             // 0x0444(0x0034)
	bool                                               bReceiveStateNew;                                         // 0x0478(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KTire");
		return ptr;
	}


	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	bool KUpdateState(struct FKRigidBodyState* NewState);
};


// Class Engine.KarmaParamsCollision
// 0x0050 (0x007C - 0x002C)
class UKarmaParamsCollision : public UObject
{
public:
	struct FPointer                                    KarmaData;                                                // 0x002C(0x0004) (Const, Transient)
	float                                              KScale;                                                   // 0x0030(0x0004) (Const)
	struct FVector                                     KScale3D;                                                 // 0x0034(0x000C) (Const)
	struct FVector                                     KAcceleration;                                            // 0x0040(0x000C)
	float                                              KFriction;                                                // 0x004C(0x0004) (Edit)
	float                                              KRestitution;                                             // 0x0050(0x0004) (Edit)
	float                                              KImpactThreshold;                                         // 0x0054(0x0004) (Edit)
	bool                                               bContactingLevel;                                         // 0x0058(0x0004) (Const)
	struct FVector                                     ContactRegionCenter;                                      // 0x005C(0x000C) (Const)
	struct FVector                                     ContactRegionNormal;                                      // 0x0068(0x000C) (Const)
	float                                              ContactRegionRadius;                                      // 0x0074(0x0004) (Const)
	float                                              ContactRegionNormalForce;                                 // 0x0078(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KarmaParamsCollision");
		return ptr;
	}


	void CalcContactRegion();
};


// Class Engine.KarmaParams
// 0x0064 (0x00E0 - 0x007C)
class UKarmaParams : public UKarmaParamsCollision
{
public:
	struct FPointer                                    KAng3;                                                    // 0x007C(0x0004) (Const, Transient)
	struct FPointer                                    KTriList;                                                 // 0x0080(0x0004) (Const, Transient)
	float                                              KLastVel;                                                 // 0x0084(0x0004) (Const, Transient)
	float                                              KMass;                                                    // 0x0088(0x0004) (Edit)
	float                                              KLinearDamping;                                           // 0x008C(0x0004) (Edit)
	float                                              KAngularDamping;                                          // 0x0090(0x0004) (Edit)
	float                                              KBuoyancy;                                                // 0x0094(0x0004) (Edit)
	bool                                               KStartEnabled;                                            // 0x0098(0x0004) (Edit)
	struct FVector                                     KStartLinVel;                                             // 0x009C(0x000C) (Edit)
	struct FVector                                     KStartAngVel;                                             // 0x00A8(0x000C) (Edit)
	bool                                               bKNonSphericalInertia;                                    // 0x00B4(0x0004) (Edit)
	float                                              KActorGravScale;                                          // 0x00B8(0x0004) (Edit)
	float                                              KVelDropBelowThreshold;                                   // 0x00BC(0x0004) (Edit)
	float                                              KMaxSpeed;                                                // 0x00C0(0x0004) (Edit)
	float                                              KMaxAngularSpeed;                                         // 0x00C4(0x0004) (Edit)
	bool                                               bHighDetailOnly;                                          // 0x00C8(0x0004) (Edit)
	bool                                               bClientOnly;                                              // 0x00C8(0x0004)
	bool                                               bKDoubleTickRate;                                         // 0x00C8(0x0004) (Edit, Const)
	bool                                               bKStayUpright;                                            // 0x00C8(0x0004) (Edit)
	bool                                               bKAllowRotate;                                            // 0x00C8(0x0004) (Edit)
	bool                                               bDestroyOnSimError;                                       // 0x00C8(0x0004)
	bool                                               bDestroyOnWorldPenetrate;                                 // 0x00C8(0x0004) (Edit)
	bool                                               bDoSafetime;                                              // 0x00C8(0x0004) (Edit)
	float                                              StayUprightStiffness;                                     // 0x00CC(0x0004) (Edit)
	float                                              StayUprightDamping;                                       // 0x00D0(0x0004) (Edit)
	class AKRepulsor*[]                                Repulsors;                                                // 0x00D4(0x000C) (Edit, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KarmaParams");
		return ptr;
	}

};


// Class Engine.KarmaParamsSkel
// 0x0038 (0x0118 - 0x00E0)
class UKarmaParamsSkel : public UKarmaParams
{
public:
	string                                             KSkeleton;                                                // 0x00E0(0x000C) (Edit, NeedCtorLink)
	bool                                               bKDoConvulsions;                                          // 0x00EC(0x0004) (Edit)
	bool                                               bRubbery;                                                 // 0x00EC(0x0004) (Edit)
	struct FRange                                      KConvulseSpacing;                                         // 0x00F0(0x0008) (Edit)
	struct FVector                                     KShotStart;                                               // 0x00F8(0x000C) (Transient)
	struct FVector                                     KShotEnd;                                                 // 0x0104(0x000C) (Transient)
	float                                              KShotStrength;                                            // 0x0110(0x0004) (Transient)
	bool                                               bKImportantRagdoll;                                       // 0x0114(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KarmaParamsSkel");
		return ptr;
	}

};


// Class Engine.KarmaParamsRBFull
// 0x0024 (0x0104 - 0x00E0)
class UKarmaParamsRBFull : public UKarmaParams
{
public:
	float                                              KInertiaTensor[0x6];                                      // 0x00E0(0x0004) (Edit)
	struct FVector                                     KCOMOffset;                                               // 0x00F8(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KarmaParamsRBFull");
		return ptr;
	}

};


// Class Engine.KMeshProps
// 0x0054 (0x0080 - 0x002C)
class UKMeshProps : public UObject
{
public:
	byte                                               Padding00[0x54];                                          // 0x002C(0x0054) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KMeshProps");
		return ptr;
	}

};


// Class Engine.KConstraint
// 0x0068 (0x0464 - 0x03FC)
class AKConstraint : public AKActor
{
public:
	struct FPointer                                    KConstraintData;                                          // 0x03FC(0x0004) (Const, Transient)
	class AActor*                                      KConstraintActor1;                                        // 0x0400(0x0004) (Edit)
	class AActor*                                      KConstraintActor2;                                        // 0x0404(0x0004) (Edit)
	FName                                              KConstraintBone1;                                         // 0x0408(0x0004) (Edit)
	FName                                              KConstraintBone2;                                         // 0x040C(0x0004) (Edit)
	bool                                               bKDisableCollision;                                       // 0x0410(0x0004) (Edit, Const)
	struct FVector                                     KPos1;                                                    // 0x0414(0x000C)
	struct FVector                                     KPriAxis1;                                                // 0x0420(0x000C)
	struct FVector                                     KSecAxis1;                                                // 0x042C(0x000C)
	struct FVector                                     KPos2;                                                    // 0x0438(0x000C)
	struct FVector                                     KPriAxis2;                                                // 0x0444(0x000C)
	struct FVector                                     KSecAxis2;                                                // 0x0450(0x000C)
	bool                                               bKForceFrameUpdate;                                       // 0x045C(0x0004) (Const)
	float                                              KForceThreshold;                                          // 0x0460(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KConstraint");
		return ptr;
	}


	void KForceExceed(float forceMag);
	void KGetConstraintTorque(struct FVector* Torque);
	void KGetConstraintForce(struct FVector* Force);
	void KUpdateConstraintParams();
};


// Class Engine.KCarWheelJoint
// 0x0038 (0x049C - 0x0464)
class AKCarWheelJoint : public AKConstraint
{
public:
	float                                              KSteerAngle;                                              // 0x0464(0x0004) (Edit)
	float                                              KProportionalGap;                                         // 0x0468(0x0004) (Edit)
	float                                              KMaxSteerTorque;                                          // 0x046C(0x0004) (Edit)
	float                                              KMaxSteerSpeed;                                           // 0x0470(0x0004) (Edit)
	bool                                               bKSteeringLocked;                                         // 0x0474(0x0004) (Edit)
	float                                              KMotorTorque;                                             // 0x0478(0x0004) (Edit)
	float                                              KMaxSpeed;                                                // 0x047C(0x0004) (Edit)
	float                                              KBraking;                                                 // 0x0480(0x0004) (Edit)
	float                                              KSuspLowLimit;                                            // 0x0484(0x0004) (Edit)
	float                                              KSuspHighLimit;                                           // 0x0488(0x0004) (Edit)
	float                                              KSuspStiffness;                                           // 0x048C(0x0004) (Edit)
	float                                              KSuspDamping;                                             // 0x0490(0x0004) (Edit)
	float                                              KSuspRef;                                                 // 0x0494(0x0004) (Edit)
	float                                              KWheelHeight;                                             // 0x0498(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KCarWheelJoint");
		return ptr;
	}

};


// Class Engine.KConeLimit
// 0x000C (0x0470 - 0x0464)
class AKConeLimit : public AKConstraint
{
public:
	float                                              KHalfAngle;                                               // 0x0464(0x0004) (Edit)
	float                                              KStiffness;                                               // 0x0468(0x0004) (Edit)
	float                                              KDamping;                                                 // 0x046C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KConeLimit");
		return ptr;
	}

};


// Class Engine.KHinge
// 0x0028 (0x048C - 0x0464)
class AKHinge : public AKConstraint
{
public:
	EHingeType                                         KHingeType;                                               // 0x0464(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0465(0x0003) MISSED OFFSET
	float                                              KStiffness;                                               // 0x0468(0x0004) (Edit)
	float                                              KDamping;                                                 // 0x046C(0x0004) (Edit)
	float                                              KDesiredAngVel;                                           // 0x0470(0x0004) (Edit)
	float                                              KMaxTorque;                                               // 0x0474(0x0004) (Edit)
	float                                              KDesiredAngle;                                            // 0x0478(0x0004) (Edit)
	float                                              KProportionalGap;                                         // 0x047C(0x0004) (Edit)
	float                                              KAltDesiredAngle;                                         // 0x0480(0x0004) (Edit)
	bool                                               KUseAltDesired;                                           // 0x0484(0x0004)
	float                                              KCurrentAngle;                                            // 0x0488(0x0004) (Const)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KHinge");
		return ptr;
	}

};


// Class Engine.KBSJoint
// 0x0000 (0x0464 - 0x0464)
class AKBSJoint : public AKConstraint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.KBSJoint");
		return ptr;
	}

};


// Class Engine.wWeatherEffect
// 0x00F4 (0x04CC - 0x03D8)
class AwWeatherEffect : public AActor
{
public:
	EWeatherType                                       WeatherType;                                              // 0x03D8(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x03D9(0x0003) MISSED OFFSET
	int                                                numParticles;                                             // 0x03DC(0x0004) (Edit)
	int                                                numActive;                                                // 0x03E0(0x0004) (Transient)
	struct FBox                                        Box;                                                      // 0x03E4(0x001C) (Transient)
	struct FVector                                     eyePos;                                                   // 0x0400(0x000C) (Transient)
	struct FVector                                     eyeDir;                                                   // 0x040C(0x000C) (Transient)
	struct FVector                                     spawnOrigin;                                              // 0x0418(0x000C) (Transient)
	struct FVector                                     eyeMoveVec;                                               // 0x0424(0x000C) (Transient)
	float                                              eyeVel;                                                   // 0x0430(0x0004) (Transient)
	float                                              deviation;                                                // 0x0434(0x0004) (Edit)
	float                                              maxPclEyeDist;                                            // 0x0438(0x0004) (Edit)
	float                                              numCols;                                                  // 0x043C(0x0004) (Edit)
	float                                              numRows;                                                  // 0x0440(0x0004) (Edit)
	float                                              numFrames;                                                // 0x0444(0x0004) (Transient)
	float                                              texU;                                                     // 0x0448(0x0004) (Transient)
	float                                              texV;                                                     // 0x044C(0x0004) (Transient)
	bool                                               noReference;                                              // 0x0450(0x0004) (Transient)
	struct FVector                                     spawnVecU;                                                // 0x0454(0x000C)
	struct FVector                                     spawnVecV;                                                // 0x0460(0x000C)
	struct FVector                                     spawnVel;                                                 // 0x046C(0x000C) (Edit)
	struct FRangeVector                                Position;                                                 // 0x0478(0x0018) (Edit)
	struct FRange                                      Speed;                                                    // 0x0490(0x0008) (Edit)
	struct FRange                                      Life;                                                     // 0x0498(0x0008) (Edit)
	struct FRange                                      Size;                                                     // 0x04A0(0x0008) (Edit)
	struct FRange                                      EyeSizeClamp;                                             // 0x04A8(0x0008) (Edit)
	bool                                               bForceAffected;                                           // 0x04B0(0x0004) (Edit)
	struct FWeatherPcl[]                               pcl;                                                      // 0x04B4(0x000C) (Transient, NeedCtorLink)
	class AVolume*[]                                   pclBlockers;                                              // 0x04C0(0x000C) (Transient, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeatherEffect");
		return ptr;
	}

};


// Class Engine.wProcMesh
// 0x0084 (0x045C - 0x03D8)
class AwProcMesh : public AActor
{
public:
	struct FProcMeshVertex[]                           Vertices;                                                 // 0x03D8(0x000C) (Const, NeedCtorLink)
	int[]                                              SectionOffsets;                                           // 0x03E4(0x000C) (Const, NeedCtorLink)
	float                                              Dampening;                                                // 0x03F0(0x0004) (Edit)
	struct FRange                                      DampeningRange;                                           // 0x03F4(0x0008) (Edit)
	struct FRange                                      MovementClamp;                                            // 0x03FC(0x0008) (Edit)
	struct FRange                                      ForceClamp;                                               // 0x0404(0x0008) (Edit)
	float                                              ForceAttenuation;                                         // 0x040C(0x0004) (Edit)
	float                                              Tension;                                                  // 0x0410(0x0004) (Edit)
	float                                              RestTension;                                              // 0x0414(0x0004) (Edit)
	bool                                               CheckCollision;                                           // 0x0418(0x0004) (Edit)
	float                                              Noise;                                                    // 0x041C(0x0004) (Edit)
	struct FRange                                      NoiseForce;                                               // 0x0420(0x0008) (Edit)
	struct FRange                                      NoiseTimer;                                               // 0x0428(0x0008) (Edit)
	float                                              NoiseCounter;                                             // 0x0430(0x0004) (Transient)
	EProcMeshType                                      ProcType;                                                 // 0x0434(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x0435(0x0003) MISSED OFFSET
	bool                                               bForceAffected;                                           // 0x0438(0x0004) (Edit)
	bool                                               bRigidEdges;                                              // 0x0438(0x0004) (Edit)
	struct FPointer                                    pProcData;                                                // 0x043C(0x0004) (Const, Transient)
	class UClass*                                      HitEffect;                                                // 0x0440(0x0004) (Edit)
	class UClass*                                      BigHitEffect;                                             // 0x0444(0x0004) (Edit)
	float                                              BigMomentumThreshold;                                     // 0x0448(0x0004) (Edit)
	float                                              BigTouchThreshold;                                        // 0x044C(0x0004) (Edit)
	float                                              ShootStrength;                                            // 0x0450(0x0004) (Edit)
	float                                              TouchStrength;                                            // 0x0454(0x0004) (Edit)
	float                                              InfluenceRadius;                                          // 0x0458(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wProcMesh");
		return ptr;
	}


	void Touch(class AActor* Other);
	void TakeDamage(int Damage, class APawn* instigatedBy, const struct FVector& HitLocation, const struct FVector& Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot);
	void ProcPling(const struct FVector& Position, float Strength, float Radius, struct FVector* EffectLocation, struct FVector* EffectNormal);
};


// Class Engine.wPickUpBase
// 0x0034 (0x040C - 0x03D8)
class AwPickUpBase : public AActor
{
public:
	class UClass*                                      PowerUp;                                                  // 0x03D8(0x0004) (Edit)
	float                                              SpawnHeight;                                              // 0x03DC(0x0004) (Edit)
	class UClass*                                      SpiralEmitter;                                            // 0x03E0(0x0004) (Edit)
	float                                              ExtraPathCost;                                            // 0x03E4(0x0004) (Edit)
	class APickup*                                     myPickUp;                                                 // 0x03E8(0x0004)
	class AEmitter*                                    myEmitter;                                                // 0x03EC(0x0004)
	class AInventorySpot*                              myMarker;                                                 // 0x03F0(0x0004)
	bool                                               bDelayedSpawn;                                            // 0x03F4(0x0004) (Edit)
	class UStaticMesh*                                 NewStaticMesh;                                            // 0x03F8(0x0004)
	struct FVector                                     NewPrePivot;                                              // 0x03FC(0x000C)
	float                                              NewDrawScale;                                             // 0x0408(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wPickUpBase");
		return ptr;
	}


	void SpawnPickup();
	void TurnOn();
	byte GetInventoryGroup();
	bool CheckForErrors();
	void PostBeginPlay();
};


// Class Engine.wGameStateStorageSender
// 0x0020 (0x03F8 - 0x03D8)
class AwGameStateStorageSender : public AActor
{
public:
	float                                              fElapsedTime;                                             // 0x03D8(0x0004)
	int                                                UserID;                                                   // 0x03DC(0x0004) (Net)
	string                                             OwnerName;                                                // 0x03E0(0x000C) (NeedCtorLink)
	class AwGameStateStorageSender*                    nextGSSS;                                                 // 0x03EC(0x0004)
	bool                                               bNoUpdateData;                                            // 0x03F0(0x0004)
	class AGameReplicationInfo*                        GRI;                                                      // 0x03F4(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGameStateStorageSender");
		return ptr;
	}


	class APlayerController* GetPlayerController();
	void ClientInitialize(int id, class APlayerController* PC);
	void Initialize(int id, class APlayerController* PC);
	void Destroyed();
	void PreBeginPlay();
	void SetGameState_OnlyClient();
	void SetScoreState_OnlyClient();
	void Tick(float DeltaTime);
	void ClientTick(float DeltaTime);
	void SetAllDataToInterventionUser(class AwGameStateStorageSender* ToGSSS);
	void SetToStorage_AllUserData();
	void ClientDeleteFromStorage_Weapon(int UserID, const string& strWeaponName);
	void DeleteFromStorage_Weapon(const string& strWeaponName);
	void ClientClearStorage(const string& sUserID);
	void ClearStorage();
	void ClientDeleteFromStorage(const string& sUserID, const string& Section, const string& sName);
	void DeleteFromStorage(const string& Section, const string& sName);
	void ClientSetToStorage3(const string& sUserID, const string& Section, const string& sName, const string& Type, const string& Value, const string& Section2, const string& sName2, const string& type2, const string& value2, const string& Section3, const string& sName3, const string& type3, const string& value3);
	void SetToStorage3(const string& Section, const string& sName, const string& Type, const string& Value, const string& Section2, const string& sName2, const string& type2, const string& value2, const string& Section3, const string& sName3, const string& type3, const string& value3);
	void ClientSetToStorage_Vehicle_Leave(int UserID);
	void ClientSetToStorage_Vehicle_Enter(int UserID, const string& strClassName, float Pos_X, float Pos_Y, float Pos_Z);
	void ClientSetToStorage_Skill_UpdateCall(int UserID, int nSkillID, bool bUpdateCall);
	void ClientSetToStorage_Skill_AddCount(int UserID, int nSkillID, byte byAddCount);
	void ClientSetToStorage_Skill_Used(int UserID, int nSkillID, bool bUsed);
	void ClientSetToStorage_Skill_IsEnable(int UserID, int nSkillID, bool bIsEnable);
	void ClientSetToStorage_PlayerState(int UserID, const string& strName, byte bPawnExistCondition);
	void ClientSetToStorage_WeaponAmmo(int UserID, const string& strName, int nTotalAmmo, int nCurrentAmmo);
	void ClientSetToStorage_AddWeapon(int UserID, const string& strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID);
	void ClientSetToStorage_OldWeapon(int UserID, int nWeaponID);
	void ClientSetToStorage_CurrentWeapon(int UserID, int nWeaponID);
	void SetToStorage_Vehicle_Leave();
	void SetToStorage_Vehicle_Enter(const string& strClassName, float Pos_X, float Pos_Y, float Pos_Z);
	void SetToStorage_Skill_UpdateCall(int nSkillID, bool bUpdateCall);
	void SetToStorage_Skill_AddCount(int nSkillID, byte byAddCount);
	void SetToStorage_Skill_Used(int nSkillID, bool bUsed);
	void SetToStorage_Skill_IsEnable(int nSkillID, bool bIsEnable);
	void SetToStorage_PlayerState(const string& strName, byte bPawnExistCondition);
	void SetToStorage_WeaponAmmo(const string& strName, int nTotalAmmo, int nCurrentAmmo);
	void SetToStorage_AddWeapon(const string& strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID);
	void SetToStorage_OldWeapon(int nWeaponID);
	void SetToStorage_CurrentWeapon(int nWeaponID);
	void LowWeapon_Delete(int UserID, const string& strWeaponName);
	void LowVehicleLeave_Set(int UserID);
	void LowVehicleEnter_Set(int UserID, const string& strClassName, float Pos_X, float Pos_Y, float Pos_Z);
	void LowSkill_UpdateCall_Set(int UserID, int nSkillID, bool bUpdateCall);
	void LowSkill_AddCount_Set(int UserID, int nSkillID, byte byAddCount);
	void LowSkill_Used_Set(int UserID, int nSkillID, bool bUsed);
	void LowSkill_IsEnable_Set(int UserID, int nSkillID, bool bIsEnable);
	void LowPlayerState_Set(int UserID, const string& strName, byte bPawnExistCondition);
	void LowWeaponAmmo_Set(int UserID, const string& strWeaponName, int nTotalAmmo, int nCurrentAmmo);
	void LowAddWeapon_Set(int UserID, const string& strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID);
	void LowOldWeapon_Set(int UserID, int nWeaponID);
	void LowCurrentWeapon_Set(int UserID, int nWeaponID);
	void ClientSetToStorage(const string& sUserID, const string& Section, const string& sName, const string& Type, const string& Value);
	void SetToStorage(const string& Section, const string& sName, const string& Type, const string& Value);
	bool GetValue(const string& Section, const string& sName, const string& Type, string* Value);
	void AllValues(const string& Section, const string& sName, string* Type, string* Value);
	void AllNames(const string& Section, string* sName);
	void LowClear(const string& sUserID);
	void LowDelete(const string& sUserID, const string& Section, const string& sName);
	void LowSet(const string& sUserID, const string& Section, const string& sName, const string& Type, const string& Value);
	void RemoveGSSS();
	void AddGSSS();
	void ForceSetOwner(class APlayerController* PC);
};


// Class Engine.wEmitter
// 0x01F0 (0x05C8 - 0x03D8)
class AwEmitter : public AActor
{
public:
	ExParticleTypes                                    mParticleType;                                            // 0x03D8(0x0001) (Edit)
	ExSpawningTypes                                    mSpawningType;                                            // 0x03D9(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x03DA(0x0002) MISSED OFFSET
	bool                                               mRegen;                                                   // 0x03DC(0x0004) (Edit)
	bool                                               mRegenPause;                                              // 0x03DC(0x0004) (Edit)
	float                                              mRegenOnTime[0x2];                                        // 0x03E0(0x0004) (Edit)
	float                                              mRegenOffTime[0x2];                                       // 0x03E8(0x0004) (Edit)
	int                                                mStartParticles;                                          // 0x03F0(0x0004) (Edit)
	int                                                mMaxParticles;                                            // 0x03F4(0x0004) (Edit)
	float                                              mDelayRange[0x2];                                         // 0x03F8(0x0004) (Edit)
	float                                              mLifeRange[0x2];                                          // 0x0400(0x0004) (Edit)
	float                                              mRegenRange[0x2];                                         // 0x0408(0x0004) (Edit)
	float                                              mRegenDist;                                               // 0x0410(0x0004) (Edit)
	FName                                              mSourceActor;                                             // 0x0414(0x0004) (Edit)
	FName                                              mChildName;                                               // 0x0418(0x0004) (Edit)
	class AwEmitter*                                   mChildEmitter;                                            // 0x041C(0x0004)
	class AStaticMeshActor*                            SourceStaticMesh;                                         // 0x0420(0x0004) (Edit)
	bool                                               bSuspendWhenNotVisible;                                   // 0x0424(0x0004) (Edit)
	bool                                               mDistanceAtten;                                           // 0x0424(0x0004) (Edit)
	struct FVector                                     mDirDev;                                                  // 0x0428(0x000C) (Edit)
	struct FVector                                     mPosDev;                                                  // 0x0434(0x000C) (Edit)
	struct FVector                                     mSpawnVecA;                                               // 0x0440(0x000C) (Edit, Net)
	struct FVector                                     mSpawnVecB;                                               // 0x044C(0x000C) (Edit)
	float                                              mSpeedRange[0x2];                                         // 0x0458(0x0004) (Edit)
	bool                                               mPosRelative;                                             // 0x0460(0x0004) (Edit)
	float                                              mMassRange[0x2];                                          // 0x0464(0x0004) (Edit)
	float                                              mAirResistance;                                           // 0x046C(0x0004) (Edit)
	bool                                               mCollision;                                               // 0x0470(0x0004) (Edit)
	float                                              mOwnerVelocityFactor;                                     // 0x0474(0x0004) (Edit)
	bool                                               mRandOrient;                                              // 0x0478(0x0004) (Edit)
	float                                              mSpinRange[0x2];                                          // 0x047C(0x0004) (Edit)
	float                                              mSizeRange[0x2];                                          // 0x0484(0x0004) (Edit)
	float                                              mGrowthRate;                                              // 0x048C(0x0004) (Edit)
	struct FColor                                      mColorRange[0x2];                                         // 0x0490(0x0004) (Edit)
	bool                                               mAttenuate;                                               // 0x0498(0x0004) (Edit)
	float                                              mAttenKa;                                                 // 0x049C(0x0004) (Edit)
	float                                              mAttenKb;                                                 // 0x04A0(0x0004) (Edit)
	EAttenFunc                                         mAttenFunc;                                               // 0x04A4(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x04A5(0x0003) MISSED OFFSET
	int                                                mpAttenFunc;                                              // 0x04A8(0x0004)
	bool                                               mRandTextures;                                            // 0x04AC(0x0004) (Edit)
	bool                                               mTileAnimation;                                           // 0x04AC(0x0004) (Edit)
	int                                                mNumTileColumns;                                          // 0x04B0(0x0004) (Edit)
	int                                                mNumTileRows;                                             // 0x04B4(0x0004) (Edit)
	bool                                               mUseMeshNodes;                                            // 0x04B8(0x0004) (Edit)
	bool                                               mRandMeshes;                                              // 0x04B8(0x0004) (Edit)
	class UStaticMesh*                                 mMeshNodes[0x8];                                          // 0x04BC(0x0004) (Edit)
	class UTexture*                                    mPosColorMapXY;                                           // 0x04DC(0x0004) (Edit)
	class UTexture*                                    mPosColorMapXZ;                                           // 0x04E0(0x0004) (Edit)
	class UTexture*                                    mLifeColorMap;                                            // 0x04E4(0x0004) (Edit)
	float                                              springK;                                                  // 0x04E8(0x0004) (Edit)
	float                                              springD;                                                  // 0x04EC(0x0004) (Edit)
	float                                              springMaxStretch;                                         // 0x04F0(0x0004) (Edit)
	float                                              springMaxCompress;                                        // 0x04F4(0x0004) (Edit)
	float                                              mColElasticity;                                           // 0x04F8(0x0004) (Edit)
	float                                              mAttraction;                                              // 0x04FC(0x0004) (Edit)
	bool                                               mColMakeSound;                                            // 0x0500(0x0004) (Edit)
	float                                              mWaveFrequency;                                           // 0x0504(0x0004) (Edit)
	float                                              mWaveAmplitude;                                           // 0x0508(0x0004) (Edit)
	float                                              mWaveShift;                                               // 0x050C(0x0004) (Edit)
	float                                              mBendStrength;                                            // 0x0510(0x0004) (Edit)
	bool                                               mWaveLockEnd;                                             // 0x0514(0x0004) (Edit)
	bool                                               bForceAffected;                                           // 0x0514(0x0004) (Edit)
	int                                                SystemHandle;                                             // 0x0518(0x0004) (Transient)
	int                                                Expire;                                                   // 0x051C(0x0004) (Transient)
	struct FPointer                                    mpParticles;                                              // 0x0520(0x0004) (Transient)
	int                                                mNumActivePcl;                                            // 0x0524(0x0004) (Transient)
	struct FPointer                                    mpIterator;                                               // 0x0528(0x0004) (Transient)
	int                                                mbSpinningNodes;                                          // 0x052C(0x0004) (Transient)
	struct FVector                                     mLastPos;                                                 // 0x0530(0x000C) (Transient)
	struct FVector                                     mLastVector;                                              // 0x053C(0x000C) (Transient)
	float                                              mTime;                                                    // 0x0548(0x0004) (Transient)
	float                                              mTDelta;                                                  // 0x054C(0x0004) (Transient)
	float                                              mRegenBias;                                               // 0x0550(0x0004) (Transient)
	float                                              mRegenTimer;                                              // 0x0554(0x0004) (Transient)
	float                                              mPauseTimer;                                              // 0x0558(0x0004) (Transient)
	struct FBox                                        mBounds;                                                  // 0x055C(0x001C) (Transient)
	struct FPlane                                      mSphere;                                                  // 0x0578(0x0010) (Transient)
	struct FVector                                     mDir;                                                     // 0x0588(0x000C) (Transient)
	int                                                mNumUpdates;                                              // 0x0594(0x0004) (Transient)
	int                                                mAtLeastOneFrame;                                         // 0x0598(0x0004) (Transient)
	int                                                mRenderableVerts;                                         // 0x059C(0x0004) (Transient)
	float                                              mTexU;                                                    // 0x05A0(0x0004) (Transient)
	float                                              mTexV;                                                    // 0x05A4(0x0004) (Transient)
	float                                              mTotalTiles;                                              // 0x05A8(0x0004) (Transient)
	float                                              mInvTileCols;                                             // 0x05AC(0x0004) (Transient)
	struct FPointer                                    mpSprings;                                                // 0x05B0(0x0004) (Transient)
	int                                                mNumSprings;                                              // 0x05B4(0x0004) (Transient)
	float                                              mWavePhaseA;                                              // 0x05B8(0x0004) (Transient)
	float                                              mWavePhaseB;                                              // 0x05BC(0x0004) (Transient)
	bool                                               blockOnNet;                                               // 0x05C0(0x0004) (Net)
	bool                                               bCallPreSpawn;                                            // 0x05C0(0x0004)
	int                                                mHeadIndex;                                               // 0x05C4(0x0004) (Transient)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wEmitter");
		return ptr;
	}


	void STATIC_PrecacheContent(class ALevelInfo* Level);
	void UpdatePrecacheMaterials();
	void Trigger(class AActor* Other, class APawn* EventInstigator);
	float ClampToMaxParticles(float InPart);
	void PreSpawned();
	void CollisionSound();
};


// Class Engine.SceneSubtitles
// 0x0010 (0x043C - 0x042C)
class ASceneSubtitles : public AInfo
{
public:
	string[]                                           SubTitles;                                                // 0x042C(0x000C) (Edit, Localized, NeedCtorLink)
	int                                                CurrentIndex;                                             // 0x0438(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.SceneSubtitles");
		return ptr;
	}


	void Reset();
	string GetSubTitles();
	void ProcessEvent(ESST_Mode Mode);
};


// Class Engine.GameStats
// 0x0028 (0x0454 - 0x042C)
class AGameStats : public AInfo
{
public:
	class AFileLog*                                    TempLog;                                                  // 0x042C(0x0004)
	class AGameReplicationInfo*                        GRI;                                                      // 0x0430(0x0004)
	bool                                               bShowBots;                                                // 0x0434(0x0004)
	string                                             Tab;                                                      // 0x0438(0x000C) (NeedCtorLink)
	bool                                               bLocalLog;                                                // 0x0444(0x0004) (Config, GlobalConfig)
	string                                             LogFileName;                                              // 0x0448(0x000C) (Config, GlobalConfig, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameStats");
		return ptr;
	}


	string GetLogFilename();
	void GameEvent(const string& GEvent, const string& Desc, class APlayerReplicationInfo* Who);
	void SpecialEvent(class APlayerReplicationInfo* Who, const string& Desc);
	void KillEvent(const string& KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage);
	void TeamScoreEvent(int Team, float Points, const string& Desc);
	void ScoreEvent(class APlayerReplicationInfo* Who, float Points, const string& Desc);
	void DisconnectEvent(class APlayerReplicationInfo* Who);
	void ConnectEvent(class APlayerReplicationInfo* Who);
	void EndGame(const string& Reason);
	void StartGame();
	void ServerInfo();
	void NewGame();
	string MapName();
	string TimeZone();
	string FullTimeDate();
	string Header();
	string TimeStamp();
	void Destroyed();
	void PostBeginPlay();
	void Logf(const string& LogString);
	void Shutdown();
	void Init();
	string GetMapFileName();
	string GetStatsIdentifier(class AController* C);
};


// Class Engine.FileLog
// 0x001C (0x0448 - 0x042C)
class AFileLog : public AInfo
{
public:
	struct FPointer                                    LogAr;                                                    // 0x042C(0x0004) (Transient)
	string                                             LogFileName;                                              // 0x0430(0x000C) (Const, NeedCtorLink)
	string                                             TempFileName;                                             // 0x043C(0x000C) (Const, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FileLog");
		return ptr;
	}


	void Logf(const string& LogString);
	void CloseLog();
	void OpenLog(const string& FName, const string& FExt, bool bOverwrite);
};


// Class Engine.LocalMessage
// 0x0024 (0x0450 - 0x042C)
class ALocalMessage : public AInfo
{
public:
	bool                                               bComplexString;                                           // 0x042C(0x0004) (Edit)
	bool                                               bIsSpecial;                                               // 0x042C(0x0004) (Edit)
	bool                                               bIsUnique;                                                // 0x042C(0x0004) (Edit)
	bool                                               bIsPartiallyUnique;                                       // 0x042C(0x0004) (Edit)
	bool                                               bIsConsoleMessage;                                        // 0x042C(0x0004) (Edit)
	bool                                               bFadeMessage;                                             // 0x042C(0x0004) (Edit)
	bool                                               bBeep;                                                    // 0x042C(0x0004) (Edit)
	int                                                Lifetime;                                                 // 0x0430(0x0004) (Edit)
	bool                                               bDrawWithTexture;                                         // 0x0434(0x0004) (Edit)
	class UClass*                                      ChildMessage;                                             // 0x0438(0x0004) (Edit)
	struct FColor                                      DrawColor;                                                // 0x043C(0x0004) (Edit)
	EDrawPivot                                         DrawPivot;                                                // 0x0440(0x0001) (Edit)
	EStackMode                                         StackMode;                                                // 0x0441(0x0001) (Edit)
	byte                                               Padding00[0x2];                                           // 0x0442(0x0002) MISSED OFFSET
	float                                              PosX;                                                     // 0x0444(0x0004) (Edit)
	float                                              PosY;                                                     // 0x0448(0x0004) (Edit)
	int                                                FontSize;                                                 // 0x044C(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LocalMessage");
		return ptr;
	}


	EMessageType STATIC_GetConsoleMessageType(int Switch);
	bool STATIC_IsConsoleMessage(int Switch);
	float STATIC_GetLifeTime(int Switch);
	int STATIC_GetFontSize(int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer);
	void STATIC_GetPos(int Switch, EDrawPivot* OutDrawPivot, EStackMode* OutStackMode, float* OutPosX, float* OutPosY);
	struct FColor STATIC_GetColor(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2);
	struct FColor STATIC_GetConsoleColor(class APlayerReplicationInfo* RelatedPRI_1);
	bool STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void STATIC_RemoveLocalizedMessage(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void STATIC_ClientReceiveEx(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, int iReserve);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_AssembleString(class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, const string& MessageString);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetRelatedString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void STATIC_RenderComplexMessage(class UCanvas* Canvas, const string& MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL);
};


// Class Engine.GameMessage
// 0x0114 (0x0564 - 0x0450)
class AGameMessage : public ALocalMessage
{
public:
	string                                             SwitchLevelMessage;                                       // 0x0450(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             LeftMessage;                                              // 0x045C(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             FailedTeamMessage;                                        // 0x0468(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             FailedPlaceMessage;                                       // 0x0474(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             FailedSpawnMessage;                                       // 0x0480(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             EnteredMessage;                                           // 0x048C(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             MaxedOutMessage;                                          // 0x0498(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             OvertimeMessage;                                          // 0x04A4(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             GlobalNameChange;                                         // 0x04B0(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             NewTeamMessage;                                           // 0x04BC(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             NewTeamMessageTrailer;                                    // 0x04C8(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             NoNameChange;                                             // 0x04D4(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             VoteStarted;                                              // 0x04E0(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             VotePassed;                                               // 0x04EC(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             MustHaveStats;                                            // 0x04F8(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             CantBeSpectator;                                          // 0x0504(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             CantBePlayer;                                             // 0x0510(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             CantBePlayerWaitNextRound;                                // 0x051C(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             BecameSpectator;                                          // 0x0528(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             NewPlayerMessage;                                         // 0x0534(0x000C) (Localized, NeedCtorLink)
	string                                             KickWarning;                                              // 0x0540(0x000C) (Localized, NeedCtorLink)
	string                                             NewSpecMessage;                                           // 0x054C(0x000C) (Localized, NeedCtorLink)
	string                                             SpecEnteredMessage;                                       // 0x0558(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameMessage");
		return ptr;
	}


	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.VolumeTimer
// 0x0008 (0x0434 - 0x042C)
class AVolumeTimer : public AInfo
{
public:
	class AActor*                                      A;                                                        // 0x042C(0x0004)
	float                                              TimerFrequency;                                           // 0x0430(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VolumeTimer");
		return ptr;
	}


	void Timer();
	void PostBeginPlay();
};


// Class Engine.wProjectile
// 0x0068 (0x049C - 0x0434)
class AwProjectile : public AProjectile
{
public:
	class UClass*                                      ExplosionClass;                                           // 0x0434(0x0004)
	class UClass*                                      ExplosionClass_dirt;                                      // 0x0438(0x0004)
	class UClass*                                      ExplosionClass_grass;                                     // 0x043C(0x0004)
	class UClass*                                      ExplosionClass_metal;                                     // 0x0440(0x0004)
	class UClass*                                      ExplosionClass_snow;                                      // 0x0444(0x0004)
	class UClass*                                      ExplosionClass_water;                                     // 0x0448(0x0004)
	class UClass*                                      ExplosionClass_wood;                                      // 0x044C(0x0004)
	int                                                iWeaponID;                                                // 0x0450(0x0004) (Net)
	class UwWeaponBaseParams*                          BaseParams;                                               // 0x0454(0x0004)
	class UClass*                                      ResParams;                                                // 0x0458(0x0004)
	bool                                               bExplodeCollide;                                          // 0x045C(0x0004)
	bool                                               bTakeDamage;                                              // 0x045C(0x0004)
	bool                                               bMustExplode;                                             // 0x045C(0x0004) (Net)
	class UMaterial*                                   mHitMaterial;                                             // 0x0460(0x0004)
	class AActor*                                      mHitActor;                                                // 0x0464(0x0004)
	int                                                Rotate_Pitch;                                             // 0x0468(0x0004) (Net)
	int                                                Rotate_Yaw;                                               // 0x046C(0x0004) (Net)
	int                                                Rotate_Roll;                                              // 0x0470(0x0004) (Net)
	struct FVector                                     vHostLocation;                                            // 0x0474(0x000C) (Net)
	bool                                               bIncExplosion;                                            // 0x0480(0x0004) (Net)
	int                                                Team;                                                     // 0x0484(0x0004) (Net)
	string                                             InstigatorName;                                           // 0x0488(0x000C) (Net, NeedCtorLink)
	float                                              fMinFlashReduceRate;                                      // 0x0494(0x0004)
	int                                                iInstigatorID;                                            // 0x0498(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wProjectile");
		return ptr;
	}


	void RecoverFromHostChange();
	void RecoverInstigator();
	void RumbleRadius(const struct FVector& HitLocation);
	void BlowUp(const struct FVector& HitLocation);
	void wLoadOut_SetStaticMesh(class UStaticMesh* stMesh);
	void wLoadOut(int iID);
	class UClass* GetExplosionClass();
	class UClass* GetExplosionClassByMaterial();
	class UClass* GetExplosionClassByActor();
	void DamageLog(class APawn* Victim, float fDam, float fDist);
	void SufferEffect(class APawn* Victim, float fDist, float fReduceRate);
	void HurtRadiusTutorial(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation);
	void HurtRadius(float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, const struct FVector& HitLocation);
	void Tick(float DeltaTime);
	void PostBeginPlay();
};


// Class Engine.wMessage_Quest
// 0x0074 (0x04C4 - 0x0450)
class AwMessage_Quest : public ALocalMessage
{
public:
	int                                                Code_Quest_Kill;                                          // 0x0450(0x0004)
	int                                                Code_Quest_AimedKill;                                     // 0x0454(0x0004)
	int                                                Code_Quest_HeadShotKill;                                  // 0x0458(0x0004)
	int                                                Code_Quest_MeeleAttackKill;                               // 0x045C(0x0004)
	int                                                Code_Quest_2Kill;                                         // 0x0460(0x0004)
	int                                                Code_Quest_3Kill;                                         // 0x0464(0x0004)
	int                                                Code_Quest_4Kill;                                         // 0x0468(0x0004)
	int                                                Code_Quest_5Kill;                                         // 0x046C(0x0004)
	int                                                Code_Quest_6Kill;                                         // 0x0470(0x0004)
	int                                                Code_Quest_7Kill;                                         // 0x0474(0x0004)
	int                                                Code_Quest_8Kill;                                         // 0x0478(0x0004)
	int                                                Code_Quest_9Kill;                                         // 0x047C(0x0004)
	int                                                Code_Quest_10Kill;                                        // 0x0480(0x0004)
	int                                                Code_Quest_15Kill;                                        // 0x0484(0x0004)
	int                                                Code_Quest_Assist;                                        // 0x0488(0x0004)
	int                                                Code_Quest_Death;                                         // 0x048C(0x0004)
	int                                                Code_Quest_CombatTime;                                    // 0x0490(0x0004)
	int                                                Code_Quest_MatchEnd;                                      // 0x0494(0x0004)
	int                                                Code_Quest_KillInBotMode;                                 // 0x0498(0x0004)
	int                                                Code_Quest_MatchEndInBotMode;                             // 0x049C(0x0004)
	int                                                Code_Quest_AcquireTrophy;                                 // 0x04A0(0x0004)
	int                                                Code_Quest_SprintTime;                                    // 0x04A4(0x0004)
	int                                                Code_Quest_RoundEndInBotMode;                             // 0x04A8(0x0004)
	int                                                Code_Quest_BestScoreInBotMode;                            // 0x04AC(0x0004)
	int                                                Code_Quest_BestAssistInBotMode;                           // 0x04B0(0x0004)
	int                                                Code_Quest_KillGrenade;                                   // 0x04B4(0x0004)
	string                                             AMessageQuestSound;                                       // 0x04B8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_Quest");
		return ptr;
	}


	void STATIC_PlaySoundMessageQuest(class APlayerController* P);
	void STATIC_ClientReceive_Type3(class APlayerController* P, int Switch, int iRDifficult, int iRMap);
	void STATIC_ClientReceive_Type2(class APlayerController* P, int Switch, int iRMode, int iRMap, int iRMin, int iRSec);
	void STATIC_ClientReceive_Type1(class APlayerController* P, int Switch, int iRWeaponType, int iRweaponId);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.wGameSettings
// 0x0650 (0x067C - 0x002C)
class UwGameSettings : public UObject
{
public:
	string                                             TeamGame_UserFriendlyName;                                // 0x002C(0x000C) (Localized, NeedCtorLink)
	string                                             TeamGame_ModeDescription;                                 // 0x0038(0x000C) (Localized, NeedCtorLink)
	string[]                                           TeamGame_TimeLimits;                                      // 0x0044(0x000C) (NeedCtorLink)
	string[]                                           TeamGame_Scores;                                          // 0x0050(0x000C) (NeedCtorLink)
	string[]                                           TeamGame_Scores_DefaultTimeLimits;                        // 0x005C(0x000C) (NeedCtorLink)
	string                                             TeamGame_ScoreDefault;                                    // 0x0068(0x000C) (NeedCtorLink)
	string[]                                           Bot_TeamGame_TimeLimits;                                  // 0x0074(0x000C) (NeedCtorLink)
	string[]                                           Bot_TeamGame_Scores;                                      // 0x0080(0x000C) (NeedCtorLink)
	string[]                                           Bot_TeamGame_Scores_DefaultTimeLimits;                    // 0x008C(0x000C) (NeedCtorLink)
	string                                             Bot_TeamGame_ScoreDefault;                                // 0x0098(0x000C) (NeedCtorLink)
	string                                             Domination_UserFriendlyName;                              // 0x00A4(0x000C) (Localized, NeedCtorLink)
	string                                             Domination_ModeDescription;                               // 0x00B0(0x000C) (Localized, NeedCtorLink)
	string[]                                           Domination_TimeLimits;                                    // 0x00BC(0x000C) (NeedCtorLink)
	string[]                                           Domination_Scores;                                        // 0x00C8(0x000C) (NeedCtorLink)
	string[]                                           Domination_Scores_DefaultTimeLimits;                      // 0x00D4(0x000C) (NeedCtorLink)
	string                                             Domination_ScoreDefault;                                  // 0x00E0(0x000C) (NeedCtorLink)
	string[]                                           Bot_Domination_TimeLimits;                                // 0x00EC(0x000C) (NeedCtorLink)
	string[]                                           Bot_Domination_Scores;                                    // 0x00F8(0x000C) (NeedCtorLink)
	string[]                                           Bot_Domination_Scores_DefaultTimeLimits;                  // 0x0104(0x000C) (NeedCtorLink)
	string                                             Bot_Domination_ScoreDefault;                              // 0x0110(0x000C) (NeedCtorLink)
	string                                             SD_UserFriendlyName;                                      // 0x011C(0x000C) (Localized, NeedCtorLink)
	string                                             SD_ModeDescription;                                       // 0x0128(0x000C) (Localized, NeedCtorLink)
	string[]                                           SD_TimeLimits;                                            // 0x0134(0x000C) (NeedCtorLink)
	string[]                                           SD_Scores;                                                // 0x0140(0x000C) (NeedCtorLink)
	string[]                                           SD_Scores_DefaultTimeLimits;                              // 0x014C(0x000C) (NeedCtorLink)
	string                                             SD_ScoreDefault;                                          // 0x0158(0x000C) (NeedCtorLink)
	string                                             DOA_UserFriendlyName;                                     // 0x0164(0x000C) (Localized, NeedCtorLink)
	string                                             DOA_ModeDescription;                                      // 0x0170(0x000C) (Localized, NeedCtorLink)
	string[]                                           DOA_TimeLimits;                                           // 0x017C(0x000C) (NeedCtorLink)
	string[]                                           DOA_Scores;                                               // 0x0188(0x000C) (NeedCtorLink)
	string[]                                           DOA_Scores_DefaultTimeLimits;                             // 0x0194(0x000C) (NeedCtorLink)
	string                                             DOA_ScoreDefault;                                         // 0x01A0(0x000C) (NeedCtorLink)
	int[]                                              DOA_UserCount;                                            // 0x01AC(0x000C) (NeedCtorLink)
	int                                                DOA_UserCount_Default;                                    // 0x01B8(0x0004)
	string                                             SBT_UserFriendlyName;                                     // 0x01BC(0x000C) (Localized, NeedCtorLink)
	string                                             SBT_ModeDescription;                                      // 0x01C8(0x000C) (Localized, NeedCtorLink)
	string[]                                           SBT_TimeLimits;                                           // 0x01D4(0x000C) (NeedCtorLink)
	string[]                                           SBT_Scores;                                               // 0x01E0(0x000C) (NeedCtorLink)
	string[]                                           SBT_Scores_DefaultTimeLimits;                             // 0x01EC(0x000C) (NeedCtorLink)
	string                                             SBT_ScoreDefault;                                         // 0x01F8(0x000C) (NeedCtorLink)
	string                                             COL_UserFriendlyName;                                     // 0x0204(0x000C) (Localized, NeedCtorLink)
	string                                             COL_ModeDescription;                                      // 0x0210(0x000C) (Localized, NeedCtorLink)
	string[]                                           COL_TimeLimits;                                           // 0x021C(0x000C) (NeedCtorLink)
	string[]                                           COL_Scores;                                               // 0x0228(0x000C) (NeedCtorLink)
	string[]                                           COL_Scores_DefaultTimeLimits;                             // 0x0234(0x000C) (NeedCtorLink)
	string                                             COL_ScoreDefault;                                         // 0x0240(0x000C) (NeedCtorLink)
	string                                             Medal_UserFriendlyName;                                   // 0x024C(0x000C) (Localized, NeedCtorLink)
	string                                             Medal_ModeDescription;                                    // 0x0258(0x000C) (Localized, NeedCtorLink)
	string[]                                           Medal_TimeLimits;                                         // 0x0264(0x000C) (NeedCtorLink)
	string[]                                           Medal_Scores;                                             // 0x0270(0x000C) (NeedCtorLink)
	string[]                                           Medal_Scores_DefaultTimeLimits;                           // 0x027C(0x000C) (NeedCtorLink)
	string                                             Medal_ScoreDefault;                                       // 0x0288(0x000C) (NeedCtorLink)
	int[]                                              Medal_UserCount;                                          // 0x0294(0x000C) (NeedCtorLink)
	int                                                Medal_UserCount_Default;                                  // 0x02A0(0x0004)
	string                                             Deathmatch_UserFriendlyName;                              // 0x02A4(0x000C) (Localized, NeedCtorLink)
	string                                             DeathMatch_ModeDescription;                               // 0x02B0(0x000C) (Localized, NeedCtorLink)
	string[]                                           Deathmatch_TimeLimits;                                    // 0x02BC(0x000C) (NeedCtorLink)
	string[]                                           Deathmatch_Scores;                                        // 0x02C8(0x000C) (NeedCtorLink)
	string[]                                           Deathmatch_Scores_DefaultTimeLimits;                      // 0x02D4(0x000C) (NeedCtorLink)
	string                                             Deathmatch_ScoreDefault;                                  // 0x02E0(0x000C) (NeedCtorLink)
	string[]                                           Bot_Deathmatch_TimeLimits;                                // 0x02EC(0x000C) (NeedCtorLink)
	string[]                                           Bot_Deathmatch_Scores;                                    // 0x02F8(0x000C) (NeedCtorLink)
	string[]                                           Bot_Deathmatch_Scores_DefaultTimeLimits;                  // 0x0304(0x000C) (NeedCtorLink)
	string                                             Bot_Deathmatch_ScoreDefault;                              // 0x0310(0x000C) (NeedCtorLink)
	string                                             TeamGameAI_UserFriendlyName;                              // 0x031C(0x000C) (Localized, NeedCtorLink)
	string                                             DominationAI_UserFriendlyName;                            // 0x0328(0x000C) (Localized, NeedCtorLink)
	string                                             DeathMatchAI_UserFriendlyName;                            // 0x0334(0x000C) (Localized, NeedCtorLink)
	string                                             TeamGameBeginnerAI_UserFriendlyName;                      // 0x0340(0x000C) (Localized, NeedCtorLink)
	string                                             TeamGameBeginner_ModeDescription;                         // 0x034C(0x000C) (Localized, NeedCtorLink)
	string                                             Tutorial_UserFriendlyName;                                // 0x0358(0x000C) (Localized, NeedCtorLink)
	string                                             Tutorial_ModeDescription;                                 // 0x0364(0x000C) (Localized, NeedCtorLink)
	string[]                                           Tutorial_TimeLimits;                                      // 0x0370(0x000C) (NeedCtorLink)
	string[]                                           Tutorial_Scores;                                          // 0x037C(0x000C) (NeedCtorLink)
	string[]                                           Tutorial_Scores_DefaultTimeLimits;                        // 0x0388(0x000C) (NeedCtorLink)
	string                                             Tutorial_ScoreDefault;                                    // 0x0394(0x000C) (NeedCtorLink)
	int[]                                              Tutorial_UserCount;                                       // 0x03A0(0x000C) (NeedCtorLink)
	int                                                Tutorial_UserCount_Default;                               // 0x03AC(0x0004)
	string                                             Defence_UserFriendlyName;                                 // 0x03B0(0x000C) (Localized, NeedCtorLink)
	string                                             Defence_ModeDescription;                                  // 0x03BC(0x000C) (Localized, NeedCtorLink)
	string[]                                           Defence_TimeLimits;                                       // 0x03C8(0x000C) (NeedCtorLink)
	string[]                                           Defence_Scores;                                           // 0x03D4(0x000C) (NeedCtorLink)
	string[]                                           Defence_Scores_DefaultTimeLimits;                         // 0x03E0(0x000C) (NeedCtorLink)
	string                                             Defence_ScoreDefault;                                     // 0x03EC(0x000C) (NeedCtorLink)
	int[]                                              Defence_UserCount;                                        // 0x03F8(0x000C) (NeedCtorLink)
	int                                                Defence_UserCount_Default;                                // 0x0404(0x0004)
	string                                             Alien_UserFriendlyName;                                   // 0x0408(0x000C) (Localized, NeedCtorLink)
	string                                             Alien_ModeDescription;                                    // 0x0414(0x000C) (Localized, NeedCtorLink)
	string[]                                           Alien_TimeLimits;                                         // 0x0420(0x000C) (NeedCtorLink)
	string[]                                           Alien_Scores;                                             // 0x042C(0x000C) (NeedCtorLink)
	string[]                                           Alien_Scores_DefaultTimeLimits;                           // 0x0438(0x000C) (NeedCtorLink)
	string                                             Alien_ScoreDefault;                                       // 0x0444(0x000C) (NeedCtorLink)
	int[]                                              Alien_UserCount;                                          // 0x0450(0x000C) (NeedCtorLink)
	int                                                Alien_UserCount_Default;                                  // 0x045C(0x0004)
	string                                             Alien_TeamName[0x2];                                      // 0x0460(0x000C) (Localized, NeedCtorLink)
	string[]                                           Capacities;                                               // 0x0478(0x000C) (NeedCtorLink)
	string                                             CapacityDefault;                                          // 0x0484(0x000C) (NeedCtorLink)
	int[]                                              UserCount;                                                // 0x0490(0x000C) (NeedCtorLink)
	int                                                UserCount_Default;                                        // 0x049C(0x0004)
	int[]                                              Domination_UserCount;                                     // 0x04A0(0x000C) (NeedCtorLink)
	int                                                Domination_UserCount_Default;                             // 0x04AC(0x0004)
	int[]                                              SD_UserCount;                                             // 0x04B0(0x000C) (NeedCtorLink)
	int                                                SD_UserCount_Default;                                     // 0x04BC(0x0004)
	int[]                                              DeathMatch_UserCount;                                     // 0x04C0(0x000C) (NeedCtorLink)
	int                                                DeathMatch_UserCount_Default;                             // 0x04CC(0x0004)
	int[]                                              Bot_UserCount;                                            // 0x04D0(0x000C) (NeedCtorLink)
	int                                                Bot_UserCount_Default;                                    // 0x04DC(0x0004)
	int[]                                              Bot_DeathMatch_UserCount;                                 // 0x04E0(0x000C) (NeedCtorLink)
	int                                                Bot_DeathMatch_UserCount_Default;                         // 0x04EC(0x0004)
	string[]                                           Hardcores;                                                // 0x04F0(0x000C) (NeedCtorLink)
	string                                             HardcoreDefault;                                          // 0x04FC(0x000C) (NeedCtorLink)
	string                                             DefaultMap;                                               // 0x0508(0x000C) (NeedCtorLink)
	string                                             DefaultGameModeClass;                                     // 0x0514(0x000C) (NeedCtorLink)
	string                                             SBTGameModeClass;                                         // 0x0520(0x000C) (NeedCtorLink)
	string                                             SDGameModeClass;                                          // 0x052C(0x000C) (NeedCtorLink)
	string                                             TeamDeathGameModeClass;                                   // 0x0538(0x000C) (NeedCtorLink)
	string                                             DominationGameModeClass;                                  // 0x0544(0x000C) (NeedCtorLink)
	string                                             FreeForAllGameModeClass;                                  // 0x0550(0x000C) (NeedCtorLink)
	string                                             COLGameModeClass;                                         // 0x055C(0x000C) (NeedCtorLink)
	string                                             Bot_TeamDeathModeClass;                                   // 0x0568(0x000C) (NeedCtorLink)
	string                                             Bot_DominationGameModeClass;                              // 0x0574(0x000C) (NeedCtorLink)
	string                                             Bot_FreeForAllGameModeClass;                              // 0x0580(0x000C) (NeedCtorLink)
	string                                             DefenceGameModeClass;                                     // 0x058C(0x000C) (NeedCtorLink)
	string                                             BotModeDesc_AF;                                           // 0x0598(0x000C) (Localized, NeedCtorLink)
	string                                             BotModeDesc_RSA;                                          // 0x05A4(0x000C) (Localized, NeedCtorLink)
	string                                             BotModeDesc_AFvsRSA;                                      // 0x05B0(0x000C) (Localized, NeedCtorLink)
	int[]                                              BotNum0_Default;                                          // 0x05BC(0x000C) (NeedCtorLink)
	int[]                                              BotNum1_Default;                                          // 0x05C8(0x000C) (NeedCtorLink)
	int[]                                              BotUserTeam_Default;                                      // 0x05D4(0x000C) (NeedCtorLink)
	int[]                                              BotDifficulty_Default;                                    // 0x05E0(0x000C) (NeedCtorLink)
	string                                             WeaponRestriction_All;                                    // 0x05EC(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_KnifeOnly;                              // 0x05F8(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_PistolOnly;                             // 0x0604(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_GrenadeOnly;                            // 0x0610(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_RPGOnly;                                // 0x061C(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_SROnly;                                 // 0x0628(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_SRBan;                                  // 0x0634(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_FlameThrower;                           // 0x0640(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_ShotgunOnly;                            // 0x064C(0x000C) (Localized, NeedCtorLink)
	string                                             WeaponRestriction_MGOnly;                                 // 0x0658(0x000C) (Localized, NeedCtorLink)
	string                                             RespawnType[0x2];                                         // 0x0664(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGameSettings");
		return ptr;
	}


	string STATIC_GetRespawnTypeByIndex(int Index);
	int[] STATIC_GetGameModeDispOrder();
	bool STATIC_IsAllowedWeaponRest(int Index);
	string[] STATIC_GetWeaponRestrictions();
	string[] STATIC_GetBotModeTeam(int BotModeIdx);
	string STATIC_GetBotModeTeamByIndex(int Index);
	string STATIC_GetWeaponRestrictionByIndex(int Index);
	string STATIC_GetDefaultScore(const string& ClassName);
	string STATIC_GetDefaultScore_ModeNum(int ModeNum);
	string STATIC_GetDefaultTimeLimit(const string& ClassName, const string& Score);
	string STATIC_GetDefaultTimeLimit_ModeNum(int ModeNum, const string& Score);
	struct FGameModeInfo[] STATIC_GetAllGameModesAtServiceBuild();
	struct FGameModeInfo[] STATIC_GetAllGameModes();
	int STATIC_GetModeCount();
	int STATIC_GetModeIndex_Alien();
	int STATIC_GetModeIndex_DOA();
	int STATIC_GetModeIndex_Defence();
	int STATIC_GetModeIndex_BotTeamDeathBeginner();
	int STATIC_GetModeIndex_COL();
	int STATIC_GetModeIndex_Medal();
	int STATIC_GetModeIndex_BotTutorial();
	int STATIC_GetModeIndex_BotDeathMatch();
	int STATIC_GetModeIndex_BotDomination();
	int STATIC_GetModeIndex_BotTeamDeath();
	int STATIC_GetModeIndex_Sabotage();
	int STATIC_GetModeIndex_Domination();
	int STATIC_GetModeIndex_DeathMatch();
	int STATIC_GetModeIndex_SD();
	int STATIC_GetModeIndex_TeamDeath();
	bool STATIC_IsBotModeIndex(int Index);
	struct FGameModeInfo STATIC_GetGameModeByIndex(int Index);
	int STATIC_GetRespawnType(class UwMapInfo* mInfo, int nSelGameMode);
	struct FGameModeInfo STATIC_GetGameModeByClass(const string& ClassName);
};


// Class Engine.wMessage_Game
// 0x0CB0 (0x1100 - 0x0450)
class AwMessage_Game : public ALocalMessage
{
public:
	string                                             strCantProne;                                             // 0x0450(0x000C) (Localized, NeedCtorLink)
	string                                             strWinMatch;                                              // 0x045C(0x000C) (Localized, NeedCtorLink)
	string                                             strLoseMatch;                                             // 0x0468(0x000C) (Localized, NeedCtorLink)
	string                                             EnterSuddenDeath;                                         // 0x0474(0x000C) (Localized, NeedCtorLink)
	string                                             UAVOnlineEnemy;                                           // 0x0480(0x000C) (Localized, NeedCtorLink)
	string                                             UAVOnlineAlly;                                            // 0x048C(0x000C) (Localized, NeedCtorLink)
	string                                             strTakingLead;                                            // 0x0498(0x000C) (Localized, NeedCtorLink)
	string                                             strFallingBehind;                                         // 0x04A4(0x000C) (Localized, NeedCtorLink)
	string                                             strEndingWinning;                                         // 0x04B0(0x000C) (Localized, NeedCtorLink)
	string                                             strEndingLosing;                                          // 0x04BC(0x000C) (Localized, NeedCtorLink)
	string                                             strContinueFromChangeHost;                                // 0x04C8(0x000C) (Localized, NeedCtorLink)
	string                                             strSDAllyPlantedBomb;                                     // 0x04D4(0x000C) (Localized, NeedCtorLink)
	string                                             strSDEnemyPlantedBomb;                                    // 0x04E0(0x000C) (Localized, NeedCtorLink)
	string                                             strSDAllyDefusedBomb;                                     // 0x04EC(0x000C) (Localized, NeedCtorLink)
	string                                             strSDEnemyDefusedBomb;                                    // 0x04F8(0x000C) (Localized, NeedCtorLink)
	string                                             strSDAllyGotTheBomb;                                      // 0x0504(0x000C) (Localized, NeedCtorLink)
	string                                             strSDAllyLostTheBomb;                                     // 0x0510(0x000C) (Localized, NeedCtorLink)
	string                                             strSDIGotTheBomb;                                         // 0x051C(0x000C) (Localized, NeedCtorLink)
	string                                             strSDAllyThrowTheBomb;                                    // 0x0528(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTAllyGotTheBomb;                                     // 0x0534(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTEnemyGotTheBomb;                                    // 0x0540(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTIGotTheBomb;                                        // 0x054C(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTAllyLostTheBomb;                                    // 0x0558(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTAllyPlantedBomb;                                    // 0x0564(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTEnemyPlantedBomb;                                   // 0x0570(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTAllyBombDefused;                                    // 0x057C(0x000C) (Localized, NeedCtorLink)
	string                                             strSBTEnemyBombDefused;                                   // 0x0588(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMAllyCapturedAll;                                    // 0x0594(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMEnemyCapturedAll;                                   // 0x05A0(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMAllyCapturingA;                                     // 0x05AC(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMAllyCapturingB;                                     // 0x05B8(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMAllyCapturingC;                                     // 0x05C4(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMEnemyCapturingA;                                    // 0x05D0(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMEnemyCapturingB;                                    // 0x05DC(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMEnemyCapturingC;                                    // 0x05E8(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMAllyCapturedA;                                      // 0x05F4(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMAllyCapturedB;                                      // 0x0600(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMAllyCapturedC;                                      // 0x060C(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMEnemyCapturedA;                                     // 0x0618(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMEnemyCapturedB;                                     // 0x0624(0x000C) (Localized, NeedCtorLink)
	string                                             strDOMEnemyCapturedC;                                     // 0x0630(0x000C) (Localized, NeedCtorLink)
	string                                             strFFATakingLead;                                         // 0x063C(0x000C) (Localized, NeedCtorLink)
	string                                             strFFAFallingBehind;                                      // 0x0648(0x000C) (Localized, NeedCtorLink)
	string                                             strFFAEndingWinning;                                      // 0x0654(0x000C) (Localized, NeedCtorLink)
	string                                             strFFAEndingLosing;                                       // 0x0660(0x000C) (Localized, NeedCtorLink)
	string                                             strMouseSenseChange;                                      // 0x066C(0x000C) (Localized, NeedCtorLink)
	string                                             strMouseSenseChangeAim;                                   // 0x0678(0x000C) (Localized, NeedCtorLink)
	string                                             strGotMedal;                                              // 0x0684(0x000C) (Localized, NeedCtorLink)
	string                                             strGotMedalAlly;                                          // 0x0690(0x000C) (Localized, NeedCtorLink)
	string                                             strGotMedalEnemy;                                         // 0x069C(0x000C) (Localized, NeedCtorLink)
	string                                             strGotBlackBox;                                           // 0x06A8(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyGreanade;                                          // 0x06B4(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyStunGreanade;                                      // 0x06C0(0x000C) (Localized, NeedCtorLink)
	string                                             strAllySmokeGreanade;                                     // 0x06CC(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyGasGreanade;                                       // 0x06D8(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyClaymore;                                          // 0x06E4(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyTimeC4;                                            // 0x06F0(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyIncGrenade;                                        // 0x06FC(0x000C) (Localized, NeedCtorLink)
	string                                             strAllySplitGrenade;                                      // 0x0708(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyMG;                                               // 0x0714(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyTank;                                             // 0x0720(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyGreanade;                                         // 0x072C(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyRPG;                                              // 0x0738(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyReload;                                            // 0x0744(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyDie;                                               // 0x0750(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyKillEnemy;                                         // 0x075C(0x000C) (Localized, NeedCtorLink)
	string                                             strSelfHelicopter;                                        // 0x0768(0x000C) (Localized, NeedCtorLink)
	string                                             strSelfArtillery;                                         // 0x0774(0x000C) (Localized, NeedCtorLink)
	string                                             strSelfUAV;                                               // 0x0780(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyHelicopter;                                        // 0x078C(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyArtillery;                                         // 0x0798(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyUAV;                                               // 0x07A4(0x000C) (Localized, NeedCtorLink)
	string                                             strEnableInstallSentryGun;                                // 0x07B0(0x000C) (Localized, NeedCtorLink)
	string                                             strDisableInstallSentryGun;                               // 0x07BC(0x000C) (Localized, NeedCtorLink)
	string                                             strAllySentryGun;                                         // 0x07C8(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyDestroySentryGun;                                  // 0x07D4(0x000C) (Localized, NeedCtorLink)
	string                                             strMySentryGun;                                           // 0x07E0(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyHelicopterGetBox;                                  // 0x07EC(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyArtilleryGetBox;                                   // 0x07F8(0x000C) (Localized, NeedCtorLink)
	string                                             strAllyUAVGetBox;                                         // 0x0804(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyHelicopter;                                       // 0x0810(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyArtillery;                                        // 0x081C(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyUAV;                                              // 0x0828(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemySentryGun;                                        // 0x0834(0x000C) (Localized, NeedCtorLink)
	string                                             strEnemyDestroySentryGun;                                 // 0x0840(0x000C) (Localized, NeedCtorLink)
	string                                             strMultiKills1;                                           // 0x084C(0x000C) (Localized, NeedCtorLink)
	string                                             strMultiKills2;                                           // 0x0858(0x000C) (Localized, NeedCtorLink)
	string                                             strHeadShot;                                              // 0x0864(0x000C) (Localized, NeedCtorLink)
	string                                             strRMC[0x9];                                              // 0x0870(0x000C) (Localized, NeedCtorLink)
	string                                             strRMS[0x7];                                              // 0x08DC(0x000C) (Localized, NeedCtorLink)
	string                                             strRMR[0x8];                                              // 0x0930(0x000C) (Localized, NeedCtorLink)
	string                                             SoundAllyDie;                                             // 0x0990(0x000C) (NeedCtorLink)
	string                                             SoundAllyKillEnemy;                                       // 0x099C(0x000C) (NeedCtorLink)
	string                                             SoundHeadShot;                                            // 0x09A8(0x000C) (NeedCtorLink)
	string                                             Sound3Kill;                                               // 0x09B4(0x000C) (NeedCtorLink)
	string                                             Sound5Kill;                                               // 0x09C0(0x000C) (NeedCtorLink)
	string                                             Sound7Kill;                                               // 0x09CC(0x000C) (NeedCtorLink)
	string                                             Sound10Kill;                                              // 0x09D8(0x000C) (NeedCtorLink)
	string                                             Sound15Kill;                                              // 0x09E4(0x000C) (NeedCtorLink)
	string                                             SoundWhizby;                                              // 0x09F0(0x000C) (NeedCtorLink)
	string                                             AnnounceSelfHelicopter;                                   // 0x09FC(0x000C) (NeedCtorLink)
	string                                             AnnounceSelfArtillery;                                    // 0x0A08(0x000C) (NeedCtorLink)
	string                                             AnnounceSelfUAV;                                          // 0x0A14(0x000C) (NeedCtorLink)
	string                                             AnnounceAllyHelicopter;                                   // 0x0A20(0x000C) (NeedCtorLink)
	string                                             AnnounceAllyArtillery;                                    // 0x0A2C(0x000C) (NeedCtorLink)
	string                                             AnnounceAllyUAV;                                          // 0x0A38(0x000C) (NeedCtorLink)
	string                                             AnnounceEnableInstallSentryGun;                           // 0x0A44(0x000C) (NeedCtorLink)
	string                                             AnnounceDisableInstallSentryGun;                          // 0x0A50(0x000C) (NeedCtorLink)
	string                                             AnnounceAllySentryGun;                                    // 0x0A5C(0x000C) (NeedCtorLink)
	string                                             AnnounceAllyDestroySentryGun;                             // 0x0A68(0x000C) (NeedCtorLink)
	string                                             AnnounceMySentryGun;                                      // 0x0A74(0x000C) (NeedCtorLink)
	string                                             AnnounceAllReadyInstalledSentryGun;                       // 0x0A80(0x000C) (NeedCtorLink)
	string                                             AnnounceAllyHelicopterGetBox;                             // 0x0A8C(0x000C) (NeedCtorLink)
	string                                             AnnounceAllyArtilleryGetBox;                              // 0x0A98(0x000C) (NeedCtorLink)
	string                                             AnnounceAllyUAVGetBox;                                    // 0x0AA4(0x000C) (NeedCtorLink)
	string                                             AnnounceEnemyHelicopter;                                  // 0x0AB0(0x000C) (NeedCtorLink)
	string                                             AnnounceEnemyArtillery;                                   // 0x0ABC(0x000C) (NeedCtorLink)
	string                                             AnnounceEnemyUAV;                                         // 0x0AC8(0x000C) (NeedCtorLink)
	string                                             AnnounceEnemySentryGun;                                   // 0x0AD4(0x000C) (NeedCtorLink)
	string                                             AnnounceEnemyDestroySentryGun;                            // 0x0AE0(0x000C) (NeedCtorLink)
	int                                                Code_AllyGreanade;                                        // 0x0AEC(0x0004)
	int                                                Code_AllyStunGreanade;                                    // 0x0AF0(0x0004)
	int                                                Code_AllySmokeGreanade;                                   // 0x0AF4(0x0004)
	int                                                Code_AllyGasGreanade;                                     // 0x0AF8(0x0004)
	int                                                Code_AllyClaymore;                                        // 0x0AFC(0x0004)
	int                                                Code_AllyTimeC4;                                          // 0x0B00(0x0004)
	int                                                Code_AllyIncGrenade;                                      // 0x0B04(0x0004)
	int                                                Code_AllySplitGrenade;                                    // 0x0B08(0x0004)
	int                                                Code_EnemyMG;                                             // 0x0B0C(0x0004)
	int                                                Code_EnemyTank;                                           // 0x0B10(0x0004)
	int                                                Code_EnemyGreanade;                                       // 0x0B14(0x0004)
	int                                                Code_EnemyRPG;                                            // 0x0B18(0x0004)
	int                                                Code_AllyReload;                                          // 0x0B1C(0x0004)
	int                                                Code_AllyDie;                                             // 0x0B20(0x0004)
	int                                                Code_AllyKillEnemy;                                       // 0x0B24(0x0004)
	int                                                Code_SelfHelicopter;                                      // 0x0B28(0x0004)
	int                                                Code_SelfArtillery;                                       // 0x0B2C(0x0004)
	int                                                Code_SelfUAV;                                             // 0x0B30(0x0004)
	int                                                Code_AllyHelicopter;                                      // 0x0B34(0x0004)
	int                                                Code_AllyArtillery;                                       // 0x0B38(0x0004)
	int                                                Code_AllyUAV;                                             // 0x0B3C(0x0004)
	int                                                Code_EnableInstallSentryGun;                              // 0x0B40(0x0004)
	int                                                Code_DisableInstallSentryGun;                             // 0x0B44(0x0004)
	int                                                Code_AllySentryGun;                                       // 0x0B48(0x0004)
	int                                                Code_AllyDestroySentryGun;                                // 0x0B4C(0x0004)
	int                                                Code_MySentryGun;                                         // 0x0B50(0x0004)
	int                                                Code_AlreadyInstalledSentryGun;                           // 0x0B54(0x0004)
	int                                                Code_AllyHelicopterGetBox;                                // 0x0B58(0x0004)
	int                                                Code_AllyArtilleryGetBox;                                 // 0x0B5C(0x0004)
	int                                                Code_AllyUAVGetBox;                                       // 0x0B60(0x0004)
	int                                                Code_EnemyHelicopter;                                     // 0x0B64(0x0004)
	int                                                Code_EnemyArtillery;                                      // 0x0B68(0x0004)
	int                                                Code_EnemyUAV;                                            // 0x0B6C(0x0004)
	int                                                Code_EnemySentryGun;                                      // 0x0B70(0x0004)
	int                                                Code_EnemyDestroySentryGun;                               // 0x0B74(0x0004)
	int                                                Code_KilledSentryGun;                                     // 0x0B78(0x0004)
	int                                                Code_HeadShot;                                            // 0x0B7C(0x0004)
	int                                                Code_KillSuccession[0xF];                                 // 0x0B80(0x0004)
	int                                                Code_Whizby;                                              // 0x0BBC(0x0004)
	int                                                Code_GotMedal;                                            // 0x0BC0(0x0004)
	int                                                Code_GotMedalAlly;                                        // 0x0BC4(0x0004)
	int                                                Code_GotMedalEnemy;                                       // 0x0BC8(0x0004)
	int                                                Code_GotBlackBox;                                         // 0x0BCC(0x0004)
	int                                                Code_MouseSenseChange;                                    // 0x0BD0(0x0004)
	int                                                Code_MouseSenseChangeAim;                                 // 0x0BD4(0x0004)
	int                                                Code_WaitingCountDown;                                    // 0x0BD8(0x0004)
	string                                             AnnounceSuddenDeath;                                      // 0x0BDC(0x000C) (NeedCtorLink)
	string                                             AnnounceTakingLead;                                       // 0x0BE8(0x000C) (NeedCtorLink)
	string                                             AnnounceFallingBehind;                                    // 0x0BF4(0x000C) (NeedCtorLink)
	string                                             AnnounceEndingWinning;                                    // 0x0C00(0x000C) (NeedCtorLink)
	string                                             AnnounceEndingLosing;                                     // 0x0C0C(0x000C) (NeedCtorLink)
	string                                             AnnounceWin;                                              // 0x0C18(0x000C) (NeedCtorLink)
	string                                             AnnounceLose;                                             // 0x0C24(0x000C) (NeedCtorLink)
	string                                             AnnounceSDAllyGotTheBomb;                                 // 0x0C30(0x000C) (NeedCtorLink)
	string                                             AnnounceSDAllyLostTheBomb;                                // 0x0C3C(0x000C) (NeedCtorLink)
	string                                             AnnounceSDIGotTheBomb;                                    // 0x0C48(0x000C) (NeedCtorLink)
	string                                             AnnounceSDAllyBombDefused;                                // 0x0C54(0x000C) (NeedCtorLink)
	string                                             AnnounceSDEnemyBombDefused;                               // 0x0C60(0x000C) (NeedCtorLink)
	string                                             AnnounceSDAllyThrowTheBomb;                               // 0x0C6C(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTAllyGotTheBomb;                                // 0x0C78(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTEnemyGotTheBomb;                               // 0x0C84(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTIGotTheBomb;                                   // 0x0C90(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTAllyLostTheBomb;                               // 0x0C9C(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTAllyBombPlanted;                               // 0x0CA8(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTEnemyBombPlanted;                              // 0x0CB4(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTAllyBombDefused;                               // 0x0CC0(0x000C) (NeedCtorLink)
	string                                             AnnounceSBTEnemyBombDefused;                              // 0x0CCC(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMAllyCapturedAll;                               // 0x0CD8(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMEnemyCapturedAll;                              // 0x0CE4(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMAllyCapturingA;                                // 0x0CF0(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMAllyCapturingB;                                // 0x0CFC(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMAllyCapturingC;                                // 0x0D08(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMEnemyCapturingA;                               // 0x0D14(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMEnemyCapturingB;                               // 0x0D20(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMEnemyCapturingC;                               // 0x0D2C(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMAllyCapturedA;                                 // 0x0D38(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMAllyCapturedB;                                 // 0x0D44(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMAllyCapturedC;                                 // 0x0D50(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMEnemyCapturedA;                                // 0x0D5C(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMEnemyCapturedB;                                // 0x0D68(0x000C) (NeedCtorLink)
	string                                             AnnounceDOMEnemyCapturedC;                                // 0x0D74(0x000C) (NeedCtorLink)
	string                                             AnnounceFFATakingLead;                                    // 0x0D80(0x000C) (NeedCtorLink)
	string                                             AnnounceFFAFallingBehind;                                 // 0x0D8C(0x000C) (NeedCtorLink)
	string                                             AnnounceFFAEndingWinning;                                 // 0x0D98(0x000C) (NeedCtorLink)
	string                                             AnnounceFFAEndingLosing;                                  // 0x0DA4(0x000C) (NeedCtorLink)
	string                                             AnnounceFFAWin;                                           // 0x0DB0(0x000C) (NeedCtorLink)
	string                                             AnnounceFFALose;                                          // 0x0DBC(0x000C) (NeedCtorLink)
	string                                             AnnounceRMC[0x9];                                         // 0x0DC8(0x000C) (NeedCtorLink)
	string                                             AnnounceRMS[0x7];                                         // 0x0E34(0x000C) (NeedCtorLink)
	string                                             AnnounceRMR[0x8];                                         // 0x0E88(0x000C) (NeedCtorLink)
	int                                                Code_RMC[0x9];                                            // 0x0EE8(0x0004)
	int                                                Code_RMS[0x7];                                            // 0x0F0C(0x0004)
	int                                                Code_RMR[0x8];                                            // 0x0F28(0x0004)
	int                                                Code_CantProne;                                           // 0x0F48(0x0004)
	int                                                Code_PlayerWalking;                                       // 0x0F4C(0x0004)
	int                                                Code_WinMatch;                                            // 0x0F50(0x0004)
	int                                                Code_LoseMatch;                                           // 0x0F54(0x0004)
	int                                                Code_SuddenDeath;                                         // 0x0F58(0x0004)
	int                                                Code_OurUAVOnline;                                        // 0x0F5C(0x0004)
	int                                                Code_EnemyUAVOnline;                                      // 0x0F60(0x0004)
	int                                                Code_TakingLead;                                          // 0x0F64(0x0004)
	int                                                Code_FallingBehind;                                       // 0x0F68(0x0004)
	int                                                Code_EndingWinning;                                       // 0x0F6C(0x0004)
	int                                                Code_EndingLosing;                                        // 0x0F70(0x0004)
	int                                                Code_ContinueFromChangeHost;                              // 0x0F74(0x0004)
	int                                                Code_KilledHelicopter;                                    // 0x0F78(0x0004)
	int                                                Code_KilledFlyingDefeceBot;                               // 0x0F7C(0x0004)
	int                                                Code_Win;                                                 // 0x0F80(0x0004)
	int                                                Code_Lose;                                                // 0x0F84(0x0004)
	int                                                Code_SDAllyBombPlanted;                                   // 0x0F88(0x0004)
	int                                                Code_SDEnemyBombPlanted;                                  // 0x0F8C(0x0004)
	int                                                Code_SDAllyBombDefused;                                   // 0x0F90(0x0004)
	int                                                Code_SDEnemyBombDefused;                                  // 0x0F94(0x0004)
	int                                                Code_SDAllyGotTheBomb;                                    // 0x0F98(0x0004)
	int                                                Code_SDIGotTheBomb;                                       // 0x0F9C(0x0004)
	int                                                Code_SDAllyLostTheBomb;                                   // 0x0FA0(0x0004)
	int                                                Code_SBTAllyGotTheBomb;                                   // 0x0FA4(0x0004)
	int                                                Code_SBTEnemyGotTheBomb;                                  // 0x0FA8(0x0004)
	int                                                Code_SBTIGotTheBomb;                                      // 0x0FAC(0x0004)
	int                                                Code_SBTAllyLostTheBomb;                                  // 0x0FB0(0x0004)
	int                                                Code_SBTAllyBombPlanted;                                  // 0x0FB4(0x0004)
	int                                                Code_SBTEnemyBombPlanted;                                 // 0x0FB8(0x0004)
	int                                                Code_SBTAllyBombDefused;                                  // 0x0FBC(0x0004)
	int                                                Code_SBTEnemyBombDefused;                                 // 0x0FC0(0x0004)
	int                                                Code_SDAllyThrowTheBomb;                                  // 0x0FC4(0x0004)
	int                                                Code_DOMAllyCapturedAll;                                  // 0x0FC8(0x0004)
	int                                                Code_DOMEnemyCapturedAll;                                 // 0x0FCC(0x0004)
	int                                                Code_DOMAllyCapturingA;                                   // 0x0FD0(0x0004)
	int                                                Code_DOMAllyCapturingB;                                   // 0x0FD4(0x0004)
	int                                                Code_DOMAllyCapturingC;                                   // 0x0FD8(0x0004)
	int                                                Code_DOMEnemyCapturingA;                                  // 0x0FDC(0x0004)
	int                                                Code_DOMEnemyCapturingB;                                  // 0x0FE0(0x0004)
	int                                                Code_DOMEnemyCapturingC;                                  // 0x0FE4(0x0004)
	int                                                Code_DOMAllyCapturedA;                                    // 0x0FE8(0x0004)
	int                                                Code_DOMAllyCapturedB;                                    // 0x0FEC(0x0004)
	int                                                Code_DOMAllyCapturedC;                                    // 0x0FF0(0x0004)
	int                                                Code_DOMEnemyCapturedA;                                   // 0x0FF4(0x0004)
	int                                                Code_DOMEnemyCapturedB;                                   // 0x0FF8(0x0004)
	int                                                Code_DOMEnemyCapturedC;                                   // 0x0FFC(0x0004)
	int                                                Code_FFATakingLead;                                       // 0x1000(0x0004)
	int                                                Code_FFAFallingBehind;                                    // 0x1004(0x0004)
	int                                                Code_FFAEndingWinning;                                    // 0x1008(0x0004)
	int                                                Code_FFAEndingLosing;                                     // 0x100C(0x0004)
	int                                                Code_FFAWin;                                              // 0x1010(0x0004)
	int                                                Code_FFALose;                                             // 0x1014(0x0004)
	string                                             SoundOurTeamPlantedBomb;                                  // 0x1018(0x000C) (NeedCtorLink)
	string                                             SoundEnemyPlantedBomb;                                    // 0x1024(0x000C) (NeedCtorLink)
	string                                             SoundSDAllyGotTheBomb;                                    // 0x1030(0x000C) (NeedCtorLink)
	string                                             SoundSDIGotTheBomb;                                       // 0x103C(0x000C) (NeedCtorLink)
	string                                             SoundSBTAllyGotTheBomb;                                   // 0x1048(0x000C) (NeedCtorLink)
	string                                             SoundSBTEnemyGotTheBomb;                                  // 0x1054(0x000C) (NeedCtorLink)
	string                                             SoundSBTIGotTheBomb;                                      // 0x1060(0x000C) (NeedCtorLink)
	string                                             SoundSBTAllyPlantedBomb;                                  // 0x106C(0x000C) (NeedCtorLink)
	string                                             SoundSBTEnemyPlantedBomb;                                 // 0x1078(0x000C) (NeedCtorLink)
	string                                             SoundSBTAllyBombDefused;                                  // 0x1084(0x000C) (NeedCtorLink)
	string                                             SoundSBTEnemyBombDefused;                                 // 0x1090(0x000C) (NeedCtorLink)
	string                                             SoundDOMAllyCaptured;                                     // 0x109C(0x000C) (NeedCtorLink)
	string                                             SoundDOMEnemyCaptured;                                    // 0x10A8(0x000C) (NeedCtorLink)
	string                                             SoundWin;                                                 // 0x10B4(0x000C) (NeedCtorLink)
	string                                             SoundLose;                                                // 0x10C0(0x000C) (NeedCtorLink)
	string                                             PackageCH_AF;                                             // 0x10CC(0x000C) (NeedCtorLink)
	string                                             PackageCH_RSA;                                            // 0x10D8(0x000C) (NeedCtorLink)
	string                                             PackageEng_AF;                                            // 0x10E4(0x000C) (NeedCtorLink)
	string                                             PackageRus_RSA;                                           // 0x10F0(0x000C) (NeedCtorLink)
	float                                              MessageRange;                                             // 0x10FC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_Game");
		return ptr;
	}


	EMessageType STATIC_GetConsoleMessageType(int Switch);
	string STATIC_GetSoundPackageByTeam(int iTeam, int iLang);
	bool STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetPopMessageStr(int Switch);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.wGun
// 0x0120 (0x0898 - 0x0778)
class AwGun : public AwWeapon
{
public:
	FName                                              ReloadBeginAnim;                                          // 0x0778(0x0004) (Edit)
	FName                                              ReloadEndAnim;                                            // 0x077C(0x0004) (Edit)
	FName                                              ReloadAnim;                                               // 0x0780(0x0004) (Edit)
	FName                                              ReloadEmptyAnim;                                          // 0x0784(0x0004) (Edit)
	bool                                               bRechamber;                                               // 0x0788(0x0004) (Edit)
	FName                                              RechamberAnim;                                            // 0x078C(0x0004) (Edit)
	FName                                              Aim_RechamberAnim;                                        // 0x0790(0x0004) (Edit)
	FName                                              Aim_UpAnim;                                               // 0x0794(0x0004) (Edit)
	FName                                              Aim_DownAnim;                                             // 0x0798(0x0004) (Edit)
	FName                                              Aim_IdleAnim;                                             // 0x079C(0x0004) (Edit)
	FName                                              Aim_Up_SprintAnim;                                        // 0x07A0(0x0004) (Edit)
	FName                                              Aim_Down_SprintAnim;                                      // 0x07A4(0x0004) (Edit)
	FName                                              PreAnim;                                                  // 0x07A8(0x0004) (Edit)
	struct FVector                                     vPrePartsOffset;                                          // 0x07AC(0x000C) (Transient)
	float                                              ReloadBeginAnimRate;                                      // 0x07B8(0x0004) (Edit)
	float                                              ReloadEndAnimRate;                                        // 0x07BC(0x0004) (Edit)
	float                                              ReloadAnimRate;                                           // 0x07C0(0x0004) (Edit)
	float                                              ReloadEmptyAnimRate;                                      // 0x07C4(0x0004) (Edit)
	float                                              RechamberAnimRate;                                        // 0x07C8(0x0004) (Edit)
	float                                              Aim_RechamberAnimRate;                                    // 0x07CC(0x0004) (Edit)
	float                                              Aim_UpAnimRate;                                           // 0x07D0(0x0004) (Edit)
	float                                              Aim_DownAnimRate;                                         // 0x07D4(0x0004) (Edit)
	float                                              Aim_IdleAnimRate;                                         // 0x07D8(0x0004) (Edit)
	class UClass*                                      ShellCaseEmitterClass;                                    // 0x07DC(0x0004)
	class AwEmitter*                                   ShellCaseEmitter;                                         // 0x07E0(0x0004)
	class UClass*                                      ClipEmitterClass;                                         // 0x07E4(0x0004)
	class AwEmitter*                                   ClipEmitter;                                              // 0x07E8(0x0004)
	struct FVector                                     vDir_Aim;                                                 // 0x07EC(0x000C)
	bool                                               bAimPending;                                              // 0x07F8(0x0004)
	float                                              fFixedTime;                                               // 0x07FC(0x0004)
	EWeaponAimState                                    AimState;                                                 // 0x0800(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0801(0x0003) MISSED OFFSET
	bool                                               bSilencer;                                                // 0x0804(0x0004)
	bool                                               bHasDotSight;                                             // 0x0804(0x0004)
	bool                                               bModMuzFlash;                                             // 0x0804(0x0004)
	string                                             strModMuzFlashClass;                                      // 0x0808(0x000C) (NeedCtorLink)
	EWeaponActionType                                  ActionType;                                               // 0x0814(0x0001) (Edit)
	byte                                               Padding01[0x3];                                           // 0x0815(0x0003) MISSED OFFSET
	bool                                               bActioned;                                                // 0x0818(0x0004)
	int                                                iMode_Magazine;                                           // 0x081C(0x0004)
	int                                                AmmoCharge_CurLoaded;                                     // 0x0820(0x0004) (Net)
	int                                                AmmoCharge_MaxLoaded;                                     // 0x0824(0x0004)
	int                                                AmmoCharge_Reload;                                        // 0x0828(0x0004)
	int                                                AmmoCharge_CurAmmo;                                       // 0x082C(0x0004)
	EWeaponReloadState                                 ReloadState;                                              // 0x0830(0x0001)
	byte                                               Padding02[0x3];                                           // 0x0831(0x0003) MISSED OFFSET
	struct FRotator                                    rBreathRot;                                               // 0x0834(0x000C)
	bool                                               bBreathRotXLeft;                                          // 0x0840(0x0004)
	bool                                               bBreathRotYUp;                                            // 0x0840(0x0004)
	float                                              fBreathLastTime;                                          // 0x0844(0x0004)
	bool                                               bUseBreathRot;                                            // 0x0848(0x0004)
	float                                              wSwayDeltaTime;                                           // 0x084C(0x0004)
	int                                                StateRechamber;                                           // 0x0850(0x0004)
	struct FRotator                                    rSwayDestRot_Aim;                                         // 0x0854(0x000C) (Transient)
	struct FRotator                                    rSwayRot_Aim;                                             // 0x0860(0x000C) (Transient)
	struct FRotator                                    rSway_LastCameraRot_Aim;                                  // 0x086C(0x000C) (Transient)
	float                                              fSwayAccumTime_Pitch_Aim;                                 // 0x0878(0x0004) (Transient)
	float                                              fSwayAccumTime_Yaw_Aim;                                   // 0x087C(0x0004) (Transient)
	float                                              fPartsBreathRadius;                                       // 0x0880(0x0004)
	float                                              fPartsBreathSpeed;                                        // 0x0884(0x0004)
	struct FRotator                                    tmBone;                                                   // 0x0888(0x000C)
	bool                                               IsReadyFirebulletType;                                    // 0x0894(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGun");
		return ptr;
	}


	int GetCurMagazineAmmoCount();
	int GetCurTotalAmmoCount();
	void ClientAddMagazine();
	void ServerAddMagazine();
	void Change3DScopeMesh();
	void CheckPartsSet();
	void SetAmmoAmount(int Mode, int CurrentAmmo);
	void SetAmmoTotal(int Mode, int TotalAmmo);
	void ClientWeaponThrown();
	void CalcBreathRot();
	void CalcBreathOffset();
	void SetSprint(bool bValue);
	bool StartFire(int Mode);
	void ClientStartFire(int Mode);
	struct FVector GetEffectStart();
	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void SpawnShell();
	void ServerSilencerAttached(bool bEnabled);
	void SilencerAttached(bool bEnabled);
	void MuzzleFlashModified(bool bEnabled, const string& strAddMuzClass);
	void ApplyPartsParam(const string& strOption, const string& strValue);
	void SetAddPartsParams();
	void ScopeAttached(bool bEnabled);
	void CalcSwayRot(float fDeltaTime);
	void CalcSwayRot_Aim(float fDeltaTime);
	void CalcFiringSwayRot(float fDeltaTime);
	void CalcFiringSwayRot_Aim(float fDeltaTime);
	void CalcStanceOffset(float fDelta);
	float CalcDestPivot();
	void CalcPartsOffset();
	void SetAimDiff(float InX, float InY, float InZ);
	bool HasDotSight();
	void ApplyOffset();
	void ApplyOffset_Trans();
	void ApplyOffset_Rot();
	bool IsAiming();
	void RenderOverlays(class UCanvas* Canvas);
	void RenderScope(class UCanvas* Canv);
	void ForceRenderOverlays(class UCanvas* Canv);
	void FireOne(int iFireMode);
	bool PutDown();
	void BringUp(class AwWeapon* PrevWeapon);
	void Destroyed();
	void SetResParams(class UClass* wRes);
	void SetBaseParams(class UwWeaponBaseParams* wBase);
	void FillToDefaultAmmo();
	void FillToInitialAmmo();
	void ReloadComplete();
	void NotifyReloaded();
	void GetAmmoCount(float* MaxAmmoPrimary, float* CurAmmoPrimary);
	void StoreAmmo();
	void ServerReload();
	bool Reload();
	void ProcessMoveAni();
	void PlayIdle();
	void ForcePlayIdle();
	void AnimEnd(int Channel);
	void OutOfAmmo();
	bool CheckOutOfAmmo();
	bool CheckActioned();
	bool SeverConsumeAmmo(int Mode, float Load, bool bAmountNeededIsMax);
	void ClientForceAmmoUpdate(int Mode, int NewAmount);
	int AmmoAmount(int Mode);
	bool IsReloading();
	byte IsRechambering();
	void ServerAim(bool bValue);
	void PlayAim(bool bUpOrDown);
	bool ReadyToFire(int Mode);
	bool CheckAim();
	void SetAim(bool bAim);
	void WeaponTick(float dt);
	void ServerMeleeFire();
	void ResetAim();
	void ClientMeleeFire();
	void ActiveMeleeDelay();
	void SetActioned();
	void SetUnactioned();
};


// Class Engine.wSkillBase
// 0x0014 (0x0040 - 0x002C)
class UwSkillBase : public UObject
{
public:
	class UwSkill*[]                                   Skills;                                                   // 0x002C(0x000C) (NeedCtorLink)
	class AController*                                 Owner;                                                    // 0x0038(0x0004)
	bool                                               bAddStamina;                                              // 0x003C(0x0004)
	bool                                               bIncExplosion;                                            // 0x003C(0x0004)
	bool                                               bQuickRespawn;                                            // 0x003C(0x0004)
	bool                                               bQuickDemolition;                                         // 0x003C(0x0004)
	bool                                               bBombDetection;                                           // 0x003C(0x0004)
	bool                                               bIncHealthPack;                                           // 0x003C(0x0004)
	bool                                               bAddManazine;                                             // 0x003C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkillBase");
		return ptr;
	}


	class UwSkill* GetEnableSkill();
	void ClientEnableSkill(int SkillID);
	void Client_ChangeAddValue(int SkillID, int addValue);
	void SetActiveSkill(int SkillID);
	void GetTopInfo(int SkillID, string* strInfo, string* strCountInfo, int* FontSize);
	void ChangedQuickSlot();
	bool GetUsed(int SkillID);
	void RemoveSupplyItem(ESUPPLY_ITEM_TYPE eSupplyItemType);
	void UseSupplyItem(ESUPPLY_ITEM_TYPE eSupplyItemType);
	void AddSupplyItem(ESUPPLY_ITEM_TYPE eSupplyItemType);
	void UsedbyWeapon(int iWeaponID);
	bool IsDuplicationSkill(int iSkillID);
	class UwSkill* FindSkillByClassName(const FName& SkillClassName);
	class UwSkill* FindSkill(int iSkillID);
	void RemoveSkill(int iSkillID, class UwGameManager* GM);
	void AddSkill(int iSkillID, class UwGameManager* GM);
	void ResetSkillState();
	void DeadPlayer();
	void UpdateProcess();
	void ForceResetSkillUpdateCall();
	void PostBeginPlay();
};


// Class Engine.BroadcastHandler
// 0x0040 (0x046C - 0x042C)
class ABroadcastHandler : public AInfo
{
public:
	class ABroadcastHandler*                           NextBroadcastHandler;                                     // 0x042C(0x0004)
	class UClass*                                      NextBroadcastHandlerClass;                                // 0x0430(0x0004)
	int                                                SentText;                                                 // 0x0434(0x0004)
	bool                                               bMuteSpectators;                                          // 0x0438(0x0004)
	bool                                               bPartitionSpectators;                                     // 0x0438(0x0004)
	string                                             BHDisplayText[0x2];                                       // 0x043C(0x000C) (Localized, NeedCtorLink)
	string                                             BHDescText[0x2];                                          // 0x0454(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BroadcastHandler");
		return ptr;
	}


	void Destroyed();
	bool AcceptBroadcastVoice(class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI);
	bool AcceptBroadcastSpeech(class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI);
	bool AcceptBroadcastLocalized(class APlayerController* Receiver, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj);
	bool AcceptBroadcastText(class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI, const FName& Type, string* Msg);
	void RegisterBroadcastHandler(class ABroadcastHandler* NewBH);
	void AllowBroadcastLocalized(class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void BroadcastTeam(class AController* Sender, const string& Msg, const FName& Type, EMessageType mType);
	void Broadcast(class AActor* Sender, const string& Msg, const FName& Type, EMessageType mType);
	void BroadcastLocalized(class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	void BroadcastText(class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, const string& Msg, const FName& Type);
	bool HandlerAllowsBroadcast(class AActor* broadcaster, int SentTextNum);
	bool AllowsBroadcast(class AActor* broadcaster, int Len);
	string STATIC_GetDescriptionText(const string& PropName);
	void STATIC_FillPlayInfo(class UPlayInfo* PlayInfo);
	void UpdateSentText();
};


// Class Engine.wSkill
// 0x0038 (0x0064 - 0x002C)
class UwSkill : public UObject
{
public:
	class UwSkillBase*                                 Base;                                                     // 0x002C(0x0004)
	int                                                SkillID;                                                  // 0x0030(0x0004)
	int                                                AttachWeaponID;                                           // 0x0034(0x0004)
	int                                                CheckStreakCount;                                         // 0x0038(0x0004)
	bool                                               IsEnable;                                                 // 0x003C(0x0004)
	bool                                               bUsed;                                                    // 0x003C(0x0004)
	bool                                               bActiveSkill;                                             // 0x003C(0x0004)
	bool                                               bUpdateProcess;                                           // 0x003C(0x0004)
	bool                                               bCoolTimeSkill;                                           // 0x003C(0x0004)
	byte                                               byAddCount;                                               // 0x0040(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0041(0x0003) MISSED OFFSET
	bool                                               bUpdateCall;                                              // 0x0044(0x0004)
	float                                              addCountStartTime;                                        // 0x0048(0x0004)
	float                                              changeFontSizeTime;                                       // 0x004C(0x0004)
	string                                             TopInfoName;                                              // 0x0050(0x000C) (Localized, NeedCtorLink)
	int                                                iEnableCount;                                             // 0x005C(0x0004)
	float                                              fApplyValue;                                              // 0x0060(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkill");
		return ptr;
	}


	int GetEnableCount();
	int SetEnableCount(int iCount);
	float GetMaxActiveTime();
	float GetMaxCoolTime();
	void Client_AddProcess();
	void ActiveSkill();
	void AddProcess();
	int GetTopInfoFontSize();
	void GetTopInfo(string* strInfo, string* strCountInfo, int* FontSize);
	void ChangedQuickSlot();
	void SetbUpdateCall(bool bValue);
	void ChangeAddValue(byte byValue);
	void Client_SetbyAddCount(byte byValue);
	void SetbyAddCount(byte byValue);
	void SetbUsed(bool bValue);
	void SetIsEnable(bool bValue);
	void UsedbyWeapon();
	void Initialize(class UwSkillBase* SkillBase, class UwSkillBaseParam* Param);
	void ResetSkill();
	void DeadPlayer();
	int GetSkillID();
	float GetApplyValue();
	void RemoveSkill();
	void UpdateProcess();
	void PostBeginPlay();
};


// Class Engine.wDamageType
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageType : public ADamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageType");
		return ptr;
	}

};


// Class Engine.wDamageAirStrike
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageAirStrike : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageAirStrike");
		return ptr;
	}

};


// Class Engine.wDamageHelicopter
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageHelicopter : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageHelicopter");
		return ptr;
	}

};


// Class Engine.VotingReplicationInfoBase
// 0x0010 (0x043C - 0x042C)
class AVotingReplicationInfoBase : public AReplicationInfo
{
public:
	struct FScriptDelegate                             __ProcessCommand__Delegate;                               // 0x042C(0x0090) (NeedCtorLink)
	struct FScriptDelegate                             __ProcessResponse__Delegate;                              // 0x0434(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VotingReplicationInfoBase");
		return ptr;
	}


	bool MatchSetupEnabled();
	bool KickVoteEnabled();
	bool MapVoteEnabled();
	bool MatchSetupLocked();
	void SendResponse(const string& Response);
	void SendCommand(const string& Cmd);
	void ProcessResponse(const string& Response);
	void ProcessCommand(const string& Command);
};


// Class Engine.ScoreBoard
// 0x0010 (0x043C - 0x042C)
class AScoreBoard : public AInfo
{
public:
	class AGameReplicationInfo*                        GRI;                                                      // 0x042C(0x0004) (Edit)
	class UClass*                                      HudClass;                                                 // 0x0430(0x0004) (Edit)
	bool                                               bDisplayMessages;                                         // 0x0434(0x0004)
	class AHUD*                                        HudOwner;                                                 // 0x0438(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ScoreBoard");
		return ptr;
	}


	void NextStats();
	void SortPRIArray();
	bool InOrder(class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2);
	void UpdateScoreBoard(class UCanvas* Canvas);
	string FormatTime(int Seconds);
	bool UpdateGRI();
	void DrawMiniMap(class UCanvas* C);
	void DrawGMUserBoard(class UCanvas* C);
	void DrawScoreboard(class UCanvas* C);
	void Init();
	string InitTitle();
	void InitGRI();
	class UFont* GetSmallFontFor(int ScreenWidth, int offset);
	bool HaveHalfFont(class UCanvas* Canvas, int offset);
	class UFont* GetSmallerFontFor(class UCanvas* Canvas, int offset);
	void PostBeginPlay();
};


// Class Engine.AccessControl
// 0x0150 (0x057C - 0x042C)
class AAccessControl : public AInfo
{
public:
	class UwAdminUserList*                             Users;                                                    // 0x042C(0x0004)
	class UwAdminGroupList*                            Groups;                                                   // 0x0430(0x0004)
	struct FAdminPlayer[]                              LoggedAdmins;                                             // 0x0434(0x000C) (NeedCtorLink)
	class UClass*[]                                    PrivClasses;                                              // 0x0440(0x000C) (Config, NeedCtorLink)
	class UwPrivilegeBase*[]                           PrivManagers;                                             // 0x044C(0x000C) (NeedCtorLink)
	string                                             AllPrivs;                                                 // 0x0458(0x000C) (NeedCtorLink)
	string[]                                           IPPolicies;                                               // 0x0464(0x000C) (NeedCtorLink)
	string                                             IPBanned;                                                 // 0x0470(0x000C) (Localized, NeedCtorLink)
	string                                             WrongPassword;                                            // 0x047C(0x000C) (Localized, NeedCtorLink)
	string                                             NeedPassword;                                             // 0x0488(0x000C) (Localized, NeedCtorLink)
	string                                             SessionBanned;                                            // 0x0494(0x000C) (Localized, NeedCtorLink)
	string                                             KickedMsg;                                                // 0x04A0(0x000C) (Localized, NeedCtorLink)
	string                                             DefaultKickReason;                                        // 0x04AC(0x000C) (Localized, NeedCtorLink)
	string                                             IdleKickReason;                                           // 0x04B8(0x000C) (Localized, NeedCtorLink)
	class UClass*                                      AdminClass;                                               // 0x04C4(0x0004)
	bool                                               bReplyToGUI;                                              // 0x04C8(0x0004)
	bool                                               bDontAddDefaultAdmin;                                     // 0x04C8(0x0004)
	string                                             AdminName;                                                // 0x04CC(0x000C) (NeedCtorLink)
	string                                             AdminPassword;                                            // 0x04D8(0x000C) (NeedCtorLink)
	string                                             GamePassword;                                             // 0x04E4(0x000C) (NeedCtorLink)
	float                                              LoginDelaySeconds;                                        // 0x04F0(0x0004)
	bool                                               bBanByID;                                                 // 0x04F4(0x0004)
	string[]                                           BannedIDs;                                                // 0x04F8(0x000C) (Config, GlobalConfig, NeedCtorLink)
	string[]                                           SessionIPPolicies;                                        // 0x0504(0x000C) (Transient, NeedCtorLink)
	string[]                                           SessionBannedIDs;                                         // 0x0510(0x000C) (Transient, NeedCtorLink)
	string                                             ACDisplayText[0x4];                                       // 0x051C(0x000C) (Localized, NeedCtorLink)
	string                                             ACDescText[0x4];                                          // 0x054C(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AccessControl");
		return ptr;
	}


	int CheckID(const string& CDHash);
	string STATIC_GetDescriptionText(const string& PropName);
	void STATIC_FillPlayInfo(class UPlayInfo* PlayInfo);
	bool AllowPriv(const string& priv);
	bool CanPerform(class APlayerController* P, const string& Action);
	int CheckIPPolicy(const string& Address, bool bSilent);
	void PreLogin(const string& Options, const string& Address, const string& PlayerID, bool bSpectator, string* Error, string* FailCode);
	class UwAdminUser* GetUser(const string& uname);
	class UwAdminUser* GetLoggedAdmin(class APlayerController* P);
	bool ValidLogin(const string& UserName, const string& Password);
	bool CheckOptionsAdmin(const string& Options);
	bool KickBanPlayer(class APlayerController* P);
	bool BanPlayer(class APlayerController* C, bool bSession);
	bool KickPlayer(class APlayerController* C);
	void KickBan(const string& S);
	void SessionKickBan(const string& S);
	void Kick(const string& S);
	string GetAdminName(class APlayerController* PC);
	class UwAdminUser* GetAdmin(class APlayerController* PC);
	bool RequiresPassword();
	void SetGamePassword(const string& P);
	bool SetAdminPassword(const string& P);
	void SetAdminFromURL(const string& N, const string& P);
	bool IsAdmin(class APlayerController* P);
	void AdminExited(class APlayerController* P);
	void AdminEntered(class APlayerController* P, const string& UserName);
	bool AdminLogout(class APlayerController* P);
	bool AdminLogin(class APlayerController* P, const string& UserName, const string& Password);
	void SaveAdmins();
	void InitPrivs();
	void PreBeginPlay();
};


// Class Engine.XBoxPlayerInput
// 0x00E8 (0x0178 - 0x0090)
class UXBoxPlayerInput : public UPlayerInput
{
public:
	float                                              HScale;                                                   // 0x0090(0x0004) (Edit, Config)
	float                                              HExponent;                                                // 0x0094(0x0004) (Edit, Config)
	float                                              HLookRateMax;                                             // 0x0098(0x0004) (Edit, Config)
	float                                              VScale;                                                   // 0x009C(0x0004) (Edit, Config)
	float                                              VExponent;                                                // 0x00A0(0x0004) (Edit, Config)
	float                                              VLookRateMax;                                             // 0x00A4(0x0004) (Edit, Config)
	bool                                               bInvertVLook;                                             // 0x00A8(0x0004) (Edit, Config)
	bool                                               bLookSpring;                                              // 0x00A8(0x0004) (Edit, Config)
	float                                              HLook;                                                    // 0x00AC(0x0004) (Edit)
	float                                              VLook;                                                    // 0x00B0(0x0004) (Edit)
	float                                              abx;                                                      // 0x00B4(0x0004) (Edit)
	float                                              abz;                                                      // 0x00B8(0x0004) (Edit)
	float                                              wfor;                                                     // 0x00BC(0x0004) (Edit)
	float                                              wstr;                                                     // 0x00C0(0x0004) (Edit)
	float                                              wafor;                                                    // 0x00C4(0x0004) (Edit)
	float                                              wastr;                                                    // 0x00C8(0x0004) (Edit)
	struct FLookPreset                                 LookPresets[0x4];                                         // 0x00CC(0x001C) (Edit, Config, NeedCtorLink)
	string                                             SelectedPresetName;                                       // 0x013C(0x000C) (Edit, Config, NeedCtorLink)
	float                                              VelScale;                                                 // 0x0148(0x0004) (Edit)
	float                                              AccelScale;                                               // 0x014C(0x0004) (Edit)
	float                                              DampeningFactor;                                          // 0x0150(0x0004) (Edit)
	float                                              MinAccelComponent;                                        // 0x0154(0x0004) (Edit)
	float                                              ForwardFilter[0x4];                                       // 0x0158(0x0004) (Edit)
	float                                              StrafeFilter[0x4];                                        // 0x0168(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.XBoxPlayerInput");
		return ptr;
	}


	bool InvertLook();
	float FilterOutput(float output, float* filter);
	float sign(float in);
	float GetComponentAccel(float Input, const struct FVector& Dir, float dt, bool blog, float* filter);
	void VelToAccel(float dt);
	float STATIC_Remap(float in, float Scale, float Exp, float ratemax);
	void PlayerInput(float DeltaTime);
};


// Class Engine.wGameStateStorageGetter
// 0x0000 (0x002C - 0x002C)
class UwGameStateStorageGetter : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGameStateStorageGetter");
		return ptr;
	}


	void GetUserSkillState(class AwGameStateStorageSender* GSSS, class APlayerController* PC);
	void GetUserWeaponState(class AwGameStateStorageSender* GSSS, class APlayerController* PC);
	void STATIC_GetUserVehicle(class AwGameStateStorageSender* GSSS, class APlayerController* PC);
	void GetUserScoreState(class AwGameStateStorageSender* GSSS, class APlayerController* PC);
	void GetUserState(class AwGameStateStorageSender* GSSS, class APlayerController* PC);
	void GetUserSupplyState(class AwGameStateStorageSender* GSSS, class APlayerController* PC);
	void GetUserQSlotState(class AwGameStateStorageSender* GSSS, class APlayerController* PC);
};


// Class Engine.Suicided
// 0x0000 (0x04A4 - 0x04A4)
class ASuicided : public ADamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Suicided");
		return ptr;
	}

};


// Class Engine.wMessage_Game_ImpSystem
// 0x0150 (0x1250 - 0x1100)
class AwMessage_Game_ImpSystem : public AwMessage_Game
{
public:
	float                                              PosY1;                                                    // 0x1100(0x0004)
	float                                              PosY2;                                                    // 0x1104(0x0004)
	float                                              fFadeOutTime;                                             // 0x1108(0x0004)
	int                                                Code_NotReadyCoolTimeSkill;                               // 0x110C(0x0004)
	int                                                Code_ChangeQS_0;                                          // 0x1110(0x0004)
	int                                                Code_ChangeQS_1;                                          // 0x1114(0x0004)
	int                                                Code_ChangeQS_2;                                          // 0x1118(0x0004)
	int                                                Code_ChangeQS_3;                                          // 0x111C(0x0004)
	int                                                Code_ChangeQS_4;                                          // 0x1120(0x0004)
	int                                                Code_ChangeQS_5;                                          // 0x1124(0x0004)
	int                                                Code_QuickSlotChangeFailed;                               // 0x1128(0x0004)
	int                                                Code_ChangeQSInPlayerWalking;                             // 0x112C(0x0004)
	int                                                Code_CloseQSTime;                                         // 0x1130(0x0004)
	int                                                Code_CloseQSDistance;                                     // 0x1134(0x0004)
	int                                                Code_CloseQSWindow;                                       // 0x1138(0x0004)
	string                                             strGameMode_TD;                                           // 0x113C(0x000C) (Localized, NeedCtorLink)
	string                                             strGameMode_FFA;                                          // 0x1148(0x000C) (Localized, NeedCtorLink)
	string                                             strGameMode_DOM;                                          // 0x1154(0x000C) (Localized, NeedCtorLink)
	string                                             strGameMode_SD;                                           // 0x1160(0x000C) (Localized, NeedCtorLink)
	string                                             strGameMode_SBT;                                          // 0x116C(0x000C) (Localized, NeedCtorLink)
	string                                             strNoWeapon;                                              // 0x1178(0x000C) (Localized, NeedCtorLink)
	string                                             strChangeQS[0x6];                                         // 0x1184(0x000C) (Localized, NeedCtorLink)
	string                                             strChangeQSInPlayerWalking;                               // 0x11CC(0x000C) (Localized, NeedCtorLink)
	string                                             strCloseQSTime;                                           // 0x11D8(0x000C) (Localized, NeedCtorLink)
	string                                             strCloseQSDistance;                                       // 0x11E4(0x000C) (Localized, NeedCtorLink)
	string                                             strQuickSlotChangeFailed;                                 // 0x11F0(0x000C) (Localized, NeedCtorLink)
	string                                             strCloseQSWindow;                                         // 0x11FC(0x000C) (Localized, NeedCtorLink)
	string                                             strNotReadyCoolTimeSkill;                                 // 0x1208(0x000C) (Localized, NeedCtorLink)
	string                                             strHoldWeapon;                                            // 0x1214(0x000C) (Localized, NeedCtorLink)
	int                                                Code_HoldWeapon;                                          // 0x1220(0x0004)
	string                                             strHoldFireByOverHeat;                                    // 0x1224(0x000C) (Localized, NeedCtorLink)
	int                                                Code_HoldFireOverHeat;                                    // 0x1230(0x0004)
	string                                             SoundNotReady;                                            // 0x1234(0x000C) (NeedCtorLink)
	int                                                Code_DFSupplyAmmo;                                        // 0x1240(0x0004)
	string                                             strDFSupplyAmmo;                                          // 0x1244(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_Game_ImpSystem");
		return ptr;
	}


	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_IsMessageSystem(int iCode);
	bool STATIC_IsMessageMode(int iCode);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	float STATIC_GetLifeTime(int Switch);
};


// Class Engine.AnnouncerQueueManager
// 0x001C (0x0448 - 0x042C)
class AAnnouncerQueueManager : public AInfo
{
public:
	struct FQueueItem[]                                Queue;                                                    // 0x042C(0x000C) (NeedCtorLink)
	float                                              LastTimerCheck;                                           // 0x0438(0x0004)
	float                                              GapTime;                                                  // 0x043C(0x0004)
	class APlayerController*                           Receiver;                                                 // 0x0440(0x0004)
	float                                              LastPlayEndsAt;                                           // 0x0444(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.AnnouncerQueueManager");
		return ptr;
	}


	void ProcessQueueItem(const struct FQueueItem& Item);
	void Timer();
	float GetQueueWaitTime();
	bool IsQueueingSwitch(byte Switch);
	bool IsQueueing();
	bool RemoveSound(const string& SoundName);
	bool CanFindSoundInQueue(const string& DaSoundName);
	bool AddItemToQueue(const string& ASound, EAPriority Priority, byte Switch);
	void InitFor(class APlayerController* PC);
	void PostBeginPlay();
};


// Class Engine.wMessage_Game_Alien
// 0x0130 (0x1230 - 0x1100)
class AwMessage_Game_Alien : public AwMessage_Game
{
public:
	int                                                Code_AMAppearHostAlien;                                   // 0x1100(0x0004)
	int                                                Code_AMTransformdHostAlien;                               // 0x1104(0x0004)
	int                                                Code_AMTransformdMasterAlien;                             // 0x1108(0x0004)
	int                                                Code_AMHeadShotAlien;                                     // 0x110C(0x0004)
	int                                                Code_AMSelectedHero;                                      // 0x1110(0x0004)
	int                                                Code_AMAcquiredAttackBuff;                                // 0x1114(0x0004)
	int                                                Code_AMReadyTimeCount;                                    // 0x1118(0x0004)
	int                                                Code_AMInfectdHero;                                       // 0x111C(0x0004)
	int                                                Code_AMDropRandomItemBox;                                 // 0x1120(0x0004)
	int                                                Code_AMTouchItemBoxToEveryOne;                            // 0x1124(0x0004)
	int                                                Code_AMTouchItemBoxInWeapon;                              // 0x1128(0x0004)
	int                                                Code_AMTouchItemBoxInSkill;                               // 0x112C(0x0004)
	int                                                Code_AMTouchItemBoxInFillAmmo;                            // 0x1130(0x0004)
	int                                                Code_AMDefenceToAlien;                                    // 0x1134(0x0004)
	int                                                Code_AMInfectToFail;                                      // 0x1138(0x0004)
	int                                                Code_AMYouwereSuperHero;                                  // 0x113C(0x0004)
	int                                                Code_AMAppearSuperHero;                                   // 0x1140(0x0004)
	int                                                Code_AMReadyTimeCountSuperAlien;                          // 0x1144(0x0004)
	int                                                Code_AMAppearSuperAlien;                                  // 0x1148(0x0004)
	string                                             strAMAppearHostAlien;                                     // 0x114C(0x000C) (Localized, NeedCtorLink)
	string                                             strAMTransformdHostAlien;                                 // 0x1158(0x000C) (Localized, NeedCtorLink)
	string                                             strAMTransformdMasterAlien;                               // 0x1164(0x000C) (Localized, NeedCtorLink)
	string                                             strAMHeadShotAlien;                                       // 0x1170(0x000C) (Localized, NeedCtorLink)
	string                                             strAMSelectedHero;                                        // 0x117C(0x000C) (Localized, NeedCtorLink)
	string                                             strAMAcquiredAttackBuff;                                  // 0x1188(0x000C) (Localized, NeedCtorLink)
	string                                             strAMReadyTimeCount;                                      // 0x1194(0x000C) (Localized, NeedCtorLink)
	string                                             strAMInfectedHero;                                        // 0x11A0(0x000C) (Localized, NeedCtorLink)
	string                                             strAMDropRandomItemBox;                                   // 0x11AC(0x000C) (Localized, NeedCtorLink)
	string                                             strAMTouchItemBoxToEveryOne;                              // 0x11B8(0x000C) (Localized, NeedCtorLink)
	string                                             strAMTouchItemBoxInWeapon;                                // 0x11C4(0x000C) (Localized, NeedCtorLink)
	string                                             strAMTouchItemBoxInSkill;                                 // 0x11D0(0x000C) (Localized, NeedCtorLink)
	string                                             strAMTouchItemBoxInFillAmmo;                              // 0x11DC(0x000C) (Localized, NeedCtorLink)
	string                                             strAMDefenceToAlien;                                      // 0x11E8(0x000C) (Localized, NeedCtorLink)
	string                                             strAMInfectToFail;                                        // 0x11F4(0x000C) (Localized, NeedCtorLink)
	string                                             strAMYouwereSuperHero;                                    // 0x1200(0x000C) (Localized, NeedCtorLink)
	string                                             strAMAppearSuperHero;                                     // 0x120C(0x000C) (Localized, NeedCtorLink)
	string                                             strAMReadyTimeCountSuperAlien;                            // 0x1218(0x000C) (Localized, NeedCtorLink)
	string                                             strAMAppearSuperAlien;                                    // 0x1224(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_Game_Alien");
		return ptr;
	}


	float STATIC_GetLifeTime(int Switch);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.RunTestsBase
// 0x0030 (0x0408 - 0x03D8)
class ARunTestsBase : public AActor
{
public:
	class UClass*[]                                    TestClasses;                                              // 0x03D8(0x000C) (NeedCtorLink)
	class UClass*[]                                    FailClasses;                                              // 0x03E4(0x000C) (NeedCtorLink)
	int[]                                              FailCase;                                                 // 0x03F0(0x000C) (NeedCtorLink)
	string[]                                           FailMsg;                                                  // 0x03FC(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.RunTestsBase");
		return ptr;
	}


	void RunTestClass(class UClass* TestClass, int* passes, int* fails);
	void Run();
};


// Class Engine.ChatRoomMessage
// 0x00CC (0x051C - 0x0450)
class AChatRoomMessage : public ALocalMessage
{
public:
	string                                             AnonText;                                                 // 0x0450(0x000C) (Localized, NeedCtorLink)
	string                                             ChatRoomString[0x10];                                     // 0x045C(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ChatRoomMessage");
		return ptr;
	}


	bool STATIC_IsConsoleMessage(int Index);
	string STATIC_AssembleMessage(int Index, const string& ChannelTitle, class APlayerReplicationInfo* RelatedPRI);
};


// Class Engine.wMapSettings
// 0x0008 (0x0034 - 0x002C)
class UwMapSettings : public UObject
{
public:
	class UwMatchMaker*                                MatchMaker;                                               // 0x002C(0x0004)
	class UwGameManager*                               GM;                                                       // 0x0030(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMapSettings");
		return ptr;
	}


	class UwMapInfo* GetMapInfo(const string& dfile);
	class UwMapInfo* GetMapInfoByID(int MapID);
	int GetWeaponRestriction(int MapID, int weaponID);
	int GetMaxUserCount(int MapID, int GameModeIdx);
	int IsGameModeEnable(int MapID, int GameModeIdx);
	class UwMapInfo* GetMapInfoByMapNum(class UwMapInfo*[] infos, int MapNum);
	class UwMapInfo*[] GetAllMapInfos(bool bServiceBuild);
	bool IsValidMap_THAILAND(const string& LocStr, bool bServiceBuild);
	bool IsValidMap_ID(const string& LocStr, bool bServiceBuild);
	bool IsValidMap_GP(const string& LocStr, bool bServiceBuild);
	bool IsValidMap_CHINA(const string& LocStr, bool bServiceBuild);
	bool _isValidMap(const string& fileName, bool bServiceBuild);
	void Initialize(class UwMatchMaker* MM);
};


// Class Engine.wItemBoxHK
// 0x0168 (0x0194 - 0x002C)
class UwItemBoxHK : public UObject
{
public:
	int                                                ItemID;                                                   // 0x002C(0x0004)
	int                                                ItemType;                                                 // 0x0030(0x0004)
	string                                             ItemName;                                                 // 0x0034(0x000C) (NeedCtorLink)
	string                                             ItemDescription;                                          // 0x0040(0x000C) (NeedCtorLink)
	int                                                ResourceID;                                               // 0x004C(0x0004)
	int                                                ShopDisplayOrder;                                         // 0x0050(0x0004)
	int                                                InvenDisplayOrder;                                        // 0x0054(0x0004)
	class UTexture*                                    ItemImage;                                                // 0x0058(0x0004)
	class UTexture*                                    CapsuleImage;                                             // 0x005C(0x0004)
	int                                                Grade;                                                    // 0x0060(0x0004)
	int                                                EquipLevel;                                               // 0x0064(0x0004)
	int                                                EquipTeam;                                                // 0x0068(0x0004)
	class UTexture*                                    EquipLevelImage;                                          // 0x006C(0x0004)
	int                                                EquipSlot;                                                // 0x0070(0x0004)
	int                                                CostType;                                                 // 0x0074(0x0004)
	int                                                PurchaseType;                                             // 0x0078(0x0004)
	bool                                               bOverlap;                                                 // 0x007C(0x0004)
	byte                                               byModeItem;                                               // 0x0080(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0081(0x0003) MISSED OFFSET
	bool                                               bRepair;                                                  // 0x0084(0x0004)
	bool                                               bSellAuction;                                             // 0x0084(0x0004)
	int                                                AuctionMaxPrice;                                          // 0x0088(0x0004)
	int                                                AuctionMinPrice;                                          // 0x008C(0x0004)
	bool                                               bBuyShop;                                                 // 0x0090(0x0004)
	bool                                               bSellShop;                                                // 0x0090(0x0004)
	int                                                Period[0x5];                                              // 0x0094(0x0004)
	int                                                PointPrice[0x5];                                          // 0x00A8(0x0004)
	int                                                CashPrice[0x5];                                           // 0x00BC(0x0004)
	bool                                               bParts;                                                   // 0x00D0(0x0004)
	string                                             PartGroupID;                                              // 0x00D4(0x000C) (NeedCtorLink)
	struct FPartInfo[]                                 PartGroupList;                                            // 0x00E0(0x000C) (NeedCtorLink)
	struct FCustomPartInfo[]                           PartAllList;                                              // 0x00EC(0x000C) (NeedCtorLink)
	int[]                                              PartSightIndices;                                         // 0x00F8(0x000C) (NeedCtorLink)
	int[]                                              PartSilencerIndices;                                      // 0x0104(0x000C) (NeedCtorLink)
	int[]                                              PartBarrelIndices;                                        // 0x0110(0x000C) (NeedCtorLink)
	int[]                                              PartGusstockIndices;                                      // 0x011C(0x000C) (NeedCtorLink)
	struct FVector                                     vDisplay_3d;                                              // 0x0128(0x000C)
	float                                              fDisplay_3d_rot_y;                                        // 0x0134(0x0004)
	struct FVector                                     vBootyitem_3d;                                            // 0x0138(0x000C)
	float                                              fBootyitem_3d_rot_y;                                      // 0x0144(0x0004)
	bool                                               bPaints;                                                  // 0x0148(0x0004)
	string                                             PaintGroupID;                                             // 0x014C(0x000C) (NeedCtorLink)
	struct FPaintInfo[]                                PaintGroupList;                                           // 0x0158(0x000C) (NeedCtorLink)
	bool                                               bSkill;                                                   // 0x0164(0x0004)
	int                                                SkillUseType;                                             // 0x0168(0x0004)
	int                                                SkillType;                                                // 0x016C(0x0004)
	int                                                AdType;                                                   // 0x0170(0x0004)
	int                                                start_ammo;                                               // 0x0174(0x0004)
	int                                                clip_size;                                                // 0x0178(0x0004)
	int                                                ui_damage;                                                // 0x017C(0x0004)
	int                                                ui_spread;                                                // 0x0180(0x0004)
	int                                                ui_view_kick;                                             // 0x0184(0x0004)
	int                                                ui_rate_of_fire;                                          // 0x0188(0x0004)
	int                                                ui_move;                                                  // 0x018C(0x0004)
	int                                                ui_range;                                                 // 0x0190(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wItemBoxHK");
		return ptr;
	}


	int GetPartIDValue(int Hour, int Quantity, int Durability);
	bool IsShowInventory(class UwGameManager* GameMgr);
	bool IsShowStore(class UwGameManager* GameMgr);
	bool IsCashItem();
	string GetPartSkillName(int PartID);
	int GetUIDamage(int PartID);
	int GetUISpread(int PartID);
	int GetUIViewKick(int PartID);
	int GetUIRateOfFire(int PartID);
	int GetUIMove(int PartID);
	int GetUIRange(int PartID);
	string GetPartName(int PartID);
	int FindPartGroupIndex(int PartID);
	void SortPartList();
};


// Class Engine.wMatchUserInfo
// 0x0094 (0x00C0 - 0x002C)
class UwMatchUserInfo : public UObject
{
public:
	int                                                UID;                                                      // 0x002C(0x0004)
	string                                             UserName;                                                 // 0x0030(0x000C) (NeedCtorLink)
	int                                                TeamNum;                                                  // 0x003C(0x0004)
	string                                             ClanName;                                                 // 0x0040(0x000C) (NeedCtorLink)
	int                                                ClanMark;                                                 // 0x004C(0x0004)
	int                                                ClanBG;                                                   // 0x0050(0x0004)
	int                                                ClanBL;                                                   // 0x0054(0x0004)
	int                                                IsLookingFor;                                             // 0x0058(0x0004)
	int                                                ClanLevel;                                                // 0x005C(0x0004)
	string                                             UserIP;                                                   // 0x0060(0x000C) (NeedCtorLink)
	int                                                Grade;                                                    // 0x006C(0x0004)
	struct FEquippedItemInfo[]                         EquippedItems;                                            // 0x0070(0x000C) (NeedCtorLink)
	struct FEquippedSkillInfo[]                        EquippedSkills;                                           // 0x007C(0x000C) (NeedCtorLink)
	struct FEquippedQSlotInfo[]                        EquippedQSlots;                                           // 0x0088(0x000C) (NeedCtorLink)
	bool                                               IsHost;                                                   // 0x0094(0x0004)
	byte                                               bLoadingState;                                            // 0x0098(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0099(0x0003) MISSED OFFSET
	int                                                RoundPlayed;                                              // 0x009C(0x0004)
	int                                                TimePlayed;                                               // 0x00A0(0x0004)
	bool                                               bSendPing;                                                // 0x00A4(0x0004)
	bool                                               bReceivedPing;                                            // 0x00A4(0x0004)
	int                                                iReceivedPing;                                            // 0x00A8(0x0004)
	int                                                LevelMarkID;                                              // 0x00AC(0x0004)
	int                                                TitleMarkID;                                              // 0x00B0(0x0004)
	int                                                Reserved1;                                                // 0x00B4(0x0004)
	int                                                Reserved2;                                                // 0x00B8(0x0004)
	int                                                Reserved3;                                                // 0x00BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMatchUserInfo");
		return ptr;
	}


	void LogUsedStatus();
	int GetPaintIDEquippedItems(int weaponID);
	void ResetQSlotItemUse(int i, int j, float Time);
	void ResetItemUse(int i, float Time);
	void SetItemUse(int i);
	float ExtractBonusPoint(int ItemID, class UwGameManager* GameMgr);
	float ExtractBonusExp(int ItemID, class UwGameManager* GameMgr);
	float GetBonusPoint(class UwGameManager* GameMgr);
	float GetBonusExP(class UwGameManager* GameMgr);
};


// Class Engine.wItemBoxInstanceHK
// 0x0060 (0x008C - 0x002C)
class UwItemBoxInstanceHK : public UObject
{
public:
	class UwItemBoxCashHK*                             cashItemInfo;                                             // 0x002C(0x0004)
	int                                                ItemID;                                                   // 0x0030(0x0004)
	struct FBtrDouble                                  UniqueID;                                                 // 0x0034(0x0008)
	int                                                UniqueSkillID;                                            // 0x003C(0x0004)
	struct FBtrDouble                                  UntilTime;                                                // 0x0040(0x0008)
	struct FBtrTime                                    LeftTime;                                                 // 0x0048(0x0020)
	int                                                Durability;                                               // 0x0068(0x0004)
	int                                                DamageDegree;                                             // 0x006C(0x0004)
	int                                                SlotPosition;                                             // 0x0070(0x0004)
	int                                                PartID;                                                   // 0x0074(0x0004)
	int                                                ItemState;                                                // 0x0078(0x0004)
	int                                                OverlapCount;                                             // 0x007C(0x0004)
	int                                                PaintID;                                                  // 0x0080(0x0004)
	int                                                TradeCount;                                               // 0x0084(0x0004)
	int                                                Extra;                                                    // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wItemBoxInstanceHK");
		return ptr;
	}


	bool NotLeftTime();
	void SetExtraValue(class UwItemBoxHK* ItemInfo, int Value);
};


// Class Engine.wQuickSlotBoxHK
// 0x006C (0x0098 - 0x002C)
class UwQuickSlotBoxHK : public UObject
{
public:
	string                                             QuickSlotName;                                            // 0x002C(0x000C) (NeedCtorLink)
	int                                                QuickSlotID;                                              // 0x0038(0x0004)
	int                                                ItemID[0x5];                                              // 0x003C(0x0004)
	struct FBtrDouble                                  UniqueID[0x5];                                            // 0x0050(0x0008)
	int                                                SkillID[0x4];                                             // 0x0078(0x0004)
	int                                                UniqueSkillID[0x4];                                       // 0x0088(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wQuickSlotBoxHK");
		return ptr;
	}

};


// Class Engine.wGameManagerScriptPart
// 0x0078 (0x00A4 - 0x002C)
class UwGameManagerScriptPart : public UObject
{
public:
	struct FImage                                      kClanPattern_Img;                                         // 0x002C(0x0020)
	struct FImage                                      kClanBG_Img;                                              // 0x004C(0x0020)
	struct FImage                                      kClanBL_Img;                                              // 0x006C(0x0020)
	struct FImage[]                                    ClanMarkImg32;                                            // 0x008C(0x000C) (NeedCtorLink)
	struct FImage[]                                    ClanMarkImg128;                                           // 0x0098(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGameManagerScriptPart");
		return ptr;
	}

};


// Class Engine.wItemBoxCashHK
// 0x00E0 (0x010C - 0x002C)
class UwItemBoxCashHK : public UObject
{
public:
	string                                             WZItemName;                                               // 0x002C(0x000C) (NeedCtorLink)
	int                                                WZPurchaseType;                                           // 0x0038(0x0004)
	bool                                               UseDescription;                                           // 0x003C(0x0004)
	string                                             WZItemDescription;                                        // 0x0040(0x000C) (NeedCtorLink)
	int                                                WZLeftCount;                                              // 0x004C(0x0004)
	string                                             WZEndDate;                                                // 0x0050(0x000C) (NeedCtorLink)
	bool                                               bWZPackage;                                               // 0x005C(0x0004)
	bool                                               bWZCanBuy;                                                // 0x005C(0x0004)
	bool                                               bWZCanGift;                                               // 0x005C(0x0004)
	bool                                               bWZCapsuleItem;                                           // 0x005C(0x0004)
	int                                                WZPackageType;                                            // 0x0060(0x0004)
	int                                                WZPackageSeq;                                             // 0x0064(0x0004)
	int                                                WZCategorySeq;                                            // 0x0068(0x0004)
	int                                                WZPeriod[0x8];                                            // 0x006C(0x0004)
	int                                                WZCashPrice[0x8];                                         // 0x008C(0x0004)
	int                                                WZPriceSeq[0x8];                                          // 0x00AC(0x0004)
	int                                                WZOriginalCashPrice[0x8];                                 // 0x00CC(0x0004)
	int                                                WZStoreSeq;                                               // 0x00EC(0x0004)
	int                                                WZStoreItemSeq;                                           // 0x00F0(0x0004)
	int                                                WZStoreItemType;                                          // 0x00F4(0x0004)
	int                                                ProductCount;                                             // 0x00F8(0x0004)
	bool                                               EnablePCoin;                                              // 0x00FC(0x0004)
	bool                                               EnableCCoin;                                              // 0x00FC(0x0004)
	struct FBtrDouble                                  SaleEndTime;                                              // 0x0100(0x0008)
	bool                                               IsDiscount;                                               // 0x0108(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wItemBoxCashHK");
		return ptr;
	}


	bool CanGift();
	void SetCashItemInfoWZ(const struct FWebzenShopPackage& WZShopPackage, class UwItemBoxHK** ItemInfo);
	void SetCashItemInfoGP20(class UwItemBoxHK* ItemInfo, class UwGP20Product* gp20Product, int checkCoinType);
	bool CheckSaleEnd(const struct FBtrDouble& clientTime);
	bool STATIC_CheckSaleEndTime(const struct FBtrDouble& clientTime, const struct FBtrDouble& saleTime, class UObject* tempObj);
	bool STATIC_IsShowStore(const struct FBtrDouble& clientTime, class UwGP20Product* gp20Product);
	bool STATIC_IsCanBuy(const struct FBtrDouble& clientTime, class UwGP20Product* gp20Product);
	byte STATIC_CCoinType();
	byte STATIC_PCoinType();
};


// Class Engine.ClanMarkManager
// 0x0080 (0x00AC - 0x002C)
class UClanMarkManager : public UObject
{
public:
	class UClanNameAndMark*[]                          ClanMarkList;                                             // 0x002C(0x000C) (NeedCtorLink)
	float                                              Phase;                                                    // 0x0038(0x0004)
	float                                              AccumDelta;                                               // 0x003C(0x0004)
	float                                              BlendingFadeIn;                                           // 0x0040(0x0004)
	float                                              BlendingFadeOut;                                          // 0x0044(0x0004)
	class UwGameManager*                               GameMgr;                                                  // 0x0048(0x0004)
	struct FImage                                      ex_clanmark;                                              // 0x004C(0x0020)
	struct FImage                                      ex_clanmark_01;                                           // 0x006C(0x0020)
	struct FImage                                      ex_clanmark_02;                                           // 0x008C(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ClanMarkManager");
		return ptr;
	}


	void Render(class UCanvas* C, int X1, int Y1, int X2, int Y2, const string& ClanName);
	int FindClanMark_Inner(const string& ClanName, int Left, int Right);
	int FindClanMark(const string& ClanName);
	int FindClanMark_ForInsertLocation(const string& ClanName);
	bool RemoveClanMark(const string& ClanName);
	bool SetClanLevel(const string& ClanName, int ClanLevel);
	bool AddClanMark(const string& ClanName, int Pattern, int BG, int BL, bool bSetClanState, bool bClanLF);
	bool SetClanState(const string& ClanName, bool bClanLF);
	void Init(class UwGameManager* GM);
	void Tick(float Delta);
};


// Class Engine.wGP20Product
// 0x0080 (0x00AC - 0x002C)
class UwGP20Product : public UObject
{
public:
	int[]                                              ProductNo;                                                // 0x002C(0x000C) (NeedCtorLink)
	int[]                                              ProductCost;                                              // 0x0038(0x000C) (NeedCtorLink)
	int[]                                              ProductDiscountCost;                                      // 0x0044(0x000C) (NeedCtorLink)
	int[]                                              ProductHour;                                              // 0x0050(0x000C) (NeedCtorLink)
	int[]                                              ProductQuantity;                                          // 0x005C(0x000C) (NeedCtorLink)
	byte[]                                             SaleType;                                                 // 0x0068(0x000C) (NeedCtorLink)
	int[]                                              SaleStatus;                                               // 0x0074(0x000C) (NeedCtorLink)
	int[]                                              IsGift;                                                   // 0x0080(0x000C) (NeedCtorLink)
	string                                             ProductName;                                              // 0x008C(0x000C) (NeedCtorLink)
	int                                                ProductCode;                                              // 0x0098(0x0004)
	int                                                SaleMasterFlag;                                           // 0x009C(0x0004)
	struct FBtrDouble                                  SaleEndTime;                                              // 0x00A0(0x0008)
	class UwGP20Package*                               PackageInfo;                                              // 0x00A8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGP20Product");
		return ptr;
	}


	bool HasPCoin();
	int GetPrice(int costNum);
	bool IsDiscount(int costNum);
};


// Class Engine.wSkillBoxHK
// 0x0014 (0x0040 - 0x002C)
class UwSkillBoxHK : public UObject
{
public:
	byte                                               SlotPos;                                                  // 0x002C(0x0001)
	byte                                               Padding00[0x3];                                           // 0x002D(0x0003) MISSED OFFSET
	int                                                SkillID;                                                  // 0x0030(0x0004)
	int                                                UniqueSkillID;                                            // 0x0034(0x0004)
	struct FBtrDouble                                  UntilTime;                                                // 0x0038(0x0008)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkillBoxHK");
		return ptr;
	}

};


// Class Engine.ClanNameAndMark
// 0x00A0 (0x00CC - 0x002C)
class UClanNameAndMark : public UObject
{
public:
	string                                             ClanName;                                                 // 0x002C(0x000C) (NeedCtorLink)
	int                                                Pattern;                                                  // 0x0038(0x0004)
	int                                                BG;                                                       // 0x003C(0x0004)
	int                                                BL;                                                       // 0x0040(0x0004)
	bool                                               bClanLF;                                                  // 0x0044(0x0004)
	int                                                ClanLevel;                                                // 0x0048(0x0004)
	struct FImage                                      Pattern_Img;                                              // 0x004C(0x0020)
	struct FImage                                      BG_Img;                                                   // 0x006C(0x0020)
	struct FImage                                      BL_Img;                                                   // 0x008C(0x0020)
	struct FImage                                      ClanLevel_Img;                                            // 0x00AC(0x0020)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ClanNameAndMark");
		return ptr;
	}

};


// Class Engine.DelegateObject
// 0x0000 (0x002C - 0x002C)
class UDelegateObject : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DelegateObject");
		return ptr;
	}

};


// Class Engine.DelegateEventTimer
// 0x0038 (0x0064 - 0x002C)
class UDelegateEventTimer : public UDelegateObject
{
public:
	int                                                Data_Int[0x3];                                            // 0x002C(0x0004)
	string                                             Data_String[0x3];                                         // 0x0038(0x000C) (NeedCtorLink)
	struct FScriptDelegate                             __OnEventTimer__Delegate;                                 // 0x005C(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DelegateEventTimer");
		return ptr;
	}


	void OnEventTimer(int Index);
};


// Class Engine.wWeaponRes_Base
// 0x0260 (0x0704 - 0x04A4)
class AwWeaponRes_Base : public ADamageType
{
public:
	int                                                iResourceID;                                              // 0x04A4(0x0004)
	string                                             szName;                                                   // 0x04A8(0x000C) (NeedCtorLink)
	class UStaticMesh*                                 stProj;                                                   // 0x04B4(0x0004)
	string                                             szClass_Shell;                                            // 0x04B8(0x000C) (NeedCtorLink)
	string                                             szClass_Shell_3rd;                                        // 0x04C4(0x000C) (NeedCtorLink)
	string                                             szClass_Clip;                                             // 0x04D0(0x000C) (NeedCtorLink)
	string                                             szClass_Tracer;                                           // 0x04DC(0x000C) (NeedCtorLink)
	float                                              fTracerPop;                                               // 0x04E8(0x0004)
	string                                             szClass_Muzz_1st;                                         // 0x04EC(0x000C) (NeedCtorLink)
	string                                             szClass_Muzz_3rd;                                         // 0x04F8(0x000C) (NeedCtorLink)
	string                                             szClass_Smoke_1st;                                        // 0x0504(0x000C) (NeedCtorLink)
	string                                             szClass_Smoke_3rd;                                        // 0x0510(0x000C) (NeedCtorLink)
	string                                             szClass_Smoke_Silencer_1st;                               // 0x051C(0x000C) (NeedCtorLink)
	string                                             szClass_Smoke_Silencer_3rd;                               // 0x0528(0x000C) (NeedCtorLink)
	class UClass*                                      effect_Melee_Attack1;                                     // 0x0534(0x0004)
	class UClass*                                      effect_Melee_Attack2;                                     // 0x0538(0x0004)
	class UClass*                                      effect_Explosion;                                         // 0x053C(0x0004)
	class UClass*                                      effect_Explosion_dirt;                                    // 0x0540(0x0004)
	class UClass*                                      effect_Explosion_grass;                                   // 0x0544(0x0004)
	class UClass*                                      effect_Explosion_metal;                                   // 0x0548(0x0004)
	class UClass*                                      effect_Explosion_snow;                                    // 0x054C(0x0004)
	class UClass*                                      effect_Explosion_water;                                   // 0x0550(0x0004)
	class UClass*                                      effect_Explosion_wood;                                    // 0x0554(0x0004)
	class UClass*                                      effect_Explosion_enemy;                                   // 0x0558(0x0004)
	class UClass*                                      effect_PointMark;                                         // 0x055C(0x0004)
	class UClass*                                      effect_StartFuse;                                         // 0x0560(0x0004)
	class UClass*                                      effect_Idle_1st;                                          // 0x0564(0x0004)
	class UClass*                                      effect_Idle_3rd;                                          // 0x0568(0x0004)
	class UClass*                                      Proj_Smoke;                                               // 0x056C(0x0004)
	class UClass*                                      Proj_SmokeEx;                                             // 0x0570(0x0004)
	class UClass*                                      Proj_Corona;                                              // 0x0574(0x0004)
	class UClass*                                      Proj_CoronaEx;                                            // 0x0578(0x0004)
	class UClass*                                      Proj_ExplosionCrap;                                       // 0x057C(0x0004)
	class UClass*                                      Proj_ExplosionDecal;                                      // 0x0580(0x0004)
	class UClass*                                      Proj_FlameEmitter;                                        // 0x0584(0x0004)
	string                                             szIcon_HUD;                                               // 0x0588(0x000C) (NeedCtorLink)
	string                                             szIcon_Kill;                                              // 0x0594(0x000C) (NeedCtorLink)
	struct FIntBoxWH                                   ibIcon_Kill;                                              // 0x05A0(0x0010)
	string                                             szIcon_Ammo;                                              // 0x05B0(0x000C) (NeedCtorLink)
	string                                             szType_DisplayAmmo;                                       // 0x05BC(0x000C) (NeedCtorLink)
	class USound*                                      sound_Start_Fuse;                                         // 0x05C8(0x0004)
	string                                             fsound_Ready;                                             // 0x05CC(0x000C) (NeedCtorLink)
	string                                             fsound_Fire;                                              // 0x05D8(0x000C) (NeedCtorLink)
	string                                             fsound_Fire_Stereo;                                       // 0x05E4(0x000C) (NeedCtorLink)
	string                                             fSound_Fire_Silencer;                                     // 0x05F0(0x000C) (NeedCtorLink)
	string                                             fsound_Fire_Silencer_Stereo;                              // 0x05FC(0x000C) (NeedCtorLink)
	string                                             fsound_Fire_Far;                                          // 0x0608(0x000C) (NeedCtorLink)
	string                                             fsound_Fire_Stop;                                         // 0x0614(0x000C) (NeedCtorLink)
	string                                             fsound_Fire_Shell;                                        // 0x0620(0x000C) (NeedCtorLink)
	string                                             fsound_Fire_Empty;                                        // 0x062C(0x000C) (NeedCtorLink)
	string                                             fsound_Explosion;                                         // 0x0638(0x000C) (NeedCtorLink)
	string                                             fsound_Melee_Ok;                                          // 0x0644(0x000C) (NeedCtorLink)
	string                                             fsound_Melee_Miss;                                        // 0x0650(0x000C) (NeedCtorLink)
	string                                             fsound_Rechamber;                                         // 0x065C(0x000C) (NeedCtorLink)
	string                                             fsound_Reload;                                            // 0x0668(0x000C) (NeedCtorLink)
	string                                             fsound_ReloadEmpty;                                       // 0x0674(0x000C) (NeedCtorLink)
	string                                             fsound_ReloadBegin;                                       // 0x0680(0x000C) (NeedCtorLink)
	string                                             fsound_ReloadEnd;                                         // 0x068C(0x000C) (NeedCtorLink)
	string                                             fsound_Select;                                            // 0x0698(0x000C) (NeedCtorLink)
	string                                             fsound_Pickup;                                            // 0x06A4(0x000C) (NeedCtorLink)
	string                                             fsound_Bullet_Impact;                                     // 0x06B0(0x000C) (NeedCtorLink)
	string                                             fsound_Bullet_Move;                                       // 0x06BC(0x000C) (NeedCtorLink)
	string                                             fsound_Select_New;                                        // 0x06C8(0x000C) (NeedCtorLink)
	string                                             fsound_Start_Fuse;                                        // 0x06D4(0x000C) (NeedCtorLink)
	string                                             sound_Select_PackType;                                    // 0x06E0(0x000C) (NeedCtorLink)
	string                                             str_sound_Grenade;                                        // 0x06EC(0x000C) (NeedCtorLink)
	bool                                               UseWarhead;                                               // 0x06F8(0x0004)
	int                                                iCollisionRadius;                                         // 0x06FC(0x0004)
	int                                                iCollisionHeight;                                         // 0x0700(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponRes_Base");
		return ptr;
	}


	void STATIC_PrecacheSound();
	void STATIC_PrecacheMaterials(class ALevelInfo* Level);
	void STATIC_PrecacheClasses();
};


// Class Engine.wDamageStepOn
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageStepOn : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageStepOn");
		return ptr;
	}

};


// Class Engine.GameInfoScriptPart
// 0x0088 (0x00B4 - 0x002C)
class UGameInfoScriptPart : public UObject
{
public:
	struct FKillDeathLog                               KDLog;                                                    // 0x002C(0x0054)
	bool                                               KDLogSaved;                                               // 0x0080(0x0004)
	float                                              RespawnFailDuration;                                      // 0x0084(0x0004)
	float                                              SafeSpawn_DAMAGE_DEAL_TIME;                               // 0x0088(0x0004)
	float                                              SafeSpawn_DAMAGE_RECEIVE_TIME;                            // 0x008C(0x0004)
	float                                              SafeSpawn_DISABLE_DISTANCE;                               // 0x0090(0x0004)
	int[]                                              AssistUIDs;                                               // 0x0094(0x000C) (NeedCtorLink)
	byte[]                                             AssistType;                                               // 0x00A0(0x000C) (NeedCtorLink)
	int                                                KillWeaponType;                                           // 0x00AC(0x0004)
	bool                                               IsWeaponAiming;                                           // 0x00B0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameInfoScriptPart");
		return ptr;
	}

};


// Class Engine.Crushed
// 0x0000 (0x04A4 - 0x04A4)
class ACrushed : public ADamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Crushed");
		return ptr;
	}

};


// Class Engine.fell
// 0x0000 (0x04A4 - 0x04A4)
class Afell : public ADamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.fell");
		return ptr;
	}

};


// Class Engine.FellLava
// 0x0000 (0x04A4 - 0x04A4)
class AFellLava : public Afell
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FellLava");
		return ptr;
	}

};


// Class Engine.Effects
// 0x0000 (0x03D8 - 0x03D8)
class AEffects : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Effects");
		return ptr;
	}

};


// Class Engine.wWeaponAcce
// 0x0030 (0x0408 - 0x03D8)
class AwWeaponAcce : public AActor
{
public:
	string                                             szName;                                                   // 0x03D8(0x000C) (NeedCtorLink)
	EAcceType                                          AcceType;                                                 // 0x03E4(0x0001)
	byte                                               Padding00[0x3];                                           // 0x03E5(0x0003) MISSED OFFSET
	struct FVector                                     vAimDiff;                                                 // 0x03E8(0x000C)
	int                                                PartsItemID;                                              // 0x03F4(0x0004)
	int                                                PartsGroupID;                                             // 0x03F8(0x0004)
	class UStaticMesh*                                 BaseStaticMesh;                                           // 0x03FC(0x0004)
	class UStaticMesh*                                 Scope3DAimMesh;                                           // 0x0400(0x0004)
	bool                                               bIsAiming;                                                // 0x0404(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wWeaponAcce");
		return ptr;
	}


	bool IsAiming();
	void Switch3DScope(bool bAiming);
	bool Set(EAcceType Type, const string& szMesh, const struct FVector& AimDiff, int iPartsItemID, int iPartsGroupID, bool bUseMeshString);
};


// Class Engine.wMessage_Score
// 0x0120 (0x0570 - 0x0450)
class AwMessage_Score : public ALocalMessage
{
public:
	string                                             strScore_Default;                                         // 0x0450(0x000C) (Localized, NeedCtorLink)
	string                                             strScore_Assist;                                          // 0x045C(0x000C) (Localized, NeedCtorLink)
	string                                             strScore_Capture;                                         // 0x0468(0x000C) (Localized, NeedCtorLink)
	string                                             strScore_BombSetted;                                      // 0x0474(0x000C) (Localized, NeedCtorLink)
	string                                             strScore_BombDiffused;                                    // 0x0480(0x000C) (Localized, NeedCtorLink)
	int                                                Code_MessageScore_Normal;                                 // 0x048C(0x0004)
	int                                                Code_MessageScore_Heli_Killed;                            // 0x0490(0x0004)
	int                                                Code_MessageScore_Sentry;                                 // 0x0494(0x0004)
	int                                                Code_MessageScore_Assist;                                 // 0x0498(0x0004)
	int                                                Code_MessageScore_Assist4;                                // 0x049C(0x0004)
	int                                                Code_MessageScore_Assist5;                                // 0x04A0(0x0004)
	int                                                Code_MessageScore_Assist_Special;                         // 0x04A4(0x0004)
	int                                                Code_MessageScore_Capture;                                // 0x04A8(0x0004)
	int                                                Code_MessageScore_BombSetted;                             // 0x04AC(0x0004)
	int                                                Code_MessageScore_BombDiffused;                           // 0x04B0(0x0004)
	int                                                Code_GainBonusPoint;                                      // 0x04B4(0x0004)
	int                                                GainPoint_Three;                                          // 0x04B8(0x0004)
	int                                                GainPoint_Four;                                           // 0x04BC(0x0004)
	int                                                GainPoint_Five;                                           // 0x04C0(0x0004)
	int                                                GainPoint_Six;                                            // 0x04C4(0x0004)
	int                                                GainPoint_Ten;                                            // 0x04C8(0x0004)
	int                                                GainPoint_Twenty;                                         // 0x04CC(0x0004)
	float                                              TextPosX;                                                 // 0x04D0(0x0004)
	float                                              TextPosY;                                                 // 0x04D4(0x0004)
	float                                              fTotalEffectRunTime;                                      // 0x04D8(0x0004)
	float                                              fEffectRunTime1;                                          // 0x04DC(0x0004)
	float                                              fEffectRunTime2;                                          // 0x04E0(0x0004)
	float                                              fFadeOutTime;                                             // 0x04E4(0x0004)
	float                                              StartScale;                                               // 0x04E8(0x0004)
	float                                              ScaleStep;                                                // 0x04EC(0x0004)
	float                                              ScaleStepMultiplier;                                      // 0x04F0(0x0004)
	string                                             AMessageScoreSound;                                       // 0x04F4(0x000C) (NeedCtorLink)
	string                                             AMessageHeadshotSound;                                    // 0x0500(0x000C) (NeedCtorLink)
	string                                             AMessageScoreChainSound;                                  // 0x050C(0x000C) (NeedCtorLink)
	string                                             AMsgHeliKillSound;                                        // 0x0518(0x000C) (NeedCtorLink)
	string                                             AMsgArtilleryKillSound;                                   // 0x0524(0x000C) (NeedCtorLink)
	string                                             AMsgMeleeKillSound;                                       // 0x0530(0x000C) (NeedCtorLink)
	string                                             AMsgGrenadeKillSound;                                     // 0x053C(0x000C) (NeedCtorLink)
	string                                             AMsgStepOnKillSound;                                      // 0x0548(0x000C) (NeedCtorLink)
	string                                             AMsgSpecialETCKillSound;                                  // 0x0554(0x000C) (NeedCtorLink)
	string                                             AMsgSentryGunKillSound;                                   // 0x0560(0x000C) (NeedCtorLink)
	int                                                iMaxDisplayMessage;                                       // 0x056C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_Score");
		return ptr;
	}


	int STATIC_GetGainPoint(int Code_MessageScore);
	void STATIC_PlaySoundMessageScore(class APlayerController* P, const string& SoundKind);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.wDamageMelee
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageMelee : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageMelee");
		return ptr;
	}

};


// Class Engine.DamTypeTelefragged
// 0x0000 (0x04A4 - 0x04A4)
class ADamTypeTelefragged : public ADamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamTypeTelefragged");
		return ptr;
	}

};


// Class Engine.Gibbed
// 0x0000 (0x04A4 - 0x04A4)
class AGibbed : public ADamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Gibbed");
		return ptr;
	}

};


// Class Engine.PrecacheInterface
// 0x0000 (0x002C - 0x002C)
class UPrecacheInterface : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PrecacheInterface");
		return ptr;
	}


	void STATIC_PrecacheGameSkeletalMeshes(class ALevelInfo* myLevel);
	void STATIC_PrecacheGameStaticMeshes(class ALevelInfo* myLevel);
	void STATIC_PrecacheGameTextures(class ALevelInfo* myLevel);
};


// Class Engine.Armor
// 0x0010 (0x0478 - 0x0468)
class AArmor : public APowerups
{
public:
	class UClass*                                      ProtectionType;                                           // 0x0468(0x0004) (Edit)
	int                                                ArmorAbsorption;                                          // 0x046C(0x0004) (Edit)
	int                                                AbsorptionPriority;                                       // 0x0470(0x0004) (Edit)
	class AArmor*                                      NextArmor;                                                // 0x0474(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Armor");
		return ptr;
	}


	class AArmor* PrioritizeArmor(int Damage, class UClass* DamageType, const struct FVector& HitLocation);
	void ArmorImpactEffect(const struct FVector& HitLocation);
	int ArmorPriority(class UClass* DamageType);
	int ArmorAbsorbDamage(int Damage, class UClass* DamageType, const struct FVector& HitLocation);
};


// Class Engine.wMeleeFire
// 0x0030 (0x01E8 - 0x01B8)
class UwMeleeFire : public UwWeaponFire
{
public:
	float                                              frange;                                                   // 0x01B8(0x0004)
	float                                              fDegree_InsideAngle;                                      // 0x01BC(0x0004)
	class AwWeapon*                                    weapon_Old;                                               // 0x01C0(0x0004)
	string                                             FmodSound_Hit;                                            // 0x01C4(0x000C) (NeedCtorLink)
	string                                             FmodSound_Miss;                                           // 0x01D0(0x000C) (NeedCtorLink)
	int                                                tempCount;                                                // 0x01DC(0x0004)
	bool                                               bApplyMeleeAttackDelay;                                   // 0x01E0(0x0004)
	EExpressType                                       ExpressType;                                              // 0x01E4(0x0001)
	byte                                               Padding00[0x3];                                           // 0x01E5(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMeleeFire");
		return ptr;
	}


	void ReSetMeleeFireAnim(int nWeaponID);
	void SetFireAnim();
	void SetRangeDF();
	void wLoadOut();
	void DoTraceTutorial(const struct FVector& Start, const struct FRotator& Dir);
	void DoTrace(const struct FVector& Start, const struct FRotator& Dir);
	float GetDamagePerc(byte HitPart);
	bool FindTarget4(const struct FVector& Start, const struct FRotator& Dir, class AActor** rTarget, struct FVector* HitLocation);
	bool FindTarget(const struct FVector& Start, const struct FRotator& Dir, class APawn** rTarget, struct FVector* HitLocation);
	bool FindTarget3(const struct FVector& Start, const struct FRotator& Dir, class AActor** rTarget, struct FVector* HitLocation);
	bool FindTarget2(const struct FVector& Start, const struct FRotator& Dir, class AActor** rTarget, struct FVector* HitLocation, struct FVector* HitNormal, byte* HitCollisionPart);
	void DoFireEffect();
	void PlayFiring();
	void ModeDoFire();
};


// Class Engine.wSkinShell
// 0x000C (0x03E4 - 0x03D8)
class AwSkinShell : public AActor
{
public:
	struct FVector                                     vAimDiff;                                                 // 0x03D8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkinShell");
		return ptr;
	}

};


// Class Engine.WeaponPickup
// 0x000C (0x0448 - 0x043C)
class AWeaponPickup : public APickup
{
public:
	bool                                               bWeaponStay;                                              // 0x043C(0x0004)
	bool                                               bThrown;                                                  // 0x043C(0x0004) (Edit)
	int                                                AmmoAmount[0x2];                                          // 0x0440(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WeaponPickup");
		return ptr;
	}


	void Reset();
	void InitDroppedPickupFor(class AInventory* Inv);
	float GetRespawnTime();
	float BotDesireability(class APawn* Bot);
	float DetourWeight(class APawn* Other, float PathWeight);
	bool AllowRepeatPickup();
	void StartSleeping();
	void STATIC_UpdateHUD(class AHUD* H);
	void SetWeaponStay();
	void PostBeginPlay();
};


// Class Engine.IntClass
// 0x0004 (0x0030 - 0x002C)
class UIntClass : public UObject
{
public:
	int                                                Index;                                                    // 0x002C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.IntClass");
		return ptr;
	}

};


// Class Engine.wNPCActions
// 0x0004 (0x0030 - 0x002C)
class UwNPCActions : public UObject
{
public:
	bool                                               MoveToEnemyInfluence;                                     // 0x002C(0x0004)
	bool                                               MoveToSeeTarget;                                          // 0x002C(0x0004)
	bool                                               LookAround;                                               // 0x002C(0x0004)
	bool                                               UseHelicopter;                                            // 0x002C(0x0004)
	bool                                               UseAirstrikeRealTime;                                     // 0x002C(0x0004)
	bool                                               UseUAV;                                                   // 0x002C(0x0004)
	bool                                               MeleeNoTarget;                                            // 0x002C(0x0004)
	bool                                               ThrowGrenadeRealTime;                                     // 0x002C(0x0004)
	bool                                               SwitchWeapon;                                             // 0x002C(0x0004)
	bool                                               PickHealth;                                               // 0x002C(0x0004)
	bool                                               PickHelicopter;                                           // 0x002C(0x0004)
	bool                                               PickAirstrike;                                            // 0x002C(0x0004)
	bool                                               PickUAV;                                                  // 0x002C(0x0004)
	bool                                               m_bPickSentryGun;                                         // 0x002C(0x0004)
	bool                                               GotoFlag;                                                 // 0x002C(0x0004)
	bool                                               CaptureFlag;                                              // 0x002C(0x0004)
	bool                                               RemoveBarricade;                                          // 0x002C(0x0004)
	bool                                               bAimSpecificParts;                                        // 0x002C(0x0004)
	bool                                               Fire;                                                     // 0x002C(0x0004)
	bool                                               FireHelicopter;                                           // 0x002C(0x0004)
	bool                                               Reload;                                                   // 0x002C(0x0004)
	bool                                               Explore;                                                  // 0x002C(0x0004)
	bool                                               ExploreTutorial;                                          // 0x002C(0x0004)
	bool                                               IdleHands;                                                // 0x002C(0x0004)
	bool                                               ApproachAndMelee;                                         // 0x002C(0x0004)
	bool                                               ApproachTarget;                                           // 0x002C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wNPCActions");
		return ptr;
	}

};


// Class Engine.wSpecialKillMessage
// 0x00D8 (0x0528 - 0x0450)
class AwSpecialKillMessage : public ALocalMessage
{
public:
	string                                             strScore_Heli;                                            // 0x0450(0x000C) (NeedCtorLink)
	string                                             strScore_Artillery;                                       // 0x045C(0x000C) (NeedCtorLink)
	string                                             strScore_Headshot;                                        // 0x0468(0x000C) (NeedCtorLink)
	string                                             strScore_Headshot_Aim;                                    // 0x0474(0x000C) (NeedCtorLink)
	string                                             strScore_FragGrenade;                                     // 0x0480(0x000C) (NeedCtorLink)
	string                                             strScore_Melee;                                           // 0x048C(0x000C) (NeedCtorLink)
	string                                             strScore_StepOn;                                          // 0x0498(0x000C) (NeedCtorLink)
	string                                             strScore_SpecialETC;                                      // 0x04A4(0x000C) (NeedCtorLink)
	string                                             strScore_Normal;                                          // 0x04B0(0x000C) (NeedCtorLink)
	string                                             strScore_Normal_Aim;                                      // 0x04BC(0x000C) (NeedCtorLink)
	string                                             strScore_WallShot;                                        // 0x04C8(0x000C) (NeedCtorLink)
	string                                             strScore_Sentry;                                          // 0x04D4(0x000C) (NeedCtorLink)
	int                                                Code_MessageScore_Heli_Killer;                            // 0x04E0(0x0004)
	int                                                Code_MessageScore_Artillery;                              // 0x04E4(0x0004)
	int                                                Code_MessageScore_Headshot;                               // 0x04E8(0x0004)
	int                                                Code_MessageScore_Headshot_Aim;                           // 0x04EC(0x0004)
	int                                                Code_MessageScore_FragGrenade;                            // 0x04F0(0x0004)
	int                                                Code_MessageScore_Melee;                                  // 0x04F4(0x0004)
	int                                                Code_MessageScore_StepOn;                                 // 0x04F8(0x0004)
	int                                                Code_MessageScore_SpecialETC;                             // 0x04FC(0x0004)
	int                                                Code_MessageScore_Normal;                                 // 0x0500(0x0004)
	int                                                Code_MessageScore_Normal_Aim;                             // 0x0504(0x0004)
	int                                                Code_MessageScore_WallShot;                               // 0x0508(0x0004)
	int                                                Code_MessageScore_Sentry;                                 // 0x050C(0x0004)
	float                                              fTotalEffectRunTime;                                      // 0x0510(0x0004)
	float                                              fEffectRunTime1;                                          // 0x0514(0x0004)
	float                                              fEffectRunTime2;                                          // 0x0518(0x0004)
	float                                              fFadeOutTime;                                             // 0x051C(0x0004)
	class USound*                                      HeadShotSound;                                            // 0x0520(0x0004)
	FName                                              AHeadShotSound;                                           // 0x0524(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSpecialKillMessage");
		return ptr;
	}


	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.MaplistRecord
// 0x0060 (0x008C - 0x002C)
class UMaplistRecord : public UObject
{
public:
	bool                                               bDirty;                                                   // 0x002C(0x0004)
	string                                             Title;                                                    // 0x0030(0x000C) (NeedCtorLink)
	string                                             GameType;                                                 // 0x003C(0x000C) (NeedCtorLink)
	int                                                Active;                                                   // 0x0048(0x0004)
	struct FMapItem[]                                  Maps;                                                     // 0x004C(0x000C) (NeedCtorLink)
	string                                             DefaultTitle;                                             // 0x0058(0x000C) (NeedCtorLink)
	string                                             DefaultGameType;                                          // 0x0064(0x000C) (NeedCtorLink)
	int                                                DefaultActive;                                            // 0x0070(0x0004)
	string[]                                           DefaultMaps;                                              // 0x0074(0x000C) (NeedCtorLink)
	struct FMapItem[]                                  CachedMaps;                                               // 0x0080(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaplistRecord");
		return ptr;
	}


	void STATIC_CreateMapItemList(string[] MapURLs, struct FMapItem[]* MapItems);
	bool STATIC_CreateMapItem(const string& FullMapURL, struct FMapItem* Item);
	struct FKeyValuePair STATIC_CreateMapOption(string* MapOptionString);
	string STATIC_GetBaseMapName(string* FullMapURL);
	bool STATIC_ItemHasOption(const struct FMapItem& Item, const struct FKeyValuePair& Option);
	bool MapHasOption(int MapIndex, const struct FKeyValuePair& Option);
	bool ValidOptionIndex(int MapIndex, int OptionIndex);
	bool ValidIndex(int i);
	bool ValidMap(const string& MapName);
	int GetOptionIndex(int MapIndex, const struct FKeyValuePair& Option);
	int GetMapItemIndex(const struct FMapItem& Item);
	int GetMapIndex(const string& MapName);
	int GetActiveMapIndex();
	int GetCacheIndex(const string& MapName);
	bool IsDirty();
	string[] GetAllMapURL();
	struct FMapItem[] GetMaps();
	string GetMapURL(int Index);
	string GetMapName(int i);
	string GetActiveMapURL();
	string GetActiveMapName();
	string GetGameType();
	string GetTitle();
	bool SetMapOptions(int MapIndex, const string& OptionString);
	bool RemoveMap(const string& MapName);
	bool InsertMap(const string& MapName, int Index);
	bool AddMap(const string& MapName);
	void RefreshMapItem(int MapIndex);
	bool RemoveOptionItem(int MapIndex, const struct FKeyValuePair& Option);
	bool RemoveOptionString(int MapIndex, const string& OptionString);
	bool AddOptionItem(int MapIndex, const struct FKeyValuePair& Option);
	bool AddOptionString(int MapIndex, const string& OptionString);
	void Clear(bool bReset);
	void CancelChanges();
	void VerifyMaps();
	void Save();
	void SetMapItemList(struct FMapItem[] NewMaps);
	void SetMaplist(string[] NewMaps);
	int SetActiveMap(int i);
	bool SetGameType(const string& NewGameType);
	bool SetTitle(const string& NewTitle);
	void SetCacheMaps(struct FMapItem[] CacheMaps);
	void Created();
	bool STATIC_CompareItemsSlow(const struct FMapItem& A, const struct FMapItem& B);
	bool STATIC_CompareItems(const struct FMapItem& A, const struct FMapItem& B);
	bool STATIC_EqualEqual_MapItemMapItem(const struct FMapItem& A, const struct FMapItem& B);
	bool STATIC_EqualEqual_KeyValuePairKeyValuePair(const struct FKeyValuePair& A, const struct FKeyValuePair& B);
};


// Class Engine.MapList
// 0x001C (0x0448 - 0x042C)
class AMapList : public AInfo
{
public:
	struct FMapRecord[]                                CachedMaps;                                               // 0x042C(0x000C) (NeedCtorLink)
	string[]                                           Maps;                                                     // 0x0438(0x000C) (Edit, NeedCtorLink)
	int                                                MapNum;                                                   // 0x0444(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MapList");
		return ptr;
	}


	bool STATIC_SetMaplist(int CurrentNum, string[] NewMaps);
	bool STATIC_StaticHasInvalidMaps(bool bReadOnly);
	bool HasInvalidMaps(bool bReadOnly);
	string[] STATIC_StaticGetMaps();
	string[] GetMaps();
	string GetMap(int MapIndex);
	int FindCacheIndex(const string& MapName);
	string UpdateMapNum(int NewMapNum);
	string GetNextMap();
	void PostBeginPlay();
	void PreBeginPlay();
};


// Class Engine.wDamagePinpointBomb
// 0x0000 (0x04A4 - 0x04A4)
class AwDamagePinpointBomb : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamagePinpointBomb");
		return ptr;
	}

};


// Class Engine.wDamageRPG
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageRPG : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageRPG");
		return ptr;
	}

};


// Class Engine.wDamageChangedHost
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageChangedHost : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageChangedHost");
		return ptr;
	}

};


// Class Engine.wMultiKillMessage
// 0x0138 (0x0588 - 0x0450)
class AwMultiKillMessage : public ALocalMessage
{
public:
	string                                             KillString[0xF];                                          // 0x0450(0x000C) (NeedCtorLink)
	class USound*                                      KillSound[0x7];                                           // 0x0504(0x0004)
	string                                             KillSoundName[0x7];                                       // 0x0520(0x000C) (NeedCtorLink)
	FName                                              MuliKillSoundName[0x5];                                   // 0x0574(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMultiKillMessage");
		return ptr;
	}


	void STATIC_ClientReceiveEx(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, int iReserve);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.wMessage_BGM
// 0x0028 (0x0478 - 0x0450)
class AwMessage_BGM : public ALocalMessage
{
public:
	int                                                Code_Start;                                               // 0x0450(0x0004)
	int                                                Code_Combat;                                              // 0x0454(0x0004)
	int                                                Code_WinAF;                                               // 0x0458(0x0004)
	int                                                Code_WinRSA;                                              // 0x045C(0x0004)
	int                                                Code_LoseAF;                                              // 0x0460(0x0004)
	int                                                Code_LoseRSA;                                             // 0x0464(0x0004)
	int                                                Code_AlmostOverLead;                                      // 0x0468(0x0004)
	int                                                Code_AlmostOverFallBehind;                                // 0x046C(0x0004)
	int                                                BGMDuration;                                              // 0x0470(0x0004)
	int                                                BGMInterval;                                              // 0x0474(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_BGM");
		return ptr;
	}


	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.WaitView
// 0x0000 (0x04A0 - 0x04A0)
class AWaitView : public ASmallNavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaitView");
		return ptr;
	}

};


// Class Engine.WaitViewNoTeam
// 0x0000 (0x04A0 - 0x04A0)
class AWaitViewNoTeam : public AWaitView
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaitViewNoTeam");
		return ptr;
	}

};


// Class Engine.GameRules
// 0x0004 (0x0430 - 0x042C)
class AGameRules : public AInfo
{
public:
	class AGameRules*                                  NextGameRules;                                            // 0x042C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.GameRules");
		return ptr;
	}


	int NetDamage(int OriginalDamage, int Damage, class APawn* injured, class APawn* instigatedBy, const struct FVector& HitLocation, class UClass* DamageType, struct FVector* Momentum);
	bool CriticalPlayer(class AController* Other);
	void ScoreKill(class AController* Killer, class AController* Killed);
	void ScoreObjective(class APlayerReplicationInfo* Scorer, int Score);
	bool PreventSever(class APawn* Killed, const FName& BoneName, int Damage, class UClass* DamageType);
	bool PreventDeath(class APawn* Killed, class AController* Killer, class UClass* DamageType, const struct FVector& HitLocation);
	bool OverridePickupQuery(class APawn* Other, class APickup* Item, byte* bAllowPickup);
	bool CheckScore(class APlayerReplicationInfo* Scorer);
	bool CheckEndGame(class APlayerReplicationInfo* Winner, const string& Reason);
	bool HandleRestartGame();
	void GetServerDetails(struct FServerResponseLine* ServerState);
	string GetRules();
	class ANavigationPoint* FindPlayerStart(class AController* Player, byte inTeam, const string& incomingName);
	void AddGameRules(class AGameRules* GR);
};


// Class Engine.MessagingSpectator
// 0x0000 (0x0DA8 - 0x0DA8)
class AMessagingSpectator : public APlayerController
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MessagingSpectator");
		return ptr;
	}


	void InitPlayerReplicationInfo();
	void PostBeginPlay();
};


// Class Engine.PlayerStart_Defence
// 0x0008 (0x04CC - 0x04C4)
class APlayerStart_Defence : public APlayerStart
{
public:
	ESpawnTeam                                         eTeamType;                                                // 0x04C4(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x04C5(0x0003) MISSED OFFSET
	int                                                RegenLoc;                                                 // 0x04C8(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart_Defence");
		return ptr;
	}

};


// Class Engine.VotingHandler
// 0x0000 (0x042C - 0x042C)
class AVotingHandler : public AInfo
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.VotingHandler");
		return ptr;
	}


	void GetServerDetails(struct FServerResponseLine* ServerState);
	void ReloadAll(bool bParam);
	bool STATIC_IsEnabled();
	void STATIC_FillPlayInfo(class UPlayInfo* PlayInfo);
	int GetConfigArrayItemCount(const string& ConfigArrayName);
	void UpdateConfigArrayItem(const string& ConfigArrayName, int RowIndex, int ColumnIndex, const string& NewValue);
	int AddConfigArrayItem(const string& ConfigArrayName);
	void DeleteConfigArrayItem(const string& ConfigArrayName, int RowIndex);
	string GetConfigArrayColumnTitle(const string& ConfigArrayName, int ColumnIndex);
	string GetConfigArrayData(const string& ConfigArrayName, int RowIndex, int ColumnIndex);
	bool HandleRestartGame();
	void PlayerExit(class AController* Exiting);
	void PlayerJoin(class APlayerController* Player);
};


// Class Engine.Satellite
// 0x0000 (0x04A0 - 0x04A0)
class ASatellite : public ASmallNavigationPoint
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Satellite");
		return ptr;
	}

};


// Class Engine.MaplistManager
// 0x0064 (0x0490 - 0x042C)
class AMaplistManager : public AMaplistManagerBase
{
public:
	struct FGameRecordGroup[]                          Games;                                                    // 0x042C(0x000C) (NeedCtorLink)
	string[]                                           MaplistRecordNames;                                       // 0x0438(0x000C) (NeedCtorLink)
	struct FGameRecord[]                               CachedGames;                                              // 0x0444(0x000C) (NeedCtorLink)
	struct FMaplistRecordGroup[]                       Groups;                                                   // 0x0450(0x000C) (NeedCtorLink)
	string                                             DefaultListName;                                          // 0x045C(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             InvalidGameType;                                          // 0x0468(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             ReallyInvalidGameType;                                    // 0x0474(0x000C) (Edit, Localized, NeedCtorLink)
	string                                             DefaultListExists;                                        // 0x0480(0x000C) (Edit, Localized, NeedCtorLink)
	bool                                               bDirty;                                                   // 0x048C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MaplistManager");
		return ptr;
	}


	bool MaplistDirty(int GameIndex, int RecordIndex);
	bool ValidName(const string& S);
	bool ValidGameType(const string& GameType);
	bool ValidGameIndex(int i);
	bool ValidCacheGameIndex(int i);
	int GetActiveMap(int GameIndex, int RecordIndex);
	int GetActiveList(int GameIndex);
	string GetMapListTitle(int GameIndex, int RecordIndex);
	int GetRecordIndex(int GameIndex, const string& MapListName);
	int GetMapIndex(int GameIndex, int RecordIndex, const string& MapName);
	int FindMaplistContaining(int GameIndex, const string& MapName);
	string[] GetCacheMapList(const string& Acronym);
	bool GetAvailableMaps(int GameIndex, struct FMapItem[]* AR);
	string[] GetMapList(int GameIndex, int RecordIndex);
	string GetMapURL(int GameIndex, int RecordIndex, int MapIndex);
	string GetMapTitle(int GameIndex, int RecordIndex, int MapIndex);
	string GetActiveMapName(int GameIndex, int RecordIndex);
	string[] GetCurrentMapRotation();
	string[] GetMapListNames(int GameIndex);
	int GetCacheGameIndex(const string& GameType);
	int GetGameIndex(const string& GameType);
	int SetActiveMap(int GameIndex, int RecordIndex, int MapIndex);
	void ShiftMap(int GameIndex, int RecordIndex, const string& MapName, int Count);
	bool RemoveMap(int GameIndex, int RecordIndex, const string& MapName);
	bool InsertMap(int GameIndex, int RecordIndex, const string& MapName, int ListIndex);
	bool AddMap(int GameIndex, int RecordIndex, const string& MapName);
	bool SetActiveList(int GameIndex, int NewActive);
	bool ApplyMapList(int GameIndex, int RecordIndex);
	void ResetGame(int GameIndex);
	bool SaveGame(int GameIndex);
	void ResetList(int GameIndex, int RecordIndex);
	bool ClearList(int GameIndex, int RecordIndex);
	bool SaveMapList(int GameIndex, int RecordIndex);
	int RemoveList(int GameIndex, int RecordIndex);
	int RenameList(int GameIndex, int RecordIndex, const string& NewName);
	int AddList(const string& GameType, const string& NewName, string[] Maps);
	void MapChange(const string& NewMap);
	bool ValidRecordIndex(int GameIndex, int MapListIndex);
	class UMaplistRecord*[] GetRecords(int GameIndex);
	bool IsNewGameType(const string& GameClassName);
	class UMaplistRecord* CreateRecord(const string& RecordName);
	void Save();
	int GetStoredGameIndex(const string& GameType);
	int RemoveRecord(int GameIndex, int RecordIndex);
	bool RemoveGame(int i);
	void GenerateGroupMaplist(int GroupIndex);
	int AddGameType(const string& NewGameType);
	int AddGroup(const string& GameType);
	int AddMaplistRecord(class UMaplistRecord* Rec);
	void InitializeActiveLists();
	void InitializeMaplistRecords();
	bool GetDefaultMaps(const string& MapListClassName, string[]* Maps);
	void CreateDefaultList(int i);
	void Destroyed();
	void PreBeginPlay();
};


// Class Engine.EmitterFirstPerson
// 0x0000 (0x0468 - 0x0468)
class AEmitterFirstPerson : public AEmitter
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EmitterFirstPerson");
		return ptr;
	}


	void PostNetBeginPlay();
	void DestroyIfThirdPerson();
};


// Class Engine.DamRanOver
// 0x0000 (0x04A4 - 0x04A4)
class ADamRanOver : public ADamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.DamRanOver");
		return ptr;
	}

};


// Class Engine.ShadowProjector
// 0x0028 (0x0590 - 0x0568)
class AShadowProjector : public AProjector
{
public:
	class AActor*                                      ShadowActor;                                              // 0x0568(0x0004) (Edit)
	struct FVector                                     LightLocation;                                            // 0x056C(0x000C) (Edit)
	struct FVector                                     LightDirection;                                           // 0x0578(0x000C) (Edit)
	float                                              LightDistance;                                            // 0x0584(0x0004) (Edit)
	bool                                               RootMotion;                                               // 0x0588(0x0004) (Edit)
	bool                                               bBlobShadow;                                              // 0x0588(0x0004) (Edit)
	bool                                               bShadowActive;                                            // 0x0588(0x0004) (Edit)
	class UShadowBitmapMaterial*                       ShadowTexture;                                            // 0x058C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ShadowProjector");
		return ptr;
	}


	void LightUpdate(class AActor*[] LightSources);
	void UpdateSunLight(const struct FVector& SunDir);
	void Tick(float DeltaTime);
	void UpdateShadow();
	void InitShadow();
	void Destroyed();
	void PostBeginPlay();
};


// Class Engine.HudOverlay
// 0x0000 (0x03D8 - 0x03D8)
class AHudOverlay : public AActor
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.HudOverlay");
		return ptr;
	}


	void Destroyed();
	void Render(class UCanvas* C);
};


// Class Engine.FailedConnect
// 0x0030 (0x0480 - 0x0450)
class AFailedConnect : public ALocalMessage
{
public:
	string                                             FailMessage[0x4];                                         // 0x0450(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.FailedConnect");
		return ptr;
	}


	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	int STATIC_GetFailSwitch(const string& FailString);
};


// Class Engine.wSkill_RestoreSupply
// 0x000C (0x0070 - 0x0064)
class UwSkill_RestoreSupply : public UwSkill
{
public:
	struct FsSUPPLY_ITEM_EQUIPMENT[]                   m_abSupplyItemEquipment;                                  // 0x0064(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkill_RestoreSupply");
		return ptr;
	}


	void UpdateProcess();
	void RemoveSupplyItem(ESUPPLY_ITEM_TYPE eSupplyItemType);
	void SetSupplyItem(ESUPPLY_ITEM_TYPE eSupplyItemType);
	void RemoveSkill();
	void PostBeginPlay();
	void Initialize(class UwSkillBase* SkillBase, class UwSkillBaseParam* Param);
};


// Class Engine.wAimFire
// 0x0008 (0x01C0 - 0x01B8)
class UwAimFire : public UwWeaponFire
{
public:
	float                                              fZoomFOV;                                                 // 0x01B8(0x0004)
	bool                                               bCurrAim;                                                 // 0x01BC(0x0004) (Transient)
	bool                                               bInstantFOV;                                              // 0x01BC(0x0004)
	bool                                               IsFOV;                                                    // 0x01BC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAimFire");
		return ptr;
	}


	void ModeDoFire();
	void PlayFireEnd();
	void SetFOV(bool bFOV);
	void SetAim(bool bAim);
	void ShakeView();
	bool RenderOverlays(class UCanvas* Canv);
	void wLoadOut();
	void StartMuzzleSmoke();
	void FlashMuzzleFlash();
	void PlayFiring();
};


// Class Engine.wZoomFire3D
// 0x0024 (0x01E4 - 0x01C0)
class UwZoomFire3D : public UwAimFire
{
public:
	string                                             szTexZoomName;                                            // 0x01C0(0x000C) (NeedCtorLink)
	class UTexture*                                    TexZoom;                                                  // 0x01CC(0x0004)
	class AwGun*                                       Gun;                                                      // 0x01D0(0x0004)
	float                                              fBlendTime;                                               // 0x01D4(0x0004)
	float                                              fBlendCurr;                                               // 0x01D8(0x0004)
	float                                              fLastBlend;                                               // 0x01DC(0x0004)
	EWeaponAimState                                    FormerWAS;                                                // 0x01E0(0x0001)
	byte                                               Padding00[0x3];                                           // 0x01E1(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wZoomFire3D");
		return ptr;
	}


	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	bool RenderOverlays(class UCanvas* Canv);
	void ModeTick(float dt);
	void PlayFireEnd();
	void Switch3DScope(bool bAiming);
	void SetFOV(bool bFOV);
	void SetAim(bool bAim);
	void PostBeginPlay();
};


// Class Engine.EFFECT_WaterVolume
// 0x0000 (0x00A0 - 0x00A0)
class UEFFECT_WaterVolume : public UI3DL2Listener
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.EFFECT_WaterVolume");
		return ptr;
	}

};


// Class Engine.wGP20Package
// 0x0030 (0x005C - 0x002C)
class UwGP20Package : public UObject
{
public:
	int[]                                              ProductsCodeList;                                         // 0x002C(0x000C) (NeedCtorLink)
	int[]                                              ProductsQuantityList;                                     // 0x0038(0x000C) (NeedCtorLink)
	int[]                                              ProductsHourList;                                         // 0x0044(0x000C) (NeedCtorLink)
	string                                             PackageDescription;                                       // 0x0050(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wGP20Package");
		return ptr;
	}

};


// Class Engine.wAdminBase
// 0x0000 (0x002C - 0x002C)
class UwAdminBase : public UObject
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAdminBase");
		return ptr;
	}

};


// Class Engine.wAdminUser
// 0x003C (0x0068 - 0x002C)
class UwAdminUser : public UwAdminBase
{
public:
	string                                             UserName;                                                 // 0x002C(0x000C) (NeedCtorLink)
	string                                             Password;                                                 // 0x0038(0x000C) (NeedCtorLink)
	string                                             Privileges;                                               // 0x0044(0x000C) (NeedCtorLink)
	string                                             MergedPrivs;                                              // 0x0050(0x000C) (NeedCtorLink)
	class UwAdminGroupList*                            Groups;                                                   // 0x005C(0x0004)
	class UwAdminGroupList*                            ManagedGroups;                                            // 0x0060(0x0004)
	bool                                               bMasterAdmin;                                             // 0x0064(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAdminUser");
		return ptr;
	}


	void UnlinkGroups();
	class UwAdminUserList* GetManagedUsers(class UwAdminGroupList* uAllGroups);
	class UwAdminGroup* GetManagedGroup(const string& GroupName);
	class UwAdminGroup* GetGroup(const string& GroupName);
	int MaxSecLevel();
	bool STATIC_ValidName(const string& uname);
	bool STATIC_ValidPass(const string& upass);
	bool CanManageUser(class UwAdminUser* User);
	bool CanManageGroup(class UwAdminGroup* Group);
	void MergePrivs(const string& newprivs);
	void RedoMergedPrivs();
	bool HasPrivilege(const string& priv);
	void AddManagedGroupsByName(class UwAdminGroupList* lGroups, string[] aGroupNames);
	void AddGroupsByName(class UwAdminGroupList* lGroups, string[] aGroupNames);
	void RemoveManagedGroup(class UwAdminGroup* Group);
	void AddManagedGroup(class UwAdminGroup* Group);
	void RemoveGroup(class UwAdminGroup* Group);
	void AddGroup(class UwAdminGroup* Group);
	void Init(const string& uname, const string& PASS, const string& privs);
	void Created();
};


// Class Engine.wAdminGroup
// 0x0028 (0x0054 - 0x002C)
class UwAdminGroup : public UwAdminBase
{
public:
	string                                             GroupName;                                                // 0x002C(0x000C) (NeedCtorLink)
	string                                             Privileges;                                               // 0x0038(0x000C) (NeedCtorLink)
	byte                                               GameSecLevel;                                             // 0x0044(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0045(0x0003) MISSED OFFSET
	class UwAdminUserList*                             Users;                                                    // 0x0048(0x0004)
	class UwAdminUserList*                             Managers;                                                 // 0x004C(0x0004)
	bool                                               bMasterAdmin;                                             // 0x0050(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAdminGroup");
		return ptr;
	}


	bool HasPrivilege(const string& priv);
	void RemoveUser(class UwAdminUser* User);
	void UnlinkUsers();
	bool STATIC_ValidName(const string& uname);
	void SetPrivs(const string& privs);
	void Init(const string& sGroupName, const string& sPrivileges, byte nGameSecLevel);
	void Created();
};


// Class Engine.wAdminUserList
// 0x000C (0x0038 - 0x002C)
class UwAdminUserList : public UwAdminBase
{
public:
	class UwAdminUser*[]                               Users;                                                    // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAdminUserList");
		return ptr;
	}


	class UwAdminUser* FindByName(const string& UserName);
	bool Contains(class UwAdminUser* User);
	void Clear();
	void Remove(class UwAdminUser* User);
	class UwAdminUser* Get(int i);
	void Add(class UwAdminUser* NewUser);
	class UwAdminUser* Create(const string& UserName, const string& Password, const string& Privileges);
	int Count();
};


// Class Engine.wAdminGroupList
// 0x000C (0x0038 - 0x002C)
class UwAdminGroupList : public UwAdminBase
{
public:
	class UwAdminGroup*[]                              Groups;                                                   // 0x002C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wAdminGroupList");
		return ptr;
	}


	void Clear();
	class UwAdminGroup* FindMasterGroup();
	bool Contains(class UwAdminGroup* Group);
	class UwAdminGroup* FindByName(const string& GroupName);
	class UwAdminGroup* Get(int Index);
	void Remove(class UwAdminGroup* Group);
	void Add(class UwAdminGroup* Group);
	class UwAdminGroup* CreateGroup(const string& GroupName, const string& Privileges, byte GameSecLevel);
	int Count();
};


// Class Engine.wPrivilegeBase
// 0x0030 (0x005C - 0x002C)
class UwPrivilegeBase : public UObject
{
public:
	string                                             LoadMsg;                                                  // 0x002C(0x000C) (Localized, NeedCtorLink)
	string                                             MainPrivs;                                                // 0x0038(0x000C) (Localized, NeedCtorLink)
	string                                             SubPrivs;                                                 // 0x0044(0x000C) (Localized, NeedCtorLink)
	string[]                                           Tags;                                                     // 0x0050(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wPrivilegeBase");
		return ptr;
	}


	void Created();
};


// Class Engine.Admin
// 0x0000 (0x0160 - 0x0160)
class UAdmin : public UAdminBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Admin");
		return ptr;
	}


	void DoLogout();
	void DoLogin(const string& UserName, const string& Password);
};


// Class Engine.Fragment
// 0x0050 (0x0428 - 0x03D8)
class AFragment : public AEffects
{
public:
	class UMesh*                                       Fragments[0xB];                                           // 0x03D8(0x0004) (Edit)
	int                                                numFragmentTypes;                                         // 0x0404(0x0004)
	bool                                               bFirstHit;                                                // 0x0408(0x0004)
	string                                             ImpactSound;                                              // 0x040C(0x000C) (Edit, NeedCtorLink)
	string                                             AltImpactSound;                                           // 0x0418(0x000C) (Edit, NeedCtorLink)
	float                                              SplashTime;                                               // 0x0424(0x0004) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Fragment");
		return ptr;
	}


	void RandSpin(float spinRate);
	void HitWall(const struct FVector& HitNormal, class AActor* HitWall, class UMaterial* HitMaterial);
	void CalcVelocity(const struct FVector& Momentum);
	bool CanSplash();
};


// Class Engine.UnitTest
// 0x002C (0x0404 - 0x03D8)
class AUnitTest : public AActor
{
public:
	string                                             PASS;                                                     // 0x03D8(0x000C) (NeedCtorLink)
	string                                             FAIL;                                                     // 0x03E4(0x000C) (NeedCtorLink)
	int                                                MinFunc;                                                  // 0x03F0(0x0004)
	int                                                MaxFunc;                                                  // 0x03F4(0x0004)
	class AActor*[]                                    PendingDestroyQ;                                          // 0x03F8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.UnitTest");
		return ptr;
	}


	void DQ();
	class AActor* EQ(class AActor* A);
	string Check(bool Valid, const string& Msg);
	string RunUnitTest(int SW);
	void TestTearOff();
	void TestSetup();
	void FixtureTearOff();
	void FixtureSetup();
};


// Class Engine.wFPWeaponAttachment
// 0x01F4 (0x05CC - 0x03D8)
class AwFPWeaponAttachment : public AActor
{
public:
	class AwWeaponAcce*[]                              Parts;                                                    // 0x03D8(0x000C) (NeedCtorLink)
	class AwSkinShell*                                 Hands;                                                    // 0x03E4(0x0004)
	class AwSkinShell*                                 wWarhead;                                                 // 0x03E8(0x0004)
	class APawn*                                       OwnerPawn;                                                // 0x03EC(0x0004)
	class APlayerController*                           OwnerPlayer;                                              // 0x03F0(0x0004)
	bool                                               bSilencer;                                                // 0x03F4(0x0004)
	bool                                               bModMuzFlash;                                             // 0x03F4(0x0004)
	string                                             strSuffixMuzFlashClass;                                   // 0x03F8(0x000C) (NeedCtorLink)
	int                                                iSavedWID;                                                // 0x0404(0x0004)
	int                                                iSavedPartsID;                                            // 0x0408(0x0004)
	bool                                               bOldAiming;                                               // 0x040C(0x0004)
	byte                                               byOldFlashCount;                                          // 0x0410(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0411(0x0003) MISSED OFFSET
	bool                                               bDemopack;                                                // 0x0414(0x0004)
	bool                                               bUseFlashEffect;                                          // 0x0414(0x0004)
	bool                                               bUseWarhead;                                              // 0x0414(0x0004)
	class UwWeaponBaseParams*                          BaseParams;                                               // 0x0418(0x0004)
	class UClass*                                      ResParams;                                                // 0x041C(0x0004)
	struct FVector                                     vPartsOffset;                                             // 0x0420(0x000C)
	struct FVector                                     vFPOffset;                                                // 0x042C(0x000C)
	struct FVector                                     vStanceOffset;                                            // 0x0438(0x000C)
	float                                              fStancePivot;                                             // 0x0444(0x0004)
	bool                                               bWeaponBob;                                               // 0x0448(0x0004)
	float                                              Bob;                                                      // 0x044C(0x0004)
	float                                              LandBob;                                                  // 0x0450(0x0004)
	float                                              AppliedBob;                                               // 0x0454(0x0004)
	float                                              bobtime;                                                  // 0x0458(0x0004)
	struct FVector                                     WalkBob;                                                  // 0x045C(0x000C)
	struct FVector                                     WalkBobCamera;                                            // 0x0468(0x000C)
	float                                              WalkZDamp;                                                // 0x0474(0x0004)
	float                                              LastFootStepTime;                                         // 0x0478(0x0004)
	struct FVector                                     dbgWalkBob;                                               // 0x047C(0x000C)
	float                                              fZoomFOV;                                                 // 0x0488(0x0004)
	bool                                               bInstantFOV;                                              // 0x048C(0x0004)
	bool                                               bNoAiming;                                                // 0x048C(0x0004)
	float                                              Spread;                                                   // 0x0490(0x0004)
	float                                              fSpread_Min;                                              // 0x0494(0x0004)
	float                                              fSpread_Max;                                              // 0x0498(0x0004)
	float                                              fSpreadReduce;                                            // 0x049C(0x0004)
	float                                              fSpreadReduce_Normal;                                     // 0x04A0(0x0004)
	float                                              fLastRecoilReduceTime;                                    // 0x04A4(0x0004)
	int                                                mCurrentWeaponID;                                         // 0x04A8(0x0004)
	class UwWeaponBaseParams*                          mWBP;                                                     // 0x04AC(0x0004)
	class APawn*                                       mViewTarget;                                              // 0x04B0(0x0004)
	EFPAimState                                        FPAimState;                                               // 0x04B4(0x0001)
	byte                                               Padding01[0x3];                                           // 0x04B5(0x0003) MISSED OFFSET
	class UClass*                                      ShellCaseEmitterClass;                                    // 0x04B8(0x0004)
	class AwEmitter*                                   ShellCaseEmitter;                                         // 0x04BC(0x0004)
	class UClass*                                      ClipEmitterClass;                                         // 0x04C0(0x0004)
	class AwEmitter*                                   ClipEmitter;                                              // 0x04C4(0x0004)
	class UClass*                                      FlashEmitterClass;                                        // 0x04C8(0x0004)
	class AwEmitter*                                   FlashEmitter;                                             // 0x04CC(0x0004)
	class UClass*                                      FlashFirstPersonEmitterClass;                             // 0x04D0(0x0004)
	class UClass*                                      SmokeEmitterClass;                                        // 0x04D4(0x0004)
	class AwEmitter*                                   SmokeEmitter;                                             // 0x04D8(0x0004)
	class UClass*                                      SmokeFirstPersonEmitterClass;                             // 0x04DC(0x0004)
	class UClass*                                      SilencerSmokeEmitterClass;                                // 0x04E0(0x0004)
	class AwEmitter*                                   SilencerSmokeEmitter;                                     // 0x04E4(0x0004)
	FName                                              IdleAnim;                                                 // 0x04E8(0x0004)
	FName                                              RestAnim;                                                 // 0x04EC(0x0004)
	FName                                              RunAnim;                                                  // 0x04F0(0x0004)
	FName                                              SprintAnim;                                               // 0x04F4(0x0004)
	FName                                              SelectAnim;                                               // 0x04F8(0x0004)
	FName                                              SelectNewAnim;                                            // 0x04FC(0x0004)
	FName                                              PutDownAnim;                                              // 0x0500(0x0004)
	FName                                              PutdownQuickAnim;                                         // 0x0504(0x0004)
	FName                                              ProneMoveAnim;                                            // 0x0508(0x0004)
	FName                                              SprintUpAnim;                                             // 0x050C(0x0004)
	FName                                              ReloadBeginAnim;                                          // 0x0510(0x0004)
	FName                                              ReloadEndAnim;                                            // 0x0514(0x0004)
	FName                                              ReloadAnim;                                               // 0x0518(0x0004)
	FName                                              ReloadEmptyAnim;                                          // 0x051C(0x0004)
	FName                                              RechamberAnim;                                            // 0x0520(0x0004)
	FName                                              Aim_RechamberAnim;                                        // 0x0524(0x0004)
	FName                                              Aim_UpAnim;                                               // 0x0528(0x0004)
	FName                                              Aim_DownAnim;                                             // 0x052C(0x0004)
	FName                                              Aim_IdleAnim;                                             // 0x0530(0x0004)
	FName                                              Aim_FireAnim;                                             // 0x0534(0x0004)
	FName                                              Aim_FireLoopAnim;                                         // 0x0538(0x0004)
	FName                                              FireAnim;                                                 // 0x053C(0x0004)
	FName                                              FireLoopAnim;                                             // 0x0540(0x0004)
	FName                                              FireEndAnim;                                              // 0x0544(0x0004)
	FName                                              Melee_FireAnim;                                           // 0x0548(0x0004)
	FName                                              PlantAni;                                                 // 0x054C(0x0004)
	FName                                              DefuseAni;                                                // 0x0550(0x0004)
	FName                                              BombThrow;                                                // 0x0554(0x0004)
	FName                                              Anim_Plant_PutDown;                                       // 0x0558(0x0004)
	FName                                              Anim_Defuse_PutDown;                                      // 0x055C(0x0004)
	FName                                              Anim_SentryGunPack_Plant;                                 // 0x0560(0x0004)
	FName                                              Anim_SentryGunPack_PlantStop;                             // 0x0564(0x0004)
	FName                                              Anim_Throw;                                               // 0x0568(0x0004)
	FName                                              Anim_Defence;                                             // 0x056C(0x0004)
	float                                              IdleAnimRate;                                             // 0x0570(0x0004)
	float                                              RestAnimRate;                                             // 0x0574(0x0004)
	float                                              RunAnimRate;                                              // 0x0578(0x0004)
	float                                              SprintAnimRate;                                           // 0x057C(0x0004)
	float                                              SelectAnimRate;                                           // 0x0580(0x0004)
	float                                              SelectNewAnimRate;                                        // 0x0584(0x0004)
	float                                              PutDownAnimRate;                                          // 0x0588(0x0004)
	float                                              PutDownQuickAnimRate;                                     // 0x058C(0x0004)
	float                                              ReloadBeginAnimRate;                                      // 0x0590(0x0004)
	float                                              ReloadEndAnimRate;                                        // 0x0594(0x0004)
	float                                              ReloadAnimRate;                                           // 0x0598(0x0004)
	float                                              ReloadEmptyAnimRate;                                      // 0x059C(0x0004)
	float                                              RechamberAnimRate;                                        // 0x05A0(0x0004)
	float                                              Aim_RechamberAnimRate;                                    // 0x05A4(0x0004)
	float                                              Aim_UpAnimRate;                                           // 0x05A8(0x0004)
	float                                              Aim_DownAnimRate;                                         // 0x05AC(0x0004)
	float                                              Aim_IdleAnimRate;                                         // 0x05B0(0x0004)
	float                                              Aim_FireAnimRate;                                         // 0x05B4(0x0004)
	float                                              Aim_FireLoopAnimRate;                                     // 0x05B8(0x0004)
	float                                              FireAnimRate;                                             // 0x05BC(0x0004)
	float                                              FireLoopAnimRate;                                         // 0x05C0(0x0004)
	float                                              FireEndAnimRate;                                          // 0x05C4(0x0004)
	float                                              Anim_DefenceRate;                                         // 0x05C8(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wFPWeaponAttachment");
		return ptr;
	}


	void DisplayDebug(class UCanvas* Canvas, float* YL, float* YPos);
	void RenderOverlays(class UCanvas* Canvas);
	void FPCalcSpread();
	void FPModeDoFire();
	void TickFPWeapon(float DeltaTime);
	void RefreshState();
	bool IsActive();
	void ShakeView();
	void CheckBob(float DeltaTime);
	struct FVector WeaponBob(float BobDamping);
	void CalcStanceOffset(float fDelta);
	float CalcDestPivot();
	void CalcPartsOffset();
	void SetAnimAction(byte byType, bool Opt1);
	void PlayDefence();
	void PlayIdle();
	void AnimEnd(int Channel);
	void SetQuickFOV(bool bFOV);
	void SetFOV(bool bFOV, bool bQuick);
	void Change3DScopeMesh(bool bAiming);
	void StartMuzzleSmoke();
	void FlashMuzzleFlash();
	void DrawMuzzleFlash(class UCanvas* Canvas);
	void SpawnShell();
	void LoadWarhead(class UStaticMesh* stProj);
	void SetResParams(class UClass* wRes);
	void SetBaseParams(class UwWeaponBaseParams* wBase);
	void AttWarhead(bool bAttOrDtt);
	void AddParts(EAcceType Type, const string& szName, const string& szSkinName, const string& strHaveDotName, const struct FVector& AimDiff, int iItemID, int iPartsGroupID, bool bSecondSight);
	void SetWeaponPaint(int iPaintID);
	void AddPartsGroup(int iWeaponID, int iAddPartsID);
	class UMaterial* Get1stCamouflageMt(int iItemID, byte byTeam);
	void wLoadOut(int iID, int iAddPartsID, int iPaintID, class APawn* Pawn);
	void ResetBase();
	void Destroyed();
};


// Class Engine.MatchInfo
// 0x006C (0x0098 - 0x002C)
class UMatchInfo : public UObject
{
public:
	string                                             LevelName;                                                // 0x002C(0x000C) (NeedCtorLink)
	string                                             MenuName;                                                 // 0x0038(0x000C) (Localized, NeedCtorLink)
	string                                             EnemyTeamName;                                            // 0x0044(0x000C) (NeedCtorLink)
	string                                             SpecialEvent;                                             // 0x0050(0x000C) (NeedCtorLink)
	float                                              DifficultyModifier;                                       // 0x005C(0x0004)
	float                                              GoalScore;                                                // 0x0060(0x0004)
	string                                             URLString;                                                // 0x0064(0x000C) (NeedCtorLink)
	string                                             MenuDescription;                                          // 0x0070(0x000C) (NeedCtorLink)
	int                                                NumBots;                                                  // 0x007C(0x0004)
	string                                             GameType;                                                 // 0x0080(0x000C) (NeedCtorLink)
	string                                             ThumbName;                                                // 0x008C(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.MatchInfo");
		return ptr;
	}

};


// Class Engine.LadderInfo
// 0x005C (0x0088 - 0x002C)
class ULadderInfo : public UObject
{
public:
	class UMatchInfo*[]                                DMMatches;                                                // 0x002C(0x000C) (Edit, NeedCtorLink, EditInline)
	class UMatchInfo*[]                                TDMMatches;                                               // 0x0038(0x000C) (Edit, NeedCtorLink, EditInline)
	class UMatchInfo*[]                                DOMMatches;                                               // 0x0044(0x000C) (Edit, NeedCtorLink, EditInline)
	class UMatchInfo*[]                                CTFMatches;                                               // 0x0050(0x000C) (Edit, NeedCtorLink, EditInline)
	class UMatchInfo*[]                                BRMatches;                                                // 0x005C(0x000C) (Edit, NeedCtorLink, EditInline)
	class UMatchInfo*[]                                ChampionshipMatches;                                      // 0x0068(0x000C) (Edit, NeedCtorLink, EditInline)
	int                                                OpenNextLadderAtRung[0x5];                                // 0x0074(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.LadderInfo");
		return ptr;
	}


	int STATIC_LengthOfLadder(int Ladder);
	string STATIC_GetMatchDescription(class UGameProfile* G);
	string STATIC_MakeURLFor(class UGameProfile* G);
	class UMatchInfo* STATIC_GetCurrentMatchInfo(class UGameProfile* G);
	class UMatchInfo* STATIC_GetMatchInfo(int Ladder, int rung);
	string STATIC_UpdateLadders(class UGameProfile* G, int CurrentLadder);
};


// Class Engine.Effect_ShadowBitmapMaterialLow
// 0x0000 (0x008C - 0x008C)
class UEffect_ShadowBitmapMaterialLow : public UShadowBitmapMaterial
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Effect_ShadowBitmapMaterialLow");
		return ptr;
	}

};


// Class Engine.Effect_ShadowBitmapMaterialHigh
// 0x0000 (0x008C - 0x008C)
class UEffect_ShadowBitmapMaterialHigh : public UEffect_ShadowBitmapMaterialLow
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Effect_ShadowBitmapMaterialHigh");
		return ptr;
	}

};


// Class Engine.wDamageGR
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageGR : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageGR");
		return ptr;
	}

};


// Class Engine.StreamPlaylistManager
// 0x0044 (0x0070 - 0x002C)
class UStreamPlaylistManager : public UStreamBase
{
public:
	int                                                CurrentPlaylist;                                          // 0x002C(0x0004) (Edit, Config, EditConst)
	class UStreamInterface*                            FileManager;                                              // 0x0030(0x0004) (Edit, EditConst, NoExport, EditInline)
	class UStreamPlaylist*[]                           Playlists;                                                // 0x0034(0x000C) (Edit, EditFixedSize, NeedCtorLink, EditInline)
	bool                                               bDisableNotification;                                     // 0x0040(0x0004) (Edit)
	bool                                               bDirty;                                                   // 0x0040(0x0004) (Edit, Transient, NoExport)
	bool                                               bShuffle;                                                 // 0x0040(0x0004) (Edit, Config)
	bool                                               bShuffleAll;                                              // 0x0040(0x0004) (Edit, Config)
	bool                                               bRepeat;                                                  // 0x0040(0x0004) (Edit, Config)
	bool                                               bRepeatAll;                                               // 0x0040(0x0004) (Edit, Config)
	string                                             DefaultPlaylistName;                                      // 0x0044(0x000C) (Edit, Localized, NeedCtorLink)
	struct FPlaylistParser[]                           ParserType;                                               // 0x0050(0x000C) (Edit, Config, NeedCtorLink)
	class UPlaylistParserBase*[]                       Parsers;                                                  // 0x005C(0x000C) (Edit, EditFixedSize, EditConst, NeedCtorLink, NoExport, EditInline)
	struct FScriptDelegate                             __ChangedActivePlaylist__Delegate;                        // 0x0068(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamPlaylistManager");
		return ptr;
	}


	string GetCurrentTitle();
	void Save();
	bool HandleDebugExec(const string& Command, const string& Param);
	class UStreamPlaylist* CreatePlaylist(const string& PlaylistName);
	void SetRepeatAll(bool bEnable);
	void SetRepeat(bool bEnable);
	void SetShuffleAll(bool bEnable);
	void SetShuffle(bool bEnable);
	bool GetRepeatAll();
	bool GetRepeat();
	bool GetShuffleAll();
	bool GetShuffle();
	bool ValidName(const string& test);
	int FindPlaylistIndex(class UStreamPlaylist* Playlist);
	int FindNameIndex(const string& PlaylistName);
	bool ValidIndex(int Index);
	int GetPlaylistCount();
	class UStreamPlaylist* GetPlaylistAt(int idx);
	class UStreamPlaylist* GetRandomPlaylist();
	class UStreamPlaylist* GetCurrentPlaylist();
	int GetCurrentIndex();
	string GetRandomSong();
	string PrevSong(bool bForce);
	string NextSong(bool bForce);
	bool ImportPlaylist(int PlaylistIndex, int InsertPosition, const string& Path);
	bool AddDirectory(int PlaylistIndex, int InsertPosition, const string& Path, bool bRecurseDirectories);
	EStreamPlaylistType GetPlaylistType(const string& Path);
	bool ClearCurrentPlaylist();
	bool RemoveFromCurrentPlaylist(const string& Path, bool bSkipNotification);
	bool InsertInPlaylist(int PlaylistIndex, int InsertPosition, const string& Path, bool bSkipNotification);
	bool AddToPlaylist(int PlaylistIndex, const string& Path, bool bSkipNotification);
	bool RenamePlaylist(int Index, string* NewName);
	bool RemovePlaylistAt(int Index);
	bool RemovePlaylist(const string& PlaylistName);
	int AppendPlaylist(class UStreamPlaylist* Playlist);
	int AddPlaylist(string* NewPlaylistName);
	bool ActivatePlaylist(int ListIndex, bool bNoFail);
	class UStreamPlaylist* CreateDefaultPlaylist();
	void InitializeParsers();
	void InitializePlaylists();
	void Initialize(class UStreamInterface* InFileManager);
	void ChangedActivePlaylist(class UStreamPlaylist* NewPlaylist);
};


// Class Engine.StreamPlaylist
// 0x0044 (0x0070 - 0x002C)
class UStreamPlaylist : public UStreamBase
{
public:
	int                                                current;                                                  // 0x002C(0x0004) (Edit, Config)
	string[]                                           Playlist;                                                 // 0x0030(0x000C) (Edit, Config, NeedCtorLink)
	string                                             Title;                                                    // 0x003C(0x000C) (Edit, NeedCtorLink)
	bool                                               bNeedSave;                                                // 0x0048(0x0004) (Edit, Config)
	int[]                                              RandomPool;                                               // 0x004C(0x000C) (Edit, EditFixedSize, Transient, EditConst, NeedCtorLink, NoExport, EditInline)
	class UStreamInterface*                            FileManager;                                              // 0x0058(0x0004) (Edit, EditConst, NoExport, EditInline)
	class UStream*[]                                   Songs;                                                    // 0x005C(0x000C) (Edit, EditFixedSize, EditConst, NeedCtorLink, NoExport, EditInline)
	struct FScriptDelegate                             __OnPlaylistChanged__Delegate;                            // 0x0068(0x0090) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.StreamPlaylist");
		return ptr;
	}


	void Save();
	bool HandleDebugExec(const string& Command, const string& Param);
	void DebugInfo();
	bool ValidStreamIndex(int Index);
	bool ValidStreamName(const string& fileName);
	int FindIndexByFileName(const string& test);
	int FindIndexByFullName(const string& test);
	int FindIndexByPath(const string& test);
	int FindIndexByName(const string& test);
	int GetPlaylistLength();
	class UStream* GetStreamAt(int Index);
	class UStream* GetStream(const string& StreamName);
	class UStream* GetCurrentStream();
	void GetSongs(class UStream*[]* SongArray);
	int GetCurrent();
	string GetTitle();
	bool IsInitialized();
	bool SetSongs(class UStream*[] NewSongs);
	bool SetCurrent(int Index);
	bool SetTitle(const string& NewTitle);
	void ResetRandomPool();
	string GetRandomSong();
	bool ClearPlaylist();
	void ReplaceWith(class UStreamPlaylist* Other);
	string PrevSong(bool bMayRepeat);
	string NextSong(bool bMayRepeat);
	bool RemoveSongAt(int idx, bool bSkipNotification);
	bool RemoveSong(const string& SongFileName, bool bSkipNotification);
	int InsertSong(int idx, const string& Path, bool bSkipNotification);
	int AddStream(int Index, class UStream* NewStream, bool bSkipNotification);
	int AddSong(const string& SongFileName, bool bSkipNotification);
	class UStream* CreateStream(const string& fileName);
	bool LoadPlaylist();
	bool InitializePlaylist(class UStreamInterface* InManager);
	void OnPlaylistChanged();
};


// Class Engine.PlaylistParserBase
// 0x0034 (0x006C - 0x0038)
class UPlaylistParserBase : public UStreamInterface
{
public:
	EStreamPlaylistType                                Type;                                                     // 0x0038(0x0001)
	byte                                               Padding00[0x3];                                           // 0x0039(0x0003) MISSED OFFSET
	string                                             PlaylistName;                                             // 0x003C(0x000C) (NeedCtorLink)
	string[]                                           Paths;                                                    // 0x0048(0x000C) (NeedCtorLink)
	string[]                                           Lines;                                                    // 0x0054(0x000C) (NeedCtorLink)
	struct FHtmlChar[]                                 SpecialChars;                                             // 0x0060(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlaylistParserBase");
		return ptr;
	}


	string STATIC_HtmlDecode(const string& Src);
	string STATIC_GetTagged(string* Text);
	string STATIC_GetValue(const string& KeyValuePair, bool bAllowSpaces);
	void ParseLines();
	void ImportedPlaylist(int PlaylistIndex, int InsertPosition);
	bool Import(int PlaylistIndex, int InsertPosition, const string& Path);
	void SetType(EStreamPlaylistType InType);
	EStreamPlaylistType GetType();
};


// Class Engine.ZoneTrigger
// 0x0000 (0x0410 - 0x0410)
class AZoneTrigger : public ATrigger
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.ZoneTrigger");
		return ptr;
	}


	void UnTouch(class AActor* Other);
	void Touch(class AActor* Other);
};


// Class Engine.wMessage_NoWeapon
// 0x000C (0x045C - 0x0450)
class AwMessage_NoWeapon : public ALocalMessage
{
public:
	string                                             strNoWeapon;                                              // 0x0450(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_NoWeapon");
		return ptr;
	}


	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.wKnife
// 0x0000 (0x0778 - 0x0778)
class AwKnife : public AwWeapon
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wKnife");
		return ptr;
	}


	void PlayIdle();
	void ServerMeleeFire();
	void ClientMeleeFire();
	void ActiveMeleeDelay();
	void WeaponTick(float dt);
	void DropFrom(const struct FVector& StartLocation, const struct FRotator& StartRotation);
	void ForcePlayIdle();
	void AnimEnd(int Channel);
	void BringUp(class AwWeapon* PrevWeapon);
	void SetBaseParams(class UwWeaponBaseParams* wBase);
	void wLoadOut(int iID, int iAddPartsID);
};


// Class Engine.wDamageFlameThrower
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageFlameThrower : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageFlameThrower");
		return ptr;
	}

};


// Class Engine.wDamageUnknown
// 0x0000 (0x04A4 - 0x04A4)
class AwDamageUnknown : public AwDamageType
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wDamageUnknown");
		return ptr;
	}

};


// Class Engine.Effect_ShadowController
// 0x004C (0x0424 - 0x03D8)
class AEffect_ShadowController : public AActor
{
public:
	class UClass*                                      ShadowClass;                                              // 0x03D8(0x0004)
	class AEffect_ShadowProjector*[]                   Shadows;                                                  // 0x03DC(0x000C) (NeedCtorLink)
	class ALight*[]                                    LightList;                                                // 0x03E8(0x000C) (NeedCtorLink)
	struct FLightGroup[]                               Lights;                                                   // 0x03F4(0x000C) (NeedCtorLink)
	float                                              MaxLightDistance;                                         // 0x0400(0x0004)
	float                                              UpdateFrequency;                                          // 0x0404(0x0004)
	class ALight*                                      SunLightActor;                                            // 0x0408(0x0004)
	struct FVector                                     SunDirection;                                             // 0x040C(0x000C)
	bool                                               bShadowActive;                                            // 0x0418(0x0004)
	int                                                MaxShadows;                                               // 0x041C(0x0004) (Config, GlobalConfig)
	ECrispnessEnum                                     ShadowCrispness;                                          // 0x0420(0x0001) (Config, GlobalConfig)
	byte                                               Padding00[0x3];                                           // 0x0421(0x0003) MISSED OFFSET

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Effect_ShadowController");
		return ptr;
	}


	void SunLightDirectionUpdate(const struct FVector& direction);
	void Destroyed();
	class AEffect_ShadowProjector* SpawnShadow(const struct FRotator& LightRotation);
	void UpdateShadows(float dt);
	void Tick(float dt);
	bool IsVisible(const struct FVector& loc);
	float LightPriority(float Brightness, float Radius, float Distance);
	void FillLights();
	void Timer();
	void Initialize();
};


// Class Engine.wRocket
// 0x004C (0x04E8 - 0x049C)
class AwRocket : public AwProjectile
{
public:
	bool                                               bRing;                                                    // 0x049C(0x0004)
	bool                                               bHitWater;                                                // 0x049C(0x0004)
	bool                                               bWaterStart;                                              // 0x049C(0x0004)
	int                                                NumExtraRockets;                                          // 0x04A0(0x0004)
	class AEmitter*                                    SmokeTrail;                                               // 0x04A4(0x0004)
	class AEffects*                                    Corona;                                                   // 0x04A8(0x0004)
	float                                              AccelerationAddPerSec;                                    // 0x04AC(0x0004)
	float                                              FlockRadius;                                              // 0x04B0(0x0004) (Edit)
	float                                              FlockStiffness;                                           // 0x04B4(0x0004) (Edit)
	float                                              FlockMaxForce;                                            // 0x04B8(0x0004) (Edit)
	float                                              FlockCurlForce;                                           // 0x04BC(0x0004) (Edit)
	struct FVector                                     Dir;                                                      // 0x04C0(0x000C)
	class UClass*                                      class_Smoke;                                              // 0x04CC(0x0004)
	class UClass*                                      class_Corona;                                             // 0x04D0(0x0004)
	class UClass*                                      class_ExplosionCrap;                                      // 0x04D4(0x0004)
	bool                                               bExploded;                                                // 0x04D8(0x0004)
	struct FVector                                     vHitNormal;                                               // 0x04DC(0x000C) (Net)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wRocket");
		return ptr;
	}


	void SetSpawnEmitter();
	void wLoadOut(int iID);
	void Tick(float DeltaTime);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void SpawnExplosionDecal(class APlayerController* PC, const struct FVector& HitNormal);
	void HitWall(const struct FVector& HitNormal, class AActor* Wall, class UMaterial* HitMaterial);
	void ProcessTouch(class AActor* Other, const struct FVector& HitLocation);
	void Landed(const struct FVector& HitNormal);
	void PostNetBeginPlay();
	void SetSpeed(float fSpeed);
	void Destroyed();
};


// Class Engine.Effect_ShadowProjector
// 0x0028 (0x0590 - 0x0568)
class AEffect_ShadowProjector : public AProjector
{
public:
	struct FVector                                     LightDirection;                                           // 0x0568(0x000C) (Edit)
	float                                              LightDistance;                                            // 0x0574(0x0004) (Edit)
	float                                              InterpolationRate;                                        // 0x0578(0x0004) (Edit)
	float                                              MaxFOV;                                                   // 0x057C(0x0004) (Edit)
	float                                              FadeSpeed;                                                // 0x0580(0x0004) (Edit)
	float                                              DarknessScale;                                            // 0x0584(0x0004) (Edit)
	class UShadowBitmapMaterial*                       ShadowTexture;                                            // 0x0588(0x0004)
	bool                                               bFadeIn;                                                  // 0x058C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Effect_ShadowProjector");
		return ptr;
	}


	void Destroyed();
	void UpdateShadow(float dt, int LN, class AEffect_ShadowController* ShadowController);
	void InitializeFor(class AEffect_ShadowController* ShadowController);
	void DisableShadow();
	void Tick(float dt);
	void PostBeginPlay();
};


// Class Engine.wKnifeFire
// 0x0000 (0x01E8 - 0x01E8)
class UwKnifeFire : public UwMeleeFire
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wKnifeFire");
		return ptr;
	}


	void PlayFiring();
	void SetFireAnim();
};


// Class Engine.wMessage_Game_Defence
// 0x0104 (0x1204 - 0x1100)
class AwMessage_Game_Defence : public AwMessage_Game
{
public:
	string                                             lsItemBuyOK;                                              // 0x1100(0x000C) (Localized, NeedCtorLink)
	string                                             lsItemBuyFaild;                                           // 0x110C(0x000C) (Localized, NeedCtorLink)
	string                                             lsItemNotBuy;                                             // 0x1118(0x000C) (Localized, NeedCtorLink)
	string                                             lsUsingCashItem;                                          // 0x1124(0x000C) (Localized, NeedCtorLink)
	string                                             lsCantCashItem;                                           // 0x1130(0x000C) (Localized, NeedCtorLink)
	string                                             lsRepairNuclear;                                          // 0x113C(0x000C) (Localized, NeedCtorLink)
	int                                                Code_ItemBuyOK;                                           // 0x1148(0x0004)
	int                                                Code_ItemBuyFaild;                                        // 0x114C(0x0004)
	int                                                Code_ItemNotBuy;                                          // 0x1150(0x0004)
	int                                                Code_ItemChangeWeapon1;                                   // 0x1154(0x0004)
	int                                                Code_ItemChangeWeapon2;                                   // 0x1158(0x0004)
	int                                                Code_ItemChangeWeapon3;                                   // 0x115C(0x0004)
	int                                                Code_ItemChangeWeapon4;                                   // 0x1160(0x0004)
	int                                                Code_ItemChangeWeapon5;                                   // 0x1164(0x0004)
	int                                                Code_ItemChangeWeapon6;                                   // 0x1168(0x0004)
	int                                                Code_DestroyNuclear;                                      // 0x116C(0x0004)
	int                                                Code_WaringNuclear;                                       // 0x1170(0x0004)
	int                                                Code_DestroyBarricade;                                    // 0x1174(0x0004)
	int                                                Code_AmmoCharger;                                         // 0x1178(0x0004)
	int                                                Code_UsingCashItemSlot1;                                  // 0x117C(0x0004)
	int                                                Code_UsingCashItemSlot2;                                  // 0x1180(0x0004)
	int                                                Code_CantUsing;                                           // 0x1184(0x0004)
	int                                                Code_RepairNuclear;                                       // 0x1188(0x0004)
	string                                             SoundBuyOK;                                               // 0x118C(0x000C) (NeedCtorLink)
	string                                             SoundNotBuy;                                              // 0x1198(0x000C) (NeedCtorLink)
	string                                             SoundDestroyNuclear;                                      // 0x11A4(0x000C) (NeedCtorLink)
	string                                             SoundWarningNuclear;                                      // 0x11B0(0x000C) (NeedCtorLink)
	string                                             SoundDestroyBarricade;                                    // 0x11BC(0x000C) (NeedCtorLink)
	string                                             SoundAmmoCharger;                                         // 0x11C8(0x000C) (NeedCtorLink)
	string                                             SoundCashItemSlot1;                                       // 0x11D4(0x000C) (NeedCtorLink)
	string                                             SoundCashItemSlot2;                                       // 0x11E0(0x000C) (NeedCtorLink)
	string                                             SoundCantCashItem;                                        // 0x11EC(0x000C) (NeedCtorLink)
	string                                             SoundRepairNuclear;                                       // 0x11F8(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_Game_Defence");
		return ptr;
	}


	bool STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	float STATIC_GetLifeTime(int Switch);
	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* sRelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.Effect_ShadowBitmapMaterialMedium
// 0x0000 (0x008C - 0x008C)
class UEffect_ShadowBitmapMaterialMedium : public UEffect_ShadowBitmapMaterialLow
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Effect_ShadowBitmapMaterialMedium");
		return ptr;
	}

};


// Class Engine.Effect_ShadowBitmapMaterialMax
// 0x0000 (0x008C - 0x008C)
class UEffect_ShadowBitmapMaterialMax : public UEffect_ShadowBitmapMaterialLow
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.Effect_ShadowBitmapMaterialMax");
		return ptr;
	}

};


// Class Engine.WaitViewAF
// 0x0000 (0x04A0 - 0x04A0)
class AWaitViewAF : public AWaitView
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaitViewAF");
		return ptr;
	}

};


// Class Engine.WaitViewRSA
// 0x0000 (0x04A0 - 0x04A0)
class AWaitViewRSA : public AWaitView
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WaitViewRSA");
		return ptr;
	}

};


// Class Engine.BGMTable
// 0x0018 (0x0044 - 0x002C)
class UBGMTable : public UObject
{
public:
	string[]                                           Files;                                                    // 0x002C(0x000C) (NeedCtorLink)
	int[]                                              Durations;                                                // 0x0038(0x000C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.BGMTable");
		return ptr;
	}


	int STATIC_GetDuration(const string& File);
};


// Class Engine.wMessage_Game_Mode
// 0x0098 (0x1198 - 0x1100)
class AwMessage_Game_Mode : public AwMessage_Game
{
public:
	int                                                Code_GameMode_TD;                                         // 0x1100(0x0004)
	int                                                Code_GameMode_DOM;                                        // 0x1104(0x0004)
	int                                                Code_GameMode_FFA;                                        // 0x1108(0x0004)
	int                                                Code_GameMode_SDAttack;                                   // 0x110C(0x0004)
	int                                                Code_GameMode_SDDefense;                                  // 0x1110(0x0004)
	int                                                Code_GameMode_SBT;                                        // 0x1114(0x0004)
	int                                                Code_GameMode_SBTGetBomb;                                 // 0x1118(0x0004)
	int                                                Code_GameMode_DOA;                                        // 0x111C(0x0004)
	string                                             strGameModeTD;                                            // 0x1120(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeDOM;                                           // 0x112C(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeFFA;                                           // 0x1138(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeSDAttack;                                      // 0x1144(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeSDDefense;                                     // 0x1150(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeSBT;                                           // 0x115C(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeSBTGetBomb;                                    // 0x1168(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeSDAttackObjectivePlanted;                      // 0x1174(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeSDDefenseObjectivePlanted;                     // 0x1180(0x000C) (Localized, NeedCtorLink)
	string                                             strGameModeDOA;                                           // 0x118C(0x000C) (Localized, NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wMessage_Game_Mode");
		return ptr;
	}


	void STATIC_ClientReceive(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	string STATIC_GetString(int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoBTConsole(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
	bool STATIC_GotoHud(class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject);
};


// Class Engine.WinBox
// 0x0020 (0x004C - 0x002C)
class UWinBox : public UObject
{
public:
	struct FFloatBox                                   P;                                                        // 0x002C(0x0010)
	struct FFloatBox                                   B;                                                        // 0x003C(0x0010)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WinBox");
		return ptr;
	}


	float H();
	float W();
	float Y();
	float X();
};


// Class Engine.WinFrameChanger
// 0x0010 (0x003C - 0x002C)
class UWinFrameChanger : public UObject
{
public:
	float                                              X;                                                        // 0x002C(0x0004)
	float                                              Y;                                                        // 0x0030(0x0004)
	float                                              W;                                                        // 0x0034(0x0004)
	float                                              H;                                                        // 0x0038(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.WinFrameChanger");
		return ptr;
	}


	void WinBoxToFloatBoxWH_OUT(class UWinBox* B, struct FFloatBoxWH* fb);
	struct FFloatBoxWH WinBoxToFloatBoxWH(class UWinBox* B);
	void SetFrameByFloatBox(const struct FFloatBox& B);
	void SetFrame(float nx, float ny, float nw, float nh);
};


// Class Engine.wProjectileFire
// 0x0010 (0x01C8 - 0x01B8)
class UwProjectileFire : public UwWeaponFire
{
public:
	int                                                ProjPerFire;                                              // 0x01B8(0x0004) (Edit)
	struct FVector                                     ProjSpawnOffset;                                          // 0x01BC(0x000C) (Edit)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wProjectileFire");
		return ptr;
	}


	struct FVector GetFireStart(const struct FVector& X, const struct FVector& Y, const struct FVector& Z);
	class AwProjectile* SpawnProjectile(const struct FVector& Start, const struct FRotator& Dir);
	void DoFireEffect();
};


// Class Engine.wC4Explosive
// 0x0004 (0x04A0 - 0x049C)
class AwC4Explosive : public AwProjectile
{
public:
	bool                                               Inited;                                                   // 0x049C(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wC4Explosive");
		return ptr;
	}


	void Explode2(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Explode(const struct FVector& HitLocation, const struct FVector& HitNormal);
	void Touch(class AActor* Other);
	void Reset();
	void OnEndRound();
	void OnBeginRound();
	void Go();
	void Destroyed();
	void PostNetBeginPlay();
	void PostBeginPlay();
};


// Class Engine.wFPWeaponAttachmentAlien
// 0x0004 (0x05D0 - 0x05CC)
class AwFPWeaponAttachmentAlien : public AwFPWeaponAttachment
{
public:
	int                                                iSavedBodyItemID;                                         // 0x05CC(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wFPWeaponAttachmentAlien");
		return ptr;
	}


	void PlayIdle();
	void SetBodyItemID(int iBodyItemID);
	void ChangeHands(int iBodyItemID);
	void wLoadOut(int iID, int iAddPartsID, int iPaintID, class APawn* Pawn);
};


// Class Engine.wSkill_CoolTime
// 0x0018 (0x007C - 0x0064)
class UwSkill_CoolTime : public UwSkill
{
public:
	float                                              fCurActiveTime;                                           // 0x0064(0x0004)
	float                                              fMaxActiveTime;                                           // 0x0068(0x0004)
	float                                              fLastTime;                                                // 0x006C(0x0004)
	float                                              fCurCoolTime;                                             // 0x0070(0x0004)
	float                                              fMaxCoolTime;                                             // 0x0074(0x0004)
	bool                                               bUseSkill;                                                // 0x0078(0x0004)
	bool                                               bRedaySkill;                                              // 0x0078(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSkill_CoolTime");
		return ptr;
	}


	void Client_AddProcess();
	void DeadPlayer();
	void ResetSkill();
	void UnuseSkill();
	void UseSkill();
	bool CheckSkill();
	void ReadySkill();
	void UpdateProcess();
	float GetMaxActiveTime();
	float GetMaxCoolTime();
	void PostBeginPlay();
	void Initialize(class UwSkillBase* SkillBase, class UwSkillBaseParam* Param);
};


// Class Engine.wSupplyRespawnPoint
// 0x0004 (0x04A4 - 0x04A0)
class AwSupplyRespawnPoint : public ASmallNavigationPoint
{
public:
	bool                                               bIsInHouse;                                               // 0x04A0(0x0004) (Edit, Const)
	bool                                               bSpawnDropItem;                                           // 0x04A0(0x0004)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.wSupplyRespawnPoint");
		return ptr;
	}

};


// Class Engine.PlayerStart_Alien
// 0x0020 (0x04E4 - 0x04C4)
class APlayerStart_Alien : public APlayerStart
{
public:
	ESpawnTeam                                         eTeamType;                                                // 0x04C4(0x0001) (Edit)
	byte                                               Padding00[0x3];                                           // 0x04C5(0x0003) MISSED OFFSET
	class AController*                                 PointOwner;                                               // 0x04C8(0x0004)
	struct FVector                                     vOriginLocation;                                          // 0x04CC(0x000C)
	struct FRotator                                    vOriginRotation;                                          // 0x04D8(0x000C)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PlayerStart_Alien");
		return ptr;
	}


	void InitPosition();
};


// Class Engine.B4SParser
// 0x0000 (0x006C - 0x006C)
class UB4SParser : public UPlaylistParserBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.B4SParser");
		return ptr;
	}


	void ParseLines();
};


// Class Engine.M3UParser
// 0x003C (0x00A8 - 0x006C)
class UM3UParser : public UPlaylistParserBase
{
public:
	struct FFilePath                                   ParsedPath;                                               // 0x006C(0x003C) (NeedCtorLink)

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.M3UParser");
		return ptr;
	}


	string MatchPath(const string& str);
	void ParseLines();
	bool Import(int PlaylistIndex, int InsertPosition, const string& Path);
};


// Class Engine.PLSParser
// 0x0000 (0x006C - 0x006C)
class UPLSParser : public UPlaylistParserBase
{
public:

	static UClass* StaticClass()
	{
		static auto ptr = UObject::FindClass("Class Engine.PLSParser");
		return ptr;
	}


	void ParseLines();
};


}

#ifdef _MSC_VER
	#pragma pack(pop)
#endif
