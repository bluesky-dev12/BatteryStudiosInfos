#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : XInterface
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Constants
# ======================================================================================== #
*/

#define CONST_DoCounter                                          1
#define CONST_QBTN_YesNoCancel                                   50
#define CONST_QBTN_YesNo                                         48
#define CONST_QBTN_AbortRetry                                    68
#define CONST_QBTN_OkCancel                                      3
#define CONST_QBTN_Ignore                                        128
#define CONST_QBTN_Abort                                         64
#define CONST_QBTN_No                                            32
#define CONST_QBTN_Yes                                           16
#define CONST_QBTN_Continue                                      8
#define CONST_QBTN_Retry                                         4
#define CONST_QBTN_Cancel                                        2
#define CONST_QBTN_Ok                                            1
#define CONST_Counter                                            0
#define CONST_WEAPON_BAR_SIZE                                    9
#define CONST_DefaultDFBotGrade                                  901
#define CONST_MaxPlayers                                         32

/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum XInterface.GUIComponent.EClickSound
enum EClickSound
{
	CS_None                                            = 0,
	CS_Click                                           = 1,
	CS_Edit                                            = 2,
	CS_Up                                              = 3,
	CS_Down                                            = 4,
	CS_Drag                                            = 5,
	CS_Fade                                            = 6,
	CS_Hover                                           = 7,
	CS_Slide                                           = 8,
	CS_Weapon                                          = 9
};

// Enum XInterface.GUI.eFontScale
enum eFontScale
{
	FNS_Small                                          = 0,
	FNS_Medium                                         = 1,
	FNS_Large                                          = 2
};

// Enum XInterface.GUI.EAnimationType
enum EAnimationType
{
	AT_Position                                        = 0,
	AT_Dimension                                       = 1
};

// Enum XInterface.GUI.EOrientation
enum EOrientation
{
	ORIENT_Vertical                                    = 0,
	ORIENT_Horizontal                                  = 1
};

// Enum XInterface.GUI.eCellStyle
enum eCellStyle
{
	CELL_FixedSize                                     = 0,
	CELL_FixedCount                                    = 1
};

// Enum XInterface.GUI.eDrawDirection
enum eDrawDirection
{
	DRD_LeftToRight                                    = 0,
	DRD_RightToLeft                                    = 1,
	DRD_TopToBottom                                    = 2,
	DRD_BottomToTop                                    = 3
};

// Enum XInterface.GUI.ePageAlign
enum ePageAlign
{
	PGA_None                                           = 0,
	PGA_Client                                         = 1,
	PGA_Left                                           = 2,
	PGA_Right                                          = 3,
	PGA_Top                                            = 4,
	PGA_Bottom                                         = 5
};

// Enum XInterface.GUI.eIconPosition
enum eIconPosition
{
	ICP_Normal                                         = 0,
	ICP_Center                                         = 1,
	ICP_Scaled                                         = 2,
	ICP_Stretched                                      = 3,
	ICP_Bound                                          = 4
};

// Enum XInterface.GUI.EMenuRenderStyle
enum EMenuRenderStyle
{
	MSTY_None                                          = 0,
	MSTY_Normal                                        = 1,
	MSTY_Masked                                        = 2,
	MSTY_Translucent                                   = 3,
	MSTY_Modulated                                     = 4,
	MSTY_Alpha                                         = 5,
	MSTY_Additive                                      = 6,
	MSTY_Subtractive                                   = 7,
	MSTY_Particle                                      = 8,
	MSTY_AlphaZ                                        = 9
};

// Enum XInterface.GUI.eEditMask
enum eEditMask
{
	EDM_None                                           = 0,
	EDM_Alpha                                          = 1,
	EDM_Numeric                                        = 2
};

// Enum XInterface.GUI.eImgAlign
enum eImgAlign
{
	IMGA_TopLeft                                       = 0,
	IMGA_Center                                        = 1,
	IMGA_BottomRight                                   = 2
};

// Enum XInterface.GUI.eImgStyle
enum eImgStyle
{
	ISTY_Normal                                        = 0,
	ISTY_Stretched                                     = 1,
	ISTY_Scaled                                        = 2,
	ISTY_Bound                                         = 3,
	ISTY_Justified                                     = 4,
	ISTY_PartialScaled                                 = 5,
	ISTY_Tiled                                         = 6,
	ISTY_CropStretched                                 = 7
};

// Enum XInterface.GUI.eTextCase
enum eTextCase
{
	TXTC_None                                          = 0,
	TXTC_Upper                                         = 1,
	TXTC_Lower                                         = 2
};

// Enum XInterface.GUI.eTextAlign
enum eTextAlign
{
	TXTA_Left                                          = 0,
	TXTA_Center                                        = 1,
	TXTA_Right                                         = 2
};

// Enum XInterface.GUI.eDropState
enum eDropState
{
	DRP_None                                           = 0,
	DRP_Source                                         = 1,
	DRP_Target                                         = 2,
	DRP_Accept                                         = 3,
	DRP_Reject                                         = 4
};

// Enum XInterface.GUI.eMenuState
enum eMenuState
{
	MSAT_Blurry                                        = 0,
	MSAT_Watched                                       = 1,
	MSAT_Focused                                       = 2,
	MSAT_Pressed                                       = 3,
	MSAT_Disabled                                      = 4
};

// Enum XInterface.GUIComponent.EParentScaleType
enum EParentScaleType
{
	SCALE_All                                          = 0,
	SCALE_X                                            = 1,
	SCALE_Y                                            = 2
};

// Enum XInterface.ExtendedConsole.ESpeechMenuState
enum ESpeechMenuState
{
	SMS_Main                                           = 0,
	SMS_VoiceChat                                      = 1,
	SMS_Ack                                            = 2,
	SMS_FriendFire                                     = 3,
	SMS_Order                                          = 4,
	SMS_Other                                          = 5,
	SMS_Taunt                                          = 6,
	SMS_TauntAnim                                      = 7,
	SMS_PlayerSelect                                   = 8,
	SMS_VoiceChatChannel                               = 9
};

// Enum XInterface.HudBase.eHUDSOUND
enum eHUDSOUND
{
	EHS_QUICKSLOT_TOGGLE                               = 0,
	EHS_QUICKSLOT_CHANGE                               = 1,
	EHS_MINIMAP_TOGGLE                                 = 2,
	EHS_QUEST_STATE                                    = 3,
	EHS_QUEST_COMPLETE                                 = 4,
	EHS_FRIENDS_ON                                     = 5,
	EHS_WHISPER                                        = 6
};

// Enum XInterface.wHudPart_DisplayBase.eKeyAlphabet
enum eKeyAlphabet
{
	EKA_A                                              = 0,
	EKA_B                                              = 1,
	EKA_C                                              = 2,
	EKA_D                                              = 3,
	EKA_E                                              = 4,
	EKA_F                                              = 5,
	EKA_G                                              = 6,
	EKA_H                                              = 7,
	EKA_I                                              = 8,
	EKA_J                                              = 9,
	EKA_K                                              = 10,
	EKA_L                                              = 11,
	EKA_M                                              = 12,
	EKA_N                                              = 13,
	EKA_O                                              = 14,
	EKA_P                                              = 15,
	EKA_Q                                              = 16,
	EKA_R                                              = 17,
	EKA_S                                              = 18,
	EKA_T                                              = 19,
	EKA_U                                              = 20,
	EKA_V                                              = 21,
	EKA_W                                              = 22,
	EKA_X                                              = 23,
	EKA_Y                                              = 24,
	EKA_Z                                              = 25
};

// Enum XInterface.wHudPart_DisplayBase.eKeySpecial
enum eKeySpecial
{
	EKS_SHIFT                                          = 0,
	EKS_ALT                                            = 1,
	EKS_CTRL                                           = 2,
	EKS_SPACE                                          = 3,
	EKS_LMOUSE                                         = 4,
	EKS_RMOUSE                                         = 5,
	EKS_WMOUSE                                         = 6
};

// Enum XInterface.wHudPart_DisplayEvent.eDrawMessageState
enum eDrawMessageState
{
	DM_None                                            = 0,
	DM_Waiting                                         = 1,
	DM_GameMode                                        = 2,
	DM_Go                                              = 3,
	DM_HostChange                                      = 4,
	DM_End                                             = 5
};

// Enum XInterface.wHudPart_DisplayEvent.SKILL_ARRAY
enum SKILL_ARRAY
{
	SKILL_ARRAY_C4                                     = 0,
	SKILL_ARRAY_RPG7                                   = 1,
	SKILL_ARRAY_HELICOPTER                             = 2,
	SKILL_ARRAY_AIRSTIRKE                              = 3,
	SKILL_ARRAY_UAV                                    = 4,
	SKILL_ARRAY_HELICOPTER_REQUIRE                     = 5,
	SKILL_ARRAY_AIRSTIRKE_REQUIRE                      = 6,
	SKILL_ARRAY_UAV_REQUIRE                            = 7,
	SKILL_ARRAY_HellFire                               = 8,
	SKILL_ARRAY_HellFire_Require                       = 9,
	SKILL_ARRAY_PinpointFire                           = 10,
	SKILL_ARRAY_PinpointFire_Require                   = 11,
	SKILL_ARRAY_Incen                                  = 12,
	SKILL_ARRAY_Incen_Require                          = 13,
	SKILL_ARRAY_SpiltGrenade                           = 14,
	SKILL_ARRAY_SpiltGrenade_Require                   = 15,
	SKILL_ARRAY_NONE                                   = 16
};

// Enum XInterface.wHudPart_DisplayEvent.ESD_STATE
enum ESD_STATE
{
	SET_ENABLE                                         = 0,
	SET_DOING                                          = 1,
	SET_DONE                                           = 2,
	DIFFUSE_ENABLE                                     = 3,
	DIFFUSE_DOING                                      = 4,
	DIFFUSE_DONE                                       = 5
};

// Enum XInterface.xScoreBoardTeamGame.GOAL_SCORE
enum GOAL_SCORE
{
	GOAL_100                                           = 0
};

// Enum XInterface.xScoreBoardTeamGame.SBGT
enum SBGT
{
	GT_TD                                              = 0,
	GT_DOMI                                            = 1,
	GT_SD                                              = 2
};

// Enum XInterface.wHudPart_RadioMessage.ERMType
enum ERMType
{
	ERMT_SELLECT                                       = 0,
	ERMT_COMMAND                                       = 1,
	ERMT_STATEMENT                                     = 2,
	ERMT_RESPON                                        = 3,
	ERMT_NONE                                          = 4
};

// Enum XInterface.GUIScrollText.eScrollState
enum eScrollState
{
	STS_None                                           = 0,
	STS_Initial                                        = 1,
	STS_Char                                           = 2,
	STS_EOL                                            = 3,
	STS_Repeat                                         = 4
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class XInterface.GUI
class DLL_IMPORT UGUI : public UObject
{
public:
	class UGUIController*                              Controller;                                       		// 0x002C ( 0x0004 ) [ CPF_NoExport ]
	struct FPlane                                      SaveModulation;                                   		// 0x0030 ( 0x0010 ) [ CPF_NoExport ]
	float                                              SaveX;                                            		// 0x0040 ( 0x0004 ) [ CPF_NoExport ]
	float                                              SaveY;                                            		// 0x0044 ( 0x0004 ) [ CPF_NoExport ]
	class FColor                                       SaveColor;                                        		// 0x0048 ( 0x0004 ) [ CPF_NoExport ]
	class UFont*                                       SaveFont;                                         		// 0x004C ( 0x0004 ) [ CPF_NoExport ]
	unsigned char                                      SaveStyle;                                        		// 0x0050 ( 0x0001 ) [ CPF_NoExport ]

	// UScript Functions
	 class UMaterial*          GetModLogo ( struct FString ModDir );             		// [ FUNC_Native ] XInterface.GUI.GetModLogo
	 struct FString            GetModValue ( struct FString ModDir, struct FString ModKey );		// [ FUNC_Native ] XInterface.GUI.GetModValue
	 void                      GetModList ( class TArray< struct FString >* ModDirs, class TArray< struct FString >* ModTitles );		// [ FUNC_Native ] XInterface.GUI.GetModList
	 void                      Profile ( struct FString ProfileName );           		// [ FUNC_Native ] XInterface.GUI.Profile
	 struct FString            JoinArray ( class TArray< struct FString > StringArray, struct FString Delim, bool bIgnoreBlanks );		// [ FUNC_Final ] XInterface.GUI.JoinArray
	 bool                      IsDigit ( struct FString Test, bool bAllowDecimal );		//  XInterface.GUI.IsDigit

	// Public Imports
	UGUI(class UGUI const &);
	UGUI(void);
	class UGUI &  operator=(class UGUI const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class XInterface.GUIComponent
class DLL_IMPORT UGUIComponent : public UGUI
{
public:
	class TArray< struct FTimerData >                  Timers;                                           		// 0x0054 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class UGUIPage*                                    PageOwner;                                        		// 0x0060 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUIComponent*                               MenuOwner;                                        		// 0x0064 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUIComponent*                               FocusInstead;                                     		// 0x0068 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	unsigned char                                      MenuState;                                        		// 0x006C ( 0x0001 ) [ CPF_Edit | CPF_NoExport ]
	unsigned char                                      LastMenuState;                                    		// 0x006D ( 0x0001 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	unsigned char                                      DropState;                                        		// 0x006E ( 0x0001 ) [ CPF_Edit | CPF_NoExport ]
	unsigned char                                      FontScale;                                        		// 0x006F ( 0x0001 ) [ CPF_Edit ]
	class UCanvas*                                     CurrentCanvas;                                    		// 0x0070 ( 0x0004 ) 
	struct FString                                     IniOption;                                        		// 0x0074 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     IniDefault;                                       		// 0x0080 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     StyleName;                                        		// 0x008C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Hint;                                             		// 0x0098 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class UGUILabel*                                   FriendlyLabel;                                    		// 0x00A4 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	float                                              WinTop;                                           		// 0x00A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              WinLeft;                                          		// 0x00AC ( 0x0004 ) [ CPF_Edit ]
	float                                              WinWidth;                                         		// 0x00B0 ( 0x0004 ) [ CPF_Edit ]
	float                                              WinHeight;                                        		// 0x00B4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bUseAWinPos:1;                                    		// 0x00B8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FFloatBox                                   AWinPos;                                          		// 0x00BC ( 0x0010 ) [ CPF_Edit ]
	struct FFloatBox                                   RWinPos;                                          		// 0x00CC ( 0x0010 ) [ CPF_Edit ]
	struct FFloatBox                                   AWinFrame;                                        		// 0x00DC ( 0x0010 ) [ CPF_Edit ]
	float                                              RenderWeight;                                     		// 0x00EC ( 0x0004 ) [ CPF_Edit ]
	int                                                MouseCursorIndex;                                 		// 0x00F0 ( 0x0004 ) [ CPF_Edit ]
	int                                                TabOrder;                                         		// 0x00F4 ( 0x0004 ) [ CPF_Edit ]
	int                                                Tag;                                              		// 0x00F8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bDebugging:1;                                     		// 0x00FC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bTabStop:1;                                       		// 0x00FC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bFocusOnWatch:1;                                  		// 0x00FC ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bBoundToParent:1;                                 		// 0x00FC ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bScaleToParent:1;                                 		// 0x00FC ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bHasFocus:1;                                      		// 0x00FC ( 0x0004 )  [0x00000020][ CPF_Edit | CPF_NoExport ]
	unsigned long                                      bVisible:1;                                       		// 0x00FC ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bAcceptsInput:1;                                  		// 0x00FC ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bCaptureTabs:1;                                   		// 0x00FC ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bCaptureMouse:1;                                  		// 0x00FC ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bNeverFocus:1;                                    		// 0x00FC ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      bRepeatClick:1;                                   		// 0x00FC ( 0x0004 )  [0x00000800][ CPF_Edit ]
	unsigned long                                      bRequireReleaseClick:1;                           		// 0x00FC ( 0x0004 )  [0x00001000][ CPF_Edit ]
	unsigned long                                      bMouseOverSound:1;                                		// 0x00FC ( 0x0004 )  [0x00002000][ CPF_Edit ]
	unsigned long                                      bDropSource:1;                                    		// 0x00FC ( 0x0004 )  [0x00004000][ CPF_Edit ]
	unsigned long                                      bDropTarget:1;                                    		// 0x00FC ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      bPendingFocus:1;                                  		// 0x00FC ( 0x0004 )  [0x00010000][ CPF_Edit | CPF_NoExport ]
	unsigned long                                      bInit:1;                                          		// 0x00FC ( 0x0004 )  [0x00020000][ CPF_Edit ]
	unsigned long                                      bNeverScale:1;                                    		// 0x00FC ( 0x0004 )  [0x00040000][ CPF_Edit ]
	unsigned long                                      bRequiresStyle:1;                                 		// 0x00FC ( 0x0004 )  [0x00080000][ CPF_Const | CPF_NoExport ]
	unsigned long                                      bPositioned:1;                                    		// 0x00FC ( 0x0004 )  [0x00100000][ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NoExport ]
	unsigned long                                      bAnimating:1;                                     		// 0x00FC ( 0x0004 )  [0x00200000][ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	unsigned long                                      bTravelling:1;                                    		// 0x00FC ( 0x0004 )  [0x00400000][ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NoExport ]
	unsigned long                                      bSizing:1;                                        		// 0x00FC ( 0x0004 )  [0x00800000][ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NoExport ]
	class TArray< struct FVector >                     MotionFrame;                                      		// 0x0100 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport ]
	class TArray< struct FVector >                     SizeFrame;                                        		// 0x010C ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport ]
	float                                              Bounds[ 0x04 ];                                   		// 0x0118 ( 0x0010 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NoExport ]
	float                                              ClientBounds[ 0x04 ];                             		// 0x0128 ( 0x0010 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NoExport ]
	unsigned long                                      bTimerRepeat:1;                                   		// 0x0138 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	int                                                TimerIndex;                                       		// 0x013C ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NoExport ]
	float                                              TimerCountdown;                                   		// 0x0140 ( 0x0004 ) [ CPF_Edit ]
	float                                              TimerInterval;                                    		// 0x0144 ( 0x0004 ) [ CPF_Edit ]
	float                                              MouseOffset[ 0x04 ];                              		// 0x0148 ( 0x0010 ) [ CPF_Const | CPF_NoExport ]
	class UGUIContextMenu*                             ContextMenu;                                      		// 0x0158 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIToolTip*                                 ToolTip;                                          		// 0x015C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline ]
	class FColor                                       WhiteColor;                                       		// 0x0160 ( 0x0004 ) [ CPF_Const | CPF_NoExport ]
	class UGUIStyles*                                  Style;                                            		// 0x0164 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	unsigned char                                      OnClickSound;                                     		// 0x0168 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      BoundingType;                                     		// 0x0169 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      ScalingType;                                      		// 0x016A ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bStandardized:1;                                  		// 0x016C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              StandardHeight;                                   		// 0x0170 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bFlicker:1;                                       		// 0x0174 ( 0x0004 )  [0x00000001]
	int                                                PreDrawCount;                                     		// 0x0178 ( 0x0004 ) [ CPF_Const | CPF_EditConst | CPF_NoExport ]
	int                                                DrawCount;                                        		// 0x017C ( 0x0004 ) [ CPF_Const | CPF_EditConst | CPF_NoExport ]
	int                                                OnRenderCount;                                    		// 0x0180 ( 0x0004 ) [ CPF_EditConst | CPF_NoExport ]
	int                                                OnRenderedCount;                                  		// 0x0184 ( 0x0004 ) [ CPF_EditConst | CPF_NoExport ]
	int                                                OnPreDrawCount;                                   		// 0x0188 ( 0x0004 ) [ CPF_EditConst | CPF_NoExport ]
	int                                                OnDrawCount;                                      		// 0x018C ( 0x0004 ) [ CPF_EditConst | CPF_NoExport ]
	unsigned long                                      bIsDisableHover:1;                                		// 0x0190 ( 0x0004 )  [0x00000001]
	unsigned long                                      bAlwaysFocus:1;                                   		// 0x0190 ( 0x0004 )  [0x00000002]
	struct FScriptDelegate                             __OnArrival__Delegate;                            		// 0x0194 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnEndAnimation__Delegate;                       		// 0x019C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnPreDraw__Delegate;                            		// 0x01A4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDraw__Delegate;                               		// 0x01AC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnRender__Delegate;                             		// 0x01B4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnRendered__Delegate;                           		// 0x01BC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnActivate__Delegate;                           		// 0x01C4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDeActivate__Delegate;                         		// 0x01CC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnWatch__Delegate;                              		// 0x01D4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnHitTest__Delegate;                            		// 0x01DC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnMessage__Delegate;                            		// 0x01E4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnHide__Delegate;                               		// 0x01EC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnShow__Delegate;                               		// 0x01F4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnBeginTooltip__Delegate;                       		// 0x01FC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnEndTooltip__Delegate;                         		// 0x0204 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnInvalidate__Delegate;                         		// 0x020C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnHover__Delegate;                              		// 0x0214 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnClick__Delegate;                              		// 0x021C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDblClick__Delegate;                           		// 0x0224 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnRightClick__Delegate;                         		// 0x022C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnMousePressed__Delegate;                       		// 0x0234 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnMouseRelease__Delegate;                       		// 0x023C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnTimer__Delegate;                              		// 0x0244 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnChange__Delegate;                             		// 0x024C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnKeyType__Delegate;                            		// 0x0254 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnKeyEvent__Delegate;                           		// 0x025C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDesignModeKeyEvent__Delegate;                 		// 0x0264 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnCapturedMouseMove__Delegate;                  		// 0x026C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnLoadINI__Delegate;                            		// 0x0274 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnSaveINI__Delegate;                            		// 0x027C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnMultiSelect__Delegate;                        		// 0x0284 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnBeginDrag__Delegate;                          		// 0x028C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnEndDrag__Delegate;                            		// 0x0294 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDragDrop__Delegate;                           		// 0x029C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDragEnter__Delegate;                          		// 0x02A4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDragLeave__Delegate;                          		// 0x02AC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDragOver__Delegate;                           		// 0x02B4 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 class UCanvas*            GetCurrentCanvas (  );                            		//  XInterface.GUIComponent.GetCurrentCanvas
	 void                      DebugTabOrder (  );                               		//  XInterface.GUIComponent.DebugTabOrder
	 void                      LevelChanged (  );                                		//  XInterface.GUIComponent.LevelChanged
	 void                      SetEnabled ( bool Value );                        		//  XInterface.GUIComponent.SetEnabled
	 void                      DisableMe (  );                                   		//  XInterface.GUIComponent.DisableMe
	 void                      EnableMe (  );                                    		//  XInterface.GUIComponent.EnableMe
	 void                      SetFlicker ( bool Value );                        		//  XInterface.GUIComponent.SetFlicker
	 void                      DisableComponent ( class UGUIComponent* Comp );   		// [ FUNC_Final ] XInterface.GUIComponent.DisableComponent
	 void                      EnableComponent ( class UGUIComponent* Comp );    		// [ FUNC_Final ] XInterface.GUIComponent.EnableComponent
	 void                      KillAnimation (  );                               		//  XInterface.GUIComponent.KillAnimation
	 void                      DAnimate ( float NewLeft, float NewTop, float NewWidth, float NewHeight, float PositionTime, float DimensionTime );		//  XInterface.GUIComponent.DAnimate
	 void                      Resize ( float NewWidth, float NewHeight, float Time );		//  XInterface.GUIComponent.Resize
	 void                      Animate ( float NewLeft, float NewTop, float Time );		//  XInterface.GUIComponent.Animate
	 void                      eventEndAnimation ( class UGUIComponent* Animating, unsigned char Type );		// [ FUNC_Event ] XInterface.GUIComponent.EndAnimation
	 void                      eventBeginAnimation ( class UGUIComponent* Animating );		// [ FUNC_Event ] XInterface.GUIComponent.BeginAnimation
	 class UGUIPage*           eventOwnerPage (  );                              		// [ FUNC_Event ] XInterface.GUIComponent.OwnerPage
	 void                      DebugFocusPosition ( class UGUIComponent* Who, bool Last );		// [ FUNC_Final ] XInterface.GUIComponent.DebugFocusPosition
	 void                      DebugFocus ( class UGUIComponent* Who, bool bLose );		// [ FUNC_Final ] XInterface.GUIComponent.DebugFocus
	 void                      SetTooltip ( class UGUIToolTip* InTooltip );      		//  XInterface.GUIComponent.SetTooltip
	 void                      SetToolTipText ( struct FString NewToolTipText ); 		//  XInterface.GUIComponent.SetToolTipText
	 void                      SetHint ( struct FString NewHint );               		//  XInterface.GUIComponent.SetHint
	 void                      SetFriendlyLabel ( class UGUILabel* NewLabel );   		//  XInterface.GUIComponent.SetFriendlyLabel
	 void                      SetFocusInstead ( class UGUIComponent* InFocusComp );		//  XInterface.GUIComponent.SetFocusInstead
	 void                      eventShow (  );                                   		// [ FUNC_Event ] XInterface.GUIComponent.Show
	 void                      eventHide (  );                                   		// [ FUNC_Event ] XInterface.GUIComponent.Hide
	 void                      CenterMouse (  );                                 		//  XInterface.GUIComponent.CenterMouse
	 void                      eventSetVisibility ( bool bIsVisible );           		// [ FUNC_Event ] XInterface.GUIComponent.SetVisibility
	 void                      FillOwner (  );                                   		//  XInterface.GUIComponent.FillOwner
	 bool                      eventPrevPage (  );                               		// [ FUNC_Event ] XInterface.GUIComponent.PrevPage
	 bool                      eventNextPage (  );                               		// [ FUNC_Event ] XInterface.GUIComponent.NextPage
	 bool                      eventPrevControl ( class UGUIComponent* Sender ); 		// [ FUNC_Event ] XInterface.GUIComponent.PrevControl
	 bool                      eventNextControl ( class UGUIComponent* Sender ); 		// [ FUNC_Event ] XInterface.GUIComponent.NextControl
	 bool                      eventFocusLast ( class UGUIComponent* Sender );   		// [ FUNC_Event ] XInterface.GUIComponent.FocusLast
	 bool                      eventFocusFirst ( class UGUIComponent* Sender );  		// [ FUNC_Event ] XInterface.GUIComponent.FocusFirst
	 void                      eventLoseFocus ( class UGUIComponent* Sender );   		// [ FUNC_Event ] XInterface.GUIComponent.LoseFocus
	 void                      eventSetFocus ( class UGUIComponent* Who );       		// [ FUNC_Event ] XInterface.GUIComponent.SetFocus
	 bool                      eventCanAcceptFocus (  );                         		// [ FUNC_Event ] XInterface.GUIComponent.CanAcceptFocus
	 bool                      IsInClientBounds (  );                            		//  XInterface.GUIComponent.IsInClientBounds
	 bool                      IsInBounds (  );                                  		//  XInterface.GUIComponent.IsInBounds
	 void                      TraversalApplyAWinPos (  );                       		//  XInterface.GUIComponent.TraversalApplyAWinPos
	 void                      ApplyAWinPos (  );                                		//  XInterface.GUIComponent.ApplyAWinPos
	 class UGUIComponent*      GetTopMenuOwner (  );                             		//  XInterface.GUIComponent.GetTopMenuOwner
	 void                      eventInitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		// [ FUNC_Event ] XInterface.GUIComponent.InitComponent
	 void                      eventDropStateChange ( unsigned char NewState );  		// [ FUNC_Event ] XInterface.GUIComponent.DropStateChange
	 bool                      eventIsMultiSelect (  );                          		// [ FUNC_Event ] XInterface.GUIComponent.IsMultiSelect
	 void                      eventMenuStateChange ( unsigned char NewState );  		// [ FUNC_Event ] XInterface.GUIComponent.MenuStateChange
	 struct FString            MakeColorCode ( class FColor NewColor );          		//  XInterface.GUIComponent.MakeColorCode
	 struct FString            StripColorCodes ( struct FString InString );      		//  XInterface.GUIComponent.StripColorCodes
	 void                      SaveINI ( struct FString Value );                 		//  XInterface.GUIComponent.SaveINI
	 struct FString            LoadINI (  );                                     		//  XInterface.GUIComponent.LoadINI
	 void                      eventfree (  );                                   		// [ FUNC_Event ] XInterface.GUIComponent.free
	 void                      eventClosed ( class UGUIComponent* Sender, bool bCancelled );		// [ FUNC_Event ] XInterface.GUIComponent.Closed
	 void                      eventOpened ( class UGUIComponent* Sender );      		// [ FUNC_Event ] XInterface.GUIComponent.Opened
	 void                      eventTimer (  );                                  		// [ FUNC_Event ] XInterface.GUIComponent.Timer
	 struct FString            eventAdditionalDebugString (  );                  		// [ FUNC_Event ] XInterface.GUIComponent.AdditionalDebugString
	 bool                      SpecialHit ( bool bForce );                       		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x033D ] XInterface.GUIComponent.SpecialHit
	 struct FString            GetMenuPath (  );                                 		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x033C ] XInterface.GUIComponent.GetMenuPath
	 bool                      IsInIncompleteLetter ( struct FString strUserName );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIComponent.IsInIncompleteLetter
	 int                       IsCorrectUserName_THAILAND ( struct FString strUserName );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIComponent.IsCorrectUserName_THAILAND
	 int                       IsCorrectUserName_China ( struct FString strUserName );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIComponent.IsCorrectUserName_China
	 int                       IsCorrectUserName ( struct FString strUserName ); 		// [ FUNC_Final | FUNC_Native ] XInterface.GUIComponent.IsCorrectUserName
	 void                      SetPosition ( float NewLeft, float NewTop, float NewWidth, float NewHeight, bool bForceRelative );		//  XInterface.GUIComponent.SetPosition
	 void                      eventResolutionChanged ( int ResX, int ResY );    		// [ FUNC_Event ] XInterface.GUIComponent.ResolutionChanged
	 float                     RelativeHeight ( float RealHeight, bool bForce ); 		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x033B ] XInterface.GUIComponent.RelativeHeight
	 float                     RelativeWidth ( float RealWidth, bool bForce );   		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x033A ] XInterface.GUIComponent.RelativeWidth
	 float                     RelativeTop ( float RealTop, bool bForce );       		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0339 ] XInterface.GUIComponent.RelativeTop
	 float                     RelativeLeft ( float RealLeft, bool bForce );     		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0338 ] XInterface.GUIComponent.RelativeLeft
	 float                     ActualTop ( float val, bool bForce );             		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0337 ] XInterface.GUIComponent.ActualTop
	 float                     ActualLeft ( float val, bool bForce );            		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0336 ] XInterface.GUIComponent.ActualLeft
	 float                     ActualHeight ( float val, bool bForce );          		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0335 ] XInterface.GUIComponent.ActualHeight
	 float                     ActualWidth ( float val, bool bForce );           		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0334 ] XInterface.GUIComponent.ActualWidth
	 void                      UpdateBounds (  );                                		// [ FUNC_Final | FUNC_Native ] XInterface.GUIComponent.UpdateBounds
	 void                      UpdateOffset ( float PosX, float PosY, float PosW, float PosH );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0331 ] XInterface.GUIComponent.UpdateOffset
	 void                      AutoPositionOn ( class TArray< class UGUIComponent* > Components, class UGUIComponent* frame, float LeftPadPerc, float UpperPadPerc, float RightPadPerc, float LowerPadPerc, int NumberOfColumns, float ColumnPadding );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0330 ] XInterface.GUIComponent.AutoPositionOn
	 void                      AutoPosition ( class TArray< class UGUIComponent* > Components, float LeftBound, float UpperBound, float RightBound, float LowerBound, float LeftPad, float UpperPad, float RightPad, float LowerPad, int NumberOfColumns, float ColumnPadding );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x032F ] XInterface.GUIComponent.AutoPosition
	 void                      KillTimer ( struct FName TimerFunc );             		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x032E ] XInterface.GUIComponent.KillTimer
	 void                      SetTimer ( float Interval, bool bRepeat, struct FName TimerFunc );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x032D ] XInterface.GUIComponent.SetTimer
	 class APlayerController*  PlayerOwner (  );                                 		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x032C ] XInterface.GUIComponent.PlayerOwner
	 void                      OnDragOver ( class UGUIComponent* Sender );       		//  XInterface.GUIComponent.OnDragOver
	 void                      OnDragLeave ( class UGUIComponent* Sender );      		//  XInterface.GUIComponent.OnDragLeave
	 void                      OnDragEnter ( class UGUIComponent* Sender );      		//  XInterface.GUIComponent.OnDragEnter
	 bool                      OnDragDrop ( class UGUIComponent* Sender );       		//  XInterface.GUIComponent.OnDragDrop
	 void                      OnEndDrag ( class UGUIComponent* Sender, bool bAccepted );		//  XInterface.GUIComponent.OnEndDrag
	 bool                      OnBeginDrag ( class UGUIComponent* Sender );      		//  XInterface.GUIComponent.OnBeginDrag
	 bool                      OnMultiSelect ( class UGUIComponent* Sender );    		//  XInterface.GUIComponent.OnMultiSelect
	 struct FString            OnSaveINI ( class UGUIComponent* Sender );        		//  XInterface.GUIComponent.OnSaveINI
	 void                      OnLoadINI ( class UGUIComponent* Sender, struct FString S );		//  XInterface.GUIComponent.OnLoadINI
	 bool                      OnCapturedMouseMove ( float deltaX, float deltaY );		//  XInterface.GUIComponent.OnCapturedMouseMove
	 bool                      OnDesignModeKeyEvent ( unsigned char key, unsigned char State );		//  XInterface.GUIComponent.OnDesignModeKeyEvent
	 bool                      OnKeyEvent ( float Delta, unsigned char* key, unsigned char* State );		//  XInterface.GUIComponent.OnKeyEvent
	 bool                      OnKeyType ( struct FString Unicode, unsigned char* key );		//  XInterface.GUIComponent.OnKeyType
	 void                      OnChange ( class UGUIComponent* Sender );         		//  XInterface.GUIComponent.OnChange
	 void                      OnTimer ( class UGUIComponent* Sender );          		//  XInterface.GUIComponent.OnTimer
	 void                      OnMouseRelease ( class UGUIComponent* Sender );   		//  XInterface.GUIComponent.OnMouseRelease
	 void                      OnMousePressed ( class UGUIComponent* Sender, bool bRepeat );		//  XInterface.GUIComponent.OnMousePressed
	 bool                      OnRightClick ( class UGUIComponent* Sender );     		//  XInterface.GUIComponent.OnRightClick
	 bool                      OnDblClick ( class UGUIComponent* Sender );       		//  XInterface.GUIComponent.OnDblClick
	 bool                      OnClick ( class UGUIComponent* Sender );          		//  XInterface.GUIComponent.OnClick
	 bool                      OnHover ( class UGUIComponent* Sender );          		//  XInterface.GUIComponent.OnHover
	 void                      OnInvalidate ( class UGUIComponent* Who );        		//  XInterface.GUIComponent.OnInvalidate
	 bool                      OnEndTooltip (  );                                		//  XInterface.GUIComponent.OnEndTooltip
	 class UGUIToolTip*        OnBeginTooltip (  );                              		//  XInterface.GUIComponent.OnBeginTooltip
	 void                      OnShow (  );                                      		//  XInterface.GUIComponent.OnShow
	 void                      OnHide (  );                                      		//  XInterface.GUIComponent.OnHide
	 void                      OnMessage ( struct FString Msg, float MsgLife );  		//  XInterface.GUIComponent.OnMessage
	 void                      OnHitTest ( float MouseX, float MouseY );         		//  XInterface.GUIComponent.OnHitTest
	 void                      OnWatch (  );                                     		//  XInterface.GUIComponent.OnWatch
	 void                      OnDeActivate (  );                                		//  XInterface.GUIComponent.OnDeActivate
	 void                      OnActivate (  );                                  		//  XInterface.GUIComponent.OnActivate
	 void                      OnRendered ( class UCanvas* Canvas );             		//  XInterface.GUIComponent.OnRendered
	 void                      OnRender ( class UCanvas* Canvas );               		//  XInterface.GUIComponent.OnRender
	 bool                      OnDraw ( class UCanvas* Canvas );                 		//  XInterface.GUIComponent.OnDraw
	 bool                      OnPreDraw ( class UCanvas* Canvas );              		//  XInterface.GUIComponent.OnPreDraw
	 void                      OnEndAnimation ( class UGUIComponent* Sender, unsigned char Type );		//  XInterface.GUIComponent.OnEndAnimation
	 void                      OnArrival ( class UGUIComponent* Sender, unsigned char Type );		//  XInterface.GUIComponent.OnArrival

	// Public Imports
	UGUIComponent(class UGUIComponent const &);
	UGUIComponent(void);
	class UGUIComponent &  operator=(class UGUIComponent const &);
	float  ActualHeight(float,int)const ;
	float  ActualLeft(float,int)const ;
	float  ActualTop(float,int)const ;
	float  ActualWidth(float,int)const ;
	unsigned short *  GetMenuPath(unsigned short *)const ;
	static void  InternalConstructor(void *);
	float  RelativeHeight(float,int)const ;
	float  RelativeLeft(float,int)const ;
	float  RelativeTop(float,int)const ;
	float  RelativeWidth(float,int)const ;
	static class UClass *  StaticClass(void);
	int  WithinBounds(float,float)const ;
	void  delegateOnActivate(void);
	void  delegateOnArrival(class UGUIComponent *,unsigned char);
	unsigned long  delegateOnBeginDrag(class UGUIComponent *);
	class UGUIToolTip *  delegateOnBeginTooltip(void);
	unsigned long  delegateOnCapturedMouseMove(float,float);
	void  delegateOnChange(class UGUIComponent *);
	unsigned long  delegateOnClick(class UGUIComponent *);
	unsigned long  delegateOnDblClick(class UGUIComponent *);
	void  delegateOnDeActivate(void);
	unsigned long  delegateOnDesignModeKeyEvent(unsigned char,unsigned char);
	unsigned long  delegateOnDragDrop(class UGUIComponent *);
	void  delegateOnDragEnter(class UGUIComponent *);
	void  delegateOnDragLeave(class UGUIComponent *);
	void  delegateOnDragOver(class UGUIComponent *);
	unsigned long  delegateOnDraw(class UCanvas *);
	void  delegateOnEndAnimation(class UGUIComponent *,unsigned char);
	void  delegateOnEndDrag(class UGUIComponent *,unsigned long);
	unsigned long  delegateOnEndTooltip(void);
	void  delegateOnHide(void);
	void  delegateOnHitTest(float,float);
	unsigned long  delegateOnHover(class UGUIComponent *);
	void  delegateOnInvalidate(class UGUIComponent *);
	unsigned long  delegateOnKeyEvent(unsigned char &,unsigned char &,float);
	unsigned long  delegateOnKeyType(unsigned char &,class FString const &);
	void  delegateOnLoadINI(class UGUIComponent *,class FString const &);
	void  delegateOnMessage(class FString const &,float);
	void  delegateOnMousePressed(class UGUIComponent *,unsigned long);
	void  delegateOnMouseRelease(class UGUIComponent *);
	unsigned long  delegateOnMultiSelect(class UGUIComponent *);
	unsigned long  delegateOnPreDraw(class UCanvas *);
	void  delegateOnRender(class UCanvas *);
	void  delegateOnRendered(class UCanvas *);
	unsigned long  delegateOnRightClick(class UGUIComponent *);
	class FString  delegateOnSaveINI(class UGUIComponent *);
	void  delegateOnShow(void);
	void  delegateOnTimer(class UGUIComponent *);
	void  delegateOnWatch(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0268

// Class XInterface.GUIMultiComponent
class DLL_IMPORT UGUIMultiComponent : public UGUIComponent
{
public:
	class TArray< class UGUIComponent* >               Controls;                                         		// 0x02BC ( 0x000C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UGUIComponent*                               FocusedControl;                                   		// 0x02C8 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class TArray< class UGUIComponent* >               Components;                                       		// 0x02CC ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_NeedCtorLink | CPF_NoExport ]
	int                                                AnimationCount;                                   		// 0x02D8 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	unsigned long                                      PropagateVisibility:1;                            		// 0x02DC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bOldStyleMenus:1;                                 		// 0x02DC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bDrawFocusedLast:1;                               		// 0x02DC ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bAlwaysAutomate:1;                                		// 0x02DC ( 0x0004 )  [0x00000008][ CPF_Edit ]
	struct FScriptDelegate                             __HandleContextMenuOpen__Delegate;                		// 0x02E0 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __HandleContextMenuClose__Delegate;               		// 0x02E8 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __NotifyContextSelect__Delegate;                  		// 0x02F0 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnCreateComponent__Delegate;                    		// 0x02F8 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      RecursiveActiveOwner ( class UGUIComponent* checkComponent );		//  XInterface.GUIMultiComponent.RecursiveActiveOwner
	 void                      TraversalApplyAWinPos (  );                       		//  XInterface.GUIMultiComponent.TraversalApplyAWinPos
	 class UGUIComponent*      NewComponent ( class UGUIComponent* newcompo, struct FFloatBox fbNewCompo, float RenderWeight, class UGUIMultiComponent* ParentComponent );		//  XInterface.GUIMultiComponent.NewComponent
	 void                      CheckDuplicateTabOrder (  );                      		//  XInterface.GUIMultiComponent.CheckDuplicateTabOrder
	 void                      CheckInvalidTabOrder (  );                        		//  XInterface.GUIMultiComponent.CheckInvalidTabOrder
	 void                      DebugTabOrder (  );                               		//  XInterface.GUIMultiComponent.DebugTabOrder
	 void                      CenterMouse (  );                                 		//  XInterface.GUIMultiComponent.CenterMouse
	 void                      LevelChanged (  );                                		//  XInterface.GUIMultiComponent.LevelChanged
	 void                      eventEndAnimation ( class UGUIComponent* Animating, unsigned char Type );		// [ FUNC_Event ] XInterface.GUIMultiComponent.EndAnimation
	 void                      eventBeginAnimation ( class UGUIComponent* Animating );		// [ FUNC_Event ] XInterface.GUIMultiComponent.BeginAnimation
	 void                      eventfree (  );                                   		// [ FUNC_Event ] XInterface.GUIMultiComponent.free
	 void                      eventClosed ( class UGUIComponent* Sender, bool bCancelled );		// [ FUNC_Event ] XInterface.GUIMultiComponent.Closed
	 void                      eventOpened ( class UGUIComponent* Sender );      		// [ FUNC_Event ] XInterface.GUIMultiComponent.Opened
	 void                      eventSetVisibility ( bool bIsVisible );           		// [ FUNC_Event ] XInterface.GUIMultiComponent.SetVisibility
	 void                      DisableMe (  );                                   		//  XInterface.GUIMultiComponent.DisableMe
	 void                      EnableMe (  );                                    		//  XInterface.GUIMultiComponent.EnableMe
	 bool                      eventPrevControl ( class UGUIComponent* Sender ); 		// [ FUNC_Event ] XInterface.GUIMultiComponent.PrevControl
	 bool                      eventNextControl ( class UGUIComponent* Sender ); 		// [ FUNC_Event ] XInterface.GUIMultiComponent.NextControl
	 bool                      eventFocusLast ( class UGUIComponent* Sender );   		// [ FUNC_Event ] XInterface.GUIMultiComponent.FocusLast
	 bool                      eventFocusFirst ( class UGUIComponent* Sender );  		// [ FUNC_Event ] XInterface.GUIMultiComponent.FocusFirst
	 bool                      CanAcceptFocus (  );                              		//  XInterface.GUIMultiComponent.CanAcceptFocus
	 void                      eventLoseFocus ( class UGUIComponent* Sender );   		// [ FUNC_Event ] XInterface.GUIMultiComponent.LoseFocus
	 void                      eventSetFocus ( class UGUIComponent* Who );       		// [ FUNC_Event ] XInterface.GUIMultiComponent.SetFocus
	 void                      SetFocusInstead ( class UGUIComponent* InFocusComp );		//  XInterface.GUIMultiComponent.SetFocusInstead
	 bool                      eventRemoveComponent ( class UGUIComponent* Comp, bool SkipRemap );		// [ FUNC_Event ] XInterface.GUIMultiComponent.RemoveComponent
	 class UGUIComponent*      eventAppendComponent ( class UGUIComponent* NewComp, bool SkipRemap );		// [ FUNC_Event ] XInterface.GUIMultiComponent.AppendComponent
	 class UGUIComponent*      eventInsertComponent ( class UGUIComponent* NewComp, int Index, bool SkipRemap );		// [ FUNC_Event ] XInterface.GUIMultiComponent.InsertComponent
	 class UGUIComponent*      eventAddComponent ( struct FString ComponentClass, bool SkipRemap );		// [ FUNC_Event ] XInterface.GUIMultiComponent.AddComponent
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIMultiComponent.InitComponent
	 void                      InternalOnShow (  );                              		//  XInterface.GUIMultiComponent.InternalOnShow
	 int                       FindComponentIndex ( class UGUIComponent* Who );  		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiComponent.FindComponentIndex
	 void                      RemapComponents (  );                             		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiComponent.RemapComponents
	 void                      InitializeControls (  );                          		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiComponent.InitializeControls
	 void                      OnCreateComponent ( class UGUIComponent* NewComponent, class UGUIComponent* Sender );		//  XInterface.GUIMultiComponent.OnCreateComponent
	 bool                      NotifyContextSelect ( class UGUIContextMenu* Sender, int ClickIndex );		//  XInterface.GUIMultiComponent.NotifyContextSelect
	 bool                      HandleContextMenuClose ( class UGUIContextMenu* Sender );		//  XInterface.GUIMultiComponent.HandleContextMenuClose
	 bool                      HandleContextMenuOpen ( class UGUIComponent* Sender, class UGUIContextMenu* Menu, class UGUIComponent* ContextMenuOwner );		//  XInterface.GUIMultiComponent.HandleContextMenuOpen

	// Public Imports
	UGUIMultiComponent(class UGUIMultiComponent const &);
	UGUIMultiComponent(void);
	class UGUIMultiComponent &  operator=(class UGUIMultiComponent const &);
	void  DrawControls(class UCanvas *);
	static void  InternalConstructor(void *);
	void  PreDrawControls(class UCanvas *);
	static class UClass *  StaticClass(void);
	unsigned long  delegateHandleContextMenuClose(class UGUIContextMenu *);
	unsigned long  delegateHandleContextMenuOpen(class UGUIComponent *,class UGUIContextMenu *,class UGUIComponent *);
	unsigned long  delegateNotifyContextSelect(class UGUIContextMenu *,int);
	void  delegateOnCreateComponent(class UGUIComponent *,class UGUIComponent *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0044

// Class XInterface.GUIPage
class DLL_IMPORT UGUIPage : public UGUIMultiComponent
{
public:
	unsigned long                                      bRenderWorld:1;                                   		// 0x0300 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bPauseIfPossible:1;                               		// 0x0300 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bCheckResolution:1;                               		// 0x0300 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bCaptureInput:1;                                  		// 0x0300 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bRequire640x480:1;                                		// 0x0300 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bPersistent:1;                                    		// 0x0300 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bDisconnectOnOpen:1;                              		// 0x0300 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bAllowedAsLast:1;                                 		// 0x0300 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bRestorable:1;                                    		// 0x0300 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	class UGUIPage*                                    ParentPage;                                       		// 0x0304 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UMaterial*                                   Background;                                       		// 0x0308 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       BackgroundColor;                                  		// 0x030C ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       InactiveFadeColor;                                		// 0x0310 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       ActiveFadeColor;                                  		// 0x0314 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      OpenSound;                                        		// 0x0318 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      CloseSound;                                       		// 0x031C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      BackgroundRStyle;                                 		// 0x0320 ( 0x0001 ) [ CPF_Edit ]
	struct FScriptDelegate                             __OnOpen__Delegate;                               		// 0x0324 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnReOpen__Delegate;                             		// 0x032C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnClose__Delegate;                              		// 0x0334 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnCanClose__Delegate;                           		// 0x033C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __FadedIn__Delegate;                              		// 0x0344 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __FadedOut__Delegate;                             		// 0x034C ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      FadedOut (  );                                    		//  XInterface.GUIPage.FadedOut
	 void                      FadedIn (  );                                     		//  XInterface.GUIPage.FadedIn
	 void                      FadeOut ( bool bTranslate, bool bChangeAlpha );   		//  XInterface.GUIPage.FadeOut
	 void                      FadeIn ( bool bTranslate, bool bChangeAlpha );    		//  XInterface.GUIPage.FadeIn
	 bool                      AllowOpen ( struct FString MenuClass );           		//  XInterface.GUIPage.AllowOpen
	 bool                      IsOpen (  );                                      		// [ FUNC_Final ] XInterface.GUIPage.IsOpen
	 void                      eventfree (  );                                   		// [ FUNC_Event ] XInterface.GUIPage.free
	 bool                      NotifyLevelChange (  );                           		//  XInterface.GUIPage.NotifyLevelChange
	 void                      SetDataString ( struct FString str );             		//  XInterface.GUIPage.SetDataString
	 struct FString            GetDataString (  );                               		//  XInterface.GUIPage.GetDataString
	 void                      HandleObject ( class UObject* obj, class UObject* OptionalObj_1, class UObject* OptionalObj_2 );		//  XInterface.GUIPage.HandleObject
	 bool                      GetRestoreParams ( struct FString* Param1, struct FString* Param2 );		//  XInterface.GUIPage.GetRestoreParams
	 void                      eventHandleParameters ( struct FString Param1, struct FString Param2 );		// [ FUNC_Event ] XInterface.GUIPage.HandleParameters
	 void                      eventSetFocus ( class UGUIComponent* Who );       		// [ FUNC_Event ] XInterface.GUIPage.SetFocus
	 void                      eventChangeHint ( struct FString NewHint );       		// [ FUNC_Event ] XInterface.GUIPage.ChangeHint
	 void                      CheckResolution ( bool Closing, class UGUIController* InController );		//  XInterface.GUIPage.CheckResolution
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIPage.InitComponent
	 void                      PlayCloseSound (  );                              		//  XInterface.GUIPage.PlayCloseSound
	 void                      PlayOpenSound (  );                               		//  XInterface.GUIPage.PlayOpenSound
	 void                      eventClosed ( class UGUIComponent* Sender, bool bCancelled );		// [ FUNC_Event ] XInterface.GUIPage.Closed
	 bool                      OnCanClose ( bool bCancelled );                   		//  XInterface.GUIPage.OnCanClose
	 void                      OnClose ( bool bCancelled );                      		//  XInterface.GUIPage.OnClose
	 void                      OnReOpen (  );                                    		//  XInterface.GUIPage.OnReOpen
	 void                      OnOpen (  );                                      		//  XInterface.GUIPage.OnOpen

	// Public Imports
	UGUIPage(class UGUIPage const &);
	UGUIPage(void);
	class UGUIPage &  operator=(class UGUIPage const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  UpdateTimers(float);
	void  delegateFadedIn(void);
	void  delegateFadedOut(void);
	unsigned long  delegateOnCanClose(unsigned long);
	void  delegateOnClose(unsigned long);
	void  delegateOnOpen(void);
	void  delegateOnReOpen(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0054

// Class XInterface.GUIQuestionPage
class DLL_IMPORT UGUIQuestionPage : public UGUIPage
{
public:
	class UGUILabel*                                   lMessage;                                         		// 0x0354 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UMaterial*                                   MessageIcon;                                      		// 0x0358 ( 0x0004 ) 
	class TArray< struct FString >                     ButtonNames;                                      		// 0x035C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< class UGUIButton* >                  Buttons;                                          		// 0x0368 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UGUIButton*                                  DefaultButton;                                    		// 0x0374 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIButton*                                  CancelButton;                                     		// 0x0378 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FScriptDelegate                             __OnButtonClick__Delegate;                        		// 0x037C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __NewOnButtonClick__Delegate;                     		// 0x0384 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      RemoveButtons (  );                               		//  XInterface.GUIQuestionPage.RemoveButtons
	 struct FString            Replace ( struct FString Src, struct FString Tag, struct FString Value );		//  XInterface.GUIQuestionPage.Replace
	 bool                      ButtonClick ( class UGUIComponent* Sender );      		//  XInterface.GUIQuestionPage.ButtonClick
	 void                      LayoutButtons ( unsigned char ActiveButton );     		//  XInterface.GUIQuestionPage.LayoutButtons
	 class UGUIButton*         AddButton ( unsigned char idesc );                		//  XInterface.GUIQuestionPage.AddButton
	 void                      SetupQuestion ( struct FString Question, unsigned char bButtons, unsigned char ActiveButton, bool bClearFirst );		//  XInterface.GUIQuestionPage.SetupQuestion
	 bool                      InternalOnPreDraw ( class UCanvas* C );           		//  XInterface.GUIQuestionPage.InternalOnPreDraw
	 void                      InitComponent ( class UGUIController* pMyController, class UGUIComponent* myOwner );		//  XInterface.GUIQuestionPage.InitComponent
	 bool                      NewOnButtonClick ( unsigned char bButton );       		//  XInterface.GUIQuestionPage.NewOnButtonClick
	 void                      OnButtonClick ( unsigned char bButton );          		//  XInterface.GUIQuestionPage.OnButtonClick
}; // Size: 0x0038

// Class XInterface.HudBase
class DLL_IMPORT AHudBase : public AHUD
{
public:
	int                                                SpecPlayerLevel;                                  		// 0x06B4 ( 0x0004 ) 
	int                                                SpecPlayerLevelMarkID;                            		// 0x06B8 ( 0x0004 ) 
	struct FString                                     strSpectating;                                    		// 0x06BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSpectateHelp;                                  		// 0x06C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbSpectateLevel;                                  		// 0x06D4 ( 0x0010 ) 
	struct FFloatBox                                   fbSpectateUser;                                   		// 0x06E4 ( 0x0010 ) 
	struct FFloatBox                                   fbSpectateHelp;                                   		// 0x06F4 ( 0x0010 ) 
	struct FFloatBox                                   fbSpectatingBack;                                 		// 0x0704 ( 0x0010 ) 
	float                                              NametagFactorZ;                                   		// 0x0714 ( 0x0004 ) [ CPF_Edit ]
	float                                              NametagExtraZ;                                    		// 0x0718 ( 0x0004 ) [ CPF_Edit ]
	int                                                NametagFontSize;                                  		// 0x071C ( 0x0004 ) [ CPF_Edit ]
	float                                              NametagRadius;                                    		// 0x0720 ( 0x0004 ) [ CPF_Edit ]
	int                                                NametagShadowX;                                   		// 0x0724 ( 0x0004 ) [ CPF_Edit ]
	int                                                NametagShadowY;                                   		// 0x0728 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       NametagShadowColor;                               		// 0x072C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     NameTagInvulnerablePost;                          		// 0x0730 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              NameTagVisUpdateTime;                             		// 0x073C ( 0x0004 ) 
	struct FSpriteWidget                               IconDefendBombHolder;                             		// 0x0740 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               IconInvulnerable;                                 		// 0x0780 ( 0x0040 ) [ CPF_Edit ]
	int                                                TeamIndex;                                        		// 0x07C0 ( 0x0004 ) [ CPF_Edit | CPF_Transient ]
	unsigned char                                      PassStyle;                                        		// 0x07C4 ( 0x0001 ) [ CPF_Edit | CPF_Transient ]
	class TArray< class AHudBase* >                    ChildHudParts;                                    		// 0x07C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FHudLocalizedMessage                        LocalMessages[ 0x08 ];                            		// 0x07D4 ( 0x0260 ) [ CPF_Edit | CPF_Transient | CPF_NeedCtorLink ]
	class UClass*                                      VoteMenuClass;                                    		// 0x0A34 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   TargetMaterial;                                   		// 0x0A38 ( 0x0004 ) 
	unsigned long                                      bShowTargeting:1;                                 		// 0x0A3C ( 0x0004 )  [0x00000001][ CPF_Transient ]
	struct FVector                                     TargetingLocation;                                		// 0x0A40 ( 0x000C ) [ CPF_Transient ]
	float                                              TargetingSize;                                    		// 0x0A4C ( 0x0004 ) [ CPF_Transient ]
	struct FString                                     InstructionText;                                  		// 0x0A50 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     InstructionKeyText;                               		// 0x0A5C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              InstructTextBorderX;                              		// 0x0A68 ( 0x0004 ) [ CPF_Edit ]
	float                                              InstructTextBorderY;                              		// 0x0A6C ( 0x0004 ) [ CPF_Edit ]
	float                                              InstrDelta;                                       		// 0x0A70 ( 0x0004 ) [ CPF_Edit ]
	float                                              InstrRate;                                        		// 0x0A74 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     InstructionFontName;                              		// 0x0A78 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UFont*                                       InstructionFontFont;                              		// 0x0A84 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bUsingCustomHUDColor:1;                           		// 0x0A88 ( 0x0004 )  [0x00000001]
	unsigned long                                      DoCropping:1;                                     		// 0x0A88 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bIsCinematic:1;                                   		// 0x0A88 ( 0x0004 )  [0x00000004]
	unsigned char                                      FontsPrecached;                                   		// 0x0A8C ( 0x0001 ) 
	unsigned long                                      bHideWeaponName:1;                                		// 0x0A90 ( 0x0004 )  [0x00000001]
	float                                              CroppingAmount;                                   		// 0x0A94 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   CroppingMaterial;                                 		// 0x0A98 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     LastWeaponName;                                   		// 0x0A9C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              WeaponDrawTimer;                                  		// 0x0AA8 ( 0x0004 ) 
	class FColor                                       WeaponDrawColor;                                  		// 0x0AAC ( 0x0004 ) 
	struct FString                                     Text;                                             		// 0x0AB0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LevelActionLoading;                               		// 0x0ABC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LevelActionPaused;                                		// 0x0AC8 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LevelActionFontName;                              		// 0x0AD4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     WonMatchPrefix;                                   		// 0x0AE0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WonMatchPostFix;                                  		// 0x0AEC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WaitingToSpawn;                                   		// 0x0AF8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AtMenus;                                          		// 0x0B04 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     YouveWonTheMatch;                                 		// 0x0B10 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     YouveLostTheMatch;                                		// 0x0B1C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NowViewing;                                       		// 0x0B28 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ScoreText;                                        		// 0x0B34 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     InitialViewingString;                             		// 0x0B40 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UMaterial*                                   LocationDot;                                      		// 0x0B4C ( 0x0004 ) 
	class UMaterial*                                   DefaultCrosshair;                                 		// 0x0B50 ( 0x0004 ) 
	class UMaterial*                                   TargetCrosshair;                                  		// 0x0B54 ( 0x0004 ) 
	class FColor                                       DamageFlash[ 0x04 ];                              		// 0x0B58 ( 0x0010 ) 
	float                                              DamageTime[ 0x04 ];                               		// 0x0B68 ( 0x0010 ) 
	unsigned char                                      Emphasized[ 0x04 ];                               		// 0x0B78 ( 0x0004 ) [ CPF_Edit ]
	int                                                DamageGot;                                        		// 0x0B7C ( 0x0004 ) 
	float                                              fPainSoundLastPlayed;                             		// 0x0B80 ( 0x0004 ) 
	float                                              fStartTime;                                       		// 0x0B84 ( 0x0004 ) 
	struct FSpriteWidget                               WAttackedBG;                                      		// 0x0B88 ( 0x0040 ) 
	unsigned long                                      bAttacked:1;                                      		// 0x0BC8 ( 0x0004 )  [0x00000001]
	class TArray< struct FSpriteWidget >               Crosshairs;                                       		// 0x0BCC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class FColor                                       CustomHUDColor;                                   		// 0x0BD8 ( 0x0004 ) 
	unsigned long                                      bUseCustomWeaponCrosshairs:1;                     		// 0x0BDC ( 0x0004 )  [0x00000001]
	float                                              ScreenRatioX;                                     		// 0x0BE0 ( 0x0004 ) 
	float                                              ScreenRatioY;                                     		// 0x0BE4 ( 0x0004 ) 
	float                                              ScreenRatioXEx;                                   		// 0x0BE8 ( 0x0004 ) 
	float                                              ScreenRatioYEx;                                   		// 0x0BEC ( 0x0004 ) 
	float                                              _rX;                                              		// 0x0BF0 ( 0x0004 ) 
	float                                              _rY;                                              		// 0x0BF4 ( 0x0004 ) 
	float                                              _reX;                                             		// 0x0BF8 ( 0x0004 ) 
	float                                              _reY;                                             		// 0x0BFC ( 0x0004 ) 
	unsigned long                                      IsDrawModeMessage:1;                              		// 0x0C00 ( 0x0004 )  [0x00000001]
	unsigned long                                      IsDrawSystemMessage:1;                            		// 0x0C00 ( 0x0004 )  [0x00000002]
	class TArray< struct FString >                     BaseTeamName;                                     		// 0x0C04 ( 0x000C ) [ CPF_NeedCtorLink ]
	class FColor                                       BaseTeamColorAlly;                                		// 0x0C10 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class FColor >                       BaseTeamColor;                                    		// 0x0C14 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class FColor                                       FriendlyColor;                                    		// 0x0C20 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       MyselfColor;                                      		// 0x0C24 ( 0x0004 ) [ CPF_Edit ]
	int                                                TimeMinutes;                                      		// 0x0C28 ( 0x0004 ) 
	int                                                TimeSeconds;                                      		// 0x0C2C ( 0x0004 ) 
	unsigned long                                      AlreadyGotMessage17_PlayerCantStart:1;            		// 0x0C30 ( 0x0004 )  [0x00000001]
	struct FString                                     KillerName;                                       		// 0x0C34 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              KillerMarkTimeToRemove;                           		// 0x0C40 ( 0x0004 ) 
	struct FSpriteWidget                               KillerSprite;                                     		// 0x0C44 ( 0x0040 ) [ CPF_Edit ]

	// UScript Functions
	 int                       GetCurGameTime (  );                              		//  XInterface.HudBase.GetCurGameTime
	 void                      execclearkilllog (  );                            		// [ FUNC_Exec ] XInterface.HudBase.clearkilllog
	 void                      execuserzone ( struct FString szPath, struct FString szCommand );		// [ FUNC_Exec ] XInterface.HudBase.userzone
	 void                      execusermove ( struct FString szPath, struct FString szCommand, int nCombatNum );		// [ FUNC_Exec ] XInterface.HudBase.usermove
	 void                      execkilllog ( struct FString szPath, struct FString szCommand );		// [ FUNC_Exec ] XInterface.HudBase.killlog
	 void                      eventWorldSpaceOverlays (  );                     		// [ FUNC_Simulated | FUNC_Event ] XInterface.HudBase.WorldSpaceOverlays
	 void                      PlayHUDSound ( class APlayerController* PC, unsigned char soundType );		//  XInterface.HudBase.PlayHUDSound
	 struct FVector            CalcNametagPos ( class APawn* curPawn );          		//  XInterface.HudBase.CalcNametagPos
	 struct FVector            CalcNametagPosNative ( class APawn* curPawn );    		// [ FUNC_Native ] XInterface.HudBase.CalcNametagPosNative
	 class FColor              GetNametagColor ( class APlayerReplicationInfo* Info );		//  XInterface.HudBase.GetNametagColor
	 void                      RefreshKillerName ( struct FString mKillerName ); 		//  XInterface.HudBase.RefreshKillerName
	 void                      DrawNameTag ( class UCanvas* C, class AwPawn* curPawn );		//  XInterface.HudBase.DrawNameTag
	 void                      DrawMissionIcon ( class UCanvas* C, class AwPawn* curPawn );		//  XInterface.HudBase.DrawMissionIcon
	 void                      DrawNametagsScript ( class UCanvas* C, bool bSpectateMode, bool drawAlways );		//  XInterface.HudBase.DrawNametagsScript
	 void                      DrawNametags ( class UCanvas* C, bool bSpectateMode, bool drawAlways );		//  XInterface.HudBase.DrawNametags
	 void                      DrawNametagsNative ( class UCanvas* C, bool bSpectateMode, bool drawAlways );		// [ FUNC_Native ] XInterface.HudBase.DrawNametagsNative
	 void                      DrawHudSpectating ( class UCanvas* C );           		//  XInterface.HudBase.DrawHudSpectating
	 void                      DrawGMHudSpectating ( class UCanvas* C );         		//  XInterface.HudBase.DrawGMHudSpectating
	 class APlayerReplicationInfo* FindPRI ( class APawn* P );                       		//  XInterface.HudBase.FindPRI
	 class FColor              GetBaseTeamColor ( int viewerTeamIndex, int targetTeamIndex );		//  XInterface.HudBase.GetBaseTeamColor
	 struct FString            GetBaseTeamName ( int TeamIndex );                		//  XInterface.HudBase.GetBaseTeamName
	 void                      DrawWarfareCrosshairExtNative ( class UCanvas* C, int Spread );		// [ FUNC_Native ] XInterface.HudBase.DrawWarfareCrosshairExtNative
	 void                      CalculateCoordinateDigitEx ( class UCanvas* C, struct FDigitSet W, struct FNumericWidget N, float fWidth, float fHeight, int Index, struct FCalCoordsW* coordsW );		// [ FUNC_Native ] XInterface.HudBase.CalculateCoordinateDigitEx
	 void                      CalculateCoordinateDigit ( class UCanvas* C, struct FDigitSet W, struct FNumericWidget N, float fWidth, float fHeight, int Index, struct FCalCoordsW* coordsW );		// [ FUNC_Native ] XInterface.HudBase.CalculateCoordinateDigit
	 void                      CalculateCoordinateEx ( class UCanvas* C, struct FSpriteWidget W, float fWidth, float fHeight, struct FCalCoordsW* coordsW );		// [ FUNC_Native ] XInterface.HudBase.CalculateCoordinateEx
	 void                      CalculateCoordinate ( class UCanvas* C, struct FSpriteWidget W, float fWidth, float fHeight, struct FCalCoordsW* coordsW );		// [ FUNC_Native ] XInterface.HudBase.CalculateCoordinate
	 void                      DrawTileFromSpriteWidget2 ( class UCanvas* C, struct FSpriteWidget SW, float W, float H );		// [ FUNC_Native ] XInterface.HudBase.DrawTileFromSpriteWidget2
	 void                      DrawTileFromSpriteWidget ( class UCanvas* C, struct FSpriteWidget SW );		// [ FUNC_Native ] XInterface.HudBase.DrawTileFromSpriteWidget
	 void                      ClipScreenCoords ( class UCanvas* C, float XL, float YL, float* X, float* Y );		//  XInterface.HudBase.ClipScreenCoords
	 bool                      IsTargetInFrontOfPlayer2 ( class UCanvas* C, struct FVector TargetPos, struct FVector camLoc, struct FRotator camRot, struct FVector* ScreenPos );		//  XInterface.HudBase.IsTargetInFrontOfPlayer2
	 bool                      IsTargetInFrontOfPlayer ( class UCanvas* C, class AActor* Target, struct FVector camLoc, struct FRotator camRot, struct FVector* ScreenPos );		//  XInterface.HudBase.IsTargetInFrontOfPlayer
	 void                      DrawIntroSubtitles ( class UCanvas* C );          		// [ FUNC_Simulated ] XInterface.HudBase.DrawIntroSubtitles
	 void                      DrawCinematicHUD ( class UCanvas* C );            		// [ FUNC_Simulated ] XInterface.HudBase.DrawCinematicHUD
	 void                      DrawVehicleName ( class UCanvas* C );             		//  XInterface.HudBase.DrawVehicleName
	 void                      DrawWeaponName ( class UCanvas* C );              		// [ FUNC_Simulated ] XInterface.HudBase.DrawWeaponName
	 class UFont*              LoadInstructionFont (  );                         		// [ FUNC_Simulated ] XInterface.HudBase.LoadInstructionFont
	 void                      SetInstructionKeyText ( struct FString Text );    		// [ FUNC_Simulated ] XInterface.HudBase.SetInstructionKeyText
	 void                      SetInstructionText ( struct FString Text );       		// [ FUNC_Simulated ] XInterface.HudBase.SetInstructionText
	 void                      DrawInstructionKeyText ( class UCanvas* C );      		// [ FUNC_Simulated ] XInterface.HudBase.DrawInstructionKeyText
	 void                      DrawInstructionText ( class UCanvas* C );         		// [ FUNC_Simulated ] XInterface.HudBase.DrawInstructionText
	 void                      DrawInstructionGfx ( class UCanvas* C );          		// [ FUNC_Simulated ] XInterface.HudBase.DrawInstructionGfx
	 void                      SetCropping ( bool Active );                      		// [ FUNC_Simulated ] XInterface.HudBase.SetCropping
	 void                      DrawTargeting ( class UCanvas* C );               		// [ FUNC_Simulated ] XInterface.HudBase.DrawTargeting
	 void                      SetTargeting ( bool bShow, struct FVector TargetLocation, float Size );		// [ FUNC_Simulated ] XInterface.HudBase.SetTargeting
	 void                      Draw2DLocationDot ( class UCanvas* C, struct FVector loc, float OffsetX, float OffsetY, float ScaleX, float ScaleY );		//  XInterface.HudBase.Draw2DLocationDot
	 void                      CreateKeyMenus (  );                              		// [ FUNC_Simulated ] XInterface.HudBase.CreateKeyMenus
	 void                      DisplayLocalMessages ( class UCanvas* C );        		// [ FUNC_Simulated ] XInterface.HudBase.DisplayLocalMessages
	 void                      DrawMessageWithTexture ( class UCanvas* C, int i, float PosX, float PosY, float* dx, float* dy );		// [ FUNC_Simulated ] XInterface.HudBase.DrawMessageWithTexture
	 void                      DrawMessage ( class UCanvas* C, int i, float PosX, float PosY, float* dx, float* dy );		// [ FUNC_Simulated ] XInterface.HudBase.DrawMessage
	 void                      GetScreenCoords ( float PosX, float PosY, class UCanvas* C, float* ScreenX, float* ScreenY, struct FHudLocalizedMessage* Message );		// [ FUNC_Simulated ] XInterface.HudBase.GetScreenCoords
	 void                      LayoutMessage ( class UCanvas* C, struct FHudLocalizedMessage* Message );		// [ FUNC_Simulated ] XInterface.HudBase.LayoutMessage
	 void                      GetLocalStatsScreen (  );                         		//  XInterface.HudBase.GetLocalStatsScreen
	 class FColor              GetTeamColor ( unsigned char TeamNum );           		//  XInterface.HudBase.GetTeamColor
	 void                      LocalizedMessage2 ( class UClass* Message, int Switch, struct FString CriticalString );		// [ FUNC_Simulated ] XInterface.HudBase.LocalizedMessage2
	 void                      LocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, struct FString CriticalString );		// [ FUNC_Simulated ] XInterface.HudBase.LocalizedMessage
	 void                      Message ( class APlayerReplicationInfo* PRI, struct FString Msg, struct FName MsgType );		// [ FUNC_Simulated ] XInterface.HudBase.Message
	 void                      ClearMessage ( struct FHudLocalizedMessage* M );  		// [ FUNC_Simulated ] XInterface.HudBase.ClearMessage
	 void                      AddChildHudPart ( class AHudBase* Child );        		// [ FUNC_Simulated ] XInterface.HudBase.AddChildHudPart
	 void                      DrawDigitSet ( class UCanvas* C, float X, float Y, float OffsetX, float XL, float YL, int Value, struct FDigitSet dSet, int totalDigits, struct FString paddingChar );		// [ FUNC_Simulated ] XInterface.HudBase.DrawDigitSet
	 void                      DrawCSReviw ( class UCanvas* C );                 		// [ FUNC_Simulated ] XInterface.HudBase.DrawCSReviw
//	 void                      DrawNumericWidget ( class UCanvas* C, struct FNumericWidget* W, struct FDigitSet* D );		// [ FUNC_Simulated | FUNC_Native ] XInterface.HudBase.DrawNumericWidget
//	 void                      DrawSpriteWidget ( class UCanvas* C, struct FSpriteWidget* W );		// [ FUNC_Simulated | FUNC_Native ] XInterface.HudBase.DrawSpriteWidget
	 void                      DrawHUD ( class UCanvas* C );                     		// [ FUNC_Simulated ] XInterface.HudBase.DrawHUD
	 void                      UpdateScreenRatios ( class UCanvas* C );          		//  XInterface.HudBase.UpdateScreenRatios
	 void                      DrawAttacked ( class UCanvas* C );                		//  XInterface.HudBase.DrawAttacked
	 void                      DrawHeadShotSphere (  );                          		// [ FUNC_Simulated ] XInterface.HudBase.DrawHeadShotSphere
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] XInterface.HudBase.Tick
	 void                      PlayPainSound ( class UCanvas* C );               		//  XInterface.HudBase.PlayPainSound
	 void                      DrawDamageIndicators ( class UCanvas* C );        		//  XInterface.HudBase.DrawDamageIndicators
	 void                      DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType );		//  XInterface.HudBase.DisplayHit
	 void                      DrawMiniMap ( class AwHudPart_MinimapBase* Minimap, class UCanvas* C );		//  XInterface.HudBase.DrawMiniMap
	 void                      SetCustomHUDColor (  );                           		//  XInterface.HudBase.SetCustomHUDColor
	 bool                      CustomHUDColorAllowed (  );                       		//  XInterface.HudBase.CustomHUDColorAllowed
	 void                      PostBeginPlay (  );                               		//  XInterface.HudBase.PostBeginPlay
	 void                      PrecacheFonts ( class UCanvas* C );               		// [ FUNC_Simulated ] XInterface.HudBase.PrecacheFonts
	 void                      DrawHudPassD ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudBase.DrawHudPassD
	 void                      DrawHudPassC ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudBase.DrawHudPassC
	 void                      DrawHudPassB ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudBase.DrawHudPassB
	 void                      DrawHudPassA ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudBase.DrawHudPassA
	 void                      UpdateHUD (  );                                   		// [ FUNC_Simulated ] XInterface.HudBase.UpdateHUD
	 void                      DoUpdateTime (  );                                		//  XInterface.HudBase.DoUpdateTime

	// Public Imports
	AHudBase(class AHudBase const &);
	AHudBase(void);
	class AHudBase &  operator=(class AHudBase const &);
	class FVector  CalcNametagPosNativeImp(class APawn *);
	void  CalcPivotCoords(enum EDrawPivot,float &,float &,float,float);
	void  DrawNameTagNativeImp(class UCanvas *,class APawn *);
	void  DrawNumericWidget(class UCanvas *,struct FNumericWidget *,struct FDigitSet *);
	void  DrawSpriteWidget(class UCanvas *,struct FSpriteWidget *);
	void  DrawTileFromSpriteWidget2(class UCanvas *,struct FSpriteWidget const &,float,float);
	void  DrawTileFromSpriteWidget(class UCanvas *,struct FSpriteWidget const &);
	class FColor  GetNametagColorNativeImp(class APlayerReplicationInfo *);
	static void  InternalConstructor(void *);
	bool  IsTargetInFrontOfPlayer2NativeImp(class UCanvas *,class FVector,class FVector *,class FVector,class FRotator);
	int  MemoryIsZero(void const *,unsigned int);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x05D0

// Class XInterface.wHudPart_KillMessage
class DLL_IMPORT AwHudPart_KillMessage : public AHudBase
{
public:
	class AHudBase*                                    HudOwner;                                         		// 0x0C84 ( 0x0004 ) 
	class ALevelInfo*                                  LevelOwner;                                       		// 0x0C88 ( 0x0004 ) 
	class TArray< struct FKillMessageItem >            KillMessages;                                     		// 0x0C8C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UMaterial*                                   RelatedBG;                                        		// 0x0C98 ( 0x0004 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponAirStrike;                            		// 0x0C9C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponAR;                                   		// 0x0CDC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponFlameThrower;                         		// 0x0D1C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponGR;                                   		// 0x0D5C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponHeadshot;                             		// 0x0D9C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponMG;                                   		// 0x0DDC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponPistol;                               		// 0x0E1C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponRPG;                                  		// 0x0E5C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponSMG;                                  		// 0x0E9C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponSR;                                   		// 0x0EDC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponMelee;                                		// 0x0F1C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponHelicopter;                           		// 0x0F5C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponUnknown;                              		// 0x0F9C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponHelicopterKill;                       		// 0x0FDC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponFell;                                 		// 0x101C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteWeaponStepOn;                               		// 0x105C ( 0x0040 ) [ CPF_Edit ]
	int                                                CacheClipX;                                       		// 0x109C ( 0x0004 ) 
	int                                                CacheClipY;                                       		// 0x10A0 ( 0x0004 ) 
	float                                              MessageDuration;                                  		// 0x10A4 ( 0x0004 ) 
	int                                                MaxMessages;                                      		// 0x10A8 ( 0x0004 ) 
	int                                                FontSize;                                         		// 0x10AC ( 0x0004 ) 
	float                                              KillMessageWordSpacing;                           		// 0x10B0 ( 0x0004 ) 
	float                                              KillMessageLineSpacing;                           		// 0x10B4 ( 0x0004 ) 
	float                                              MarginXFromRight;                                 		// 0x10B8 ( 0x0004 ) 
	float                                              MarginYFromTop;                                   		// 0x10BC ( 0x0004 ) 
	int                                                ShadowX;                                          		// 0x10C0 ( 0x0004 ) 
	int                                                ShadowY;                                          		// 0x10C4 ( 0x0004 ) 
	class FColor                                       ShadowColor;                                      		// 0x10C8 ( 0x0004 ) 
	struct FIntBoxWH                                   Icon_KillSuccession[ 0x0F ];                      		// 0x10CC ( 0x00F0 ) 
	struct FIntBoxWH                                   Icon_HeadShot;                                    		// 0x11BC ( 0x0010 ) 
	struct FIntBoxWH                                   Icon_AimShot;                                     		// 0x11CC ( 0x0010 ) 
	class UMaterial*                                   Icon_OptionalKillInfo;                            		// 0x11DC ( 0x0004 ) 

	// UScript Functions
	 void                      Draw ( class UCanvas* C );                        		//  XInterface.wHudPart_KillMessage.Draw
	 void                      DrawOnlyImage ( class UCanvas* C );               		//  XInterface.wHudPart_KillMessage.DrawOnlyImage
	 void                      DrawOnlyText ( class UCanvas* C );                		//  XInterface.wHudPart_KillMessage.DrawOnlyText
	 void                      UpdateCache ( class UCanvas* C );                 		//  XInterface.wHudPart_KillMessage.UpdateCache
	 void                      End ( class UCanvas* C );                         		//  XInterface.wHudPart_KillMessage.End
	 void                      Begin ( class UCanvas* C );                       		//  XInterface.wHudPart_KillMessage.Begin
	 void                      DrawNative ( class UCanvas* C );                  		// [ FUNC_Native ] XInterface.wHudPart_KillMessage.DrawNative
	 void                      Update (  );                                      		//  XInterface.wHudPart_KillMessage.Update
	 void                      AddKillMessageItem ( struct FKillMessageItem Item );		//  XInterface.wHudPart_KillMessage.AddKillMessageItem
	 void                      AddKillMessage ( class APlayerReplicationInfo* KillerPRI, class APlayerReplicationInfo* victimPRI, class UClass* DamageType, int Switch );		//  XInterface.wHudPart_KillMessage.AddKillMessage
	 class FColor              GetNameColor ( class APlayerReplicationInfo* PRI );		//  XInterface.wHudPart_KillMessage.GetNameColor
	 struct FKillMessageItem   MakeKillMessageItem ( class APlayerReplicationInfo* KillerPRI, class APlayerReplicationInfo* victimPRI, struct FString KillerName, struct FString VictimName, class UClass* DamageType, int Switch, bool NoKillerName, bool NoVictimName, class UMaterial* overrideImage );		//  XInterface.wHudPart_KillMessage.MakeKillMessageItem
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* myLevel );		//  XInterface.wHudPart_KillMessage.Initialize
	 void                      Precache (  );                                    		//  XInterface.wHudPart_KillMessage.Precache

	// Public Imports
	AwHudPart_KillMessage(class AwHudPart_KillMessage const &);
	AwHudPart_KillMessage(void);
	class AwHudPart_KillMessage &  operator=(class AwHudPart_KillMessage const &);
	void  DrawNativeImp(class UCanvas *);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x055C

// Class XInterface.GUIListBoxBase
class DLL_IMPORT UGUIListBoxBase : public UGUIMultiComponent
{
public:
	struct FString                                     SelectedStyleName;                                		// 0x0300 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     SectionStyleName;                                 		// 0x030C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     OutlineStyleName;                                 		// 0x0318 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     DefaultListClass;                                 		// 0x0324 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UGUIScrollBarBase*                           MyScrollBar;                                      		// 0x0330 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UGUIListBase*                                MyList;                                           		// 0x0334 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bVisibleWhenEmpty:1;                              		// 0x0338 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bSorted:1;                                        		// 0x0338 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bInitializeList:1;                                		// 0x0338 ( 0x0004 )  [0x00000004][ CPF_Edit ]

	// UScript Functions
	 void                      SetFriendlyLabel ( class UGUILabel* NewLabel );   		//  XInterface.GUIListBoxBase.SetFriendlyLabel
	 void                      SetScrollBarStyle ( bool changeScrollZoneStyle, class UGUIStyles* scrollZoneStyle, bool changeIncreaseButtonStyle, class UGUIStyles* increaseButtonStyle, bool changeIncreaseButtonGraphic, class UMaterial* increaseButtonGraphic, bool changeDecreaseButtonStyle, class UGUIStyles* decreaseButtonStyle, bool changeDecreaseButtonGraphic, class UMaterial* decreaseButtonGraphic, bool changeGripButtonStyle, class UGUIStyles* gripButtonStyle );		//  XInterface.GUIListBoxBase.SetScrollBarStyle
	 void                      InternalOnCreateComponent ( class UGUIComponent* NewComp, class UGUIComponent* Sender );		//  XInterface.GUIListBoxBase.InternalOnCreateComponent
	 void                      SetHint ( struct FString NewHint );               		//  XInterface.GUIListBoxBase.SetHint
	 void                      InitBaseList ( class UGUIListBase* LocalList );   		//  XInterface.GUIListBoxBase.InitBaseList
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIListBoxBase.InitComponent

	// Public Imports
	UGUIListBoxBase(class UGUIListBoxBase const &);
	UGUIListBoxBase(void);
	class UGUIListBoxBase &  operator=(class UGUIListBoxBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class XInterface.GUIListBox
class DLL_IMPORT UGUIListBox : public UGUIListBoxBase
{
public:
	class UGUIList*                                    List;                                             		// 0x033C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      MyClose ( class UGUIContextMenu* Sender );        		//  XInterface.GUIListBox.MyClose
	 bool                      MyOpen ( class UGUIContextMenu* Menu );           		//  XInterface.GUIListBox.MyOpen
	 int                       ItemCount (  );                                   		//  XInterface.GUIListBox.ItemCount
	 void                      InternalOnChange ( class UGUIComponent* Sender ); 		//  XInterface.GUIListBox.InternalOnChange
	 bool                      InternalOnDblClick ( class UGUIComponent* Sender );		//  XInterface.GUIListBox.InternalOnDblClick
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIListBox.InternalOnClick
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIListBox.InitComponent
	 void                      InitBaseList ( class UGUIListBase* LocalList );   		//  XInterface.GUIListBox.InitBaseList

	// Public Imports
	UGUIListBox(class UGUIListBox const &);
	class UGUIListBox &  operator=(class UGUIListBox const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class XInterface.GUIScrollTextBox
class DLL_IMPORT UGUIScrollTextBox : public UGUIListBoxBase
{
public:
	class UGUIScrollText*                              MyScrollText;                                     		// 0x033C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bRepeat:1;                                        		// 0x0340 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bNoTeletype:1;                                    		// 0x0340 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bStripColors:1;                                   		// 0x0340 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	float                                              InitialDelay;                                     		// 0x0344 ( 0x0004 ) [ CPF_Edit ]
	float                                              CharDelay;                                        		// 0x0348 ( 0x0004 ) [ CPF_Edit ]
	float                                              EOLDelay;                                         		// 0x034C ( 0x0004 ) [ CPF_Edit ]
	float                                              RepeatDelay;                                      		// 0x0350 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      TextAlign;                                        		// 0x0354 ( 0x0001 ) [ CPF_Edit ]
	struct FString                                     Separator;                                        		// 0x0358 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ESC;                                              		// 0x0364 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Comma;                                            		// 0x0370 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      AddText ( struct FString NewText );               		//  XInterface.GUIScrollTextBox.AddText
	 struct FString            StripColors ( struct FString MyString );          		//  XInterface.GUIScrollTextBox.StripColors
	 bool                      IsNumber ( struct FString Num );                  		//  XInterface.GUIScrollTextBox.IsNumber
	 void                      InternalOnAdjustTop ( class UGUIComponent* Sender );		//  XInterface.GUIScrollTextBox.InternalOnAdjustTop
	 void                      Stop (  );                                        		//  XInterface.GUIScrollTextBox.Stop
	 void                      Restart (  );                                     		//  XInterface.GUIScrollTextBox.Restart
	 void                      SetContent ( struct FString NewContent, struct FString sep );		//  XInterface.GUIScrollTextBox.SetContent
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIScrollTextBox.InitComponent
	 void                      InitBaseList ( class UGUIListBase* LocalList );   		//  XInterface.GUIScrollTextBox.InitBaseList
	 void                      InternalOnCreateComponent ( class UGUIComponent* NewComp, class UGUIComponent* Sender );		//  XInterface.GUIScrollTextBox.InternalOnCreateComponent
	 void                      eventCreated (  );                                		// [ FUNC_Event ] XInterface.GUIScrollTextBox.Created

	// Public Imports
	UGUIScrollTextBox(class UGUIScrollTextBox const &);
	class UGUIScrollTextBox &  operator=(class UGUIScrollTextBox const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class XInterface.GUIMultiColumnListBox
class DLL_IMPORT UGUIMultiColumnListBox : public UGUIListBoxBase
{
public:
	class UGUIMultiColumnListHeader*                   Header;                                           		// 0x033C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	unsigned long                                      bDisplayHeader:1;                                 		// 0x0340 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class UGUIMultiColumnList*                         List;                                             		// 0x0344 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< float >                              HeaderColumnPerc;                                 		// 0x0348 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FString >                     ColumnHeadings;                                   		// 0x0354 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	int                                                OffsetBetweenHeaderAndList;                       		// 0x0360 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bFullHeightStyle:1;                               		// 0x0364 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// UScript Functions
	 void                      SetHeaderStyle ( bool changeStyle, struct FString stylez, bool changeBarStyle, struct FString barStylez );		//  XInterface.GUIMultiColumnListBox.SetHeaderStyle
	 void                      InternalOnColumnSized ( int Column );             		//  XInterface.GUIMultiColumnListBox.InternalOnColumnSized
	 void                      InternalOnCreateComponent ( class UGUIComponent* NewComp, class UGUIComponent* Sender );		//  XInterface.GUIMultiColumnListBox.InternalOnCreateComponent
	 void                      InternalOnLoadINI ( class UGUIComponent* Sender, struct FString S );		//  XInterface.GUIMultiColumnListBox.InternalOnLoadINI
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIMultiColumnListBox.InitComponent
	 void                      InitBaseList ( class UGUIListBase* LocalList );   		//  XInterface.GUIMultiColumnListBox.InitBaseList

	// Public Imports
	UGUIMultiColumnListBox(class UGUIMultiColumnListBox const &);
	UGUIMultiColumnListBox(void);
	class UGUIMultiColumnListBox &  operator=(class UGUIMultiColumnListBox const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class XInterface.GUITreeListBox
class DLL_IMPORT UGUITreeListBox : public UGUIListBoxBase
{
public:
	unsigned char                                      _0x033C[ 0x04 ];                                  		// 0x033C ( 0x0004 )

	// Public Imports
	UGUITreeListBox(class UGUITreeListBox const &);
	UGUITreeListBox(void);
	class UGUITreeListBox &  operator=(class UGUITreeListBox const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class XInterface.GUIListBase
class DLL_IMPORT UGUIListBase : public UGUIComponent
{
public:
	unsigned long                                      bSorted:1;                                        		// 0x02BC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bHotTrack:1;                                      		// 0x02BC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bHotTrackSound:1;                                 		// 0x02BC ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bHotTrackStrictMode:1;                            		// 0x02BC ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bHotTrackOnInactive:1;                            		// 0x02BC ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bDrawSelectionBorder:1;                           		// 0x02BC ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bVisibleWhenEmpty:1;                              		// 0x02BC ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bNotify:1;                                        		// 0x02BC ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bInitializeList:1;                                		// 0x02BC ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bMultiSelect:1;                                   		// 0x02BC ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bAllowEmptyItems:1;                               		// 0x02BC ( 0x0004 )  [0x00000400][ CPF_Edit ]
	class UGUIScrollBarBase*                           MyScrollBar;                                      		// 0x02C0 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	unsigned long                                      bAlwaysShowScrollbar:1;                           		// 0x02C4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bForceScrollBarPosition:1;                        		// 0x02C4 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	float                                              ForcedScrollbarWinLeft;                           		// 0x02C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              ForcedScrollbarWinTop;                            		// 0x02CC ( 0x0004 ) [ CPF_Edit ]
	float                                              ForcedScrollbarWinWidth;                          		// 0x02D0 ( 0x0004 ) [ CPF_Edit ]
	float                                              ForcedScrollbarWinHeight;                         		// 0x02D4 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     SelectedStyleName;                                		// 0x02D8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     SectionStyleName;                                 		// 0x02E4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     OutlineStyleName;                                 		// 0x02F0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UGUIStyles*                                  SelectedStyle;                                    		// 0x02FC ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUIStyles*                                  SectionStyle;                                     		// 0x0300 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUIStyles*                                  OutlineStyle;                                     		// 0x0304 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	unsigned char                                      SectionJustification;                             		// 0x0308 ( 0x0001 ) [ CPF_Edit ]
	class UMaterial*                                   SelectedImage;                                    		// 0x030C ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       SelectedBKColor;                                  		// 0x0310 ( 0x0004 ) [ CPF_Edit ]
	int                                                Top;                                              		// 0x0314 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	int                                                Index;                                            		// 0x0318 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	int                                                ItemsPerPage;                                     		// 0x031C ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NoExport ]
	float                                              ItemHeight;                                       		// 0x0320 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	float                                              ItemWidth;                                        		// 0x0324 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	int                                                ItemCount;                                        		// 0x0328 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	class TArray< int >                                SelectedItems;                                    		// 0x032C ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport ]
	int                                                LastSelected;                                     		// 0x0338 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	int                                                LastPressX;                                       		// 0x033C ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	int                                                LastPressY;                                       		// 0x0340 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	int                                                DropIndex;                                        		// 0x0344 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	int                                                MightRemove;                                      		// 0x0348 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	class TArray< class UGUIComponent* >               LinkedObjects;                                    		// 0x034C ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_NeedCtorLink | CPF_NoExport ]
	unsigned long                                      bMousePress:1;                                    		// 0x0358 ( 0x0004 )  [0x00000001]
	unsigned long                                      bMouseRelease:1;                                  		// 0x0358 ( 0x0004 )  [0x00000002]
	struct FScriptDelegate                             __OnScrollBy__Delegate;                           		// 0x035C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDrawItem__Delegate;                           		// 0x0364 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnAdjustTop__Delegate;                          		// 0x036C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnTrack__Delegate;                              		// 0x0374 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __CheckLinkedObjects__Delegate;                   		// 0x037C ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SetOutlineAlpha ( int NewAlpha );                 		//  XInterface.GUIListBase.SetOutlineAlpha
	 bool                      eventIsMultiSelect (  );                          		// [ FUNC_Event ] XInterface.GUIListBase.IsMultiSelect
	 void                      InternalOnDragLeave ( class UGUIComponent* Sender );		//  XInterface.GUIListBase.InternalOnDragLeave
	 void                      InternalOnDragEnter ( class UGUIComponent* Sender );		//  XInterface.GUIListBase.InternalOnDragEnter
	 void                      InternalOnDragOver ( class UGUIComponent* Sender );		//  XInterface.GUIListBase.InternalOnDragOver
	 bool                      InternalOnDragDrop ( class UGUIComponent* Sender );		//  XInterface.GUIListBase.InternalOnDragDrop
	 void                      InternalOnEndDrag ( class UGUIComponent* Accepting, bool bAccepted );		//  XInterface.GUIListBase.InternalOnEndDrag
	 bool                      InternalOnRightClick ( class UGUIComponent* Sender );		//  XInterface.GUIListBase.InternalOnRightClick
	 void                      CheckDragSelect (  );                             		//  XInterface.GUIListBase.CheckDragSelect
	 bool                      InternalOnBeginDrag ( class UGUIComponent* Sender );		//  XInterface.GUIListBase.InternalOnBeginDrag
	 void                      InternalOnMouseRelease ( class UGUIComponent* Sender );		//  XInterface.GUIListBase.InternalOnMouseRelease
	 void                      InternalOnMousePressed ( class UGUIComponent* Sender, bool IsRepeat );		//  XInterface.GUIListBase.InternalOnMousePressed
	 void                      End (  );                                         		//  XInterface.GUIListBase.End
	 void                      home (  );                                        		//  XInterface.GUIListBase.home
	 void                      PgDn (  );                                        		//  XInterface.GUIListBase.PgDn
	 void                      PgUp (  );                                        		//  XInterface.GUIListBase.PgUp
	 void                      WheelDown (  );                                   		//  XInterface.GUIListBase.WheelDown
	 void                      WheelUp (  );                                     		//  XInterface.GUIListBase.WheelUp
	 bool                      MoveLeft (  );                                    		//  XInterface.GUIListBase.MoveLeft
	 bool                      MoveRight (  );                                   		//  XInterface.GUIListBase.MoveRight
	 bool                      Down (  );                                        		//  XInterface.GUIListBase.Down
	 bool                      Up (  );                                          		//  XInterface.GUIListBase.Up
	 bool                      InternalOnKeyEvent ( float Delta, unsigned char* key, unsigned char* KeyState );		//  XInterface.GUIListBase.InternalOnKeyEvent
	 class TArray< struct FString > GetPendingItems ( bool bGuarantee );              		//  XInterface.GUIListBase.GetPendingItems
	 struct FString            GetItemAtIndex ( int idx );                       		//  XInterface.GUIListBase.GetItemAtIndex
	 struct FString            eventAdditionalDebugString (  );                  		// [ FUNC_Event ] XInterface.GUIListBase.AdditionalDebugString
	 bool                      IsValidIndex ( int i );                           		//  XInterface.GUIListBase.IsValidIndex
	 bool                      IsValid (  );                                     		//  XInterface.GUIListBase.IsValid
	 void                      DisableLinkedObjects (  );                        		//  XInterface.GUIListBase.DisableLinkedObjects
	 void                      EnableLinkedObjects (  );                         		//  XInterface.GUIListBase.EnableLinkedObjects
	 void                      InitLinkObjects ( class TArray< class UGUIComponent* > NewObj, bool bNoCheck );		//  XInterface.GUIListBase.InitLinkObjects
	 int                       AddLinkObject ( class UGUIComponent* NewObj, bool bNoCheck );		//  XInterface.GUIListBase.AddLinkObject
	 void                      SetTopItem ( int Item );                          		//  XInterface.GUIListBase.SetTopItem
	 void                      MakeVisible ( float perc );                       		//  XInterface.GUIListBase.MakeVisible
	 void                      Clear (  );                                       		//  XInterface.GUIListBase.Clear
	 void                      ClearPendingElements (  );                        		//  XInterface.GUIListBase.ClearPendingElements
	 void                      IndexChanged ( class UGUIComponent* Sender );     		//  XInterface.GUIListBase.IndexChanged
	 int                       SetIndex ( int NewIndex );                        		//  XInterface.GUIListBase.SetIndex
	 int                       eventMultiCalculateIndex ( bool bRequireValidIndex );		// [ FUNC_Event ] XInterface.GUIListBase.MultiCalculateIndex
	 int                       eventCalculateIndex ( bool bRequireValidIndex );  		// [ FUNC_Event ] XInterface.GUIListBase.CalculateIndex
	 int                       SilentSetIndex ( int NewIndex );                  		//  XInterface.GUIListBase.SilentSetIndex
	 void                      Sort (  );                                        		//  XInterface.GUIListBase.Sort
	 void                      eventUpdateScrollbarForcedPosition (  );          		// [ FUNC_Event ] XInterface.GUIListBase.UpdateScrollbarForcedPosition
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIListBase.InitComponent
	 void                      CheckLinkedObjects ( class UGUIListBase* List );  		//  XInterface.GUIListBase.CheckLinkedObjects
	 void                      OnTrack ( class UGUIComponent* Sender, int LastIndex );		//  XInterface.GUIListBase.OnTrack
	 void                      OnAdjustTop ( class UGUIComponent* Sender );      		//  XInterface.GUIListBase.OnAdjustTop
	 void                      OnDrawItem ( class UCanvas* Canvas, int Item, float X, float Y, float W, float HT, bool bSelected, bool bPending );		//  XInterface.GUIListBase.OnDrawItem
	 void                      OnScrollBy ( class UGUIComponent* Sender );       		//  XInterface.GUIListBase.OnScrollBy

	// Public Imports
	UGUIListBase(class UGUIListBase const &);
	UGUIListBase(void);
	class UGUIListBase &  operator=(class UGUIListBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateCheckLinkedObjects(class UGUIListBase *);
	void  delegateOnAdjustTop(class UGUIComponent *);
	void  delegateOnDrawItem(class UCanvas *,int,float,float,float,float,unsigned long,unsigned long);
	void  delegateOnScrollBy(class UGUIComponent *);
	void  delegateOnTrack(class UGUIComponent *,int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00C8

// Class XInterface.GUIVertList
class DLL_IMPORT UGUIVertList : public UGUIListBase
{
public:
	unsigned long                                      CallDrawItemForPlaceHoldingItems:1;               		// 0x0384 ( 0x0004 )  [0x00000001]
	struct FScriptDelegate                             __GetItemHeight__Delegate;                        		// 0x0388 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      PgDn (  );                                        		//  XInterface.GUIVertList.PgDn
	 void                      PgUp (  );                                        		//  XInterface.GUIVertList.PgUp
	 void                      End (  );                                         		//  XInterface.GUIVertList.End
	 void                      home (  );                                        		//  XInterface.GUIVertList.home
	 bool                      Down (  );                                        		//  XInterface.GUIVertList.Down
	 bool                      Up (  );                                          		//  XInterface.GUIVertList.Up
	 void                      WheelDown (  );                                   		//  XInterface.GUIVertList.WheelDown
	 void                      WheelUp (  );                                     		//  XInterface.GUIVertList.WheelUp
	 bool                      InternalOnKeyType ( struct FString Unicode, unsigned char* key );		//  XInterface.GUIVertList.InternalOnKeyType
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIVertList.InternalOnClick
	 int                       eventMultiCalculateIndex ( bool bRequireValidIndex );		// [ FUNC_Event ] XInterface.GUIVertList.MultiCalculateIndex
	 int                       eventCalculateIndex ( bool bRequireValidIndex );  		// [ FUNC_Event ] XInterface.GUIVertList.CalculateIndex
	 void                      CenterMouse (  );                                 		//  XInterface.GUIVertList.CenterMouse
	 float                     GetItemHeight ( class UCanvas* C );               		//  XInterface.GUIVertList.GetItemHeight

	// Public Imports
	UGUIVertList(class UGUIVertList const &);
	UGUIVertList(void);
	class UGUIVertList &  operator=(class UGUIVertList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	float  delegateGetItemHeight(class UCanvas *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class XInterface.GUIList
class DLL_IMPORT UGUIList : public UGUIVertList
{
public:
	unsigned char                                      TextAlign;                                        		// 0x0390 ( 0x0001 ) [ CPF_Edit ]
	class TArray< struct FGUIListElem >                Elements;                                         		// 0x0394 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink ]
	class TArray< struct FGUIListElem >                SelectedElements;                                 		// 0x03A0 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink ]
	class FColor                                       OfficialColor;                                    		// 0x03AC ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       Official2004Color;                                		// 0x03B0 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       BonusPackColor;                                   		// 0x03B4 ( 0x0004 ) [ CPF_Edit ]
	struct FScriptDelegate                             __CompareItem__Delegate;                          		// 0x03B8 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 class TArray< struct FGUIListElem > GetPendingElements ( bool bGuarantee );           		//  XInterface.GUIList.GetPendingElements
	 void                      ClearPendingElements (  );                        		//  XInterface.GUIList.ClearPendingElements
	 bool                      InternalOnDragDrop ( class UGUIComponent* Sender );		//  XInterface.GUIList.InternalOnDragDrop
	 void                      InternalOnEndDrag ( class UGUIComponent* Accepting, bool bAccepted );		//  XInterface.GUIList.InternalOnEndDrag
	 int                       FindIndex ( struct FString Test, bool bExact, bool bExtra, class UObject* TestObject );		//  XInterface.GUIList.FindIndex
	 int                       FindItemObject ( class UObject* obj );            		//  XInterface.GUIList.FindItemObject
	 int                       FindExtra ( struct FString Text, bool bExact );   		//  XInterface.GUIList.FindExtra
	 struct FString            Find ( struct FString Text, bool bExact, bool bExtra );		//  XInterface.GUIList.Find
	 void                      RemoveExtra ( struct FString str );               		//  XInterface.GUIList.RemoveExtra
	 void                      RemoveObject ( class UObject* obj );              		//  XInterface.GUIList.RemoveObject
	 void                      RemoveItem ( struct FString Item );               		//  XInterface.GUIList.RemoveItem
	 void                      SetExtraAtIndex ( int i, struct FString NewExtra );		//  XInterface.GUIList.SetExtraAtIndex
	 void                      SetObjectAtIndex ( int i, class UObject* NewObject );		//  XInterface.GUIList.SetObjectAtIndex
	 void                      SetItemAtIndex ( int i, struct FString NewItem ); 		//  XInterface.GUIList.SetItemAtIndex
	 void                      GetAtIndex ( int i, struct FString* ItemStr, class UObject** ExtraObj, struct FString* ExtraStr );		//  XInterface.GUIList.GetAtIndex
	 struct FString            GetExtraAtIndex ( int i );                        		//  XInterface.GUIList.GetExtraAtIndex
	 class UObject*            GetObjectAtIndex ( int i );                       		//  XInterface.GUIList.GetObjectAtIndex
	 struct FString            GetItemAtIndex ( int i );                         		//  XInterface.GUIList.GetItemAtIndex
	 bool                      IsSection (  );                                   		//  XInterface.GUIList.IsSection
	 struct FString            GetExtra (  );                                    		//  XInterface.GUIList.GetExtra
	 class UObject*            GetObject (  );                                   		//  XInterface.GUIList.GetObject
	 struct FString            Get ( bool bGuarantee );                          		//  XInterface.GUIList.Get
	 struct FString            SelectedText (  );                                		//  XInterface.GUIList.SelectedText
	 void                      Clear (  );                                       		//  XInterface.GUIList.Clear
	 int                       RemoveElement ( struct FGUIListElem elem, int Count, bool bNoSort );		//  XInterface.GUIList.RemoveElement
	 int                       RemoveSilent ( int i, int Count );                		//  XInterface.GUIList.RemoveSilent
	 int                       Remove ( int i, int Count, bool bNoSort );        		//  XInterface.GUIList.Remove
	 void                      LoadFrom ( class UGUIList* Source, bool bClearFirst );		//  XInterface.GUIList.LoadFrom
	 void                      eventSwap ( int IndexA, int IndexB );             		// [ FUNC_Event ] XInterface.GUIList.Swap
	 void                      InsertElement ( int i, struct FGUIListElem NewElem, bool bNoSort );		//  XInterface.GUIList.InsertElement
	 void                      Insert ( int i, struct FString NewItem, class UObject* obj, struct FString str, bool bNoSort, bool bSection );		//  XInterface.GUIList.Insert
	 void                      Replace ( int i, struct FString NewItem, class UObject* obj, struct FString str, bool bNoSort );		//  XInterface.GUIList.Replace
	 void                      AddElement ( struct FGUIListElem NewElem );       		//  XInterface.GUIList.AddElement
	 void                      Add ( struct FString NewItem, class UObject* obj, struct FString str, bool bSection );		//  XInterface.GUIList.Add
	 int                       CompareItem ( struct FGUIListElem ElemA, struct FGUIListElem ElemB );		//  XInterface.GUIList.CompareItem
	 void                      Sort (  );                                        		//  XInterface.GUIList.Sort
	 void                      SortList (  );                                    		// [ FUNC_Final | FUNC_Native ] XInterface.GUIList.SortList

	// Public Imports
	UGUIList(class UGUIList const &);
	UGUIList(void);
	class UGUIList &  operator=(class UGUIList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	int  delegateCompareItem(struct FGUIListElem,struct FGUIListElem);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0030

// Class XInterface.GUIScrollText
class DLL_IMPORT UGUIScrollText : public UGUIList
{
public:
	int                                                MaxHistory;                                       		// 0x03C0 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	struct FString                                     NewText;                                          		// 0x03C4 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	struct FString                                     ClickedString;                                    		// 0x03D0 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	struct FString                                     Content;                                          		// 0x03DC ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	struct FString                                     Separator;                                        		// 0x03E8 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	int                                                VisibleLines;                                     		// 0x03F4 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                VisibleChars;                                     		// 0x03F8 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	float                                              oldWidth;                                         		// 0x03FC ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	unsigned char                                      ScrollState;                                      		// 0x0400 ( 0x0001 ) [ CPF_Edit | CPF_EditConst ]
	unsigned long                                      bNewContent:1;                                    		// 0x0404 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_EditConst ]
	unsigned long                                      bStopped:1;                                       		// 0x0404 ( 0x0004 )  [0x00000002][ CPF_Edit | CPF_EditConst ]
	unsigned long                                      bReceivedNewContent:1;                            		// 0x0404 ( 0x0004 )  [0x00000004][ CPF_Const | CPF_EditConst ]
	unsigned long                                      bRepeat:1;                                        		// 0x0404 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bNoTeletype:1;                                    		// 0x0404 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bClickText:1;                                     		// 0x0404 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	float                                              InitialDelay;                                     		// 0x0408 ( 0x0004 ) [ CPF_Edit ]
	float                                              CharDelay;                                        		// 0x040C ( 0x0004 ) [ CPF_Edit ]
	float                                              EOLDelay;                                         		// 0x0410 ( 0x0004 ) [ CPF_Edit ]
	float                                              RepeatDelay;                                      		// 0x0414 ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FString >                     StringElements;                                   		// 0x0418 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnEndOfLine__Delegate;                          		// 0x0424 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      IsValid (  );                                     		//  XInterface.GUIScrollText.IsValid
	 void                      EndScrolling (  );                                		//  XInterface.GUIScrollText.EndScrolling
	 bool                      InternalOnKeyEvent ( float Delta, unsigned char* key, unsigned char* State );		//  XInterface.GUIScrollText.InternalOnKeyEvent
	 bool                      InternalOnKeyType ( struct FString Unicode, unsigned char* key );		//  XInterface.GUIScrollText.InternalOnKeyType
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIScrollText.InternalOnClick
	 void                      eventTimer (  );                                  		// [ FUNC_Event ] XInterface.GUIScrollText.Timer
	 bool                      SkipChar (  );                                    		//  XInterface.GUIScrollText.SkipChar
	 void                      Restart (  );                                     		//  XInterface.GUIScrollText.Restart
	 void                      Stop (  );                                        		//  XInterface.GUIScrollText.Stop
	 void                      SetContent ( struct FString NewContent, struct FString sep );		//  XInterface.GUIScrollText.SetContent
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIScrollText.InitComponent
	 void                      Dump (  );                                        		//  XInterface.GUIScrollText.Dump
	 void                      OnEndOfLine (  );                                 		//  XInterface.GUIScrollText.OnEndOfLine
	 struct FString            GetWordUnderCursor (  );                          		// [ FUNC_Final | FUNC_Native ] XInterface.GUIScrollText.GetWordUnderCursor

	// Public Imports
	UGUIScrollText(class UGUIScrollText const &);
	UGUIScrollText(void);
	class UGUIScrollText &  operator=(class UGUIScrollText const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	int  WrapURL(class FString &)const ;
	void  delegateOnEndOfLine(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x006C

// Class XInterface.GUIMultiOptionList
class DLL_IMPORT UGUIMultiOptionList : public UGUIVertList
{
public:
	unsigned char                                      _0x0390[ 0x2C ];                                  		// 0x0390 ( 0x002C )

	// Public Imports
	UGUIMultiOptionList(class UGUIMultiOptionList const &);
	UGUIMultiOptionList(void);
	class UGUIMultiOptionList &  operator=(class UGUIMultiOptionList const &);
	int  CalculateIndex(int);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnCreateComponent(class UGUIMenuOption *,class UGUIMultiOptionList *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class XInterface.GUITreeList
class DLL_IMPORT UGUITreeList : public UGUIVertList
{
public:
	unsigned char                                      _0x0390[ 0x34 ];                                  		// 0x0390 ( 0x0034 )

	// Public Imports
	UGUITreeList(class UGUITreeList const &);
	UGUITreeList(void);
	class UGUITreeList &  operator=(class UGUITreeList const &);
	int  FindParentIndex(int)const ;
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  UpdateVisibleCount(void);
	int  delegateCompareItem(struct FGUITreeNode,struct FGUITreeNode);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0034

// Class XInterface.GUIHorzList
class DLL_IMPORT UGUIHorzList : public UGUIListBase
{
public:

	// Public Imports
	UGUIHorzList(class UGUIHorzList const &);
	UGUIHorzList(void);
	class UGUIHorzList &  operator=(class UGUIHorzList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class XInterface.GUICircularList
class DLL_IMPORT UGUICircularList : public UGUIListBase
{
public:
	unsigned char                                      _0x0384[ 0x0C ];                                  		// 0x0384 ( 0x000C )

	// Public Imports
	UGUICircularList(class UGUICircularList const &);
	UGUICircularList(void);
	class UGUICircularList &  operator=(class UGUICircularList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class XInterface.GUICharacterList
class DLL_IMPORT UGUICharacterList : public UGUICircularList
{
public:
	unsigned char                                      _0x0390[ 0x20 ];                                  		// 0x0390 ( 0x0020 )

	// Public Imports
	UGUICharacterList(class UGUICharacterList const &);
	UGUICharacterList(void);
	class UGUICharacterList &  operator=(class UGUICharacterList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class XInterface.GUIMultiColumnListHeader
class DLL_IMPORT UGUIMultiColumnListHeader : public UGUIComponent
{
public:
	class UGUIMultiColumnList*                         MyList;                                           		// 0x02BC ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                SizingCol;                                        		// 0x02C0 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_EditConst ]
	int                                                ClickingCol;                                      		// 0x02C4 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_EditConst ]
	unsigned long                                      UseManualHeight:1;                                		// 0x02C8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              ManualHeight;                                     		// 0x02CC ( 0x0004 ) [ CPF_Edit ]
	class UGUIStyles*                                  BarStyle;                                         		// 0x02D0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     BarStyleName;                                     		// 0x02D4 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIMultiColumnListHeader.InitComponent

	// Public Imports
	UGUIMultiColumnListHeader(class UGUIMultiColumnListHeader const &);
	UGUIMultiColumnListHeader(void);
	class UGUIMultiColumnListHeader &  operator=(class UGUIMultiColumnListHeader const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class XInterface.MultiSelectList
class DLL_IMPORT UMultiSelectList : public UGUIList
{
public:
	unsigned char                                      _0x03C0[ 0x0C ];                                  		// 0x03C0 ( 0x000C )

	// Public Imports
	UMultiSelectList(class UMultiSelectList const &);
	UMultiSelectList(void);
	class UMultiSelectList &  operator=(class UMultiSelectList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class XInterface.GUICircularImageList
class DLL_IMPORT UGUICircularImageList : public UGUICircularList
{
public:
	unsigned char                                      _0x0390[ 0x0C ];                                  		// 0x0390 ( 0x000C )

	// Public Imports
	UGUICircularImageList(class UGUICircularImageList const &);
	UGUICircularImageList(void);
	class UGUICircularImageList &  operator=(class UGUICircularImageList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class XInterface.GUIVertImageList
class DLL_IMPORT UGUIVertImageList : public UGUIVertList
{
public:
	unsigned char                                      CellStyle;                                        		// 0x0390 ( 0x0001 ) [ CPF_Edit ]
	float                                              ImageScale;                                       		// 0x0394 ( 0x0004 ) [ CPF_Edit ]
	int                                                NoVisibleRows;                                    		// 0x0398 ( 0x0004 ) [ CPF_Edit ]
	int                                                NoVisibleCols;                                    		// 0x039C ( 0x0004 ) [ CPF_Edit ]
	int                                                HorzBorder;                                       		// 0x03A0 ( 0x0004 ) [ CPF_Edit ]
	int                                                VertBorder;                                       		// 0x03A4 ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FImageListElem >              Elements;                                         		// 0x03A8 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink ]
	class TArray< struct FImageListElem >              SelectedElements;                                 		// 0x03B4 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink ]
	class UMaterial*                                   LockedMat;                                        		// 0x03C0 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      CallDrawItemForPlaceHoldingItemsInFixedCountCellStyle:1;		// 0x03C4 ( 0x0004 )  [0x00000001]
	float                                              LastValidClickTime;                               		// 0x03C8 ( 0x0004 ) 
	struct FScriptDelegate                             __OnItemDblClick__Delegate;                       		// 0x03CC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnIsSelectibleIndex__Delegate;                  		// 0x03D4 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      InternalOnDragDrop ( class UGUIComponent* Sender );		//  XInterface.GUIVertImageList.InternalOnDragDrop
	 void                      InternalOnEndDrag ( class UGUIComponent* Accepting, bool bAccepted );		//  XInterface.GUIVertImageList.InternalOnEndDrag
	 int                       FindItem ( int Item );                            		//  XInterface.GUIVertImageList.FindItem
	 int                       FindImage ( class UMaterial* Image );             		//  XInterface.GUIVertImageList.FindImage
	 void                      RemoveItem ( int Item );                          		//  XInterface.GUIVertImageList.RemoveItem
	 void                      RemoveImage ( class UMaterial* Image );           		//  XInterface.GUIVertImageList.RemoveImage
	 void                      SetItemAtIndex ( int i, int NewItem );            		//  XInterface.GUIVertImageList.SetItemAtIndex
	 void                      SetImageAtIndex ( int i, class UMaterial* NewImage );		//  XInterface.GUIVertImageList.SetImageAtIndex
	 class TArray< struct FImageListElem > GetPendingElements ( bool bGuarantee );           		//  XInterface.GUIVertImageList.GetPendingElements
	 void                      ClearPendingElements (  );                        		//  XInterface.GUIVertImageList.ClearPendingElements
	 bool                      IsLocked (  );                                    		//  XInterface.GUIVertImageList.IsLocked
	 bool                      IndexLocked ( int i );                            		//  XInterface.GUIVertImageList.IndexLocked
	 void                      GetAtIndex ( int i, class UMaterial** Image, int* Item, int* Locked );		//  XInterface.GUIVertImageList.GetAtIndex
	 int                       GetItemIntAtIndex ( int i );                      		//  XInterface.GUIVertImageList.GetItemIntAtIndex
	 struct FString            GetItemAtIndex ( int i );                         		//  XInterface.GUIVertImageList.GetItemAtIndex
	 class UMaterial*          GetImageAtIndex ( int i );                        		//  XInterface.GUIVertImageList.GetImageAtIndex
	 int                       GetItem (  );                                     		//  XInterface.GUIVertImageList.GetItem
	 class UMaterial*          Get ( bool bGuarantee );                          		//  XInterface.GUIVertImageList.Get
	 void                      Clear (  );                                       		//  XInterface.GUIVertImageList.Clear
	 int                       RemoveElement ( struct FImageListElem elem, int Count );		//  XInterface.GUIVertImageList.RemoveElement
	 int                       RemoveSilent ( int i, int Count );                		//  XInterface.GUIVertImageList.RemoveSilent
	 int                       Remove ( int i, int Count );                      		//  XInterface.GUIVertImageList.Remove
	 void                      LoadFrom ( class UGUIVertImageList* Source, bool bClearFirst );		//  XInterface.GUIVertImageList.LoadFrom
	 void                      eventSwap ( int IndexA, int IndexB );             		// [ FUNC_Event ] XInterface.GUIVertImageList.Swap
	 void                      InsertElement ( int i, struct FImageListElem NewElem, int Locked );		//  XInterface.GUIVertImageList.InsertElement
	 void                      Insert ( int i, class UMaterial* NewImage, int NewItem, int Locked );		//  XInterface.GUIVertImageList.Insert
	 void                      Replace ( int i, class UMaterial* NewImage, int NewItem, int Locked );		//  XInterface.GUIVertImageList.Replace
	 void                      AddImage ( struct FImageListElem NewElem, int Locked );		//  XInterface.GUIVertImageList.AddImage
	 void                      Add ( class UMaterial* Image, int Item, int Locked );		//  XInterface.GUIVertImageList.Add
	 void                      SetTopItem ( int Item );                          		//  XInterface.GUIVertImageList.SetTopItem
	 void                      MakeVisible ( float perc );                       		//  XInterface.GUIVertImageList.MakeVisible
	 void                      PgDn (  );                                        		//  XInterface.GUIVertImageList.PgDn
	 void                      PgUp (  );                                        		//  XInterface.GUIVertImageList.PgUp
	 void                      End (  );                                         		//  XInterface.GUIVertImageList.End
	 void                      home (  );                                        		//  XInterface.GUIVertImageList.home
	 bool                      MoveLeft (  );                                    		//  XInterface.GUIVertImageList.MoveLeft
	 bool                      MoveRight (  );                                   		//  XInterface.GUIVertImageList.MoveRight
	 bool                      Down (  );                                        		//  XInterface.GUIVertImageList.Down
	 bool                      Up (  );                                          		//  XInterface.GUIVertImageList.Up
	 int                       SetIndex ( int NewIndex );                        		//  XInterface.GUIVertImageList.SetIndex
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIVertImageList.InternalOnClick
	 bool                      OnIsSelectibleIndex ( class UGUIComponent* Sender, int Index );		//  XInterface.GUIVertImageList.OnIsSelectibleIndex
	 bool                      OnItemDblClick ( class UGUIComponent* Sender );   		//  XInterface.GUIVertImageList.OnItemDblClick
	 int                       eventCalculateIndex ( bool bRequireValidIndex );  		// [ FUNC_Event ] XInterface.GUIVertImageList.CalculateIndex

	// Public Imports
	UGUIVertImageList(class UGUIVertImageList const &);
	UGUIVertImageList(void);
	class UGUIVertImageList &  operator=(class UGUIVertImageList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	unsigned long  delegateOnIsSelectibleIndex(class UGUIComponent *,int);
	unsigned long  delegateOnItemDblClick(class UGUIComponent *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x004C

// Class XInterface.GUIMultiColumnList
class DLL_IMPORT UGUIMultiColumnList : public UGUIVertList
{
public:
	class TArray< struct FString >                     ColumnHeadings;                                   		// 0x0390 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class TArray< float >                              InitColumnPerc;                                   		// 0x039C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FString >                     ColumnHeadingHints;                               		// 0x03A8 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FMultiColumnSortData >        SortData;                                         		// 0x03B4 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< int >                                InvSortData;                                      		// 0x03C0 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< float >                              ColumnWidths;                                     		// 0x03CC ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	float                                              CellSpacing;                                      		// 0x03D8 ( 0x0004 ) [ CPF_Edit ]
	int                                                SortColumn;                                       		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      NeedsSorting:1;                                   		// 0x03E0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      SortDescending:1;                                 		// 0x03E0 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      ExpandLastColumn:1;                               		// 0x03E0 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	int                                                NoVisibleRows;                                    		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	int                                                NoVisibleCols;                                    		// 0x03E8 ( 0x0004 ) [ CPF_Edit ]
	struct FScriptDelegate                             __OnColumnSized__Delegate;                        		// 0x03EC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __GetSortString__Delegate;                        		// 0x03F4 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SetTopItem ( int Item );                          		//  XInterface.GUIMultiColumnList.SetTopItem
	 void                      Dump (  );                                        		//  XInterface.GUIMultiColumnList.Dump
	 void                      Sort (  );                                        		//  XInterface.GUIMultiColumnList.Sort
	 void                      GetCellLeftWidth ( int Column, float* Left, float* width );		//  XInterface.GUIMultiColumnList.GetCellLeftWidth
	 bool                      InternalOnPreDraw ( class UCanvas* C );           		//  XInterface.GUIMultiColumnList.InternalOnPreDraw
	 void                      eventInitializeColumns ( class UCanvas* C );      		// [ FUNC_Event ] XInterface.GUIMultiColumnList.InitializeColumns
	 void                      ResolutionChanged ( int ResX, int ResY );         		//  XInterface.GUIMultiColumnList.ResolutionChanged
	 void                      RemovedCurrent (  );                              		//  XInterface.GUIMultiColumnList.RemovedCurrent
	 void                      Clear (  );                                       		//  XInterface.GUIMultiColumnList.Clear
	 void                      eventOnSortChanged (  );                          		// [ FUNC_Event ] XInterface.GUIMultiColumnList.OnSortChanged
	 int                       CurrentListId (  );                               		//  XInterface.GUIMultiColumnList.CurrentListId
	 struct FString            GetSortString ( int YourArrayIndex );             		//  XInterface.GUIMultiColumnList.GetSortString
	 void                      AddedItem ( int YourArrayIndex );                 		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiColumnList.AddedItem
	 void                      RemovedItem ( int YourArrayIndex );               		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiColumnList.RemovedItem
	 void                      UpdatedItem ( int YourArrayIndex );               		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiColumnList.UpdatedItem
	 void                      SortList (  );                                    		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiColumnList.SortList
	 void                      ChangeSortOrder (  );                             		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiColumnList.ChangeSortOrder
	 int                       GetListIndex ( int YourArrayIndex );              		// [ FUNC_Final | FUNC_Native ] XInterface.GUIMultiColumnList.GetListIndex
	 void                      OnColumnSized ( int Column );                     		//  XInterface.GUIMultiColumnList.OnColumnSized

	// Public Imports
	UGUIMultiColumnList(class UGUIMultiColumnList const &);
	UGUIMultiColumnList(void);
	class UGUIMultiColumnList &  operator=(class UGUIMultiColumnList const &);
	int  FindSortIndex(int)const ;
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	class FString  delegateGetSortString(int);
	void  delegateOnColumnSized(int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x006C

// Class XInterface.GUIMultiColumnListDerived
class DLL_IMPORT UGUIMultiColumnListDerived : public UGUIMultiColumnList
{
public:

	// Public Imports
	UGUIMultiColumnListDerived(class UGUIMultiColumnListDerived const &);
	UGUIMultiColumnListDerived(void);
	class UGUIMultiColumnListDerived &  operator=(class UGUIMultiColumnListDerived const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class XInterface.BTTcpHandler_DS_Script
class DLL_IMPORT UBTTcpHandler_DS_Script : public UBTTcpHandler_DS_Script_Interface
{
public:
	unsigned char                                      _0x0034[ 0x10 ];                                  		// 0x0034 ( 0x0010 )

	// Public Imports
	UBTTcpHandler_DS_Script(class UBTTcpHandler_DS_Script const &);
	class UBTTcpHandler_DS_Script &  operator=(class UBTTcpHandler_DS_Script const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class XInterface.GUILabel
class DLL_IMPORT UGUILabel : public UGUIComponent
{
public:
	struct FString                                     Caption;                                          		// 0x02BC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned char                                      TextAlign;                                        		// 0x02C8 ( 0x0001 ) [ CPF_Edit ]
	class FColor                                       TextColor;                                        		// 0x02CC ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       FocusedTextColor;                                 		// 0x02D0 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      TextStyle;                                        		// 0x02D4 ( 0x0001 ) [ CPF_Edit ]
	struct FString                                     TextFont;                                         		// 0x02D8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bTransparent:1;                                   		// 0x02E4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bMultiLine:1;                                     		// 0x02E4 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned char                                      VertAlign;                                        		// 0x02E8 ( 0x0001 ) [ CPF_Edit ]
	class FColor                                       BackColor;                                        		// 0x02EC ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       ShadowColor;                                      		// 0x02F0 ( 0x0004 ) [ CPF_Edit ]
	float                                              ShadowOffsetX;                                    		// 0x02F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              ShadowOffsetY;                                    		// 0x02F8 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       HilightColor;                                     		// 0x02FC ( 0x0004 ) [ CPF_Edit ]
	float                                              HilightOffsetX;                                   		// 0x0300 ( 0x0004 ) [ CPF_Edit ]
	float                                              HilightOffsetY;                                   		// 0x0304 ( 0x0004 ) [ CPF_Edit ]
	int                                                FontSize;                                         		// 0x0308 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UGUILabel(class UGUILabel const &);
	UGUILabel(void);
	class UGUILabel &  operator=(class UGUILabel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0050

// Class XInterface.GUIBorder
class DLL_IMPORT UGUIBorder : public UGUIMultiComponent
{
public:
	struct FString                                     Caption;                                          		// 0x0300 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned char                                      Justification;                                    		// 0x030C ( 0x0001 ) [ CPF_Edit ]
	int                                                TextIndent;                                       		// 0x0310 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FString            GetCaption (  );                                  		//  XInterface.GUIBorder.GetCaption
	 void                      SetCaption ( struct FString NewCaption );         		//  XInterface.GUIBorder.SetCaption

	// Public Imports
	UGUIBorder(class UGUIBorder const &);
	UGUIBorder(void);
	class UGUIBorder &  operator=(class UGUIBorder const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class XInterface.GUITitleBar
class DLL_IMPORT UGUITitleBar : public UGUIBorder
{
public:
	class UGUITabControl*                              DockedTabs;                                       		// 0x0314 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned char                                      DockAlign;                                        		// 0x0318 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bUseTextHeight:1;                                 		// 0x031C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bDockTop:1;                                       		// 0x031C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	class UMaterial*                                   Effect;                                           		// 0x0320 ( 0x0004 ) [ CPF_Const ]

	// Public Imports
	UGUITitleBar(class UGUITitleBar const &);
	UGUITitleBar(void);
	class UGUITitleBar &  operator=(class UGUITitleBar const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class XInterface.GUITabControl
class DLL_IMPORT UGUITabControl : public UGUIMultiComponent
{
public:
	unsigned long                                      bFillSpace:1;                                     		// 0x0300 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bDockPanels:1;                                    		// 0x0300 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bDrawTabAbove:1;                                  		// 0x0300 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bFillBackground:1;                                		// 0x0300 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	class FColor                                       FillColor;                                        		// 0x0304 ( 0x0004 ) [ CPF_Edit ]
	float                                              FadeInTime;                                       		// 0x0308 ( 0x0004 ) [ CPF_Edit ]
	float                                              TabHeight;                                        		// 0x030C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     BackgroundStyleName;                              		// 0x0310 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UMaterial*                                   BackgroundImage;                                  		// 0x031C ( 0x0004 ) [ CPF_Edit ]
	class TArray< class UGUITabButton* >               TabStack;                                         		// 0x0320 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport ]
	class UGUITabButton*                               ActiveTab;                                        		// 0x032C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUITabButton*                               PendingTab;                                       		// 0x0330 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUIStyles*                                  BackgroundStyle;                                  		// 0x0334 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUIBorder*                                  MyFooter;                                         		// 0x0338 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	unsigned long                                      bForceManualTabButtonStyle:1;                     		// 0x033C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FString                                     ManualTabButtonStyleName;                         		// 0x0340 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      LevelChanged (  );                                		//  XInterface.GUITabControl.LevelChanged
	 void                      eventfree (  );                                   		// [ FUNC_Event ] XInterface.GUITabControl.free
	 void                      CenterMouse (  );                                 		//  XInterface.GUITabControl.CenterMouse
	 bool                      FocusLast ( class UGUIComponent* Sender );        		//  XInterface.GUITabControl.FocusLast
	 bool                      FocusFirst ( class UGUIComponent* Sender );       		//  XInterface.GUITabControl.FocusFirst
	 void                      InternalOnActivate (  );                          		//  XInterface.GUITabControl.InternalOnActivate
	 void                      SetVisibility ( bool bIsVisible );                		//  XInterface.GUITabControl.SetVisibility
	 class UGUITabPanel*       BorrowPanel ( struct FString Caption );           		//  XInterface.GUITabControl.BorrowPanel
	 class UGUITabPanel*       FindPanelClass ( class UClass* PanelClass );      		//  XInterface.GUITabControl.FindPanelClass
	 int                       TabIndex ( struct FString tabname );              		//  XInterface.GUITabControl.TabIndex
	 bool                      eventPrevControl ( class UGUIComponent* Sender ); 		// [ FUNC_Event ] XInterface.GUITabControl.PrevControl
	 bool                      eventNextControl ( class UGUIComponent* Sender ); 		// [ FUNC_Event ] XInterface.GUITabControl.NextControl
	 bool                      eventPrevPage (  );                               		// [ FUNC_Event ] XInterface.GUITabControl.PrevPage
	 bool                      eventNextPage (  );                               		// [ FUNC_Event ] XInterface.GUITabControl.NextPage
	 bool                      InternalTabClick ( class UGUIComponent* Sender ); 		//  XInterface.GUITabControl.InternalTabClick
	 bool                      ActivateTabByPanel ( class UGUITabPanel* Panel, bool bFocusPanel );		//  XInterface.GUITabControl.ActivateTabByPanel
	 bool                      ActivateTabByName ( struct FString tabname, bool bFocusPanel );		//  XInterface.GUITabControl.ActivateTabByName
	 bool                      ActivateTab ( class UGUITabButton* Who, bool bFocusPanel );		//  XInterface.GUITabControl.ActivateTab
	 void                      eventMakeTabActive ( class UGUITabButton* Who );  		// [ FUNC_Event ] XInterface.GUITabControl.MakeTabActive
	 bool                      LostActiveTab (  );                               		//  XInterface.GUITabControl.LostActiveTab
	 void                      RemoveTab ( struct FString Caption, class UGUITabButton* Who );		//  XInterface.GUITabControl.RemoveTab
	 class UGUITabPanel*       ReplaceTab ( class UGUITabButton* Which, struct FString Caption, struct FString PanelClass, class UGUITabPanel* ExistingPanel, struct FString InHint, bool bForceActive );		//  XInterface.GUITabControl.ReplaceTab
	 class UGUITabPanel*       InsertTab ( int pos, struct FString Caption, struct FString PanelClass, class UGUITabPanel* ExistingPanel, struct FString InHint, bool bForceActive );		//  XInterface.GUITabControl.InsertTab
	 class UGUITabPanel*       AddTab ( struct FString InCaption, struct FString PanelClass, class UGUITabPanel* ExistingPanel, struct FString InHint, bool bForceActive );		//  XInterface.GUITabControl.AddTab
	 class UGUITabPanel*       AddTabItem ( struct FGUITabItem Item );           		//  XInterface.GUITabControl.AddTabItem
	 bool                      InternalOnKeyEvent ( float Delta, unsigned char* key, unsigned char* State );		//  XInterface.GUITabControl.InternalOnKeyEvent
	 void                      eventClosed ( class UGUIComponent* Sender, bool bCancelled );		// [ FUNC_Event ] XInterface.GUITabControl.Closed
	 void                      eventOpened ( class UGUIComponent* Sender );      		// [ FUNC_Event ] XInterface.GUITabControl.Opened
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUITabControl.InitComponent

	// Public Imports
	UGUITabControl(class UGUITabControl const &);
	UGUITabControl(void);
	class UGUITabControl &  operator=(class UGUITabControl const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x004C

// Class XInterface.GUIButton
class DLL_IMPORT UGUIButton : public UGUIComponent
{
public:
	unsigned char                                      CaptionAlign;                                     		// 0x02BC ( 0x0001 ) [ CPF_Edit ]
	class UGUIStyles*                                  CaptionEffectStyle;                               		// 0x02C0 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     CaptionEffectStyleName;                           		// 0x02C4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Caption;                                          		// 0x02D0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FPaddingPercent                             AutoSizePadding;                                  		// 0x02DC ( 0x0008 ) [ CPF_Edit ]
	struct FString                                     SizingCaption;                                    		// 0x02E4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bAutoSize:1;                                      		// 0x02F0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bAutoShrink:1;                                    		// 0x02F0 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bWrapCaption:1;                                   		// 0x02F0 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bUseCaptionHeight:1;                              		// 0x02F0 ( 0x0004 )  [0x00000008][ CPF_Edit ]

	// UScript Functions
	 bool                      InternalOnKeyEvent ( float Delta, unsigned char* key, unsigned char* State );		//  XInterface.GUIButton.InternalOnKeyEvent
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIButton.InitComponent

	// Public Imports
	UGUIButton(class UGUIButton const &);
	UGUIButton(void);
	class UGUIButton &  operator=(class UGUIButton const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class XInterface.GUITabButton
class DLL_IMPORT UGUITabButton : public UGUIButton
{
public:
	unsigned long                                      bForceFlash:1;                                    		// 0x02F4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bActive:1;                                        		// 0x02F4 ( 0x0004 )  [0x00000002]
	class UGUITabPanel*                                MyPanel;                                          		// 0x02F8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 bool                      CanShowPanel (  );                                		//  XInterface.GUITabButton.CanShowPanel
	 bool                      ChangeActiveState ( bool IsActive, bool bFocusPanel );		//  XInterface.GUITabButton.ChangeActiveState
	 void                      eventSetFocus ( class UGUIComponent* Who );       		// [ FUNC_Event ] XInterface.GUITabButton.SetFocus

	// Public Imports
	UGUITabButton(class UGUITabButton const &);
	UGUITabButton(void);
	class UGUITabButton &  operator=(class UGUITabButton const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class XInterface.GUIPanel
class DLL_IMPORT UGUIPanel : public UGUIMultiComponent
{
public:
	class UMaterial*                                   Background;                                       		// 0x0300 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      SetControlsBoundToParent:1;                       		// 0x0304 ( 0x0004 )  [0x00000001]
	unsigned long                                      SetControlsScaleToParent:1;                       		// 0x0304 ( 0x0004 )  [0x00000002]
	struct FScriptDelegate                             __OnPostDraw__Delegate;                           		// 0x0308 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIPanel.InitComponent
	 bool                      OnPostDraw ( class UCanvas* Canvas );             		//  XInterface.GUIPanel.OnPostDraw

	// Public Imports
	UGUIPanel(class UGUIPanel const &);
	UGUIPanel(void);
	class UGUIPanel &  operator=(class UGUIPanel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	unsigned long  delegateOnPostDraw(class UCanvas *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class XInterface.GUITabPanel
class DLL_IMPORT UGUITabPanel : public UGUIPanel
{
public:
	struct FString                                     PanelCaption;                                     		// 0x0310 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bFillHeight:1;                                    		// 0x031C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              FadeInTime;                                       		// 0x0320 ( 0x0004 ) [ CPF_Edit ]
	class UGUITabButton*                               MyButton;                                         		// 0x0324 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	float                                              CursorUSize;                                      		// 0x0328 ( 0x0004 ) 
	float                                              CursorVSize;                                      		// 0x032C ( 0x0004 ) 

	// UScript Functions
	 struct FFloatBox          GetTooltipPos ( int tooltipWidth, int tooltipHeight, int nOffsetX, int nOffsetY );		//  XInterface.GUITabPanel.GetTooltipPos
	 bool                      CanShowPanel (  );                                		//  XInterface.GUITabPanel.CanShowPanel
	 void                      ShowPanel ( bool bShow );                         		//  XInterface.GUITabPanel.ShowPanel
	 void                      eventfree (  );                                   		// [ FUNC_Event ] XInterface.GUITabPanel.free
	 void                      OnDestroyPanel ( bool bCancelled );               		//  XInterface.GUITabPanel.OnDestroyPanel
	 void                      InitPanel (  );                                   		//  XInterface.GUITabPanel.InitPanel
	 void                      Refresh (  );                                     		//  XInterface.GUITabPanel.Refresh

	// Public Imports
	UGUITabPanel(class UGUITabPanel const &);
	class UGUITabPanel &  operator=(class UGUITabPanel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class XInterface.GUIGFXButton
class DLL_IMPORT UGUIGFXButton : public UGUIButton
{
public:
	int                                                ImageIndex;                                       		// 0x02F4 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   Graphic;                                          		// 0x02F8 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      Position;                                         		// 0x02FC ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bCheckBox:1;                                      		// 0x0300 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bClientBound:1;                                   		// 0x0300 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bChecked:1;                                       		// 0x0300 ( 0x0004 )  [0x00000004]

	// UScript Functions
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIGFXButton.InternalOnClick
	 void                      SetChecked ( bool bNewChecked );                  		//  XInterface.GUIGFXButton.SetChecked
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIGFXButton.InitComponent

	// Public Imports
	UGUIGFXButton(class UGUIGFXButton const &);
	UGUIGFXButton(void);
	class UGUIGFXButton &  operator=(class UGUIGFXButton const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class XInterface.GUICheckBoxButton
class DLL_IMPORT UGUICheckBoxButton : public UGUIGFXButton
{
public:
	unsigned char                                      _0x0304[ 0x2C ];                                  		// 0x0304 ( 0x002C )

	// Public Imports
	UGUICheckBoxButton(class UGUICheckBoxButton const &);
	UGUICheckBoxButton(void);
	class UGUICheckBoxButton &  operator=(class UGUICheckBoxButton const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class XInterface.GUISpinnerButton
class DLL_IMPORT UGUISpinnerButton : public UGUIButton
{
public:
	unsigned char                                      _0x02F4[ 0x10 ];                                  		// 0x02F4 ( 0x0010 )

	// Public Imports
	UGUISpinnerButton(class UGUISpinnerButton const &);
	UGUISpinnerButton(void);
	class UGUISpinnerButton &  operator=(class UGUISpinnerButton const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	unsigned long  delegateOnMinusClick(class UGUIComponent *);
	unsigned long  delegateOnPlusClick(class UGUIComponent *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class XInterface.GUIEditBox
class DLL_IMPORT UGUIEditBox : public UGUIButton
{
public:
	int                                                MaxTextStrNum;                                    		// 0x02F4 ( 0x0004 ) 
	struct FString                                     IMEText;                                          		// 0x02F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                IMESelPosStart;                                   		// 0x0304 ( 0x0004 ) 
	int                                                IMESelPosEnd;                                     		// 0x0308 ( 0x0004 ) 
	int                                                IMECompSize;                                      		// 0x030C ( 0x0004 ) 
	struct FString                                     TextStr;                                          		// 0x0310 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     AllowedCharSet;                                   		// 0x031C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bMaskText:1;                                      		// 0x0328 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bIntOnly:1;                                       		// 0x0328 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bFloatOnly:1;                                     		// 0x0328 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bIncludeSign:1;                                   		// 0x0328 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bConvertSpaces:1;                                 		// 0x0328 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	int                                                MaxWidth;                                         		// 0x032C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      TextCase;                                         		// 0x0330 ( 0x0001 ) [ CPF_Edit ]
	int                                                BorderOffsets[ 0x04 ];                            		// 0x0334 ( 0x0010 ) [ CPF_Edit ]
	unsigned long                                      bReadOnly:1;                                      		// 0x0344 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bAlwaysNotify:1;                                  		// 0x0344 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                CaretPos;                                         		// 0x0348 ( 0x0004 ) 
	int                                                FirstVis;                                         		// 0x034C ( 0x0004 ) 
	int                                                LastSizeX;                                        		// 0x0350 ( 0x0004 ) 
	int                                                LastCaret;                                        		// 0x0354 ( 0x0004 ) 
	int                                                LastLength;                                       		// 0x0358 ( 0x0004 ) 
	unsigned long                                      bAllSelected:1;                                   		// 0x035C ( 0x0004 )  [0x00000001]
	unsigned char                                      LastKey;                                          		// 0x0360 ( 0x0001 ) 
	float                                              DelayTime;                                        		// 0x0364 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      IMEInputCancel (  );                              		//  XInterface.GUIEditBox.IMEInputCancel
	 void                      InternalDeactivate (  );                          		//  XInterface.GUIEditBox.InternalDeactivate
	 void                      InternalActivate (  );                            		//  XInterface.GUIEditBox.InternalActivate
	 void                      TextChanged (  );                                 		//  XInterface.GUIEditBox.TextChanged
	 struct FString            GetText (  );                                     		//  XInterface.GUIEditBox.GetText
	 struct FString            ConvertIllegal ( struct FString inputstr );       		//  XInterface.GUIEditBox.ConvertIllegal
	 bool                      InternalOnKeyEvent ( float Delta, unsigned char* key, unsigned char* State );		//  XInterface.GUIEditBox.InternalOnKeyEvent
	 bool                      InternalOnKeyType ( struct FString Unicode, unsigned char* key );		//  XInterface.GUIEditBox.InternalOnKeyType
	 void                      DeleteChar (  );                                  		//  XInterface.GUIEditBox.DeleteChar
	 void                      eventSetText ( struct FString NewText );          		// [ FUNC_Event ] XInterface.GUIEditBox.SetText
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIEditBox.InitComponent
	 bool                      OnIME_Notify ( int Type, int LangID, struct FString strText, int nStartPos, int nSize );		// [ FUNC_Native ] XInterface.GUIEditBox.OnIME_Notify

	// Public Imports
	UGUIEditBox(class UGUIEditBox const &);
	UGUIEditBox(void);
	class UGUIEditBox &  operator=(class UGUIEditBox const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0074

// Class XInterface.GUINumericEdit
class DLL_IMPORT UGUINumericEdit : public UGUIMultiComponent
{
public:
	unsigned char                                      _0x0300[ 0x28 ];                                  		// 0x0300 ( 0x0028 )

	// Public Imports
	UGUINumericEdit(class UGUINumericEdit const &);
	UGUINumericEdit(void);
	class UGUINumericEdit &  operator=(class UGUINumericEdit const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class XInterface.GUIFloatEdit
class DLL_IMPORT UGUIFloatEdit : public UGUIMultiComponent
{
public:
	unsigned char                                      _0x0300[ 0x28 ];                                  		// 0x0300 ( 0x0028 )

	// Public Imports
	UGUIFloatEdit(class UGUIFloatEdit const &);
	UGUIFloatEdit(void);
	class UGUIFloatEdit &  operator=(class UGUIFloatEdit const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class XInterface.GUIScrollBarBase
class DLL_IMPORT UGUIScrollBarBase : public UGUIMultiComponent
{
public:
	unsigned char                                      Orientation;                                      		// 0x0300 ( 0x0001 ) [ CPF_Edit ]
	int                                                Step;                                             		// 0x0304 ( 0x0004 ) [ CPF_Edit ]
	float                                              GripPos;                                          		// 0x0308 ( 0x0004 ) 
	float                                              GripSize;                                         		// 0x030C ( 0x0004 ) 
	float                                              GrabOffset;                                       		// 0x0310 ( 0x0004 ) 
	int                                                MinGripPixels;                                    		// 0x0314 ( 0x0004 ) [ CPF_Edit ]
	class UGUIListBase*                                MyList;                                           		// 0x0318 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                BigStep;                                          		// 0x031C ( 0x0004 ) [ CPF_Edit ]
	int                                                ItemCount;                                        		// 0x0320 ( 0x0004 ) [ CPF_Edit ]
	int                                                ItemsPerPage;                                     		// 0x0324 ( 0x0004 ) [ CPF_Edit ]
	int                                                CurPos;                                           		// 0x0328 ( 0x0004 ) 
	unsigned long                                      bScrollStyle:1;                                   		// 0x032C ( 0x0004 )  [0x00000001]
	class UGUIScrollZoneBase*                          MyScrollZone;                                     		// 0x0330 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UGUIScrollButtonBase*                        MyIncreaseButton;                                 		// 0x0334 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UGUIScrollButtonBase*                        MyDecreaseButton;                                 		// 0x0338 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UGUIGripButtonBase*                          MyGripButton;                                     		// 0x033C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	struct FScriptDelegate                             __PositionChanged__Delegate;                      		// 0x0340 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __MoveGripBy__Delegate;                           		// 0x0348 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __AlignThumb__Delegate;                           		// 0x0350 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SetFriendlyLabel ( class UGUILabel* NewLabel );   		//  XInterface.GUIScrollBarBase.SetFriendlyLabel
	 bool                      GripPreDraw ( class UGUIComponent* Sender );      		//  XInterface.GUIScrollBarBase.GripPreDraw
	 void                      Refocus ( class UGUIComponent* Who );             		//  XInterface.GUIScrollBarBase.Refocus
	 void                      AlignThumb (  );                                  		//  XInterface.GUIScrollBarBase.AlignThumb
	 void                      WheelDown (  );                                   		//  XInterface.GUIScrollBarBase.WheelDown
	 void                      WheelUp (  );                                     		//  XInterface.GUIScrollBarBase.WheelUp
	 bool                      IncreaseClick ( class UGUIComponent* Sender );    		//  XInterface.GUIScrollBarBase.IncreaseClick
	 bool                      DecreaseClick ( class UGUIComponent* Sender );    		//  XInterface.GUIScrollBarBase.DecreaseClick
	 void                      MoveGripBy ( int items );                         		//  XInterface.GUIScrollBarBase.MoveGripBy
	 void                      UpdateGripPosition ( float NewPos );              		//  XInterface.GUIScrollBarBase.UpdateGripPosition
	 void                      SetList ( class UGUIListBase* List );             		//  XInterface.GUIScrollBarBase.SetList
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIScrollBarBase.InitComponent
	 void                      PositionChanged ( int NewPos );                   		//  XInterface.GUIScrollBarBase.PositionChanged

	// Public Imports
	UGUIScrollBarBase(class UGUIScrollBarBase const &);
	UGUIScrollBarBase(void);
	class UGUIScrollBarBase &  operator=(class UGUIScrollBarBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateAlignThumb(void);
	void  delegateMoveGripBy(int);
	void  delegatePositionChanged(int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0058

// Class XInterface.GUIScrollButtonBase
class DLL_IMPORT UGUIScrollButtonBase : public UGUIGFXButton
{
public:
	unsigned long                                      bIncreaseButton:1;                                		// 0x0304 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// Public Imports
	UGUIScrollButtonBase(class UGUIScrollButtonBase const &);
	class UGUIScrollButtonBase &  operator=(class UGUIScrollButtonBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class XInterface.GUIScrollZoneBase
class DLL_IMPORT UGUIScrollZoneBase : public UGUIComponent
{
public:
	struct FScriptDelegate                             __OnScrollZoneClick__Delegate;                    		// 0x02BC ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIScrollZoneBase.InternalOnClick
	 void                      OnScrollZoneClick ( float Delta );                		//  XInterface.GUIScrollZoneBase.OnScrollZoneClick

	// Public Imports
	UGUIScrollZoneBase(class UGUIScrollZoneBase const &);
	UGUIScrollZoneBase(void);
	class UGUIScrollZoneBase &  operator=(class UGUIScrollZoneBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnScrollZoneClick(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class XInterface.GUIGripButtonBase
class DLL_IMPORT UGUIGripButtonBase : public UGUIGFXButton
{
public:

	// Public Imports
	UGUIGripButtonBase(class UGUIGripButtonBase const &);
	class UGUIGripButtonBase &  operator=(class UGUIGripButtonBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class XInterface.GUIComboBox
class DLL_IMPORT UGUIComboBox : public UGUIMultiComponent
{
public:
	unsigned long                                      bReadOnly:1;                                      		// 0x0300 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bValueReadOnly:1;                                 		// 0x0300 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bIgnoreChangeWhenTyping:1;                        		// 0x0300 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bShowListOnFocus:1;                               		// 0x0300 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	int                                                MaxVisibleItems;                                  		// 0x0304 ( 0x0004 ) [ CPF_Edit ]
	int                                                Index;                                            		// 0x0308 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	struct FString                                     TextStr;                                          		// 0x030C ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	class UGUIList*                                    List;                                             		// 0x0318 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIEditBox*                                 Edit;                                             		// 0x031C ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UGUIScrollButtonBase*                        MyShowListBtn;                                    		// 0x0320 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UGUIListBox*                                 MyListBox;                                        		// 0x0324 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UMaterial*                                   GraphicOnShow;                                    		// 0x0328 ( 0x0004 ) 
	class UMaterial*                                   GraphicOnHide;                                    		// 0x032C ( 0x0004 ) 
	struct FScriptDelegate                             __OnShowList__Delegate;                           		// 0x0330 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnHideList__Delegate;                           		// 0x0338 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      FocusLast ( class UGUIComponent* Sender );        		//  XInterface.GUIComboBox.FocusLast
	 bool                      FocusFirst ( class UGUIComponent* Sender );       		//  XInterface.GUIComboBox.FocusFirst
	 void                      LoseFocus ( class UGUIComponent* Sender );        		//  XInterface.GUIComboBox.LoseFocus
	 void                      SetFriendlyLabel ( class UGUILabel* NewLabel );   		//  XInterface.GUIComboBox.SetFriendlyLabel
	 void                      CenterMouse (  );                                 		//  XInterface.GUIComboBox.CenterMouse
	 void                      Clear (  );                                       		//  XInterface.GUIComboBox.Clear
	 void                      InternalOnMousePressed ( class UGUIComponent* Sender, bool bRepeat );		//  XInterface.GUIComboBox.InternalOnMousePressed
	 void                      ReadOnly ( bool B );                              		//  XInterface.GUIComboBox.ReadOnly
	 int                       ItemCount (  );                                   		//  XInterface.GUIComboBox.ItemCount
	 int                       FindIndex ( struct FString Test, bool bExact, bool bExtra, class UObject* obj );		//  XInterface.GUIComboBox.FindIndex
	 int                       FindExtra ( struct FString Text, bool bExact );   		//  XInterface.GUIComboBox.FindExtra
	 struct FString            Find ( struct FString Text, bool bExact, bool bExtra );		//  XInterface.GUIComboBox.Find
	 class UObject*            GetItemObject ( int Index );                      		//  XInterface.GUIComboBox.GetItemObject
	 struct FString            GetItem ( int Index );                            		//  XInterface.GUIComboBox.GetItem
	 void                      RemoveItem ( int Item, int Count );               		//  XInterface.GUIComboBox.RemoveItem
	 void                      AddItem ( struct FString Item, class UObject* Extra, struct FString str );		//  XInterface.GUIComboBox.AddItem
	 int                       GetIndex (  );                                    		//  XInterface.GUIComboBox.GetIndex
	 void                      SetIndex ( int i );                               		//  XInterface.GUIComboBox.SetIndex
	 struct FString            GetExtra (  );                                    		//  XInterface.GUIComboBox.GetExtra
	 class UObject*            GetObject (  );                                   		//  XInterface.GUIComboBox.GetObject
	 struct FString            GetText (  );                                     		//  XInterface.GUIComboBox.GetText
	 struct FString            Get (  );                                         		//  XInterface.GUIComboBox.Get
	 void                      SetExtra ( struct FString NewExtra, bool bListItemsOnly );		//  XInterface.GUIComboBox.SetExtra
	 void                      SetText ( struct FString NewText, bool bListItemsOnly );		//  XInterface.GUIComboBox.SetText
	 void                      TextChanged ( class UGUIComponent* Sender );      		//  XInterface.GUIComboBox.TextChanged
	 void                      ItemChanged ( class UGUIComponent* Sender );      		//  XInterface.GUIComboBox.ItemChanged
	 bool                      ShowListBox ( class UGUIComponent* Sender );      		//  XInterface.GUIComboBox.ShowListBox
	 void                      eventSetVisibility ( bool bIsVisible );           		// [ FUNC_Event ] XInterface.GUIComboBox.SetVisibility
	 void                      HideListBox (  );                                 		//  XInterface.GUIComboBox.HideListBox
	 void                      InternalOnLoadINI ( class UGUIComponent* Sender, struct FString S );		//  XInterface.GUIComboBox.InternalOnLoadINI
	 struct FString            InternalOnSaveINI ( class UGUIComponent* Sender );		//  XInterface.GUIComboBox.InternalOnSaveINI
	 bool                      InternalListClick ( class UGUIComponent* Sender );		//  XInterface.GUIComboBox.InternalListClick
	 void                      InternalEditPressed ( class UGUIComponent* Sender, bool bRepeat );		//  XInterface.GUIComboBox.InternalEditPressed
	 void                      InternalOnInvalidate ( class UGUIComponent* Who );		//  XInterface.GUIComboBox.InternalOnInvalidate
	 void                      InternalListDeActivate (  );                      		//  XInterface.GUIComboBox.InternalListDeActivate
	 bool                      InternalOnKeyEvent ( float Delta, unsigned char* key, unsigned char* State );		//  XInterface.GUIComboBox.InternalOnKeyEvent
	 void                      SetHint ( struct FString NewHint );               		//  XInterface.GUIComboBox.SetHint
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIComboBox.InitComponent
	 void                      OnHideList (  );                                  		//  XInterface.GUIComboBox.OnHideList
	 void                      OnShowList (  );                                  		//  XInterface.GUIComboBox.OnShowList

	// Public Imports
	UGUIComboBox(class UGUIComboBox const &);
	UGUIComboBox(void);
	class UGUIComboBox &  operator=(class UGUIComboBox const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnHideList(void);
	void  delegateOnShowList(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class XInterface.GUIMenuOption
class DLL_IMPORT UGUIMenuOption : public UGUIMultiComponent
{
public:
	unsigned long                                      bIgnoreChange:1;                                  		// 0x0300 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_EditConst ]
	unsigned long                                      bValueReadOnly:1;                                 		// 0x0300 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bAutoSizeCaption:1;                               		// 0x0300 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bHeightFromComponent:1;                           		// 0x0300 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bFlipped:1;                                       		// 0x0300 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bSquare:1;                                        		// 0x0300 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bVerticalLayout:1;                                		// 0x0300 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned char                                      LabelJustification;                               		// 0x0304 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      ComponentJustification;                           		// 0x0305 ( 0x0001 ) [ CPF_Edit ]
	float                                              CaptionWidth;                                     		// 0x0308 ( 0x0004 ) [ CPF_Edit ]
	float                                              ComponentWidth;                                   		// 0x030C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     Caption;                                          		// 0x0310 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ComponentClassName;                               		// 0x031C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     LabelFont;                                        		// 0x0328 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     LabelStyleName;                                   		// 0x0334 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class FColor                                       LabelColor;                                       		// 0x0340 ( 0x0004 ) [ CPF_Edit ]
	class UGUILabel*                                   MyLabel;                                          		// 0x0344 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UGUIComponent*                               MyComponent;                                      		// 0x0348 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]

	// UScript Functions
	 void                      SetFriendlyLabel ( class UGUILabel* NewLabel );   		//  XInterface.GUIMenuOption.SetFriendlyLabel
	 void                      CenterMouse (  );                                 		//  XInterface.GUIMenuOption.CenterMouse
	 void                      InternalOnCreateComponent ( class UGUIComponent* NewComp, class UGUIComponent* Sender );		//  XInterface.GUIMenuOption.InternalOnCreateComponent
	 void                      InternalOnChange ( class UGUIComponent* Sender ); 		//  XInterface.GUIMenuOption.InternalOnChange
	 bool                      MenuOptionClicked ( class UGUIComponent* Sender );		//  XInterface.GUIMenuOption.MenuOptionClicked
	 void                      SetCaption ( struct FString NewCaption );         		//  XInterface.GUIMenuOption.SetCaption
	 void                      SetHint ( struct FString NewHint );               		//  XInterface.GUIMenuOption.SetHint
	 void                      SetReadOnly ( bool bValue );                      		//  XInterface.GUIMenuOption.SetReadOnly
	 void                      ResetComponent (  );                              		//  XInterface.GUIMenuOption.ResetComponent
	 struct FString            GetComponentValue (  );                           		//  XInterface.GUIMenuOption.GetComponentValue
	 void                      SetComponentValue ( struct FString NewValue, bool bNoChange );		//  XInterface.GUIMenuOption.SetComponentValue
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIMenuOption.InitComponent

	// Public Imports
	UGUIMenuOption(class UGUIMenuOption const &);
	UGUIMenuOption(void);
	class UGUIMenuOption &  operator=(class UGUIMenuOption const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x004C

// Class XInterface.GUISplitter
class DLL_IMPORT UGUISplitter : public UGUIPanel
{
public:
	unsigned char                                      _0x0310[ 0x3C ];                                  		// 0x0310 ( 0x003C )

	// Public Imports
	UGUISplitter(class UGUISplitter const &);
	UGUISplitter(void);
	class UGUISplitter &  operator=(class UGUISplitter const &);
	static void  InternalConstructor(void *);
	void  SplitterUpdatePositions(void);
	static class UClass *  StaticClass(void);
	void  delegateOnReleaseSplitter(class UGUIComponent *,float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class XInterface.GUISlider
class DLL_IMPORT UGUISlider : public UGUIComponent
{
public:
	unsigned char                                      _0x02BC[ 0x50 ];                                  		// 0x02BC ( 0x0050 )

	// Public Imports
	UGUISlider(class UGUISlider const &);
	UGUISlider(void);
	class UGUISlider &  operator=(class UGUISlider const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	float  delegateCalcMarkerPosition(void);
	class FString  delegateOnDrawCaption(void);
	unsigned long  delegateOnPreDrawCaption(float &,float &,float &,float &,unsigned char &);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0050

// Class XInterface.GUIImage
class DLL_IMPORT UGUIImage : public UGUIComponent
{
public:
	class UMaterial*                                   Image;                                            		// 0x02BC ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   DropShadow;                                       		// 0x02C0 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       ImageColor;                                       		// 0x02C4 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      ImageStyle;                                       		// 0x02C8 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      ImageRenderStyle;                                 		// 0x02C9 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      ImageAlign;                                       		// 0x02CA ( 0x0001 ) [ CPF_Edit ]
	int                                                X1;                                               		// 0x02CC ( 0x0004 ) [ CPF_Edit ]
	int                                                Y1;                                               		// 0x02D0 ( 0x0004 ) [ CPF_Edit ]
	int                                                X2;                                               		// 0x02D4 ( 0x0004 ) [ CPF_Edit ]
	int                                                Y2;                                               		// 0x02D8 ( 0x0004 ) [ CPF_Edit ]
	int                                                DropShadowX;                                      		// 0x02DC ( 0x0004 ) [ CPF_Edit ]
	int                                                DropShadowY;                                      		// 0x02E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              BorderOffsets[ 0x04 ];                            		// 0x02E4 ( 0x0010 ) [ CPF_Edit ]
	float                                              X3;                                               		// 0x02F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              y3;                                               		// 0x02F8 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FString            eventAdditionalDebugString (  );                  		// [ FUNC_Event ] XInterface.GUIImage.AdditionalDebugString

	// Public Imports
	UGUIImage(class UGUIImage const &);
	UGUIImage(void);
	class UGUIImage &  operator=(class UGUIImage const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class XInterface.GUISectionBackground
class DLL_IMPORT UGUISectionBackground : public UGUIImage
{
public:
	class UGUIStyles*                                  CaptionStyle;                                     		// 0x02FC ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	struct FString                                     CaptionStyleName;                                 		// 0x0300 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                AltCaptionOffset[ 0x04 ];                         		// 0x030C ( 0x0010 ) [ CPF_Edit ]
	unsigned char                                      AltCaptionAlign;                                  		// 0x031C ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bAltCaption:1;                                    		// 0x0320 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bRemapStack:1;                                    		// 0x0320 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bFillClient:1;                                    		// 0x0320 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	class TArray< class UGUIComponent* >               AlignStack;                                       		// 0x0324 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline | CPF_EditInlineNotify ]
	class UMaterial*                                   HeaderTop;                                        		// 0x0330 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   HeaderBar;                                        		// 0x0334 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   HeaderBase;                                       		// 0x0338 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     Caption;                                          		// 0x033C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	float                                              ColPadding;                                       		// 0x0348 ( 0x0004 ) [ CPF_Edit ]
	float                                              LeftPadding;                                      		// 0x034C ( 0x0004 ) [ CPF_Edit ]
	float                                              RightPadding;                                     		// 0x0350 ( 0x0004 ) [ CPF_Edit ]
	float                                              TopPadding;                                       		// 0x0354 ( 0x0004 ) [ CPF_Edit ]
	float                                              BottomPadding;                                    		// 0x0358 ( 0x0004 ) [ CPF_Edit ]
	float                                              ImageOffset[ 0x04 ];                              		// 0x035C ( 0x0010 ) [ CPF_Edit ]
	int                                                NumColumns;                                       		// 0x036C ( 0x0004 ) [ CPF_Edit ]
	int                                                MaxPerColumn;                                     		// 0x0370 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      SetPosition ( float NewLeft, float NewTop, float NewWidth, float NewHeight, bool bRelative );		//  XInterface.GUISectionBackground.SetPosition
	 void                      eventResolutionChanged ( int ResX, int ResY );    		// [ FUNC_Event ] XInterface.GUISectionBackground.ResolutionChanged
	 bool                      InternalPreDraw ( class UCanvas* C );             		//  XInterface.GUISectionBackground.InternalPreDraw
	 void                      Reset (  );                                       		//  XInterface.GUISectionBackground.Reset
	 int                       FindComponentIndex ( class UGUIComponent* Comp ); 		//  XInterface.GUISectionBackground.FindComponentIndex
	 bool                      UnmanageComponent ( class UGUIComponent* Comp );  		//  XInterface.GUISectionBackground.UnmanageComponent
	 bool                      ManageComponent ( class UGUIComponent* Component );		//  XInterface.GUISectionBackground.ManageComponent
	 void                      eventSetVisibility ( bool bIsVisible );           		// [ FUNC_Event ] XInterface.GUISectionBackground.SetVisibility
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUISectionBackground.InitComponent

	// Public Imports
	UGUISectionBackground(class UGUISectionBackground const &);
	UGUISectionBackground(void);
	class UGUISectionBackground &  operator=(class UGUISectionBackground const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0078

// Class XInterface.CoolImage
class DLL_IMPORT UCoolImage : public UGUIComponent
{
public:
	unsigned char                                      _0x02BC[ 0x30 ];                                  		// 0x02BC ( 0x0030 )

	// Public Imports
	UCoolImage(class UCoolImage const &);
	UCoolImage(void);
	class UCoolImage &  operator=(class UCoolImage const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0030

// Class XInterface.GUIProgressBar
class DLL_IMPORT UGUIProgressBar : public UGUIComponent
{
public:
	unsigned char                                      _0x02BC[ 0x58 ];                                  		// 0x02BC ( 0x0058 )

	// Public Imports
	UGUIProgressBar(class UGUIProgressBar const &);
	UGUIProgressBar(void);
	class UGUIProgressBar &  operator=(class UGUIProgressBar const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0058

// Class XInterface.GUIContextMenu
class DLL_IMPORT UGUIContextMenu : public UGUIComponent
{
public:
	class TArray< struct FString >                     ContextItems;                                     		// 0x02BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                ItemIndex;                                        		// 0x02C8 ( 0x0004 ) 
	struct FString                                     SelectionStyleName;                               		// 0x02CC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UGUIStyles*                                  SelectionStyle;                                   		// 0x02D8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                ItemHeight;                                       		// 0x02DC ( 0x0004 ) 
	unsigned long                                      bAutoItemHeight:1;                                		// 0x02E0 ( 0x0004 )  [0x00000001]
	struct FScriptDelegate                             __OnOpen__Delegate;                               		// 0x02E4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnClose__Delegate;                              		// 0x02EC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnSelect__Delegate;                             		// 0x02F4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnContextHitTest__Delegate;                     		// 0x02FC ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      ReplaceItem ( int Index, struct FString NewItem );		//  XInterface.GUIContextMenu.ReplaceItem
	 bool                      RemoveItemByIndex ( int Index );                  		//  XInterface.GUIContextMenu.RemoveItemByIndex
	 bool                      RemoveItemByName ( struct FString ItemName );     		//  XInterface.GUIContextMenu.RemoveItemByName
	 int                       InsertItem ( struct FString NewItem, int Index ); 		//  XInterface.GUIContextMenu.InsertItem
	 int                       AddItem ( struct FString NewItem );               		//  XInterface.GUIContextMenu.AddItem
	 bool                      OnContextHitTest ( float MouseX, float MouseY );  		//  XInterface.GUIContextMenu.OnContextHitTest
	 void                      OnSelect ( class UGUIContextMenu* Sender, int ClickIndex );		//  XInterface.GUIContextMenu.OnSelect
	 bool                      OnClose ( class UGUIContextMenu* Sender );        		//  XInterface.GUIContextMenu.OnClose
	 bool                      OnOpen ( class UGUIContextMenu* Sender );         		//  XInterface.GUIContextMenu.OnOpen

	// Public Imports
	UGUIContextMenu(class UGUIContextMenu const &);
	UGUIContextMenu(void);
	class UGUIContextMenu &  operator=(class UGUIContextMenu const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	unsigned long  delegateOnClose(class UGUIContextMenu *);
	unsigned long  delegateOnContextHitTest(float,float);
	unsigned long  delegateOnOpen(class UGUIContextMenu *);
	void  delegateOnSelect(class UGUIContextMenu *,int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0048

// Class XInterface.GUIToolTip
class DLL_IMPORT UGUIToolTip : public UGUIComponent
{
public:
	unsigned long                                      bResetPosition:1;                                 		// 0x02BC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bTrackMouse:1;                                    		// 0x02BC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bMultiLine:1;                                     		// 0x02BC ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bTrackInput:1;                                    		// 0x02BC ( 0x0004 )  [0x00000008][ CPF_Edit ]
	struct FString                                     Text;                                             		// 0x02C0 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Lines;                                            		// 0x02CC ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	float                                              StartTime;                                        		// 0x02D8 ( 0x0004 ) [ CPF_Edit | CPF_NoExport ]
	float                                              CurrentTime;                                      		// 0x02DC ( 0x0004 ) [ CPF_Edit | CPF_NoExport ]
	float                                              MaxWidth;                                         		// 0x02E0 ( 0x0004 ) [ CPF_Edit | CPF_Config | CPF_GlobalConfig ]
	float                                              InitialDelay;                                     		// 0x02E4 ( 0x0004 ) [ CPF_Edit | CPF_Config | CPF_GlobalConfig ]
	float                                              ExpirationSeconds;                                		// 0x02E8 ( 0x0004 ) [ CPF_Edit | CPF_Config | CPF_GlobalConfig ]
	struct FScriptDelegate                             __EnterArea__Delegate;                            		// 0x02EC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __LeaveArea__Delegate;                            		// 0x02F4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __Tick__Delegate;                                 		// 0x02FC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __ShowToolTip__Delegate;                          		// 0x0304 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __HideToolTip__Delegate;                          		// 0x030C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __GetLeft__Delegate;                              		// 0x0314 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __GetTop__Delegate;                               		// 0x031C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __GetWidth__Delegate;                             		// 0x0324 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __GetHeight__Delegate;                            		// 0x032C ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SetTip ( struct FString NewTip );                 		// [ FUNC_Final | FUNC_Native ] XInterface.GUIToolTip.SetTip
	 float                     GetTopBelowCursor ( class UCanvas* C );           		//  XInterface.GUIToolTip.GetTopBelowCursor
	 float                     GetTopAboveCursor ( class UCanvas* C );           		//  XInterface.GUIToolTip.GetTopAboveCursor
	 float                     GetHeight ( class UCanvas* C );                   		//  XInterface.GUIToolTip.GetHeight
	 float                     GetWidth ( class UCanvas* C );                    		//  XInterface.GUIToolTip.GetWidth
	 float                     GetTop ( class UCanvas* C );                      		//  XInterface.GUIToolTip.GetTop
	 float                     GetLeft ( class UCanvas* C );                     		//  XInterface.GUIToolTip.GetLeft
	 void                      eventUpdatePosition ( class UCanvas* C );         		// [ FUNC_Event ] XInterface.GUIToolTip.UpdatePosition
	 void                      HideToolTip (  );                                 		//  XInterface.GUIToolTip.HideToolTip
	 void                      ShowToolTip (  );                                 		//  XInterface.GUIToolTip.ShowToolTip
	 void                      Tick ( float RealSeconds );                       		//  XInterface.GUIToolTip.Tick
	 bool                      InternalLeaveArea (  );                           		//  XInterface.GUIToolTip.InternalLeaveArea
	 bool                      LeaveArea (  );                                   		//  XInterface.GUIToolTip.LeaveArea
	 class UGUIToolTip*        InternalEnterArea (  );                           		//  XInterface.GUIToolTip.InternalEnterArea
	 class UGUIToolTip*        EnterArea (  );                                   		//  XInterface.GUIToolTip.EnterArea

	// Public Imports
	UGUIToolTip(class UGUIToolTip const &);
	UGUIToolTip(void);
	class UGUIToolTip &  operator=(class UGUIToolTip const &);
	static void  InternalConstructor(void *);
	void  SetTip(class FString &);
	static class UClass *  StaticClass(void);
	class UGUIToolTip *  delegateEnterArea(void);
	float  delegateGetHeight(class UCanvas *);
	float  delegateGetLeft(class UCanvas *);
	float  delegateGetTop(class UCanvas *);
	float  delegateGetWidth(class UCanvas *);
	void  delegateHideToolTip(void);
	unsigned long  delegateLeaveArea(void);
	void  delegateShowToolTip(void);
	void  delegateTick(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0078

// Class XInterface.StateButton
class DLL_IMPORT UStateButton : public UGUIButton
{
public:
	unsigned char                                      _0x02F4[ 0x18 ];                                  		// 0x02F4 ( 0x0018 )

	// Public Imports
	UStateButton(class UStateButton const &);
	UStateButton(void);
	class UStateButton &  operator=(class UStateButton const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class XInterface.GUIController
class DLL_IMPORT UGUIController : public UBaseGUIController
{
public:
	class UGUIPage*                                    SaveFadeOutPage;                                  		// 0x0070 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bSaveCancelled:1;                                 		// 0x0074 ( 0x0004 )  [0x00000001]
	class UBTTcpLink_Channel*                          TcpHandler;                                       		// 0x0078 ( 0x0004 ) 
	int                                                FONT_NUM;                                         		// 0x007C ( 0x0004 ) [ CPF_Const ]
	int                                                STYLE_NUM;                                        		// 0x0080 ( 0x0004 ) [ CPF_Const ]
	int                                                CURSOR_NUM;                                       		// 0x0084 ( 0x0004 ) [ CPF_Const ]
	class TArray< struct FProfileStruct >              Profilers;                                        		// 0x0088 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FFloatBox                                   MouseCursorBounds;                                		// 0x0094 ( 0x0010 ) [ CPF_Const ]
	class TArray< struct FVector >                     MouseCursorOffset;                                		// 0x00A4 ( 0x000C ) [ CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UGUIPage* >                    MenuStack;                                        		// 0x00B0 ( 0x000C ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UGUIPage* >                    PersistentStack;                                  		// 0x00BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UGUIFont* >                    FontStack;                                        		// 0x00C8 ( 0x000C ) [ CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UGUIStyles* >                  StyleStack;                                       		// 0x00D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UMaterial* >                   MouseCursors;                                     		// 0x00E0 ( 0x000C ) [ CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UMaterial* >                   ImageList;                                        		// 0x00EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     DefaultStyleNames;                                		// 0x00F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     StyleNames;                                       		// 0x0104 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FAutoLoadMenu >               AutoLoad;                                         		// 0x0110 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FRestoreMenuItem >            RestoreMenus;                                     		// 0x011C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FDesignModeHint >             DesignModeHints;                                  		// 0x0128 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              MenuMouseSens;                                    		// 0x0134 ( 0x0004 ) 
	float                                              MouseX;                                           		// 0x0138 ( 0x0004 ) 
	float                                              MouseY;                                           		// 0x013C ( 0x0004 ) 
	float                                              LastMouseX;                                       		// 0x0140 ( 0x0004 ) 
	float                                              LastMouseY;                                       		// 0x0144 ( 0x0004 ) 
	float                                              DblClickWindow;                                   		// 0x0148 ( 0x0004 ) 
	float                                              LastClickTime;                                    		// 0x014C ( 0x0004 ) 
	float                                              ButtonRepeatDelay;                                		// 0x0150 ( 0x0004 ) 
	float                                              RepeatDelta;                                      		// 0x0154 ( 0x0004 ) 
	float                                              RepeatTime;                                       		// 0x0158 ( 0x0004 ) 
	float                                              CursorFade;                                       		// 0x015C ( 0x0004 ) 
	float                                              FastCursorFade;                                   		// 0x0160 ( 0x0004 ) 
	int                                                MaxSimultaneousPings;                             		// 0x0164 ( 0x0004 ) 
	int                                                FastCursorStep;                                   		// 0x0168 ( 0x0004 ) 
	int                                                ResX;                                             		// 0x016C ( 0x0004 ) [ CPF_Const ]
	int                                                ResY;                                             		// 0x0170 ( 0x0004 ) [ CPF_Const ]
	int                                                LastClickX;                                       		// 0x0174 ( 0x0004 ) 
	int                                                LastClickY;                                       		// 0x0178 ( 0x0004 ) 
	int                                                CursorStep;                                       		// 0x017C ( 0x0004 ) 
	void*                                              Designer;                                         		// 0x0180 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              PawnDesigner;                                     		// 0x0184 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              WeaponDesigner;                                   		// 0x0188 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class USound*                                      MouseOverSound;                                   		// 0x018C ( 0x0004 ) 
	class USound*                                      ClickSound;                                       		// 0x0190 ( 0x0004 ) 
	class USound*                                      EditSound;                                        		// 0x0194 ( 0x0004 ) 
	class USound*                                      UpSound;                                          		// 0x0198 ( 0x0004 ) 
	class USound*                                      DownSound;                                        		// 0x019C ( 0x0004 ) 
	class USound*                                      DragSound;                                        		// 0x01A0 ( 0x0004 ) 
	class USound*                                      FadeSound;                                        		// 0x01A4 ( 0x0004 ) 
	class USound*                                      ItemEquipSuccessSound;                            		// 0x01A8 ( 0x0004 ) 
	class USound*                                      ItemEquipFailSound;                               		// 0x01AC ( 0x0004 ) 
	class USound*                                      ItemTakeoffSound;                                 		// 0x01B0 ( 0x0004 ) 
	class USound*                                      ItemAddPartsSound;                                		// 0x01B4 ( 0x0004 ) 
	class USound*                                      ItemRepairSound;                                  		// 0x01B8 ( 0x0004 ) 
	class USound*                                      ItemClickSound;                                   		// 0x01BC ( 0x0004 ) 
	class USound*                                      ItemBuySound;                                     		// 0x01C0 ( 0x0004 ) 
	class USound*                                      ItemSellSound;                                    		// 0x01C4 ( 0x0004 ) 
	class USound*                                      TrophyWindowSound;                                		// 0x01C8 ( 0x0004 ) 
	class USound*                                      TrophyReceiverUserSound;                          		// 0x01CC ( 0x0004 ) 
	class UGUIPage*                                    ActivePage;                                       		// 0x01D0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIComponent*                               FocusedControl;                                   		// 0x01D4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIComponent*                               ActiveControl;                                    		// 0x01D8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIComponent*                               SkipControl;                                      		// 0x01DC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline | CPF_Deprecated ]
	class UGUIComponent*                               MoveControl;                                      		// 0x01E0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIComponent*                               DropSource;                                       		// 0x01E4 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIComponent*                               DropTarget;                                       		// 0x01E8 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIContextMenu*                             ContextMenu;                                      		// 0x01EC ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UGUIToolTip*                                 MouseOver;                                        		// 0x01F0 ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	class UMaterial*                                   WhiteBorder;                                      		// 0x01F4 ( 0x0004 ) 
	struct FString                                     GameResolution;                                   		// 0x01F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     LastGameType;                                     		// 0x0204 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	struct FString                                     RequestDataMenu;                                  		// 0x0210 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ArrayPropertyMenu;                                		// 0x021C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DynArrayPropertyMenu;                             		// 0x0228 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FilterMenu;                                       		// 0x0234 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MapVotingMenu;                                    		// 0x0240 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     KickVotingMenu;                                   		// 0x024C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MatchSetupMenu;                                   		// 0x0258 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     EditFavoriteMenu;                                 		// 0x0264 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     MainMenuOptions;                                  		// 0x0270 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DesignerMenu;                                     		// 0x027C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      RepeatKey;                                        		// 0x0288 ( 0x0001 ) 
	unsigned long                                      bIgnoreNextRelease:1;                             		// 0x028C ( 0x0004 )  [0x00000001]
	unsigned long                                      ShiftPressed:1;                                   		// 0x028C ( 0x0004 )  [0x00000002]
	unsigned long                                      AltPressed:1;                                     		// 0x028C ( 0x0004 )  [0x00000004]
	unsigned long                                      CtrlPressed:1;                                    		// 0x028C ( 0x0004 )  [0x00000008]
	unsigned long                                      bModulateStackedMenus:1;                          		// 0x028C ( 0x0004 )  [0x00000010]
	unsigned long                                      bQuietMenu:1;                                     		// 0x028C ( 0x0004 )  [0x00000020]
	unsigned long                                      bNoToolTips:1;                                    		// 0x028C ( 0x0004 )  [0x00000040]
	unsigned long                                      bDesignModeToolTips:1;                            		// 0x028C ( 0x0004 )  [0x00000080]
	unsigned long                                      bAutoRefreshBrowser:1;                            		// 0x028C ( 0x0004 )  [0x00000100]
	unsigned long                                      bModAuthor:1;                                     		// 0x028C ( 0x0004 )  [0x00000200]
	unsigned long                                      bExpertMode:1;                                    		// 0x028C ( 0x0004 )  [0x00000400]
	unsigned long                                      bDesignMode:1;                                    		// 0x028C ( 0x0004 )  [0x00000800]
	unsigned long                                      bInteractiveMode:1;                               		// 0x028C ( 0x0004 )  [0x00001000]
	unsigned long                                      bHighlightCurrent:1;                              		// 0x028C ( 0x0004 )  [0x00002000]
	unsigned long                                      bDrawFullPaths:1;                                 		// 0x028C ( 0x0004 )  [0x00004000]
	unsigned long                                      MainNotWanted:1;                                  		// 0x028C ( 0x0004 )  [0x00008000]
	unsigned long                                      bCurMenuInitialized:1;                            		// 0x028C ( 0x0004 )  [0x00010000]
	unsigned long                                      bForceMouseCheck:1;                               		// 0x028C ( 0x0004 )  [0x00020000]
	unsigned long                                      bIgnoreUntilPress:1;                              		// 0x028C ( 0x0004 )  [0x00040000]
	unsigned long                                      bSnapCursor:1;                                    		// 0x028C ( 0x0004 )  [0x00080000]
	float                                              RenderDelta;                                      		// 0x0290 ( 0x0004 ) 
	float                                              LastRenderTime;                                   		// 0x0294 ( 0x0004 ) 
	unsigned long                                      bFixedMouseSize:1;                                		// 0x0298 ( 0x0004 )  [0x00000001]
	unsigned char                                      KeyDown[ 0xFF ];                                  		// 0x029C ( 0x00FF ) [ CPF_Const ]
	class TArray< class UClass* >                      RegisteredClasses;                                		// 0x039C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bECEEdition:1;                                    		// 0x03A8 ( 0x0004 )  [0x00000001]
	int                                                iTempWeaponId;                                    		// 0x03AC ( 0x0004 ) 
	class TArray< class UGUIPage* >                    SavedPage;                                        		// 0x03B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnNeedRawKeyPress__Delegate;                    		// 0x03BC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __AddBuddy__Delegate;                             		// 0x03C4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __PressedCloseWndBtn__Delegate;                   		// 0x03CC ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 class UGUIQuestionPage*   ShowQuestionDialog ( struct FString Question, unsigned char Buttons, unsigned char defButton );		//  XInterface.GUIController.ShowQuestionDialog
	 bool                      KeyPressed ( unsigned char iKey );                		// [ FUNC_Final ] XInterface.GUIController.KeyPressed
	 bool                      SearchBinds ( struct FString BindAliasMask, class TArray< struct FString >* BindAliases );		// [ FUNC_Final ] XInterface.GUIController.SearchBinds
	 bool                      GetAssignedKeys ( struct FString BindAlias, class TArray< struct FString >* BindKeyNames, class TArray< struct FString >* LocalizedBindKeyNames );		// [ FUNC_Final ] XInterface.GUIController.GetAssignedKeys
	 bool                      GetCurrentBind ( struct FString BindKeyName, struct FString* BindKeyValue );		// [ FUNC_Final ] XInterface.GUIController.GetCurrentBind
	 bool                      KeyNameFromIndex ( unsigned char iKey, struct FString* KeyName, struct FString* LocalizedKeyName );		// [ FUNC_Final ] XInterface.GUIController.KeyNameFromIndex
	 bool                      SetKeyBind ( struct FString BindKeyName, struct FString BindKeyValue );		// [ FUNC_Final ] XInterface.GUIController.SetKeyBind
	 struct FString            GetQuitPage (  );                                 		//  XInterface.GUIController.GetQuitPage
	 struct FString            GetSettingsPage (  );                             		//  XInterface.GUIController.GetSettingsPage
	 struct FString            GetModPage (  );                                  		//  XInterface.GUIController.GetModPage
	 struct FString            GetInstantActionPage (  );                        		//  XInterface.GUIController.GetInstantActionPage
	 struct FString            GetMultiplayerPage (  );                          		//  XInterface.GUIController.GetMultiplayerPage
	 struct FString            GetServerBrowserPage (  );                        		//  XInterface.GUIController.GetServerBrowserPage
	 struct FString            GetSinglePlayerPage (  );                         		//  XInterface.GUIController.GetSinglePlayerPage
	 struct FString            GetMainMenuClass (  );                            		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.GetMainMenuClass
	 void                      eventValidate (  );                               		// [ FUNC_Event ] XInterface.GUIController.Validate
	 void                      ConsolidateMenus (  );                            		//  XInterface.GUIController.ConsolidateMenus
	 void                      PurgeComponentClasses (  );                       		//  XInterface.GUIController.PurgeComponentClasses
	 void                      PurgeObjectReferences (  );                       		//  XInterface.GUIController.PurgeObjectReferences
	 void                      VerifyStack (  );                                 		//  XInterface.GUIController.VerifyStack
	 void                      CloseOverlays (  );                               		//  XInterface.GUIController.CloseOverlays
	 void                      eventNotifyLevelChange (  );                      		// [ FUNC_Event ] XInterface.GUIController.NotifyLevelChange
	 void                      eventSetRequiredGameResolution ( struct FString GameRes );		// [ FUNC_Event ] XInterface.GUIController.SetRequiredGameResolution
	 bool                      eventNeedsMenuResolution (  );                    		// [ FUNC_Event ] XInterface.GUIController.NeedsMenuResolution
	 bool                      eventCanShowHints (  );                           		// [ FUNC_Event ] XInterface.GUIController.CanShowHints
////	 bool                      HasMouseMoved ( float ErrorMargin );              		//  XInterface.GUIController.HasMouseMoved
	 void                      eventMoveFocused ( class UGUIComponent* C, int bmLeft, int bmTop, int bmWidth, int bmHeight, float ClipX, float ClipY, float val );		// [ FUNC_Event ] XInterface.GUIController.MoveFocused
	 void                      ResetFocus (  );                                  		//  XInterface.GUIController.ResetFocus
	 void                      eventChangeFocus ( class UGUIComponent* Who );    		// [ FUNC_Event ] XInterface.GUIController.ChangeFocus
	 void                      SetControllerStatus ( bool On );                  		//  XInterface.GUIController.SetControllerStatus
	 void                      PerformRestore (  );                              		//  XInterface.GUIController.PerformRestore
	 void                      SaveRestorePages (  );                            		//  XInterface.GUIController.SaveRestorePages
	 int                       Count (  );                                       		//  XInterface.GUIController.Count
	 void                      eventCloseAll ( bool bCancel, bool bForced );     		// [ FUNC_Event ] XInterface.GUIController.CloseAll
	 bool                      ClickCloseWndBtn (  );                            		//  XInterface.GUIController.ClickCloseWndBtn
	 void                      PressedCloseWndBtn (  );                          		//  XInterface.GUIController.PressedCloseWndBtn
	 bool                      eventCloseMenu ( bool bCancelled );               		// [ FUNC_Event ] XInterface.GUIController.CloseMenu
	 bool                      eventRemoveMenu ( class UGUIPage* Menu, bool bCancelled );		// [ FUNC_Event ] XInterface.GUIController.RemoveMenu
	 bool                      RemoveMenuAt ( int Index, bool bCancelled );      		//  XInterface.GUIController.RemoveMenuAt
	 void                      eventPopMenu ( int Index, class UGUIPage* CurMenu, bool bCancelled );		// [ FUNC_Event ] XInterface.GUIController.PopMenu
	 void                      eventPushMenu ( int Index, class UGUIPage* NewMenu, struct FString Param1, struct FString Param2 );		// [ FUNC_Event ] XInterface.GUIController.PushMenu
	 void                      ReplaceMenu2 ( struct FString NewMenuName, bool bCancelled );		//  XInterface.GUIController.ReplaceMenu2
	 void                      ReplaceMenu2_FadedOut (  );                       		//  XInterface.GUIController.ReplaceMenu2_FadedOut
	 void                      CloseMenuPage ( class UGUIPage* SelectPage, bool bCancelled );		//  XInterface.GUIController.CloseMenuPage
	 bool                      eventReplaceMenu ( struct FString NewMenuName, struct FString Param1, struct FString Param2, bool bCancelled );		// [ FUNC_Event ] XInterface.GUIController.ReplaceMenu
	 void                      eventAutoLoadMenus (  );                          		// [ FUNC_Event ] XInterface.GUIController.AutoLoadMenus
	 bool                      OpenMenuByObject ( class UGUIPage* NewMenu, struct FString Param1, struct FString Param2 );		//  XInterface.GUIController.OpenMenuByObject
	 bool                      eventOpenMenu ( struct FString NewMenuName, struct FString Param1, struct FString Param2 );		// [ FUNC_Event ] XInterface.GUIController.OpenMenu
	 class UGUIPage*           eventCreateMenu ( struct FString NewMenuName );   		// [ FUNC_Event ] XInterface.GUIController.CreateMenu
	 class UGUIPage*           GetLastMenu (  );                                 		//  XInterface.GUIController.GetLastMenu
	 void                      LogControlInfo ( class UGUIComponent* Sender );   		//  XInterface.GUIController.LogControlInfo
	 void                      LogControllerInfo (  );                           		//  XInterface.GUIController.LogControllerInfo
	 void                      LogMenuStack (  );                                		//  XInterface.GUIController.LogMenuStack
	 class UGUIPage*           GetMenuByIndex ( int Index );                     		//  XInterface.GUIController.GetMenuByIndex
	 class UGUIPage*           FindMenuByClass ( class UClass* PageClass );      		//  XInterface.GUIController.FindMenuByClass
	 class UGUIPage*           FindPersistentMenuByClass ( class UClass* PageClass );		//  XInterface.GUIController.FindPersistentMenuByClass
	 int                       eventFindPersistentMenuIndex ( class UGUIPage* Menu );		// [ FUNC_Event ] XInterface.GUIController.FindPersistentMenuIndex
	 int                       eventFindMenuIndex ( class UGUIPage* Menu );      		// [ FUNC_Event ] XInterface.GUIController.FindMenuIndex
	 int                       eventFindMenuIndexByName ( struct FString MenuClass );		// [ FUNC_Event ] XInterface.GUIController.FindMenuIndexByName
	 class UGUIPage*           eventFindPersistentMenuByName ( struct FString MenuClass );		// [ FUNC_Event ] XInterface.GUIController.FindPersistentMenuByName
	 class UClass*             eventAddComponentClass ( struct FString ClassName );		// [ FUNC_Event ] XInterface.GUIController.AddComponentClass
	 bool                      RegisterStyle ( class UClass* StyleClass, bool bTemporary );		//  XInterface.GUIController.RegisterStyle
	 void                      PrecachePlayerRecords (  );                       		//  XInterface.GUIController.PrecachePlayerRecords
	 void                      eventInitializeController (  );                   		// [ FUNC_Event ] XInterface.GUIController.InitializeController
	 class UGUIPage*           TopPage (  );                                     		//  XInterface.GUIController.TopPage
	 void                      GetTeamSymbolList ( bool bNoSinglePlayer, class TArray< struct FString >* SymbolNames );		// [ FUNC_Final ] XInterface.GUIController.GetTeamSymbolList
	 struct FString            LoadDecoText ( struct FString PackageName, struct FString DecoTextName );		//  XInterface.GUIController.LoadDecoText
	 bool                      CheckForECE (  );                                 		// [ FUNC_Native ] XInterface.GUIController.CheckForECE
	 bool                      AuthroizeFirewall (  );                           		// [ FUNC_Native ] XInterface.GUIController.AuthroizeFirewall
	 bool                      CheckFirewall (  );                               		// [ FUNC_Native ] XInterface.GUIController.CheckFirewall
	 void                      LaunchURL ( struct FString URL );                 		// [ FUNC_Native ] XInterface.GUIController.LaunchURL
	 void                      GetMapList ( struct FString Prefix, class UGUIList* List, bool bDecoText );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.GetMapList
	 void                      GetWeaponList ( class TArray< class UClass* >* WeaponClass, class TArray< struct FString >* WeaponDesc );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.GetWeaponList
	 void                      SaveOwnageList ( class TArray< struct FeOwnageMap > Maps );		// [ FUNC_Native ] XInterface.GUIController.SaveOwnageList
	 void                      GetOwnageList ( class TArray< int >* RLevel, class TArray< struct FString >* MNames, class TArray< struct FString >* MDesc, class TArray< struct FString >* mURL );		// [ FUNC_Native ] XInterface.GUIController.GetOwnageList
	 bool                      GetDEMHeader ( struct FString DemoName, struct FString* MapName, struct FString* GameType, int* ScoreLimit, int* TimeLimit, int* ClientSide, struct FString* RecordedBy, struct FString* TimeStamp, struct FString* ReqPackages );		// [ FUNC_Native ] XInterface.GUIController.GetDEMHeader
	 void                      GetDEMList ( class TArray< struct FString >* DEMFiles );		// [ FUNC_Native ] XInterface.GUIController.GetDEMList
	 void                      Profile ( struct FString ProfileName );           		// [ FUNC_Native ] XInterface.GUIController.Profile
//	 void                      SetMoveControl ( class UGUIComponent* C );        		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.SetMoveControl
	 void                      PlayInterfaceSound ( unsigned char soundType );   		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.PlayInterfaceSound
	 void                      GetOGGList ( class TArray< struct FString >* OGGFiles );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.GetOGGList
	 void                      ResetKeyboard (  );                               		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.ResetKeyboard
	 void                      GetProfileList ( struct FString Prefix, class TArray< struct FString >* ProfileList );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.GetProfileList
	 void                      ResetInput (  );                                  		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.ResetInput
//	 void                      ResetDesigner (  );                               		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.ResetDesigner
	 bool                      SetRenderDevice ( struct FString NewRenderDevice );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.SetRenderDevice
	 struct FString            GetCurrentRes (  );                               		// [ FUNC_Final | FUNC_Native ] XInterface.GUIController.GetCurrentRes
	 class UGUIStyles*         eventGetStyle ( struct FString StyleName, unsigned char* FontScale );		// [ FUNC_Event | FUNC_Native ] XInterface.GUIController.GetStyle
	 class UGUIFont*           eventGetMenuFont ( struct FString FontName );     		// [ FUNC_Event | FUNC_Native ] XInterface.GUIController.GetMenuFont
	 void                      AddBuddy ( struct FString NewBuddyName );         		//  XInterface.GUIController.AddBuddy
	 bool                      OnNeedRawKeyPress ( unsigned char NewKey );       		//  XInterface.GUIController.OnNeedRawKeyPress
	 void                      PopPage (  );                                     		//  XInterface.GUIController.PopPage
	 void                      PushPage (  );                                    		//  XInterface.GUIController.PushPage

	// Public Imports
	UGUIController(class UGUIController const &);
	UGUIController(void);
	class UGUIController &  operator=(class UGUIController const &);
	void  CreatePropertyWindow(unsigned char);
	int  DesignKeyEvent(unsigned char,unsigned char,float);
	int  DesignerVisible(unsigned char);
	void  FocusToPropertyWindow(unsigned char,bool);
	void  GetCursorPos(int &,int &);
	int  HasMouseMoved(float);
	void  HidePropertyWindow(void);
	static void  InternalConstructor(void *);
	void  PlayComponentSound(unsigned char);
	void  PlayInterfaceSound(class USound *);
	void  Profile(class FString &);
	void  RenderDesignMode(class UCanvas *);
	void  ResetDesigner(void);
	void  SetMoveControl(class UGUIComponent *);
	int  ShowProperties(class UGUIComponent *,unsigned char);
	static class UClass *  StaticClass(void);
	class UGUIComponent *  UnderCursor(float,float);
	void  delegateAddBuddy(class FString const &);
	unsigned long  delegateOnNeedRawKeyPress(unsigned char);
	void  delegatePressedCloseWndBtn(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0364

// Class XInterface.GUIFont
class DLL_IMPORT UGUIFont : public UGUI
{
public:
	struct FString                                     KeyName;                                          		// 0x0054 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bFixedSize:1;                                     		// 0x0060 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bScaled:1;                                        		// 0x0060 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                NormalXRes;                                       		// 0x0064 ( 0x0004 ) [ CPF_Edit ]
	int                                                FallBackRes;                                      		// 0x0068 ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FString >                     FontArrayNames;                                   		// 0x006C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< class UFont* >                       FontArrayFonts;                                   		// 0x0078 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 class UFont*              LoadFont ( int i );                               		//  XInterface.GUIFont.LoadFont
	 class UFont*              LoadFontStatic ( int i );                         		//  XInterface.GUIFont.LoadFontStatic
	 class UFont*              eventGetFont ( int XRes );                        		// [ FUNC_Event | FUNC_Native ] XInterface.GUIFont.GetFont

	// Public Imports
	UGUIFont(class UGUIFont const &);
	class UGUIFont &  operator=(class UGUIFont const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0030

// Class XInterface.GUIStyles
class DLL_IMPORT UGUIStyles : public UGUI
{
public:
	struct FString                                     KeyName;                                          		// 0x0054 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	struct FString                                     AlternateKeyName[ 0x02 ];                         		// 0x0060 ( 0x0018 ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	struct FString                                     FontNames[ 0x0F ];                                		// 0x0078 ( 0x00B4 ) [ CPF_Edit | CPF_NeedCtorLink | CPF_NoExport ]
	class UGUIFont*                                    Fonts[ 0x0F ];                                    		// 0x012C ( 0x003C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	int                                                FontSizes[ 0x05 ];                                		// 0x0168 ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	class FColor                                       FontColors[ 0x05 ];                               		// 0x017C ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	class FColor                                       FontBKColors[ 0x05 ];                             		// 0x0190 ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	class FColor                                       FontShadowColor[ 0x05 ];                          		// 0x01A4 ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	int                                                FontShadowOffset[ 0x05 ];                         		// 0x01B8 ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	class FColor                                       ImgColors[ 0x05 ];                                		// 0x01CC ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	unsigned char                                      RStyles[ 0x05 ];                                  		// 0x01E0 ( 0x0005 ) [ CPF_Edit | CPF_NoExport ]
	class UMaterial*                                   Images[ 0x05 ];                                   		// 0x01E8 ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	unsigned char                                      ImgStyle[ 0x05 ];                                 		// 0x01FC ( 0x0005 ) [ CPF_Edit | CPF_NoExport ]
	float                                              ImgWidths[ 0x05 ];                                		// 0x0204 ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	float                                              ImgHeights[ 0x05 ];                               		// 0x0218 ( 0x0014 ) [ CPF_Edit | CPF_NoExport ]
	int                                                BorderOffsets[ 0x04 ];                            		// 0x022C ( 0x0010 ) [ CPF_Edit | CPF_NoExport ]
	unsigned long                                      bTemporary:1;                                     		// 0x023C ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_NoExport ]
	struct FScriptDelegate                             __OnDraw__Delegate;                               		// 0x0240 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnDrawText__Delegate;                           		// 0x0248 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      eventInitialize (  );                             		// [ FUNC_Event ] XInterface.GUIStyles.Initialize
	 void                      btrDrawTextStyles ( class UCanvas* Canvas, unsigned char MenuState, float Left, float Top, float width, float Height, unsigned char Align, struct FString Text, unsigned char FontScale, int FontSize, float R, float G, float B, float A );		// [ FUNC_Native ] XInterface.GUIStyles.btrDrawTextStyles
	 void                      btrTextSizeStyles ( class UCanvas* Canvas, unsigned char MenuState, struct FString Text, unsigned char FontScale, int FontSize, float* XL, float* YL );		// [ FUNC_Native ] XInterface.GUIStyles.btrTextSizeStyles
	 void                      TextSize ( class UCanvas* Canvas, unsigned char MenuState, struct FString Text, unsigned char FontScale, float* XL, float* YL );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIStyles.TextSize
	 void                      DrawText ( class UCanvas* Canvas, unsigned char MenuState, float Left, float Top, float width, float Height, unsigned char Align, struct FString Text, unsigned char FontScale );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIStyles.DrawText
//	 void                      Draw ( class UCanvas* Canvas, unsigned char MenuState, float Left, float Top, float width, float Height );		// [ FUNC_Final | FUNC_Native ] XInterface.GUIStyles.Draw
	 bool                      OnDrawText ( class UCanvas* Canvas, unsigned char MenuState, float Left, float Top, float width, float Height, unsigned char Align, struct FString Text, unsigned char FontScale );		//  XInterface.GUIStyles.OnDrawText
	 bool                      OnDraw ( class UCanvas* Canvas, unsigned char MenuState, float Left, float Top, float width, float Height );		//  XInterface.GUIStyles.OnDraw

	// Public Imports
	UGUIStyles(class UGUIStyles const &);
	UGUIStyles(void);
	class UGUIStyles &  operator=(class UGUIStyles const &);
	void  Draw(class UCanvas *,unsigned char,float,float,float,float);
	void  DrawTextW(class UCanvas *,unsigned char,float,float,float,float,unsigned char,unsigned short const *,unsigned char);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  TextSize(class UCanvas *,unsigned char,unsigned short const *,float &,float &,unsigned char);
	void  btrDrawTextStyles(class UCanvas *,unsigned char,float,float,float,float,unsigned char,unsigned short const *,unsigned char);
	void  btrTextSizeStyles(class UCanvas *,unsigned char,unsigned short const *,float &,float &,unsigned char,int);
	unsigned long  delegateOnDraw(class UCanvas *,unsigned char,float,float,float,float);
	unsigned long  delegateOnDrawText(class UCanvas *,unsigned char,float,float,float,float,unsigned char,class FString const &,unsigned char);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x01FC

// Class XInterface.PropertyManagerBase
class DLL_IMPORT UPropertyManagerBase : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x04 ];                                  		// 0x002C ( 0x0004 )

	// Public Imports
	UPropertyManagerBase(class UPropertyManagerBase const &);
	UPropertyManagerBase(void);
	class UPropertyManagerBase &  operator=(class UPropertyManagerBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class XInterface.UT2MenuFont
class DLL_IMPORT UUT2MenuFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2DefaultFont
class DLL_IMPORT UUT2DefaultFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2LargeFont
class DLL_IMPORT UUT2LargeFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2HeaderFont
class DLL_IMPORT UUT2HeaderFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2SmallFont
class DLL_IMPORT UUT2SmallFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2MidGameFont
class DLL_IMPORT UUT2MidGameFont : public UGUIFont
{
public:
	int                                                FontScreenWidth[ 0x07 ];                          		// 0x0084 ( 0x001C ) 

	// UScript Functions
	 class UFont*              eventGetFont ( int XRes );                        		// [ FUNC_Event ] XInterface.UT2MidGameFont.GetFont
	 class UFont*              GetMidGameFont ( int XRes );                      		//  XInterface.UT2MidGameFont.GetMidGameFont
}; // Size: 0x001C

// Class XInterface.UT2SmallHeaderFont
class DLL_IMPORT UUT2SmallHeaderFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2ServerListFont
class DLL_IMPORT UUT2ServerListFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2IRCFont
class DLL_IMPORT UUT2IRCFont : public UGUIFont
{
public:
}; // Size: 0x0000

// Class XInterface.UT2K4GUIPage
class DLL_IMPORT UUT2K4GUIPage : public UGUIPage
{
public:
	class USound*                                      PopInSound;                                       		// 0x0354 ( 0x0004 ) 
	class USound*                                      SlideInSound;                                     		// 0x0358 ( 0x0004 ) 
	class USound*                                      FadeInSound;                                      		// 0x035C ( 0x0004 ) 
	class USound*                                      BeepSound;                                        		// 0x0360 ( 0x0004 ) 
}; // Size: 0x0010

// Class XInterface.FloatingImage
class DLL_IMPORT UFloatingImage : public UGUIImage
{
public:
}; // Size: 0x0000

// Class XInterface.GUIHeader
class DLL_IMPORT UGUIHeader : public UGUITitleBar
{
public:
}; // Size: 0x0000

// Class XInterface.GUIVertScrollBar
class DLL_IMPORT UGUIVertScrollBar : public UGUIScrollBarBase
{
public:

	// UScript Functions
	 void                      ZoneClick ( float Delta );                        		//  XInterface.GUIVertScrollBar.ZoneClick
	 bool                      GripPreDraw ( class UGUIComponent* Sender );      		//  XInterface.GUIVertScrollBar.GripPreDraw
	 void                      GripPressed ( class UGUIComponent* Sender, bool IsRepeat );		//  XInterface.GUIVertScrollBar.GripPressed
}; // Size: 0x0000

// Class XInterface.GUIVertScrollZone
class DLL_IMPORT UGUIVertScrollZone : public UGUIScrollZoneBase
{
public:

	// UScript Functions
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIVertScrollZone.InternalOnClick
}; // Size: 0x0000

// Class XInterface.GUIVertScrollButton
class DLL_IMPORT UGUIVertScrollButton : public UGUIScrollButtonBase
{
public:

	// UScript Functions
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIVertScrollButton.InitComponent
}; // Size: 0x0000

// Class XInterface.GUIVertGripButton
class DLL_IMPORT UGUIVertGripButton : public UGUIGripButtonBase
{
public:

	// UScript Functions
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* MyComponent );		//  XInterface.GUIVertGripButton.InitComponent
}; // Size: 0x0000

// Class XInterface.STY_ListSelection
class DLL_IMPORT USTY_ListSelection : public UGUIStyles
{
public:

	// UScript Functions
	 void                      eventInitialize (  );                             		// [ FUNC_Event ] XInterface.STY_ListSelection.Initialize
}; // Size: 0x0000

// Class XInterface.ExtendedConsole
class DLL_IMPORT UExtendedConsole : public UConsole
{
public:
	int                                                MaxScrollbackSize;                                		// 0x045C ( 0x0004 ) 
	class TArray< struct FString >                     Scrollback;                                       		// 0x0460 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                SBHead;                                           		// 0x046C ( 0x0004 ) 
	int                                                SBPos;                                            		// 0x0470 ( 0x0004 ) 
	unsigned long                                      bCtrl:1;                                          		// 0x0474 ( 0x0004 )  [0x00000001]
	unsigned long                                      bAlt:1;                                           		// 0x0474 ( 0x0004 )  [0x00000002]
	unsigned long                                      bShift:1;                                         		// 0x0474 ( 0x0004 )  [0x00000004]
	unsigned long                                      bConsoleHotKey:1;                                 		// 0x0474 ( 0x0004 )  [0x00000008]
	float                                              ConsoleSoundVol;                                  		// 0x0478 ( 0x0004 ) 
	struct FString                                     AddedCurrentHead;                                 		// 0x047C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AddedCurrentTail;                                 		// 0x0488 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ServerFullMsg;                                    		// 0x0494 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              SMLineSpace;                                      		// 0x04A0 ( 0x0004 ) 
	unsigned char                                      SMState;                                          		// 0x04A4 ( 0x0001 ) 
	struct FName                                       SMType;                                           		// 0x04A8 ( 0x0004 ) 
	int                                                SMIndex;                                          		// 0x04AC ( 0x0004 ) 
	struct FString                                     SMCallsign;                                       		// 0x04B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                SMOffset;                                         		// 0x04BC ( 0x0004 ) 
	struct FString                                     SMNameArray[ 0x30 ];                              		// 0x04C0 ( 0x0240 ) [ CPF_NeedCtorLink ]
	int                                                SMIndexArray[ 0x30 ];                             		// 0x0700 ( 0x00C0 ) 
	int                                                SMArraySize;                                      		// 0x07C0 ( 0x0004 ) 
	float                                              SMOriginX;                                        		// 0x07C4 ( 0x0004 ) 
	float                                              SMOriginY;                                        		// 0x07C8 ( 0x0004 ) 
	float                                              SMMargin;                                         		// 0x07CC ( 0x0004 ) 
	float                                              SMTab;                                            		// 0x07D0 ( 0x0004 ) 
	struct FString                                     SMStateName[ 0x0A ];                              		// 0x07D4 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SMChannelOptions[ 0x03 ];                         		// 0x084C ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< class AVoiceChatRoom* >              VoiceChannels;                                    		// 0x0870 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SMAllString;                                      		// 0x087C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SMMoreString;                                     		// 0x0888 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class USound*                                      SMOpenSound;                                      		// 0x0894 ( 0x0004 ) 
	class USound*                                      SMAcceptSound;                                    		// 0x0898 ( 0x0004 ) 
	class USound*                                      SMDenySound;                                      		// 0x089C ( 0x0004 ) 
	unsigned char                                      LetterKeys[ 0x0A ];                               		// 0x08A0 ( 0x000A ) 
	unsigned char                                      NumberKeys[ 0x0A ];                               		// 0x08AA ( 0x000A ) 
	unsigned long                                      bSpeechMenuUseLetters:1;                          		// 0x08B4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bSpeechMenuUseMouseWheel:1;                       		// 0x08B4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bSpeechMenuLocked:1;                              		// 0x08B4 ( 0x0004 )  [0x00000004]
	int                                                HighlightRow;                                     		// 0x08B8 ( 0x0004 ) 
	class TArray< struct FServerFavorite >             Favorites;                                        		// 0x08BC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FStoredPassword >             SavedPasswords;                                   		// 0x08C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PasswordPromptMenu;                               		// 0x08D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     LastConnectedServer;                              		// 0x08E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     LastURL;                                          		// 0x08EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FChatStruct >                 ChatMessages;                                     		// 0x08F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ChatMenuClass;                                    		// 0x0904 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UGUIPage*                                    ChatMenu;                                         		// 0x0910 ( 0x0004 ) [ CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bTeamChatOnly:1;                                  		// 0x0914 ( 0x0004 )  [0x00000001]
	class UUT2MusicManager*                            MusicManager;                                     		// 0x0918 ( 0x0004 ) [ CPF_ExportObject | CPF_Transient | CPF_NeedCtorLink | CPF_EditInline ]
	struct FString                                     StatsPromptMenuClass;                             		// 0x091C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MusicManagerClassName;                            		// 0x0928 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     WaitingGameClassName;                             		// 0x0934 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     NeedPasswordMenuClass;                            		// 0x0940 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ServerInfoMenu;                                   		// 0x094C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              FadeClock;                                        		// 0x0958 ( 0x0004 ) 
	float                                              FadeTime;                                         		// 0x095C ( 0x0004 ) 
	class TArray< float >                              DemoPlaybackSpeeds;                               		// 0x0960 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PlaybackText;                                     		// 0x096C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bDemoJogKeys:1;                                   		// 0x0978 ( 0x0004 )  [0x00000001]
	struct FScriptDelegate                             __OnChat__Delegate;                               		// 0x097C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnChatMessage__Delegate;                        		// 0x0984 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnExecAddFavorite__Delegate;                    		// 0x098C ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      execDebugTabOrder (  );                           		// [ FUNC_Exec ] XInterface.ExtendedConsole.DebugTabOrder
	 void                      execDumpLoadingHints ( struct FString Param );    		// [ FUNC_Exec ] XInterface.ExtendedConsole.DumpLoadingHints
	 void                      execDLO ( struct FString ClassName, struct FString ClassType );		// [ FUNC_Exec ] XInterface.ExtendedConsole.DLO
	 bool                      VoiceChatAllowed (  );                            		//  XInterface.ExtendedConsole.VoiceChatAllowed
	 void                      DumpCacheRecords ( struct FString CacheType );    		// [ FUNC_Final ] XInterface.ExtendedConsole.DumpCacheRecords
	 void                      AddMessage ( struct FString Mesg );               		// [ FUNC_Final ] XInterface.ExtendedConsole.AddMessage
	 void                      execDumpRecords ( struct FString Type );          		// [ FUNC_Exec ] XInterface.ExtendedConsole.DumpRecords
	 void                      execDumpPlayInfo ( struct FString Group );        		// [ FUNC_Exec ] XInterface.ExtendedConsole.DumpPlayInfo
	 void                      execMusicMenu (  );                               		// [ FUNC_Exec ] XInterface.ExtendedConsole.MusicMenu
	 void                      execPlayWaitingGame (  );                         		// [ FUNC_Exec ] XInterface.ExtendedConsole.PlayWaitingGame
	 void                      execTeamChatOnly (  );                            		// [ FUNC_Exec ] XInterface.ExtendedConsole.TeamChatOnly
	 void                      execServerInfo (  );                              		// [ FUNC_Exec ] XInterface.ExtendedConsole.ServerInfo
	 void                      execIngameChat (  );                              		// [ FUNC_Exec ] XInterface.ExtendedConsole.IngameChat
	 void                      execSpeechMenuToggle (  );                        		// [ FUNC_Exec ] XInterface.ExtendedConsole.SpeechMenuToggle
	 void                      SaveFavorites (  );                               		//  XInterface.ExtendedConsole.SaveFavorites
	 void                      GetFavorites ( class TArray< struct FServerFavorite >* List );		//  XInterface.ExtendedConsole.GetFavorites
	 bool                      RemoveFavorite ( struct FString IP, int Port, int QueryPort );		//  XInterface.ExtendedConsole.RemoveFavorite
	 bool                      AddFavorite ( struct FServerFavorite NewFav );    		//  XInterface.ExtendedConsole.AddFavorite
	 bool                      InFavorites ( struct FServerFavorite Fav );       		//  XInterface.ExtendedConsole.InFavorites
	 void                      execAddCurrentToFavorites (  );                   		// [ FUNC_Exec ] XInterface.ExtendedConsole.AddCurrentToFavorites
	 void                      OnExecAddFavorite ( struct FServerFavorite Fav ); 		//  XInterface.ExtendedConsole.OnExecAddFavorite
	 void                      execConsoleToggle (  );                           		// [ FUNC_Exec ] XInterface.ExtendedConsole.ConsoleToggle
	 void                      execConsoleClose (  );                            		// [ FUNC_Exec ] XInterface.ExtendedConsole.ConsoleClose
	 void                      execConsoleOpen (  );                             		// [ FUNC_Exec ] XInterface.ExtendedConsole.ConsoleOpen
	 void                      eventNativeConsoleOpen (  );                      		// [ FUNC_Event ] XInterface.ExtendedConsole.NativeConsoleOpen
	 void                      PlayConsoleSound ( class USound* S );             		//  XInterface.ExtendedConsole.PlayConsoleSound
	 bool                      eventKeyEvent ( unsigned char key, unsigned char Action, float Delta );		// [ FUNC_Event ] XInterface.ExtendedConsole.KeyEvent
	 void                      GetNewPlaybackSpeed ( int Dir );                  		//  XInterface.ExtendedConsole.GetNewPlaybackSpeed
	 void                      eventMessage ( struct FString Msg, float MsgLife );		// [ FUNC_Event ] XInterface.ExtendedConsole.Message
	 void                      OnChatMessage ( struct FString Msg );             		//  XInterface.ExtendedConsole.OnChatMessage
	 void                      Chat ( struct FString Msg, float MsgLife, class APlayerReplicationInfo* PRI );		//  XInterface.ExtendedConsole.Chat
	 void                      PostRender ( class UCanvas* Canvas );             		//  XInterface.ExtendedConsole.PostRender
	 void                      execcls (  );                                     		// [ FUNC_Exec ] XInterface.ExtendedConsole.cls
	 void                      eventNotifyLevelChange (  );                      		// [ FUNC_Event ] XInterface.ExtendedConsole.NotifyLevelChange
	 void                      eventConnectFailure ( struct FString FailCode, struct FString URL );		// [ FUNC_Event ] XInterface.ExtendedConsole.ConnectFailure
	 void                      OnStatsConfigured (  );                           		//  XInterface.ExtendedConsole.OnStatsConfigured
	 void                      OnStatsClosed ( bool bCancelled );                		//  XInterface.ExtendedConsole.OnStatsClosed
	 void                      OnChat ( struct FString Msg, int TeamIndex );     		//  XInterface.ExtendedConsole.OnChat
}; // Size: 0x0538

// Class XInterface.UT2MusicManager
class DLL_IMPORT UUT2MusicManager : public UGUIPage
{
public:
	struct FPlayListStruct                             Playlist;                                         		// 0x0354 ( 0x001C ) [ CPF_Config | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      NotifyLevelChange (  );                           		//  XInterface.UT2MusicManager.NotifyLevelChange
	 void                      MusicChanged (  );                                		//  XInterface.UT2MusicManager.MusicChanged
	 struct FString            SetInitialMusic ( struct FString NewSong );       		//  XInterface.UT2MusicManager.SetInitialMusic
	 void                      SetMusic ( struct FString NewSong );              		//  XInterface.UT2MusicManager.SetMusic
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.UT2MusicManager.InitComponent
}; // Size: 0x001C

// Class XInterface.HudCDeathmatch
class DLL_IMPORT AHudCDeathmatch : public AHudBase
{
public:
	float                                              UAVLastBeginScanLevelSeconds;                     		// 0x0C84 ( 0x0004 ) 
	float                                              UAVOneScanTime;                                   		// 0x0C88 ( 0x0004 ) 
	float                                              UAVOneScanTimeExtra;                              		// 0x0C8C ( 0x0004 ) 
	float                                              UAVOneScanMin;                                    		// 0x0C90 ( 0x0004 ) 
	float                                              UAVOneScanMax;                                    		// 0x0C94 ( 0x0004 ) 
	class AwHudPart_MinimapBase*                       UAVMinimapBase;                                   		// 0x0C98 ( 0x0004 ) 
	int                                                UAVScanOffset;                                    		// 0x0C9C ( 0x0004 ) 
	float                                              UAVIconPosXAlly;                                  		// 0x0CA0 ( 0x0004 ) 
	float                                              UAVIconPosYAlly;                                  		// 0x0CA4 ( 0x0004 ) 
	float                                              UAVIconPosXEnemy;                                 		// 0x0CA8 ( 0x0004 ) 
	float                                              UAVIconPosYEnemy;                                 		// 0x0CAC ( 0x0004 ) 
	float                                              UAVIconWidth;                                     		// 0x0CB0 ( 0x0004 ) 
	float                                              UAVIconHeight;                                    		// 0x0CB4 ( 0x0004 ) 
	float                                              UAVIconTextPosXAlly;                              		// 0x0CB8 ( 0x0004 ) 
	float                                              UAVIconTextPosYAlly;                              		// 0x0CBC ( 0x0004 ) 
	float                                              UAVIconTextPosXEnemy;                             		// 0x0CC0 ( 0x0004 ) 
	float                                              UAVIconTextPosYEnemy;                             		// 0x0CC4 ( 0x0004 ) 
	float                                              UAVIconTextOffsetX;                               		// 0x0CC8 ( 0x0004 ) 
	float                                              UAVIconTextXL;                                    		// 0x0CCC ( 0x0004 ) 
	float                                              UAVIconTextYL;                                    		// 0x0CD0 ( 0x0004 ) 
	class FColor                                       UAVIconColor;                                     		// 0x0CD4 ( 0x0004 ) 
	float                                              AFStringLeftTopX;                                 		// 0x0CD8 ( 0x0004 ) 
	float                                              AFStringLeftTopY;                                 		// 0x0CDC ( 0x0004 ) 
	float                                              AFStringRightBottomX;                             		// 0x0CE0 ( 0x0004 ) 
	float                                              AFStringRightBottomY;                             		// 0x0CE4 ( 0x0004 ) 
	float                                              AFSurvivedUserCountLeftTopX;                      		// 0x0CE8 ( 0x0004 ) 
	float                                              AFSurvivedUserCountLeftTopY;                      		// 0x0CEC ( 0x0004 ) 
	float                                              AFSurvivedUserCountRightBottomX;                  		// 0x0CF0 ( 0x0004 ) 
	float                                              AFSurvivedUserCountRightBottomY;                  		// 0x0CF4 ( 0x0004 ) 
	float                                              RSAStringLeftTopX;                                		// 0x0CF8 ( 0x0004 ) 
	float                                              RSAStringLeftTopY;                                		// 0x0CFC ( 0x0004 ) 
	float                                              RSAStringRightBottomX;                            		// 0x0D00 ( 0x0004 ) 
	float                                              RSAStringRightBottomY;                            		// 0x0D04 ( 0x0004 ) 
	float                                              RSASurvivedUserCountLeftTopX;                     		// 0x0D08 ( 0x0004 ) 
	float                                              RSASurvivedUserCountLeftTopY;                     		// 0x0D0C ( 0x0004 ) 
	float                                              RSASurvivedUserCountRightBottomX;                 		// 0x0D10 ( 0x0004 ) 
	float                                              RSASurvivedUserCountRightBottomY;                 		// 0x0D14 ( 0x0004 ) 
	struct FDigitSet                                   WDigitsSmall;                                     		// 0x0D18 ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsMid;                                       		// 0x0DCC ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsTime;                                      		// 0x0E80 ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsTimeRedAlert;                              		// 0x0F34 ( 0x00B4 ) [ CPF_Edit ]
	struct FSpriteWidget                               ScoreBgLine;                                      		// 0x0FE8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ScoreBg;                                          		// 0x1028 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ScoreBGMine;                                      		// 0x1068 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ScoreBGMyLine;                                    		// 0x10A8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               DetectedBomb;                                     		// 0x10E8 ( 0x0040 ) 
	float                                              DetectedBombDrawDistance;                         		// 0x1128 ( 0x0004 ) 
	struct FNumericWidget                              DigitsScoreL;                                     		// 0x112C ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsScoreR;                                     		// 0x115C ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsScoreU;                                     		// 0x118C ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsScoreD;                                     		// 0x11BC ( 0x0030 ) [ CPF_Edit ]
	unsigned long                                      OverdrawDigitsScoreL:1;                           		// 0x11EC ( 0x0004 )  [0x00000001]
	unsigned long                                      OverdrawDigitsScoreR:1;                           		// 0x11EC ( 0x0004 )  [0x00000002]
	class UTexRotator*                                 outArrow;                                         		// 0x11F0 ( 0x0004 ) 
	float                                              OutArrowSize;                                     		// 0x11F4 ( 0x0004 ) [ CPF_Config ]
	unsigned long                                      bRendNavExtra:1;                                  		// 0x11F8 ( 0x0004 )  [0x00000001]
	float                                              fRendNavExtraFactor;                              		// 0x11FC ( 0x0004 ) 
	unsigned long                                      bRendVisCount:1;                                  		// 0x1200 ( 0x0004 )  [0x00000001]
	float                                              fRendVisCountFactor;                              		// 0x1204 ( 0x0004 ) 
	float                                              fRendViscountBoxSize;                             		// 0x1208 ( 0x0004 ) 
	unsigned long                                      bRendInfluence:1;                                 		// 0x120C ( 0x0004 )  [0x00000001]
	float                                              fInfluenceBoxSize;                                		// 0x1210 ( 0x0004 ) 
	unsigned long                                      bRendCoverAngle:1;                                		// 0x1214 ( 0x0004 )  [0x00000001]
	float                                              fRendCoverAngleSize;                              		// 0x1218 ( 0x0004 ) 
	unsigned long                                      bRendSDFrontLine:1;                               		// 0x121C ( 0x0004 )  [0x00000001]
	float                                              fSDFrontLineSize;                                 		// 0x1220 ( 0x0004 ) 
	unsigned long                                      bRendSDFrontLineFull:1;                           		// 0x1224 ( 0x0004 )  [0x00000001]
	unsigned long                                      bRendRadius:1;                                    		// 0x1224 ( 0x0004 )  [0x00000002]
	class TArray< class FColor >                       RainbowColors;                                    		// 0x1228 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class FColor >                       DangerColors;                                     		// 0x1234 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class FColor >                       RedBlueColors;                                    		// 0x1240 ( 0x000C ) [ CPF_NeedCtorLink ]
	class FColor                                       color_Shadow;                                     		// 0x124C ( 0x0004 ) 
	unsigned long                                      bShowTimer1:1;                                    		// 0x1250 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bShowTimer1WithDigitRedAlert:1;                   		// 0x1250 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	struct FSpriteWidget                               WTimerBG;                                         		// 0x1254 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteTimerHalf;                                  		// 0x1294 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteTimerHalf_RedAlert;                         		// 0x12D4 ( 0x0040 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsTimerMin;                                   		// 0x1314 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsTimerSec;                                   		// 0x1344 ( 0x0030 ) [ CPF_Edit ]
	unsigned long                                      bShowTimer2NotScoreD:1;                           		// 0x1374 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bShowTimer2WithDigitRedAlert:1;                   		// 0x1374 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	struct FSpriteWidget                               SpriteTimerHalf2;                                 		// 0x1378 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpriteTimerHalf2_RedAlert;                        		// 0x13B8 ( 0x0040 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsTimerMin2;                                  		// 0x13F8 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsTimerSec2;                                  		// 0x1428 ( 0x0030 ) [ CPF_Edit ]
	float                                              NetLastTimeSeconds;                               		// 0x1458 ( 0x0004 ) 
	float                                              NetElapsedTime;                                   		// 0x145C ( 0x0004 ) 
	float                                              NetInterval;                                      		// 0x1460 ( 0x0004 ) 
	int                                                NetRecvMax;                                       		// 0x1464 ( 0x0004 ) 
	int                                                NetRecv;                                          		// 0x1468 ( 0x0004 ) 
	int                                                NetSendMax;                                       		// 0x146C ( 0x0004 ) 
	int                                                NetSend;                                          		// 0x1470 ( 0x0004 ) 
	int                                                NetTotal;                                         		// 0x1474 ( 0x0004 ) 
	struct FSpriteWidget                               AmmoIcon;                                         		// 0x1478 ( 0x0040 ) [ CPF_Edit ]
	struct FNumericWidget                              AdrenalineCount;                                  		// 0x14B8 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              mySpread;                                         		// 0x14E8 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              myRank;                                           		// 0x1518 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              MyScore;                                          		// 0x1548 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              TimerHours;                                       		// 0x1578 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              TimerMinutes;                                     		// 0x15A8 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              TimerSeconds;                                     		// 0x15D8 ( 0x0030 ) [ CPF_Edit ]
	struct FSpriteWidget                               TimerDigitSpacer[ 0x02 ];                         		// 0x1608 ( 0x0080 ) [ CPF_Edit ]
	struct FSpriteWidget                               TimerIcon;                                        		// 0x1688 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TimerBackground;                                  		// 0x16C8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TimerBackgroundDisc;                              		// 0x1708 ( 0x0040 ) [ CPF_Edit ]
	class UFont*                                       LevelActionFontFont;                              		// 0x1748 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       LevelActionFontColor;                             		// 0x174C ( 0x0004 ) [ CPF_Edit ]
	float                                              LevelActionPositionX;                             		// 0x1750 ( 0x0004 ) [ CPF_Edit ]
	float                                              LevelActionPositionY;                             		// 0x1754 ( 0x0004 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsHealth;                                     		// 0x1758 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsVehicleHealth;                              		// 0x1788 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsTotalAmmo;                                  		// 0x17B8 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsMagazineAmmo;                               		// 0x17E8 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsMagazineAmmoShortage;                       		// 0x1818 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsShield;                                     		// 0x1848 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsSprint;                                     		// 0x1878 ( 0x0030 ) [ CPF_Edit ]
	unsigned long                                      bPrevMatchOver:1;                                 		// 0x18A8 ( 0x0004 )  [0x00000001]
	struct FSpriteWidget                               HpStaminaBackground;                              		// 0x18AC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HpBarBackground;                                  		// 0x18EC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HpBar;                                            		// 0x192C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               DamageBar;                                        		// 0x196C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               RecoveryBar;                                      		// 0x19AC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               StaminaBarBackground;                             		// 0x19EC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               StaminaBar;                                       		// 0x1A2C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               StaminaBarWarn;                                   		// 0x1A6C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HPIcon;                                           		// 0x1AAC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HpGauBlink;                                       		// 0x1AEC ( 0x0040 ) [ CPF_Edit ]
	float                                              fHPDelayTime;                                     		// 0x1B2C ( 0x0004 ) [ CPF_Edit ]
	float                                              fHPDisplayRatio;                                  		// 0x1B30 ( 0x0004 ) [ CPF_Edit ]
	float                                              fAddValue;                                        		// 0x1B34 ( 0x0004 ) 
	float                                              fLastHealth;                                      		// 0x1B38 ( 0x0004 ) 
	float                                              fBeginDamageTime;                                 		// 0x1B3C ( 0x0004 ) 
	unsigned long                                      bBeginDamage:1;                                   		// 0x1B40 ( 0x0004 )  [0x00000001]
	unsigned long                                      bBeginRecovery:1;                                 		// 0x1B40 ( 0x0004 )  [0x00000002]
	float                                              fCurrentDamageBar;                                		// 0x1B44 ( 0x0004 ) 
	float                                              fCurrentHPBar;                                    		// 0x1B48 ( 0x0004 ) 
	float                                              fCurrentRecoveryBar;                              		// 0x1B4C ( 0x0004 ) 
	unsigned long                                      bPlayRecoverySounding:1;                          		// 0x1B50 ( 0x0004 )  [0x00000001]
	float                                              fStartPlayRecoverySound;                          		// 0x1B54 ( 0x0004 ) 
	struct FDigitSet                                   WDigitsHP;                                        		// 0x1B58 ( 0x00B4 ) 
	struct FNumericWidget                              HPCount;                                          		// 0x1C0C ( 0x0030 ) 
	struct FSpriteWidget                               SPIcon;                                           		// 0x1C3C ( 0x0040 ) 
	struct FSpriteWidget                               PostureStand;                                     		// 0x1C7C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               PostureCrouch;                                    		// 0x1CBC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               PostureDown;                                      		// 0x1CFC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               PostureRun;                                       		// 0x1D3C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpWorldMap;                                     		// 0x1D7C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpMiliAtt;                                      		// 0x1DBC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpAim;                                          		// 0x1DFC ( 0x0040 ) [ CPF_Edit ]
	class UMaterial*                                   matCurrentWeapon;                                 		// 0x1E3C ( 0x0004 ) 
	int                                                iDrawingWeaponID;                                 		// 0x1E40 ( 0x0004 ) 
	struct FDigitSet                                   AmmoSet100;                                       		// 0x1E44 ( 0x00B4 ) [ CPF_Edit ]
	struct FNumericWidget                              Ammo100;                                          		// 0x1EF8 ( 0x0030 ) [ CPF_Edit ]
	int                                                Ammo100_LineOffset;                               		// 0x1F28 ( 0x0004 ) [ CPF_Edit ]
	int                                                Ammo100_DigitOffset;                              		// 0x1F2C ( 0x0004 ) [ CPF_Edit ]
	struct FAmmoSet                                    AmmoSet50;                                        		// 0x1F30 ( 0x0058 ) [ CPF_Edit ]
	struct FAmmoSet                                    AmmoSetSniper;                                    		// 0x1F88 ( 0x0058 ) [ CPF_Edit ]
	struct FAmmoSet                                    AmmoSetShotgun;                                   		// 0x1FE0 ( 0x0058 ) [ CPF_Edit ]
	struct FAmmoSet                                    AmmoSetRPG;                                       		// 0x2038 ( 0x0058 ) [ CPF_Edit ]
	struct FAmmoSet                                    AmmoSetATR;                                       		// 0x2090 ( 0x0058 ) [ CPF_Edit ]
	struct FFloatBox                                   fbSpectateClanMark;                               		// 0x20E8 ( 0x0010 ) 
	struct FFloatBox                                   fbSpectateUserName;                               		// 0x20F8 ( 0x0010 ) 
	struct FString                                     SpecPlayerClan;                                   		// 0x2108 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FImage                                      ImgPlayerClanMark[ 0x03 ];                        		// 0x2114 ( 0x0060 ) 
	class UMaterial*                                   matDefaultClanMark;                               		// 0x2174 ( 0x0004 ) 
	struct FSpriteWidget                               AmmoFlameThrowerCan;                              		// 0x2178 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               AmmoFlameThrowerBar;                              		// 0x21B8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               AmmoSeparator;                                    		// 0x21F8 ( 0x0040 ) [ CPF_Edit ]
	float                                              AmmoSeparatorBeginX;                              		// 0x2238 ( 0x0004 ) [ CPF_Edit ]
	float                                              AmmoSeparatorBeginY;                              		// 0x223C ( 0x0004 ) [ CPF_Edit ]
	float                                              AmmoSeparatorWidth;                               		// 0x2240 ( 0x0004 ) [ CPF_Edit ]
	float                                              AmmoSeparatorHeight;                              		// 0x2244 ( 0x0004 ) [ CPF_Edit ]
	struct FSpriteWidget                               GaugeOverHeat;                                    		// 0x2248 ( 0x0040 ) [ CPF_Edit ]
	class TArray< struct FTeamDeathInfo >              TeamDeathInfos;                                   		// 0x2288 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSpriteWidget                               TeamDeathSprite;                                  		// 0x2294 ( 0x0040 ) [ CPF_Edit ]
	float                                              TeamDeath_HeightOffset;                           		// 0x22D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              TeamDeath_MinScale;                               		// 0x22D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              TeamDeath_MaxScale;                               		// 0x22DC ( 0x0004 ) [ CPF_Edit ]
	float                                              TeamDeath_MinDist;                                		// 0x22E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              TeamDeath_MaxDist;                                		// 0x22E4 ( 0x0004 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBGKillMessage;                                   		// 0x22E8 ( 0x0040 ) 
	class UMaterial*                                   DamageIndicationMaterial;                         		// 0x2328 ( 0x0004 ) 
	int                                                MaxDamageIndicationCount;                         		// 0x232C ( 0x0004 ) 
	float                                              DamageIndicationDuration;                         		// 0x2330 ( 0x0004 ) 
	class TArray< struct FDamageIndicationInfo >       DamageIndicationInfos;                            		// 0x2334 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              DamageIndicationMaterial_UOffset;                 		// 0x2340 ( 0x0004 ) 
	float                                              DamageIndicationMaterial_VOffset;                 		// 0x2344 ( 0x0004 ) 
	unsigned long                                      ShowHealthInDanager:1;                            		// 0x2348 ( 0x0004 )  [0x00000001]
	int                                                ShowHealthInDanagerSoundID;                       		// 0x234C ( 0x0004 ) 
	float                                              ShowHealthInDanager_BeginTime;                    		// 0x2350 ( 0x0004 ) 
	float                                              ShowHealthInDanager_EndTime;                      		// 0x2354 ( 0x0004 ) 
	float                                              ShowHealthInDanager_Duration;                     		// 0x2358 ( 0x0004 ) 
	class UMaterial*                                   ShowHealthInDanager_Material;                     		// 0x235C ( 0x0004 ) 
	float                                              ShowHealthInDanger_BlinkInterval;                 		// 0x2360 ( 0x0004 ) 
	float                                              ShowHealthInDanger_BlinkMaxAlpha;                 		// 0x2364 ( 0x0004 ) 
	float                                              ShowHealthInDanger_BlinkMinAlpha;                 		// 0x2368 ( 0x0004 ) 
	unsigned long                                      bShowFallInDanger:1;                              		// 0x236C ( 0x0004 )  [0x00000001]
	float                                              ShowFallDamage_Duration;                          		// 0x2370 ( 0x0004 ) 
	float                                              ShowFallInDanager_BeginTime;                      		// 0x2374 ( 0x0004 ) 
	float                                              ShowFallInDanager_EndTime;                        		// 0x2378 ( 0x0004 ) 
	float                                              ShowFallDamage_BlinkInterval;                     		// 0x237C ( 0x0004 ) 
	struct FString                                     KillMessageHelicopterName;                        		// 0x2380 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FSelfKillMessage                            LastSelfKillMessage;                              		// 0x238C ( 0x0030 ) [ CPF_NeedCtorLink ]
	struct FString                                     SelfKillMessage_Killed;                           		// 0x23BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SelfKillMessage_KilledBy;                         		// 0x23C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SuicideMessage;                                   		// 0x23D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class FColor                                       SelfKillColor;                                    		// 0x23E0 ( 0x0004 ) 
	class FColor                                       SelfKilledByColor;                                		// 0x23E4 ( 0x0004 ) 
	struct FSpriteWidget                               Crosshair_Left;                                   		// 0x23E8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               Crosshair_Right;                                  		// 0x2428 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               Crosshair_Up;                                     		// 0x2468 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               Crosshair_Down;                                   		// 0x24A8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               Crosshair_MG;                                     		// 0x24E8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               Crosshair_DamageDealt;                            		// 0x2528 ( 0x0040 ) [ CPF_Edit ]
	float                                              CrossHair_DamageDealtDrawTime;                    		// 0x2568 ( 0x0004 ) 
	float                                              CrossHair_DamageDealtBeginFadeTime;               		// 0x256C ( 0x0004 ) 
	float                                              CrossHair_ServerSideLastDamageDealtTime;          		// 0x2570 ( 0x0004 ) 
	float                                              CrossHair_ClientSideLastDamageDealtTime;          		// 0x2574 ( 0x0004 ) 
	struct FSpriteWidget                               ProgressStatusBG;                                 		// 0x2578 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               ProgressStatusBar;                                		// 0x25B8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillSlot5;                                       		// 0x25F8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillSlot6;                                       		// 0x2638 ( 0x0040 ) [ CPF_Edit ]
	class UMaterial*                                   matEmptySkillSlot;                                		// 0x2678 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   matSkillHelicopter;                               		// 0x267C ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   matSkillAirStrike;                                		// 0x2680 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   matSkillUAV;                                      		// 0x2684 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   matSkillRPG;                                      		// 0x2688 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   matSkillM2B;                                      		// 0x268C ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   matSkillBlink;                                    		// 0x2690 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBlinkDelayTime;                                  		// 0x2694 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBlinkLastTime;                                   		// 0x2698 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bBlinkState:1;                                    		// 0x269C ( 0x0004 )  [0x00000001]
	unsigned long                                      bSkill_C4:1;                                      		// 0x269C ( 0x0004 )  [0x00000002]
	unsigned long                                      bSkill_Incen:1;                                   		// 0x269C ( 0x0004 )  [0x00000004]
	unsigned long                                      bSkill_HellFire:1;                                		// 0x269C ( 0x0004 )  [0x00000008]
	unsigned long                                      bSkill_RPG7:1;                                    		// 0x269C ( 0x0004 )  [0x00000010]
	unsigned long                                      bSkill_M2B:1;                                     		// 0x269C ( 0x0004 )  [0x00000020]
	unsigned long                                      bSkill_ATR:1;                                     		// 0x269C ( 0x0004 )  [0x00000040]
	class TArray< struct FSpriteWidget >               SkillNum;                                         		// 0x26A0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                HasSkillC4;                                       		// 0x26AC ( 0x0004 ) 
	int                                                HasSkillAirStirke;                                		// 0x26B0 ( 0x0004 ) 
	int                                                HasSkillRPG;                                      		// 0x26B4 ( 0x0004 ) 
	int                                                HasSkillIncen;                                    		// 0x26B8 ( 0x0004 ) 
	int                                                HasSkillHellFire;                                 		// 0x26BC ( 0x0004 ) 
	struct FSkillProperty                              ActiveUsingSkill;                                 		// 0x26C0 ( 0x009C ) 
	float                                              VisibleDistance;                                  		// 0x275C ( 0x0004 ) 
	struct FSpriteWidget                               PlaceMark;                                        		// 0x2760 ( 0x0040 ) 
	struct FString                                     lsPlaceM2B;                                       		// 0x27A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceMG3;                                       		// 0x27AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceRPG7;                                      		// 0x27B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceATR;                                       		// 0x27C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceHealthPack;                                		// 0x27D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceHeliPack;                                  		// 0x27DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceArtilleryPack;                             		// 0x27E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceUAVPack;                                   		// 0x27F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceMedalPack;                                 		// 0x2800 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsMessageNotice;                                  		// 0x280C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsPlaceAmmoSupply;                                		// 0x2818 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< class UClass* >                      SpecialPositions_Class;                           		// 0x2824 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               SpecialPositions_Sprite;                          		// 0x2830 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                SpecialPositions_OffsetZ;                         		// 0x283C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FVector >                     CachedSpecialPositions;                           		// 0x2848 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AActor* >                      CachedSpecialPositionActors;                      		// 0x2854 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               CachedSpecialPositionSprites;                     		// 0x2860 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UClass* >                      SuppliesPositions_Class;                          		// 0x286C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                SuppliesPositions_OffsetZ;                        		// 0x2878 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FVector >                     CachedSuppliesPositions;                          		// 0x2884 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AActor* >                      CachedSuppliesPositionActors;                     		// 0x2890 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bCachedSpecialPostions:1;                         		// 0x289C ( 0x0004 )  [0x00000001]
	class TArray< struct FName >                       SpriteTag;                                        		// 0x28A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FPlane >                      SpriteLastColorModulates;                         		// 0x28AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              SpriteLastTime;                                   		// 0x28B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FPlane                                      ObjectSpriteEdgeColorModulate;                    		// 0x28C4 ( 0x0010 ) 
	struct FNumericWidget                              UDamageTime;                                      		// 0x28D4 ( 0x0030 ) [ CPF_Edit ]
	struct FSpriteWidget                               UDamageIcon;                                      		// 0x2904 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               AdrenalineIcon;                                   		// 0x2944 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               AdrenalineBackground;                             		// 0x2984 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               AdrenalineBackgroundDisc;                         		// 0x29C4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               AdrenalineAlert;                                  		// 0x2A04 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               MyScoreIcon;                                      		// 0x2A44 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               MyScoreBackground;                                		// 0x2A84 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudHealthALERT;                                   		// 0x2AC4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudVehicleHealthALERT;                            		// 0x2B04 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudAmmoALERT;                                     		// 0x2B44 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudBorderShield;                                  		// 0x2B84 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudBorderHealth;                                  		// 0x2BC4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudBorderVehicleHealth;                           		// 0x2C04 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudBorderAmmo;                                    		// 0x2C44 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudBorderShieldIcon;                              		// 0x2C84 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudBorderHealthIcon;                              		// 0x2CC4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HudBorderVehicleHealthIcon;                       		// 0x2D04 ( 0x0040 ) [ CPF_Edit ]
	class UClass*                                      BaseWeapons[ 0x09 ];                              		// 0x2D44 ( 0x0024 ) [ CPF_Edit ]
	struct FSpriteWidget                               BarWeaponIcon[ 0x09 ];                            		// 0x2D68 ( 0x0240 ) [ CPF_Edit ]
	struct FSpriteWidget                               BarAmmoIcon[ 0x09 ];                              		// 0x2FA8 ( 0x0240 ) [ CPF_Edit ]
	struct FSpriteWidget                               BarBorder[ 0x09 ];                                		// 0x31E8 ( 0x0240 ) [ CPF_Edit ]
	struct FSpriteWidget                               BarBorderAmmoIndicator[ 0x09 ];                   		// 0x3428 ( 0x0240 ) [ CPF_Edit ]
	float                                              BarBorderScaledPosition[ 0x09 ];                  		// 0x3668 ( 0x0024 ) 
	struct FWeaponState                                BarWeaponStates[ 0x09 ];                          		// 0x368C ( 0x0048 ) 
	struct FSpriteWidget                               RechargeBar;                                      		// 0x36D4 ( 0x0040 ) [ CPF_Edit ]
	unsigned long                                      bDrawTimer:1;                                     		// 0x3714 ( 0x0004 )  [0x00000001]
	unsigned long                                      TeamLinked:1;                                     		// 0x3714 ( 0x0004 )  [0x00000002]
	unsigned long                                      bShowMissingWeaponInfo:1;                         		// 0x3714 ( 0x0004 )  [0x00000004]
	int                                                CurHealth;                                        		// 0x3718 ( 0x0004 ) 
	int                                                LastHealth;                                       		// 0x371C ( 0x0004 ) 
	int                                                CurVehicleHealth;                                 		// 0x3720 ( 0x0004 ) 
	int                                                LastVehicleHealth;                                		// 0x3724 ( 0x0004 ) 
	int                                                CurShield;                                        		// 0x3728 ( 0x0004 ) 
	int                                                LastShield;                                       		// 0x372C ( 0x0004 ) 
	int                                                MaxShield;                                        		// 0x3730 ( 0x0004 ) 
	int                                                CurEnergy;                                        		// 0x3734 ( 0x0004 ) 
	int                                                MaxEnergy;                                        		// 0x3738 ( 0x0004 ) 
	int                                                LastEnergy;                                       		// 0x373C ( 0x0004 ) 
	float                                              LastDamagedHealth;                                		// 0x3740 ( 0x0004 ) 
	float                                              LastDamagedVehicleHealth;                         		// 0x3744 ( 0x0004 ) 
	float                                              ZoomToggleTime;                                   		// 0x3748 ( 0x0004 ) 
	float                                              FadeTime;                                         		// 0x374C ( 0x0004 ) 
	float                                              MaxAmmoPrimary;                                   		// 0x3750 ( 0x0004 ) [ CPF_Edit ]
	float                                              CurAmmoPrimary;                                   		// 0x3754 ( 0x0004 ) [ CPF_Edit ]
	float                                              LastAdrenalineTime;                               		// 0x3758 ( 0x0004 ) [ CPF_Edit ]
	int                                                CurScore;                                         		// 0x375C ( 0x0004 ) [ CPF_Transient ]
	int                                                CurRank;                                          		// 0x3760 ( 0x0004 ) [ CPF_Transient ]
	int                                                ScoreDiff;                                        		// 0x3764 ( 0x0004 ) [ CPF_Transient ]
	int                                                OldRemainingTime;                                 		// 0x3768 ( 0x0004 ) 
	struct FName                                       CountDownName[ 0x0A ];                            		// 0x376C ( 0x0028 ) 
	struct FName                                       LongCountName[ 0x0A ];                            		// 0x3794 ( 0x0028 ) 
	int                                                BarWeaponIconAnim[ 0x09 ];                        		// 0x37BC ( 0x0024 ) [ CPF_Edit ]
	class FColor                                       HudColorRed;                                      		// 0x37E0 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       HudColorBlue;                                     		// 0x37E4 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       HudColorBlack;                                    		// 0x37E8 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       HudColorHighLight;                                		// 0x37EC ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       HudColorNormal;                                   		// 0x37F0 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       HudColorTeam[ 0x02 ];                             		// 0x37F4 ( 0x0008 ) [ CPF_Edit ]
	class FColor                                       CustomHUDHighlightColor;                          		// 0x37FC ( 0x0004 ) 
	class APlayerReplicationInfo*                      NamedPlayer;                                      		// 0x3800 ( 0x0004 ) 
	float                                              NameTime;                                         		// 0x3804 ( 0x0004 ) 
	class UMaterial*                                   Portrait;                                         		// 0x3808 ( 0x0004 ) 
	float                                              PortraitTime;                                     		// 0x380C ( 0x0004 ) 
	float                                              PortraitX;                                        		// 0x3810 ( 0x0004 ) 
	class TArray< class ASceneManager* >               MySceneManagers;                                  		// 0x3814 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              VehicleDrawTimer;                                 		// 0x3820 ( 0x0004 ) 
	class APawn*                                       OldPawn;                                          		// 0x3824 ( 0x0004 ) 
	struct FString                                     VehicleName;                                      		// 0x3828 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              fPrevLevelSeconds;                                		// 0x3834 ( 0x0004 ) 
	int                                                iSpread_Curr;                                     		// 0x3838 ( 0x0004 ) 
	float                                              fSpread_Constant;                                 		// 0x383C ( 0x0004 ) 
	float                                              ch_up_x;                                          		// 0x3840 ( 0x0004 ) 
	float                                              ch_up_y;                                          		// 0x3844 ( 0x0004 ) 
	float                                              ch_down_x;                                        		// 0x3848 ( 0x0004 ) 
	float                                              ch_down_y;                                        		// 0x384C ( 0x0004 ) 
	float                                              ch_left_x;                                        		// 0x3850 ( 0x0004 ) 
	float                                              ch_left_y;                                        		// 0x3854 ( 0x0004 ) 
	float                                              ch_right_x;                                       		// 0x3858 ( 0x0004 ) 
	float                                              ch_right_y;                                       		// 0x385C ( 0x0004 ) 
	float                                              ch_up_width;                                      		// 0x3860 ( 0x0004 ) 
	float                                              ch_up_height;                                     		// 0x3864 ( 0x0004 ) 
	float                                              ch_down_width;                                    		// 0x3868 ( 0x0004 ) 
	float                                              ch_down_height;                                   		// 0x386C ( 0x0004 ) 
	float                                              ch_left_width;                                    		// 0x3870 ( 0x0004 ) 
	float                                              ch_left_height;                                   		// 0x3874 ( 0x0004 ) 
	float                                              ch_right_width;                                   		// 0x3878 ( 0x0004 ) 
	float                                              ch_right_height;                                  		// 0x387C ( 0x0004 ) 
	unsigned long                                      bIsFatigueSoundPlaying:1;                         		// 0x3880 ( 0x0004 )  [0x00000001]
	float                                              fFSoundStartTime;                                 		// 0x3884 ( 0x0004 ) 
	int                                                PrevSprintVal;                                    		// 0x3888 ( 0x0004 ) 
	unsigned long                                      bShoudPlayFSound:1;                               		// 0x388C ( 0x0004 )  [0x00000001]
	class AwHudPart_KillMessage*                       HudPart_KillMessage;                              		// 0x3890 ( 0x0004 ) 
	class AwHudPart_Minimap*                           HudPart_Minimap;                                  		// 0x3894 ( 0x0004 ) 
	class AwHudPart_Bigmap*                            HudPart_Bigmap;                                   		// 0x3898 ( 0x0004 ) 
	unsigned long                                      bShowBigmap:1;                                    		// 0x389C ( 0x0004 )  [0x00000001]
	class AwHudPart_DisplayMain*                       HudPart_DisplayMain;                              		// 0x38A0 ( 0x0004 ) 
	class AwHudPart_DisplayEvent*                      HudPart_DisplayEvent;                             		// 0x38A4 ( 0x0004 ) 
	class AwHudPart_SelectQSlot*                       HudPart_SelQuickSlot;                             		// 0x38A8 ( 0x0004 ) 
	class AwHudPart_RadioMessage*                      HudPart_RadioMessage;                             		// 0x38AC ( 0x0004 ) 
	unsigned char                                      byShowRadioMessage;                               		// 0x38B0 ( 0x0001 ) 
	class AwHudPart_DisplayQuest*                      HudPart_DisplayQuest;                             		// 0x38B4 ( 0x0004 ) 
	class AwHudPart_Tutorial*                          HudPart_Tutorial;                                 		// 0x38B8 ( 0x0004 ) 
	class AwHudPart_Tutorial2*                         HudPart_Tutorial2;                                		// 0x38BC ( 0x0004 ) 
	class APawn*                                       OldPawnOwner;                                     		// 0x38C0 ( 0x0004 ) [ CPF_Edit ]
	class UwMapInfo*                                   mapInfo;                                          		// 0x38C4 ( 0x0004 ) 
	unsigned long                                      DrawChangeHost:1;                                 		// 0x38C8 ( 0x0004 )  [0x00000001]
	float                                              DrawChangeHostBeginTime;                          		// 0x38CC ( 0x0004 ) 
	float                                              DrawChangeHostDuration;                           		// 0x38D0 ( 0x0004 ) 
	struct FString                                     MessageChangingHost;                              		// 0x38D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageChangingHostPre;                           		// 0x38E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageChangingHostPost;                          		// 0x38EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              MessageScoreLastTime;                             		// 0x38F8 ( 0x0004 ) 
	float                                              MessageScoreAccelStep;                            		// 0x38FC ( 0x0004 ) 
	int                                                MessageScoreEffect;                               		// 0x3900 ( 0x0004 ) 
	int                                                MessageScoreAlpha;                                		// 0x3904 ( 0x0004 ) 
	float                                              ShowTime_NameTag_EnemyWhoKillMe;                  		// 0x3908 ( 0x0004 ) 
	class APawn*                                       ViewTarget;                                       		// 0x390C ( 0x0004 ) 
	struct FVector                                     AttackerLoc;                                      		// 0x3910 ( 0x000C ) 
	unsigned long                                      bClientOnBeginWaitingForStart:1;                  		// 0x391C ( 0x0004 )  [0x00000001]
	unsigned long                                      bClientOnEndWaitingForStart:1;                    		// 0x391C ( 0x0004 )  [0x00000002]
	struct FSpriteWidget                               WKill;                                            		// 0x3920 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKillAim;                                         		// 0x3960 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAssist;                                          		// 0x39A0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHelikill;                                        		// 0x39E0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WArtillerykill;                                   		// 0x3A20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WCapture;                                         		// 0x3A60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBombSetted;                                      		// 0x3AA0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBombDiffused;                                    		// 0x3AE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WFragGrenadeKill;                                 		// 0x3B20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WMeleeKill;                                       		// 0x3B60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WStepOnKill;                                      		// 0x3BA0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSpecialETCKill;                                  		// 0x3BE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKillSuccession[ 0x0F ];                          		// 0x3C20 ( 0x03C0 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHeadshot;                                        		// 0x3FE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHeadshotAim;                                     		// 0x4020 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WWallShotKill;                                    		// 0x4060 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKillBlood;                                       		// 0x40A0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKillBlood_Teen;                                  		// 0x40E0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WWarningMark;                                     		// 0x4120 ( 0x0040 ) [ CPF_Edit ]
	float                                              fWarningDelta;                                    		// 0x4160 ( 0x0004 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAirStrikeMark;                                   		// 0x4164 ( 0x0040 ) [ CPF_Edit ]
	float                                              fNoticeOffset;                                    		// 0x41A4 ( 0x0004 ) 
	class TArray< struct FGameNotice >                 aGameNotice;                                      		// 0x41A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FGameNotice >                 aAASNotice;                                       		// 0x41B4 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DisalbeWeaponSlot5Hud (  );                       		//  XInterface.HudCDeathmatch.DisalbeWeaponSlot5Hud
	 void                      EnableWeaponSlot5Hud ( int nWeaponID );           		//  XInterface.HudCDeathmatch.EnableWeaponSlot5Hud
	 void                      ChangeWeaponSlot5Hud ( class AwWeapon* newWeapon, bool bAddSkill );		//  XInterface.HudCDeathmatch.ChangeWeaponSlot5Hud
	 void                      DisalbeWeaponSlot6Hud (  );                       		//  XInterface.HudCDeathmatch.DisalbeWeaponSlot6Hud
	 void                      ChangeWeaponSlot6Hud ( class AwWeapon* newWeapon );		//  XInterface.HudCDeathmatch.ChangeWeaponSlot6Hud
	 void                      DrawAASNotice ( class UCanvas* C );               		//  XInterface.HudCDeathmatch.DrawAASNotice
	 struct FString            GetNoticeFirst (  );                              		//  XInterface.HudCDeathmatch.GetNoticeFirst
	 void                      DrawSystemNotice ( class UCanvas* C );            		//  XInterface.HudCDeathmatch.DrawSystemNotice
	 void                      DrawGameNotice ( class UCanvas* C );              		//  XInterface.HudCDeathmatch.DrawGameNotice
	 void                      AllDeleteGameNotice (  );                         		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.AllDeleteGameNotice
	 void                      PushAASNotice ( struct FString sNotice, float beginTime, unsigned char byLevel );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.PushAASNotice
	 void                      PushGameNotice ( struct FString sNotice );        		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.PushGameNotice
	 void                      RecGameNotice ( struct FString sNotice );         		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.RecGameNotice
	 void                      RecAAS ( struct FString sNotice, float DrawTime );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.RecAAS
	 void                      DrawWaringMark ( class UCanvas* C, float fWidth, float fHeight, float fCurLifeTime, float fMaxLifeTime );		//  XInterface.HudCDeathmatch.DrawWaringMark
	 void                      DrawScoreEffect ( class UCanvas* C, struct FSpriteWidget W, float fWidth, float fHeight, struct FCalCoordsW calW, float PosX, float PosY );		//  XInterface.HudCDeathmatch.DrawScoreEffect
	 bool                      DrawKillMarkEffect ( class UCanvas* C, struct FSpriteWidget W, float fWidth, float fHeight, struct FCalCoordsW calW, float PosX, float PosY, float fScale );		//  XInterface.HudCDeathmatch.DrawKillMarkEffect
	 void                      DrawMessageScore ( class UCanvas* C, int i, float PosX, float PosY, float* dx, float* dy );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawMessageScore
	 void                      ResetKillMessageTexture (  );                     		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.ResetKillMessageTexture
	 void                      DrawMessageWithTexture ( class UCanvas* C, int i, float PosX, float PosY, float* dx, float* dy );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawMessageWithTexture
	 void                      DrawMessage ( class UCanvas* C, int i, float PosX, float PosY, float* dx, float* dy );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawMessage
	 void                      LocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, struct FString CriticalString );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.LocalizedMessage
	 bool                      IsUAVOn (  );                                     		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.IsUAVOn
	 bool                      IsUAVScanning (  );                               		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.IsUAVScanning
	 float                     GetUAVScanLineTexturePos (  );                    		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.GetUAVScanLineTexturePos
	 float                     GetUAVScanLineMinimapPos (  );                    		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.GetUAVScanLineMinimapPos
	 float                     GetUAVScanProgress (  );                          		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.GetUAVScanProgress
	 void                      StartUAVScan (  );                                		//  XInterface.HudCDeathmatch.StartUAVScan
	 bool                      IsPawnUnderScan ( class APawn* P );               		//  XInterface.HudCDeathmatch.IsPawnUnderScan
	 void                      UpdateUAV (  );                                   		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.UpdateUAV
	 void                      DrawUAV ( class UCanvas* C );                     		//  XInterface.HudCDeathmatch.DrawUAV
	 void                      DrawDebugUAV ( class UCanvas* C, int X, int dy, int* Y );		//  XInterface.HudCDeathmatch.DrawDebugUAV
	 void                      TutorialEvent ( struct FString S, struct FName Type, struct FName reserv );		//  XInterface.HudCDeathmatch.TutorialEvent
	 void                      CallRadioMessage ( int iKey, int iReservation1, int iReservation2 );		//  XInterface.HudCDeathmatch.CallRadioMessage
	 void                      CallEvent ( bool InvenCheck, int iReservation1, int iReservation2 );		//  XInterface.HudCDeathmatch.CallEvent
	 void                      DrawChangeHostGuest ( class UCanvas* C );         		//  XInterface.HudCDeathmatch.DrawChangeHostGuest
	 void                      OnEndChangedHost (  );                            		//  XInterface.HudCDeathmatch.OnEndChangedHost
	 void                      EndDrawChangeHost (  );                           		//  XInterface.HudCDeathmatch.EndDrawChangeHost
	 void                      BeginDrawChangeHost (  );                         		//  XInterface.HudCDeathmatch.BeginDrawChangeHost
	 struct FVector            GetTargetOrientation2 ( struct FVector loc, struct FVector camLoc, struct FRotator camRot );		//  XInterface.HudCDeathmatch.GetTargetOrientation2
	 struct FVector            ExpandTargetOrientationToCanvas ( class UCanvas* C, struct FVector Orientation );		// [ FUNC_Final ] XInterface.HudCDeathmatch.ExpandTargetOrientationToCanvas
	 struct FVector            GetTargetOrientation ( class AActor* Target, struct FVector camLoc, struct FRotator camRot );		// [ FUNC_Final ] XInterface.HudCDeathmatch.GetTargetOrientation
	 void                      DrawOutArrow ( class UCanvas* C, float W, float H, struct FVector ScreenPos );		//  XInterface.HudCDeathmatch.DrawOutArrow
	 void                      DrawObjectSprite ( class UCanvas* C, class UObject* Tag, struct FSpriteWidget objectSprite, struct FVector objectLoc, bool drawMeter, float rX, float rY );		//  XInterface.HudCDeathmatch.DrawObjectSprite
	 void                      DrawObjectSprite2 ( class UCanvas* C, class UObject* Tag, struct FSpriteWidget objectSprite, struct FVector objectLoc, struct FString ObjectName, int Alpha );		//  XInterface.HudCDeathmatch.DrawObjectSprite2
	 void                      DrawObjectSprite3 ( class UCanvas* C, struct FSpriteWidget objectSprite, struct FVector objectLoc );		//  XInterface.HudCDeathmatch.DrawObjectSprite3
	 struct FVector            CalcScreenPos ( class UCanvas* C, struct FVector objectLoc, float W, float H, bool ClipEclipse, float rX, float rY, unsigned char* clipped );		//  XInterface.HudCDeathmatch.CalcScreenPos
	 void                      CallSkill ( int iKey, bool bRequire, bool bSuccess );		//  XInterface.HudCDeathmatch.CallSkill
	 void                      DrawSelfKillMessage ( class UCanvas* C );         		//  XInterface.HudCDeathmatch.DrawSelfKillMessage
	 struct FSelfKillMessage   MakeSelfKillMessage ( struct FString KillerName, struct FString VictimName, class UClass* Type );		//  XInterface.HudCDeathmatch.MakeSelfKillMessage
	 void                      RefreshKillerMark ( struct FString mKillerName ); 		//  XInterface.HudCDeathmatch.RefreshKillerMark
	 void                      OnClientReceiveDeathMessage ( class APlayerController* P, int Switch, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject );		//  XInterface.HudCDeathmatch.OnClientReceiveDeathMessage
	 void                      OnClientReceiveFlyingDefenceBotDeathMessage ( class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject );		//  XInterface.HudCDeathmatch.OnClientReceiveFlyingDefenceBotDeathMessage
	 void                      OnClientReceiveHeliDeathMessage ( class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject );		//  XInterface.HudCDeathmatch.OnClientReceiveHeliDeathMessage
	 void                      OnClientReceiveDeathMessage_AddToConsole ( class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class AwDamageType* DamageType );		//  XInterface.HudCDeathmatch.OnClientReceiveDeathMessage_AddToConsole
	 void                      DrawDamageIndicator ( class UCanvas* C, struct FDamageIndicationInfo Info );		//  XInterface.HudCDeathmatch.DrawDamageIndicator
	 void                      DrawDamageIndicators ( class UCanvas* C );        		//  XInterface.HudCDeathmatch.DrawDamageIndicators
	 bool                      IsHealthInDanger ( int hpBefore, int hpAfter );   		//  XInterface.HudCDeathmatch.IsHealthInDanger
	 void                      DrawHealthInDanger ( class UCanvas* C );          		//  XInterface.HudCDeathmatch.DrawHealthInDanger
	 void                      DrawFallInDanger ( class UCanvas* C );            		//  XInterface.HudCDeathmatch.DrawFallInDanger
	 void                      StopNotifyFallInDanager (  );                     		//  XInterface.HudCDeathmatch.StopNotifyFallInDanager
	 void                      NotifyFallInDanger (  );                          		//  XInterface.HudCDeathmatch.NotifyFallInDanger
	 void                      StopNotifyHealthInDanager (  );                   		//  XInterface.HudCDeathmatch.StopNotifyHealthInDanager
	 void                      NotifyHealthInDanger (  );                        		//  XInterface.HudCDeathmatch.NotifyHealthInDanger
	 void                      ClearDamageIndicationInfos (  );                  		//  XInterface.HudCDeathmatch.ClearDamageIndicationInfos
	 void                      AddDamageIndicationInfo ( struct FVector AttackerLocation, int Damage, class UClass* DamageType );		//  XInterface.HudCDeathmatch.AddDamageIndicationInfo
	 void                      NotifyTakeHit ( struct FVector AttackerLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  XInterface.HudCDeathmatch.NotifyTakeHit
	 void                      DrawProgressStatus ( class UCanvas* C, float Progress );		//  XInterface.HudCDeathmatch.DrawProgressStatus
	 class UFont*              LoadLevelActionFont (  );                         		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.LoadLevelActionFont
	 void                      DisplayPortrait ( class APlayerReplicationInfo* PRI );		//  XInterface.HudCDeathmatch.DisplayPortrait
	 bool                      DrawLevelAction ( class UCanvas* C );             		//  XInterface.HudCDeathmatch.DrawLevelAction
	 void                      DrawVehicleChargeBar ( class UCanvas* C );        		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawVehicleChargeBar
	 void                      DrawChargeBar ( class UCanvas* C );               		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawChargeBar
	 void                      ShowReloadingPulse ( float HOLD );                		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.ShowReloadingPulse
	 void                      DrawDamageDealNotification ( class UCanvas* C );  		//  XInterface.HudCDeathmatch.DrawDamageDealNotification
	 void                      ResetByChangeSpectatingPawn (  );                 		//  XInterface.HudCDeathmatch.ResetByChangeSpectatingPawn
	 void                      DrawWarfareCrosshair ( class UCanvas* C );        		//  XInterface.HudCDeathmatch.DrawWarfareCrosshair
	 void                      execSetMA ( float f );                            		// [ FUNC_Exec ] XInterface.HudCDeathmatch.SetMA
	 void                      DrawDetectedBombs ( class UCanvas* C );           		//  XInterface.HudCDeathmatch.DrawDetectedBombs
	 void                      DrawHudSpectating ( class UCanvas* C );           		//  XInterface.HudCDeathmatch.DrawHudSpectating
	 void                      DrawHudPassC ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawHudPassC
	 class UMaterial*          GetLevelImage ( class APlayerReplicationInfo* PRI );		//  XInterface.HudCDeathmatch.GetLevelImage
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  XInterface.HudCDeathmatch.DisplayDebug
	 void                      DrawDebugPosition ( class UCanvas* C, class APawn* P );		//  XInterface.HudCDeathmatch.DrawDebugPosition
	 void                      DrawHudPassA ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawHudPassA
	 void                      DrawDebug ( class UCanvas* C, int X, int dy, int* Y );		//  XInterface.HudCDeathmatch.DrawDebug
	 void                      DrawDebug_Network ( class UCanvas* C, int X, int dy, int* Y );		//  XInterface.HudCDeathmatch.DrawDebug_Network
	 void                      execwclearNet (  );                               		// [ FUNC_Exec ] XInterface.HudCDeathmatch.wclearNet
	 void                      DrawDebug_DrawDebugUserWeaponStates ( class UCanvas* C, int X, int dy, int* Y );		//  XInterface.HudCDeathmatch.DrawDebug_DrawDebugUserWeaponStates
	 void                      DrawDebug_Inventory ( class UCanvas* C, int X, int dy, int* Y );		//  XInterface.HudCDeathmatch.DrawDebug_Inventory
	 void                      DrawDebugEmitters ( class UCanvas* C );           		//  XInterface.HudCDeathmatch.DrawDebugEmitters
	 void                      DrawDebugHelicopter ( class UCanvas* C );         		//  XInterface.HudCDeathmatch.DrawDebugHelicopter
	 void                      DrawDebugAirStrike ( class UCanvas* C );          		//  XInterface.HudCDeathmatch.DrawDebugAirStrike
	 void                      DrawSpecialPositions ( class UCanvas* C );        		//  XInterface.HudCDeathmatch.DrawSpecialPositions
	 void                      DrawTimer2 ( class UCanvas* C );                  		//  XInterface.HudCDeathmatch.DrawTimer2
	 void                      DrawTimer1 ( class UCanvas* C );                  		//  XInterface.HudCDeathmatch.DrawTimer1
	 void                      DrawAmmoLinear2 ( class UCanvas* C, int Ammo, int MaxAmmo, struct FAmmoSet as );		//  XInterface.HudCDeathmatch.DrawAmmoLinear2
	 void                      DrawAmmoLinear ( class UCanvas* C, int Ammo, int MaxAmmo, int digitOffset, struct FNumericWidget ammoWidget, struct FDigitSet* AmmoSet );		//  XInterface.HudCDeathmatch.DrawAmmoLinear
	 void                      DrawAmmo100 ( class UCanvas* C, int Ammo, int MaxAmmo, int ammoPerLine );		//  XInterface.HudCDeathmatch.DrawAmmo100
	 void                      DecideAmmoNum ( int Ammo, int MaxAmmo, int* ammoDefault, int* ammoUsed );		//  XInterface.HudCDeathmatch.DecideAmmoNum
	 bool                      IsAmmoShortage ( int Ammo, int MaxAmmo );         		//  XInterface.HudCDeathmatch.IsAmmoShortage
	 void                      DrawAmmoFlameThrower2 ( class UCanvas* C, int curr, int Max );		//  XInterface.HudCDeathmatch.DrawAmmoFlameThrower2
	 void                      DrawAmmoFlameThrower ( class UCanvas* C, int curr, int Max );		//  XInterface.HudCDeathmatch.DrawAmmoFlameThrower
	 void                      DrawAmmoDemo ( class UCanvas* C );                		//  XInterface.HudCDeathmatch.DrawAmmoDemo
	 void                      DrawAmmo ( class UCanvas* C );                    		//  XInterface.HudCDeathmatch.DrawAmmo
	 void                      DrawGaugeOverHeat ( class UCanvas* C, float iRatio );		//  XInterface.HudCDeathmatch.DrawGaugeOverHeat
	 void                      DrawWeaponImage ( class UCanvas* C, bool bShowSpectating, struct FString* sWeaponName );		//  XInterface.HudCDeathmatch.DrawWeaponImage
	 void                      DrawAmmoSeparator ( class UCanvas* C );           		//  XInterface.HudCDeathmatch.DrawAmmoSeparator
	 void                      CheckUsingSkillList ( class AwWeapon* Wpn, int* iState );		//  XInterface.HudCDeathmatch.CheckUsingSkillList
	 class UMaterial*          GetSkillIconByWeaponID ( int nWeaponID );         		//  XInterface.HudCDeathmatch.GetSkillIconByWeaponID
	 void                      InsertUsingSkillList ( int SkillID, int SubSkillID );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.InsertUsingSkillList
	 void                      CheckPawnOwnerSkill ( int* skillC4, int* skillAirStirke, int* skillRPG );		//  XInterface.HudCDeathmatch.CheckPawnOwnerSkill
	 bool                      HasItemInMyInventory ( bool bCheck, int ItemID1, int ItemID2 );		//  XInterface.HudCDeathmatch.HasItemInMyInventory
	 void                      InitSkillFlag (  );                               		//  XInterface.HudCDeathmatch.InitSkillFlag
	 void                      DrawSkill ( class UCanvas* C );                   		//  XInterface.HudCDeathmatch.DrawSkill
	 void                      DrawSkill_Slot6 ( class UCanvas* C );             		//  XInterface.HudCDeathmatch.DrawSkill_Slot6
	 void                      DrawSkill_Slot5 ( class UCanvas* C );             		//  XInterface.HudCDeathmatch.DrawSkill_Slot5
	 void                      DrawHudPassA_Score ( class UCanvas* C );          		//  XInterface.HudCDeathmatch.DrawHudPassA_Score
	 void                      NotifyDeath ( class APawn* P );                   		//  XInterface.HudCDeathmatch.NotifyDeath
	 float                     GetTeamDeathTextureScale ( struct FTeamDeathInfo Info );		//  XInterface.HudCDeathmatch.GetTeamDeathTextureScale
	 class FColor              GetTeamDeathTextureColor ( struct FTeamDeathInfo Info );		//  XInterface.HudCDeathmatch.GetTeamDeathTextureColor
	 void                      DrawTeamDeathInfo ( class UCanvas* C, struct FVector ScreenPos, struct FVector camLoc, struct FRotator camRot, struct FTeamDeathInfo Info );		//  XInterface.HudCDeathmatch.DrawTeamDeathInfo
	 void                      DrawAllTeamDeathInfo ( class UCanvas* C );        		//  XInterface.HudCDeathmatch.DrawAllTeamDeathInfo
	 void                      AddTeamDeathInfo ( class APawn* P, class APlayerReplicationInfo* PRI, float FadeTime, float Duration );		//  XInterface.HudCDeathmatch.AddTeamDeathInfo
	 void                      DrawPosture ( class UCanvas* C, bool bShowSpectating );		//  XInterface.HudCDeathmatch.DrawPosture
	 void                      DrawHpStamina ( class UCanvas* C, bool bShowSpectating );		//  XInterface.HudCDeathmatch.DrawHpStamina
	 void                      SellectEffectBar (  );                            		//  XInterface.HudCDeathmatch.SellectEffectBar
	 float                     CalculateHPBar ( bool bDamage, bool bRecovery );  		//  XInterface.HudCDeathmatch.CalculateHPBar
	 void                      DisplayVoiceGain ( class UCanvas* C );            		//  XInterface.HudCDeathmatch.DisplayVoiceGain
	 void                      ZoomFadeOut ( class UCanvas* C );                 		//  XInterface.HudCDeathmatch.ZoomFadeOut
	 void                      FadeZoom (  );                                    		//  XInterface.HudCDeathmatch.FadeZoom
	 void                      DisplayEnemyName ( class UCanvas* C, class APlayerReplicationInfo* PRI );		//  XInterface.HudCDeathmatch.DisplayEnemyName
	 void                      DrawEnemyName ( class UCanvas* C );               		//  XInterface.HudCDeathmatch.DrawEnemyName
	 void                      DrawCrosshair ( class UCanvas* C );               		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawCrosshair
	 void                      DrawWarfareCrosshair_Image ( class UCanvas* C, class UMaterial* mat );		//  XInterface.HudCDeathmatch.DrawWarfareCrosshair_Image
	 void                      UpdateCrossHairSpread (  );                       		//  XInterface.HudCDeathmatch.UpdateCrossHairSpread
	 void                      DrawTurretCrossHair ( class UCanvas* C );         		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawTurretCrossHair
	 void                      DrawStaticCrossHair ( class UCanvas* C );         		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawStaticCrossHair
	 void                      DrawHUDAnimWidget ( float DefaultScale, float PickUPTime, float AnimTime, float AnimScale, struct FSpriteWidget* HUDPiece );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawHUDAnimWidget
	 void                      DrawHUDAnimDigit ( float DefaultScale, float PickUPTime, float AnimTime, class FColor DefaultColor, class FColor colorHighlight, struct FNumericWidget* HUDPiece );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawHUDAnimDigit
	 struct FString            GetInfoString (  );                               		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.GetInfoString
	 void                      ShowEnemyWhoKillMe ( class UCanvas* C );          		//  XInterface.HudCDeathmatch.ShowEnemyWhoKillMe
	 void                      DrawSpectatingHud ( class UCanvas* C );           		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawSpectatingHud
	 void                      DrawViewTargetInfo ( class UCanvas* C );          		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawViewTargetInfo
	 void                      DrawResultScore ( class UCanvas* C );             		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawResultScore
	 bool                      DrawResult ( class UCanvas* C );                  		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawResult
	 void                      SendQuestUpdate (  );                             		//  XInterface.HudCDeathmatch.SendQuestUpdate
	 bool                      IsInCinematic (  );                               		//  XInterface.HudCDeathmatch.IsInCinematic
	 class FColor              GetTeamColor ( unsigned char TeamNum );           		//  XInterface.HudCDeathmatch.GetTeamColor
	 struct FString            GetScoreTagLine (  );                             		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.GetScoreTagLine
	 struct FString            GetScoreValue ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.GetScoreValue
	 struct FString            GetScoreText (  );                                		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.GetScoreText
	 void                      CalculateScore (  );                              		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.CalculateScore
	 void                      CalculateAmmo (  );                               		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.CalculateAmmo
	 void                      CalculateEnergy (  );                             		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.CalculateEnergy
	 void                      CalculateShield (  );                             		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.CalculateShield
	 void                      CalculateHealth (  );                             		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.CalculateHealth
	 void                      UpdateRankAndSpread ( class UCanvas* C );         		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.UpdateRankAndSpread
	 void                      DrawUDamage ( class UCanvas* C );                 		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawUDamage
	 void                      DrawTimer ( class UCanvas* C );                   		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawTimer
	 void                      DrawAdrenaline ( class UCanvas* C );              		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawAdrenaline
	 void                      DrawVehicleName ( class UCanvas* C );             		//  XInterface.HudCDeathmatch.DrawVehicleName
	 void                      PlaySoundRecovery (  );                           		//  XInterface.HudCDeathmatch.PlaySoundRecovery
	 void                      PlaySoundStop ( class UCanvas* C );               		//  XInterface.HudCDeathmatch.PlaySoundStop
	 void                      updateScore (  );                                 		//  XInterface.HudCDeathmatch.updateScore
	 void                      UpdateHUD (  );                                   		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.UpdateHUD
	 void                      DoUpdateTime (  );                                		//  XInterface.HudCDeathmatch.DoUpdateTime
	 void                      UpdateDigitsMisc (  );                            		//  XInterface.HudCDeathmatch.UpdateDigitsMisc
	 void                      UpdateDigitsHealth (  );                          		//  XInterface.HudCDeathmatch.UpdateDigitsHealth
	 void                      UpdateSprint (  );                                		//  XInterface.HudCDeathmatch.UpdateSprint
	 void                      UpdateTimer ( int* TimeMinutes, int* TimeSeconds );		//  XInterface.HudCDeathmatch.UpdateTimer
	 void                      SetDigitsTimer2 ( int Min, int sec );             		//  XInterface.HudCDeathmatch.SetDigitsTimer2
	 void                      SetDigitsTimer1 ( int Min, int sec );             		//  XInterface.HudCDeathmatch.SetDigitsTimer1
	 void                      SetDigitsScore ( int valueL, bool highlightL, int valueR, bool highlightR, int valueU, int valueD );		//  XInterface.HudCDeathmatch.SetDigitsScore
	 void                      DrawAirStrikePosition ( class UCanvas* C );       		//  XInterface.HudCDeathmatch.DrawAirStrikePosition
	 void                      DrawSuppliesPositions ( class UCanvas* C );       		//  XInterface.HudCDeathmatch.DrawSuppliesPositions
	 void                      CacheSuppliesPositions ( class AActor* act );     		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.CacheSuppliesPositions
	 void                      DeleteSuppliesPositions ( class AActor* act );    		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DeleteSuppliesPositions
	 void                      AllDeleteSuppliesPositions (  );                  		//  XInterface.HudCDeathmatch.AllDeleteSuppliesPositions
	 void                      CacheSpecialPositions (  );                       		//  XInterface.HudCDeathmatch.CacheSpecialPositions
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.Tick
	 void                      CheckCountdown ( class AGameReplicationInfo* GRI );		//  XInterface.HudCDeathmatch.CheckCountdown
	 void                      SetCustomHUDColor (  );                           		//  XInterface.HudCDeathmatch.SetCustomHUDColor
	 void                      SetCustomCrosshairColors (  );                    		//  XInterface.HudCDeathmatch.SetCustomCrosshairColors
	 void                      SetCustomCrosshairs (  );                         		//  XInterface.HudCDeathmatch.SetCustomCrosshairs
	 bool                      CustomHUDColorAllowed (  );                       		//  XInterface.HudCDeathmatch.CustomHUDColorAllowed
	 bool                      CustomCrosshairColorAllowed (  );                 		//  XInterface.HudCDeathmatch.CustomCrosshairColorAllowed
	 bool                      CustomCrosshairsAllowed (  );                     		//  XInterface.HudCDeathmatch.CustomCrosshairsAllowed
	 void                      ResetHud (  );                                    		//  XInterface.HudCDeathmatch.ResetHud
	 void                      SetScoreBoardClass ( class UClass* ScoreboardClass, class UClass* ResultBoardClass, class UClass* ResultBoardBootyClass );		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.SetScoreBoardClass
	 void                      PostBeginPlay (  );                               		//  XInterface.HudCDeathmatch.PostBeginPlay
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.UpdatePrecacheMaterials
	 void                      execShowBattleHelp (  );                          		// [ FUNC_Exec ] XInterface.HudCDeathmatch.ShowBattleHelp
	 void                      execShowRadioMessage_Notify (  );                 		// [ FUNC_Exec ] XInterface.HudCDeathmatch.ShowRadioMessage_Notify
	 void                      execShowRadioMessage_Alarm (  );                  		// [ FUNC_Exec ] XInterface.HudCDeathmatch.ShowRadioMessage_Alarm
	 void                      execShowRadioMessage (  );                        		// [ FUNC_Exec ] XInterface.HudCDeathmatch.ShowRadioMessage
	 void                      UpdateMinimapMode (  );                           		//  XInterface.HudCDeathmatch.UpdateMinimapMode
	 void                      execShowBigmap (  );                              		// [ FUNC_Exec ] XInterface.HudCDeathmatch.ShowBigmap
	 void                      DrawRouteCache ( class AwAIBot* C );              		// [ FUNC_Simulated ] XInterface.HudCDeathmatch.DrawRouteCache
	 void                      RenderAIPaths (  );                               		//  XInterface.HudCDeathmatch.RenderAIPaths
	 class FColor              CalcArrayColor ( float V, class TArray< class FColor > carray );		//  XInterface.HudCDeathmatch.CalcArrayColor
	 void                      RenderNavExtraCost (  );                          		//  XInterface.HudCDeathmatch.RenderNavExtraCost
	 void                      RenderVisCount (  );                              		//  XInterface.HudCDeathmatch.RenderVisCount
	 void                      RenderInfluence (  );                             		//  XInterface.HudCDeathmatch.RenderInfluence
	 void                      RenderCoverAngle (  );                            		//  XInterface.HudCDeathmatch.RenderCoverAngle
	 void                      RenderRadius (  );                                		//  XInterface.HudCDeathmatch.RenderRadius
	 void                      RenderSDFrontLine ( bool Full );                  		//  XInterface.HudCDeathmatch.RenderSDFrontLine
	 void                      execrendai ( struct FString v1, struct FString v2 );		// [ FUNC_Exec ] XInterface.HudCDeathmatch.rendai
	 void                      eventWorldSpaceOverlays (  );                     		// [ FUNC_Simulated | FUNC_Event ] XInterface.HudCDeathmatch.WorldSpaceOverlays
	 void                      execShrinkHUD (  );                               		// [ FUNC_Exec ] XInterface.HudCDeathmatch.ShrinkHUD
	 void                      execGrowHUD (  );                                 		// [ FUNC_Exec ] XInterface.HudCDeathmatch.GrowHUD
}; // Size: 0x353C

// Class XInterface.BTHUDResourcePoolHK
class DLL_IMPORT UBTHUDResourcePoolHK : public UObject
{
public:
	struct FImage                                      keyb_Z;                                           		// 0x002C ( 0x0020 ) 
	struct FImage                                      keyb_1;                                           		// 0x004C ( 0x0020 ) 
	struct FImage                                      keyb_2;                                           		// 0x006C ( 0x0020 ) 
	struct FImage                                      keyb_3;                                           		// 0x008C ( 0x0020 ) 
	struct FImage                                      keyb_4;                                           		// 0x00AC ( 0x0020 ) 
	struct FImage                                      keyb_5;                                           		// 0x00CC ( 0x0020 ) 
	struct FImage                                      keyb_T;                                           		// 0x00EC ( 0x0020 ) 
	struct FImage                                      keyb_E;                                           		// 0x010C ( 0x0020 ) 
	struct FImage                                      keyb_B;                                           		// 0x012C ( 0x0020 ) 
	struct FImage                                      keyb_Q;                                           		// 0x014C ( 0x0020 ) 
	struct FImage                                      img_login_test;                                   		// 0x016C ( 0x0020 ) 
	struct FImage                                      hud_back_1;                                       		// 0x018C ( 0x0020 ) 
	struct FImage                                      hud_back_2;                                       		// 0x01AC ( 0x0020 ) 
	struct FImage                                      hud_back_3;                                       		// 0x01CC ( 0x0020 ) 
	struct FImage                                      hud_back_4;                                       		// 0x01EC ( 0x0020 ) 
	struct FImage                                      hud_back_4_1;                                     		// 0x020C ( 0x0020 ) 
	struct FImage                                      hud_back_5;                                       		// 0x022C ( 0x0020 ) 
	struct FImage                                      hud_chat_but;                                     		// 0x024C ( 0x0020 ) 
	struct FImage                                      img_HUD_back_1;                                   		// 0x026C ( 0x0020 ) 
	struct FImage                                      img_HUD_back_2;                                   		// 0x028C ( 0x0020 ) 
	struct FImage                                      InGameChatCursor;                                 		// 0x02AC ( 0x0020 ) 
	struct FImage                                      Key_Bg;                                           		// 0x02CC ( 0x0020 ) 
	struct FImage                                      butt_n;                                           		// 0x02EC ( 0x0020 ) 
	struct FImage                                      butt_quick3;                                      		// 0x030C ( 0x0020 ) 
	struct FImage                                      butt_On1;                                         		// 0x032C ( 0x0020 ) 
	struct FImage                                      butt_On2;                                         		// 0x034C ( 0x0020 ) 
	struct FImage                                      butt_Keyboard;                                    		// 0x036C ( 0x0020 ) 
	struct FImage                                      img_TextSelect;                                   		// 0x038C ( 0x0020 ) 
	struct FImage                                      img_TextBack;                                     		// 0x03AC ( 0x0020 ) 
	struct FImage                                      newButt_n;                                        		// 0x03CC ( 0x0020 ) 
	struct FImage                                      Weapon_Type_n;                                    		// 0x03EC ( 0x0020 ) 
	struct FImage                                      Weapon_Sel_Line;                                  		// 0x040C ( 0x0020 ) 
	struct FImage                                      Slot_Bg;                                          		// 0x042C ( 0x0020 ) 
	struct FImage                                      MainWeapon_Bg;                                    		// 0x044C ( 0x0020 ) 
	struct FImage                                      SubWeapon_Bg;                                     		// 0x046C ( 0x0020 ) 
	struct FImage                                      MeleeWeapon_Bg;                                   		// 0x048C ( 0x0020 ) 
	struct FImage                                      SpWeapon_Bg;                                      		// 0x04AC ( 0x0020 ) 
	struct FImage                                      ActiveSkill_Bg;                                   		// 0x04CC ( 0x0020 ) 
	struct FImage                                      PassiveSkill_Bg;                                  		// 0x04EC ( 0x0020 ) 
}; // Size: 0x04E0

// Class XInterface.wHudPart_DisplayBase
class DLL_IMPORT AwHudPart_DisplayBase : public AHudBase
{
public:
	class AHudBase*                                    HudOwner;                                         		// 0x0C84 ( 0x0004 ) 
	class UwMapInfo*                                   mapInfo;                                          		// 0x0C88 ( 0x0004 ) 
	float                                              MaxAlpha;                                         		// 0x0C8C ( 0x0004 ) 
	float                                              MinAlpha;                                         		// 0x0C90 ( 0x0004 ) 
	struct FString                                     lsScore;                                          		// 0x0C94 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsRanking;                                        		// 0x0CA0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class FColor                                       color_Default;                                    		// 0x0CAC ( 0x0004 ) 
	class FColor                                       color_Orange;                                     		// 0x0CB0 ( 0x0004 ) 
	class FColor                                       color_Shadow;                                     		// 0x0CB4 ( 0x0004 ) 
	struct FSpriteWidget                               WKeyButtonBGSmall;                                		// 0x0CB8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKeyButtonBGSmallBlink;                           		// 0x0CF8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKeyButtonBG;                                     		// 0x0D38 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKeyButtonBGBlink;                                		// 0x0D78 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKeyButtonBGBig;                                  		// 0x0DB8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKeyButtonBGBigBlink;                             		// 0x0DF8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonNumber[ 0x0A ];                      		// 0x0E38 ( 0x0280 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonAlphaBet[ 0x1A ];                    		// 0x10B8 ( 0x0680 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonSpecial[ 0x25 ];                     		// 0x1738 ( 0x0940 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonFunction[ 0x0D ];                    		// 0x2078 ( 0x0340 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonNone;                                		// 0x23B8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRespawnBG;                                       		// 0x23F8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRespawnGauge;                                    		// 0x2438 ( 0x0040 ) [ CPF_Edit ]
	class TArray< struct FString >                     keys;                                             		// 0x2478 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     LocalizedKeys;                                    		// 0x2484 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sKeyBtnHeli;                                      		// 0x2490 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sKeyBtnAirStrike;                                 		// 0x249C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sKeyBtnUAV;                                       		// 0x24A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     skeyUseKey;                                       		// 0x24B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     skeyWeaponReload;                                 		// 0x24C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     skeyBtnC4;                                        		// 0x24CC ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      UpdateHelpKeyControll (  );                       		//  XInterface.wHudPart_DisplayBase.UpdateHelpKeyControll
	 struct FString            GetEllipsString ( class UCanvas* C, struct FString strText, float fLimitWidth, float FontSize );		//  XInterface.wHudPart_DisplayBase.GetEllipsString
	 bool                      GetKeyTexture ( struct FString sKey, float OffsetX, struct FSpriteWidget* W, float* fWidth );		//  XInterface.wHudPart_DisplayBase.GetKeyTexture
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* Level );		//  XInterface.wHudPart_DisplayBase.Initialize
}; // Size: 0x1854

// Class XInterface.wHudPart_SelectQSlot
class DLL_IMPORT AwHudPart_SelectQSlot : public AwHudPart_DisplayBase
{
public:
	struct FString                                     strChangeQS[ 0x06 ];                              		// 0x24D8 ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strChangeQSInPlayerWalking;                       		// 0x2520 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCloseQSTime;                                   		// 0x252C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCloseQSDistance;                               		// 0x2538 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strQSContent[ 0x0B ];                             		// 0x2544 ( 0x0084 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CapBaseWeaponSet;                                 		// 0x25C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     srtQSNothing;                                     		// 0x25D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                QuickSlotWindowShowTime;                          		// 0x25E0 ( 0x0004 ) 
	int                                                QuickSlotWindowStartTime;                         		// 0x25E4 ( 0x0004 ) 
	struct FString                                     strWeaponChange[ 0x02 ];                          		// 0x25E8 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strQSButtonZ;                                     		// 0x2600 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strToggleQS[ 0x02 ];                              		// 0x260C ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strUsing;                                         		// 0x2624 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class FColor                                       colorLeftTime;                                    		// 0x2630 ( 0x0004 ) 
	class FColor                                       colorQS;                                          		// 0x2634 ( 0x0004 ) 
	class FColor                                       colorQSSelect;                                    		// 0x2638 ( 0x0004 ) 
	class FColor                                       colorQSContent;                                   		// 0x263C ( 0x0004 ) 
	struct FFloatBox                                   fbQSBack;                                         		// 0x2640 ( 0x0010 ) 
	struct FFloatBox                                   fbQSButton[ 0x05 ];                               		// 0x2650 ( 0x0050 ) 
	struct FFloatBox                                   fbQSButtonZ;                                      		// 0x26A0 ( 0x0010 ) 
	struct FFloatBox                                   fbQSButtonOpen;                                   		// 0x26B0 ( 0x0010 ) 
	struct FFloatBox                                   fbQSContentName[ 0x05 ];                          		// 0x26C0 ( 0x0050 ) 
	struct FFloatBox                                   fbQSContent[ 0x05 ];                              		// 0x2710 ( 0x0050 ) 
	struct FFloatBox                                   fbQSBack_Content;                                 		// 0x2760 ( 0x0010 ) 
	struct FFloatBox                                   fbQS_Content_Text;                                		// 0x2770 ( 0x0010 ) 
	struct FFloatBox                                   fbQS_Content_Text_Default;                        		// 0x2780 ( 0x0010 ) 
	struct FFloatBox                                   fbQSBack_ItemContent[ 0x05 ];                     		// 0x2790 ( 0x0050 ) 
	struct FFloatBox                                   fbQSBack_ItemImage;                               		// 0x27E0 ( 0x0010 ) 
	class ALevelInfo*                                  Level;                                            		// 0x27F0 ( 0x0004 ) 
	float                                              LevelStartTime;                                   		// 0x27F4 ( 0x0004 ) 
	unsigned long                                      bStartChangeQS:1;                                 		// 0x27F8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bPrevIsStatePlayerWalking:1;                      		// 0x27F8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bCurrentIsStatePlayerWalking:1;                   		// 0x27F8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bPrevIsStateDead:1;                               		// 0x27F8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bCurrentIsStateDead:1;                            		// 0x27F8 ( 0x0004 )  [0x00000010]
	unsigned long                                      bPrevIsStateRoundEnded:1;                         		// 0x27F8 ( 0x0004 )  [0x00000020]
	unsigned long                                      bCurrentIsStateRoundEnded:1;                      		// 0x27F8 ( 0x0004 )  [0x00000040]
	unsigned long                                      bCurrentIsStateSpectate:1;                        		// 0x27F8 ( 0x0004 )  [0x00000080]
	unsigned long                                      bPrevIsStateWaitingForStart:1;                    		// 0x27F8 ( 0x0004 )  [0x00000100]
	unsigned long                                      bCurrentIsStateWaitingForStart:1;                 		// 0x27F8 ( 0x0004 )  [0x00000200]
	unsigned long                                      bTimeLimitOff:1;                                  		// 0x27F8 ( 0x0004 )  [0x00000400]
	int                                                PrevSelectedQSlotIndex;                           		// 0x27FC ( 0x0004 ) 
	int                                                ContentOffSetX[ 0x06 ];                           		// 0x2800 ( 0x0018 ) 
	int                                                ContentOffSetY[ 0x09 ];                           		// 0x2818 ( 0x0024 ) 
	struct FString                                     strQS[ 0x07 ];                                    		// 0x283C ( 0x0054 ) [ CPF_NeedCtorLink ]
	int                                                iFontSize0;                                       		// 0x2890 ( 0x0004 ) 
	int                                                iFontSize1;                                       		// 0x2894 ( 0x0004 ) 
	int                                                iFontSize2;                                       		// 0x2898 ( 0x0004 ) 
	int                                                iFontSize3;                                       		// 0x289C ( 0x0004 ) 
	struct FSpriteWidget                               HelpKeyButtonQSlot;                               		// 0x28A0 ( 0x0040 ) [ CPF_Edit ]
	float                                              WidthButtonQSlot;                                 		// 0x28E0 ( 0x0004 ) 
	unsigned long                                      bUpdate:1;                                        		// 0x28E4 ( 0x0004 )  [0x00000001]
	struct FFloatBox                                   fbQSBack_SlotName[ 0x04 ];                        		// 0x28E8 ( 0x0040 ) 
	class TArray< struct FsQuickSlot >                 QuickSlotList;                                    		// 0x2928 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bLoadDefaultItemResource:1;                       		// 0x2934 ( 0x0004 )  [0x00000001]
	unsigned long                                      bLoadSlotItemResource:1;                          		// 0x2934 ( 0x0004 )  [0x00000002]
	struct FImage                                      mDefaultItemImage[ 0x04 ];                        		// 0x2938 ( 0x0080 ) 
	struct FImage                                      mQuickSlotItemImage[ 0x14 ];                      		// 0x29B8 ( 0x0280 ) 
	struct FFloatBox                                   fWeaponUV[ 0x09 ];                                		// 0x2C38 ( 0x0090 ) 

	// UScript Functions
	 void                      DrawItemImage ( class UCanvas* C );               		//  XInterface.wHudPart_SelectQSlot.DrawItemImage
	 void                      CalcQuickSlotTimer ( int* respawnLeftTime, int* startupLeftTime );		//  XInterface.wHudPart_SelectQSlot.CalcQuickSlotTimer
	 struct FImage             GetItemImage ( class UCanvas* C, int iItemID );   		//  XInterface.wHudPart_SelectQSlot.GetItemImage
	 void                      QuickSlotContent_SetString ( class UCanvas* C, int iPosX, int iPosY, int iSlot, bool bDefaultWeapon );		//  XInterface.wHudPart_SelectQSlot.QuickSlotContent_SetString
	 bool                      DrawQuickSlotContent_List ( class UCanvas* C, int iPosX, int iPosY, int iSlot );		//  XInterface.wHudPart_SelectQSlot.DrawQuickSlotContent_List
	 void                      DrawQuickSlotContent_DefaultWeapon ( class UCanvas* C, int iPosX, int iPosY );		//  XInterface.wHudPart_SelectQSlot.DrawQuickSlotContent_DefaultWeapon
	 void                      DrawQuickSlotContent_Description ( class UCanvas* C, int iPosX, int iPosY );		//  XInterface.wHudPart_SelectQSlot.DrawQuickSlotContent_Description
	 void                      DrawSellectBar ( class UCanvas* C, int iPosX, int iPosY, bool bDefaultWeapon );		//  XInterface.wHudPart_SelectQSlot.DrawSellectBar
	 void                      DrawQuickSlotName ( class UCanvas* C, int iPosX, int iPosY, int iSlot, bool bDefaultWeapon, bool bHasItem );		//  XInterface.wHudPart_SelectQSlot.DrawQuickSlotName
	 void                      DrawQuickSlot ( class UCanvas* C );               		//  XInterface.wHudPart_SelectQSlot.DrawQuickSlot
	 void                      DrawSelectQSlot ( class UCanvas* C );             		//  XInterface.wHudPart_SelectQSlot.DrawSelectQSlot
	 void                      DrawA ( class UCanvas* C );                       		//  XInterface.wHudPart_SelectQSlot.DrawA
	 void                      UpdateHelpKeyControll (  );                       		//  XInterface.wHudPart_SelectQSlot.UpdateHelpKeyControll
	 void                      CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 );		//  XInterface.wHudPart_SelectQSlot.CallEvent
	 void                      CallSelectQuickSlot ( int iIndex );               		//  XInterface.wHudPart_SelectQSlot.CallSelectQuickSlot
	 void                      ToggleQuickSlotWindow (  );                       		//  XInterface.wHudPart_SelectQSlot.ToggleQuickSlotWindow
	 void                      EndQuickSlotWindow (  );                          		//  XInterface.wHudPart_SelectQSlot.EndQuickSlotWindow
	 void                      BeginQuickSlotWindow (  );                        		//  XInterface.wHudPart_SelectQSlot.BeginQuickSlotWindow
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* _level );		//  XInterface.wHudPart_SelectQSlot.Initialize
}; // Size: 0x07F0

// Class XInterface.wHudPart_MinimapBase
class DLL_IMPORT AwHudPart_MinimapBase : public AHudBase
{
public:
	class AHudBase*                                    HudOwner;                                         		// 0x0C84 ( 0x0004 ) 
	class ALevelInfo*                                  Level;                                            		// 0x0C88 ( 0x0004 ) 
	struct FSpriteWidget                               MinimapBG;                                        		// 0x0C8C ( 0x0040 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FSpriteWidget                               MinimapBGMap;                                     		// 0x0CCC ( 0x0040 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FSpriteWidget                               MinimapCompass;                                   		// 0x0D0C ( 0x0040 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FSpriteWidget                               MinimapFlatTop;                                   		// 0x0D4C ( 0x0040 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FSpriteWidget                               MinimapFlatBottom;                                		// 0x0D8C ( 0x0040 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	struct FSpriteWidget                               MinimapMyself;                                    		// 0x0DCC ( 0x0040 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class UMaterial*                                   MinimapMatMyself;                                 		// 0x0E0C ( 0x0004 ) 
	class UMaterial*                                   MinimapMatAlly;                                   		// 0x0E10 ( 0x0004 ) 
	class UMaterial*                                   MinimapMatAttackingAlly;                          		// 0x0E14 ( 0x0004 ) 
	class UMaterial*                                   MinimapFCMatAlly;                                 		// 0x0E18 ( 0x0004 ) 
	class UMaterial*                                   MinimapFCMatAttackingAlly;                        		// 0x0E1C ( 0x0004 ) 
	class UMaterial*                                   MinimapMatRadioMessage;                           		// 0x0E20 ( 0x0004 ) 
	struct FSpriteWidget                               MinimapDeadAlly;                                  		// 0x0E24 ( 0x0040 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineNotify ]
	class TArray< struct FSpriteWidget >               MinimapAttackingEnemies;                          		// 0x0E64 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               MinimapDeadEnemies;                               		// 0x0E70 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FMinimapDeadInfo >            MinimapDeadInfos;                                 		// 0x0E7C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSpriteWidget                               MinimapAlien;                                     		// 0x0E88 ( 0x0040 ) 
	struct FSpriteWidget                               MinimapStrikeAlly;                                		// 0x0EC8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               MinimapStrikeEnem;                                		// 0x0F08 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               MinimapAirStrikeRect;                             		// 0x0F48 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               MinimapAirStrikeAllyRect;                         		// 0x0F88 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               MinimapAirStrikeEnemRect;                         		// 0x0FC8 ( 0x0040 ) [ CPF_Edit ]
	int                                                MinimapCompassVisibleWidth;                       		// 0x1008 ( 0x0004 ) [ CPF_Edit ]
	int                                                MinimapCompassNorthPoint;                         		// 0x100C ( 0x0004 ) [ CPF_Edit ]
	int                                                MinimapCompassWidth;                              		// 0x1010 ( 0x0004 ) [ CPF_Edit ]
	int                                                MinimapCenterX;                                   		// 0x1014 ( 0x0004 ) [ CPF_Edit ]
	int                                                MinimapCenterY;                                   		// 0x1018 ( 0x0004 ) [ CPF_Edit ]
	int                                                MinimapSize;                                      		// 0x101C ( 0x0004 ) [ CPF_Edit ]
	int                                                MinimapCoverSize;                                 		// 0x1020 ( 0x0004 ) [ CPF_Edit ]
	float                                              MinimapScale;                                     		// 0x1024 ( 0x0004 ) [ CPF_Edit ]
	int                                                MinimapDrawBuffer;                                		// 0x1028 ( 0x0004 ) [ CPF_Edit ]
	float                                              MinimapAllyFireNotificationDuration;              		// 0x102C ( 0x0004 ) [ CPF_Edit ]
	float                                              MinimapEnemyDrawDuration_Pre;                     		// 0x1030 ( 0x0004 ) [ CPF_Edit ]
	float                                              MinimapEnemyDrawDuration_Post;                    		// 0x1034 ( 0x0004 ) [ CPF_Edit ]
	float                                              DeadDrawDuration;                                 		// 0x1038 ( 0x0004 ) [ CPF_Edit ]
	float                                              MinimapAllyRadioMessageDuration;                  		// 0x103C ( 0x0004 ) [ CPF_Edit ]
	float                                              fBlinkTimeLen;                                    		// 0x1040 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBlinkTerm;                                       		// 0x1044 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class UClass* >                      SpecialPositions_Class;                           		// 0x1048 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UMaterial* >                   SpecialPositions_Image;                           		// 0x1054 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              UpdateTime_SpecialPositions;                      		// 0x1060 ( 0x0004 ) 
	class TArray< struct FCachedSpecialPosInfo >       CachedSpecialPositions;                           		// 0x1064 ( 0x000C ) [ CPF_NeedCtorLink ]
	class FColor                                       BaseColor;                                        		// 0x1070 ( 0x0004 ) 
	float                                              IconSizeF;                                        		// 0x1074 ( 0x0004 ) 
	unsigned long                                      DrawFrame:1;                                      		// 0x1078 ( 0x0004 )  [0x00000001]
	unsigned long                                      DrawCompass:1;                                    		// 0x1078 ( 0x0004 )  [0x00000002]
	unsigned long                                      DrawNorthPole:1;                                  		// 0x1078 ( 0x0004 )  [0x00000004]
	class UVariableTexPanner*                          UAVBG_Base;                                       		// 0x107C ( 0x0004 ) 
	class UTexRotator*                                 UAVBG;                                            		// 0x1080 ( 0x0004 ) 
	struct FVector                                     t1;                                               		// 0x1084 ( 0x000C ) 
	struct FVector                                     t2;                                               		// 0x1090 ( 0x000C ) 
	struct FVector                                     w1;                                               		// 0x109C ( 0x000C ) 
	struct FVector                                     w2;                                               		// 0x10A8 ( 0x000C ) 
	struct FVector                                     tPerW;                                            		// 0x10B4 ( 0x000C ) 
	unsigned long                                      IsDrawSpecialPositions:1;                         		// 0x10C0 ( 0x0004 )  [0x00000001]
	unsigned long                                      IsClampDistance_SpecialPositions:1;               		// 0x10C0 ( 0x0004 )  [0x00000002]
	float                                              ClampDistance;                                    		// 0x10C4 ( 0x0004 ) 
	float                                              ClampDistance_SpecialPositions;                   		// 0x10C8 ( 0x0004 ) 
	struct FVector                                     tempVect;                                         		// 0x10CC ( 0x000C ) 
	struct FRotator                                    tempRot;                                          		// 0x10D8 ( 0x000C ) 
	struct FScriptDelegate                             __OnPreDrawMyself__Delegate;                      		// 0x10E4 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      Draw ( class UCanvas* C );                        		//  XInterface.wHudPart_MinimapBase.Draw
	 void                      OnPreDrawMyself ( class UCanvas* C );             		//  XInterface.wHudPart_MinimapBase.OnPreDrawMyself
	 void                      DrawMinimap_SpecialPositions ( class UCanvas* C );		//  XInterface.wHudPart_MinimapBase.DrawMinimap_SpecialPositions
	 void                      DrawMinimap_Mission ( class UCanvas* C );         		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Mission
	 void                      DrawMinimap_Airstrike ( class UCanvas* C );       		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Airstrike
	 void                      DrawMinimap_Helicopter ( class UCanvas* C );      		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Helicopter
	 void                      DrawMinimap_Deads ( class UCanvas* C );           		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Deads
	 void                      DrawMinimap_Enemies ( class UCanvas* C );         		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Enemies
	 bool                      IsEnemyInRange ( struct FVector loc );            		//  XInterface.wHudPart_MinimapBase.IsEnemyInRange
	 void                      DrawMinimap_Allies ( class UCanvas* C );          		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Allies
	 bool                      IsSameTeamByIndex ( int Team1, int Team2 );       		//  XInterface.wHudPart_MinimapBase.IsSameTeamByIndex
	 bool                      IsSameTeamByPRI ( class APlayerReplicationInfo* pri1, class APlayerReplicationInfo* pri2 );		//  XInterface.wHudPart_MinimapBase.IsSameTeamByPRI
	 void                      PushDeadOnMinimap ( int TeamIndex, struct FVector Location );		//  XInterface.wHudPart_MinimapBase.PushDeadOnMinimap
	 void                      CalcMinimapRotation ( struct FRotator Rotation, struct FRotator* outRotation );		//  XInterface.wHudPart_MinimapBase.CalcMinimapRotation
	 void                      SetupMinimapSpriteWidgetForDrawing ( struct FRotator Rotation, float minimapX, float minimapY, struct FSpriteWidget* Sprite );		//  XInterface.wHudPart_MinimapBase.SetupMinimapSpriteWidgetForDrawing
	 void                      ClampMinimapPosition ( float W, float H, float* X, float* Y );		//  XInterface.wHudPart_MinimapBase.ClampMinimapPosition
	 bool                      IsWithinMinimapArea ( float X, float Y );         		//  XInterface.wHudPart_MinimapBase.IsWithinMinimapArea
	 void                      CalculateTexturePositionFromMinimapPosition ( float minimapX, float minimapY, int* TX, int* ty );		//  XInterface.wHudPart_MinimapBase.CalculateTexturePositionFromMinimapPosition
	 void                      CalculateMinimapPosition ( struct FVector centerLoc, struct FRotator centerRotation, struct FVector TargetLoc, float* minimapX, float* minimapY );		//  XInterface.wHudPart_MinimapBase.CalculateMinimapPosition
	 void                      CalculateMinimapPositionPawnCentering ( class APawn* centerPawn, struct FVector TargetLoc, float* minimapX, float* minimapY );		//  XInterface.wHudPart_MinimapBase.CalculateMinimapPositionPawnCentering
	 void                      DrawMinimap_Myself ( class UCanvas* C );          		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Myself
	 float                     getSelfIconScale (  );                            		//  XInterface.wHudPart_MinimapBase.getSelfIconScale
	 void                      DrawMinimap_Compass ( class UCanvas* C );         		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Compass
	 void                      DrawMinimap_Frame ( class UCanvas* C );           		//  XInterface.wHudPart_MinimapBase.DrawMinimap_Frame
	 void                      DrawMinimap_BGMapUAV ( class UCanvas* C );        		//  XInterface.wHudPart_MinimapBase.DrawMinimap_BGMapUAV
	 void                      SetupBGMapUAV (  );                               		//  XInterface.wHudPart_MinimapBase.SetupBGMapUAV
	 void                      DrawMinimap_BGMap ( class UCanvas* C );           		//  XInterface.wHudPart_MinimapBase.DrawMinimap_BGMap
	 void                      MapMinimapTextureLocationToWorldLocation ( int TX, int ty, struct FVector* Location );		//  XInterface.wHudPart_MinimapBase.MapMinimapTextureLocationToWorldLocation
	 void                      MapWorldLocationToMinimapTextureLocation ( struct FVector Location, int* cX, int* cY );		//  XInterface.wHudPart_MinimapBase.MapWorldLocationToMinimapTextureLocation
	 void                      DrawMinimap_NorthPole ( class UCanvas* C );       		//  XInterface.wHudPart_MinimapBase.DrawMinimap_NorthPole
	 void                      CacheSpecialPositions (  );                       		//  XInterface.wHudPart_MinimapBase.CacheSpecialPositions
	 void                      Timer (  );                                       		//  XInterface.wHudPart_MinimapBase.Timer
	 void                      InitializeCoords (  );                            		//  XInterface.wHudPart_MinimapBase.InitializeCoords
	 void                      GetPivotCoords ( struct FVector* it1, struct FVector* iw1, struct FVector* it2, struct FVector* iw2 );		//  XInterface.wHudPart_MinimapBase.GetPivotCoords
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* myLevel );		//  XInterface.wHudPart_MinimapBase.Initialize
}; // Size: 0x0468

// Class XInterface.wHudPart_DisplayEvent
class DLL_IMPORT AwHudPart_DisplayEvent : public AwHudPart_DisplayBase
{
public:
	struct FSpriteWidget                               wHealthPack;                                      		// 0x24D8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHealthPackPlus;                                  		// 0x2518 ( 0x0040 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsHP;                                        		// 0x2558 ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsNumberBroadBig;                            		// 0x260C ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsNumberBig;                                 		// 0x26C0 ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsNumberMid;                                 		// 0x2774 ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsNumberMid_Base;                            		// 0x2828 ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsNumberSml;                                 		// 0x28DC ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsDFRoundNumber;                             		// 0x2990 ( 0x00B4 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsNumberFirst;                                		// 0x2A44 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsNumberSecond;                               		// 0x2A74 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsNumberPlus;                                 		// 0x2AA4 ( 0x0030 ) [ CPF_Edit ]
	int                                                FontSizeNormal;                                   		// 0x2AD4 ( 0x0004 ) [ CPF_Edit ]
	int                                                FontSizeKey;                                      		// 0x2AD8 ( 0x0004 ) [ CPF_Edit ]
	int                                                FontSizeRespawn;                                  		// 0x2ADC ( 0x0004 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillIconEvent;                                   		// 0x2AE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHelpBG;                                          		// 0x2B20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wSkill;                                           		// 0x2B60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wHelicopter;                                      		// 0x2BA0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAirStirke;                                       		// 0x2BE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WUAV;                                             		// 0x2C20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WC4;                                              		// 0x2C60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRPG7;                                            		// 0x2CA0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WReadyIncen;                                      		// 0x2CE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WReadyHellFire;                                   		// 0x2D20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WReadySpiltGrenade;                               		// 0x2D60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WReadyPinpointFire;                               		// 0x2DA0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WNotReadyIncen;                                   		// 0x2DE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WNotReadyHellFire;                                		// 0x2E20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WNotReadySpiltGrenade;                            		// 0x2E60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WNotReadyPinpointFire;                            		// 0x2EA0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAirStirkeIcon;                                   		// 0x2EE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHelicopterIcon;                                  		// 0x2F20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WUAVIcon;                                         		// 0x2F60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillHelicopterOn;                                		// 0x2FA0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillAirstrikeOn;                                 		// 0x2FE0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillUAVOn;                                       		// 0x3020 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillC4On;                                        		// 0x3060 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SkillRPG7On;                                      		// 0x30A0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WC4NotReady;                                      		// 0x30E0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAirStirkeNotReady;                               		// 0x3120 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHelicopterNotReady;                              		// 0x3160 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WUAVNotReady;                                     		// 0x31A0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRPG7NotReady;                                    		// 0x31E0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAirStirkeRequireFaild;                           		// 0x3220 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHelicopterRequireFaild;                          		// 0x3260 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WUAVRequireFaild;                                 		// 0x32A0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAirStirkeFocus;                                  		// 0x32E0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WAirStirkeSellect;                                		// 0x3320 ( 0x0040 ) [ CPF_Edit ]
	unsigned char                                      ECallSkillState;                                  		// 0x3360 ( 0x0001 ) 
	unsigned long                                      bResultSkillRequire:1;                            		// 0x3364 ( 0x0004 )  [0x00000001]
	float                                              fLastCallTime;                                    		// 0x3368 ( 0x0004 ) 
	float                                              fC4ActiveTime;                                    		// 0x336C ( 0x0004 ) 
	unsigned long                                      bC4Active:1;                                      		// 0x3370 ( 0x0004 )  [0x00000001]
	float                                              fBeginDrawTime_RPG7;                              		// 0x3374 ( 0x0004 ) 
	unsigned long                                      bRPG7Active:1;                                    		// 0x3378 ( 0x0004 )  [0x00000001]
	float                                              fBeginRespawnPosY;                                		// 0x337C ( 0x0004 ) 
	float                                              fEndRespawnPosY;                                  		// 0x3380 ( 0x0004 ) 
	float                                              fDrawTime;                                        		// 0x3384 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDrawTimeSkill;                                   		// 0x3388 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDrawTimeEffect;                                  		// 0x338C ( 0x0004 ) [ CPF_Edit ]
	float                                              fFadeOutEffect;                                   		// 0x3390 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFadeOutTime;                                     		// 0x3394 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDrawTimeHealth;                                  		// 0x3398 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFadeOutTimeHealth;                               		// 0x339C ( 0x0004 ) [ CPF_Edit ]
	float                                              fDistMove;                                        		// 0x33A0 ( 0x0004 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameMessageWaiting;                              		// 0x33A4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameWaitSpot;                                    		// 0x33E4 ( 0x0040 ) [ CPF_Edit ]
	struct FString                                     sWaitingMessage;                                  		// 0x3424 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              fReceiveTime_StartupMessage;                      		// 0x3430 ( 0x0004 ) 
	unsigned long                                      IsStartupMessage:1;                               		// 0x3434 ( 0x0004 )  [0x00000001]
	struct FSpriteWidget                               WConnectionInstability;                           		// 0x3438 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBGStart;                                         		// 0x3478 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBGStartDF;                                       		// 0x34B8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeTD;                                      		// 0x34F8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeSD;                                      		// 0x3538 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeDOA;                                     		// 0x3578 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeDOMI;                                    		// 0x35B8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeSB;                                      		// 0x35F8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeDM;                                      		// 0x3638 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeFM;                                      		// 0x3678 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameTypeTM;                                      		// 0x36B8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameChangeAttack;                                		// 0x36F8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGameChangePosition;                              		// 0x3738 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGo;                                              		// 0x3778 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGoBG;                                            		// 0x37B8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGoEffect;                                        		// 0x37F8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGoText;                                          		// 0x3838 ( 0x0040 ) [ CPF_Edit ]
	float                                              MessageLastTime;                                  		// 0x3878 ( 0x0004 ) 
	float                                              MessageAccelStep;                                 		// 0x387C ( 0x0004 ) 
	int                                                MessageEffect;                                    		// 0x3880 ( 0x0004 ) 
	int                                                MessageAlpha;                                     		// 0x3884 ( 0x0004 ) 
	struct FString                                     strQuestNoUpdate;                                 		// 0x3888 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageTD;                                   		// 0x3894 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageSDA1;                                 		// 0x38A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageSDA2;                                 		// 0x38AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageSDD1;                                 		// 0x38B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageSDD2;                                 		// 0x38C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageDOMI;                                 		// 0x38D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageSB;                                   		// 0x38DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageDM;                                   		// 0x38E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageFM;                                   		// 0x38F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageTM;                                   		// 0x3900 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BeginMessageDF;                                   		// 0x390C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LsReload;                                         		// 0x3918 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LsWarningAmmo;                                    		// 0x3924 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LsBattleExplain;                                  		// 0x3930 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LsConnectionInstability;                          		// 0x393C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsIsInvincible;                                   		// 0x3948 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsIsInvincibleBeginner;                           		// 0x3954 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     safeZoneRandomRespawn;                            		// 0x3960 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     RespawnText;                                      		// 0x396C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageChangingHostPre;                           		// 0x3978 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageChangingHost;                              		// 0x3984 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageChangingHostPlzWait;                       		// 0x3990 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned char                                      DMState;                                          		// 0x399C ( 0x0001 ) 
	float                                              fMessageDrawTime;                                 		// 0x39A0 ( 0x0004 ) 
	float                                              fBeginMessageTime;                                		// 0x39A4 ( 0x0004 ) 
	float                                              fBeginMessageTime_Go;                             		// 0x39A8 ( 0x0004 ) 
	float                                              fMessageDrawTime_Go;                              		// 0x39AC ( 0x0004 ) 
	float                                              fFadeOutTime_Go;                                  		// 0x39B0 ( 0x0004 ) 
	unsigned long                                      bMessageDraw:1;                                   		// 0x39B4 ( 0x0004 )  [0x00000001]
	int                                                iRound_Instrusion;                                		// 0x39B8 ( 0x0004 ) 
	float                                              fStartTimeDrawA;                                  		// 0x39BC ( 0x0004 ) 
	float                                              fBeginMessageTime_Instrusion;                     		// 0x39C0 ( 0x0004 ) 
	unsigned long                                      bMessageDraw_Intrusion:1;                         		// 0x39C4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bIsDraw_Intrusion:1;                              		// 0x39C4 ( 0x0004 )  [0x00000002]
	float                                              TimeConnectionInstability[ 0x02 ];                		// 0x39C8 ( 0x0008 ) 
	unsigned long                                      bConnectionInstability:1;                         		// 0x39D0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDrawConnectionInstability:1;                     		// 0x39D0 ( 0x0004 )  [0x00000002]
	struct FSpriteWidget                               WRoundResultBG;                                   		// 0x39D4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRoundWin;                                        		// 0x3A14 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRoundLose;                                       		// 0x3A54 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTextAF;                                          		// 0x3A94 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTextRSA;                                         		// 0x3AD4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WCompareSign;                                     		// 0x3B14 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WCompareSignMid;                                  		// 0x3B54 ( 0x0040 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsRoundWinAF;                                 		// 0x3B94 ( 0x0030 ) [ CPF_Edit ]
	struct FNumericWidget                              DigitsRoundWinRSA;                                		// 0x3BC4 ( 0x0030 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamMarkAF;                                      		// 0x3BF4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamMarkRSA;                                     		// 0x3C34 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WResultTeamMarkAF;                                		// 0x3C74 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WResultTeamMarkRSA;                               		// 0x3CB4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WWinTextAF;                                       		// 0x3CF4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WLoseTextAF;                                      		// 0x3D34 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WWinTextRSA;                                      		// 0x3D74 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WLoseTextRSA;                                     		// 0x3DB4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRoundResultNewBG;                                		// 0x3DF4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WRoundResultGradationBG;                          		// 0x3E34 ( 0x0040 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsNumResultWin;                              		// 0x3E74 ( 0x00B4 ) [ CPF_Edit ]
	struct FDigitSet                                   WDigitsNumResultLose;                             		// 0x3F28 ( 0x00B4 ) [ CPF_Edit ]
	class TArray< struct FNumericWidget >              DigitsAFWinScore;                                 		// 0x3FDC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsRSAWinScore;                                		// 0x3FE8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsAFLoseScore;                                		// 0x3FF4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsRSALoseScore;                               		// 0x4000 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSpriteWidget                               wDefenceBotIcon[ 0x0C ];                          		// 0x400C ( 0x0300 ) 
	class TArray< int >                                wDefenceGradeList;                                		// 0x430C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FSpriteWidget                               WScoreBG;                                         		// 0x4318 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGoalScoreBG;                                     		// 0x4358 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTimeBG;                                          		// 0x4398 ( 0x0040 ) [ CPF_Edit ]
	class TArray< struct FNumericWidget >              DigitsAFScore;                                    		// 0x43D8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsRSAScore;                                   		// 0x43E4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsGoalScore;                                  		// 0x43F0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsTime;                                       		// 0x43FC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsFFAGoalScore;                               		// 0x4408 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSpriteWidget                               WHudBG2;                                          		// 0x4414 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHudBGR;                                          		// 0x4454 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamScoreBG;                                     		// 0x4494 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WNowRSATeamisWin;                                 		// 0x44D4 ( 0x0040 ) 
	struct FSpriteWidget                               WNowAFTeamisWin;                                  		// 0x4514 ( 0x0040 ) 
	struct FSpriteWidget                               WNowRSATeamisLose;                                		// 0x4554 ( 0x0040 ) 
	struct FSpriteWidget                               WNowAFTeamisLose;                                 		// 0x4594 ( 0x0040 ) 
	struct FSpriteWidget                               WResultTxtAF[ 0x02 ];                             		// 0x45D4 ( 0x0080 ) [ CPF_Edit ]
	struct FSpriteWidget                               WResultTxtRSA[ 0x02 ];                            		// 0x4654 ( 0x0080 ) [ CPF_Edit ]
	struct FSpriteWidget                               WFFABG;                                           		// 0x46D4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WFFAScoreBG;                                      		// 0x4714 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WFFAScoreOverLayer;                               		// 0x4754 ( 0x0040 ) [ CPF_Edit ]
	int                                                Ranking_Self;                                     		// 0x4794 ( 0x0004 ) 
	class APlayerReplicationInfo*                      PRI_1st;                                          		// 0x4798 ( 0x0004 ) 
	class APlayerReplicationInfo*                      PRI_2nd;                                          		// 0x479C ( 0x0004 ) 
	class APlayerReplicationInfo*                      PRI_Self;                                         		// 0x47A0 ( 0x0004 ) 
	float                                              fSortingLastTime;                                 		// 0x47A4 ( 0x0004 ) 
	struct FSpriteWidget                               DFRankingBG;                                      		// 0x47A8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTimerBombBG;                                     		// 0x47E8 ( 0x0040 ) [ CPF_Edit ]
	class UMaterial*                                   matBack1;                                         		// 0x4828 ( 0x0004 ) 
	class UMaterial*                                   matLine;                                          		// 0x482C ( 0x0004 ) 
	class UMaterial*                                   tempMat;                                          		// 0x4830 ( 0x0004 ) 
	class UMaterial*                                   matOn;                                            		// 0x4834 ( 0x0004 ) 
	class TArray< class UMaterial* >                   Medals;                                           		// 0x4838 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     RankPostfix;                                      		// 0x4844 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                HasSkillC4;                                       		// 0x4850 ( 0x0004 ) 
	int                                                HasSkillAirStirke;                                		// 0x4854 ( 0x0004 ) 
	int                                                HasSkillRPG7;                                     		// 0x4858 ( 0x0004 ) 
	int                                                Displaying_State[ 0x11 ];                         		// 0x485C ( 0x0044 ) 
	float                                              fBeginDrawTime_Skill;                             		// 0x48A0 ( 0x0004 ) 
	unsigned long                                      bDrawSkillC4:1;                                   		// 0x48A4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDrawSkillRPG7:1;                                 		// 0x48A4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bDrawSkillHelicopter:1;                           		// 0x48A4 ( 0x0004 )  [0x00000004]
	unsigned long                                      bDrawSkillAirStrike:1;                            		// 0x48A4 ( 0x0004 )  [0x00000008]
	unsigned long                                      bDrawSkillUAV:1;                                  		// 0x48A4 ( 0x0004 )  [0x00000010]
	unsigned long                                      bDrawSkillRPG:1;                                  		// 0x48A4 ( 0x0004 )  [0x00000020]
	float                                              fBeginDrawTime_Item;                              		// 0x48A8 ( 0x0004 ) 
	float                                              fBeginDrawTime_SudenDeath;                        		// 0x48AC ( 0x0004 ) 
	struct FSpriteWidget                               W3Kill;                                           		// 0x48B0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               W5Kill;                                           		// 0x48F0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               W7Kill;                                           		// 0x4930 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               W10Kill;                                          		// 0x4970 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               W15Kill;                                          		// 0x49B0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHeadshot;                                        		// 0x49F0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WKillTextBg;                                      		// 0x4A30 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WHudBack3;                                        		// 0x4A70 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTxtHostChange;                                   		// 0x4AB0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTxtSudenDeath;                                   		// 0x4AF0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wTxtSubSudenDeath;                                		// 0x4B30 ( 0x0040 ) 
	struct FString                                     lsSudenDeathMessage[ 0x03 ];                      		// 0x4B70 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              fBeginDrawTime_BattleExplain;                     		// 0x4B94 ( 0x0004 ) 
	struct FSpriteWidget                               WBattleExplain1;                                  		// 0x4B98 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBattleExplain2;                                  		// 0x4BD8 ( 0x0040 ) [ CPF_Edit ]
	int                                                AttackTeamIndex;                                  		// 0x4C18 ( 0x0004 ) [ CPF_Edit ]
	int                                                CurrentRound;                                     		// 0x4C1C ( 0x0004 ) [ CPF_Edit ]
	float                                              fBeginDrawTime_GameMode;                          		// 0x4C20 ( 0x0004 ) 
	struct FString                                     sMessageGameMode;                                 		// 0x4C24 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UMaterial*                                   mGameMode[ 0x03 ];                                		// 0x4C30 ( 0x000C ) 
	struct FSpriteWidget                               WGameMode;                                        		// 0x4C3C ( 0x0040 ) [ CPF_Edit ]
	int                                                iGameObjectIndex;                                 		// 0x4C7C ( 0x0004 ) 
	unsigned long                                      bChangeMessgeGameMode:1;                          		// 0x4C80 ( 0x0004 )  [0x00000001]
	class TArray< struct FSpriteWidget >               DomObjectCaptureEnemy;                            		// 0x4C84 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               DomObjectCaptureAlly;                             		// 0x4C90 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               DomObjectCaptureNon;                              		// 0x4C9C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class USound*                                      SoundRequireHeliCopter;                           		// 0x4CA8 ( 0x0004 ) 
	class USound*                                      SoundRequireAtillery;                             		// 0x4CAC ( 0x0004 ) 
	class USound*                                      SoundRequireUAV;                                  		// 0x4CB0 ( 0x0004 ) 
	class USound*                                      SoundNotReady;                                    		// 0x4CB4 ( 0x0004 ) 
	struct FString                                     MessageWin;                                       		// 0x4CB8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MessageLose;                                      		// 0x4CC4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bUpdate:1;                                        		// 0x4CD0 ( 0x0004 )  [0x00000001]
	struct FSpriteWidget                               HelpKeyButtonReload;                              		// 0x4CD4 ( 0x0040 ) [ CPF_Edit ]
	float                                              WidthReload;                                      		// 0x4D14 ( 0x0004 ) 
	unsigned long                                      bDisplayEvent_HealthPack:1;                       		// 0x4D18 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDisplayEvent_CountDown:1;                        		// 0x4D18 ( 0x0004 )  [0x00000002]
	int                                                iCountNumber;                                     		// 0x4D1C ( 0x0004 ) 
	float                                              fBeginTimeCounDown;                               		// 0x4D20 ( 0x0004 ) 
	unsigned long                                      bDisplayEvent_Invincible:1;                       		// 0x4D24 ( 0x0004 )  [0x00000001]
	int                                                RPG7KillStreak;                                   		// 0x4D28 ( 0x0004 ) 
	int                                                IncenKillStreak;                                  		// 0x4D2C ( 0x0004 ) 
	int                                                HellfireKillStreak;                               		// 0x4D30 ( 0x0004 ) 
	int                                                PinpointFireKillStreak;                           		// 0x4D34 ( 0x0004 ) 
	int                                                SpiltGrenadeKillStreak;                           		// 0x4D38 ( 0x0004 ) 
	struct FSpriteWidget                               wBackSeparationTop;                               		// 0x4D3C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wBackSeparationBottom;                            		// 0x4D7C ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamImageAF[ 0x04 ];                             		// 0x4DBC ( 0x0100 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamImageRSA[ 0x04 ];                            		// 0x4EBC ( 0x0100 ) [ CPF_Edit ]
	struct FSpriteWidget                               WScoreTeamMarkAF;                                 		// 0x4FBC ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WScoreTeamMarkRSA;                                		// 0x4FFC ( 0x0040 ) [ CPF_Edit ]

	// UScript Functions
	 void                      DrawMessageConnectionInstability ( class UCanvas* C );		//  XInterface.wHudPart_DisplayEvent.DrawMessageConnectionInstability
	 void                      ConnectionInstability ( class UCanvas* C );       		//  XInterface.wHudPart_DisplayEvent.ConnectionInstability
	 void                      SetTimeConnectionInstability ( bool bSet );       		//  XInterface.wHudPart_DisplayEvent.SetTimeConnectionInstability
	 void                      DrawAAS ( class UCanvas* C, struct FString sAASNotice );		//  XInterface.wHudPart_DisplayEvent.DrawAAS
	 void                      DrawMoveGameNotice ( class UCanvas* C, struct FString sGameNotice, float fLifeTime );		//  XInterface.wHudPart_DisplayEvent.DrawMoveGameNotice
	 void                      DrawGameNotice ( class UCanvas* C, struct FString sGameNotice );		//  XInterface.wHudPart_DisplayEvent.DrawGameNotice
	 struct FString            GetMessageGameMode_FFA (  );                      		//  XInterface.wHudPart_DisplayEvent.GetMessageGameMode_FFA
	 struct FString            GetMessageGameMode_SBT (  );                      		//  XInterface.wHudPart_DisplayEvent.GetMessageGameMode_SBT
	 struct FString            GetMessageGameMode_SD (  );                       		//  XInterface.wHudPart_DisplayEvent.GetMessageGameMode_SD
	 struct FString            GetMessageGameMode_DOA (  );                      		//  XInterface.wHudPart_DisplayEvent.GetMessageGameMode_DOA
	 void                      SetMessageGameMode_DOM ( class UMaterial* matA, class UMaterial* matB, class UMaterial* matC );		//  XInterface.wHudPart_DisplayEvent.SetMessageGameMode_DOM
	 struct FString            GetMessageGameMode_DOM (  );                      		//  XInterface.wHudPart_DisplayEvent.GetMessageGameMode_DOM
	 struct FString            GetMessageGameMode_TD (  );                       		//  XInterface.wHudPart_DisplayEvent.GetMessageGameMode_TD
	 struct FString            GetMessageGameMode ( class UMaterial** mat );     		//  XInterface.wHudPart_DisplayEvent.GetMessageGameMode
	 void                      DisplayEvent_SetDrawGameMessage ( bool bMode, bool bSystem );		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_SetDrawGameMessage
	 void                      DrawGameMode ( class UCanvas* C );                		//  XInterface.wHudPart_DisplayEvent.DrawGameMode
	 void                      SetBombObjectIndex ( int objectIndex );           		//  XInterface.wHudPart_DisplayEvent.SetBombObjectIndex
	 void                      DisplayEvent_GameMode ( struct FString Message ); 		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_GameMode
	 void                      DisplayEvent_BattleExplain (  );                  		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_BattleExplain
	 void                      DrawPlusPoint ( class UCanvas* C, int iPoint, int iPosX, int iPosY, int iAlpha, int iEffectState, float fScale );		//  XInterface.wHudPart_DisplayEvent.DrawPlusPoint
	 void                      DisplayEvent_GainPoint ( int iPoint );            		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_GainPoint
	 void                      DrawSudenDeath ( class UCanvas* C );              		//  XInterface.wHudPart_DisplayEvent.DrawSudenDeath
	 void                      DisPlayEvent_SudenDeath (  );                     		//  XInterface.wHudPart_DisplayEvent.DisPlayEvent_SudenDeath
	 void                      DrawHostChange ( class UCanvas* C );              		//  XInterface.wHudPart_DisplayEvent.DrawHostChange
	 void                      DrawWarningWeaponInfo ( class UCanvas* C );       		//  XInterface.wHudPart_DisplayEvent.DrawWarningWeaponInfo
	 void                      ResetState (  );                                  		//  XInterface.wHudPart_DisplayEvent.ResetState
	 void                      DrawVehicleInfo ( class UCanvas* C );             		//  XInterface.wHudPart_DisplayEvent.DrawVehicleInfo
	 void                      DrawWeaponChange ( class UCanvas* C );            		//  XInterface.wHudPart_DisplayEvent.DrawWeaponChange
	 void                      DrawTileByMaterial ( class UCanvas* C, class UMaterial* mat, int iAlpha, float fUL, float fVL, float fScale );		//  XInterface.wHudPart_DisplayEvent.DrawTileByMaterial
	 void                      DrawMessage_BeginMission ( class UCanvas* C, int iRound, bool bChangeAttackTeam, int iAttackTeam, int iElapsedTime );		//  XInterface.wHudPart_DisplayEvent.DrawMessage_BeginMission
	 void                      DrawResultScore_FFA ( class UCanvas* C );         		//  XInterface.wHudPart_DisplayEvent.DrawResultScore_FFA
	 void                      DrawResultScore_FFA_Item ( class UCanvas* C, bool drawTop, class APlayerReplicationInfo* currPRI, class UwMatchUserInfo* User, int lh, int currLH, int nextLH, class UMaterial* medalMat, int Rank );		//  XInterface.wHudPart_DisplayEvent.DrawResultScore_FFA_Item
	 void                      DrawResultScore ( class UCanvas* C, bool Won );   		//  XInterface.wHudPart_DisplayEvent.DrawResultScore
	 void                      DrawTeamScoreUseImage (  );                       		//  XInterface.wHudPart_DisplayEvent.DrawTeamScoreUseImage
	 void                      DrawSpectating ( class UCanvas* C );              		//  XInterface.wHudPart_DisplayEvent.DrawSpectating
	 void                      DrawA ( class UCanvas* C );                       		//  XInterface.wHudPart_DisplayEvent.DrawA
	 void                      DrawTimerBomb ( class UCanvas* C, int Min, int sec );		//  XInterface.wHudPart_DisplayEvent.DrawTimerBomb
	 void                      DrawRankingInfo_Text ( class UCanvas* C, class APlayerReplicationInfo* currPRI, float _iPosX, float _iPosY, class FColor FontColor );		//  XInterface.wHudPart_DisplayEvent.DrawRankingInfo_Text
	 void                      DrawRankingInfo_Mark ( class UCanvas* C, class APlayerReplicationInfo* currPRI, float _iPosX, float _iPosY );		//  XInterface.wHudPart_DisplayEvent.DrawRankingInfo_Mark
	 void                      DrawRankingInfo ( class UCanvas* C, class APlayerReplicationInfo* currPRI, float _iPosX, float _iPosY );		//  XInterface.wHudPart_DisplayEvent.DrawRankingInfo
	 void                      DrawDFRankingInfo ( class UCanvas* C, class APlayerReplicationInfo* PRI, float iPosX, float iPosY );		//  XInterface.wHudPart_DisplayEvent.DrawDFRankingInfo
	 void                      DrawDFScore ( class UCanvas* C );                 		//  XInterface.wHudPart_DisplayEvent.DrawDFScore
	 void                      DrawFFAScore ( class UCanvas* C );                		//  XInterface.wHudPart_DisplayEvent.DrawFFAScore
	 void                      DFRankingSorting (  );                            		//  XInterface.wHudPart_DisplayEvent.DFRankingSorting
	 void                      FFARankingSorting (  );                           		//  XInterface.wHudPart_DisplayEvent.FFARankingSorting
	 void                      SortPRIArray (  );                                		// [ FUNC_Simulated ] XInterface.wHudPart_DisplayEvent.SortPRIArray
	 bool                      InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 );		// [ FUNC_Simulated ] XInterface.wHudPart_DisplayEvent.InOrder
	 void                      DrawMainScoreTeam ( class UCanvas* C, int iScoreAF, int iScoreRSA, int _iPosX, int _iPosY, struct FCalCoordsW calW );		//  XInterface.wHudPart_DisplayEvent.DrawMainScoreTeam
	 void                      DrawMainScore ( class UCanvas* C );               		//  XInterface.wHudPart_DisplayEvent.DrawMainScore
	 void                      DrawMainTimer ( class UCanvas* C );               		//  XInterface.wHudPart_DisplayEvent.DrawMainTimer
	 void                      DrawRoundResult ( class UCanvas* C, int ScoringTeam );		//  XInterface.wHudPart_DisplayEvent.DrawRoundResult
	 void                      DisplayRoundResult ( class UCanvas* C, int ScoringTeam );		//  XInterface.wHudPart_DisplayEvent.DisplayRoundResult
	 void                      DisplayMessaage_Round ( class UCanvas* C, int iAttackTeam, int iAlpha );		//  XInterface.wHudPart_DisplayEvent.DisplayMessaage_Round
	 void                      DisplayMessage_Mission ( class UCanvas* C, int iAttackTeam, int iAlpha );		//  XInterface.wHudPart_DisplayEvent.DisplayMessage_Mission
	 void                      DisplayMessage_Mission_Intrusion ( class UCanvas* C, int iAttackTeam, int iRound );		//  XInterface.wHudPart_DisplayEvent.DisplayMessage_Mission_Intrusion
	 void                      DrawCountDown ( class UCanvas* C, int iCount );   		//  XInterface.wHudPart_DisplayEvent.DrawCountDown
	 void                      DrawMessage_Waiting ( class UCanvas* C );         		//  XInterface.wHudPart_DisplayEvent.DrawMessage_Waiting
	 void                      DrawMessage_WaitingCountGM ( class UCanvas* C );  		//  XInterface.wHudPart_DisplayEvent.DrawMessage_WaitingCountGM
	 void                      DrawMessage_StartDefence ( class UCanvas* C );    		//  XInterface.wHudPart_DisplayEvent.DrawMessage_StartDefence
	 void                      DrawMessage_Start ( class UCanvas* C );           		//  XInterface.wHudPart_DisplayEvent.DrawMessage_Start
	 void                      DrawMessage_Go ( class UCanvas* C );              		//  XInterface.wHudPart_DisplayEvent.DrawMessage_Go
	 void                      DrawEffect ( class UCanvas* C, float StartTime, int iAlpha );		//  XInterface.wHudPart_DisplayEvent.DrawEffect
	 void                      DrawMessageHeadShotAndMultiKill ( class UCanvas* C, struct FString sMessage, bool bAddPosY, float fFontSize, class FColor _colorShadow );		//  XInterface.wHudPart_DisplayEvent.DrawMessageHeadShotAndMultiKill
	 void                      DrawMessageDomi_Capture ( class UCanvas* C, struct FDigitSet WDigit, struct FNumericWidget WRegion, struct FSpriteWidget WMessage, bool CaptureDoing, float ProgressPct );		//  XInterface.wHudPart_DisplayEvent.DrawMessageDomi_Capture
	 void                      DrawMessageSD_BombDoingAndDone ( class UCanvas* C, struct FSpriteWidget WMessage, bool SDDoing, float ProgressPct );		//  XInterface.wHudPart_DisplayEvent.DrawMessageSD_BombDoingAndDone
	 void                      DrawMessageSD_BombEnable ( class UCanvas* C, struct FSpriteWidget WKey, struct FSpriteWidget WMessage );		//  XInterface.wHudPart_DisplayEvent.DrawMessageSD_BombEnable
	 void                      DrawInvincibleGauge ( class UCanvas* C );         		//  XInterface.wHudPart_DisplayEvent.DrawInvincibleGauge
	 void                      DrawGauge2 ( class UCanvas* C, float fProgressPct, float PosX, float PosY );		//  XInterface.wHudPart_DisplayEvent.DrawGauge2
	 void                      DisplayEvent_Respawn ( class UCanvas* C );        		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_Respawn
	 void                      DrawGauge ( class UCanvas* C, float fProgressPct );		//  XInterface.wHudPart_DisplayEvent.DrawGauge
	 void                      DrawHelpBG ( class UCanvas* C, int OffsetX, int OffsetY, int iWidth, int iHeight );		//  XInterface.wHudPart_DisplayEvent.DrawHelpBG
	 void                      Draw_Item_Skill ( class UCanvas* C, class APlayerReplicationInfo* curPRI );		//  XInterface.wHudPart_DisplayEvent.Draw_Item_Skill
	 void                      Draw_Item_Supply ( class UCanvas* C, class APlayerReplicationInfo* curPRI );		//  XInterface.wHudPart_DisplayEvent.Draw_Item_Supply
	 void                      DrawEvent_Item ( class UCanvas* C );              		//  XInterface.wHudPart_DisplayEvent.DrawEvent_Item
	 void                      DisplayEvent_Skill_UsingSkill ( class UCanvas* C );		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_Skill_UsingSkill
	 void                      DisplayEvent_Skill_UAV ( class UCanvas* C );      		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_Skill_UAV
	 void                      DisplayEvent_Skill_AirStirke ( class UCanvas* C );		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_Skill_AirStirke
	 void                      DisplayEvent_Skill_State ( class UCanvas* C, struct FSpriteWidget WMessage, struct FSpriteWidget SkillIcon, bool bDrawing );		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_Skill_State
	 void                      CallSkill ( int iKey, bool bRequire, bool iSucess );		//  XInterface.wHudPart_DisplayEvent.CallSkill
	 void                      DisplayEvent_Skill_Helicopter ( class UCanvas* C );		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_Skill_Helicopter
	 void                      DrawEvent_Item_HealthPack ( class UCanvas* C, int AddHp );		//  XInterface.wHudPart_DisplayEvent.DrawEvent_Item_HealthPack
	 void                      SetSkillState ( int skillC4, int skillAirStirke, int SkillRPG7 );		//  XInterface.wHudPart_DisplayEvent.SetSkillState
	 void                      DisPlayEvent_Waiting ( struct FString Message );  		//  XInterface.wHudPart_DisplayEvent.DisPlayEvent_Waiting
	 void                      UpdateHelpKeyControll (  );                       		//  XInterface.wHudPart_DisplayEvent.UpdateHelpKeyControll
	 void                      UpdateHUD (  );                                   		//  XInterface.wHudPart_DisplayEvent.UpdateHUD
	 void                      PlaySound_Event (  );                             		//  XInterface.wHudPart_DisplayEvent.PlaySound_Event
	 void                      DisplayEvent_CountDown ( int iCount );            		//  XInterface.wHudPart_DisplayEvent.DisplayEvent_CountDown
	 void                      DisPlayEvent_EndWaitingForStart (  );             		//  XInterface.wHudPart_DisplayEvent.DisPlayEvent_EndWaitingForStart
	 void                      DisPlayEvent_BeginWaitingForStart (  );           		//  XInterface.wHudPart_DisplayEvent.DisPlayEvent_BeginWaitingForStart
	 void                      CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 );		//  XInterface.wHudPart_DisplayEvent.CallEvent
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* Level );		//  XInterface.wHudPart_DisplayEvent.Initialize
}; // Size: 0x2B64

// Class XInterface.xScoreBoard
class DLL_IMPORT AxScoreBoard : public AScoreBoard
{
public:
	float                                              fContentBeginY;                                   		// 0x042C ( 0x0004 ) 
	float                                              fContentEndY;                                     		// 0x0430 ( 0x0004 ) 
	float                                              fClanX1;                                          		// 0x0434 ( 0x0004 ) 
	float                                              fClanX2;                                          		// 0x0438 ( 0x0004 ) 
	float                                              fRankX1;                                          		// 0x043C ( 0x0004 ) 
	float                                              fRankX2;                                          		// 0x0440 ( 0x0004 ) 
	float                                              fNickNameX1;                                      		// 0x0444 ( 0x0004 ) 
	float                                              fNickNameX2;                                      		// 0x0448 ( 0x0004 ) 
	float                                              fScoreX1;                                         		// 0x044C ( 0x0004 ) 
	float                                              fScoreX2;                                         		// 0x0450 ( 0x0004 ) 
	float                                              fKillX1;                                          		// 0x0454 ( 0x0004 ) 
	float                                              fKillX2;                                          		// 0x0458 ( 0x0004 ) 
	float                                              fDeathX1;                                         		// 0x045C ( 0x0004 ) 
	float                                              fDeathX2;                                         		// 0x0460 ( 0x0004 ) 
	float                                              fAssistX1;                                        		// 0x0464 ( 0x0004 ) 
	float                                              fAssistX2;                                        		// 0x0468 ( 0x0004 ) 
	float                                              fPingX1;                                          		// 0x046C ( 0x0004 ) 
	float                                              fPingX2;                                          		// 0x0470 ( 0x0004 ) 
	float                                              fTeamScoreX1;                                     		// 0x0474 ( 0x0004 ) 
	float                                              fTeamScoreX2;                                     		// 0x0478 ( 0x0004 ) 
	float                                              ContentFontSize;                                  		// 0x047C ( 0x0004 ) 
	class FColor                                       ContentFontColor;                                 		// 0x0480 ( 0x0004 ) 
	struct FString                                     Clan;                                             		// 0x0484 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Rank;                                             		// 0x0490 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NickName;                                         		// 0x049C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Score;                                            		// 0x04A8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Kill;                                             		// 0x04B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Death;                                            		// 0x04C0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Assist;                                           		// 0x04CC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Ping;                                             		// 0x04D8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     bonus;                                            		// 0x04E4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Exp;                                              		// 0x04F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Point;                                            		// 0x04FC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TeamScore;                                        		// 0x0508 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     OK;                                               		// 0x0514 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Ranking;                                          		// 0x0520 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Score_1;                                          		// 0x052C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              ScreenRatioXEx;                                   		// 0x0538 ( 0x0004 ) 
	float                                              ScreenRatioYEx;                                   		// 0x053C ( 0x0004 ) 

	// UScript Functions
	 struct FString            GetEllipsString ( class UCanvas* C, struct FString strText, float fLimitWidth, float FontSize );		//  XInterface.xScoreBoard.GetEllipsString
	 void                      CalculateCoordinateDigit ( class UCanvas* C, struct FDigitSet W, struct FNumericWidget N, float fWidth, float fHeight, int Index, struct FCalCoordsW* coordsW );		//  XInterface.xScoreBoard.CalculateCoordinateDigit
	 void                      CalculateCoordinate ( class UCanvas* C, struct FSpriteWidget W, float fWidth, float fHeight, struct FCalCoordsW* coordsW );		//  XInterface.xScoreBoard.CalculateCoordinate
}; // Size: 0x0114

// Class XInterface.xScoreBoardTeamGame
class DLL_IMPORT AxScoreBoardTeamGame : public AxScoreBoard
{
public:
	struct FSpriteWidget                               SpBG;                                             		// 0x0540 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               Sp2TeamNameSection;                               		// 0x0580 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               Sp3TeamNameSection;                               		// 0x05C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpTeamNameEmphasis;                               		// 0x0600 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpTeamList;                                       		// 0x0640 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpSelectLine;                                     		// 0x0680 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               MapImage;                                         		// 0x06C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wGM_Playlist_BG;                                  		// 0x0700 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wGM_Players_HP;                                   		// 0x0740 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wGM_TeamMark_AF;                                  		// 0x0780 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wGM_TeamMark_RSA;                                 		// 0x07C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               wGM_ViewTarget;                                   		// 0x0800 ( 0x0040 ) [ CPF_Edit ]
	unsigned long                                      IndicateDeads:1;                                  		// 0x0840 ( 0x0004 )  [0x00000001]
	class FColor                                       DefaultFontColor;                                 		// 0x0844 ( 0x0004 ) 
	class FColor                                       DeadFontColor;                                    		// 0x0848 ( 0x0004 ) 
	class FColor                                       DefaultFontShadowColor;                           		// 0x084C ( 0x0004 ) 
	class FColor                                       FriendlyColor;                                    		// 0x0850 ( 0x0004 ) 
	class FColor                                       MyselfColor;                                      		// 0x0854 ( 0x0004 ) 
	float                                              BGBeginX;                                         		// 0x0858 ( 0x0004 ) 
	float                                              BGBeginY;                                         		// 0x085C ( 0x0004 ) 
	float                                              BGWidth;                                          		// 0x0860 ( 0x0004 ) 
	float                                              BGHeight;                                         		// 0x0864 ( 0x0004 ) 
	float                                              TeamListBeginX;                                   		// 0x0868 ( 0x0004 ) 
	float                                              TeamListBeginY;                                   		// 0x086C ( 0x0004 ) 
	float                                              TeamListOffsetY;                                  		// 0x0870 ( 0x0004 ) 
	float                                              TeamListWidth;                                    		// 0x0874 ( 0x0004 ) 
	float                                              TeamListHeight;                                   		// 0x0878 ( 0x0004 ) 
	float                                              TeamListTeamNameBeginX;                           		// 0x087C ( 0x0004 ) 
	float                                              TeamListTeamNameBeginY;                           		// 0x0880 ( 0x0004 ) 
	float                                              TeamListTeamNameWidth;                            		// 0x0884 ( 0x0004 ) 
	float                                              TeamListTeamNameHeight;                           		// 0x0888 ( 0x0004 ) 
	float                                              TeamListTeamNameFontSize;                         		// 0x088C ( 0x0004 ) 
	float                                              TeamListMemberNicknameBeginX;                     		// 0x0890 ( 0x0004 ) 
	float                                              TeamListMemberNicknameWidth;                      		// 0x0894 ( 0x0004 ) 
	float                                              TeamListMemberScoreBeginX;                        		// 0x0898 ( 0x0004 ) 
	float                                              TeamListMemberScoreWidth;                         		// 0x089C ( 0x0004 ) 
	float                                              TeamListMemberKillBeginX;                         		// 0x08A0 ( 0x0004 ) 
	float                                              TeamListMemberKillWidth;                          		// 0x08A4 ( 0x0004 ) 
	float                                              TeamListMemberAssistBeginX;                       		// 0x08A8 ( 0x0004 ) 
	float                                              TeamListMemberAssistWidth;                        		// 0x08AC ( 0x0004 ) 
	float                                              TeamListMemberDeathBeginX;                        		// 0x08B0 ( 0x0004 ) 
	float                                              TeamListMemberDeathWidth;                         		// 0x08B4 ( 0x0004 ) 
	float                                              TeamListMemberPingBeginX;                         		// 0x08B8 ( 0x0004 ) 
	float                                              TeamListMemberPingWidth;                          		// 0x08BC ( 0x0004 ) 
	float                                              TeamListMemberBeginY;                             		// 0x08C0 ( 0x0004 ) 
	float                                              TeamListMemberHeight;                             		// 0x08C4 ( 0x0004 ) 
	float                                              TeamListMemberHeightOffset;                       		// 0x08C8 ( 0x0004 ) 
	float                                              TeamListMemberFontSize;                           		// 0x08CC ( 0x0004 ) 
	float                                              TeamNameEmphasisBeginX;                           		// 0x08D0 ( 0x0004 ) 
	float                                              TeamNameEmphasisBeginY;                           		// 0x08D4 ( 0x0004 ) 
	float                                              TeamNameEmphasisOffsetY;                          		// 0x08D8 ( 0x0004 ) 
	float                                              TeamNameEmphasisWidth;                            		// 0x08DC ( 0x0004 ) 
	float                                              TeamNameEmphasisHeight;                           		// 0x08E0 ( 0x0004 ) 
	float                                              TeamNameSectionBeginX;                            		// 0x08E4 ( 0x0004 ) 
	float                                              TeamNameSectionBeginY;                            		// 0x08E8 ( 0x0004 ) 
	float                                              TeamNameSectionEndY;                              		// 0x08EC ( 0x0004 ) 
	float                                              TeamNameSectionTeam2OffsetX;                      		// 0x08F0 ( 0x0004 ) 
	float                                              TeamNameSectionTeam2Width;                        		// 0x08F4 ( 0x0004 ) 
	float                                              TeamNameSectionTeam2Height;                       		// 0x08F8 ( 0x0004 ) 
	float                                              TeamNameSectionTeam3OffsetX;                      		// 0x08FC ( 0x0004 ) 
	float                                              TeamNameSectionTeam3Width;                        		// 0x0900 ( 0x0004 ) 
	float                                              TeamNameSectionTeam3Height;                       		// 0x0904 ( 0x0004 ) 
	float                                              TeamNameFontSize;                                 		// 0x0908 ( 0x0004 ) 
	float                                              TeamScoreSectionBeginY;                           		// 0x090C ( 0x0004 ) 
	float                                              TeamScoreSectionEndY;                             		// 0x0910 ( 0x0004 ) 
	float                                              TeamScoreFontSize;                                		// 0x0914 ( 0x0004 ) 
	float                                              GameClassBeginX;                                  		// 0x0918 ( 0x0004 ) 
	float                                              GameClassBeginY;                                  		// 0x091C ( 0x0004 ) 
	float                                              GameClassEndX;                                    		// 0x0920 ( 0x0004 ) 
	float                                              GameClassEndY;                                    		// 0x0924 ( 0x0004 ) 
	float                                              GameClassFontSize;                                		// 0x0928 ( 0x0004 ) 
	struct FString                                     GameDescriptionText;                              		// 0x092C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              GameDescriptionBeginX;                            		// 0x0938 ( 0x0004 ) 
	float                                              GameDescriptionBeginY;                            		// 0x093C ( 0x0004 ) 
	float                                              GameDescriptionEndX;                              		// 0x0940 ( 0x0004 ) 
	float                                              GameDescriptionEndY;                              		// 0x0944 ( 0x0004 ) 
	float                                              GameDescriptionFontSize;                          		// 0x0948 ( 0x0004 ) 
	float                                              MapNameBeginX;                                    		// 0x094C ( 0x0004 ) 
	float                                              MapNameBeginY;                                    		// 0x0950 ( 0x0004 ) 
	float                                              MapNameEndX;                                      		// 0x0954 ( 0x0004 ) 
	float                                              MapNameEndY;                                      		// 0x0958 ( 0x0004 ) 
	float                                              MapNameFontSize;                                  		// 0x095C ( 0x0004 ) 
	class FColor                                       MapNameFontColor;                                 		// 0x0960 ( 0x0004 ) 
	float                                              MapImageBeginX;                                   		// 0x0964 ( 0x0004 ) 
	float                                              MapImageBeginY;                                   		// 0x0968 ( 0x0004 ) 
	float                                              MapImageEndX;                                     		// 0x096C ( 0x0004 ) 
	float                                              MapImageEndY;                                     		// 0x0970 ( 0x0004 ) 
	float                                              TimeX1;                                           		// 0x0974 ( 0x0004 ) 
	float                                              TimeY1;                                           		// 0x0978 ( 0x0004 ) 
	float                                              TimeX2;                                           		// 0x097C ( 0x0004 ) 
	float                                              TimeY2;                                           		// 0x0980 ( 0x0004 ) 
	class FColor                                       TimeColor;                                        		// 0x0984 ( 0x0004 ) 
	float                                              TimeFontSize;                                     		// 0x0988 ( 0x0004 ) 
	float                                              fMapNameX1;                                       		// 0x098C ( 0x0004 ) 
	float                                              fMapNameX2;                                       		// 0x0990 ( 0x0004 ) 
	float                                              fMapNameY1;                                       		// 0x0994 ( 0x0004 ) 
	float                                              fMapNameY2;                                       		// 0x0998 ( 0x0004 ) 
	float                                              fMapNameFontsize;                                 		// 0x099C ( 0x0004 ) 
	class UwMapInfo*                                   mapInfo;                                          		// 0x09A0 ( 0x0004 ) 
	struct FString                                     MissionNameTD;                                    		// 0x09A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameSD;                                    		// 0x09B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameDOMI;                                  		// 0x09BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameSBT;                                   		// 0x09C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameDM;                                    		// 0x09D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameFM;                                    		// 0x09E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameTM;                                    		// 0x09EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameDF;                                    		// 0x09F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionNameDOA;                                   		// 0x0A04 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentTD1;                                		// 0x0A10 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentTD2;                                		// 0x0A1C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentSDA1;                               		// 0x0A28 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentSDA2;                               		// 0x0A34 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentSDD1;                               		// 0x0A40 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentSDD2;                               		// 0x0A4C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentDOMI1;                              		// 0x0A58 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentDOMI2;                              		// 0x0A64 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentSBT1;                               		// 0x0A70 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentSBT2;                               		// 0x0A7C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentDM1;                                		// 0x0A88 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentDM2;                                		// 0x0A94 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentFM1;                                		// 0x0AA0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentFM2;                                		// 0x0AAC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentTM1;                                		// 0x0AB8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentTM2;                                		// 0x0AC4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentDF1;                                		// 0x0AD0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MissionCommentDOA;                                		// 0x0ADC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     StrLoading;                                       		// 0x0AE8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponLimitKnifeOnly;                             		// 0x0AF4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponLimitPistolOnly;                            		// 0x0B00 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponLimitGrenadeOnly;                           		// 0x0B0C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponLimitRPGOnly;                               		// 0x0B18 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponLimitSROnly;                                		// 0x0B24 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponLimitSRBan;                                 		// 0x0B30 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MapName;                                          		// 0x0B3C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MissionInfo;                                      		// 0x0B48 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FSpriteWidget                               WSBIBG1;                                          		// 0x0B54 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBIBG2;                                          		// 0x0B94 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBBG2;                                           		// 0x0BD4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBBG3;                                           		// 0x0C14 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBBGPanel;                                       		// 0x0C54 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBOutLine;                                       		// 0x0C94 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamAF;                                          		// 0x0CD4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamRSA;                                         		// 0x0D14 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WDivid;                                           		// 0x0D54 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WContentBG;                                       		// 0x0D94 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WListDivedBar;                                    		// 0x0DD4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBarSellectOver;                                  		// 0x0E14 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBarSellectClick;                                 		// 0x0E54 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTxtScorBord;                                     		// 0x0E94 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTxtMap;                                          		// 0x0ED4 ( 0x0040 ) [ CPF_Edit ]
	class TArray< struct FSpriteWidget >               WStripeBar;                                       		// 0x0F14 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSpriteWidget                               WIconMaster;                                      		// 0x0F20 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WIconDeath;                                       		// 0x0F60 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WPingBack;                                        		// 0x0FA0 ( 0x0040 ) 
	struct FSpriteWidget                               WPing;                                            		// 0x0FE0 ( 0x0040 ) 
	class TArray< struct FSpriteWidget >               WTxtGameType;                                     		// 0x1020 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FDigitSet                                   WDigitsNumberMid;                                 		// 0x102C ( 0x00B4 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTimeBG;                                          		// 0x10E0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamScoreBG;                                     		// 0x1120 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamScoreAF;                                     		// 0x1160 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTeamScoreRSA;                                    		// 0x11A0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WFFABG;                                           		// 0x11E0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WFFAScoreBG;                                      		// 0x1220 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WFFAScoreOverLayer;                               		// 0x1260 ( 0x0040 ) [ CPF_Edit ]
	int                                                AttackingTeam;                                    		// 0x12A0 ( 0x0004 ) 
	int                                                Ranking_Self;                                     		// 0x12A4 ( 0x0004 ) 
	class APlayerReplicationInfo*                      PRI_1st;                                          		// 0x12A8 ( 0x0004 ) 
	class APlayerReplicationInfo*                      PRI_2nd;                                          		// 0x12AC ( 0x0004 ) 
	class APlayerReplicationInfo*                      PRI_Self;                                         		// 0x12B0 ( 0x0004 ) 
	struct FSpriteWidget                               WDFBG;                                            		// 0x12B4 ( 0x0040 ) [ CPF_Edit ]
	class TArray< struct FNumericWidget >              DigitsAFScore;                                    		// 0x12F4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsRSAScore;                                   		// 0x1300 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsGoalScore;                                  		// 0x130C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsFFAGoalScore;                               		// 0x1318 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FNumericWidget >              DigitsTime;                                       		// 0x1324 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSpriteWidget                               WCompareSign;                                     		// 0x1330 ( 0x0040 ) [ CPF_Edit ]
	class AwScoreboardPart_Minimap*                    PartMinimap;                                      		// 0x1370 ( 0x0004 ) 
	struct FSpriteWidget                               ScoreBoardTitleBG;                                		// 0x1374 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WDEFTITLE;                                        		// 0x13B4 ( 0x0040 ) [ CPF_Edit ]

	// UScript Functions
	 void                      UpdateScoreBoard ( class UCanvas* Canvas );       		// [ FUNC_Simulated ] XInterface.xScoreBoardTeamGame.UpdateScoreBoard
	 void                      eventDrawMiniMap ( class UCanvas* C );            		// [ FUNC_Simulated | FUNC_Event ] XInterface.xScoreBoardTeamGame.DrawMiniMap
	 void                      eventDrawScoreboard ( class UCanvas* C );         		// [ FUNC_Simulated | FUNC_Event ] XInterface.xScoreBoardTeamGame.DrawScoreboard
	 void                      DrawGMTeamListSection ( class UCanvas* C, int lpTeam, class APlayerReplicationInfo* currPRI, int memberCount, float beginX, float beginY );		//  XInterface.xScoreBoardTeamGame.DrawGMTeamListSection
	 void                      eventDrawGMUserBoard ( class UCanvas* C );        		// [ FUNC_Simulated | FUNC_Event ] XInterface.xScoreBoardTeamGame.DrawGMUserBoard
	 void                      DrawTeamListBG_Mission ( class UCanvas* C );      		//  XInterface.xScoreBoardTeamGame.DrawTeamListBG_Mission
	 void                      DrawTeamListBG_Tut ( class UCanvas* C );          		//  XInterface.xScoreBoardTeamGame.DrawTeamListBG_Tut
	 void                      DrawTeamListBG_FFA ( class UCanvas* C );          		//  XInterface.xScoreBoardTeamGame.DrawTeamListBG_FFA
	 void                      DrawTeamBG ( class UCanvas* C );                  		//  XInterface.xScoreBoardTeamGame.DrawTeamBG
	 void                      DrawMap ( class UCanvas* C );                     		//  XInterface.xScoreBoardTeamGame.DrawMap
	 void                      DrawMapName ( class UCanvas* C );                 		//  XInterface.xScoreBoardTeamGame.DrawMapName
	 void                      MissonComment ( class UCanvas* C, float X1, float Y1, float X2, float Y2, struct FString MN );		//  XInterface.xScoreBoardTeamGame.MissonComment
	 struct FString            GetStringGoalScore (  );                          		//  XInterface.xScoreBoardTeamGame.GetStringGoalScore
	 void                      DrawMissonComment ( class UCanvas* C );           		//  XInterface.xScoreBoardTeamGame.DrawMissonComment
	 struct FString            GetStringPlayMode (  );                           		//  XInterface.xScoreBoardTeamGame.GetStringPlayMode
	 void                      SetMissionInfo (  );                              		//  XInterface.xScoreBoardTeamGame.SetMissionInfo
	 void                      DrawTeamScoreAndTimer ( class UCanvas* C, int _iPosX, int _iPosY );		//  XInterface.xScoreBoardTeamGame.DrawTeamScoreAndTimer
	 void                      DrawRankingInfo_Text ( class UCanvas* C, class APlayerReplicationInfo* currPRI, float _iPosX, float _iPosY, class FColor FontColor );		//  XInterface.xScoreBoardTeamGame.DrawRankingInfo_Text
	 void                      DrawRankingInfo_Mark ( class UCanvas* C, class APlayerReplicationInfo* currPRI, float _iPosX, float _iPosY );		//  XInterface.xScoreBoardTeamGame.DrawRankingInfo_Mark
	 void                      DrawRankingInfo ( class UCanvas* C, class APlayerReplicationInfo* currPRI, float _iPosX, float _iPosY );		//  XInterface.xScoreBoardTeamGame.DrawRankingInfo
	 void                      DrawFFAScore ( class UCanvas* C, float _iPosX, float _iPosY );		//  XInterface.xScoreBoardTeamGame.DrawFFAScore
	 void                      DrawGameInfo ( class UCanvas* C );                		//  XInterface.xScoreBoardTeamGame.DrawGameInfo
	 void                      RankingSorting ( int iCurrent, int iNext, class TArray< class APlayerReplicationInfo* >* pris );		//  XInterface.xScoreBoardTeamGame.RankingSorting
	 void                      DrawTeamListSection ( class UCanvas* C );         		//  XInterface.xScoreBoardTeamGame.DrawTeamListSection
	 void                      DrawPersonListSection_C ( class UCanvas* C, int lpTeam, class APlayerReplicationInfo* currPRI, int memberCount, struct FString HostName, float beginY, float markBeginY, float markPingY );		//  XInterface.xScoreBoardTeamGame.DrawPersonListSection_C
	 void                      DrawTeamListSection_C ( class UCanvas* C, int lpTeam, class APlayerReplicationInfo* currPRI, int memberCount, struct FString HostName, float beginY, float markBeginY, float markPingY );		//  XInterface.xScoreBoardTeamGame.DrawTeamListSection_C
	 void                      DrawTeamListSectionStripe ( class UCanvas* C, float OffsetY, int iTeamUserMax );		//  XInterface.xScoreBoardTeamGame.DrawTeamListSectionStripe
	 void                      DrawTime ( class UCanvas* C );                    		//  XInterface.xScoreBoardTeamGame.DrawTime
	 void                      DrawTextTeamScore ( class UCanvas* C, float _OffSetX, float _OffSetY );		//  XInterface.xScoreBoardTeamGame.DrawTextTeamScore
	 void                      DrawContentDescriptionTeam ( class UCanvas* C, float _OffSetX, float _OffSetY );		//  XInterface.xScoreBoardTeamGame.DrawContentDescriptionTeam
	 void                      DrawContentDescription ( class UCanvas* C, float _OffSetX, float _OffSetY );		//  XInterface.xScoreBoardTeamGame.DrawContentDescription
	 void                      DrawBGS ( class UCanvas* C );                     		//  XInterface.xScoreBoardTeamGame.DrawBGS
	 void                      SetAttackingTeam ( int Index );                   		//  XInterface.xScoreBoardTeamGame.SetAttackingTeam
	 void                      DrawMinimap_GameMode ( class UCanvas* C );        		//  XInterface.xScoreBoardTeamGame.DrawMinimap_GameMode
	 void                      PostBeginPlay (  );                               		//  XInterface.xScoreBoardTeamGame.PostBeginPlay
	 class AHudBase*           GetHudBaseOwner (  );                             		//  XInterface.xScoreBoardTeamGame.GetHudBaseOwner
}; // Size: 0x0EB4

// Class XInterface.ScoreBoardDeathMatch
class DLL_IMPORT AScoreBoardDeathMatch : public AScoreBoard
{
public:
	struct FString                                     RankText;                                         		// 0x042C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PlayerText;                                       		// 0x0438 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PointsText;                                       		// 0x0444 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TimeText;                                         		// 0x0450 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PingText;                                         		// 0x045C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     PLText;                                           		// 0x0468 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DeathsText;                                       		// 0x0474 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     AdminText;                                        		// 0x0480 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NetText;                                          		// 0x048C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FooterText;                                       		// 0x0498 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MatchIDText;                                      		// 0x04A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     OutText;                                          		// 0x04B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     OutFireText;                                      		// 0x04BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ReadyText;                                        		// 0x04C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NotReadyText;                                     		// 0x04D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SkillLevel[ 0x08 ];                               		// 0x04E0 ( 0x0060 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class APlayerReplicationInfo*                      PRIArray[ 0x20 ];                                 		// 0x0540 ( 0x0080 ) 
	float                                              FPHTime;                                          		// 0x05C0 ( 0x0004 ) 
	struct FString                                     MaxLives;                                         		// 0x05C4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FragLimit;                                        		// 0x05D0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FPH;                                              		// 0x05DC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     GameType;                                         		// 0x05E8 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MapName;                                          		// 0x05F4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Restart;                                          		// 0x0600 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Continue;                                         		// 0x060C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Ended;                                            		// 0x0618 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TimeLimit;                                        		// 0x0624 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Spacer;                                           		// 0x0630 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class UMaterial*                                   BoxMaterial;                                      		// 0x063C ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      DrawNetInfo ( class UCanvas* Canvas, int FontReduction, int HeaderOffsetY, int PlayerBoxSizeY, int BoxSpaceY, int BoxTextOffsetY, int OwnerOffset, int PlayerCount, int NetXPos );		//  XInterface.ScoreBoardDeathMatch.DrawNetInfo
	 void                      DrawMatchID ( class UCanvas* Canvas, int FontReduction );		//  XInterface.ScoreBoardDeathMatch.DrawMatchID
	 void                      eventUpdateScoreBoard ( class UCanvas* Canvas );  		// [ FUNC_Simulated | FUNC_Event ] XInterface.ScoreBoardDeathMatch.UpdateScoreBoard
	 void                      ExtraMarking ( class UCanvas* Canvas, int PlayerCount, int OwnerOffset, int XPos, int YPos, int YOffset );		//  XInterface.ScoreBoardDeathMatch.ExtraMarking
	 struct FString            GetDefaultScoreInfoString (  );                   		//  XInterface.ScoreBoardDeathMatch.GetDefaultScoreInfoString
	 struct FString            GetRestartString (  );                            		//  XInterface.ScoreBoardDeathMatch.GetRestartString
	 struct FString            GetTitleString (  );                              		//  XInterface.ScoreBoardDeathMatch.GetTitleString
	 void                      DrawTitle ( class UCanvas* Canvas, float HeaderOffsetY, float PlayerAreaY, float PlayerBoxSizeY );		//  XInterface.ScoreBoardDeathMatch.DrawTitle
	 void                      UpdatePrecacheFonts (  );                         		//  XInterface.ScoreBoardDeathMatch.UpdatePrecacheFonts
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] XInterface.ScoreBoardDeathMatch.UpdatePrecacheMaterials
}; // Size: 0x0214

// Class XInterface.wHudPart_Tutorial
class DLL_IMPORT AwHudPart_Tutorial : public AwHudPart_DisplayBase
{
public:
	struct FString                                     lsQKill3Enemy;                                    		// 0x24D8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQKillAim;                                       		// 0x24E4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQSprint;                                        		// 0x24F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMeleeAttack;                                   		// 0x24FC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQKillWithGrenade;                               		// 0x2508 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQComplete;                                      		// 0x2514 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsNext;                                           		// 0x2520 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQStartTutorial;                                 		// 0x252C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCStartTutorial;                                 		// 0x2538 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQQuitTutorial;                                  		// 0x2544 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCQuitTutorial;                                  		// 0x2550 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCKill3Enemy;                                    		// 0x255C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCKillAim;                                       		// 0x2568 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCSprint;                                        		// 0x2574 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMeleeAttack;                                   		// 0x2580 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCKillWithGrenade;                               		// 0x258C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class USound*                                      SoundQuest;                                       		// 0x2598 ( 0x0004 ) 
	class USound*                                      SoundQuestEnd;                                    		// 0x259C ( 0x0004 ) 
	int                                                iGoal;                                            		// 0x25A0 ( 0x0004 ) 
	int                                                iCurrent;                                         		// 0x25A4 ( 0x0004 ) 
	int                                                iProgress;                                        		// 0x25A8 ( 0x0004 ) 
	struct FString                                     SQuest;                                           		// 0x25AC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sComment;                                         		// 0x25B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sComment2;                                        		// 0x25C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bDrawMessage:1;                                   		// 0x25D0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDrawMessage_QuestComplete:1;                     		// 0x25D0 ( 0x0004 )  [0x00000002]
	unsigned long                                      bDrawKey:1;                                       		// 0x25D0 ( 0x0004 )  [0x00000004]
	unsigned long                                      bDrawBGKey:1;                                     		// 0x25D0 ( 0x0004 )  [0x00000008]
	unsigned long                                      bDrawProgress:1;                                  		// 0x25D0 ( 0x0004 )  [0x00000010]
	unsigned long                                      bOnEndMessage:1;                                  		// 0x25D0 ( 0x0004 )  [0x00000020]
	float                                              fBeginMessageTime;                                		// 0x25D4 ( 0x0004 ) 
	float                                              fMessageDrawTime;                                 		// 0x25D8 ( 0x0004 ) 
	float                                              fFadeOutTime;                                     		// 0x25DC ( 0x0004 ) 
	float                                              fKeyWidth;                                        		// 0x25E0 ( 0x0004 ) 
	float                                              fKeyHight;                                        		// 0x25E4 ( 0x0004 ) 
	struct FSpriteWidget                               WQuestBG1;                                        		// 0x25E8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestBG2;                                        		// 0x2628 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestBGKey;                                      		// 0x2668 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestBGKeyShift;                                 		// 0x26A8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestBGKeyE;                                     		// 0x26E8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestKey;                                        		// 0x2728 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestKeyShift;                                   		// 0x2768 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestKeyMouse;                                   		// 0x27A8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestKeyLeftMouse;                               		// 0x27E8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestKeyRightMouse;                              		// 0x2828 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WQuestKeyE;                                       		// 0x2868 ( 0x0040 ) [ CPF_Edit ]

	// UScript Functions
	 void                      DrawQuestComplete ( class UCanvas* C );           		//  XInterface.wHudPart_Tutorial.DrawQuestComplete
	 void                      DrawQuest ( class UCanvas* C );                   		//  XInterface.wHudPart_Tutorial.DrawQuest
	 void                      DrawSpectatingHud ( class UCanvas* C );           		//  XInterface.wHudPart_Tutorial.DrawSpectatingHud
	 void                      DrawHudPassA ( class UCanvas* C );                		//  XInterface.wHudPart_Tutorial.DrawHudPassA
	 void                      UpdateHelpKeyControll (  );                       		//  XInterface.wHudPart_Tutorial.UpdateHelpKeyControll
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* Level );		//  XInterface.wHudPart_Tutorial.Initialize
	 void                      CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 );		//  XInterface.wHudPart_Tutorial.CallEvent
	 void                      PlaySoundQuestEnd (  );                           		//  XInterface.wHudPart_Tutorial.PlaySoundQuestEnd
	 void                      PlaySoundQuest (  );                              		//  XInterface.wHudPart_Tutorial.PlaySoundQuest
	 void                      OnNextQuest (  );                                 		//  XInterface.wHudPart_Tutorial.OnNextQuest
	 void                      OnBeginTutorial (  );                             		//  XInterface.wHudPart_Tutorial.OnBeginTutorial
	 void                      OnCompleteQuest (  );                             		//  XInterface.wHudPart_Tutorial.OnCompleteQuest
	 void                      OnBeginQuest (  );                                		//  XInterface.wHudPart_Tutorial.OnBeginQuest
	 void                      OnEndMessage (  );                                		//  XInterface.wHudPart_Tutorial.OnEndMessage
	 void                      OnBeginMessage (  );                              		//  XInterface.wHudPart_Tutorial.OnBeginMessage
	 void                      OnPickUpHealthPack (  );                          		//  XInterface.wHudPart_Tutorial.OnPickUpHealthPack
	 void                      OnKillAim (  );                                   		//  XInterface.wHudPart_Tutorial.OnKillAim
	 void                      OnRunSprint ( int iSec );                         		//  XInterface.wHudPart_Tutorial.OnRunSprint
	 void                      OnKillGrenade (  );                               		//  XInterface.wHudPart_Tutorial.OnKillGrenade
	 void                      OnMeleeAttack (  );                               		//  XInterface.wHudPart_Tutorial.OnMeleeAttack
	 void                      OnKill3Enemy (  );                                		//  XInterface.wHudPart_Tutorial.OnKill3Enemy
}; // Size: 0x03D0

// Class XInterface.wHudPart_Tutorial2
class DLL_IMPORT AwHudPart_Tutorial2 : public AwHudPart_Tutorial
{
public:
	struct FString                                     lsStartComment;                                   		// 0x28A8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsStartComment2;                                  		// 0x28B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQOnFocus;                                       		// 0x28C0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCOnFocus;                                       		// 0x28CC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQOnFocusEnd;                                    		// 0x28D8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCOnFocusEnd;                                    		// 0x28E4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveControlA;                                  		// 0x28F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveControlA;                                  		// 0x28FC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveControlD;                                  		// 0x2908 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveControlD;                                  		// 0x2914 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveControlW;                                  		// 0x2920 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveControlW;                                  		// 0x292C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveControlS;                                  		// 0x2938 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveControlS;                                  		// 0x2944 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveControlQ;                                  		// 0x2950 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveControlQ;                                  		// 0x295C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveTrainingField;                             		// 0x2968 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveTrainingField;                             		// 0x2974 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveComplete;                                  		// 0x2980 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCNext01;                                        		// 0x298C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveWalking;                                   		// 0x2998 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveWalking;                                   		// 0x29A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveWalkingEnd;                                		// 0x29B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveWalkingEnd;                                		// 0x29BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveDucking;                                   		// 0x29C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveDucking;                                   		// 0x29D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveDuckingEnd;                                		// 0x29E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveDuckingEnd;                                		// 0x29EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveProne;                                     		// 0x29F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveProne;                                     		// 0x2A04 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveProneEnd;                                  		// 0x2A10 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveProneEnd;                                  		// 0x2A1C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveJump;                                      		// 0x2A28 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveJump;                                      		// 0x2A34 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveJumpEnd;                                   		// 0x2A40 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveJumpEnd;                                   		// 0x2A4C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveLadder;                                    		// 0x2A58 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveLadder;                                    		// 0x2A64 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveLadderEnd;                                 		// 0x2A70 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveLadderEnd;                                 		// 0x2A7C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQJumpDown;                                      		// 0x2A88 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCJumpDown;                                      		// 0x2A94 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQJumpDownEnd;                                   		// 0x2AA0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCJumpDownEnd;                                   		// 0x2AAC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQRecoveryHealth;                                		// 0x2AB8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCRecoveryHealth;                                		// 0x2AC4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQRecoveryHealthEnd;                             		// 0x2AD0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCRecoveryHealthEnd;                             		// 0x2ADC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveSprint;                                    		// 0x2AE8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveSprint;                                    		// 0x2AF4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveSprintEnd;                                 		// 0x2B00 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveSprintEnd;                                 		// 0x2B0C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFire;                                        		// 0x2B18 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFire;                                        		// 0x2B24 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFireEnd;                                     		// 0x2B30 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFireEnd;                                     		// 0x2B3C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFireAim;                                     		// 0x2B48 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFireAim;                                     		// 0x2B54 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFireAimEnd;                                  		// 0x2B60 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFireAimEnd;                                  		// 0x2B6C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFireMelee;                                   		// 0x2B78 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFireMelee;                                   		// 0x2B84 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFireMeleeEnd;                                		// 0x2B90 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFireMeleeEnd;                                		// 0x2B9C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveTrainingField2;                            		// 0x2BA8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveTrainingField2;                            		// 0x2BB4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQPickUpRocketLauncher;                          		// 0x2BC0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCPickUpRocketLauncher;                          		// 0x2BCC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFireRocketLauncher;                          		// 0x2BD8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFireRocketLauncher;                          		// 0x2BE4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoFireRocketLauncherEnd;                       		// 0x2BF0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoFireRocketLauncherEnd;                       		// 0x2BFC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQMoveTrainingField3;                            		// 0x2C08 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCMoveTrainingField3;                            		// 0x2C14 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoThrowingWeapon;                              		// 0x2C20 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoThrowingWeapon;                              		// 0x2C2C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQDoThrowingWeaponEnd;                           		// 0x2C38 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCDoThrowingWeaponEnd;                           		// 0x2C44 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQBattleAIBot;                                   		// 0x2C50 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCBattleAIBot;                                   		// 0x2C5C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsQBattleAIBotEnd;                                		// 0x2C68 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCBattleAIBotEnd;                                		// 0x2C74 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsAIBotTime;                                      		// 0x2C80 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsAIBotKillCount;                                 		// 0x2C8C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsGiftPoint;                                      		// 0x2C98 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FVector                                     vOldLocation;                                     		// 0x2CA4 ( 0x000C ) 
	float                                              fMoveLength;                                      		// 0x2CB0 ( 0x0004 ) 
	int                                                iTriggerID;                                       		// 0x2CB4 ( 0x0004 ) 
	unsigned long                                      IsFadeOut:1;                                      		// 0x2CB8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDrawBeginTutorial:1;                             		// 0x2CB8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bAIBotScore:1;                                    		// 0x2CB8 ( 0x0004 )  [0x00000004]
	float                                              fAIBotBeginTime;                                  		// 0x2CBC ( 0x0004 ) 
	float                                              fAIBotEndTime;                                    		// 0x2CC0 ( 0x0004 ) 
	int                                                iTutorialID;                                      		// 0x2CC4 ( 0x0004 ) 
	int                                                iOldTutorialID;                                   		// 0x2CC8 ( 0x0004 ) 
	int                                                iStartTutorialID;                                 		// 0x2CCC ( 0x0004 ) 
	int                                                aQuestID[ 0x11 ];                                 		// 0x2CD0 ( 0x0044 ) 
	int                                                iCurrentQuestID;                                  		// 0x2D14 ( 0x0004 ) 
	int                                                iStartQuestID;                                    		// 0x2D18 ( 0x0004 ) 
	int                                                iGiftItemID;                                      		// 0x2D1C ( 0x0004 ) 
	unsigned long                                      bDrawItem:1;                                      		// 0x2D20 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNoUpdate:1;                                      		// 0x2D20 ( 0x0004 )  [0x00000002]
	float                                              fTotalDrawTime;                                   		// 0x2D24 ( 0x0004 ) 
	float                                              fDrawItemTime;                                    		// 0x2D28 ( 0x0004 ) 
	float                                              fDrawEffectTime;                                  		// 0x2D2C ( 0x0004 ) 
	float                                              fDrawEffectTime1;                                 		// 0x2D30 ( 0x0004 ) 
	float                                              fDrawEffectTime2;                                 		// 0x2D34 ( 0x0004 ) 
	float                                              fDrawEffectTime3;                                 		// 0x2D38 ( 0x0004 ) 
	float                                              fFadeOutTime;                                     		// 0x2D3C ( 0x0004 ) 
	float                                              fBeginDrawItem;                                   		// 0x2D40 ( 0x0004 ) 
	float                                              fEndOfLife;                                       		// 0x2D44 ( 0x0004 ) 
	float                                              callLastTime;                                     		// 0x2D48 ( 0x0004 ) 
	float                                              callAccelStep;                                    		// 0x2D4C ( 0x0004 ) 
	int                                                iDrawEffectState;                                 		// 0x2D50 ( 0x0004 ) 
	struct FSpriteWidget                               WGiftItemPopBG;                                   		// 0x2D54 ( 0x0040 ) 
	struct FSpriteWidget                               WGiftItemPopBG2;                                  		// 0x2D94 ( 0x0040 ) 
	struct FSpriteWidget                               WGiftItemBG;                                      		// 0x2DD4 ( 0x0040 ) 
	struct FSpriteWidget                               WGiftItem;                                        		// 0x2E14 ( 0x0040 ) 
	struct FString                                     lsGiftItem;                                       		// 0x2E54 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGiftItemBG;                                    		// 0x2E60 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_Icon;                                      		// 0x2E6C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FSpriteWidget                               WNoticeExitBG;                                    		// 0x2E78 ( 0x0040 ) 
	struct FString                                     lsNoticeExit;                                     		// 0x2EB8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnTutorialResult__Delegate;                     		// 0x2EC4 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DrawBeginTutorial ( class UCanvas* C );           		//  XInterface.wHudPart_Tutorial2.DrawBeginTutorial
	 void                      DrawQuestComplete ( class UCanvas* C );           		//  XInterface.wHudPart_Tutorial2.DrawQuestComplete
	 void                      DrawQuest ( class UCanvas* C );                   		//  XInterface.wHudPart_Tutorial2.DrawQuest
	 void                      DrawNoticeExit ( class UCanvas* C );              		//  XInterface.wHudPart_Tutorial2.DrawNoticeExit
	 void                      DrawBattleAIBot ( class UCanvas* C );             		//  XInterface.wHudPart_Tutorial2.DrawBattleAIBot
	 float                     GetValueScaleUp ( float fStartScale, float fDestScale, float fDrawTime );		//  XInterface.wHudPart_Tutorial2.GetValueScaleUp
	 float                     GetValueScaleDown ( float fStartScale, float fDestScale, float fDrawTime );		//  XInterface.wHudPart_Tutorial2.GetValueScaleDown
	 void                      DrawGiftItemT ( class UCanvas* C );               		//  XInterface.wHudPart_Tutorial2.DrawGiftItemT
	 void                      DrawGiftItem ( class UCanvas* C );                		//  XInterface.wHudPart_Tutorial2.DrawGiftItem
	 void                      DrawSpectatingHud ( class UCanvas* C );           		//  XInterface.wHudPart_Tutorial2.DrawSpectatingHud
	 void                      DrawHudPassA ( class UCanvas* C );                		//  XInterface.wHudPart_Tutorial2.DrawHudPassA
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] XInterface.wHudPart_Tutorial2.Trigger
	 void                      CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 );		//  XInterface.wHudPart_Tutorial2.CallEvent
	 void                      Movelength ( struct FVector vLocation );          		//  XInterface.wHudPart_Tutorial2.Movelength
	 void                      EnableShootTarget ( struct FName eventTag );      		//  XInterface.wHudPart_Tutorial2.EnableShootTarget
	 void                      GotoTutorial ( int iQuestID );                    		//  XInterface.wHudPart_Tutorial2.GotoTutorial
	 void                      CheckStartTutorial (  );                          		//  XInterface.wHudPart_Tutorial2.CheckStartTutorial
	 void                      BeginDrawItem (  );                               		//  XInterface.wHudPart_Tutorial2.BeginDrawItem
	 void                      OnBeginTutorial (  );                             		//  XInterface.wHudPart_Tutorial2.OnBeginTutorial
	 void                      ResetProgress (  );                               		//  XInterface.wHudPart_Tutorial2.ResetProgress
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* Level );		//  XInterface.wHudPart_Tutorial2.Initialize
	 class AMover*             EnableTriggerEvent ( struct FName EventName, class AActor* Other, class APawn* EventInstigator );		//  XInterface.wHudPart_Tutorial2.EnableTriggerEvent
	 class AMover*             DisableTriggerEvent ( struct FName EventName, class AActor* Other, class APawn* EventInstigator );		//  XInterface.wHudPart_Tutorial2.DisableTriggerEvent
	 void                      TutorialEvent ( struct FString S, struct FName Type, struct FName reserv );		//  XInterface.wHudPart_Tutorial2.TutorialEvent
	 void                      OnTutorialResult ( int iTutorialID, int iCurrent, bool bCompleted );		//  XInterface.wHudPart_Tutorial2.OnTutorialResult
	 void                      OnQuest (  );                                     		//  XInterface.wHudPart_Tutorial2.OnQuest
}; // Size: 0x0624

// Class XInterface.xScoreBoardTutorial
class DLL_IMPORT AxScoreBoardTutorial : public AxScoreBoardTeamGame
{
public:
	struct FString                                     TutorialNumber;                                   		// 0x13F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TutorialContents;                                 		// 0x1400 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TutorialResult[ 0x03 ];                           		// 0x140C ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TutorialList[ 0x11 ];                             		// 0x1430 ( 0x00CC ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              fNumberX1;                                        		// 0x14FC ( 0x0004 ) 
	float                                              fNumberX2;                                        		// 0x1500 ( 0x0004 ) 
	float                                              fContentX1;                                       		// 0x1504 ( 0x0004 ) 
	float                                              fContentX2;                                       		// 0x1508 ( 0x0004 ) 
	float                                              fResultX1;                                        		// 0x150C ( 0x0004 ) 
	float                                              fResultX2;                                        		// 0x1510 ( 0x0004 ) 
	class TArray< struct FstTutorialContent >          aTutorialContents;                                		// 0x1514 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iCurrentTutorialID;                               		// 0x1520 ( 0x0004 ) 

	// UScript Functions
	 void                      DrawTeamListSection_C ( class UCanvas* C, int lpCount, class APlayerReplicationInfo* currPRI, int lpQuestNumber, struct FString HostName, float beginY, float markBeginY, float markPingY );		//  XInterface.xScoreBoardTutorial.DrawTeamListSection_C
	 void                      DrawTeamListSection ( class UCanvas* C );         		//  XInterface.xScoreBoardTutorial.DrawTeamListSection
	 void                      DrawContentDescription ( class UCanvas* C, float _OffSetX, float _OffSetY );		//  XInterface.xScoreBoardTutorial.DrawContentDescription
	 void                      DrawTeamBG ( class UCanvas* C );                  		//  XInterface.xScoreBoardTutorial.DrawTeamBG
	 void                      eventDrawMiniMap ( class UCanvas* C );            		// [ FUNC_Simulated | FUNC_Event ] XInterface.xScoreBoardTutorial.DrawMiniMap
	 void                      eventDrawScoreboard ( class UCanvas* C );         		// [ FUNC_Simulated | FUNC_Event ] XInterface.xScoreBoardTutorial.DrawScoreboard
	 void                      OnTutorialResult ( int iTutorialID, int iCurrent, bool bCompleted );		//  XInterface.xScoreBoardTutorial.OnTutorialResult
	 void                      PushTutorialList (  );                            		//  XInterface.xScoreBoardTutorial.PushTutorialList
	 void                      PostBeginPlay (  );                               		//  XInterface.xScoreBoardTutorial.PostBeginPlay
}; // Size: 0x0130

// Class XInterface.wHudPart_Minimap
class DLL_IMPORT AwHudPart_Minimap : public AwHudPart_MinimapBase
{
public:
	float                                              fFadeEffectTime;                                  		// 0x10EC ( 0x0004 ) 

	// UScript Functions
	 void                      DrawMinimap_Airstrike ( class UCanvas* C );       		//  XInterface.wHudPart_Minimap.DrawMinimap_Airstrike
}; // Size: 0x0004

// Class XInterface.wHudPart_Bigmap
class DLL_IMPORT AwHudPart_Bigmap : public AwHudPart_MinimapBase
{
public:
	class UWinFrameChanger*                            FrameChanger;                                     		// 0x10EC ( 0x0004 ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UWinBox*                                     MinimapBGPos;                                     		// 0x10F0 ( 0x0004 ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   MinimapCropCoords;                                		// 0x10F4 ( 0x0010 ) 
	struct FFloatBoxWH                                 P;                                                		// 0x1104 ( 0x0010 ) 

	// UScript Functions
	 void                      DrawMinimap_BGMapUAV ( class UCanvas* C );        		//  XInterface.wHudPart_Bigmap.DrawMinimap_BGMapUAV
	 void                      DrawMinimap_SpecialPositions ( class UCanvas* C );		//  XInterface.wHudPart_Bigmap.DrawMinimap_SpecialPositions
	 void                      DrawMinimap_Airstrike ( class UCanvas* C );       		//  XInterface.wHudPart_Bigmap.DrawMinimap_Airstrike
	 void                      DrawMinimap_Helicopter ( class UCanvas* C );      		//  XInterface.wHudPart_Bigmap.DrawMinimap_Helicopter
	 void                      DrawMinimap_Deads ( class UCanvas* C );           		//  XInterface.wHudPart_Bigmap.DrawMinimap_Deads
	 void                      DrawMinimap_Enemies ( class UCanvas* C );         		//  XInterface.wHudPart_Bigmap.DrawMinimap_Enemies
	 void                      DrawMinimap_Allies ( class UCanvas* C );          		//  XInterface.wHudPart_Bigmap.DrawMinimap_Allies
	 void                      CalculateTexturePositionFromMinimapPosition ( float minimapX, float minimapY, int* TX, int* ty );		//  XInterface.wHudPart_Bigmap.CalculateTexturePositionFromMinimapPosition
	 void                      CalculateMinimapPosition ( struct FVector centerLoc, struct FRotator centerRotation, struct FVector TargetLoc, float* minimapX, float* minimapY );		//  XInterface.wHudPart_Bigmap.CalculateMinimapPosition
	 void                      SetupMinimapSpriteWidgetForDrawing ( struct FRotator Rotation, float minimapX, float minimapY, struct FSpriteWidget* Sprite );		//  XInterface.wHudPart_Bigmap.SetupMinimapSpriteWidgetForDrawing
	 void                      DrawMinimap_Myself ( class UCanvas* C );          		//  XInterface.wHudPart_Bigmap.DrawMinimap_Myself
	 void                      SetupBGMapUAV (  );                               		//  XInterface.wHudPart_Bigmap.SetupBGMapUAV
	 void                      DrawMinimap_BGMap ( class UCanvas* C );           		//  XInterface.wHudPart_Bigmap.DrawMinimap_BGMap
	 void                      Draw ( class UCanvas* C );                        		//  XInterface.wHudPart_Bigmap.Draw
	 void                      GetPivotCoords ( struct FVector* it1, struct FVector* iw1, struct FVector* it2, struct FVector* iw2 );		//  XInterface.wHudPart_Bigmap.GetPivotCoords
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* myLevel );		//  XInterface.wHudPart_Bigmap.Initialize
}; // Size: 0x0028

// Class XInterface.wHudPart_DisplayMain
class DLL_IMPORT AwHudPart_DisplayMain : public AwHudPart_DisplayBase
{
public:
	struct FSpriteWidget                               HelpKeyButtonBackground;                          		// 0x24D8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonRun;                                 		// 0x2518 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonWorldMap;                            		// 0x2558 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonAim;                                 		// 0x2598 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonMiliAttack;                          		// 0x25D8 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonSkill[ 0x02 ];                       		// 0x2618 ( 0x0080 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonUAV;                                 		// 0x2698 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonBomb;                                		// 0x26D8 ( 0x0040 ) [ CPF_Edit ]
	float                                              WidthBomb;                                        		// 0x2718 ( 0x0004 ) 
	struct FSpriteWidget                               WSkill2[ 0x06 ];                                  		// 0x271C ( 0x0180 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSkill3[ 0x05 ];                                  		// 0x289C ( 0x0140 ) [ CPF_Edit ]
	struct FSpriteWidget                               HelpKeyButtonBattleHelp;                          		// 0x29DC ( 0x0040 ) 
	struct FSpriteWidget                               WBattleHelp;                                      		// 0x2A1C ( 0x0040 ) 
	int                                                HasSkills;                                        		// 0x2A5C ( 0x0004 ) 
	unsigned long                                      DrawSkills:1;                                     		// 0x2A60 ( 0x0004 )  [0x00000001]
	unsigned long                                      CheckDead:1;                                      		// 0x2A60 ( 0x0004 )  [0x00000002]
	float                                              CheckDeadTime;                                    		// 0x2A64 ( 0x0004 ) 
	float                                              StartDrawTime;                                    		// 0x2A68 ( 0x0004 ) 
	float                                              QuitDrawTime;                                     		// 0x2A6C ( 0x0004 ) 
	float                                              fFadeOutTime;                                     		// 0x2A70 ( 0x0004 ) 
	float                                              fDrawTime;                                        		// 0x2A74 ( 0x0004 ) 
	float                                              RespawnTime;                                      		// 0x2A78 ( 0x0004 ) 
	int                                                HasSkillNum;                                      		// 0x2A7C ( 0x0004 ) 
	float                                              WidthSprint;                                      		// 0x2A80 ( 0x0004 ) 
	float                                              WidthWorldMap;                                    		// 0x2A84 ( 0x0004 ) 
	float                                              WidthAim;                                         		// 0x2A88 ( 0x0004 ) 
	float                                              WidthMelee;                                       		// 0x2A8C ( 0x0004 ) 
	float                                              WidthSkill[ 0x03 ];                               		// 0x2A90 ( 0x000C ) 
	int                                                iCountSlot3;                                      		// 0x2A9C ( 0x0004 ) 
	int                                                iCountSlot4;                                      		// 0x2AA0 ( 0x0004 ) 
	unsigned long                                      bUpdate:1;                                        		// 0x2AA4 ( 0x0004 )  [0x00000001]
	struct FString                                     lsChattingHelp;                                   		// 0x2AA8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsSurvivedString;                                 		// 0x2AB4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsTeamAF;                                         		// 0x2AC0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsTeamRSA;                                        		// 0x2ACC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DrawSurvivedUsers ( class UCanvas* C );           		//  XInterface.wHudPart_DisplayMain.DrawSurvivedUsers
	 void                      DrawTextChattingHelp ( class UCanvas* C );        		//  XInterface.wHudPart_DisplayMain.DrawTextChattingHelp
	 void                      DrawHas2Skill ( class UCanvas* C );               		//  XInterface.wHudPart_DisplayMain.DrawHas2Skill
	 void                      DrawHas3Skill ( class UCanvas* C );               		//  XInterface.wHudPart_DisplayMain.DrawHas3Skill
	 void                      DrawHasSkill ( class UCanvas* C );                		//  XInterface.wHudPart_DisplayMain.DrawHasSkill
	 void                      CheckOwnerSkill (  );                             		//  XInterface.wHudPart_DisplayMain.CheckOwnerSkill
	 void                      DrawBlinkActiveKey ( class UCanvas* C );          		//  XInterface.wHudPart_DisplayMain.DrawBlinkActiveKey
	 void                      DrawHelpKeyControll_Bomb ( class UCanvas* C );    		//  XInterface.wHudPart_DisplayMain.DrawHelpKeyControll_Bomb
	 void                      DrawHelpKeyControll ( class UCanvas* C );         		//  XInterface.wHudPart_DisplayMain.DrawHelpKeyControll
	 void                      DrawSpectating ( class UCanvas* C );              		//  XInterface.wHudPart_DisplayMain.DrawSpectating
	 void                      DrawA ( class UCanvas* C );                       		//  XInterface.wHudPart_DisplayMain.DrawA
	 void                      SendHostPointInGame (  );                         		//  XInterface.wHudPart_DisplayMain.SendHostPointInGame
	 void                      UpdateHelpKeyControll (  );                       		//  XInterface.wHudPart_DisplayMain.UpdateHelpKeyControll
	 void                      UpdateHelpKey_Slot ( unsigned char iIndex, bool bEnable );		//  XInterface.wHudPart_DisplayMain.UpdateHelpKey_Slot
	 void                      DisplayEvent_ActiveSkill (  );                    		//  XInterface.wHudPart_DisplayMain.DisplayEvent_ActiveSkill
	 void                      CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 );		//  XInterface.wHudPart_DisplayMain.CallEvent
}; // Size: 0x0600

// Class XInterface.wHudPart_SelectQSlotCN
class DLL_IMPORT AwHudPart_SelectQSlotCN : public AwHudPart_SelectQSlot
{
public:
	struct FString                                     strQSItemName[ 0x09 ];                            		// 0x2CC8 ( 0x006C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DrawItemImage ( class UCanvas* C );               		//  XInterface.wHudPart_SelectQSlotCN.DrawItemImage
	 struct FImage             GetItemImage ( class UCanvas* C, int iItemID );   		//  XInterface.wHudPart_SelectQSlotCN.GetItemImage
	 void                      QuickSlotContent_SetString ( class UCanvas* C, int iPosX, int iPosY, int iSlot, bool bDefaultWeapon );		//  XInterface.wHudPart_SelectQSlotCN.QuickSlotContent_SetString
	 bool                      DrawQuickSlotContent_List ( class UCanvas* C, int iPosX, int iPosY, int iSlot );		//  XInterface.wHudPart_SelectQSlotCN.DrawQuickSlotContent_List
	 void                      DrawQuickSlotContent_DefaultWeapon ( class UCanvas* C, int iPosX, int iPosY );		//  XInterface.wHudPart_SelectQSlotCN.DrawQuickSlotContent_DefaultWeapon
	 void                      DrawQuickSlotContent_Description ( class UCanvas* C, int iPosX, int iPosY );		//  XInterface.wHudPart_SelectQSlotCN.DrawQuickSlotContent_Description
	 void                      DrawSellectBar ( class UCanvas* C, int iPosX, int iPosY, bool bDefaultWeapon );		//  XInterface.wHudPart_SelectQSlotCN.DrawSellectBar
	 void                      DrawQuickSlotName ( class UCanvas* C, int iPosX, int iPosY, int iSlot, bool bDefaultWeapon, bool bHasItem );		//  XInterface.wHudPart_SelectQSlotCN.DrawQuickSlotName
	 void                      DrawQuickSlot ( class UCanvas* C );               		//  XInterface.wHudPart_SelectQSlotCN.DrawQuickSlot
	 void                      DrawSelectQSlot ( class UCanvas* C );             		//  XInterface.wHudPart_SelectQSlotCN.DrawSelectQSlot
	 void                      DrawA ( class UCanvas* C );                       		//  XInterface.wHudPart_SelectQSlotCN.DrawA
	 void                      UpdateHelpKeyControll (  );                       		//  XInterface.wHudPart_SelectQSlotCN.UpdateHelpKeyControll
	 void                      CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 );		//  XInterface.wHudPart_SelectQSlotCN.CallEvent
	 void                      CallSelectQuickSlot ( int iIndex );               		//  XInterface.wHudPart_SelectQSlotCN.CallSelectQuickSlot
	 void                      ToggleQuickSlotWindow (  );                       		//  XInterface.wHudPart_SelectQSlotCN.ToggleQuickSlotWindow
	 void                      EndQuickSlotWindow (  );                          		//  XInterface.wHudPart_SelectQSlotCN.EndQuickSlotWindow
	 void                      BeginQuickSlotWindow (  );                        		//  XInterface.wHudPart_SelectQSlotCN.BeginQuickSlotWindow
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* _level );		//  XInterface.wHudPart_SelectQSlotCN.Initialize
}; // Size: 0x006C

// Class XInterface.wHudPart_RadioMessage
class DLL_IMPORT AwHudPart_RadioMessage : public AwHudPart_DisplayBase
{
public:
	unsigned char                                      eRadioType;                                       		// 0x24D8 ( 0x0001 ) 
	struct FSpriteWidget                               WKeyBtnRadionMessage;                             		// 0x24DC ( 0x0040 ) 
	struct FSpriteWidget                               WHudBack1;                                        		// 0x251C ( 0x0040 ) 
	struct FSpriteWidget                               WHudBack2;                                        		// 0x255C ( 0x0040 ) 
	struct FString                                     sKeyActive[ 0x0A ];                               		// 0x259C ( 0x0078 ) [ CPF_NeedCtorLink ]
	struct FString                                     lsRadioMessage;                                   		// 0x2614 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsRadioMessageType[ 0x04 ];                       		// 0x2620 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsCommond[ 0x0A ];                                		// 0x2650 ( 0x0078 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsStatement[ 0x08 ];                              		// 0x26C8 ( 0x0060 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     lsRespon[ 0x09 ];                                 		// 0x2728 ( 0x006C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DrawRadioMessage ( class UCanvas* C, int iMessage, int iHeight, struct FString sMessage );		//  XInterface.wHudPart_RadioMessage.DrawRadioMessage
	 unsigned char             GetRadioType (  );                                		//  XInterface.wHudPart_RadioMessage.GetRadioType
	 void                      SetRadioType ( unsigned char _ERMType );          		//  XInterface.wHudPart_RadioMessage.SetRadioType
	 void                      DrawA ( class UCanvas* C );                       		//  XInterface.wHudPart_RadioMessage.DrawA
	 void                      ResetRadioMessage (  );                           		//  XInterface.wHudPart_RadioMessage.ResetRadioMessage
	 void                      CallRadioMessage ( int iKey, int iReservation1, int iReservation2 );		//  XInterface.wHudPart_RadioMessage.CallRadioMessage
	 void                      UpdateHelpKeyControll (  );                       		//  XInterface.wHudPart_RadioMessage.UpdateHelpKeyControll
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* Level );		//  XInterface.wHudPart_RadioMessage.Initialize
}; // Size: 0x02BC

// Class XInterface.wHudPart_DisplayQuest
class DLL_IMPORT AwHudPart_DisplayQuest : public AwHudPart_DisplayBase
{
public:
	class TArray< struct FSQuest >                     aMessageList;                                     		// 0x24D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FSpriteWidget                               WSBBG3;                                           		// 0x24E4 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WMarkExclamation;                                 		// 0x2524 ( 0x0040 ) [ CPF_Edit ]
	float                                              fLifeTime;                                        		// 0x2564 ( 0x0004 ) 
	float                                              fFontSize;                                        		// 0x2568 ( 0x0004 ) 
	struct FString                                     temp1;                                            		// 0x256C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Temp2;                                            		// 0x2578 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              LTPosX;                                           		// 0x2584 ( 0x0004 ) 
	float                                              LTPosY;                                           		// 0x2588 ( 0x0004 ) 
	class UwMatchMaker*                                kMM;                                              		// 0x258C ( 0x0004 ) 

	// UScript Functions
	 void                      PushMessage ( struct FString MissionDesc, int cur, int Max );		//  XInterface.wHudPart_DisplayQuest.PushMessage
	 void                      ReceivedAccomplishMission100Percent ( struct FString MissionDesc, int cur, int Max );		//  XInterface.wHudPart_DisplayQuest.ReceivedAccomplishMission100Percent
	 void                      ReceivedAccomplishMission75Percent ( struct FString MissionDesc, int cur, int Max );		//  XInterface.wHudPart_DisplayQuest.ReceivedAccomplishMission75Percent
	 void                      ReceivedAccomplishMission50Percent ( struct FString MissionDesc, int cur, int Max );		//  XInterface.wHudPart_DisplayQuest.ReceivedAccomplishMission50Percent
	 void                      ReceivedAccomplishMission25Percent ( struct FString MissionDesc, int cur, int Max );		//  XInterface.wHudPart_DisplayQuest.ReceivedAccomplishMission25Percent
	 bool                      HasMessage (  );                                  		//  XInterface.wHudPart_DisplayQuest.HasMessage
	 void                      DrawGauge ( class UCanvas* C, float fProgressPct, float PosX, float PosY );		//  XInterface.wHudPart_DisplayQuest.DrawGauge
	 void                      DrawSpectating ( class UCanvas* C );              		//  XInterface.wHudPart_DisplayQuest.DrawSpectating
	 void                      DrawProgress ( class UCanvas* C );                		//  XInterface.wHudPart_DisplayQuest.DrawProgress
	 void                      DrawHudPassA ( class UCanvas* C );                		//  XInterface.wHudPart_DisplayQuest.DrawHudPassA
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* Level );		//  XInterface.wHudPart_DisplayQuest.Initialize
}; // Size: 0x00B8

// Class XInterface.wScoreboardPart_Minimap
class DLL_IMPORT AwScoreboardPart_Minimap : public AwHudPart_MinimapBase
{
public:
	class UWinFrameChanger*                            FrameChanger;                                     		// 0x10EC ( 0x0004 ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	class UWinBox*                                     MinimapBGPos;                                     		// 0x10F0 ( 0x0004 ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineNotify ]
	struct FFloatBox                                   MinimapCropCoords;                                		// 0x10F4 ( 0x0010 ) 
	struct FFloatBoxWH                                 P;                                                		// 0x1104 ( 0x0010 ) 

	// UScript Functions
	 void                      CalculateMinimapSize ( float* fWidth, float* fHeight );		//  XInterface.wScoreboardPart_Minimap.CalculateMinimapSize
	 void                      CalculateWorldPostionToMinimapPosition ( struct FVector Location, float* mx, float* my );		//  XInterface.wScoreboardPart_Minimap.CalculateWorldPostionToMinimapPosition
	 void                      CalculateTexturePositionFromMinimapPosition ( float minimapX, float minimapY, int* TX, int* ty );		//  XInterface.wScoreboardPart_Minimap.CalculateTexturePositionFromMinimapPosition
	 void                      CalculateMinimapPosition ( struct FVector centerLoc, struct FRotator centerRotation, struct FVector TargetLoc, float* minimapX, float* minimapY );		//  XInterface.wScoreboardPart_Minimap.CalculateMinimapPosition
	 void                      SetupMinimapSpriteWidgetForDrawing ( struct FRotator Rotation, float minimapX, float minimapY, struct FSpriteWidget* Sprite );		//  XInterface.wScoreboardPart_Minimap.SetupMinimapSpriteWidgetForDrawing
	 void                      CalcMinimapRotation ( struct FRotator Rotation, struct FRotator* outRotation );		//  XInterface.wScoreboardPart_Minimap.CalcMinimapRotation
	 void                      DrawMinimap_Airstrike ( class UCanvas* C );       		//  XInterface.wScoreboardPart_Minimap.DrawMinimap_Airstrike
	 void                      DrawMinimap_Myself ( class UCanvas* C );          		//  XInterface.wScoreboardPart_Minimap.DrawMinimap_Myself
	 void                      SetupBGMapUAV (  );                               		//  XInterface.wScoreboardPart_Minimap.SetupBGMapUAV
	 void                      DrawMinimap_BGMap ( class UCanvas* C );           		//  XInterface.wScoreboardPart_Minimap.DrawMinimap_BGMap
	 void                      DrawMinimap_CombatSituation ( class UCanvas* C ); 		//  XInterface.wScoreboardPart_Minimap.DrawMinimap_CombatSituation
	 void                      Draw ( class UCanvas* C );                        		//  XInterface.wScoreboardPart_Minimap.Draw
	 void                      Initialize ( class AHudBase* myOwner, class ALevelInfo* myLevel );		//  XInterface.wScoreboardPart_Minimap.Initialize
}; // Size: 0x0028

// Class XInterface.BTHUDColorPoolHK
class DLL_IMPORT UBTHUDColorPoolHK : public UObject
{
public:

	// UScript Functions
	 class FColor              DefaultShadow (  );                               		//  XInterface.BTHUDColorPoolHK.DefaultShadow
	 class FColor              DefaultWhite (  );                                		//  XInterface.BTHUDColorPoolHK.DefaultWhite
}; // Size: 0x0000

// Class XInterface.GUIComboButton
class DLL_IMPORT UGUIComboButton : public UGUIVertScrollButton
{
public:

	// UScript Functions
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIComboButton.InitComponent
}; // Size: 0x0000

// Class XInterface.GUIVertImageListBox
class DLL_IMPORT UGUIVertImageListBox : public UGUIListBoxBase
{
public:
	class UGUIVertImageList*                           List;                                             		// 0x033C ( 0x0004 ) [ CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned char                                      CellStyle;                                        		// 0x0340 ( 0x0001 ) [ CPF_Edit ]
	float                                              ImageScale;                                       		// 0x0344 ( 0x0004 ) [ CPF_Edit ]
	int                                                NoVisibleRows;                                    		// 0x0348 ( 0x0004 ) [ CPF_Edit ]
	int                                                NoVisibleCols;                                    		// 0x034C ( 0x0004 ) [ CPF_Edit ]
	int                                                HorzBorder;                                       		// 0x0350 ( 0x0004 ) [ CPF_Edit ]
	int                                                VertBorder;                                       		// 0x0354 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      Clear (  );                                       		//  XInterface.GUIVertImageListBox.Clear
	 bool                      MyClose ( class UGUIContextMenu* Sender );        		//  XInterface.GUIVertImageListBox.MyClose
	 bool                      MyOpen ( class UGUIContextMenu* Menu, class UGUIComponent* ContextMenuOwner );		//  XInterface.GUIVertImageListBox.MyOpen
	 void                      AddImage ( class UMaterial* Image, int Item );    		//  XInterface.GUIVertImageListBox.AddImage
	 int                       ItemCount (  );                                   		//  XInterface.GUIVertImageListBox.ItemCount
	 void                      InternalOnChange ( class UGUIComponent* Sender ); 		//  XInterface.GUIVertImageListBox.InternalOnChange
	 bool                      InternalOnClick ( class UGUIComponent* Sender );  		//  XInterface.GUIVertImageListBox.InternalOnClick
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.GUIVertImageListBox.InitComponent
	 void                      InitBaseList ( class UGUIListBase* LocalList );   		//  XInterface.GUIVertImageListBox.InitBaseList
}; // Size: 0x001C

// Class XInterface.moEditBox
class DLL_IMPORT UmoEditBox : public UGUIMenuOption
{
public:
	unsigned long                                      bMaskText:1;                                      		// 0x034C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bReadOnly:1;                                      		// 0x034C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	class UGUIEditBox*                                 MyEditBox;                                        		// 0x0350 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]

	// UScript Functions
	 void                      MaskText ( bool B );                              		//  XInterface.moEditBox.MaskText
	 void                      FloatOnly ( bool B );                             		//  XInterface.moEditBox.FloatOnly
	 void                      IntOnly ( bool B );                               		//  XInterface.moEditBox.IntOnly
	 void                      SetReadOnly ( bool B );                           		//  XInterface.moEditBox.SetReadOnly
	 void                      ReadOnly ( bool B );                              		//  XInterface.moEditBox.ReadOnly
	 void                      SetText ( struct FString NewText );               		//  XInterface.moEditBox.SetText
	 struct FString            GetText (  );                                     		//  XInterface.moEditBox.GetText
	 struct FString            GetComponentValue (  );                           		//  XInterface.moEditBox.GetComponentValue
	 void                      SetComponentValue ( struct FString NewValue, bool bNoChange );		//  XInterface.moEditBox.SetComponentValue
	 void                      InitComponent ( class UGUIController* MyController, class UGUIComponent* myOwner );		//  XInterface.moEditBox.InitComponent
}; // Size: 0x0008

// Class XInterface.HudCTeamDeathMatch
class DLL_IMPORT AHudCTeamDeathMatch : public AHudCDeathmatch
{
public:
	struct FNumericWidget                              ScoreTeam[ 0x02 ];                                		// 0x41C0 ( 0x0060 ) [ CPF_Edit ]
	struct FNumericWidget                              totalLinks;                                       		// 0x4220 ( 0x0030 ) [ CPF_Edit ]
	struct FSpriteWidget                               VersusSymbol;                                     		// 0x4250 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TeamScoreBackGround[ 0x02 ];                      		// 0x4290 ( 0x0080 ) [ CPF_Edit ]
	struct FSpriteWidget                               TeamScoreBackGroundDisc[ 0x02 ];                  		// 0x4310 ( 0x0080 ) [ CPF_Edit ]
	struct FSpriteWidget                               LinkIcon;                                         		// 0x4390 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               TeamSymbols[ 0x02 ];                              		// 0x43D0 ( 0x0080 ) [ CPF_Edit ]
	int                                                Links;                                            		// 0x4450 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       CarrierTextColor1;                                		// 0x4454 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       CarrierTextColor2;                                		// 0x4458 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       CarrierTextColor3;                                		// 0x445C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     CarriersName;                                     		// 0x4460 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     CarriersLocation;                                 		// 0x446C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              CNPosX;                                           		// 0x4478 ( 0x0004 ) [ CPF_Edit ]
	float                                              CNPosY;                                           		// 0x447C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     LinkEstablishedMessage;                           		// 0x4480 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      CustomHUDColorAllowed (  );                       		//  XInterface.HudCTeamDeathMatch.CustomHUDColorAllowed
	 void                      UpdateHUD (  );                                   		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.UpdateHUD
	 void                      updateScore (  );                                 		//  XInterface.HudCTeamDeathMatch.updateScore
	 void                      UpdateTeamHud (  );                               		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.UpdateTeamHud
	 void                      DrawHudPassC ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.DrawHudPassC
	 void                      TeamScoreOffset (  );                             		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.TeamScoreOffset
	 void                      ShowTeamScorePassC ( class UCanvas* C );          		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.ShowTeamScorePassC
	 void                      ShowVersusIcon ( class UCanvas* C );              		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.ShowVersusIcon
	 void                      ShowTeamScorePassA ( class UCanvas* C );          		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.ShowTeamScorePassA
	 void                      DrawHudPassA ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.DrawHudPassA
	 void                      DrawMyScore ( class UCanvas* C );                 		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.DrawMyScore
	 void                      DrawTeamOverlay ( class UCanvas* C );             		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.DrawTeamOverlay
	 void                      UpdateRankAndSpread ( class UCanvas* C );         		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.UpdateRankAndSpread
	 void                      drawLinkText ( class UCanvas* C );                		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.drawLinkText
	 void                      showLinks (  );                                   		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.showLinks
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.Tick
	 void                      DrawSpectatingHud ( class UCanvas* C );           		// [ FUNC_Simulated ] XInterface.HudCTeamDeathMatch.DrawSpectatingHud
}; // Size: 0x02CC

// Class XInterface.ScoreBoardTeamDeathMatch
class DLL_IMPORT AScoreBoardTeamDeathMatch : public AScoreBoardDeathMatch
{
public:
	class UMaterial*                                   TeamBoxMaterial[ 0x02 ];                          		// 0x0640 ( 0x0008 ) 
	class UMaterial*                                   ScoreBack;                                        		// 0x0648 ( 0x0004 ) 
	class UMaterial*                                   FlagIcon;                                         		// 0x064C ( 0x0004 ) 
	class UMaterial*                                   ScoreboardU;                                      		// 0x0650 ( 0x0004 ) 
	class FColor                                       TeamColors[ 0x02 ];                               		// 0x0654 ( 0x0008 ) 

	// UScript Functions
	 void                      DrawTeam ( int TeamNum, int PlayerCount, int OwnerOffset, class UCanvas* Canvas, int FontReduction, int BoxSpaceY, int PlayerBoxSizeY, int HeaderOffsetY );		//  XInterface.ScoreBoardTeamDeathMatch.DrawTeam
	 void                      eventUpdateScoreBoard ( class UCanvas* Canvas );  		// [ FUNC_Simulated | FUNC_Event ] XInterface.ScoreBoardTeamDeathMatch.UpdateScoreBoard
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] XInterface.ScoreBoardTeamDeathMatch.UpdatePrecacheMaterials
}; // Size: 0x001C

// Class XInterface.xScoreBoardTeamGameResult
class DLL_IMPORT AxScoreBoardTeamGameResult : public AxScoreBoard
{
public:
	struct FSpriteWidget                               SpBG;                                             		// 0x0540 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpTeam;                                           		// 0x0580 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpWin;                                            		// 0x05C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpSelection;                                      		// 0x0600 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpSelectLine;                                     		// 0x0640 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpTeamNameEmphasis;                               		// 0x0680 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpControlBG;                                      		// 0x06C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpPlayerNameBG;                                   		// 0x0700 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBOutLine;                                       		// 0x0740 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBBG;                                            		// 0x0780 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WSBBGInput;                                       		// 0x07C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WTxtResultBoard;                                  		// 0x0800 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WMarkAF;                                          		// 0x0840 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WMarkRSA;                                         		// 0x0880 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WResultMVP;                                       		// 0x08C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGaugeBar1;                                       		// 0x0900 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WGaugeBar2;                                       		// 0x0940 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WBonusItemBG;                                     		// 0x0980 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WMyInfoBG;                                        		// 0x09C0 ( 0x0040 ) [ CPF_Edit ]
	class TArray< struct FSpriteWidget >               WCommBtn;                                         		// 0x0A00 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FSpriteWidget >               WStripeBar;                                       		// 0x0A0C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSpriteWidget                               WIconMaster;                                      		// 0x0A18 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WIconPCBang;                                      		// 0x0A58 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               WIconMVP;                                         		// 0x0A98 ( 0x0040 ) [ CPF_Edit ]
	int                                                MAX_TEAM;                                         		// 0x0AD8 ( 0x0004 ) 
	class UMaterial*                                   BackImage;                                        		// 0x0ADC ( 0x0004 ) 
	int                                                BackImageWidth;                                   		// 0x0AE0 ( 0x0004 ) 
	int                                                BackImageHeight;                                  		// 0x0AE4 ( 0x0004 ) 
	float                                              BGBeginX;                                         		// 0x0AE8 ( 0x0004 ) 
	float                                              BGBeginY;                                         		// 0x0AEC ( 0x0004 ) 
	float                                              BGWidth;                                          		// 0x0AF0 ( 0x0004 ) 
	float                                              BGHeight;                                         		// 0x0AF4 ( 0x0004 ) 
	float                                              ControlBeginX;                                    		// 0x0AF8 ( 0x0004 ) 
	float                                              ControlBeginY;                                    		// 0x0AFC ( 0x0004 ) 
	float                                              ControlWidth;                                     		// 0x0B00 ( 0x0004 ) 
	float                                              ControlHeight;                                    		// 0x0B04 ( 0x0004 ) 
	float                                              PlayerNameBeginX;                                 		// 0x0B08 ( 0x0004 ) 
	float                                              PlayerNameBeginY;                                 		// 0x0B0C ( 0x0004 ) 
	float                                              PlayerNameWidth;                                  		// 0x0B10 ( 0x0004 ) 
	float                                              PlayerNameHeight;                                 		// 0x0B14 ( 0x0004 ) 
	float                                              PlayerNameFontSize;                               		// 0x0B18 ( 0x0004 ) 
	float                                              TeamBeginX;                                       		// 0x0B1C ( 0x0004 ) 
	float                                              TeamBeginY;                                       		// 0x0B20 ( 0x0004 ) 
	float                                              TeamOffsetY;                                      		// 0x0B24 ( 0x0004 ) 
	float                                              TeamWidth;                                        		// 0x0B28 ( 0x0004 ) 
	float                                              TeamHeight;                                       		// 0x0B2C ( 0x0004 ) 
	float                                              TeamNameBeginX;                                   		// 0x0B30 ( 0x0004 ) 
	float                                              TeamNameBeginY;                                   		// 0x0B34 ( 0x0004 ) 
	float                                              TeamNameWidth;                                    		// 0x0B38 ( 0x0004 ) 
	float                                              TeamNameHeight;                                   		// 0x0B3C ( 0x0004 ) 
	float                                              TeamNameFontSize;                                 		// 0x0B40 ( 0x0004 ) 
	float                                              TeamWinnerBeginX;                                 		// 0x0B44 ( 0x0004 ) 
	float                                              TeamWinnerBeginY;                                 		// 0x0B48 ( 0x0004 ) 
	float                                              TeamWinnerWidth;                                  		// 0x0B4C ( 0x0004 ) 
	float                                              TeamWinnerHeight;                                 		// 0x0B50 ( 0x0004 ) 
	float                                              TeamMemberClanBeginX;                             		// 0x0B54 ( 0x0004 ) 
	float                                              TeamMemberClanWidth;                              		// 0x0B58 ( 0x0004 ) 
	float                                              TeamMemberRankBeginX;                             		// 0x0B5C ( 0x0004 ) 
	float                                              TeamMemberRankWidth;                              		// 0x0B60 ( 0x0004 ) 
	float                                              TeamMemberNicknameBeginX;                         		// 0x0B64 ( 0x0004 ) 
	float                                              TeamMemberNicknameWidth;                          		// 0x0B68 ( 0x0004 ) 
	float                                              TeamMemberItemBeginX;                             		// 0x0B6C ( 0x0004 ) 
	float                                              TeamMemberItemWidth;                              		// 0x0B70 ( 0x0004 ) 
	float                                              TeamMemberClanNameBeginX;                         		// 0x0B74 ( 0x0004 ) 
	float                                              TeamMemberClanNameWidth;                          		// 0x0B78 ( 0x0004 ) 
	float                                              TeamMemberScoreBeginX;                            		// 0x0B7C ( 0x0004 ) 
	float                                              TeamMemberScoreWidth;                             		// 0x0B80 ( 0x0004 ) 
	float                                              TeamMemberKillBeginX;                             		// 0x0B84 ( 0x0004 ) 
	float                                              TeamMemberKillWidth;                              		// 0x0B88 ( 0x0004 ) 
	float                                              TeamMemberAssistBeginX;                           		// 0x0B8C ( 0x0004 ) 
	float                                              TeamMemberAssistWidth;                            		// 0x0B90 ( 0x0004 ) 
	float                                              TeamMemberDeathBeginX;                            		// 0x0B94 ( 0x0004 ) 
	float                                              TeamMemberDeathWidth;                             		// 0x0B98 ( 0x0004 ) 
	float                                              TeamMemberBonusBeginX;                            		// 0x0B9C ( 0x0004 ) 
	float                                              TeamMemberBonusWidth;                             		// 0x0BA0 ( 0x0004 ) 
	float                                              TeamMemberBonus_1_BeginX;                         		// 0x0BA4 ( 0x0004 ) 
	float                                              TeamMemberBonus_1_Width;                          		// 0x0BA8 ( 0x0004 ) 
	float                                              TeamMemberBonus_2_BeginX;                         		// 0x0BAC ( 0x0004 ) 
	float                                              TeamMemberBonus_2_Width;                          		// 0x0BB0 ( 0x0004 ) 
	float                                              TeamMemberBonus_3_BeginX;                         		// 0x0BB4 ( 0x0004 ) 
	float                                              TeamMemberBonus_3_Width;                          		// 0x0BB8 ( 0x0004 ) 
	float                                              TeamMemberExpBeginX;                              		// 0x0BBC ( 0x0004 ) 
	float                                              TeamMemberExpWidth;                               		// 0x0BC0 ( 0x0004 ) 
	float                                              TeamMemberPointBeginX;                            		// 0x0BC4 ( 0x0004 ) 
	float                                              TeamMemberPointWidth;                             		// 0x0BC8 ( 0x0004 ) 
	float                                              TeamMemberBeginY;                                 		// 0x0BCC ( 0x0004 ) 
	float                                              TeamMemberHeight;                                 		// 0x0BD0 ( 0x0004 ) 
	float                                              TeamMemberHeightOffset;                           		// 0x0BD4 ( 0x0004 ) 
	float                                              TeamMemberFontSize;                               		// 0x0BD8 ( 0x0004 ) 
	float                                              TeamNameEmphasisBeginX;                           		// 0x0BDC ( 0x0004 ) 
	float                                              TeamNameEmphasisBeginY;                           		// 0x0BE0 ( 0x0004 ) 
	float                                              TeamNameEmphasisWidth;                            		// 0x0BE4 ( 0x0004 ) 
	float                                              TeamNameEmphasisHeight;                           		// 0x0BE8 ( 0x0004 ) 
	class FColor                                       DefaultFontColor;                                 		// 0x0BEC ( 0x0004 ) 
	float                                              fMvpNameTextX1;                                   		// 0x0BF0 ( 0x0004 ) 
	float                                              fMvpNameTextX2;                                   		// 0x0BF4 ( 0x0004 ) 
	float                                              fMvpNameTextY1;                                   		// 0x0BF8 ( 0x0004 ) 
	float                                              fMvpNameTextY2;                                   		// 0x0BFC ( 0x0004 ) 
	float                                              fTeamScoreAFY1;                                   		// 0x0C00 ( 0x0004 ) 
	float                                              fTeamScoreAFY2;                                   		// 0x0C04 ( 0x0004 ) 
	float                                              fTeamScoreRSAY1;                                  		// 0x0C08 ( 0x0004 ) 
	float                                              fTeamScoreRSAY2;                                  		// 0x0C0C ( 0x0004 ) 
	float                                              fTeamScoreTxtX1;                                  		// 0x0C10 ( 0x0004 ) 
	float                                              fTeamScoreTxtX2;                                  		// 0x0C14 ( 0x0004 ) 
	float                                              fTeamScoreTxtAFY1;                                		// 0x0C18 ( 0x0004 ) 
	float                                              fTeamScoreTxtAFY2;                                		// 0x0C1C ( 0x0004 ) 
	float                                              fTeamScoreTxtRSAY1;                               		// 0x0C20 ( 0x0004 ) 
	float                                              fTeamScoreTxtRSAY2;                               		// 0x0C24 ( 0x0004 ) 
	float                                              fBonusX1;                                         		// 0x0C28 ( 0x0004 ) 
	float                                              fBonusX2;                                         		// 0x0C2C ( 0x0004 ) 
	float                                              fExpX1;                                           		// 0x0C30 ( 0x0004 ) 
	float                                              fExpX2;                                           		// 0x0C34 ( 0x0004 ) 
	float                                              fPointX1;                                         		// 0x0C38 ( 0x0004 ) 
	float                                              fPointX2;                                         		// 0x0C3C ( 0x0004 ) 
	float                                              fClanTextX1;                                      		// 0x0C40 ( 0x0004 ) 
	float                                              fClanTextX2;                                      		// 0x0C44 ( 0x0004 ) 
	float                                              fTxtExpX1;                                        		// 0x0C48 ( 0x0004 ) 
	float                                              fTxtExpX2;                                        		// 0x0C4C ( 0x0004 ) 
	float                                              fTxtExpY1;                                        		// 0x0C50 ( 0x0004 ) 
	float                                              fTxtExpY2;                                        		// 0x0C54 ( 0x0004 ) 
	float                                              fTxt2ExpX1;                                       		// 0x0C58 ( 0x0004 ) 
	float                                              fTxt2ExpX2;                                       		// 0x0C5C ( 0x0004 ) 
	float                                              fTxt2ExpY1;                                       		// 0x0C60 ( 0x0004 ) 
	float                                              fTxt2ExpY2;                                       		// 0x0C64 ( 0x0004 ) 
	float                                              fTxtPointX1;                                      		// 0x0C68 ( 0x0004 ) 
	float                                              fTxtPointX2;                                      		// 0x0C6C ( 0x0004 ) 
	float                                              fTxtPointY1;                                      		// 0x0C70 ( 0x0004 ) 
	float                                              fTxtPointY2;                                      		// 0x0C74 ( 0x0004 ) 
	float                                              fTxt2PointX1;                                     		// 0x0C78 ( 0x0004 ) 
	float                                              fTxt2PointX2;                                     		// 0x0C7C ( 0x0004 ) 
	float                                              fTxt2PointY1;                                     		// 0x0C80 ( 0x0004 ) 
	float                                              fTxt2PointY2;                                     		// 0x0C84 ( 0x0004 ) 
	float                                              fMyInfoFontSize;                                  		// 0x0C88 ( 0x0004 ) 
	float                                              fTxtOKX1;                                         		// 0x0C8C ( 0x0004 ) 
	float                                              fTxtOKX2;                                         		// 0x0C90 ( 0x0004 ) 
	float                                              fTxtOKY1;                                         		// 0x0C94 ( 0x0004 ) 
	float                                              fTxtOKY2;                                         		// 0x0C98 ( 0x0004 ) 
	float                                              fOKFontSize;                                      		// 0x0C9C ( 0x0004 ) 
	unsigned long                                      bResultBGMPlayed:1;                               		// 0x0CA0 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      eventDrawScoreboard ( class UCanvas* C );         		// [ FUNC_Simulated | FUNC_Event ] XInterface.xScoreBoardTeamGameResult.DrawScoreboard
	 void                      DrawMyInfo ( class UCanvas* C );                  		//  XInterface.xScoreBoardTeamGameResult.DrawMyInfo
	 void                      DrawTeamMember ( class UCanvas* C );              		//  XInterface.xScoreBoardTeamGameResult.DrawTeamMember
	 void                      DrawTeam ( class UCanvas* C );                    		//  XInterface.xScoreBoardTeamGameResult.DrawTeam
	 int                       GetWinTeamIndex (  );                             		//  XInterface.xScoreBoardTeamGameResult.GetWinTeamIndex
	 void                      DrawContentDescription ( class UCanvas* C );      		//  XInterface.xScoreBoardTeamGameResult.DrawContentDescription
	 void                      DrawBGs_O ( class UCanvas* C );                   		//  XInterface.xScoreBoardTeamGameResult.DrawBGs_O
	 void                      DrawTeamListSectionStripe ( class UCanvas* C );   		//  XInterface.xScoreBoardTeamGameResult.DrawTeamListSectionStripe
	 void                      DrawTeamScore ( class UCanvas* C );               		//  XInterface.xScoreBoardTeamGameResult.DrawTeamScore
	 void                      DrawBGS ( class UCanvas* C );                     		//  XInterface.xScoreBoardTeamGameResult.DrawBGS
	 void                      DrawBonusItem ( class UCanvas* C );               		//  XInterface.xScoreBoardTeamGameResult.DrawBonusItem
	 class AHudBase*           GetHudBaseOwner (  );                             		//  XInterface.xScoreBoardTeamGameResult.GetHudBaseOwner
}; // Size: 0x0764

// Class XInterface.xScoreBoardGameResult_Booty
class DLL_IMPORT AxScoreBoardGameResult_Booty : public AxScoreBoard
{
public:
	struct FSpriteWidget                               SpBG;                                             		// 0x0540 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpTeam;                                           		// 0x0580 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpWin;                                            		// 0x05C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpSelection;                                      		// 0x0600 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpSelectLine;                                     		// 0x0640 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpTeamNameEmphasis;                               		// 0x0680 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpControlBG;                                      		// 0x06C0 ( 0x0040 ) [ CPF_Edit ]
	struct FSpriteWidget                               SpPlayerNameBG;                                   		// 0x0700 ( 0x0040 ) [ CPF_Edit ]
	int                                                MAX_TEAM;                                         		// 0x0740 ( 0x0004 ) 
	class UMaterial*                                   BackImage;                                        		// 0x0744 ( 0x0004 ) 
	int                                                BackImageWidth;                                   		// 0x0748 ( 0x0004 ) 
	int                                                BackImageHeight;                                  		// 0x074C ( 0x0004 ) 
	class UMaterial*                                   LogoImage;                                        		// 0x0750 ( 0x0004 ) 
	float                                              LogoImageX;                                       		// 0x0754 ( 0x0004 ) 
	float                                              LogoImageY;                                       		// 0x0758 ( 0x0004 ) 
	float                                              LogoImageWidth;                                   		// 0x075C ( 0x0004 ) 
	float                                              LogoImageHeight;                                  		// 0x0760 ( 0x0004 ) 
	class UMaterial*                                   TrophyBGImage;                                    		// 0x0764 ( 0x0004 ) 
	float                                              TrophyBGBeginX;                                   		// 0x0768 ( 0x0004 ) 
	float                                              TrophyBGBeginY;                                   		// 0x076C ( 0x0004 ) 
	float                                              TrophyBGWidth;                                    		// 0x0770 ( 0x0004 ) 
	float                                              TrophyBGHeight;                                   		// 0x0774 ( 0x0004 ) 
	struct FSpriteWidget                               SpBootyGetTextImage;                              		// 0x0778 ( 0x0040 ) 
	float                                              SpBootyGetTextBeginX;                             		// 0x07B8 ( 0x0004 ) 
	float                                              SpBootyGetTextBeginY;                             		// 0x07BC ( 0x0004 ) 
	struct FSpriteWidget                               SpWeaponBGImage;                                  		// 0x07C0 ( 0x0040 ) 
	struct FSpriteWidget                               SpWeaponBGTileImage;                              		// 0x0800 ( 0x0040 ) 
	float                                              SpWeaponBGBeginX;                                 		// 0x0840 ( 0x0004 ) 
	float                                              SpWeaponBGBeginY;                                 		// 0x0844 ( 0x0004 ) 
	float                                              SpWeaponBGWidth;                                  		// 0x0848 ( 0x0004 ) 
	float                                              SpWeaponBGHeight;                                 		// 0x084C ( 0x0004 ) 
	struct FSpriteWidget                               SpNickBGImage;                                    		// 0x0850 ( 0x0040 ) 
	float                                              SpNickBGBeginX;                                   		// 0x0890 ( 0x0004 ) 
	float                                              SpNickBGBeginY;                                   		// 0x0894 ( 0x0004 ) 
	class UMaterial*                                   BootyWeaponImage;                                 		// 0x0898 ( 0x0004 ) 
	class UMaterial*                                   BootyPartsImage[ 0x02 ];                          		// 0x089C ( 0x0008 ) 
	float                                              BGBeginX;                                         		// 0x08A4 ( 0x0004 ) 
	float                                              BGBeginY;                                         		// 0x08A8 ( 0x0004 ) 
	float                                              BGWidth;                                          		// 0x08AC ( 0x0004 ) 
	float                                              BGHeight;                                         		// 0x08B0 ( 0x0004 ) 
	float                                              ControlBeginX;                                    		// 0x08B4 ( 0x0004 ) 
	float                                              ControlBeginY;                                    		// 0x08B8 ( 0x0004 ) 
	float                                              ControlWidth;                                     		// 0x08BC ( 0x0004 ) 
	float                                              ControlHeight;                                    		// 0x08C0 ( 0x0004 ) 
	float                                              TeamBeginX;                                       		// 0x08C4 ( 0x0004 ) 
	float                                              TeamBeginY;                                       		// 0x08C8 ( 0x0004 ) 
	float                                              TeamOffsetY;                                      		// 0x08CC ( 0x0004 ) 
	float                                              TeamWidth;                                        		// 0x08D0 ( 0x0004 ) 
	float                                              TeamHeight;                                       		// 0x08D4 ( 0x0004 ) 
	float                                              TeamNameBeginX;                                   		// 0x08D8 ( 0x0004 ) 
	float                                              TeamNameBeginY;                                   		// 0x08DC ( 0x0004 ) 
	float                                              TeamNameWidth;                                    		// 0x08E0 ( 0x0004 ) 
	float                                              TeamNameHeight;                                   		// 0x08E4 ( 0x0004 ) 
	float                                              TeamNameFontSize;                                 		// 0x08E8 ( 0x0004 ) 
	float                                              TeamWinnerBeginX;                                 		// 0x08EC ( 0x0004 ) 
	float                                              TeamWinnerBeginY;                                 		// 0x08F0 ( 0x0004 ) 
	float                                              TeamWinnerWidth;                                  		// 0x08F4 ( 0x0004 ) 
	float                                              TeamWinnerHeight;                                 		// 0x08F8 ( 0x0004 ) 
	float                                              TeamMemberNicknameBeginX;                         		// 0x08FC ( 0x0004 ) 
	float                                              TeamMemberNicknameWidth;                          		// 0x0900 ( 0x0004 ) 
	float                                              TeamMemberClanBeginX;                             		// 0x0904 ( 0x0004 ) 
	float                                              TeamMemberClanWidth;                              		// 0x0908 ( 0x0004 ) 
	float                                              TeamMemberScoreBeginX;                            		// 0x090C ( 0x0004 ) 
	float                                              TeamMemberScoreWidth;                             		// 0x0910 ( 0x0004 ) 
	float                                              TeamMemberKillBeginX;                             		// 0x0914 ( 0x0004 ) 
	float                                              TeamMemberKillWidth;                              		// 0x0918 ( 0x0004 ) 
	float                                              TeamMemberAssistBeginX;                           		// 0x091C ( 0x0004 ) 
	float                                              TeamMemberAssistWidth;                            		// 0x0920 ( 0x0004 ) 
	float                                              TeamMemberDeathBeginX;                            		// 0x0924 ( 0x0004 ) 
	float                                              TeamMemberDeathWidth;                             		// 0x0928 ( 0x0004 ) 
	float                                              TeamMemberExpBeginX;                              		// 0x092C ( 0x0004 ) 
	float                                              TeamMemberExpWidth;                               		// 0x0930 ( 0x0004 ) 
	float                                              TeamMemberPointBeginX;                            		// 0x0934 ( 0x0004 ) 
	float                                              TeamMemberPointWidth;                             		// 0x0938 ( 0x0004 ) 
	float                                              TeamMemberBeginY;                                 		// 0x093C ( 0x0004 ) 
	float                                              TeamMemberHeight;                                 		// 0x0940 ( 0x0004 ) 
	float                                              TeamMemberHeightOffset;                           		// 0x0944 ( 0x0004 ) 
	float                                              TeamMemberFontSize;                               		// 0x0948 ( 0x0004 ) 
	float                                              TeamNameEmphasisBeginX;                           		// 0x094C ( 0x0004 ) 
	float                                              TeamNameEmphasisBeginY;                           		// 0x0950 ( 0x0004 ) 
	float                                              TeamNameEmphasisWidth;                            		// 0x0954 ( 0x0004 ) 
	float                                              TeamNameEmphasisHeight;                           		// 0x0958 ( 0x0004 ) 
	float                                              BootyWeaponBeginX;                                		// 0x095C ( 0x0004 ) 
	float                                              BootyWeaponBeginY;                                		// 0x0960 ( 0x0004 ) 
	float                                              BootyWeaponWidth;                                 		// 0x0964 ( 0x0004 ) 
	float                                              BootyWeaponHeight;                                		// 0x0968 ( 0x0004 ) 
	float                                              BootyGetUserNameBeginX;                           		// 0x096C ( 0x0004 ) 
	float                                              BootyGetUserNameBeginY;                           		// 0x0970 ( 0x0004 ) 
	float                                              BootyGetUserNameWidth;                            		// 0x0974 ( 0x0004 ) 
	float                                              BootyGetUserNameHeight;                           		// 0x0978 ( 0x0004 ) 
	float                                              BootyItemNameBeginX;                              		// 0x097C ( 0x0004 ) 
	float                                              BootyItemNameBeginY;                              		// 0x0980 ( 0x0004 ) 
	float                                              BootyDisplayFonsSize;                             		// 0x0984 ( 0x0004 ) 
	struct FString                                     strBootyGet;                                      		// 0x0988 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                BootyWeaponId;                                    		// 0x0994 ( 0x0004 ) 
	int                                                BootyPartsID;                                     		// 0x0998 ( 0x0004 ) 
	class FColor                                       DefaultFontColor;                                 		// 0x099C ( 0x0004 ) 
	float                                              BootyPartsBeginX;                                 		// 0x09A0 ( 0x0004 ) 
	float                                              BootyPartsBeginY;                                 		// 0x09A4 ( 0x0004 ) 
	float                                              BootyPartsGapY;                                   		// 0x09A8 ( 0x0004 ) 

	// UScript Functions
	 void                      eventDrawScoreboard ( class UCanvas* C );         		// [ FUNC_Simulated | FUNC_Event ] XInterface.xScoreBoardGameResult_Booty.DrawScoreboard
	 void                      DrawTeamMember ( class UCanvas* C );              		//  XInterface.xScoreBoardGameResult_Booty.DrawTeamMember
	 void                      DrawBootyInfo ( class UCanvas* C );               		//  XInterface.xScoreBoardGameResult_Booty.DrawBootyInfo
	 void                      DrawBGS ( class UCanvas* C );                     		//  XInterface.xScoreBoardGameResult_Booty.DrawBGS
	 class AHudBase*           GetHudBaseOwner (  );                             		//  XInterface.xScoreBoardGameResult_Booty.GetHudBaseOwner
}; // Size: 0x046C

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

