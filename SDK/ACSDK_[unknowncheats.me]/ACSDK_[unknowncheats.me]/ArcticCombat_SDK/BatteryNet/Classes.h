#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : BatteryNet
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum BatteryNet.BTNatDiag.NAT_TYPE
enum NAT_TYPE
{
	NAT_FULL_CONE                                      = 0,
	NAT_RESTRICTED_CONE                                = 1,
	NAT_PORT_RESTRICTED_CONE                           = 2,
	NAT_SYMMETRIC_CONE                                 = 3
};

// Enum BatteryNet.BTNetEnums.ITEM_TYPE
enum ITEM_TYPE
{
	ITEM_TYPE_HEAD                                     = 0,
	ITEM_TYPE_FACE                                     = 1,
	ITEM_TYPE_BODY                                     = 2,
	ITEM_TYPE_UNIFORM                                  = 3,
	ITEM_TYPE_PISTOL                                   = 4,
	ITEM_TYPE_RIFLE                                    = 5,
	ITEM_TYPE_SMG                                      = 6,
	ITEM_TYPE_SNIPER                                   = 7,
	ITEM_TYPE_HEAVY                                    = 8,
	ITEM_TYPE_BOMB                                     = 9,
	ITEM_TYPE_DOTSIGHT                                 = 10,
	ITEM_TYPE_SCOPE                                    = 11,
	ITEM_TYPE_BARREL                                   = 12,
	ITEM_TYPE_SLIENCER                                 = 13,
	ITEM_TYPE_STOCK                                    = 14,
	ITEM_TYPE_HEALTH                                   = 15,
	ITEM_TYPE_ETC                                      = 16,
	ITEM_TYPE_NULL                                     = 17
};

// Enum BatteryNet.BTNetEnums.SLOT_POS
enum SLOT_POS
{
	SLOT_POS_MAIN_WEAPON                               = 0,
	SLOT_POS_SUB_WEAPON                                = 1,
	SLOT_POS_THROW_WEAPON1                             = 2,
	SLOT_POS_THROW_WEAPON2                             = 3,
	SLOT_POS_QUICK_MAIN_WEAPON1                        = 4,
	SLOT_POS_QUICK_MAIN_WEAPON2                        = 5,
	SLOT_POS_QUICK_MAIN_WEAPON3                        = 6,
	SLOT_POS_QUICK_SUB_WEAPON1                         = 7,
	SLOT_POS_QUICK_SUB_WEAPON2                         = 8,
	SLOT_POS_QUICK_SUB_WEAPON3                         = 9,
	SLOT_POS_QUICK_THROW_WEAPON1                       = 10,
	SLOT_POS_QUICK_THROW_WEAPON2                       = 11,
	SLOT_POS_QUICK_THROW_WEAPON3                       = 12,
	SLOT_POS_INVEN                                     = 13,
	SLOT_POS_SKILL1                                    = 14,
	SLOT_POS_SKILL2                                    = 15,
	SLOT_POS_SKILL3                                    = 16,
	SLOT_POS_SKILL4                                    = 17,
	SLOT_HELMET                                        = 18,
	SLOT_FACE                                          = 19,
	SLOT_FACE_ACCESSORY                                = 20,
	SLOT_SPECIAL_CHAR_AF                               = 21,
	SLOT_SPECIAL_CHAR_RSA                              = 22,
	SLOT_SPECIAL_LEVEL_MARK                            = 23,
	SLOT_POS_END                                       = 24
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class BatteryNet.BTTcpLink_Process2Agent
class DLL_IMPORT UBTTcpLink_Process2Agent : public UObject
{
public:

	// UScript Functions
	 bool                      sfReqUpdateProcessState ( int State );            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateProcessState
	 bool                      sfAckProcessExcuteCmd ( int Result, int MajorType, int MinorType, struct FString CmdValue );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfAckProcessExcuteCmd
	 bool                      sfReqProcessExcuteCmd ( int MajorType, int MinorType, struct FString CmdValue );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqProcessExcuteCmd
	 bool                      sfReqUpdateUserCount_DudeServer ( int ServerID, int MaxUserCount, int CurUserCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateUserCount_DudeServer
	 bool                      sfReqUpdateUserCount_LoginServer ( int ServerID, int MaxUserCount, int CurUserCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateUserCount_LoginServer
	 bool                      sfReqUpdateUserCount_ChannelServer ( int ServerID, int ChannelCount, class TArray< int > ChannelNum, class TArray< int > ChannelMaxUserCount, class TArray< int > ChannelCurUserCount, class TArray< int > ChannelPlayingUserCount, class TArray< int > ChannelRoomCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateUserCount_ChannelServer
	 bool                      sfReqTerminateDedicateHostProcess (  );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqTerminateDedicateHostProcess
	 bool                      sfAckStartDedicateHost ( int Result, int ProcessID, int ServerID, int ChannelNum, int RoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfAckStartDedicateHost
	 bool                      sfReqStartDedicateHost ( int ServerID, struct FString ChannelIPAddr, int ChannelPortNum, int ChannelNum, int RoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqStartDedicateHost
	 bool                      sfAckQuitDedicateHost ( int Result, int PID, int ServerID, int ChannelNum, int RoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfAckQuitDedicateHost
	 bool                      sfReqQuitDedicateHost ( int ServerID, int ChannelNum, int RoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqQuitDedicateHost
	 bool                      sfAckLogin ( int Result );                        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfAckLogin
	 bool                      sfReqLogin ( int PID, int ServerID, class TArray< unsigned char > ServerIPAddrType, class TArray< struct FString > ServerIPAddr, class TArray< unsigned char > ServerPortType, class TArray< int > ServerPortNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqLogin
	 bool                      sfAckHash ( int Result, struct FString ErrMsg );  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfAckHash
	 bool                      sfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.sfReqHash
	 bool                      eventrfReqUpdateProcessState ( int State );       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateProcessState
	 bool                      eventrfAckProcessExcuteCmd ( int Result, int MajorType, int MinorType, struct FString CmdValue );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfAckProcessExcuteCmd
	 bool                      eventrfReqProcessExcuteCmd ( int MajorType, int MinorType, struct FString CmdValue );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqProcessExcuteCmd
	 bool                      eventrfReqUpdateUserCount_DudeServer ( int ServerID, int MaxUserCount, int CurUserCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateUserCount_DudeServer
	 bool                      eventrfReqUpdateUserCount_LoginServer ( int ServerID, int MaxUserCount, int CurUserCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateUserCount_LoginServer
	 bool                      eventrfReqUpdateUserCount_ChannelServer ( int ServerID, int ChannelCount, class TArray< int > ChannelNum, class TArray< int > ChannelMaxUserCount, class TArray< int > ChannelCurUserCount, class TArray< int > ChannelPlayingUserCount, class TArray< int > ChannelRoomCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateUserCount_ChannelServer
	 bool                      eventrfReqTerminateDedicateHostProcess (  );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqTerminateDedicateHostProcess
	 bool                      eventrfAckStartDedicateHost ( int Result, int ProcessID, int ServerID, int ChannelNum, int RoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfAckStartDedicateHost
	 bool                      eventrfReqStartDedicateHost ( int ServerID, struct FString ChannelIPAddr, int ChannelPortNum, int ChannelNum, int RoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqStartDedicateHost
	 bool                      eventrfAckQuitDedicateHost ( int Result, int PID, int ServerID, int ChannelNum, int RoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfAckQuitDedicateHost
	 bool                      eventrfReqQuitDedicateHost ( int ServerID, int ChannelNum, int RoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqQuitDedicateHost
	 bool                      eventrfAckLogin ( int Result );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfAckLogin
	 bool                      eventrfReqLogin ( int PID, int ServerID, class TArray< unsigned char > ServerIPAddrType, class TArray< struct FString > ServerIPAddr, class TArray< unsigned char > ServerPortType, class TArray< int > ServerPortNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqLogin
	 bool                      eventrfAckHash ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfAckHash
	 bool                      eventrfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.rfReqHash
	 void                      eventOnError ( int ErrCode );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.OnError
	 void                      eventOnClose ( int ErrCode );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.OnClose
	 void                      eventOnConnect ( int ErrCode );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Process2Agent.OnConnect
	 bool                      Close (  );                                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.Close
	 bool                      Connect ( struct FString sIpaddr, int nPort );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.Connect
	 bool                      InitNetwork (  );                                 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Process2Agent.InitNetwork

	// Public Imports
	UBTTcpLink_Process2Agent(class UBTTcpLink_Process2Agent const &);
	class UBTTcpLink_Process2Agent &  operator=(class UBTTcpLink_Process2Agent const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class BatteryNet.BTTcpHandler_DStoDP_Script_Interface
class DLL_IMPORT UBTTcpHandler_DStoDP_Script_Interface : public UBTTcpLink_Process2Agent
{
public:
	class UwMatchMaker*                                MM;                                               		// 0x002C ( 0x0004 ) 
	class UwGameManager*                               GameMgr;                                          		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 void                      eventSetGameManager ( class UwGameManager* pgameMgr );		// [ FUNC_Event ] BatteryNet.BTTcpHandler_DStoDP_Script_Interface.SetGameManager
	 void                      eventSetMatchMaker ( class UwMatchMaker* pMM );   		// [ FUNC_Event ] BatteryNet.BTTcpHandler_DStoDP_Script_Interface.SetMatchMaker

	// Public Imports
	UBTTcpHandler_DStoDP_Script_Interface(class UBTTcpHandler_DStoDP_Script_Interface const &);
	class UBTTcpHandler_DStoDP_Script_Interface &  operator=(class UBTTcpHandler_DStoDP_Script_Interface const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class BatteryNet.BTTcpHandler_DStoDP
class DLL_IMPORT UBTTcpHandler_DStoDP : public UBTTcpLink_DStoDP_DS
{
public:
	unsigned char                                      _0x0050[ 0x08 ];                                  		// 0x0050 ( 0x0008 )

	// Public Imports
	UBTTcpHandler_DStoDP(class UBTTcpHandler_DStoDP const &);
	UBTTcpHandler_DStoDP(void);
	class UBTTcpHandler_DStoDP &  operator=(class UBTTcpHandler_DStoDP const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class BatteryNet.BTTcpLink_Channel
class DLL_IMPORT UBTTcpLink_Channel : public UObject
{
public:

	// UScript Functions
	 bool                      sfNotifyCouponUseError ( int Time );              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfNotifyCouponUseError
	 bool                      sfAckCouponUse ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCouponUse
	 bool                      sfReqCouponUse ( struct FString Serial );         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCouponUse
	 bool                      sfReqNotifyShopItemDataEnd ( int Ver );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyShopItemDataEnd
	 bool                      sfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyShopItemData
	 bool                      sfAckShopItemData (  );                           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckShopItemData
	 bool                      sfReqShopItemData ( int Ver );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqShopItemData
	 bool                      sfReqNotifyLoadingStatus ( int Status );          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyLoadingStatus
	 bool                      sfReqUpdateUserPerformenceInfo ( int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqUpdateUserPerformenceInfo
	 bool                      sfReqAhnNotifyDisconnct ( int Code );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAhnNotifyDisconnct
	 bool                      sfAckAhnHsObject ( class TArray< unsigned char > Data, int DataSize );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAhnHsObject
	 bool                      sfReqAhnHsObject ( class TArray< unsigned char > Data, int DataSize );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAhnHsObject
	 bool                      sfNotifyClanLevelup ( struct FString ClanName, int Levelup );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfNotifyClanLevelup
	 bool                      sfNotifyNewClanName ( struct FString New_NickName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfNotifyNewClanName
	 bool                      sfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfNotifyNewNickName
	 bool                      sfAckGameMapData ( class TArray< int > nIdx, class TArray< int > nMapID, class TArray< struct FString > nMapNm, class TArray< float > fSupHealth, class TArray< float > fSupHeli, class TArray< float > fSupBomb, class TArray< float > fSupUAV, class TArray< int > nModFFA, class TArray< int > nModFFAMax, class TArray< int > nModTDM, class TArray< int > nModTDMMax, class TArray< int > nModSD, class TArray< int > nModSDMax, class TArray< int > nModDOM, class TArray< int > nModDOMMax, class TArray< int > nModSab, class TArray< int > nModSabMax );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGameMapData
	 bool                      sfReqGameMapData (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGameMapData
	 bool                      sfAckTencent_StartTenProtect ( int CharDBID );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckTencent_StartTenProtect
	 bool                      sfAckMoveToLobby ( unsigned char MessageType );   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckMoveToLobby
	 bool                      sfAckPopUpMessage ( int MessageType );            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPopUpMessage
	 bool                      sfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfUpdateWebzenShopScriptVersion
	 bool                      sfReqSetClientVersion ( int ClientVersion );      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSetClientVersion
	 bool                      sfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckFriendPosition
	 bool                      sfReqFriendPosition ( struct FString TargetCharName, unsigned char CommunityType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqFriendPosition
	 bool                      sfAckDedicateHost_Login ( int Result, int UserID, int ChannelNum, int RoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDedicateHost_Login
	 bool                      sfReqDedicateHost_Login ( int ProcessID, int ChannelNum, int RoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDedicateHost_Login
	 bool                      sfAckLogOut ( unsigned char Result, unsigned char Reason );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckLogOut
	 bool                      sfReqLogOut ( unsigned char Reason );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLogOut
	 bool                      sfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckTencent_AASInfo
	 bool                      sfAckSetCommunityOption ( int Result, struct FString ErrStr );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSetCommunityOption
	 bool                      sfReqSetCommunityOption ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSetCommunityOption
	 bool                      sfAckCommunityOptionList ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCommunityOptionList
	 bool                      sfReqCommunityOptionList (  );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCommunityOptionList
	 bool                      sfAckNotifyUpdateCharInfo_TitleMark ( struct FString CharName, int TitleMarkID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyUpdateCharInfo_TitleMark
	 bool                      sfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyUpdateCharInfo_LevelMark
	 bool                      sfAckGetRankingInfoListEnd (  );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetRankingInfoListEnd
	 bool                      sfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetRankingInfoList
	 bool                      sfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetRankingInfoListStart
	 bool                      sfReqGetRankingInfoList ( unsigned char RankingType, unsigned char CommunityType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetRankingInfoList
	 bool                      sfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCharDetailInfo
	 bool                      sfReqCharDetailInfo (  );                         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCharDetailInfo
	 bool                      sfReqInGameRoomUserClanLevelChanged ( int UserID, int ClanLevel );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqInGameRoomUserClanLevelChanged
	 bool                      sfReqInGameRoomUserInfoChanged (  );              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqInGameRoomUserInfoChanged
	 bool                      sfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatchResultHistory
	 bool                      sfReqClanMatchResultHistory ( struct FString ClanNm );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatchResultHistory
	 bool                      sfAckDeleteMailAll ( int Result, unsigned char MailType, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDeleteMailAll
	 bool                      sfReqDeleteMailAll ( unsigned char MailType );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDeleteMailAll
	 bool                      sfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_PublicWaitRoomChanged
	 bool                      sfAckEventNotify ( int Type );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEventNotify
	 bool                      sfReqEventNotify (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEventNotify
	 bool                      sfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_NotifyChangeClanname
	 bool                      sfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewClanname );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ChangeClanname
	 bool                      sfReqPaidItem_ChangeClanname ( struct FBtrDouble ItemIdx, struct FString NewClanname );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ChangeClanname
	 bool                      sfAckClanMatch_EndPublicWaitRoomList (  );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_EndPublicWaitRoomList
	 bool                      sfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_PublicWaitRoomList
	 bool                      sfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StartPublicWaitRoomList
	 bool                      sfReqClanMatch_GetPublicWaitRoomList (  );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_GetPublicWaitRoomList
	 bool                      sfAckServerType ( unsigned char Type );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckServerType
	 bool                      sfReqServerType (  );                             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqServerType
	 bool                      sfAckServerShutdown ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckServerShutdown
	 bool                      sfReqServerShutdown ( struct FString AuthKey, int SecondAfter, struct FBtrDouble ShutdownTime );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqServerShutdown
	 bool                      sfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyEndTutorial
	 bool                      sfReqNotifyEndTutorial ( int TutorialResultType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyEndTutorial
	 bool                      sfAckNotifyStartTutorial ( int Result, int UserID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyStartTutorial
	 bool                      sfReqNotifyStartTutorial (  );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyStartTutorial
	 bool                      sfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRoomUserPingInfo
	 bool                      sfReqRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRoomUserPingInfo
	 bool                      sfAckMyEquipedQSlotList ( class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< int > TWItemID1, class TArray< struct FBtrDouble > TW2UniqueID, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID, int Result );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckMyEquipedQSlotList
	 bool                      sfReqMyEquipedQSlotList (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqMyEquipedQSlotList
	 bool                      sfAckMyEquipedSkillList ( class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckMyEquipedSkillList
	 bool                      sfReqMyEquipedSkillList (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqMyEquipedSkillList
	 bool                      sfAckMyEquipedItemList ( class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< int > PaintID, class TArray< struct FBtrDouble > UniqueID, int Result );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckMyEquipedItemList
	 bool                      sfReqMyEquipedItemList (  );                      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqMyEquipedItemList
	 bool                      sfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetMyMailBoxState
	 bool                      sfReqGetMyMailBoxState (  );                      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetMyMailBoxState
	 bool                      sfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSetLookForClan
	 bool                      sfReqSetLookForClan ( unsigned char IsLookingFor );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSetLookForClan
	 bool                      sfAckExteriorRoomOwnerInfo (  );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomOwnerInfo
	 bool                      sfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomOwnerInfo
	 bool                      sfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_SetWaitRoomPublic
	 bool                      sfReqClanMatch_SetWaitRoomPublic ( unsigned char Set );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_SetWaitRoomPublic
	 bool                      sfReqRemoveCheckTeamBalanceList (  );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRemoveCheckTeamBalanceList
	 bool                      sfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_NotifyChangeClanMark
	 bool                      sfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ChangeClanMark
	 bool                      sfReqPaidItem_ChangeClanMark ( struct FBtrDouble ItemIdx, unsigned char IsPaid, int Pattern, int BG, int BL );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ChangeClanMark
	 bool                      sfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ClanMarkDupCheck
	 bool                      sfReqPaidItem_ClanMarkDupCheck ( unsigned char IsPaid, int Pattern, int BG, int BL );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ClanMarkDupCheck
	 bool                      sfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_RelayBroadcast
	 bool                      sfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_BroadCast
	 bool                      sfReqPaidItem_BroadCast ( struct FBtrDouble ItemIdx, int Command, struct FString Message );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPaidItem_BroadCast
	 bool                      sfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_EraseRecord
	 bool                      sfReqPaidItem_EraseRecord ( struct FBtrDouble ItemIdx, int Command );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPaidItem_EraseRecord
	 bool                      sfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ChangeCharname
	 bool                      sfReqPaidItem_ChangeCharname ( struct FBtrDouble ItemIdx, struct FString NewCharname );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ChangeCharname
	 bool                      sfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRecvSystemMsg
	 bool                      sfAckSendSystemMsg ( int Result );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSendSystemMsg
	 bool                      sfReqSendSystemMsg ( unsigned char RecvType, struct FString SendCharName, struct FString RecvCharname, struct FSystemMsgParam MsgInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSendSystemMsg
	 bool                      sfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRandomBox_Use
	 bool                      sfReqRandomBox_Use ( struct FBtrDouble ItemIdx ); 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRandomBox_Use
	 bool                      sfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangedRoomTitle_FromGM
	 bool                      sfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeRoomTitle_GM
	 bool                      sfReqChangeRoomTitle_GM ( int RoomNumber, struct FString NewRoomTitle );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChangeRoomTitle_GM
	 bool                      sfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGMLeaveRoom
	 bool                      sfAckGMEnterRoom ( int Result, int RoomNumber, int UserID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGMEnterRoom
	 bool                      sfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckQuestGetAvailableEventList
	 bool                      sfReqQuestGetAvailableEventList (  );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqQuestGetAvailableEventList
	 bool                      sfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCharBlockInfo
	 bool                      sfReqCharBlockInfo (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCharBlockInfo
	 bool                      sfReqIsPaidWebzenPCBang ( unsigned char IsPaid ); 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqIsPaidWebzenPCBang
	 bool                      sfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_GetClanWaittingRoomInfo
	 bool                      sfReqClanMatch_GetClanWaittingRoomInfo (  );      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_GetClanWaittingRoomInfo
	 bool                      sfAckReturnBotID ( int Result );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckReturnBotID
	 bool                      sfReqReturnBotID ( class TArray< int > BotID );   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqReturnBotID
	 bool                      sfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetBotID
	 bool                      sfReqGetBotID ( unsigned char AFCount, unsigned char RSACount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetBotID
	 bool                      sfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_ChangeRoomSetting
	 bool                      sfReqClanMatch_ChangeRoomSetting ( int WaitRoomIndex, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_ChangeRoomSetting
	 bool                      sfAckParamCheckSum ( int Result );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckParamCheckSum
	 bool                      sfReqParamCheckSum ( struct FString key, struct FString Value );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqParamCheckSum
	 bool                      sfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingUseStorageItem
	 bool                      sfReqWebzenBillingUseStorageItem ( int StorageSeq, int StorageItemSeq, unsigned char StorageItemType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqWebzenBillingUseStorageItem
	 bool                      sfAckWebzenBillingStorageListEnd (  );            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingStorageListEnd
	 bool                      sfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingStorageList
	 bool                      sfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingStorageListStart
	 bool                      sfReqWebzenBillingStorageList ( int Page, int CountForPage, unsigned char Type );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqWebzenBillingStorageList
	 bool                      sfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGiftItemByWebzenCash
	 bool                      sfReqGiftItemByWebzenCash ( struct FString ReceiverCharName, struct FString Message, int PackageProductSeq, int PriceSeq, int ProductDisplaySeq );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGiftItemByWebzenCash
	 bool                      sfReqGiftItemByWebzenCashGP20 ( struct FString ReceiverCharName, struct FString Message, int ProductNo, unsigned char Cointype );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGiftItemByWebzenCashGP20
	 bool                      sfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckBuyItemByWebzenCash
	 bool                      sfReqBuyItemByWebzenCash ( int PackageProductSeq, int ProductDisplaySeq, int PriceSeq, class TArray< int > ItemIDs, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqBuyItemByWebzenCash
	 bool                      sfReqBuyItemByWebzenCashGP20 ( int ProductNo, unsigned char Cointype, struct FBtrDouble ItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqBuyItemByWebzenCashGP20
	 bool                      sfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckWebzenShopScriptVersion
	 bool                      sfReqWebzenShopScriptVersion (  );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqWebzenShopScriptVersion
	 bool                      sfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckWebzenCash
	 bool                      sfReqWebzenCash (  );                             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqWebzenCash
	 bool                      sfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRegisteredPCBangInfo
	 bool                      sfReqRegisteredPCBangInfo (  );                   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRegisteredPCBangInfo
	 bool                      sfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRegisterMainPCBang
	 bool                      sfReqRegisterMainPCBang (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRegisterMainPCBang
	 bool                      sfAckPCBangUserListEnd (  );                      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPCBangUserListEnd
	 bool                      sfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPCBangUserList
	 bool                      sfAckPCBangUserListStart ( int Result, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPCBangUserListStart
	 bool                      sfReqPCBangUserList (  );                         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPCBangUserList
	 bool                      sfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDailyQuestNewAvailable
	 bool                      sfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqQuestNewAvailable
	 bool                      sfAckQuestUpdate ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckQuestUpdate
	 bool                      sfReqQuestUpdate ( int UniqueID, int GameRoomNum, class TArray< int > QuestID, class TArray< int > CountPrograss );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqQuestUpdate
	 bool                      sfAckQuestListEnd (  );                           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckQuestListEnd
	 bool                      sfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckQuestList
	 bool                      sfAckQuestListStart ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckQuestListStart
	 bool                      sfReqQuestList (  );                              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqQuestList
	 bool                      sfAckPermanentRoomInfo ( int Result, int ClanIdx, unsigned char FixedGameMode, unsigned char FixedMaxUserCnt );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckPermanentRoomInfo
	 bool                      sfReqPermanentRoomInfo ( int RoomNum );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqPermanentRoomInfo
	 bool                      sfAckClanMatch_FoundMatch (  );                   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_FoundMatch
	 bool                      sfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_FoundMatch
	 bool                      sfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_NotifyStartSearching
	 bool                      sfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StartSearching
	 bool                      sfReqClanMatch_StartSearching ( int RequestCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_StartSearching
	 bool                      sfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckLimitedListInChannel
	 bool                      sfReqLimitedListInChannel (  );                   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLimitedListInChannel
	 bool                      sfAckRecvInviteGameRoomResult ( int Result );     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRecvInviteGameRoomResult
	 bool                      sfAckRecvInviteGameRoom ( struct FString RoomUniqueID, int RoomNumber, unsigned char Answer, struct FString InviteCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRecvInviteGameRoom
	 bool                      sfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvInviteGameRoom
	 bool                      sfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckInviteGameRoom
	 bool                      sfReqInviteGameRoom ( struct FString GuestCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqInviteGameRoom
	 bool                      sfAckClanMatch_StopSearching (  );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StopSearching
	 bool                      sfReqClanMatch_StopSearching (  );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_StopSearching
	 bool                      sfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_ChangeLeader
	 bool                      sfReqClanMatch_ChangeLeader ( int WaitRoomIdx, int NewLeaderID, struct FString NewLeaderName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_ChangeLeader
	 bool                      sfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_WaittingTeamList
	 bool                      sfReqClanMatch_WaittingTeamList ( int StartIndex, int ReturnCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_WaittingTeamList
	 bool                      sfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString CharName, struct FString Msg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_Chat
	 bool                      sfReqClanMatch_Chat ( struct FString Msg );       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_Chat
	 bool                      sfAckClanMatch_LeaveNotify ( struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_LeaveNotify
	 bool                      sfAckClanMatch_Leave ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_Leave
	 bool                      sfReqClanMatch_Leave ( int WaittingID );          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_Leave
	 bool                      sfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_MemberList
	 bool                      sfReqClanMatch_MemberList (  );                   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_MemberList
	 bool                      sfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_JoinNotify
	 bool                      sfAckClanMatch_Join ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_Join
	 bool                      sfReqClanMatch_Join ( int WaittingID );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_Join
	 bool                      sfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_InviteCrewResult
	 bool                      sfAckClanMatch_RecvInviteCrew ( int Result, struct FString Inviter );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_RecvInviteCrew
	 bool                      sfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_RecvInviteCrew
	 bool                      sfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_InviteCrew
	 bool                      sfReqClanMatch_InviteCrew ( struct FString Invitee );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_InviteCrew
	 bool                      sfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_NotifiyStartCombat
	 bool                      sfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StartCombat
	 bool                      sfReqClanMatch_StartCombat ( class TArray< int > MapNumArray, int VersusMode );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_StartCombat
	 bool                      sfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanMatch_GetReady
	 bool                      sfReqClanMatch_GetReady (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanMatch_GetReady
	 bool                      sfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAutoChangedTeamUserList
	 bool                      sfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetItemFromItemBox
	 bool                      sfReqGetItemFromItemBox ( struct FBtrDouble ItemUniqueID, int ItemID, int ItemIDChoose, int PartIDChoose );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetItemFromItemBox
	 bool                      sfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckItemListInItemBox
	 bool                      sfReqItemListInItemBox ( struct FBtrDouble ItemUniqueID, int BoxItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqItemListInItemBox
	 bool                      sfReqRecvForceFailedClientLoading ( int ErrCode );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvForceFailedClientLoading
	 bool                      sfAckForceFailedClientLoading ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckForceFailedClientLoading
	 bool                      sfReqForceFailedClientLoading ( int FailedUserID, int ErrCode );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqForceFailedClientLoading
	 bool                      sfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckStartHolePunching
	 bool                      sfReqStartHolePunching ( int GameType, int ReqStartUserID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqStartHolePunching
	 bool                      sfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyMyCharInfoToRoomUser
	 bool                      sfReqNotifyMyCharInfoToRoomUser (  );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyMyCharInfoToRoomUser
	 bool                      sfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyDurabilityZeroItem
	 bool                      sfAckChatWispherMyCommunity ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChatWispherMyCommunity
	 bool                      sfReqChatWispherMyCommunity ( struct FString SourceCharName, struct FString SenderName, struct FString Msg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChatWispherMyCommunity
	 bool                      sfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyDisconnectHostInLoading
	 bool                      sfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvForceDisconnected_FromGM
	 bool                      sfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckForceDisconnectUser_GM
	 bool                      sfReqForceDisconnectUser_GM ( struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqForceDisconnectUser_GM
	 bool                      sfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvNotice_FromGM
	 bool                      sfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotice_GM
	 bool                      sfReqNotice_GM ( unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotice_GM
	 bool                      sfAckSpecificChannelUserInfo ( int UID, struct FString UserID, int UserLevels, struct FString ClanName, int ClanPattern, int ClanBG, int ClanBL, int Result, struct FString ErrMsg, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSpecificChannelUserInfo
	 bool                      sfReqSpecificChannelUserInfo ( int UserID );      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSpecificChannelUserInfo
	 bool                      sfAckSpecificGameRoomInfo ( int Result, int GameNum, struct FString Title, struct FString MapName, int MapNum, unsigned char UserCount, unsigned char MaxCount, struct FString GameModeName, int ModeNum, unsigned char WeaponLimit, unsigned char IsHardCore, unsigned char Status, struct FString RoomOwnerIP, int GameMinute, struct FString RoomOwnerName, unsigned char IsSpecial, unsigned char IsPassword );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSpecificGameRoomInfo
	 bool                      sfReqSpecificGameRoomInfo ( int RoomNum );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSpecificGameRoomInfo
	 bool                      sfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChannelUserListInGameRoom
	 bool                      sfReqChannelUserListInGameRoom ( int ChannelNum, int StartIndex, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChannelUserListInGameRoom
	 bool                      sfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvDeleteFriend
	 bool                      sfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDeleteFriend
	 bool                      sfReqDeleteFriend ( class TArray< struct FString > DeleteCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDeleteFriend
	 bool                      sfAckGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGameGuardAuthData
	 bool                      sfReqGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGameGuardAuthData
	 bool                      sfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCheckEquipedWeaponDurability
	 bool                      sfReqCheckEquipedWeaponDurability (  );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCheckEquipedWeaponDurability
	 bool                      sfReqGamePlay_GetChopper ( int GetChopperUID, class TArray< int > GetChopperAssistUID, float KillXCoord, float KillYCoord, float KillZCoord, int KillPos, int KillWeaponID, int KillWeaponPartID, int KillRange, int KillDamage, int ChopperCallerID, struct FString ChopperCallerName, float ChopperXCoord, float ChopperYCoord, float ChopperZCoord );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_GetChopper
	 bool                      sfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAcquirePromotionItems
	 bool                      sfAckIsAvailClanURL ( struct FString ClanURL, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckIsAvailClanURL
	 bool                      sfReqIsAvailClanURL ( struct FString ClanURL );   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqIsAvailClanURL
	 bool                      sfAckGetIsHostBlocking ( int Result, unsigned char Blocking );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetIsHostBlocking
	 bool                      sfReqGetIsHostBlocking (  );                      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetIsHostBlocking
	 bool                      sfAckNotifyHostBlocking ( int Result, unsigned char Blocking );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyHostBlocking
	 bool                      sfReqNotifyHostBlocking ( unsigned char Blocking );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyHostBlocking
	 bool                      sfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetHolePunchingResult
	 bool                      sfReqGetHolePunchingResult (  );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetHolePunchingResult
	 bool                      sfReqNotifyRecvDummyForHolePunching ( int ClientUserID, unsigned char Phrase );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyRecvDummyForHolePunching
	 bool                      sfReqGamePlay_ChangeWeaponSet ( int UID, int SetNumber );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_ChangeWeaponSet
	 bool                      sfReqGamePlay_UpdateDomScore ( int AFScore, int RSAScore );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_UpdateDomScore
	 bool                      sfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyRelayServerAddr
	 bool                      sfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetUserHostPriorityPoint
	 bool                      sfReqGetUserHostPriorityPoint ( int UserID );     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetUserHostPriorityPoint
	 bool                      sfReqUpdateMyHostPriorityPoint ( int HostPriorityPoint );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqUpdateMyHostPriorityPoint
	 bool                      sfReqWriteServerLog ( unsigned char Destination, struct FString LogMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqWriteServerLog
	 bool                      sfReqGamePlay_SetRoundStartTime ( class TArray< int > UID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_SetRoundStartTime
	 bool                      sfReqGamePlay_SetGameStartTime ( class TArray< int > UID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_SetGameStartTime
	 bool                      sfReqRecvForceDisconnectUDPFromHost ( int Result );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvForceDisconnectUDPFromHost
	 bool                      sfAckForceDisconnectUDPFromHost ( int Result );   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckForceDisconnectUDPFromHost
	 bool                      sfReqForceDisconnectUDPFromHost ( int UserID );   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqForceDisconnectUDPFromHost
	 bool                      sfReqGamePlay_TakeAPoint ( class TArray< int > TakerUID, unsigned char TakePos, class TArray< float > TakerXCoord, class TArray< float > TakerYCoord, class TArray< float > TakerZCoord, class TArray< int > TakerPos, class TArray< int > TakerWeaponID, class TArray< int > TakerWeaponPartID, class TArray< int > TakerRange );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_TakeAPoint
	 bool                      sfReqNotifyChangeRoomState ( unsigned char RoomState );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyChangeRoomState
	 bool                      sfReqGamePlay_DefuseBomb ( int DefuserUID, unsigned char DefusePos, float DefuserXCoord, float DefuserYCoord, float DefuserZCoord, int DefuserPos, int DefuserWeaponID, int DefuserWeaponPartID, int DefuserRange );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_DefuseBomb
	 bool                      sfReqGamePlay_InstallBomb ( int InstallerUID, unsigned char InstallPos, float InstallerXCoord, float InstallerYCoord, float InstallerZCoord, int InstallerPos, int InstallerWeaponID, int InstallerWeaponPartID, int InstallerRange );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGamePlay_InstallBomb
	 bool                      sfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDBCharInfo
	 bool                      sfReqDBCharInfo ( struct FString CharName );      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDBCharInfo
	 bool                      sfReqForceNatTypeSetting ( int NatType );         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqForceNatTypeSetting
	 bool                      sfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetServerTime
	 bool                      sfReqGetServerTime (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetServerTime
	 bool                      sfReqLogEndEachRound ( int StartCnt, int EndCnt, int RoundEndType, int RoundEndTime, unsigned char VTeam, unsigned char VTeamAD, int AFScore, int RSAScore, int Round );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLogEndEachRound
	 bool                      sfReqLogGetScore ( struct FKillDeathLog KillDeathLogParam, class TArray< int > AssistUIDs, class TArray< unsigned char > AssistScores );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLogGetScore
	 bool                      sfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionTradeHistory
	 bool                      sfReqAuctionTradeHistory ( int ItemID, int PartID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAuctionTradeHistory
	 bool                      sfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSendGift
	 bool                      sfReqSendGift ( int ItemID, struct FString RecvCharname, struct FString RecvMessage, unsigned char BuyOption1, unsigned char BuyOption2 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSendGift
	 bool                      sfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetAttachedItemFromMemo
	 bool                      sfReqGetAttachedItemFromMemo ( int UserID, int MemoIdx, int ItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetAttachedItemFromMemo
	 bool                      sfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyNewClanMember
	 bool                      sfAckChatClan ( struct FString CharName, struct FString Message, int Result );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChatClan
	 bool                      sfReqChatClan ( struct FString Message );         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChatClan
	 bool                      sfAckTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckTestDouble
	 bool                      sfReqTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqTestDouble
	 bool                      sfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyLoadingState
	 bool                      sfReqNotifyLoadingState ( unsigned char LoadingState );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyLoadingState
	 bool                      sfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckFailedStartGame
	 bool                      sfReqFailedStartGame ( int LoadingStep );         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqFailedStartGame
	 bool                      sfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSuccessStartGame
	 bool                      sfReqSuccessStartGame ( int LoadingStep );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSuccessStartGame
	 bool                      sfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanCharPersonelIntro
	 bool                      sfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanCharPersonelIntro
	 bool                      sfAckClanPersonelIntro ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanPersonelIntro
	 bool                      sfReqClanPersonelIntro ( struct FString ClanName, struct FString CharName, struct FString PersonelIntro );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanPersonelIntro
	 bool                      sfAckClanChangeInfo ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanChangeInfo
	 bool                      sfReqClanChangeInfo ( struct FString ClanName, unsigned char IsRecruit, unsigned char Region, struct FString Keyword, struct FString ClanIntro, struct FString Notice );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanChangeInfo
	 bool                      sfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanClose
	 bool                      sfReqClanClose ( struct FString ClanName );       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanClose
	 bool                      sfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyClanSecession
	 bool                      sfAckClanSecession ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanSecession
	 bool                      sfReqClanSecession ( struct FString ClanName );   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanSecession
	 bool                      sfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanNews
	 bool                      sfReqClanNews ( struct FString ClanName );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanNews
	 bool                      sfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyAdjustClanMemberGrade
	 bool                      sfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAdjustClanMemberGrade
	 bool                      sfReqAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAdjustClanMemberGrade
	 bool                      sfAckClanUserListEnd (  );                        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanUserListEnd
	 bool                      sfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanUserList
	 bool                      sfAckClanUserListStart ( int Result, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanUserListStart
	 bool                      sfReqClanUserList ( struct FString ClanName );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanUserList
	 bool                      sfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSearchClan
	 bool                      sfReqSerachClan ( unsigned char SearchType, struct FString Keyword, unsigned char ClanStatus, unsigned char ClanRegion, int ReqPage );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSerachClan
	 bool                      sfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckJoinClanResult
	 bool                      sfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRecvJoinClanResult
	 bool                      sfAckRecvJoinClan ( int UserIdx, struct FString CharName, struct FString ReqMsg, unsigned char Permit );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRecvJoinClan
	 bool                      sfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvJoinClan
	 bool                      sfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckJoinClan
	 bool                      sfReqJoinClan ( struct FString ClanName, struct FString ClanManagerName, struct FString Message );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqJoinClan
	 bool                      sfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckInviteClanResult
	 bool                      sfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRecvClanInviteResult
	 bool                      sfAckRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString InviterMsg, struct FString ClanName, unsigned char Permit );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRecvClanInvite
	 bool                      sfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvClanInvite
	 bool                      sfAckInviteClan ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckInviteClan
	 bool                      sfReqInviteClan ( struct FString CharName, struct FString InviteMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqInviteClan
	 bool                      sfAckClanInfo ( struct FClanInfo stClanInfo );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClanInfo
	 bool                      sfReqClanInfo ( struct FString ClanName );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClanInfo
	 bool                      sfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCreateClan
	 bool                      sfReqCreateClan ( struct FString ClanName, struct FString ClanURL, struct FString ClanIntro, struct FString ClanKeyword, unsigned char ClanRegion );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCreateClan
	 bool                      sfAckDupCheckClanName ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDupCheckClanName
	 bool                      sfReqDupCheckClanName ( struct FString ClanNam ); 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDupCheckClanName
	 bool                      sfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSellShopItemInfo
	 bool                      sfReqSellShopItemInfo ( struct FBtrDouble UniqueItemID, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSellShopItemInfo
	 bool                      sfAckGameOverEnd ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGameOverEnd
	 bool                      sfReqGameOverEnd (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGameOverEnd
	 bool                      sfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionItemListCount
	 bool                      sfReqAuctionItemListCount ( unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAuctionItemListCount
	 bool                      sfAckServerTime ( int Time );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckServerTime
	 bool                      sfReqServerTime (  );                             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqServerTime
	 bool                      sfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEntryQSlotIDList
	 bool                      sfReqEntryQSlotIDList ( int UserNum );            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEntryQSlotIDList
	 bool                      sfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEntryQSlotUniqueIDList
	 bool                      sfReqEntryQSlotUniqueIDList ( int UserNum );      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEntryQSlotUniqueIDList
	 bool                      sfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionBidding
	 bool                      sfReqAuctionBidding ( int UniqueID, int BiddingPrice );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAuctionBidding
	 bool                      sfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionInstantlyBuying
	 bool                      sfReqAuctionInstantlyBuying ( int UniqueID );     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAuctionInstantlyBuying
	 bool                      sfAckAuctionItemListEnd ( unsigned char Section );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionItemListEnd
	 bool                      sfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionItemList
	 bool                      sfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionItemListStart
	 bool                      sfReqAuctionItemList ( unsigned char Section, struct FString Keyword, int ItemRank, unsigned char ItemClassfy, unsigned char IsAvailable, int PageNum, int Count, int SortOpt );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAuctionItemList
	 bool                      sfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionMyItemCancel
	 bool                      sfReqAuctionMyItemCancel ( int UniqueID );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAuctionMyItemCancel
	 bool                      sfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAuctionMyItemRegister
	 bool                      sfReqAuctionMyItemRegister ( struct FBtrDouble UniqueID, int ItemCount, int BeginPrice, int PeriodHour, int InstantlyBuyingPrice );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAuctionMyItemRegister
	 bool                      sfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckMyMoney
	 bool                      sfReqMyMoney (  );                                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqMyMoney
	 bool                      sfAckUpdateQSlot ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckUpdateQSlot
	 bool                      sfReqUpdateQSlot ( int QSlotID, struct FString QSlotName, struct FBtrDouble MWItemID, struct FBtrDouble PistolItemID, struct FBtrDouble TWItemID1, struct FBtrDouble TWItemID2, int Skill1, int Skill2, int Skill3, int Skill4 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqUpdateQSlot
	 bool                      sfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckQSlotList
	 bool                      sfReqQSlotList (  );                              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqQSlotList
	 bool                      sfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRepairItem
	 bool                      sfReqRepairItem ( class TArray< struct FBtrDouble > UniqueItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRepairItem
	 bool                      sfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRepairCost
	 bool                      sfReqRepairCost ( class TArray< struct FBtrDouble > UniqueItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRepairCost
	 bool                      sfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckUpdateWeaponDurability
	 bool                      sfReqUpdateWeaponDurability ( int TotalPlayTime, class TArray< int > OwnerID, class TArray< int > Number, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > UsingSec, class TArray< int > UsingRoundInSD );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqUpdateWeaponDurability
	 bool                      sfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckModifyWeapon
	 bool                      sfReqModifyWeapon ( struct FBtrDouble UniqueID, int AddPartID, int PaintID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqModifyWeapon
	 bool                      sfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSellShopItem
	 bool                      sfReqSellShopItem ( struct FBtrDouble ItemUniqueID, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSellShopItem
	 bool                      sfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckBuyShopItem
	 bool                      sfReqBuyShopItem ( int ItemID, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqBuyShopItem
	 bool                      sfAckShopItemListEnd (  );                        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckShopItemListEnd
	 bool                      sfAckShopItemList ( class TArray< int > ItemID ); 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckShopItemList
	 bool                      sfAckShopItemListStart ( int Count );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckShopItemListStart
	 bool                      sfReqShopItemList (  );                           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqShopItemList
	 bool                      sfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckForceGameOver
	 bool                      sfReqForceGameOver (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqForceGameOver
	 bool                      sfAckGiveSkill ( int SkillID, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGiveSkill
	 bool                      sfReqGiveSkill (  );                              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGiveSkill
	 bool                      sfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyExpiredItemIDs
	 bool                      sfReqNotifyExpiredItemIDs (  );                   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyExpiredItemIDs
	 bool                      sfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyExpiredSkillIDs
	 bool                      sfReqNotifyExpiredSkillIDs (  );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyExpiredSkillIDs
	 bool                      sfAckNotifyChangedSkillState ( int UserID, class TArray< int > SkillIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyChangedSkillState
	 bool                      sfReqNotifyChangedSkillState (  );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyChangedSkillState
	 bool                      sfAckNotifyChangedItemState ( int UserID, class TArray< int > ItemIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyChangedItemState
	 bool                      sfReqNotifyChangedItemState (  );                 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyChangedItemState
	 bool                      sfAckConfirmSkillChanged ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckConfirmSkillChanged
	 bool                      sfReqConfirmSkillChanged (  );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqConfirmSkillChanged
	 bool                      sfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEquipSkill
	 bool                      sfReqEquipSkill ( int SkillID, int SkillUniqueID, unsigned char NewSlotPosition );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEquipSkill
	 bool                      sfAckUserSkillListEnd (  );                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckUserSkillListEnd
	 bool                      sfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckUserSkillList
	 bool                      sfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckUserSkillListStart
	 bool                      sfReqUserSkillList ( int UserID );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqUserSkillList
	 bool                      sfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDelMemo
	 bool                      sfReqDelMemo ( class TArray< int > MemoIdx, unsigned char Type );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDelMemo
	 bool                      sfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckReadMemo
	 bool                      sfReqReadMemo ( int MemoIdx );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqReadMemo
	 bool                      sfAckEndMemoList (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEndMemoList
	 bool                      sfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckMemoList
	 bool                      sfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckStartMemoList
	 bool                      sfReqMemoList ( unsigned char Type, unsigned char MemoType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqMemoList
	 bool                      sfReqRecvMemo ( struct FString cnameFrom, unsigned char MemoType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvMemo
	 bool                      sfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSendMemo
	 bool                      sfReqSendMemo ( class TArray< struct FString > cnames, struct FString Msg, int ItemUID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSendMemo
	 bool                      sfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvChatWispher
	 bool                      sfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChatWispher
	 bool                      sfReqChatWispher ( struct FString CharName, struct FString Message );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChatWispher
	 bool                      sfAckRemoveBlockUserList ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRemoveBlockUserList
	 bool                      sfReqRemoveBlockUserList ( struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRemoveBlockUserList
	 bool                      sfAckAddBlockUserList ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckAddBlockUserList
	 bool                      sfReqAddBlockUserList ( struct FString CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqAddBlockUserList
	 bool                      sfAckBlockUserListEnd (  );                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckBlockUserListEnd
	 bool                      sfAckBlockUserList ( class TArray< struct FString > CharName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckBlockUserList
	 bool                      sfAckBlockUserListStart ( int Result, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckBlockUserListStart
	 bool                      sfReqBlockUserList (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqBlockUserList
	 bool                      sfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCompleteFriendInvite
	 bool                      sfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckConfirmFriendInvite
	 bool                      sfReqConfirmFriendInvite ( int ReqUserID, struct FString ReqedCharname, unsigned char IsPermit );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqConfirmFriendInvite
	 bool                      sfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRecvFriendInvite
	 bool                      sfAckSendFriendInvite ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSendFriendInvite
	 bool                      sfReqSendFriendInvite ( int InviteUserID, struct FString InviteName, struct FString InviteMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSendFriendInvite
	 bool                      sfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChatNormal
	 bool                      sfReqChatNormal ( struct FString Message );       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChatNormal
	 bool                      sfAckDummy ( int Result );                        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDummy
	 bool                      sfReqDummy ( int DelayCheck );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDummy
	 bool                      sfAckConfirmItemChanged ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckConfirmItemChanged
	 bool                      sfReqConfirmItemChanged (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqConfirmItemChanged
	 bool                      sfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEquipItem
	 bool                      sfReqEquipItem ( int ItemID, struct FBtrDouble UniqueID, int SlotPosition );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEquipItem
	 bool                      sfAckItemListEnd (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckItemListEnd
	 bool                      sfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckItemList
	 bool                      sfAckItemListStart ( int Count, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckItemListStart
	 bool                      sfReqItemList ( int UID );                        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqItemList
	 bool                      sfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEntrySkillList
	 bool                      sfReqEntrySkillList ( int UserID );               		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEntrySkillList
	 bool                      sfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEntryItemList
	 bool                      sfReqEntryItemList ( int UserID );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEntryItemList
	 bool                      sfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeUserState
	 bool                      sfReqChangeUserState ( unsigned char NewState, unsigned char CheckPlaying );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChangeUserState
	 bool                      sfAckExteriorRoomState (  );                      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomState
	 bool                      sfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomState
	 bool                      sfAckExteriorRoomUserCount (  );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomUserCount
	 bool                      sfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomUserCount
	 bool                      sfAckExteriorRoomInfo (  );                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomInfo
	 bool                      sfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomInfo
	 bool                      sfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetBootyChoose
	 bool                      sfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGetBooty
	 bool                      sfReqGetBooty ( int RoomNumber );                 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGetBooty
	 bool                      sfAckSetUserBootySeedValue ( int UserID, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSetUserBootySeedValue
	 bool                      sfReqSetUserBootySeedValue ( int UserID, int SeedValue );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSetUserBootySeedValue
	 bool                      sfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeRoomSetting
	 bool                      sfReqChangeRoomSetting ( struct FGameRoomInfo RoomInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChangeRoomSetting
	 bool                      sfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyLevelUp
	 bool                      sfAckClientUdpInfoList ( int Result, struct FString ErrMsg, class TArray< int > UID, class TArray< struct FString > IP, class TArray< int > Port );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckClientUdpInfoList
	 bool                      sfReqClientUdpInfoList ( int GameNum );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqClientUdpInfoList
	 bool                      sfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRegisterOtherUdpInfo
	 bool                      sfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRegisterMyUdpInfo
	 bool                      sfReqRegisterMyUdpInfo ( unsigned char IsHost, struct FString IP, int Port, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRegisterMyUdpInfo
	 bool                      sfAckNotifyClientJoinTime ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckNotifyClientJoinTime
	 bool                      sfReqNotifyClientJoinTime ( int JoinedClientID ); 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqNotifyClientJoinTime
	 bool                      sfAckChangeNewGuest ( struct FString HostIP );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeNewGuest
	 bool                      sfAckChangeHost ( unsigned char ClientNum );      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeHost
	 bool                      sfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckDisconnectGame
	 bool                      sfReqDisconnectGame (  );                         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqDisconnectGame
	 bool                      sfAckConnectGame ( int UserID, int Result );      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckConnectGame
	 bool                      sfReqConnectGame (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqConnectGame
	 bool                      sfReqRelayServerOff (  );                         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRelayServerOff
	 bool                      sfReqRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRelayServerOn
	 bool                      sfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGameOver
	 bool                      sfReqGameOver ( int UID, int GameRoomNumber );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGameOver
	 bool                      sfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckIsGameRoomPlaying
	 bool                      sfReqIsGameRoomPlaying ( int GameRoomNum );       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqIsGameRoomPlaying
	 bool                      sfAckGameRoomDestroy ( int GameRoomNum );         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGameRoomDestroy
	 bool                      sfAckChangeRoomMaxNum ( int GameNum, int Number, int TeamNumber, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeRoomMaxNum
	 bool                      sfReqChangeRoomMaxNum ( int GameNum, int UID, int Number, int TeamNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChangeRoomMaxNum
	 bool                      sfAckUpdateScoreResult ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckUpdateScoreResult
	 bool                      sfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckUpdateScore
	 bool                      sfReqUpdateScore ( int GameNumber, class TArray< int > UserIDs, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > Points, class TArray< int > Scores, class TArray< int > TeamScores, class TArray< int > RoundJoin, class TArray< int > TimeJoin, int Playtime, unsigned char GameEndType, class TArray< struct FString > UserNames );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqUpdateScore
	 bool                      sfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckStartGame
	 bool                      sfReqStartGame ( int GameNumber );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqStartGame
	 bool                      sfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGameHostInfo
	 bool                      sfReqGameHostInfo ( int GameNumber );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGameHostInfo
	 bool                      sfAckIsHostAvailable ( int Result );              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckIsHostAvailable
	 bool                      sfReqIsHostAvailable ( struct FString MyIp, int CPUGrade, int RamGrade, int VGAGrade, int VGARam );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqIsHostAvailable
	 bool                      sfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeTeam
	 bool                      sfReqChangeTeam ( int TeamNum );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChangeTeam
	 bool                      sfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeRoomOwner
	 bool                      sfReqChangeRoomOwner ( int GameNum, int UID, int NewOwner );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChangeRoomOwner
	 bool                      sfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChangeGameMode
	 bool                      sfReqChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChangeGameMode
	 bool                      sfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckBanUser
	 bool                      sfReqBanUser ( int GameNum, int UID, int BanUID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqBanUser
	 bool                      sfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckSelectMap
	 bool                      sfReqSelectMap ( int GameNum, int UID, struct FString MapName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqSelectMap
	 bool                      sfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckGameRoomInfo
	 bool                      sfReqGameRoomInfo ( int GameNum, int UID );       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqGameRoomInfo
	 bool                      sfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCreateGameRoom
	 bool                      sfReqCreateGameRoom ( struct FGameRoomInfo NetRoomInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCreateGameRoom
	 bool                      sfAckExceedMaxUser (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckExceedMaxUser
	 bool                      sfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckLeaveRoom
	 bool                      sfReqLeaveRoom ( int Num );                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLeaveRoom
	 bool                      sfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRoomUserList
	 bool                      sfReqRoomUserList ( int GameNum );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRoomUserList
	 bool                      sfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEnterRoom
	 bool                      sfReqEnterRoom ( int GameNum, struct FString Password, unsigned char RoomEnterType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEnterRoom
	 bool                      sfAckRoomListEnd (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRoomListEnd
	 bool                      sfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRoomList
	 bool                      sfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckRoomListStart
	 bool                      sfReqRoomList ( int id, int StartIndex, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqRoomList
	 bool                      sfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChannelUserList
	 bool                      sfReqChannelUserList ( int id, int StartIndex, int Count );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChannelUserList
	 bool                      sfAckLeaveChannel ( int Result, struct FString UserID, int UID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckLeaveChannel
	 bool                      sfReqLeaveChannel ( int id );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLeaveChannel
	 bool                      sfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckEnterChannel
	 bool                      sfReqEnterChannel ( int id );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqEnterChannel
	 bool                      sfAckChannelList ( class TArray< int > id, class TArray< struct FString > Title, class TArray< int > CurUser, class TArray< int > MaxUser );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckChannelList
	 bool                      sfReqChannelList ( int bChannelType );            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqChannelList
	 bool                      sfAckFriendListEnd (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckFriendListEnd
	 bool                      sfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckFriendList
	 bool                      sfAckFriendListStart ( int Result, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckFriendListStart
	 bool                      sfReqFriendList (  );                             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqFriendList
	 bool                      sfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckCharInfo
	 bool                      sfReqCharInfo (  );                               		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqCharInfo
	 bool                      sfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckLogin2
	 bool                      sfReqLogin2 ( struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, struct FString Guid, int UserType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLogin2
	 bool                      sfAckStartNatDiag ( int NatType );                		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckStartNatDiag
	 bool                      sfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqStartNatDiag
	 bool                      sfReqForceLogoutByOwner (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqForceLogoutByOwner
	 bool                      sfAckLogin ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, struct FCharInfo btCharInfo );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckLogin
	 bool                      sfReqLogin ( struct FString id );                 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqLogin
	 bool                      sfAckHash ( int Result, struct FString ErrMsg );  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfAckHash
	 bool                      sfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.sfReqHash
	 bool                      eventrfNotifyCouponUseError ( int Time );         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfNotifyCouponUseError
	 bool                      eventrfAckCouponUse ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCouponUse
	 bool                      eventrfReqCouponUse ( struct FString Serial );    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCouponUse
	 bool                      eventrfReqNotifyShopItemDataEnd ( int Ver );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyShopItemDataEnd
	 bool                      eventrfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyShopItemData
	 bool                      eventrfAckShopItemData (  );                      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckShopItemData
	 bool                      eventrfReqShopItemData ( int Ver );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqShopItemData
	 bool                      eventrfReqNotifyLoadingStatus ( int Status );     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyLoadingStatus
	 bool                      eventrfReqUpdateUserPerformenceInfo ( int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqUpdateUserPerformenceInfo
	 bool                      eventrfReqAhnNotifyDisconnct ( int Code );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAhnNotifyDisconnct
	 bool                      eventrfAckAhnHsObject ( class TArray< unsigned char > Data, int DataSize );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAhnHsObject
	 bool                      eventrfReqAhnHsObject ( class TArray< unsigned char > Data, int DataSize );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAhnHsObject
	 bool                      eventrfNotifyClanLevelup ( struct FString ClanName, int Levelup );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfNotifyClanLevelup
	 bool                      eventrfNotifyNewClanName ( struct FString New_NickName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfNotifyNewClanName
	 bool                      eventrfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfNotifyNewNickName
	 bool                      eventrfAckGameMapData ( class TArray< int > nIdx, class TArray< int > nMapID, class TArray< struct FString > nMapNm, class TArray< float > fSupHealth, class TArray< float > fSupHeli, class TArray< float > fSupBomb, class TArray< float > fSupUAV, class TArray< int > nModFFA, class TArray< int > nModFFAMax, class TArray< int > nModTDM, class TArray< int > nModTDMMax, class TArray< int > nModSD, class TArray< int > nModSDMax, class TArray< int > nModDOM, class TArray< int > nModDOMMax, class TArray< int > nModSab, class TArray< int > nModSabMax );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGameMapData
	 bool                      eventrfReqGameMapData (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGameMapData
	 bool                      eventrfAckTencent_StartTenProtect ( int CharDBID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckTencent_StartTenProtect
	 bool                      eventrfAckMoveToLobby ( unsigned char MessageType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckMoveToLobby
	 bool                      eventrfAckPopUpMessage ( int MessageType );       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPopUpMessage
	 bool                      eventrfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfUpdateWebzenShopScriptVersion
	 bool                      eventrfReqSetClientVersion ( int ClientVersion ); 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSetClientVersion
	 bool                      eventrfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckFriendPosition
	 bool                      eventrfReqFriendPosition ( struct FString TargetCharName, unsigned char CommunityType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqFriendPosition
	 bool                      eventrfAckDedicateHost_Login ( int Result, int UserID, int ChannelNum, int RoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDedicateHost_Login
	 bool                      eventrfReqDedicateHost_Login ( int ProcessID, int ChannelNum, int RoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDedicateHost_Login
	 bool                      eventrfAckLogOut ( unsigned char Result, unsigned char Reason );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckLogOut
	 bool                      eventrfReqLogOut ( unsigned char Reason );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLogOut
	 bool                      eventrfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckTencent_AASInfo
	 bool                      eventrfAckSetCommunityOption ( int Result, struct FString ErrStr );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSetCommunityOption
	 bool                      eventrfReqSetCommunityOption ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSetCommunityOption
	 bool                      eventrfAckCommunityOptionList ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCommunityOptionList
	 bool                      eventrfReqCommunityOptionList (  );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCommunityOptionList
	 bool                      eventrfAckNotifyUpdateCharInfo_TitleMark ( struct FString CharName, int TitleMarkID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyUpdateCharInfo_TitleMark
	 bool                      eventrfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyUpdateCharInfo_LevelMark
	 bool                      eventrfAckGetRankingInfoListEnd (  );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetRankingInfoListEnd
	 bool                      eventrfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetRankingInfoList
	 bool                      eventrfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetRankingInfoListStart
	 bool                      eventrfReqGetRankingInfoList ( unsigned char RankingType, unsigned char CommunityType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetRankingInfoList
	 bool                      eventrfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCharDetailInfo
	 bool                      eventrfReqCharDetailInfo (  );                    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCharDetailInfo
	 bool                      eventrfReqInGameRoomUserClanLevelChanged ( int UserID, int ClanLevel );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqInGameRoomUserClanLevelChanged
	 bool                      eventrfReqInGameRoomUserInfoChanged (  );         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqInGameRoomUserInfoChanged
	 bool                      eventrfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatchResultHistory
	 bool                      eventrfReqClanMatchResultHistory ( struct FString ClanNm );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatchResultHistory
	 bool                      eventrfAckDeleteMailAll ( int Result, unsigned char MailType, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDeleteMailAll
	 bool                      eventrfReqDeleteMailAll ( unsigned char MailType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDeleteMailAll
	 bool                      eventrfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_PublicWaitRoomChanged
	 bool                      eventrfAckEventNotify ( int Type );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEventNotify
	 bool                      eventrfReqEventNotify (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEventNotify
	 bool                      eventrfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_NotifyChangeClanname
	 bool                      eventrfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewClanname );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ChangeClanname
	 bool                      eventrfReqPaidItem_ChangeClanname ( struct FBtrDouble ItemIdx, struct FString NewClanname );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ChangeClanname
	 bool                      eventrfAckClanMatch_EndPublicWaitRoomList (  );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_EndPublicWaitRoomList
	 bool                      eventrfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_PublicWaitRoomList
	 bool                      eventrfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StartPublicWaitRoomList
	 bool                      eventrfReqClanMatch_GetPublicWaitRoomList (  );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_GetPublicWaitRoomList
	 bool                      eventrfAckServerType ( unsigned char Type );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckServerType
	 bool                      eventrfReqServerType (  );                        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqServerType
	 bool                      eventrfAckServerShutdown ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckServerShutdown
	 bool                      eventrfReqServerShutdown ( struct FString AuthKey, int SecondAfter, struct FBtrDouble ShutdownTime );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqServerShutdown
	 bool                      eventrfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyEndTutorial
	 bool                      eventrfReqNotifyEndTutorial ( int TutorialResultType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyEndTutorial
	 bool                      eventrfAckNotifyStartTutorial ( int Result, int UserID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyStartTutorial
	 bool                      eventrfReqNotifyStartTutorial (  );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyStartTutorial
	 bool                      eventrfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRoomUserPingInfo
	 bool                      eventrfReqRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRoomUserPingInfo
	 bool                      eventrfAckMyEquipedQSlotList ( class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< int > TWItemID1, class TArray< struct FBtrDouble > TW2UniqueID, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID, int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckMyEquipedQSlotList
	 bool                      eventrfReqMyEquipedQSlotList (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqMyEquipedQSlotList
	 bool                      eventrfAckMyEquipedSkillList ( class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckMyEquipedSkillList
	 bool                      eventrfReqMyEquipedSkillList (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqMyEquipedSkillList
	 bool                      eventrfAckMyEquipedItemList ( class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< int > PaintID, class TArray< struct FBtrDouble > UniqueID, int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckMyEquipedItemList
	 bool                      eventrfReqMyEquipedItemList (  );                 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqMyEquipedItemList
	 bool                      eventrfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetMyMailBoxState
	 bool                      eventrfReqGetMyMailBoxState (  );                 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetMyMailBoxState
	 bool                      eventrfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSetLookForClan
	 bool                      eventrfReqSetLookForClan ( unsigned char IsLookingFor );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSetLookForClan
	 bool                      eventrfAckExteriorRoomOwnerInfo (  );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomOwnerInfo
	 bool                      eventrfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomOwnerInfo
	 bool                      eventrfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_SetWaitRoomPublic
	 bool                      eventrfReqClanMatch_SetWaitRoomPublic ( unsigned char Set );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_SetWaitRoomPublic
	 bool                      eventrfReqRemoveCheckTeamBalanceList (  );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRemoveCheckTeamBalanceList
	 bool                      eventrfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_NotifyChangeClanMark
	 bool                      eventrfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ChangeClanMark
	 bool                      eventrfReqPaidItem_ChangeClanMark ( struct FBtrDouble ItemIdx, unsigned char IsPaid, int Pattern, int BG, int BL );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ChangeClanMark
	 bool                      eventrfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ClanMarkDupCheck
	 bool                      eventrfReqPaidItem_ClanMarkDupCheck ( unsigned char IsPaid, int Pattern, int BG, int BL );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ClanMarkDupCheck
	 bool                      eventrfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_RelayBroadcast
	 bool                      eventrfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_BroadCast
	 bool                      eventrfReqPaidItem_BroadCast ( struct FBtrDouble ItemIdx, int Command, struct FString Message );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPaidItem_BroadCast
	 bool                      eventrfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_EraseRecord
	 bool                      eventrfReqPaidItem_EraseRecord ( struct FBtrDouble ItemIdx, int Command );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPaidItem_EraseRecord
	 bool                      eventrfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ChangeCharname
	 bool                      eventrfReqPaidItem_ChangeCharname ( struct FBtrDouble ItemIdx, struct FString NewCharname );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ChangeCharname
	 bool                      eventrfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRecvSystemMsg
	 bool                      eventrfAckSendSystemMsg ( int Result );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSendSystemMsg
	 bool                      eventrfReqSendSystemMsg ( unsigned char RecvType, struct FString SendCharName, struct FString RecvCharname, struct FSystemMsgParam MsgInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSendSystemMsg
	 bool                      eventrfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRandomBox_Use
	 bool                      eventrfReqRandomBox_Use ( struct FBtrDouble ItemIdx );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRandomBox_Use
	 bool                      eventrfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangedRoomTitle_FromGM
	 bool                      eventrfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeRoomTitle_GM
	 bool                      eventrfReqChangeRoomTitle_GM ( int RoomNumber, struct FString NewRoomTitle );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChangeRoomTitle_GM
	 bool                      eventrfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGMLeaveRoom
	 bool                      eventrfAckGMEnterRoom ( int Result, int RoomNumber, int UserID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGMEnterRoom
	 bool                      eventrfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckQuestGetAvailableEventList
	 bool                      eventrfReqQuestGetAvailableEventList (  );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqQuestGetAvailableEventList
	 bool                      eventrfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCharBlockInfo
	 bool                      eventrfReqCharBlockInfo (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCharBlockInfo
	 bool                      eventrfReqIsPaidWebzenPCBang ( unsigned char IsPaid );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqIsPaidWebzenPCBang
	 bool                      eventrfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_GetClanWaittingRoomInfo
	 bool                      eventrfReqClanMatch_GetClanWaittingRoomInfo (  ); 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_GetClanWaittingRoomInfo
	 bool                      eventrfAckReturnBotID ( int Result );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckReturnBotID
	 bool                      eventrfReqReturnBotID ( class TArray< int > BotID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqReturnBotID
	 bool                      eventrfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetBotID
	 bool                      eventrfReqGetBotID ( unsigned char AFCount, unsigned char RSACount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetBotID
	 bool                      eventrfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_ChangeRoomSetting
	 bool                      eventrfReqClanMatch_ChangeRoomSetting ( int WaitRoomIndex, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_ChangeRoomSetting
	 bool                      eventrfAckParamCheckSum ( int Result );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckParamCheckSum
	 bool                      eventrfReqParamCheckSum ( struct FString key, struct FString Value );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqParamCheckSum
	 bool                      eventrfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingUseStorageItem
	 bool                      eventrfReqWebzenBillingUseStorageItem ( int StorageSeq, int StorageItemSeq, unsigned char StorageItemType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqWebzenBillingUseStorageItem
	 bool                      eventrfAckWebzenBillingStorageListEnd (  );       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingStorageListEnd
	 bool                      eventrfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingStorageList
	 bool                      eventrfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingStorageListStart
	 bool                      eventrfReqWebzenBillingStorageList ( int Page, int CountForPage, unsigned char Type );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqWebzenBillingStorageList
	 bool                      eventrfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGiftItemByWebzenCash
	 bool                      eventrfReqGiftItemByWebzenCash ( struct FString ReceiverCharName, struct FString Message, int PackageProductSeq, int PriceSeq, int ProductDisplaySeq );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGiftItemByWebzenCash
	 bool                      eventrfReqGiftItemByWebzenCashGP20 ( struct FString ReceiverCharName, struct FString Message, int ProductNo, unsigned char Cointype );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGiftItemByWebzenCashGP20
	 bool                      eventrfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckBuyItemByWebzenCash
	 bool                      eventrfReqBuyItemByWebzenCash ( int PackageProductSeq, int ProductDisplaySeq, int PriceSeq, class TArray< int > ItemIDs, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqBuyItemByWebzenCash
	 bool                      eventrfReqBuyItemByWebzenCashGP20 ( int ProductNo, unsigned char Cointype, struct FBtrDouble ItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqBuyItemByWebzenCashGP20
	 bool                      eventrfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckWebzenShopScriptVersion
	 bool                      eventrfReqWebzenShopScriptVersion (  );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqWebzenShopScriptVersion
	 bool                      eventrfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckWebzenCash
	 bool                      eventrfReqWebzenCash (  );                        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqWebzenCash
	 bool                      eventrfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRegisteredPCBangInfo
	 bool                      eventrfReqRegisteredPCBangInfo (  );              		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRegisteredPCBangInfo
	 bool                      eventrfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRegisterMainPCBang
	 bool                      eventrfReqRegisterMainPCBang (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRegisterMainPCBang
	 bool                      eventrfAckPCBangUserListEnd (  );                 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPCBangUserListEnd
	 bool                      eventrfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPCBangUserList
	 bool                      eventrfAckPCBangUserListStart ( int Result, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPCBangUserListStart
	 bool                      eventrfReqPCBangUserList (  );                    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPCBangUserList
	 bool                      eventrfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDailyQuestNewAvailable
	 bool                      eventrfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqQuestNewAvailable
	 bool                      eventrfAckQuestUpdate ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckQuestUpdate
	 bool                      eventrfReqQuestUpdate ( int UniqueID, int GameRoomNum, class TArray< int > QuestID, class TArray< int > CountPrograss );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqQuestUpdate
	 bool                      eventrfAckQuestListEnd (  );                      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckQuestListEnd
	 bool                      eventrfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckQuestList
	 bool                      eventrfAckQuestListStart ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckQuestListStart
	 bool                      eventrfReqQuestList (  );                         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqQuestList
	 bool                      eventrfAckPermanentRoomInfo ( int Result, int ClanIdx, unsigned char FixedGameMode, unsigned char FixedMaxUserCnt );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckPermanentRoomInfo
	 bool                      eventrfReqPermanentRoomInfo ( int RoomNum );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqPermanentRoomInfo
	 bool                      eventrfAckClanMatch_FoundMatch (  );              		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_FoundMatch
	 bool                      eventrfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_FoundMatch
	 bool                      eventrfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_NotifyStartSearching
	 bool                      eventrfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StartSearching
	 bool                      eventrfReqClanMatch_StartSearching ( int RequestCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_StartSearching
	 bool                      eventrfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckLimitedListInChannel
	 bool                      eventrfReqLimitedListInChannel (  );              		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLimitedListInChannel
	 bool                      eventrfAckRecvInviteGameRoomResult ( int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRecvInviteGameRoomResult
	 bool                      eventrfAckRecvInviteGameRoom ( struct FString RoomUniqueID, int RoomNumber, unsigned char Answer, struct FString InviteCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRecvInviteGameRoom
	 bool                      eventrfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvInviteGameRoom
	 bool                      eventrfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckInviteGameRoom
	 bool                      eventrfReqInviteGameRoom ( struct FString GuestCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqInviteGameRoom
	 bool                      eventrfAckClanMatch_StopSearching (  );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StopSearching
	 bool                      eventrfReqClanMatch_StopSearching (  );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_StopSearching
	 bool                      eventrfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_ChangeLeader
	 bool                      eventrfReqClanMatch_ChangeLeader ( int WaitRoomIdx, int NewLeaderID, struct FString NewLeaderName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_ChangeLeader
	 bool                      eventrfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_WaittingTeamList
	 bool                      eventrfReqClanMatch_WaittingTeamList ( int StartIndex, int ReturnCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_WaittingTeamList
	 bool                      eventrfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString CharName, struct FString Msg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_Chat
	 bool                      eventrfReqClanMatch_Chat ( struct FString Msg );  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_Chat
	 bool                      eventrfAckClanMatch_LeaveNotify ( struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_LeaveNotify
	 bool                      eventrfAckClanMatch_Leave ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_Leave
	 bool                      eventrfReqClanMatch_Leave ( int WaittingID );     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_Leave
	 bool                      eventrfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_MemberList
	 bool                      eventrfReqClanMatch_MemberList (  );              		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_MemberList
	 bool                      eventrfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_JoinNotify
	 bool                      eventrfAckClanMatch_Join ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_Join
	 bool                      eventrfReqClanMatch_Join ( int WaittingID );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_Join
	 bool                      eventrfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_InviteCrewResult
	 bool                      eventrfAckClanMatch_RecvInviteCrew ( int Result, struct FString Inviter );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_RecvInviteCrew
	 bool                      eventrfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_RecvInviteCrew
	 bool                      eventrfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_InviteCrew
	 bool                      eventrfReqClanMatch_InviteCrew ( struct FString Invitee );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_InviteCrew
	 bool                      eventrfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_NotifiyStartCombat
	 bool                      eventrfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StartCombat
	 bool                      eventrfReqClanMatch_StartCombat ( class TArray< int > MapNumArray, int VersusMode );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_StartCombat
	 bool                      eventrfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanMatch_GetReady
	 bool                      eventrfReqClanMatch_GetReady (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanMatch_GetReady
	 bool                      eventrfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAutoChangedTeamUserList
	 bool                      eventrfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetItemFromItemBox
	 bool                      eventrfReqGetItemFromItemBox ( struct FBtrDouble ItemUniqueID, int ItemID, int ItemIDChoose, int PartIDChoose );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetItemFromItemBox
	 bool                      eventrfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckItemListInItemBox
	 bool                      eventrfReqItemListInItemBox ( struct FBtrDouble ItemUniqueID, int BoxItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqItemListInItemBox
	 bool                      eventrfReqRecvForceFailedClientLoading ( int ErrCode );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvForceFailedClientLoading
	 bool                      eventrfAckForceFailedClientLoading ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckForceFailedClientLoading
	 bool                      eventrfReqForceFailedClientLoading ( int FailedUserID, int ErrCode );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqForceFailedClientLoading
	 bool                      eventrfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckStartHolePunching
	 bool                      eventrfReqStartHolePunching ( int GameType, int ReqStartUserID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqStartHolePunching
	 bool                      eventrfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyMyCharInfoToRoomUser
	 bool                      eventrfReqNotifyMyCharInfoToRoomUser (  );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyMyCharInfoToRoomUser
	 bool                      eventrfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyDurabilityZeroItem
	 bool                      eventrfAckChatWispherMyCommunity ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChatWispherMyCommunity
	 bool                      eventrfReqChatWispherMyCommunity ( struct FString SourceCharName, struct FString SenderName, struct FString Msg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChatWispherMyCommunity
	 bool                      eventrfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyDisconnectHostInLoading
	 bool                      eventrfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvForceDisconnected_FromGM
	 bool                      eventrfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckForceDisconnectUser_GM
	 bool                      eventrfReqForceDisconnectUser_GM ( struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqForceDisconnectUser_GM
	 bool                      eventrfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvNotice_FromGM
	 bool                      eventrfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotice_GM
	 bool                      eventrfReqNotice_GM ( unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotice_GM
	 bool                      eventrfAckSpecificChannelUserInfo ( int UID, struct FString UserID, int UserLevels, struct FString ClanName, int ClanPattern, int ClanBG, int ClanBL, int Result, struct FString ErrMsg, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSpecificChannelUserInfo
	 bool                      eventrfReqSpecificChannelUserInfo ( int UserID ); 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSpecificChannelUserInfo
	 bool                      eventrfAckSpecificGameRoomInfo ( int Result, int GameNum, struct FString Title, struct FString MapName, int MapNum, unsigned char UserCount, unsigned char MaxCount, struct FString GameModeName, int ModeNum, unsigned char WeaponLimit, unsigned char IsHardCore, unsigned char Status, struct FString RoomOwnerIP, int GameMinute, struct FString RoomOwnerName, unsigned char IsSpecial, unsigned char IsPassword );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSpecificGameRoomInfo
	 bool                      eventrfReqSpecificGameRoomInfo ( int RoomNum );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSpecificGameRoomInfo
	 bool                      eventrfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChannelUserListInGameRoom
	 bool                      eventrfReqChannelUserListInGameRoom ( int ChannelNum, int StartIndex, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChannelUserListInGameRoom
	 bool                      eventrfReqRecvDeleteFriend ( int Result, struct FString FromCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvDeleteFriend
	 bool                      eventrfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDeleteFriend
	 bool                      eventrfReqDeleteFriend ( class TArray< struct FString > DeleteCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDeleteFriend
	 bool                      eventrfAckGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGameGuardAuthData
	 bool                      eventrfReqGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGameGuardAuthData
	 bool                      eventrfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCheckEquipedWeaponDurability
	 bool                      eventrfReqCheckEquipedWeaponDurability (  );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCheckEquipedWeaponDurability
	 bool                      eventrfReqGamePlay_GetChopper ( int GetChopperUID, class TArray< int > GetChopperAssistUID, float KillXCoord, float KillYCoord, float KillZCoord, int KillPos, int KillWeaponID, int KillWeaponPartID, int KillRange, int KillDamage, int ChopperCallerID, struct FString ChopperCallerName, float ChopperXCoord, float ChopperYCoord, float ChopperZCoord );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_GetChopper
	 bool                      eventrfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAcquirePromotionItems
	 bool                      eventrfAckIsAvailClanURL ( struct FString ClanURL, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckIsAvailClanURL
	 bool                      eventrfReqIsAvailClanURL ( struct FString ClanURL );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqIsAvailClanURL
	 bool                      eventrfAckGetIsHostBlocking ( int Result, unsigned char Blocking );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetIsHostBlocking
	 bool                      eventrfReqGetIsHostBlocking (  );                 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetIsHostBlocking
	 bool                      eventrfAckNotifyHostBlocking ( int Result, unsigned char Blocking );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyHostBlocking
	 bool                      eventrfReqNotifyHostBlocking ( unsigned char Blocking );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyHostBlocking
	 bool                      eventrfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetHolePunchingResult
	 bool                      eventrfReqGetHolePunchingResult (  );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetHolePunchingResult
	 bool                      eventrfReqNotifyRecvDummyForHolePunching ( int ClientUserID, unsigned char Phrase );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyRecvDummyForHolePunching
	 bool                      eventrfReqGamePlay_ChangeWeaponSet ( int UID, int SetNumber );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_ChangeWeaponSet
	 bool                      eventrfReqGamePlay_UpdateDomScore ( int AFScore, int RSAScore );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_UpdateDomScore
	 bool                      eventrfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyRelayServerAddr
	 bool                      eventrfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetUserHostPriorityPoint
	 bool                      eventrfReqGetUserHostPriorityPoint ( int UserID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetUserHostPriorityPoint
	 bool                      eventrfReqUpdateMyHostPriorityPoint ( int HostPriorityPoint );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqUpdateMyHostPriorityPoint
	 bool                      eventrfReqWriteServerLog ( unsigned char Destination, struct FString LogMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqWriteServerLog
	 bool                      eventrfReqGamePlay_SetRoundStartTime ( class TArray< int > UID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_SetRoundStartTime
	 bool                      eventrfReqGamePlay_SetGameStartTime ( class TArray< int > UID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_SetGameStartTime
	 bool                      eventrfReqRecvForceDisconnectUDPFromHost ( int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvForceDisconnectUDPFromHost
	 bool                      eventrfAckForceDisconnectUDPFromHost ( int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckForceDisconnectUDPFromHost
	 bool                      eventrfReqForceDisconnectUDPFromHost ( int UserID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqForceDisconnectUDPFromHost
	 bool                      eventrfReqGamePlay_TakeAPoint ( class TArray< int > TakerUID, unsigned char TakePos, class TArray< float > TakerXCoord, class TArray< float > TakerYCoord, class TArray< float > TakerZCoord, class TArray< int > TakerPos, class TArray< int > TakerWeaponID, class TArray< int > TakerWeaponPartID, class TArray< int > TakerRange );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_TakeAPoint
	 bool                      eventrfReqNotifyChangeRoomState ( unsigned char RoomState );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyChangeRoomState
	 bool                      eventrfReqGamePlay_DefuseBomb ( int DefuserUID, unsigned char DefusePos, float DefuserXCoord, float DefuserYCoord, float DefuserZCoord, int DefuserPos, int DefuserWeaponID, int DefuserWeaponPartID, int DefuserRange );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_DefuseBomb
	 bool                      eventrfReqGamePlay_InstallBomb ( int InstallerUID, unsigned char InstallPos, float InstallerXCoord, float InstallerYCoord, float InstallerZCoord, int InstallerPos, int InstallerWeaponID, int InstallerWeaponPartID, int InstallerRange );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGamePlay_InstallBomb
	 bool                      eventrfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDBCharInfo
	 bool                      eventrfReqDBCharInfo ( struct FString CharName ); 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDBCharInfo
	 bool                      eventrfReqForceNatTypeSetting ( int NatType );    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqForceNatTypeSetting
	 bool                      eventrfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetServerTime
	 bool                      eventrfReqGetServerTime (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetServerTime
	 bool                      eventrfReqLogEndEachRound ( int StartCnt, int EndCnt, int RoundEndType, int RoundEndTime, unsigned char VTeam, unsigned char VTeamAD, int AFScore, int RSAScore, int Round );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLogEndEachRound
	 bool                      eventrfReqLogGetScore ( struct FKillDeathLog KillDeathLogParam, class TArray< int > AssistUIDs, class TArray< unsigned char > AssistScores );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLogGetScore
	 bool                      eventrfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionTradeHistory
	 bool                      eventrfReqAuctionTradeHistory ( int ItemID, int PartID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAuctionTradeHistory
	 bool                      eventrfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSendGift
	 bool                      eventrfReqSendGift ( int ItemID, struct FString RecvCharname, struct FString RecvMessage, unsigned char BuyOption1, unsigned char BuyOption2 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSendGift
	 bool                      eventrfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetAttachedItemFromMemo
	 bool                      eventrfReqGetAttachedItemFromMemo ( int UserID, int MemoIdx, int ItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetAttachedItemFromMemo
	 bool                      eventrfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyNewClanMember
	 bool                      eventrfAckChatClan ( struct FString CharName, struct FString Message, int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChatClan
	 bool                      eventrfReqChatClan ( struct FString Message );    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChatClan
	 bool                      eventrfAckTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckTestDouble
	 bool                      eventrfReqTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqTestDouble
	 bool                      eventrfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyLoadingState
	 bool                      eventrfReqNotifyLoadingState ( unsigned char LoadingState );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyLoadingState
	 bool                      eventrfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckFailedStartGame
	 bool                      eventrfReqFailedStartGame ( int LoadingStep );    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqFailedStartGame
	 bool                      eventrfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSuccessStartGame
	 bool                      eventrfReqSuccessStartGame ( int LoadingStep );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSuccessStartGame
	 bool                      eventrfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanCharPersonelIntro
	 bool                      eventrfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanCharPersonelIntro
	 bool                      eventrfAckClanPersonelIntro ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanPersonelIntro
	 bool                      eventrfReqClanPersonelIntro ( struct FString ClanName, struct FString CharName, struct FString PersonelIntro );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanPersonelIntro
	 bool                      eventrfAckClanChangeInfo ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanChangeInfo
	 bool                      eventrfReqClanChangeInfo ( struct FString ClanName, unsigned char IsRecruit, unsigned char Region, struct FString Keyword, struct FString ClanIntro, struct FString Notice );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanChangeInfo
	 bool                      eventrfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanClose
	 bool                      eventrfReqClanClose ( struct FString ClanName );  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanClose
	 bool                      eventrfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyClanSecession
	 bool                      eventrfAckClanSecession ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanSecession
	 bool                      eventrfReqClanSecession ( struct FString ClanName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanSecession
	 bool                      eventrfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanNews
	 bool                      eventrfReqClanNews ( struct FString ClanName );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanNews
	 bool                      eventrfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyAdjustClanMemberGrade
	 bool                      eventrfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAdjustClanMemberGrade
	 bool                      eventrfReqAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAdjustClanMemberGrade
	 bool                      eventrfAckClanUserListEnd (  );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanUserListEnd
	 bool                      eventrfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanUserList
	 bool                      eventrfAckClanUserListStart ( int Result, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanUserListStart
	 bool                      eventrfReqClanUserList ( struct FString ClanName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanUserList
	 bool                      eventrfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSearchClan
	 bool                      eventrfReqSerachClan ( unsigned char SearchType, struct FString Keyword, unsigned char ClanStatus, unsigned char ClanRegion, int ReqPage );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSerachClan
	 bool                      eventrfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckJoinClanResult
	 bool                      eventrfAckRecvJoinClanResult ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRecvJoinClanResult
	 bool                      eventrfAckRecvJoinClan ( int UserIdx, struct FString CharName, struct FString ReqMsg, unsigned char Permit );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRecvJoinClan
	 bool                      eventrfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvJoinClan
	 bool                      eventrfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckJoinClan
	 bool                      eventrfReqJoinClan ( struct FString ClanName, struct FString ClanManagerName, struct FString Message );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqJoinClan
	 bool                      eventrfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckInviteClanResult
	 bool                      eventrfAckRecvClanInviteResult ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRecvClanInviteResult
	 bool                      eventrfAckRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString InviterMsg, struct FString ClanName, unsigned char Permit );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRecvClanInvite
	 bool                      eventrfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvClanInvite
	 bool                      eventrfAckInviteClan ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckInviteClan
	 bool                      eventrfReqInviteClan ( struct FString CharName, struct FString InviteMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqInviteClan
	 bool                      eventrfAckClanInfo ( struct FClanInfo stClanInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClanInfo
	 bool                      eventrfReqClanInfo ( struct FString ClanName );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClanInfo
	 bool                      eventrfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCreateClan
	 bool                      eventrfReqCreateClan ( struct FString ClanName, struct FString ClanURL, struct FString ClanIntro, struct FString ClanKeyword, unsigned char ClanRegion );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCreateClan
	 bool                      eventrfAckDupCheckClanName ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDupCheckClanName
	 bool                      eventrfReqDupCheckClanName ( struct FString ClanNam );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDupCheckClanName
	 bool                      eventrfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSellShopItemInfo
	 bool                      eventrfReqSellShopItemInfo ( struct FBtrDouble UniqueItemID, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSellShopItemInfo
	 bool                      eventrfAckGameOverEnd ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGameOverEnd
	 bool                      eventrfReqGameOverEnd (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGameOverEnd
	 bool                      eventrfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionItemListCount
	 bool                      eventrfReqAuctionItemListCount ( unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAuctionItemListCount
	 bool                      eventrfAckServerTime ( int Time );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckServerTime
	 bool                      eventrfReqServerTime (  );                        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqServerTime
	 bool                      eventrfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEntryQSlotIDList
	 bool                      eventrfReqEntryQSlotIDList ( int UserNum );       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEntryQSlotIDList
	 bool                      eventrfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEntryQSlotUniqueIDList
	 bool                      eventrfReqEntryQSlotUniqueIDList ( int UserNum ); 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEntryQSlotUniqueIDList
	 bool                      eventrfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionBidding
	 bool                      eventrfReqAuctionBidding ( int UniqueID, int BiddingPrice );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAuctionBidding
	 bool                      eventrfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionInstantlyBuying
	 bool                      eventrfReqAuctionInstantlyBuying ( int UniqueID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAuctionInstantlyBuying
	 bool                      eventrfAckAuctionItemListEnd ( unsigned char Section );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionItemListEnd
	 bool                      eventrfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionItemList
	 bool                      eventrfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionItemListStart
	 bool                      eventrfReqAuctionItemList ( unsigned char Section, struct FString Keyword, int ItemRank, unsigned char ItemClassfy, unsigned char IsAvailable, int PageNum, int Count, int SortOpt );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAuctionItemList
	 bool                      eventrfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionMyItemCancel
	 bool                      eventrfReqAuctionMyItemCancel ( int UniqueID );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAuctionMyItemCancel
	 bool                      eventrfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAuctionMyItemRegister
	 bool                      eventrfReqAuctionMyItemRegister ( struct FBtrDouble UniqueID, int ItemCount, int BeginPrice, int PeriodHour, int InstantlyBuyingPrice );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAuctionMyItemRegister
	 bool                      eventrfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckMyMoney
	 bool                      eventrfReqMyMoney (  );                           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqMyMoney
	 bool                      eventrfAckUpdateQSlot ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckUpdateQSlot
	 bool                      eventrfReqUpdateQSlot ( int QSlotID, struct FString QSlotName, struct FBtrDouble MWItemID, struct FBtrDouble PistolItemID, struct FBtrDouble TWItemID1, struct FBtrDouble TWItemID2, int Skill1, int Skill2, int Skill3, int Skill4 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqUpdateQSlot
	 bool                      eventrfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckQSlotList
	 bool                      eventrfReqQSlotList (  );                         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqQSlotList
	 bool                      eventrfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRepairItem
	 bool                      eventrfReqRepairItem ( class TArray< struct FBtrDouble > UniqueItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRepairItem
	 bool                      eventrfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRepairCost
	 bool                      eventrfReqRepairCost ( class TArray< struct FBtrDouble > UniqueItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRepairCost
	 bool                      eventrfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckUpdateWeaponDurability
	 bool                      eventrfReqUpdateWeaponDurability ( int TotalPlayTime, class TArray< int > OwnerID, class TArray< int > Number, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > UsingSec, class TArray< int > UsingRoundInSD );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqUpdateWeaponDurability
	 bool                      eventrfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckModifyWeapon
	 bool                      eventrfReqModifyWeapon ( struct FBtrDouble UniqueID, int AddPartID, int PaintID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqModifyWeapon
	 bool                      eventrfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSellShopItem
	 bool                      eventrfReqSellShopItem ( struct FBtrDouble ItemUniqueID, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSellShopItem
	 bool                      eventrfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckBuyShopItem
	 bool                      eventrfReqBuyShopItem ( int ItemID, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqBuyShopItem
	 bool                      eventrfAckShopItemListEnd (  );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckShopItemListEnd
	 bool                      eventrfAckShopItemList ( class TArray< int > ItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckShopItemList
	 bool                      eventrfAckShopItemListStart ( int Count );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckShopItemListStart
	 bool                      eventrfReqShopItemList (  );                      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqShopItemList
	 bool                      eventrfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckForceGameOver
	 bool                      eventrfReqForceGameOver (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqForceGameOver
	 bool                      eventrfAckGiveSkill ( int SkillID, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGiveSkill
	 bool                      eventrfReqGiveSkill (  );                         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGiveSkill
	 bool                      eventrfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyExpiredItemIDs
	 bool                      eventrfReqNotifyExpiredItemIDs (  );              		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyExpiredItemIDs
	 bool                      eventrfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyExpiredSkillIDs
	 bool                      eventrfReqNotifyExpiredSkillIDs (  );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyExpiredSkillIDs
	 bool                      eventrfAckNotifyChangedSkillState ( int UserID, class TArray< int > SkillIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyChangedSkillState
	 bool                      eventrfReqNotifyChangedSkillState (  );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyChangedSkillState
	 bool                      eventrfAckNotifyChangedItemState ( int UserID, class TArray< int > ItemIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyChangedItemState
	 bool                      eventrfReqNotifyChangedItemState (  );            		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyChangedItemState
	 bool                      eventrfAckConfirmSkillChanged ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckConfirmSkillChanged
	 bool                      eventrfReqConfirmSkillChanged (  );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqConfirmSkillChanged
	 bool                      eventrfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEquipSkill
	 bool                      eventrfReqEquipSkill ( int SkillID, int SkillUniqueID, unsigned char NewSlotPosition );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEquipSkill
	 bool                      eventrfAckUserSkillListEnd (  );                  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckUserSkillListEnd
	 bool                      eventrfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckUserSkillList
	 bool                      eventrfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckUserSkillListStart
	 bool                      eventrfReqUserSkillList ( int UserID );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqUserSkillList
	 bool                      eventrfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDelMemo
	 bool                      eventrfReqDelMemo ( class TArray< int > MemoIdx, unsigned char Type );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDelMemo
	 bool                      eventrfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckReadMemo
	 bool                      eventrfReqReadMemo ( int MemoIdx );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqReadMemo
	 bool                      eventrfAckEndMemoList (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEndMemoList
	 bool                      eventrfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckMemoList
	 bool                      eventrfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckStartMemoList
	 bool                      eventrfReqMemoList ( unsigned char Type, unsigned char MemoType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqMemoList
	 bool                      eventrfReqRecvMemo ( struct FString cnameFrom, unsigned char MemoType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvMemo
	 bool                      eventrfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSendMemo
	 bool                      eventrfReqSendMemo ( class TArray< struct FString > cnames, struct FString Msg, int ItemUID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSendMemo
	 bool                      eventrfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvChatWispher
	 bool                      eventrfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChatWispher
	 bool                      eventrfReqChatWispher ( struct FString CharName, struct FString Message );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChatWispher
	 bool                      eventrfAckRemoveBlockUserList ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRemoveBlockUserList
	 bool                      eventrfReqRemoveBlockUserList ( struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRemoveBlockUserList
	 bool                      eventrfAckAddBlockUserList ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckAddBlockUserList
	 bool                      eventrfReqAddBlockUserList ( struct FString CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqAddBlockUserList
	 bool                      eventrfAckBlockUserListEnd (  );                  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckBlockUserListEnd
	 bool                      eventrfAckBlockUserList ( class TArray< struct FString > CharName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckBlockUserList
	 bool                      eventrfAckBlockUserListStart ( int Result, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckBlockUserListStart
	 bool                      eventrfReqBlockUserList (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqBlockUserList
	 bool                      eventrfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCompleteFriendInvite
	 bool                      eventrfAckConfirmFriendInvite ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckConfirmFriendInvite
	 bool                      eventrfReqConfirmFriendInvite ( int ReqUserID, struct FString ReqedCharname, unsigned char IsPermit );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqConfirmFriendInvite
	 bool                      eventrfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRecvFriendInvite
	 bool                      eventrfAckSendFriendInvite ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSendFriendInvite
	 bool                      eventrfReqSendFriendInvite ( int InviteUserID, struct FString InviteName, struct FString InviteMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSendFriendInvite
	 bool                      eventrfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChatNormal
	 bool                      eventrfReqChatNormal ( struct FString Message );  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChatNormal
	 bool                      eventrfAckDummy ( int Result );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDummy
	 bool                      eventrfReqDummy ( int DelayCheck );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDummy
	 bool                      eventrfAckConfirmItemChanged ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckConfirmItemChanged
	 bool                      eventrfReqConfirmItemChanged (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqConfirmItemChanged
	 bool                      eventrfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEquipItem
	 bool                      eventrfReqEquipItem ( int ItemID, struct FBtrDouble UniqueID, int SlotPosition );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEquipItem
	 bool                      eventrfAckItemListEnd (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckItemListEnd
	 bool                      eventrfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckItemList
	 bool                      eventrfAckItemListStart ( int Count, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckItemListStart
	 bool                      eventrfReqItemList ( int UID );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqItemList
	 bool                      eventrfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEntrySkillList
	 bool                      eventrfReqEntrySkillList ( int UserID );          		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEntrySkillList
	 bool                      eventrfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEntryItemList
	 bool                      eventrfReqEntryItemList ( int UserID );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEntryItemList
	 bool                      eventrfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeUserState
	 bool                      eventrfReqChangeUserState ( unsigned char NewState, unsigned char CheckPlaying );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChangeUserState
	 bool                      eventrfAckExteriorRoomState (  );                 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomState
	 bool                      eventrfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomState
	 bool                      eventrfAckExteriorRoomUserCount (  );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomUserCount
	 bool                      eventrfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomUserCount
	 bool                      eventrfAckExteriorRoomInfo (  );                  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomInfo
	 bool                      eventrfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomInfo
	 bool                      eventrfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetBootyChoose
	 bool                      eventrfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGetBooty
	 bool                      eventrfReqGetBooty ( int RoomNumber );            		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGetBooty
	 bool                      eventrfAckSetUserBootySeedValue ( int UserID, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSetUserBootySeedValue
	 bool                      eventrfReqSetUserBootySeedValue ( int UserID, int SeedValue );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSetUserBootySeedValue
	 bool                      eventrfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeRoomSetting
	 bool                      eventrfReqChangeRoomSetting ( struct FGameRoomInfo RoomInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChangeRoomSetting
	 bool                      eventrfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyLevelUp
	 bool                      eventrfAckClientUdpInfoList ( int Result, struct FString ErrMsg, class TArray< int > UID, class TArray< struct FString > IP, class TArray< int > Port );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckClientUdpInfoList
	 bool                      eventrfReqClientUdpInfoList ( int GameNum );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqClientUdpInfoList
	 bool                      eventrfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRegisterOtherUdpInfo
	 bool                      eventrfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRegisterMyUdpInfo
	 bool                      eventrfReqRegisterMyUdpInfo ( unsigned char IsHost, struct FString IP, int Port, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRegisterMyUdpInfo
	 bool                      eventrfAckNotifyClientJoinTime ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckNotifyClientJoinTime
	 bool                      eventrfReqNotifyClientJoinTime ( int JoinedClientID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqNotifyClientJoinTime
	 bool                      eventrfAckChangeNewGuest ( struct FString HostIP );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeNewGuest
	 bool                      eventrfAckChangeHost ( unsigned char ClientNum ); 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeHost
	 bool                      eventrfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckDisconnectGame
	 bool                      eventrfReqDisconnectGame (  );                    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqDisconnectGame
	 bool                      eventrfAckConnectGame ( int UserID, int Result ); 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckConnectGame
	 bool                      eventrfReqConnectGame (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqConnectGame
	 bool                      eventrfReqRelayServerOff (  );                    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRelayServerOff
	 bool                      eventrfReqRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRelayServerOn
	 bool                      eventrfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGameOver
	 bool                      eventrfReqGameOver ( int UID, int GameRoomNumber );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGameOver
	 bool                      eventrfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckIsGameRoomPlaying
	 bool                      eventrfReqIsGameRoomPlaying ( int GameRoomNum );  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqIsGameRoomPlaying
	 bool                      eventrfAckGameRoomDestroy ( int GameRoomNum );    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGameRoomDestroy
	 bool                      eventrfAckChangeRoomMaxNum ( int GameNum, int Number, int TeamNumber, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeRoomMaxNum
	 bool                      eventrfReqChangeRoomMaxNum ( int GameNum, int UID, int Number, int TeamNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChangeRoomMaxNum
	 bool                      eventrfAckUpdateScoreResult ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckUpdateScoreResult
	 bool                      eventrfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckUpdateScore
	 bool                      eventrfReqUpdateScore ( int GameNumber, class TArray< int > UserIDs, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > Points, class TArray< int > Scores, class TArray< int > TeamScores, class TArray< int > RoundJoin, class TArray< int > TimeJoin, int Playtime, unsigned char GameEndType, class TArray< struct FString > UserNames );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqUpdateScore
	 bool                      eventrfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckStartGame
	 bool                      eventrfReqStartGame ( int GameNumber );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqStartGame
	 bool                      eventrfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGameHostInfo
	 bool                      eventrfReqGameHostInfo ( int GameNumber );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGameHostInfo
	 bool                      eventrfAckIsHostAvailable ( int Result );         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckIsHostAvailable
	 bool                      eventrfReqIsHostAvailable ( struct FString MyIp, int CPUGrade, int RamGrade, int VGAGrade, int VGARam );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqIsHostAvailable
	 bool                      eventrfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeTeam
	 bool                      eventrfReqChangeTeam ( int TeamNum );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChangeTeam
	 bool                      eventrfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeRoomOwner
	 bool                      eventrfReqChangeRoomOwner ( int GameNum, int UID, int NewOwner );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChangeRoomOwner
	 bool                      eventrfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChangeGameMode
	 bool                      eventrfReqChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChangeGameMode
	 bool                      eventrfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckBanUser
	 bool                      eventrfReqBanUser ( int GameNum, int UID, int BanUID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqBanUser
	 bool                      eventrfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckSelectMap
	 bool                      eventrfReqSelectMap ( int GameNum, int UID, struct FString MapName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqSelectMap
	 bool                      eventrfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckGameRoomInfo
	 bool                      eventrfReqGameRoomInfo ( int GameNum, int UID );  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqGameRoomInfo
	 bool                      eventrfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCreateGameRoom
	 bool                      eventrfReqCreateGameRoom ( struct FGameRoomInfo NetRoomInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCreateGameRoom
	 bool                      eventrfAckExceedMaxUser (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckExceedMaxUser
	 bool                      eventrfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckLeaveRoom
	 bool                      eventrfReqLeaveRoom ( int Num );                  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLeaveRoom
	 bool                      eventrfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRoomUserList
	 bool                      eventrfReqRoomUserList ( int GameNum );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRoomUserList
	 bool                      eventrfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEnterRoom
	 bool                      eventrfReqEnterRoom ( int GameNum, struct FString Password, unsigned char RoomEnterType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEnterRoom
	 bool                      eventrfAckRoomListEnd (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRoomListEnd
	 bool                      eventrfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRoomList
	 bool                      eventrfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckRoomListStart
	 bool                      eventrfReqRoomList ( int id, int StartIndex, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqRoomList
	 bool                      eventrfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChannelUserList
	 bool                      eventrfReqChannelUserList ( int id, int StartIndex, int Count );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChannelUserList
	 bool                      eventrfAckLeaveChannel ( int Result, struct FString UserID, int UID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckLeaveChannel
	 bool                      eventrfReqLeaveChannel ( int id );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLeaveChannel
	 bool                      eventrfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckEnterChannel
	 bool                      eventrfReqEnterChannel ( int id );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqEnterChannel
	 bool                      eventrfAckChannelList ( class TArray< int > id, class TArray< struct FString > Title, class TArray< int > CurUser, class TArray< int > MaxUser );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckChannelList
	 bool                      eventrfReqChannelList ( int bChannelType );       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqChannelList
	 bool                      eventrfAckFriendListEnd (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckFriendListEnd
	 bool                      eventrfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckFriendList
	 bool                      eventrfAckFriendListStart ( int Result, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckFriendListStart
	 bool                      eventrfReqFriendList (  );                        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqFriendList
	 bool                      eventrfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckCharInfo
	 bool                      eventrfReqCharInfo (  );                          		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqCharInfo
	 bool                      eventrfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckLogin2
	 bool                      eventrfReqLogin2 ( struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, struct FString Guid, int UserType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLogin2
	 bool                      eventrfAckStartNatDiag ( int NatType );           		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckStartNatDiag
	 bool                      eventrfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqStartNatDiag
	 bool                      eventrfReqForceLogoutByOwner (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqForceLogoutByOwner
	 bool                      eventrfAckLogin ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, struct FCharInfo btCharInfo );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckLogin
	 bool                      eventrfReqLogin ( struct FString id );            		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqLogin
	 bool                      eventrfAckHash ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfAckHash
	 bool                      eventrfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.rfReqHash
	 void                      eventOnError ( int ErrCode );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.OnError
	 void                      eventOnClose ( int ErrCode );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.OnClose
	 void                      eventOnConnect ( int ErrCode );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Channel.OnConnect
	 bool                      Close (  );                                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.Close
	 bool                      Connect ( struct FString sIpaddr, int nPort );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.Connect
	 bool                      InitNetwork (  );                                 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Channel.InitNetwork

	// Public Imports
	UBTTcpLink_Channel(class UBTTcpLink_Channel const &);
	class UBTTcpLink_Channel &  operator=(class UBTTcpLink_Channel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class BatteryNet.BTTcpHandler_DS_Script_Interface
class DLL_IMPORT UBTTcpHandler_DS_Script_Interface : public UBTTcpLink_Channel
{
public:
	class UwMatchMaker*                                MM;                                               		// 0x002C ( 0x0004 ) 
	class UwGameManager*                               GameMgr;                                          		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 void                      eventSetGameManager ( class UwGameManager* pgameMgr );		// [ FUNC_Event ] BatteryNet.BTTcpHandler_DS_Script_Interface.SetGameManager
	 void                      eventSetMatchMaker ( class UwMatchMaker* pMM );   		// [ FUNC_Event ] BatteryNet.BTTcpHandler_DS_Script_Interface.SetMatchMaker

	// Public Imports
	UBTTcpHandler_DS_Script_Interface(class UBTTcpHandler_DS_Script_Interface const &);
	class UBTTcpHandler_DS_Script_Interface &  operator=(class UBTTcpHandler_DS_Script_Interface const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class BatteryNet.BTTcpHandler_DS
class DLL_IMPORT UBTTcpHandler_DS : public UBTTcpLink_Channel_DS
{
public:
	unsigned char                                      _0x0050[ 0x08 ];                                  		// 0x0050 ( 0x0008 )

	// Public Imports
	UBTTcpHandler_DS(class UBTTcpHandler_DS const &);
	UBTTcpHandler_DS(void);
	class UBTTcpHandler_DS &  operator=(class UBTTcpHandler_DS const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class BatteryNet.BTNetInterfaceTcp
class DLL_IMPORT UBTNetInterfaceTcp : public UBTNetInterface
{
public:

	// Public Imports
	UBTNetInterfaceTcp(class UBTNetInterfaceTcp const &);
	UBTNetInterfaceTcp(void);
	class UBTNetInterfaceTcp &  operator=(class UBTNetInterfaceTcp const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class BatteryNet.BTDataTransferClientLink
class DLL_IMPORT UBTDataTransferClientLink : public UObject
{
public:
	struct FString                                     ChannelServerIP;                                  		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ServerDataTransferPort;                           		// 0x0038 ( 0x0004 ) 
	class UBTNetGameData*                              NetGameData;                                      		// 0x003C ( 0x0004 ) 
	int                                                iCompleteCheck;                                   		// 0x0040 ( 0x0004 ) 

	// UScript Functions
	 void                      eventOnReceivedParamDataComplete ( int Result );  		// [ FUNC_Event ] BatteryNet.BTDataTransferClientLink.OnReceivedParamDataComplete
	 bool                      Close (  );                                       		// [ FUNC_Native ] BatteryNet.BTDataTransferClientLink.Close
	 bool                      RequestData (  );                                 		// [ FUNC_Native ] BatteryNet.BTDataTransferClientLink.RequestData
	 bool                      InitNetwork ( struct FString ServerIP, int serverPort );		// [ FUNC_Native ] BatteryNet.BTDataTransferClientLink.InitNetwork

	// Public Imports
	UBTDataTransferClientLink(class UBTDataTransferClientLink const &);
	class UBTDataTransferClientLink &  operator=(class UBTDataTransferClientLink const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class BatteryNet.BTTcpLink_Login
class DLL_IMPORT UBTTcpLink_Login : public UObject
{
public:

	// UScript Functions
	 bool                      sfAckLoginWithIndonesia ( int Result );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLoginWithIndonesia
	 bool                      sfReqLoginWithIndonesia ( struct FString HashValue );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLoginWithIndonesia
	 bool                      sfAckLoginWithGlobal ( int Result );              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLoginWithGlobal
	 bool                      sfReqLoginWithGlobal ( struct FString G_AccountID, struct FString G_GUID, struct FString G_AuthKey, int UserType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLoginWithGlobal
	 bool                      sfAckLoginWithThailand ( int Result );            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLoginWithThailand
	 bool                      sfReqLoginWithThailand ( struct FString USN, int BloodDisplayType, int PCBangType, struct FString UnixTimeStamp, struct FString HashValue, unsigned char Sex );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLoginWithThailand
	 bool                      sfAckLogOut ( unsigned char Result, unsigned char Reason );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLogOut
	 bool                      sfReqLogOut ( unsigned char Reason );             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLogOut
	 bool                      sfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLoginWithTencentAuth
	 bool                      sfReqLoginWithTencentAuth ( struct FString AccountID, class TArray< unsigned char > Signature );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLoginWithTencentAuth
	 bool                      sfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckTencent_AASInfo
	 bool                      sfAckEventNotify ( int Type );                    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckEventNotify
	 bool                      sfReqEventNotify (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqEventNotify
	 bool                      sfAckErrorReportServerAddr ( struct FString Addr, int Port );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckErrorReportServerAddr
	 bool                      sfReqErrorReportServerAddr (  );                  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqErrorReportServerAddr
	 bool                      sfAckClientChecksum ( int Result );               		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckClientChecksum
	 bool                      sfReqClientChecksum ( struct FString Key1, struct FBtrDouble Key2 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqClientChecksum
	 bool                      sfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckClientChallenge
	 bool                      sfReqClientChallenge (  );                        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqClientChallenge
	 bool                      sfAckServerTime ( int Time );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckServerTime
	 bool                      sfReqServerTime (  );                             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqServerTime
	 bool                      sfAckGetCharBlockInfo ( int Result, unsigned char IsAccountBlock, unsigned char IsChattingBlock, struct FBtrDouble ChattingBlockEndTime, class TArray< struct FString > BlockedItemName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckGetCharBlockInfo
	 bool                      sfReqGetCharBlockInfo (  );                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqGetCharBlockInfo
	 bool                      sfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckRegisterMainPCBang
	 bool                      sfReqRegisterMainPCBang (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqRegisterMainPCBang
	 bool                      sfAckPCBangUserListEnd (  );                      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckPCBangUserListEnd
	 bool                      sfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckPCBangUserList
	 bool                      sfAckPCBangUserListStart ( int Result, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckPCBangUserListStart
	 bool                      sfReqPCBangUserList (  );                         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqPCBangUserList
	 bool                      sfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckRegisteredPCBangInfo
	 bool                      sfReqRegisteredPCBangInfo (  );                   		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqRegisteredPCBangInfo
	 bool                      sfAckCharInfo ( int Result, struct FString CharName, int Level, int Exp, struct FString ClanName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckCharInfo
	 bool                      sfReqCharInfo ( struct FString CharName );        		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqCharInfo
	 bool                      sfReqForceLogoutByOwner (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqForceLogoutByOwner
	 bool                      sfReqKeepAlive (  );                              		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqKeepAlive
	 bool                      sfAckMaxUserExceed (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckMaxUserExceed
	 bool                      sfAckClanMemberListFromClientEnd (  );            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckClanMemberListFromClientEnd
	 bool                      sfAckClanMemberListFromClient ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< struct FString > ServerName, class TArray< struct FString > ServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< unsigned char > CurPos, class TArray< int > ChannelNum, class TArray< struct FString > ChannelNickName, class TArray< int > GameRoomNum );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckClanMemberListFromClient
	 bool                      sfAckClanMemberListFromClientStart ( int Result, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckClanMemberListFromClientStart
	 bool                      sfReqClanMemberListFromClient (  );               		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqClanMemberListFromClient
	 bool                      sfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLoginWithWZAuth
	 bool                      sfReqLoginWithWZAuth ( struct FString AccountID, struct FString Guid, struct FString AuthKey );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLoginWithWZAuth
	 bool                      sfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckProcessPreLoginUser
	 bool                      sfReqProcessPreLoginUser ( struct FString CharName, unsigned char Type );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqProcessPreLoginUser
	 bool                      sfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLoginInHouseTest
	 bool                      sfReqLoginInHouseTest ( struct FString UserName, struct FString Password, struct FString Guid );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLoginInHouseTest
	 bool                      sfAckAdvertisement ( int Result, unsigned char Type, struct FString Address );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckAdvertisement
	 bool                      sfReqAdvertisement (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqAdvertisement
	 bool                      sfAckUserDetailInfo ( int Result, struct FString UserName, struct FString ClanName, int Ranking, int MatchNum, int WinNum, int LoseNum, int CurrentEXP, int NextExp, int ForcedDisconnectedNum, int PrimaryWeaponID, int SubWeaponID, int Point );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckUserDetailInfo
	 bool                      sfReqUserDetailInfo ( int UserID, struct FString UserName );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqUserDetailInfo
	 bool                      sfAckFriendsListEnd (  );                         		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckFriendsListEnd
	 bool                      sfAckFriendsList ( unsigned char ListType, class TArray< struct FString > UserName, class TArray< unsigned char > IsLogOn, class TArray< int > CMarkPattern, class TArray< int > CMarkBG, class TArray< int > CMarkBL, class TArray< struct FString > ClanName, class TArray< int > Level );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckFriendsList
	 bool                      sfAckFriendsListStart ( int Result, int TotalCount );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckFriendsListStart
	 bool                      sfReqFriendsList (  );                            		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqFriendsList
	 bool                      sfAckConnectChannelServer ( struct FString SessionKey, int TimeStamp );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckConnectChannelServer
	 bool                      sfReqConnectChannelServer ( struct FString ServerIP, int serverPort );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqConnectChannelServer
	 bool                      sfAckServerList ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckServerList
	 bool                      sfReqServerList (  );                             		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqServerList
	 bool                      sfAckCreateChar ( int Success, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckCreateChar
	 bool                      sfReqCreateChar ( struct FString CharName, int HeadItemID, int HelmetItemID, int AccesoItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqCreateChar
	 bool                      sfAckAccesItemTypeList ( class TArray< struct FString > AccesoItemName, class TArray< int > AccesoItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckAccesItemTypeList
	 bool                      sfReqAccesItemTypeList (  );                      		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqAccesItemTypeList
	 bool                      sfAckHelmetItemTypeList ( class TArray< struct FString > HelmetItemName, class TArray< int > HelmetItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckHelmetItemTypeList
	 bool                      sfReqHelmetItemTypeList (  );                     		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqHelmetItemTypeList
	 bool                      sfAckHeadItemTypeList ( class TArray< int > HeadItemID );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckHeadItemTypeList
	 bool                      sfReqHeadItemTypeList (  );                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqHeadItemTypeList
	 bool                      sfAckLogin ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckLogin
	 bool                      sfReqLogin ( struct FString PortalID );           		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqLogin
	 bool                      sfAckExceedMaxUser (  );                          		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckExceedMaxUser
	 bool                      sfAckHash ( int Result, struct FString ErrMsg );  		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfAckHash
	 bool                      sfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 );		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.sfReqHash
	 bool                      eventrfAckLoginWithIndonesia ( int Result );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLoginWithIndonesia
	 bool                      eventrfReqLoginWithIndonesia ( struct FString HashValue );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLoginWithIndonesia
	 bool                      eventrfAckLoginWithGlobal ( int Result );         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLoginWithGlobal
	 bool                      eventrfReqLoginWithGlobal ( struct FString G_AccountID, struct FString G_GUID, struct FString G_AuthKey, int UserType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLoginWithGlobal
	 bool                      eventrfAckLoginWithThailand ( int Result );       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLoginWithThailand
	 bool                      eventrfReqLoginWithThailand ( struct FString USN, int BloodDisplayType, int PCBangType, struct FString UnixTimeStamp, struct FString HashValue, unsigned char Sex );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLoginWithThailand
	 bool                      eventrfAckLogOut ( unsigned char Result, unsigned char Reason );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLogOut
	 bool                      eventrfReqLogOut ( unsigned char Reason );        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLogOut
	 bool                      eventrfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLoginWithTencentAuth
	 bool                      eventrfReqLoginWithTencentAuth ( struct FString AccountID, class TArray< unsigned char > Signature );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLoginWithTencentAuth
	 bool                      eventrfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckTencent_AASInfo
	 bool                      eventrfAckEventNotify ( int Type );               		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckEventNotify
	 bool                      eventrfReqEventNotify (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqEventNotify
	 bool                      eventrfAckErrorReportServerAddr ( struct FString Addr, int Port );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckErrorReportServerAddr
	 bool                      eventrfReqErrorReportServerAddr (  );             		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqErrorReportServerAddr
	 bool                      eventrfAckClientChecksum ( int Result );          		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckClientChecksum
	 bool                      eventrfReqClientChecksum ( struct FString Key1, struct FBtrDouble Key2 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqClientChecksum
	 bool                      eventrfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckClientChallenge
	 bool                      eventrfReqClientChallenge (  );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqClientChallenge
	 bool                      eventrfAckServerTime ( int Time );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckServerTime
	 bool                      eventrfReqServerTime (  );                        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqServerTime
	 bool                      eventrfAckGetCharBlockInfo ( int Result, unsigned char IsAccountBlock, unsigned char IsChattingBlock, struct FBtrDouble ChattingBlockEndTime, class TArray< struct FString > BlockedItemName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckGetCharBlockInfo
	 bool                      eventrfReqGetCharBlockInfo (  );                  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqGetCharBlockInfo
	 bool                      eventrfAckRegisterMainPCBang ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckRegisterMainPCBang
	 bool                      eventrfReqRegisterMainPCBang (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqRegisterMainPCBang
	 bool                      eventrfAckPCBangUserListEnd (  );                 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckPCBangUserListEnd
	 bool                      eventrfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckPCBangUserList
	 bool                      eventrfAckPCBangUserListStart ( int Result, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckPCBangUserListStart
	 bool                      eventrfReqPCBangUserList (  );                    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqPCBangUserList
	 bool                      eventrfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckRegisteredPCBangInfo
	 bool                      eventrfReqRegisteredPCBangInfo (  );              		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqRegisteredPCBangInfo
	 bool                      eventrfAckCharInfo ( int Result, struct FString CharName, int Level, int Exp, struct FString ClanName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckCharInfo
	 bool                      eventrfReqCharInfo ( struct FString CharName );   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqCharInfo
	 bool                      eventrfReqForceLogoutByOwner (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqForceLogoutByOwner
	 bool                      eventrfReqKeepAlive (  );                         		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqKeepAlive
	 bool                      eventrfAckMaxUserExceed (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckMaxUserExceed
	 bool                      eventrfAckClanMemberListFromClientEnd (  );       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckClanMemberListFromClientEnd
	 bool                      eventrfAckClanMemberListFromClient ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< struct FString > ServerName, class TArray< struct FString > ServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< unsigned char > CurPos, class TArray< int > ChannelNum, class TArray< struct FString > ChannelNickName, class TArray< int > GameRoomNum );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckClanMemberListFromClient
	 bool                      eventrfAckClanMemberListFromClientStart ( int Result, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckClanMemberListFromClientStart
	 bool                      eventrfReqClanMemberListFromClient (  );          		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqClanMemberListFromClient
	 bool                      eventrfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLoginWithWZAuth
	 bool                      eventrfReqLoginWithWZAuth ( struct FString AccountID, struct FString Guid, struct FString AuthKey );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLoginWithWZAuth
	 bool                      eventrfAckProcessPreLoginUser ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckProcessPreLoginUser
	 bool                      eventrfReqProcessPreLoginUser ( struct FString CharName, unsigned char Type );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqProcessPreLoginUser
	 bool                      eventrfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLoginInHouseTest
	 bool                      eventrfReqLoginInHouseTest ( struct FString UserName, struct FString Password, struct FString Guid );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLoginInHouseTest
	 bool                      eventrfAckAdvertisement ( int Result, unsigned char Type, struct FString Address );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckAdvertisement
	 bool                      eventrfReqAdvertisement (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqAdvertisement
	 bool                      eventrfAckUserDetailInfo ( int Result, struct FString UserName, struct FString ClanName, int Ranking, int MatchNum, int WinNum, int LoseNum, int CurrentEXP, int NextExp, int ForcedDisconnectedNum, int PrimaryWeaponID, int SubWeaponID, int Point );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckUserDetailInfo
	 bool                      eventrfReqUserDetailInfo ( int UserID, struct FString UserName );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqUserDetailInfo
	 bool                      eventrfAckFriendsListEnd (  );                    		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckFriendsListEnd
	 bool                      eventrfAckFriendsList ( unsigned char ListType, class TArray< struct FString > UserName, class TArray< unsigned char > IsLogOn, class TArray< int > CMarkPattern, class TArray< int > CMarkBG, class TArray< int > CMarkBL, class TArray< struct FString > ClanName, class TArray< int > Level );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckFriendsList
	 bool                      eventrfAckFriendsListStart ( int Result, int TotalCount );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckFriendsListStart
	 bool                      eventrfReqFriendsList (  );                       		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqFriendsList
	 bool                      eventrfAckConnectChannelServer ( struct FString SessionKey, int TimeStamp );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckConnectChannelServer
	 bool                      eventrfReqConnectChannelServer ( struct FString ServerIP, int serverPort );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqConnectChannelServer
	 bool                      eventrfAckServerList ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckServerList
	 bool                      eventrfReqServerList (  );                        		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqServerList
	 bool                      eventrfAckCreateChar ( int Success, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckCreateChar
	 bool                      eventrfReqCreateChar ( struct FString CharName, int HeadItemID, int HelmetItemID, int AccesoItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqCreateChar
	 bool                      eventrfAckAccesItemTypeList ( class TArray< struct FString > AccesoItemName, class TArray< int > AccesoItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckAccesItemTypeList
	 bool                      eventrfReqAccesItemTypeList (  );                 		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqAccesItemTypeList
	 bool                      eventrfAckHelmetItemTypeList ( class TArray< struct FString > HelmetItemName, class TArray< int > HelmetItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckHelmetItemTypeList
	 bool                      eventrfReqHelmetItemTypeList (  );                		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqHelmetItemTypeList
	 bool                      eventrfAckHeadItemTypeList ( class TArray< int > HeadItemID );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckHeadItemTypeList
	 bool                      eventrfReqHeadItemTypeList (  );                  		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqHeadItemTypeList
	 bool                      eventrfAckLogin ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckLogin
	 bool                      eventrfReqLogin ( struct FString PortalID );      		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqLogin
	 bool                      eventrfAckExceedMaxUser (  );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckExceedMaxUser
	 bool                      eventrfAckHash ( int Result, struct FString ErrMsg );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfAckHash
	 bool                      eventrfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 );		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.rfReqHash
	 void                      eventOnError ( int ErrCode );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.OnError
	 void                      eventOnClose ( int ErrCode );                     		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.OnClose
	 void                      eventOnConnect ( int ErrCode );                   		// [ FUNC_Event ] BatteryNet.BTTcpLink_Login.OnConnect
	 bool                      Close (  );                                       		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.Close
	 bool                      Connect ( struct FString sIpaddr, int nPort );    		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.Connect
	 bool                      InitNetwork (  );                                 		// [ FUNC_Native ] BatteryNet.BTTcpLink_Login.InitNetwork

	// Public Imports
	UBTTcpLink_Login(class UBTTcpLink_Login const &);
	class UBTTcpLink_Login &  operator=(class UBTTcpLink_Login const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class BatteryNet.BTSteamMapping
class DLL_IMPORT UBTSteamMapping : public UObject
{
public:

	// UScript Functions
	 struct FString            GetPayURL ( struct FString AccountID, unsigned char connectAlpha );		// [ FUNC_Native ] BatteryNet.BTSteamMapping.GetPayURL

	// Public Imports
	UBTSteamMapping(class UBTSteamMapping const &);
	class UBTSteamMapping &  operator=(class UBTSteamMapping const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class BatteryNet.BTNatDiag
class DLL_IMPORT UBTNatDiag : public UObject
{
public:
	class TArray< struct FString >                     nat_server_ip;                                    		// 0x002C ( 0x000C ) [ CPF_Config | CPF_NeedCtorLink ]
	class TArray< int >                                nat_port;                                         		// 0x0038 ( 0x000C ) [ CPF_Config | CPF_NeedCtorLink ]
	int                                                NatType;                                          		// 0x0044 ( 0x0004 ) [ CPF_Native ]

	// UScript Functions
	 bool                      ProcessStep2 (  );                                		//  BatteryNet.BTNatDiag.ProcessStep2
	 bool                      ProcessStep1 (  );                                		//  BatteryNet.BTNatDiag.ProcessStep1
	 unsigned char             GetNatType (  );                                  		// [ FUNC_Native ] BatteryNet.BTNatDiag.GetNatType
	 int                       CheckPhrase2 (  );                                		// [ FUNC_Native ] BatteryNet.BTNatDiag.CheckPhrase2
	 int                       CheckPhrase1 (  );                                		// [ FUNC_Native ] BatteryNet.BTNatDiag.CheckPhrase1
	 bool                      SetSecondServer ( struct FString server_ip, int nPort );		// [ FUNC_Native ] BatteryNet.BTNatDiag.SetSecondServer
	 bool                      SetPrimaryServer ( struct FString server_ip, int nPort );		// [ FUNC_Native ] BatteryNet.BTNatDiag.SetPrimaryServer
	 bool                      StartNatCheck ( struct FString nat_server_ip, int nPort, struct FString sLocalBindAddr );		// [ FUNC_Native ] BatteryNet.BTNatDiag.StartNatCheck
	 bool                      InitNatSocket (  );                               		// [ FUNC_Native ] BatteryNet.BTNatDiag.InitNatSocket
	 bool                      SetNatServerIp ( class TArray< struct FString > nat_server_ip, class TArray< int > nPorts );		// [ FUNC_Native ] BatteryNet.BTNatDiag.SetNatServerIp
	 bool                      Start ( class TArray< struct FString > ipaddresses, class TArray< int > ports );		//  BatteryNet.BTNatDiag.Start

	// Public Imports
	UBTNatDiag(class UBTNatDiag const &);
	class UBTNatDiag &  operator=(class UBTNatDiag const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class BatteryNet.BTNetEnums
class DLL_IMPORT UBTNetEnums : public UObject
{
public:
}; // Size: 0x0000

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

