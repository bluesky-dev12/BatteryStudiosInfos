#include "stdafx.h"
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : BatteryNet
# >    File : Code.cpp
# ======================================================================================== #
*/

/*bool UBTTcpLink_Process2Agent::sfReqUpdateProcessState ( int State )
{
	static UFunction* psfReqUpdateProcessState = 0;
	UBTTcpLink_Process2Agent_execsfReqUpdateProcessState_Parms parms;

	if ( !psfReqUpdateProcessState )
		psfReqUpdateProcessState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateProcessState" );

	parms.State = State;
	this->ProcessEvent ( psfReqUpdateProcessState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfAckProcessExcuteCmd ( int Result, int MajorType, int MinorType, struct FString CmdValue )
{
	static UFunction* psfAckProcessExcuteCmd = 0;
	UBTTcpLink_Process2Agent_execsfAckProcessExcuteCmd_Parms parms;

	if ( !psfAckProcessExcuteCmd )
		psfAckProcessExcuteCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfAckProcessExcuteCmd" );

	parms.Result = Result;
	parms.MajorType = MajorType;
	parms.MinorType = MinorType;
	parms.CmdValue = CmdValue;
	this->ProcessEvent ( psfAckProcessExcuteCmd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqProcessExcuteCmd ( int MajorType, int MinorType, struct FString CmdValue )
{
	static UFunction* psfReqProcessExcuteCmd = 0;
	UBTTcpLink_Process2Agent_execsfReqProcessExcuteCmd_Parms parms;

	if ( !psfReqProcessExcuteCmd )
		psfReqProcessExcuteCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqProcessExcuteCmd" );

	parms.MajorType = MajorType;
	parms.MinorType = MinorType;
	parms.CmdValue = CmdValue;
	this->ProcessEvent ( psfReqProcessExcuteCmd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqUpdateUserCount_DudeServer ( int ServerID, int MaxUserCount, int CurUserCount )
{
	static UFunction* psfReqUpdateUserCount_DudeServer = 0;
	UBTTcpLink_Process2Agent_execsfReqUpdateUserCount_DudeServer_Parms parms;

	if ( !psfReqUpdateUserCount_DudeServer )
		psfReqUpdateUserCount_DudeServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateUserCount_DudeServer" );

	parms.ServerID = ServerID;
	parms.MaxUserCount = MaxUserCount;
	parms.CurUserCount = CurUserCount;
	this->ProcessEvent ( psfReqUpdateUserCount_DudeServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqUpdateUserCount_LoginServer ( int ServerID, int MaxUserCount, int CurUserCount )
{
	static UFunction* psfReqUpdateUserCount_LoginServer = 0;
	UBTTcpLink_Process2Agent_execsfReqUpdateUserCount_LoginServer_Parms parms;

	if ( !psfReqUpdateUserCount_LoginServer )
		psfReqUpdateUserCount_LoginServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateUserCount_LoginServer" );

	parms.ServerID = ServerID;
	parms.MaxUserCount = MaxUserCount;
	parms.CurUserCount = CurUserCount;
	this->ProcessEvent ( psfReqUpdateUserCount_LoginServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqUpdateUserCount_ChannelServer ( int ServerID, int ChannelCount, class TArray< int > ChannelNum, class TArray< int > ChannelMaxUserCount, class TArray< int > ChannelCurUserCount, class TArray< int > ChannelPlayingUserCount, class TArray< int > ChannelRoomCount )
{
	static UFunction* psfReqUpdateUserCount_ChannelServer = 0;
	UBTTcpLink_Process2Agent_execsfReqUpdateUserCount_ChannelServer_Parms parms;

	if ( !psfReqUpdateUserCount_ChannelServer )
		psfReqUpdateUserCount_ChannelServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqUpdateUserCount_ChannelServer" );

	parms.ServerID = ServerID;
	parms.ChannelCount = ChannelCount;
	parms.ChannelNum = ChannelNum;
	parms.ChannelMaxUserCount = ChannelMaxUserCount;
	parms.ChannelCurUserCount = ChannelCurUserCount;
	parms.ChannelPlayingUserCount = ChannelPlayingUserCount;
	parms.ChannelRoomCount = ChannelRoomCount;
	this->ProcessEvent ( psfReqUpdateUserCount_ChannelServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqTerminateDedicateHostProcess (  )
{
	static UFunction* psfReqTerminateDedicateHostProcess = 0;
	UBTTcpLink_Process2Agent_execsfReqTerminateDedicateHostProcess_Parms parms;

	if ( !psfReqTerminateDedicateHostProcess )
		psfReqTerminateDedicateHostProcess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqTerminateDedicateHostProcess" );

	this->ProcessEvent ( psfReqTerminateDedicateHostProcess, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfAckStartDedicateHost ( int Result, int ProcessID, int ServerID, int ChannelNum, int RoomNum )
{
	static UFunction* psfAckStartDedicateHost = 0;
	UBTTcpLink_Process2Agent_execsfAckStartDedicateHost_Parms parms;

	if ( !psfAckStartDedicateHost )
		psfAckStartDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfAckStartDedicateHost" );

	parms.Result = Result;
	parms.ProcessID = ProcessID;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfAckStartDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqStartDedicateHost ( int ServerID, struct FString ChannelIPAddr, int ChannelPortNum, int ChannelNum, int RoomNum )
{
	static UFunction* psfReqStartDedicateHost = 0;
	UBTTcpLink_Process2Agent_execsfReqStartDedicateHost_Parms parms;

	if ( !psfReqStartDedicateHost )
		psfReqStartDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqStartDedicateHost" );

	parms.ServerID = ServerID;
	parms.ChannelIPAddr = ChannelIPAddr;
	parms.ChannelPortNum = ChannelPortNum;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfReqStartDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfAckQuitDedicateHost ( int Result, int PID, int ServerID, int ChannelNum, int RoomNum )
{
	static UFunction* psfAckQuitDedicateHost = 0;
	UBTTcpLink_Process2Agent_execsfAckQuitDedicateHost_Parms parms;

	if ( !psfAckQuitDedicateHost )
		psfAckQuitDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfAckQuitDedicateHost" );

	parms.Result = Result;
	parms.PID = PID;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfAckQuitDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqQuitDedicateHost ( int ServerID, int ChannelNum, int RoomNum )
{
	static UFunction* psfReqQuitDedicateHost = 0;
	UBTTcpLink_Process2Agent_execsfReqQuitDedicateHost_Parms parms;

	if ( !psfReqQuitDedicateHost )
		psfReqQuitDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqQuitDedicateHost" );

	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfReqQuitDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfAckLogin ( int Result )
{
	static UFunction* psfAckLogin = 0;
	UBTTcpLink_Process2Agent_execsfAckLogin_Parms parms;

	if ( !psfAckLogin )
		psfAckLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfAckLogin" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqLogin ( int PID, int ServerID, class TArray< unsigned char > ServerIPAddrType, class TArray< struct FString > ServerIPAddr, class TArray< unsigned char > ServerPortType, class TArray< int > ServerPortNum )
{
	static UFunction* psfReqLogin = 0;
	UBTTcpLink_Process2Agent_execsfReqLogin_Parms parms;

	if ( !psfReqLogin )
		psfReqLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqLogin" );

	parms.PID = PID;
	parms.ServerID = ServerID;
	parms.ServerIPAddrType = ServerIPAddrType;
	parms.ServerIPAddr = ServerIPAddr;
	parms.ServerPortType = ServerPortType;
	parms.ServerPortNum = ServerPortNum;
	this->ProcessEvent ( psfReqLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfAckHash ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckHash = 0;
	UBTTcpLink_Process2Agent_execsfAckHash_Parms parms;

	if ( !psfAckHash )
		psfAckHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfAckHash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::sfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 )
{
	static UFunction* psfReqHash = 0;
	UBTTcpLink_Process2Agent_execsfReqHash_Parms parms;

	if ( !psfReqHash )
		psfReqHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.sfReqHash" );

	parms.HashField0 = HashField0;
	parms.HashField1 = HashField1;
	parms.HashField2 = HashField2;
	parms.HashField3 = HashField3;
	this->ProcessEvent ( psfReqHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqUpdateProcessState ( int State )
{
	static UFunction* prfReqUpdateProcessState = 0;
	UBTTcpLink_Process2Agent_eventrfReqUpdateProcessState_Parms parms;

	if ( !prfReqUpdateProcessState )
		prfReqUpdateProcessState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateProcessState" );

	parms.State = State;
	this->ProcessEvent ( prfReqUpdateProcessState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfAckProcessExcuteCmd ( int Result, int MajorType, int MinorType, struct FString CmdValue )
{
	static UFunction* prfAckProcessExcuteCmd = 0;
	UBTTcpLink_Process2Agent_eventrfAckProcessExcuteCmd_Parms parms;

	if ( !prfAckProcessExcuteCmd )
		prfAckProcessExcuteCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfAckProcessExcuteCmd" );

	parms.Result = Result;
	parms.MajorType = MajorType;
	parms.MinorType = MinorType;
	parms.CmdValue = CmdValue;
	this->ProcessEvent ( prfAckProcessExcuteCmd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqProcessExcuteCmd ( int MajorType, int MinorType, struct FString CmdValue )
{
	static UFunction* prfReqProcessExcuteCmd = 0;
	UBTTcpLink_Process2Agent_eventrfReqProcessExcuteCmd_Parms parms;

	if ( !prfReqProcessExcuteCmd )
		prfReqProcessExcuteCmd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqProcessExcuteCmd" );

	parms.MajorType = MajorType;
	parms.MinorType = MinorType;
	parms.CmdValue = CmdValue;
	this->ProcessEvent ( prfReqProcessExcuteCmd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqUpdateUserCount_DudeServer ( int ServerID, int MaxUserCount, int CurUserCount )
{
	static UFunction* prfReqUpdateUserCount_DudeServer = 0;
	UBTTcpLink_Process2Agent_eventrfReqUpdateUserCount_DudeServer_Parms parms;

	if ( !prfReqUpdateUserCount_DudeServer )
		prfReqUpdateUserCount_DudeServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateUserCount_DudeServer" );

	parms.ServerID = ServerID;
	parms.MaxUserCount = MaxUserCount;
	parms.CurUserCount = CurUserCount;
	this->ProcessEvent ( prfReqUpdateUserCount_DudeServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqUpdateUserCount_LoginServer ( int ServerID, int MaxUserCount, int CurUserCount )
{
	static UFunction* prfReqUpdateUserCount_LoginServer = 0;
	UBTTcpLink_Process2Agent_eventrfReqUpdateUserCount_LoginServer_Parms parms;

	if ( !prfReqUpdateUserCount_LoginServer )
		prfReqUpdateUserCount_LoginServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateUserCount_LoginServer" );

	parms.ServerID = ServerID;
	parms.MaxUserCount = MaxUserCount;
	parms.CurUserCount = CurUserCount;
	this->ProcessEvent ( prfReqUpdateUserCount_LoginServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqUpdateUserCount_ChannelServer ( int ServerID, int ChannelCount, class TArray< int > ChannelNum, class TArray< int > ChannelMaxUserCount, class TArray< int > ChannelCurUserCount, class TArray< int > ChannelPlayingUserCount, class TArray< int > ChannelRoomCount )
{
	static UFunction* prfReqUpdateUserCount_ChannelServer = 0;
	UBTTcpLink_Process2Agent_eventrfReqUpdateUserCount_ChannelServer_Parms parms;

	if ( !prfReqUpdateUserCount_ChannelServer )
		prfReqUpdateUserCount_ChannelServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqUpdateUserCount_ChannelServer" );

	parms.ServerID = ServerID;
	parms.ChannelCount = ChannelCount;
	parms.ChannelNum = ChannelNum;
	parms.ChannelMaxUserCount = ChannelMaxUserCount;
	parms.ChannelCurUserCount = ChannelCurUserCount;
	parms.ChannelPlayingUserCount = ChannelPlayingUserCount;
	parms.ChannelRoomCount = ChannelRoomCount;
	this->ProcessEvent ( prfReqUpdateUserCount_ChannelServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqTerminateDedicateHostProcess (  )
{
	static UFunction* prfReqTerminateDedicateHostProcess = 0;
	UBTTcpLink_Process2Agent_eventrfReqTerminateDedicateHostProcess_Parms parms;

	if ( !prfReqTerminateDedicateHostProcess )
		prfReqTerminateDedicateHostProcess = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqTerminateDedicateHostProcess" );

	this->ProcessEvent ( prfReqTerminateDedicateHostProcess, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfAckStartDedicateHost ( int Result, int ProcessID, int ServerID, int ChannelNum, int RoomNum )
{
	static UFunction* prfAckStartDedicateHost = 0;
	UBTTcpLink_Process2Agent_eventrfAckStartDedicateHost_Parms parms;

	if ( !prfAckStartDedicateHost )
		prfAckStartDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfAckStartDedicateHost" );

	parms.Result = Result;
	parms.ProcessID = ProcessID;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfAckStartDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqStartDedicateHost ( int ServerID, struct FString ChannelIPAddr, int ChannelPortNum, int ChannelNum, int RoomNum )
{
	static UFunction* prfReqStartDedicateHost = 0;
	UBTTcpLink_Process2Agent_eventrfReqStartDedicateHost_Parms parms;

	if ( !prfReqStartDedicateHost )
		prfReqStartDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqStartDedicateHost" );

	parms.ServerID = ServerID;
	parms.ChannelIPAddr = ChannelIPAddr;
	parms.ChannelPortNum = ChannelPortNum;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfReqStartDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfAckQuitDedicateHost ( int Result, int PID, int ServerID, int ChannelNum, int RoomNum )
{
	static UFunction* prfAckQuitDedicateHost = 0;
	UBTTcpLink_Process2Agent_eventrfAckQuitDedicateHost_Parms parms;

	if ( !prfAckQuitDedicateHost )
		prfAckQuitDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfAckQuitDedicateHost" );

	parms.Result = Result;
	parms.PID = PID;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfAckQuitDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqQuitDedicateHost ( int ServerID, int ChannelNum, int RoomNum )
{
	static UFunction* prfReqQuitDedicateHost = 0;
	UBTTcpLink_Process2Agent_eventrfReqQuitDedicateHost_Parms parms;

	if ( !prfReqQuitDedicateHost )
		prfReqQuitDedicateHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqQuitDedicateHost" );

	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfReqQuitDedicateHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfAckLogin ( int Result )
{
	static UFunction* prfAckLogin = 0;
	UBTTcpLink_Process2Agent_eventrfAckLogin_Parms parms;

	if ( !prfAckLogin )
		prfAckLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfAckLogin" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqLogin ( int PID, int ServerID, class TArray< unsigned char > ServerIPAddrType, class TArray< struct FString > ServerIPAddr, class TArray< unsigned char > ServerPortType, class TArray< int > ServerPortNum )
{
	static UFunction* prfReqLogin = 0;
	UBTTcpLink_Process2Agent_eventrfReqLogin_Parms parms;

	if ( !prfReqLogin )
		prfReqLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqLogin" );

	parms.PID = PID;
	parms.ServerID = ServerID;
	parms.ServerIPAddrType = ServerIPAddrType;
	parms.ServerIPAddr = ServerIPAddr;
	parms.ServerPortType = ServerPortType;
	parms.ServerPortNum = ServerPortNum;
	this->ProcessEvent ( prfReqLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfAckHash ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckHash = 0;
	UBTTcpLink_Process2Agent_eventrfAckHash_Parms parms;

	if ( !prfAckHash )
		prfAckHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfAckHash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::eventrfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 )
{
	static UFunction* prfReqHash = 0;
	UBTTcpLink_Process2Agent_eventrfReqHash_Parms parms;

	if ( !prfReqHash )
		prfReqHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.rfReqHash" );

	parms.HashField0 = HashField0;
	parms.HashField1 = HashField1;
	parms.HashField2 = HashField2;
	parms.HashField3 = HashField3;
	this->ProcessEvent ( prfReqHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UBTTcpLink_Process2Agent::eventOnError ( int ErrCode )
{
	static UFunction* pOnError = 0;
	UBTTcpLink_Process2Agent_eventOnError_Parms parms;

	if ( !pOnError )
		pOnError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.OnError" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnError, &parms, NULL );

}*/

/*void UBTTcpLink_Process2Agent::eventOnClose ( int ErrCode )
{
	static UFunction* pOnClose = 0;
	UBTTcpLink_Process2Agent_eventOnClose_Parms parms;

	if ( !pOnClose )
		pOnClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.OnClose" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnClose, &parms, NULL );

}*/

/*void UBTTcpLink_Process2Agent::eventOnConnect ( int ErrCode )
{
	static UFunction* pOnConnect = 0;
	UBTTcpLink_Process2Agent_eventOnConnect_Parms parms;

	if ( !pOnConnect )
		pOnConnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.OnConnect" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnConnect, &parms, NULL );

}*/

/*bool UBTTcpLink_Process2Agent::Close (  )
{
	static UFunction* pClose = 0;
	UBTTcpLink_Process2Agent_execClose_Parms parms;

	if ( !pClose )
		pClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.Close" );

	this->ProcessEvent ( pClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::Connect ( struct FString sIpaddr, int nPort )
{
	static UFunction* pConnect = 0;
	UBTTcpLink_Process2Agent_execConnect_Parms parms;

	if ( !pConnect )
		pConnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.Connect" );

	parms.sIpaddr = sIpaddr;
	parms.nPort = nPort;
	this->ProcessEvent ( pConnect, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Process2Agent::InitNetwork (  )
{
	static UFunction* pInitNetwork = 0;
	UBTTcpLink_Process2Agent_execInitNetwork_Parms parms;

	if ( !pInitNetwork )
		pInitNetwork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Process2Agent.InitNetwork" );

	this->ProcessEvent ( pInitNetwork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UBTTcpHandler_DStoDP_Script_Interface::eventSetGameManager ( class UwGameManager* pgameMgr )
{
	static UFunction* pSetGameManager = 0;
	UBTTcpHandler_DStoDP_Script_Interface_eventSetGameManager_Parms parms;

	if ( !pSetGameManager )
		pSetGameManager = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpHandler_DStoDP_Script_Interface.SetGameManager" );

	parms.pgameMgr = pgameMgr;
	this->ProcessEvent ( pSetGameManager, &parms, NULL );

}*/

/*void UBTTcpHandler_DStoDP_Script_Interface::eventSetMatchMaker ( class UwMatchMaker* pMM )
{
	static UFunction* pSetMatchMaker = 0;
	UBTTcpHandler_DStoDP_Script_Interface_eventSetMatchMaker_Parms parms;

	if ( !pSetMatchMaker )
		pSetMatchMaker = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpHandler_DStoDP_Script_Interface.SetMatchMaker" );

	parms.pMM = pMM;
	this->ProcessEvent ( pSetMatchMaker, &parms, NULL );

}*/

/*bool UBTTcpLink_Channel::sfNotifyCouponUseError ( int Time )
{
	static UFunction* psfNotifyCouponUseError = 0;
	UBTTcpLink_Channel_execsfNotifyCouponUseError_Parms parms;

	if ( !psfNotifyCouponUseError )
		psfNotifyCouponUseError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfNotifyCouponUseError" );

	parms.Time = Time;
	this->ProcessEvent ( psfNotifyCouponUseError, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCouponUse ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckCouponUse = 0;
	UBTTcpLink_Channel_execsfAckCouponUse_Parms parms;

	if ( !psfAckCouponUse )
		psfAckCouponUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCouponUse" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckCouponUse, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCouponUse ( struct FString Serial )
{
	static UFunction* psfReqCouponUse = 0;
	UBTTcpLink_Channel_execsfReqCouponUse_Parms parms;

	if ( !psfReqCouponUse )
		psfReqCouponUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCouponUse" );

	parms.Serial = Serial;
	this->ProcessEvent ( psfReqCouponUse, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyShopItemDataEnd ( int Ver )
{
	static UFunction* psfReqNotifyShopItemDataEnd = 0;
	UBTTcpLink_Channel_execsfReqNotifyShopItemDataEnd_Parms parms;

	if ( !psfReqNotifyShopItemDataEnd )
		psfReqNotifyShopItemDataEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyShopItemDataEnd" );

	parms.Ver = Ver;
	this->ProcessEvent ( psfReqNotifyShopItemDataEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift )
{
	static UFunction* psfReqNotifyShopItemData = 0;
	UBTTcpLink_Channel_execsfReqNotifyShopItemData_Parms parms;

	if ( !psfReqNotifyShopItemData )
		psfReqNotifyShopItemData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyShopItemData" );

	parms.ProductNo = ProductNo;
	parms.ProductRowGuid = ProductRowGuid;
	parms.ServiceCode = ServiceCode;
	parms.ProductName = ProductName;
	parms.ProductCode = ProductCode;
	parms.ProductType = ProductType;
	parms.SaleType = SaleType;
	parms.ItemSaleType = ItemSaleType;
	parms.ISIncludeBonus = ISIncludeBonus;
	parms.ProductCost = ProductCost;
	parms.ProductHour = ProductHour;
	parms.ProductQuantity = ProductQuantity;
	parms.TotalQuantity = TotalQuantity;
	parms.ReOrderTerms = ReOrderTerms;
	parms.ReorderCount = ReorderCount;
	parms.PurchaseAvailableQuantity = PurchaseAvailableQuantity;
	parms.AvailableMinLevel = AvailableMinLevel;
	parms.AvailableMaxLevel = AvailableMaxLevel;
	parms.AvailableGender = AvailableGender;
	parms.InventoryKeepDays = InventoryKeepDays;
	parms.SaleMasterFlag = SaleMasterFlag;
	parms.SaleStatus = SaleStatus;
	parms.Description = Description;
	parms.Property0 = Property0;
	parms.Property1 = Property1;
	parms.Property2 = Property2;
	parms.Property3 = Property3;
	parms.Property4 = Property4;
	parms.IsGift = IsGift;
	this->ProcessEvent ( psfReqNotifyShopItemData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckShopItemData (  )
{
	static UFunction* psfAckShopItemData = 0;
	UBTTcpLink_Channel_execsfAckShopItemData_Parms parms;

	if ( !psfAckShopItemData )
		psfAckShopItemData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckShopItemData" );

	this->ProcessEvent ( psfAckShopItemData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqShopItemData ( int Ver )
{
	static UFunction* psfReqShopItemData = 0;
	UBTTcpLink_Channel_execsfReqShopItemData_Parms parms;

	if ( !psfReqShopItemData )
		psfReqShopItemData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqShopItemData" );

	parms.Ver = Ver;
	this->ProcessEvent ( psfReqShopItemData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyLoadingStatus ( int Status )
{
	static UFunction* psfReqNotifyLoadingStatus = 0;
	UBTTcpLink_Channel_execsfReqNotifyLoadingStatus_Parms parms;

	if ( !psfReqNotifyLoadingStatus )
		psfReqNotifyLoadingStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyLoadingStatus" );

	parms.Status = Status;
	this->ProcessEvent ( psfReqNotifyLoadingStatus, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqUpdateUserPerformenceInfo ( int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing )
{
	static UFunction* psfReqUpdateUserPerformenceInfo = 0;
	UBTTcpLink_Channel_execsfReqUpdateUserPerformenceInfo_Parms parms;

	if ( !psfReqUpdateUserPerformenceInfo )
		psfReqUpdateUserPerformenceInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqUpdateUserPerformenceInfo" );

	parms.UserID = UserID;
	parms.MinFps = MinFps;
	parms.MaxFps = MaxFps;
	parms.AvgFps = AvgFps;
	parms.MinPing = MinPing;
	parms.MaxPing = MaxPing;
	parms.AvgPing = AvgPing;
	this->ProcessEvent ( psfReqUpdateUserPerformenceInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAhnNotifyDisconnct ( int Code )
{
	static UFunction* psfReqAhnNotifyDisconnct = 0;
	UBTTcpLink_Channel_execsfReqAhnNotifyDisconnct_Parms parms;

	if ( !psfReqAhnNotifyDisconnct )
		psfReqAhnNotifyDisconnct = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAhnNotifyDisconnct" );

	parms.Code = Code;
	this->ProcessEvent ( psfReqAhnNotifyDisconnct, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAhnHsObject ( class TArray< unsigned char > Data, int DataSize )
{
	static UFunction* psfAckAhnHsObject = 0;
	UBTTcpLink_Channel_execsfAckAhnHsObject_Parms parms;

	if ( !psfAckAhnHsObject )
		psfAckAhnHsObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAhnHsObject" );

	parms.Data = Data;
	parms.DataSize = DataSize;
	this->ProcessEvent ( psfAckAhnHsObject, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAhnHsObject ( class TArray< unsigned char > Data, int DataSize )
{
	static UFunction* psfReqAhnHsObject = 0;
	UBTTcpLink_Channel_execsfReqAhnHsObject_Parms parms;

	if ( !psfReqAhnHsObject )
		psfReqAhnHsObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAhnHsObject" );

	parms.Data = Data;
	parms.DataSize = DataSize;
	this->ProcessEvent ( psfReqAhnHsObject, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfNotifyClanLevelup ( struct FString ClanName, int Levelup )
{
	static UFunction* psfNotifyClanLevelup = 0;
	UBTTcpLink_Channel_execsfNotifyClanLevelup_Parms parms;

	if ( !psfNotifyClanLevelup )
		psfNotifyClanLevelup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfNotifyClanLevelup" );

	parms.ClanName = ClanName;
	parms.Levelup = Levelup;
	this->ProcessEvent ( psfNotifyClanLevelup, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfNotifyNewClanName ( struct FString New_NickName )
{
	static UFunction* psfNotifyNewClanName = 0;
	UBTTcpLink_Channel_execsfNotifyNewClanName_Parms parms;

	if ( !psfNotifyNewClanName )
		psfNotifyNewClanName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfNotifyNewClanName" );

	parms.New_NickName = New_NickName;
	this->ProcessEvent ( psfNotifyNewClanName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName )
{
	static UFunction* psfNotifyNewNickName = 0;
	UBTTcpLink_Channel_execsfNotifyNewNickName_Parms parms;

	if ( !psfNotifyNewNickName )
		psfNotifyNewNickName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfNotifyNewNickName" );

	parms.Community_Type = Community_Type;
	parms.Old_NickName = Old_NickName;
	parms.New_NickName = New_NickName;
	this->ProcessEvent ( psfNotifyNewNickName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGameMapData ( class TArray< int > nIdx, class TArray< int > nMapID, class TArray< struct FString > nMapNm, class TArray< float > fSupHealth, class TArray< float > fSupHeli, class TArray< float > fSupBomb, class TArray< float > fSupUAV, class TArray< int > nModFFA, class TArray< int > nModFFAMax, class TArray< int > nModTDM, class TArray< int > nModTDMMax, class TArray< int > nModSD, class TArray< int > nModSDMax, class TArray< int > nModDOM, class TArray< int > nModDOMMax, class TArray< int > nModSab, class TArray< int > nModSabMax )
{
	static UFunction* psfAckGameMapData = 0;
	UBTTcpLink_Channel_execsfAckGameMapData_Parms parms;

	if ( !psfAckGameMapData )
		psfAckGameMapData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGameMapData" );

	parms.nIdx = nIdx;
	parms.nMapID = nMapID;
	parms.nMapNm = nMapNm;
	parms.fSupHealth = fSupHealth;
	parms.fSupHeli = fSupHeli;
	parms.fSupBomb = fSupBomb;
	parms.fSupUAV = fSupUAV;
	parms.nModFFA = nModFFA;
	parms.nModFFAMax = nModFFAMax;
	parms.nModTDM = nModTDM;
	parms.nModTDMMax = nModTDMMax;
	parms.nModSD = nModSD;
	parms.nModSDMax = nModSDMax;
	parms.nModDOM = nModDOM;
	parms.nModDOMMax = nModDOMMax;
	parms.nModSab = nModSab;
	parms.nModSabMax = nModSabMax;
	this->ProcessEvent ( psfAckGameMapData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGameMapData (  )
{
	static UFunction* psfReqGameMapData = 0;
	UBTTcpLink_Channel_execsfReqGameMapData_Parms parms;

	if ( !psfReqGameMapData )
		psfReqGameMapData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGameMapData" );

	this->ProcessEvent ( psfReqGameMapData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckTencent_StartTenProtect ( int CharDBID )
{
	static UFunction* psfAckTencent_StartTenProtect = 0;
	UBTTcpLink_Channel_execsfAckTencent_StartTenProtect_Parms parms;

	if ( !psfAckTencent_StartTenProtect )
		psfAckTencent_StartTenProtect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckTencent_StartTenProtect" );

	parms.CharDBID = CharDBID;
	this->ProcessEvent ( psfAckTencent_StartTenProtect, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckMoveToLobby ( unsigned char MessageType )
{
	static UFunction* psfAckMoveToLobby = 0;
	UBTTcpLink_Channel_execsfAckMoveToLobby_Parms parms;

	if ( !psfAckMoveToLobby )
		psfAckMoveToLobby = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckMoveToLobby" );

	parms.MessageType = MessageType;
	this->ProcessEvent ( psfAckMoveToLobby, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPopUpMessage ( int MessageType )
{
	static UFunction* psfAckPopUpMessage = 0;
	UBTTcpLink_Channel_execsfAckPopUpMessage_Parms parms;

	if ( !psfAckPopUpMessage )
		psfAckPopUpMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPopUpMessage" );

	parms.MessageType = MessageType;
	this->ProcessEvent ( psfAckPopUpMessage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode )
{
	static UFunction* psfUpdateWebzenShopScriptVersion = 0;
	UBTTcpLink_Channel_execsfUpdateWebzenShopScriptVersion_Parms parms;

	if ( !psfUpdateWebzenShopScriptVersion )
		psfUpdateWebzenShopScriptVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfUpdateWebzenShopScriptVersion" );

	parms.Year = Year;
	parms.YearId = YearId;
	parms.SalesZoneCode = SalesZoneCode;
	this->ProcessEvent ( psfUpdateWebzenShopScriptVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSetClientVersion ( int ClientVersion )
{
	static UFunction* psfReqSetClientVersion = 0;
	UBTTcpLink_Channel_execsfReqSetClientVersion_Parms parms;

	if ( !psfReqSetClientVersion )
		psfReqSetClientVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSetClientVersion" );

	parms.ClientVersion = ClientVersion;
	this->ProcessEvent ( psfReqSetClientVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum )
{
	static UFunction* psfAckFriendPosition = 0;
	UBTTcpLink_Channel_execsfAckFriendPosition_Parms parms;

	if ( !psfAckFriendPosition )
		psfAckFriendPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckFriendPosition" );

	parms.Result = Result;
	parms.TargetCharName = TargetCharName;
	parms.ServerType = ServerType;
	parms.fServername = fServername;
	parms.fServerShortName = fServerShortName;
	parms.fServerIP = fServerIP;
	parms.fServerPort = fServerPort;
	parms.CurPos = CurPos;
	parms.CurState = CurState;
	parms.ChannelNum = ChannelNum;
	parms.ChannelNickName = ChannelNickName;
	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( psfAckFriendPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqFriendPosition ( struct FString TargetCharName, unsigned char CommunityType )
{
	static UFunction* psfReqFriendPosition = 0;
	UBTTcpLink_Channel_execsfReqFriendPosition_Parms parms;

	if ( !psfReqFriendPosition )
		psfReqFriendPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqFriendPosition" );

	parms.TargetCharName = TargetCharName;
	parms.CommunityType = CommunityType;
	this->ProcessEvent ( psfReqFriendPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDedicateHost_Login ( int Result, int UserID, int ChannelNum, int RoomNum )
{
	static UFunction* psfAckDedicateHost_Login = 0;
	UBTTcpLink_Channel_execsfAckDedicateHost_Login_Parms parms;

	if ( !psfAckDedicateHost_Login )
		psfAckDedicateHost_Login = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDedicateHost_Login" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfAckDedicateHost_Login, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDedicateHost_Login ( int ProcessID, int ChannelNum, int RoomNum )
{
	static UFunction* psfReqDedicateHost_Login = 0;
	UBTTcpLink_Channel_execsfReqDedicateHost_Login_Parms parms;

	if ( !psfReqDedicateHost_Login )
		psfReqDedicateHost_Login = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDedicateHost_Login" );

	parms.ProcessID = ProcessID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfReqDedicateHost_Login, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckLogOut ( unsigned char Result, unsigned char Reason )
{
	static UFunction* psfAckLogOut = 0;
	UBTTcpLink_Channel_execsfAckLogOut_Parms parms;

	if ( !psfAckLogOut )
		psfAckLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckLogOut" );

	parms.Result = Result;
	parms.Reason = Reason;
	this->ProcessEvent ( psfAckLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLogOut ( unsigned char Reason )
{
	static UFunction* psfReqLogOut = 0;
	UBTTcpLink_Channel_execsfReqLogOut_Parms parms;

	if ( !psfReqLogOut )
		psfReqLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLogOut" );

	parms.Reason = Reason;
	this->ProcessEvent ( psfReqLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec )
{
	static UFunction* psfAckTencent_AASInfo = 0;
	UBTTcpLink_Channel_execsfAckTencent_AASInfo_Parms parms;

	if ( !psfAckTencent_AASInfo )
		psfAckTencent_AASInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckTencent_AASInfo" );

	parms.UserID = UserID;
	parms.IsAdult = IsAdult;
	parms.IsQQAuth = IsQQAuth;
	parms.AccumTimeSec = AccumTimeSec;
	this->ProcessEvent ( psfAckTencent_AASInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSetCommunityOption ( int Result, struct FString ErrStr )
{
	static UFunction* psfAckSetCommunityOption = 0;
	UBTTcpLink_Channel_execsfAckSetCommunityOption_Parms parms;

	if ( !psfAckSetCommunityOption )
		psfAckSetCommunityOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSetCommunityOption" );

	parms.Result = Result;
	parms.ErrStr = ErrStr;
	this->ProcessEvent ( psfAckSetCommunityOption, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSetCommunityOption ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite )
{
	static UFunction* psfReqSetCommunityOption = 0;
	UBTTcpLink_Channel_execsfReqSetCommunityOption_Parms parms;

	if ( !psfReqSetCommunityOption )
		psfReqSetCommunityOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSetCommunityOption" );

	parms.Opt_Wispher = Opt_Wispher;
	parms.Opt_GameInvite = Opt_GameInvite;
	parms.Opt_FriendInvite = Opt_FriendInvite;
	parms.Opt_ClanInvite = Opt_ClanInvite;
	this->ProcessEvent ( psfReqSetCommunityOption, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCommunityOptionList ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite )
{
	static UFunction* psfAckCommunityOptionList = 0;
	UBTTcpLink_Channel_execsfAckCommunityOptionList_Parms parms;

	if ( !psfAckCommunityOptionList )
		psfAckCommunityOptionList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCommunityOptionList" );

	parms.Opt_Wispher = Opt_Wispher;
	parms.Opt_GameInvite = Opt_GameInvite;
	parms.Opt_FriendInvite = Opt_FriendInvite;
	parms.Opt_ClanInvite = Opt_ClanInvite;
	this->ProcessEvent ( psfAckCommunityOptionList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCommunityOptionList (  )
{
	static UFunction* psfReqCommunityOptionList = 0;
	UBTTcpLink_Channel_execsfReqCommunityOptionList_Parms parms;

	if ( !psfReqCommunityOptionList )
		psfReqCommunityOptionList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCommunityOptionList" );

	this->ProcessEvent ( psfReqCommunityOptionList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyUpdateCharInfo_TitleMark ( struct FString CharName, int TitleMarkID )
{
	static UFunction* psfAckNotifyUpdateCharInfo_TitleMark = 0;
	UBTTcpLink_Channel_execsfAckNotifyUpdateCharInfo_TitleMark_Parms parms;

	if ( !psfAckNotifyUpdateCharInfo_TitleMark )
		psfAckNotifyUpdateCharInfo_TitleMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyUpdateCharInfo_TitleMark" );

	parms.CharName = CharName;
	parms.TitleMarkID = TitleMarkID;
	this->ProcessEvent ( psfAckNotifyUpdateCharInfo_TitleMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID )
{
	static UFunction* psfAckNotifyUpdateCharInfo_LevelMark = 0;
	UBTTcpLink_Channel_execsfAckNotifyUpdateCharInfo_LevelMark_Parms parms;

	if ( !psfAckNotifyUpdateCharInfo_LevelMark )
		psfAckNotifyUpdateCharInfo_LevelMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyUpdateCharInfo_LevelMark" );

	parms.CharName = CharName;
	parms.LevelMarkID = LevelMarkID;
	this->ProcessEvent ( psfAckNotifyUpdateCharInfo_LevelMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetRankingInfoListEnd (  )
{
	static UFunction* psfAckGetRankingInfoListEnd = 0;
	UBTTcpLink_Channel_execsfAckGetRankingInfoListEnd_Parms parms;

	if ( !psfAckGetRankingInfoListEnd )
		psfAckGetRankingInfoListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetRankingInfoListEnd" );

	this->ProcessEvent ( psfAckGetRankingInfoListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* psfAckGetRankingInfoList = 0;
	UBTTcpLink_Channel_execsfAckGetRankingInfoList_Parms parms;

	if ( !psfAckGetRankingInfoList )
		psfAckGetRankingInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetRankingInfoList" );

	parms.Result = Result;
	parms.RankingType = RankingType;
	parms.CommunityType = CommunityType;
	parms.CharName = CharName;
	parms.CharLevel = CharLevel;
	parms.ClanName = ClanName;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.Ranking_Accum = Ranking_Accum;
	parms.Ranking_Accum_Prev = Ranking_Accum_Prev;
	parms.Ranking_Accum_Exp = Ranking_Accum_Exp;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckGetRankingInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount )
{
	static UFunction* psfAckGetRankingInfoListStart = 0;
	UBTTcpLink_Channel_execsfAckGetRankingInfoListStart_Parms parms;

	if ( !psfAckGetRankingInfoListStart )
		psfAckGetRankingInfoListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetRankingInfoListStart" );

	parms.Result = Result;
	parms.RankingType = RankingType;
	parms.CommunityType = CommunityType;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckGetRankingInfoListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetRankingInfoList ( unsigned char RankingType, unsigned char CommunityType )
{
	static UFunction* psfReqGetRankingInfoList = 0;
	UBTTcpLink_Channel_execsfReqGetRankingInfoList_Parms parms;

	if ( !psfReqGetRankingInfoList )
		psfReqGetRankingInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetRankingInfoList" );

	parms.RankingType = RankingType;
	parms.CommunityType = CommunityType;
	this->ProcessEvent ( psfReqGetRankingInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb )
{
	static UFunction* psfAckCharDetailInfo = 0;
	UBTTcpLink_Channel_execsfAckCharDetailInfo_Parms parms;

	if ( !psfAckCharDetailInfo )
		psfAckCharDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCharDetailInfo" );

	parms.MaxSerial = MaxSerial;
	parms.MaxScore = MaxScore;
	parms.MaxKill = MaxKill;
	parms.MaxAssist = MaxAssist;
	parms.Serial3 = Serial3;
	parms.Serial5 = Serial5;
	parms.Serial7 = Serial7;
	parms.Serial10 = Serial10;
	parms.Serial15 = Serial15;
	parms.AR = AR;
	parms.SMG = SMG;
	parms.SR = SR;
	parms.SW = SW;
	parms.Melee = Melee;
	parms.Grenade = Grenade;
	parms.FlashBang = FlashBang;
	parms.Foot = Foot;
	parms.AT4 = AT4;
	parms.MG = MG;
	parms.Fire = Fire;
	parms.RPG7 = RPG7;
	parms.TimeBomb = TimeBomb;
	parms.IcendiaryBomb = IcendiaryBomb;
	parms.ClusterBomb = ClusterBomb;
	parms.ByChopper = ByChopper;
	parms.Artillery = Artillery;
	parms.KillChopper = KillChopper;
	parms.FirstKill = FirstKill;
	parms.LastKill = LastKill;
	parms.AllKill = AllKill;
	parms.Dominate = Dominate;
	parms.InstallBomb = InstallBomb;
	parms.DefuseBomb = DefuseBomb;
	this->ProcessEvent ( psfAckCharDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCharDetailInfo (  )
{
	static UFunction* psfReqCharDetailInfo = 0;
	UBTTcpLink_Channel_execsfReqCharDetailInfo_Parms parms;

	if ( !psfReqCharDetailInfo )
		psfReqCharDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCharDetailInfo" );

	this->ProcessEvent ( psfReqCharDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqInGameRoomUserClanLevelChanged ( int UserID, int ClanLevel )
{
	static UFunction* psfReqInGameRoomUserClanLevelChanged = 0;
	UBTTcpLink_Channel_execsfReqInGameRoomUserClanLevelChanged_Parms parms;

	if ( !psfReqInGameRoomUserClanLevelChanged )
		psfReqInGameRoomUserClanLevelChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqInGameRoomUserClanLevelChanged" );

	parms.UserID = UserID;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( psfReqInGameRoomUserClanLevelChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqInGameRoomUserInfoChanged (  )
{
	static UFunction* psfReqInGameRoomUserInfoChanged = 0;
	UBTTcpLink_Channel_execsfReqInGameRoomUserInfoChanged_Parms parms;

	if ( !psfReqInGameRoomUserInfoChanged )
		psfReqInGameRoomUserInfoChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqInGameRoomUserInfoChanged" );

	this->ProcessEvent ( psfReqInGameRoomUserInfoChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname )
{
	static UFunction* psfAckClanMatchResultHistory = 0;
	UBTTcpLink_Channel_execsfAckClanMatchResultHistory_Parms parms;

	if ( !psfAckClanMatchResultHistory )
		psfAckClanMatchResultHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatchResultHistory" );

	parms.MatchDate = MatchDate;
	parms.IsWin = IsWin;
	parms.EnemyClanname = EnemyClanname;
	this->ProcessEvent ( psfAckClanMatchResultHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatchResultHistory ( struct FString ClanNm )
{
	static UFunction* psfReqClanMatchResultHistory = 0;
	UBTTcpLink_Channel_execsfReqClanMatchResultHistory_Parms parms;

	if ( !psfReqClanMatchResultHistory )
		psfReqClanMatchResultHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatchResultHistory" );

	parms.ClanNm = ClanNm;
	this->ProcessEvent ( psfReqClanMatchResultHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDeleteMailAll ( int Result, unsigned char MailType, int Count )
{
	static UFunction* psfAckDeleteMailAll = 0;
	UBTTcpLink_Channel_execsfAckDeleteMailAll_Parms parms;

	if ( !psfAckDeleteMailAll )
		psfAckDeleteMailAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDeleteMailAll" );

	parms.Result = Result;
	parms.MailType = MailType;
	parms.Count = Count;
	this->ProcessEvent ( psfAckDeleteMailAll, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDeleteMailAll ( unsigned char MailType )
{
	static UFunction* psfReqDeleteMailAll = 0;
	UBTTcpLink_Channel_execsfReqDeleteMailAll_Parms parms;

	if ( !psfReqDeleteMailAll )
		psfReqDeleteMailAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDeleteMailAll" );

	parms.MailType = MailType;
	this->ProcessEvent ( psfReqDeleteMailAll, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic )
{
	static UFunction* psfAckClanMatch_PublicWaitRoomChanged = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_PublicWaitRoomChanged_Parms parms;

	if ( !psfAckClanMatch_PublicWaitRoomChanged )
		psfAckClanMatch_PublicWaitRoomChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_PublicWaitRoomChanged" );

	parms.WaitRoomIdx = WaitRoomIdx;
	parms.RoomName = RoomName;
	parms.MapNum = MapNum;
	parms.CurUserCount = CurUserCount;
	parms.MaxUserCount = MaxUserCount;
	parms.Status = Status;
	parms.IsPublic = IsPublic;
	this->ProcessEvent ( psfAckClanMatch_PublicWaitRoomChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEventNotify ( int Type )
{
	static UFunction* psfAckEventNotify = 0;
	UBTTcpLink_Channel_execsfAckEventNotify_Parms parms;

	if ( !psfAckEventNotify )
		psfAckEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEventNotify" );

	parms.Type = Type;
	this->ProcessEvent ( psfAckEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEventNotify (  )
{
	static UFunction* psfReqEventNotify = 0;
	UBTTcpLink_Channel_execsfReqEventNotify_Parms parms;

	if ( !psfReqEventNotify )
		psfReqEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEventNotify" );

	this->ProcessEvent ( psfReqEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname )
{
	static UFunction* psfAckPaidItem_NotifyChangeClanname = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_NotifyChangeClanname_Parms parms;

	if ( !psfAckPaidItem_NotifyChangeClanname )
		psfAckPaidItem_NotifyChangeClanname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_NotifyChangeClanname" );

	parms.NewClanname = NewClanname;
	this->ProcessEvent ( psfAckPaidItem_NotifyChangeClanname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewClanname )
{
	static UFunction* psfAckPaidItem_ChangeClanname = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_ChangeClanname_Parms parms;

	if ( !psfAckPaidItem_ChangeClanname )
		psfAckPaidItem_ChangeClanname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ChangeClanname" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.RemainCount = RemainCount;
	parms.NewClanname = NewClanname;
	this->ProcessEvent ( psfAckPaidItem_ChangeClanname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPaidItem_ChangeClanname ( struct FBtrDouble ItemIdx, struct FString NewClanname )
{
	static UFunction* psfReqPaidItem_ChangeClanname = 0;
	UBTTcpLink_Channel_execsfReqPaidItem_ChangeClanname_Parms parms;

	if ( !psfReqPaidItem_ChangeClanname )
		psfReqPaidItem_ChangeClanname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ChangeClanname" );

	parms.ItemIdx = ItemIdx;
	parms.NewClanname = NewClanname;
	this->ProcessEvent ( psfReqPaidItem_ChangeClanname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_EndPublicWaitRoomList (  )
{
	static UFunction* psfAckClanMatch_EndPublicWaitRoomList = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_EndPublicWaitRoomList_Parms parms;

	if ( !psfAckClanMatch_EndPublicWaitRoomList )
		psfAckClanMatch_EndPublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_EndPublicWaitRoomList" );

	this->ProcessEvent ( psfAckClanMatch_EndPublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status )
{
	static UFunction* psfAckClanMatch_PublicWaitRoomList = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_PublicWaitRoomList_Parms parms;

	if ( !psfAckClanMatch_PublicWaitRoomList )
		psfAckClanMatch_PublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_PublicWaitRoomList" );

	parms.WaitRoomIdx = WaitRoomIdx;
	parms.LeaderName = LeaderName;
	parms.RoomName = RoomName;
	parms.MapNum = MapNum;
	parms.CurUserCount = CurUserCount;
	parms.MaxUserCount = MaxUserCount;
	parms.Status = Status;
	this->ProcessEvent ( psfAckClanMatch_PublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count )
{
	static UFunction* psfAckClanMatch_StartPublicWaitRoomList = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_StartPublicWaitRoomList_Parms parms;

	if ( !psfAckClanMatch_StartPublicWaitRoomList )
		psfAckClanMatch_StartPublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StartPublicWaitRoomList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Count = Count;
	this->ProcessEvent ( psfAckClanMatch_StartPublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_GetPublicWaitRoomList (  )
{
	static UFunction* psfReqClanMatch_GetPublicWaitRoomList = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_GetPublicWaitRoomList_Parms parms;

	if ( !psfReqClanMatch_GetPublicWaitRoomList )
		psfReqClanMatch_GetPublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_GetPublicWaitRoomList" );

	this->ProcessEvent ( psfReqClanMatch_GetPublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckServerType ( unsigned char Type )
{
	static UFunction* psfAckServerType = 0;
	UBTTcpLink_Channel_execsfAckServerType_Parms parms;

	if ( !psfAckServerType )
		psfAckServerType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckServerType" );

	parms.Type = Type;
	this->ProcessEvent ( psfAckServerType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqServerType (  )
{
	static UFunction* psfReqServerType = 0;
	UBTTcpLink_Channel_execsfReqServerType_Parms parms;

	if ( !psfReqServerType )
		psfReqServerType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqServerType" );

	this->ProcessEvent ( psfReqServerType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckServerShutdown ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckServerShutdown = 0;
	UBTTcpLink_Channel_execsfAckServerShutdown_Parms parms;

	if ( !psfAckServerShutdown )
		psfAckServerShutdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckServerShutdown" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckServerShutdown, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqServerShutdown ( struct FString AuthKey, int SecondAfter, struct FBtrDouble ShutdownTime )
{
	static UFunction* psfReqServerShutdown = 0;
	UBTTcpLink_Channel_execsfReqServerShutdown_Parms parms;

	if ( !psfReqServerShutdown )
		psfReqServerShutdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqServerShutdown" );

	parms.AuthKey = AuthKey;
	parms.SecondAfter = SecondAfter;
	parms.ShutdownTime = ShutdownTime;
	this->ProcessEvent ( psfReqServerShutdown, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* psfAckNotifyEndTutorial = 0;
	UBTTcpLink_Channel_execsfAckNotifyEndTutorial_Parms parms;

	if ( !psfAckNotifyEndTutorial )
		psfAckNotifyEndTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyEndTutorial" );

	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.Level = Level;
	parms.ClanName = ClanName;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookFor = IsLookFor;
	parms.Result = Result;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckNotifyEndTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyEndTutorial ( int TutorialResultType )
{
	static UFunction* psfReqNotifyEndTutorial = 0;
	UBTTcpLink_Channel_execsfReqNotifyEndTutorial_Parms parms;

	if ( !psfReqNotifyEndTutorial )
		psfReqNotifyEndTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyEndTutorial" );

	parms.TutorialResultType = TutorialResultType;
	this->ProcessEvent ( psfReqNotifyEndTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyStartTutorial ( int Result, int UserID )
{
	static UFunction* psfAckNotifyStartTutorial = 0;
	UBTTcpLink_Channel_execsfAckNotifyStartTutorial_Parms parms;

	if ( !psfAckNotifyStartTutorial )
		psfAckNotifyStartTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyStartTutorial" );

	parms.Result = Result;
	parms.UserID = UserID;
	this->ProcessEvent ( psfAckNotifyStartTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyStartTutorial (  )
{
	static UFunction* psfReqNotifyStartTutorial = 0;
	UBTTcpLink_Channel_execsfReqNotifyStartTutorial_Parms parms;

	if ( !psfReqNotifyStartTutorial )
		psfReqNotifyStartTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyStartTutorial" );

	this->ProcessEvent ( psfReqNotifyStartTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint )
{
	static UFunction* psfAckRoomUserPingInfo = 0;
	UBTTcpLink_Channel_execsfAckRoomUserPingInfo_Parms parms;

	if ( !psfAckRoomUserPingInfo )
		psfAckRoomUserPingInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRoomUserPingInfo" );

	parms.UnqueID = UnqueID;
	parms.Ping = Ping;
	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( psfAckRoomUserPingInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint )
{
	static UFunction* psfReqRoomUserPingInfo = 0;
	UBTTcpLink_Channel_execsfReqRoomUserPingInfo_Parms parms;

	if ( !psfReqRoomUserPingInfo )
		psfReqRoomUserPingInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRoomUserPingInfo" );

	parms.UnqueID = UnqueID;
	parms.Ping = Ping;
	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( psfReqRoomUserPingInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckMyEquipedQSlotList ( class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< int > TWItemID1, class TArray< struct FBtrDouble > TW2UniqueID, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID, int Result )
{
	static UFunction* psfAckMyEquipedQSlotList = 0;
	UBTTcpLink_Channel_execsfAckMyEquipedQSlotList_Parms parms;

	if ( !psfAckMyEquipedQSlotList )
		psfAckMyEquipedQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckMyEquipedQSlotList" );

	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWUniqueID = MWUniqueID;
	parms.MWItemID = MWItemID;
	parms.MWPartID = MWPartID;
	parms.MWPaintID = MWPaintID;
	parms.PistolUniqueID = PistolUniqueID;
	parms.PistolItemID = PistolItemID;
	parms.PistolPartID = PistolPartID;
	parms.PistolPaintID = PistolPaintID;
	parms.TW1UniqueID = TW1UniqueID;
	parms.TWItemID1 = TWItemID1;
	parms.TW2UniqueID = TW2UniqueID;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1ID = Skill1ID;
	parms.Skill2ID = Skill2ID;
	parms.Skill3ID = Skill3ID;
	parms.Skill4ID = Skill4ID;
	parms.Result = Result;
	this->ProcessEvent ( psfAckMyEquipedQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqMyEquipedQSlotList (  )
{
	static UFunction* psfReqMyEquipedQSlotList = 0;
	UBTTcpLink_Channel_execsfReqMyEquipedQSlotList_Parms parms;

	if ( !psfReqMyEquipedQSlotList )
		psfReqMyEquipedQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqMyEquipedQSlotList" );

	this->ProcessEvent ( psfReqMyEquipedQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckMyEquipedSkillList ( class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result )
{
	static UFunction* psfAckMyEquipedSkillList = 0;
	UBTTcpLink_Channel_execsfAckMyEquipedSkillList_Parms parms;

	if ( !psfAckMyEquipedSkillList )
		psfAckMyEquipedSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckMyEquipedSkillList" );

	parms.SkillIDs = SkillIDs;
	parms.SlotPositions = SlotPositions;
	parms.Result = Result;
	this->ProcessEvent ( psfAckMyEquipedSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqMyEquipedSkillList (  )
{
	static UFunction* psfReqMyEquipedSkillList = 0;
	UBTTcpLink_Channel_execsfReqMyEquipedSkillList_Parms parms;

	if ( !psfReqMyEquipedSkillList )
		psfReqMyEquipedSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqMyEquipedSkillList" );

	this->ProcessEvent ( psfReqMyEquipedSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckMyEquipedItemList ( class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< int > PaintID, class TArray< struct FBtrDouble > UniqueID, int Result )
{
	static UFunction* psfAckMyEquipedItemList = 0;
	UBTTcpLink_Channel_execsfAckMyEquipedItemList_Parms parms;

	if ( !psfAckMyEquipedItemList )
		psfAckMyEquipedItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckMyEquipedItemList" );

	parms.ItemIDs = ItemIDs;
	parms.SlotPositions = SlotPositions;
	parms.AddPartsID = AddPartsID;
	parms.PaintID = PaintID;
	parms.UniqueID = UniqueID;
	parms.Result = Result;
	this->ProcessEvent ( psfAckMyEquipedItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqMyEquipedItemList (  )
{
	static UFunction* psfReqMyEquipedItemList = 0;
	UBTTcpLink_Channel_execsfReqMyEquipedItemList_Parms parms;

	if ( !psfReqMyEquipedItemList )
		psfReqMyEquipedItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqMyEquipedItemList" );

	this->ProcessEvent ( psfReqMyEquipedItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount )
{
	static UFunction* psfAckGetMyMailBoxState = 0;
	UBTTcpLink_Channel_execsfAckGetMyMailBoxState_Parms parms;

	if ( !psfAckGetMyMailBoxState )
		psfAckGetMyMailBoxState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetMyMailBoxState" );

	parms.Result = Result;
	parms.IsFull = IsFull;
	parms.NewMailCount = NewMailCount;
	this->ProcessEvent ( psfAckGetMyMailBoxState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetMyMailBoxState (  )
{
	static UFunction* psfReqGetMyMailBoxState = 0;
	UBTTcpLink_Channel_execsfReqGetMyMailBoxState_Parms parms;

	if ( !psfReqGetMyMailBoxState )
		psfReqGetMyMailBoxState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetMyMailBoxState" );

	this->ProcessEvent ( psfReqGetMyMailBoxState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor )
{
	static UFunction* psfAckSetLookForClan = 0;
	UBTTcpLink_Channel_execsfAckSetLookForClan_Parms parms;

	if ( !psfAckSetLookForClan )
		psfAckSetLookForClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSetLookForClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsLookingFor = IsLookingFor;
	this->ProcessEvent ( psfAckSetLookForClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSetLookForClan ( unsigned char IsLookingFor )
{
	static UFunction* psfReqSetLookForClan = 0;
	UBTTcpLink_Channel_execsfReqSetLookForClan_Parms parms;

	if ( !psfReqSetLookForClan )
		psfReqSetLookForClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSetLookForClan" );

	parms.IsLookingFor = IsLookingFor;
	this->ProcessEvent ( psfReqSetLookForClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckExteriorRoomOwnerInfo (  )
{
	static UFunction* psfAckExteriorRoomOwnerInfo = 0;
	UBTTcpLink_Channel_execsfAckExteriorRoomOwnerInfo_Parms parms;

	if ( !psfAckExteriorRoomOwnerInfo )
		psfAckExteriorRoomOwnerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomOwnerInfo" );

	this->ProcessEvent ( psfAckExteriorRoomOwnerInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP )
{
	static UFunction* psfReqExteriorRoomOwnerInfo = 0;
	UBTTcpLink_Channel_execsfReqExteriorRoomOwnerInfo_Parms parms;

	if ( !psfReqExteriorRoomOwnerInfo )
		psfReqExteriorRoomOwnerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomOwnerInfo" );

	parms.RoomNum = RoomNum;
	parms.OwnerName = OwnerName;
	parms.OwnerIP = OwnerIP;
	this->ProcessEvent ( psfReqExteriorRoomOwnerInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set )
{
	static UFunction* psfAckClanMatch_SetWaitRoomPublic = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_SetWaitRoomPublic_Parms parms;

	if ( !psfAckClanMatch_SetWaitRoomPublic )
		psfAckClanMatch_SetWaitRoomPublic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_SetWaitRoomPublic" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Set = Set;
	this->ProcessEvent ( psfAckClanMatch_SetWaitRoomPublic, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_SetWaitRoomPublic ( unsigned char Set )
{
	static UFunction* psfReqClanMatch_SetWaitRoomPublic = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_SetWaitRoomPublic_Parms parms;

	if ( !psfReqClanMatch_SetWaitRoomPublic )
		psfReqClanMatch_SetWaitRoomPublic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_SetWaitRoomPublic" );

	parms.Set = Set;
	this->ProcessEvent ( psfReqClanMatch_SetWaitRoomPublic, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRemoveCheckTeamBalanceList (  )
{
	static UFunction* psfReqRemoveCheckTeamBalanceList = 0;
	UBTTcpLink_Channel_execsfReqRemoveCheckTeamBalanceList_Parms parms;

	if ( !psfReqRemoveCheckTeamBalanceList )
		psfReqRemoveCheckTeamBalanceList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRemoveCheckTeamBalanceList" );

	this->ProcessEvent ( psfReqRemoveCheckTeamBalanceList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL )
{
	static UFunction* psfAckPaidItem_NotifyChangeClanMark = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_NotifyChangeClanMark_Parms parms;

	if ( !psfAckPaidItem_NotifyChangeClanMark )
		psfAckPaidItem_NotifyChangeClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_NotifyChangeClanMark" );

	parms.ClanName = ClanName;
	parms.Pattern = Pattern;
	parms.BG = BG;
	parms.BL = BL;
	this->ProcessEvent ( psfAckPaidItem_NotifyChangeClanMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount )
{
	static UFunction* psfAckPaidItem_ChangeClanMark = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_ChangeClanMark_Parms parms;

	if ( !psfAckPaidItem_ChangeClanMark )
		psfAckPaidItem_ChangeClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ChangeClanMark" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.StackCount = StackCount;
	this->ProcessEvent ( psfAckPaidItem_ChangeClanMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPaidItem_ChangeClanMark ( struct FBtrDouble ItemIdx, unsigned char IsPaid, int Pattern, int BG, int BL )
{
	static UFunction* psfReqPaidItem_ChangeClanMark = 0;
	UBTTcpLink_Channel_execsfReqPaidItem_ChangeClanMark_Parms parms;

	if ( !psfReqPaidItem_ChangeClanMark )
		psfReqPaidItem_ChangeClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ChangeClanMark" );

	parms.ItemIdx = ItemIdx;
	parms.IsPaid = IsPaid;
	parms.Pattern = Pattern;
	parms.BG = BG;
	parms.BL = BL;
	this->ProcessEvent ( psfReqPaidItem_ChangeClanMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckPaidItem_ClanMarkDupCheck = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_ClanMarkDupCheck_Parms parms;

	if ( !psfAckPaidItem_ClanMarkDupCheck )
		psfAckPaidItem_ClanMarkDupCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ClanMarkDupCheck" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckPaidItem_ClanMarkDupCheck, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPaidItem_ClanMarkDupCheck ( unsigned char IsPaid, int Pattern, int BG, int BL )
{
	static UFunction* psfReqPaidItem_ClanMarkDupCheck = 0;
	UBTTcpLink_Channel_execsfReqPaidItem_ClanMarkDupCheck_Parms parms;

	if ( !psfReqPaidItem_ClanMarkDupCheck )
		psfReqPaidItem_ClanMarkDupCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ClanMarkDupCheck" );

	parms.IsPaid = IsPaid;
	parms.Pattern = Pattern;
	parms.BG = BG;
	parms.BL = BL;
	this->ProcessEvent ( psfReqPaidItem_ClanMarkDupCheck, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg )
{
	static UFunction* psfAckPaidItem_RelayBroadcast = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_RelayBroadcast_Parms parms;

	if ( !psfAckPaidItem_RelayBroadcast )
		psfAckPaidItem_RelayBroadcast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_RelayBroadcast" );

	parms.CharName = CharName;
	parms.Msg = Msg;
	this->ProcessEvent ( psfAckPaidItem_RelayBroadcast, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount )
{
	static UFunction* psfAckPaidItem_BroadCast = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_BroadCast_Parms parms;

	if ( !psfAckPaidItem_BroadCast )
		psfAckPaidItem_BroadCast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_BroadCast" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.StackCount = StackCount;
	this->ProcessEvent ( psfAckPaidItem_BroadCast, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPaidItem_BroadCast ( struct FBtrDouble ItemIdx, int Command, struct FString Message )
{
	static UFunction* psfReqPaidItem_BroadCast = 0;
	UBTTcpLink_Channel_execsfReqPaidItem_BroadCast_Parms parms;

	if ( !psfReqPaidItem_BroadCast )
		psfReqPaidItem_BroadCast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPaidItem_BroadCast" );

	parms.ItemIdx = ItemIdx;
	parms.Command = Command;
	parms.Message = Message;
	this->ProcessEvent ( psfReqPaidItem_BroadCast, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount )
{
	static UFunction* psfAckPaidItem_EraseRecord = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_EraseRecord_Parms parms;

	if ( !psfAckPaidItem_EraseRecord )
		psfAckPaidItem_EraseRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_EraseRecord" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.Command = Command;
	parms.RemainCount = RemainCount;
	this->ProcessEvent ( psfAckPaidItem_EraseRecord, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPaidItem_EraseRecord ( struct FBtrDouble ItemIdx, int Command )
{
	static UFunction* psfReqPaidItem_EraseRecord = 0;
	UBTTcpLink_Channel_execsfReqPaidItem_EraseRecord_Parms parms;

	if ( !psfReqPaidItem_EraseRecord )
		psfReqPaidItem_EraseRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPaidItem_EraseRecord" );

	parms.ItemIdx = ItemIdx;
	parms.Command = Command;
	this->ProcessEvent ( psfReqPaidItem_EraseRecord, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname )
{
	static UFunction* psfAckPaidItem_ChangeCharname = 0;
	UBTTcpLink_Channel_execsfAckPaidItem_ChangeCharname_Parms parms;

	if ( !psfAckPaidItem_ChangeCharname )
		psfAckPaidItem_ChangeCharname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPaidItem_ChangeCharname" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.RemainCount = RemainCount;
	parms.NewCharname = NewCharname;
	this->ProcessEvent ( psfAckPaidItem_ChangeCharname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPaidItem_ChangeCharname ( struct FBtrDouble ItemIdx, struct FString NewCharname )
{
	static UFunction* psfReqPaidItem_ChangeCharname = 0;
	UBTTcpLink_Channel_execsfReqPaidItem_ChangeCharname_Parms parms;

	if ( !psfReqPaidItem_ChangeCharname )
		psfReqPaidItem_ChangeCharname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPaidItem_ChangeCharname" );

	parms.ItemIdx = ItemIdx;
	parms.NewCharname = NewCharname;
	this->ProcessEvent ( psfReqPaidItem_ChangeCharname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo )
{
	static UFunction* psfAckRecvSystemMsg = 0;
	UBTTcpLink_Channel_execsfAckRecvSystemMsg_Parms parms;

	if ( !psfAckRecvSystemMsg )
		psfAckRecvSystemMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRecvSystemMsg" );

	parms.CommunityType = CommunityType;
	parms.MsgInfo = MsgInfo;
	this->ProcessEvent ( psfAckRecvSystemMsg, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSendSystemMsg ( int Result )
{
	static UFunction* psfAckSendSystemMsg = 0;
	UBTTcpLink_Channel_execsfAckSendSystemMsg_Parms parms;

	if ( !psfAckSendSystemMsg )
		psfAckSendSystemMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSendSystemMsg" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckSendSystemMsg, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSendSystemMsg ( unsigned char RecvType, struct FString SendCharName, struct FString RecvCharname, struct FSystemMsgParam MsgInfo )
{
	static UFunction* psfReqSendSystemMsg = 0;
	UBTTcpLink_Channel_execsfReqSendSystemMsg_Parms parms;

	if ( !psfReqSendSystemMsg )
		psfReqSendSystemMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSendSystemMsg" );

	parms.RecvType = RecvType;
	parms.SendCharName = SendCharName;
	parms.RecvCharname = RecvCharname;
	parms.MsgInfo = MsgInfo;
	this->ProcessEvent ( psfReqSendSystemMsg, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount )
{
	static UFunction* psfAckRandomBox_Use = 0;
	UBTTcpLink_Channel_execsfAckRandomBox_Use_Parms parms;

	if ( !psfAckRandomBox_Use )
		psfAckRandomBox_Use = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRandomBox_Use" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RandomBoxItemIdx = RandomBoxItemIdx;
	parms.RandomBxoItemCount = RandomBxoItemCount;
	parms.ItemIDChoose = ItemIDChoose;
	parms.PartIDChoose = PartIDChoose;
	parms.PeriodOnChoosenItem = PeriodOnChoosenItem;
	parms.StackCountOnChoosenItem = StackCountOnChoosenItem;
	parms.bHave = bHave;
	parms.ItemIdx = ItemIdx;
	parms.UntilTime = UntilTime;
	parms.StackCount = StackCount;
	this->ProcessEvent ( psfAckRandomBox_Use, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRandomBox_Use ( struct FBtrDouble ItemIdx )
{
	static UFunction* psfReqRandomBox_Use = 0;
	UBTTcpLink_Channel_execsfReqRandomBox_Use_Parms parms;

	if ( !psfReqRandomBox_Use )
		psfReqRandomBox_Use = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRandomBox_Use" );

	parms.ItemIdx = ItemIdx;
	this->ProcessEvent ( psfReqRandomBox_Use, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle )
{
	static UFunction* psfAckChangedRoomTitle_FromGM = 0;
	UBTTcpLink_Channel_execsfAckChangedRoomTitle_FromGM_Parms parms;

	if ( !psfAckChangedRoomTitle_FromGM )
		psfAckChangedRoomTitle_FromGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangedRoomTitle_FromGM" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.NewRoomTitle = NewRoomTitle;
	this->ProcessEvent ( psfAckChangedRoomTitle_FromGM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle )
{
	static UFunction* psfAckChangeRoomTitle_GM = 0;
	UBTTcpLink_Channel_execsfAckChangeRoomTitle_GM_Parms parms;

	if ( !psfAckChangeRoomTitle_GM )
		psfAckChangeRoomTitle_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeRoomTitle_GM" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.NewRoomTitle = NewRoomTitle;
	this->ProcessEvent ( psfAckChangeRoomTitle_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChangeRoomTitle_GM ( int RoomNumber, struct FString NewRoomTitle )
{
	static UFunction* psfReqChangeRoomTitle_GM = 0;
	UBTTcpLink_Channel_execsfReqChangeRoomTitle_GM_Parms parms;

	if ( !psfReqChangeRoomTitle_GM )
		psfReqChangeRoomTitle_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChangeRoomTitle_GM" );

	parms.RoomNumber = RoomNumber;
	parms.NewRoomTitle = NewRoomTitle;
	this->ProcessEvent ( psfReqChangeRoomTitle_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID )
{
	static UFunction* psfAckGMLeaveRoom = 0;
	UBTTcpLink_Channel_execsfAckGMLeaveRoom_Parms parms;

	if ( !psfAckGMLeaveRoom )
		psfAckGMLeaveRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGMLeaveRoom" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.UserID = UserID;
	this->ProcessEvent ( psfAckGMLeaveRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGMEnterRoom ( int Result, int RoomNumber, int UserID )
{
	static UFunction* psfAckGMEnterRoom = 0;
	UBTTcpLink_Channel_execsfAckGMEnterRoom_Parms parms;

	if ( !psfAckGMEnterRoom )
		psfAckGMEnterRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGMEnterRoom" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.UserID = UserID;
	this->ProcessEvent ( psfAckGMEnterRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID )
{
	static UFunction* psfAckQuestGetAvailableEventList = 0;
	UBTTcpLink_Channel_execsfAckQuestGetAvailableEventList_Parms parms;

	if ( !psfAckQuestGetAvailableEventList )
		psfAckQuestGetAvailableEventList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckQuestGetAvailableEventList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.QuestID = QuestID;
	this->ProcessEvent ( psfAckQuestGetAvailableEventList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqQuestGetAvailableEventList (  )
{
	static UFunction* psfReqQuestGetAvailableEventList = 0;
	UBTTcpLink_Channel_execsfReqQuestGetAvailableEventList_Parms parms;

	if ( !psfReqQuestGetAvailableEventList )
		psfReqQuestGetAvailableEventList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqQuestGetAvailableEventList" );

	this->ProcessEvent ( psfReqQuestGetAvailableEventList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx )
{
	static UFunction* psfAckCharBlockInfo = 0;
	UBTTcpLink_Channel_execsfAckCharBlockInfo_Parms parms;

	if ( !psfAckCharBlockInfo )
		psfAckCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCharBlockInfo" );

	parms.Result = Result;
	parms.ChatBlockStartTime = ChatBlockStartTime;
	parms.ChatBlockEndTime = ChatBlockEndTime;
	parms.BlockedItemIdx = BlockedItemIdx;
	this->ProcessEvent ( psfAckCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCharBlockInfo (  )
{
	static UFunction* psfReqCharBlockInfo = 0;
	UBTTcpLink_Channel_execsfReqCharBlockInfo_Parms parms;

	if ( !psfReqCharBlockInfo )
		psfReqCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCharBlockInfo" );

	this->ProcessEvent ( psfReqCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqIsPaidWebzenPCBang ( unsigned char IsPaid )
{
	static UFunction* psfReqIsPaidWebzenPCBang = 0;
	UBTTcpLink_Channel_execsfReqIsPaidWebzenPCBang_Parms parms;

	if ( !psfReqIsPaidWebzenPCBang )
		psfReqIsPaidWebzenPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqIsPaidWebzenPCBang" );

	parms.IsPaid = IsPaid;
	this->ProcessEvent ( psfReqIsPaidWebzenPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName )
{
	static UFunction* psfAckClanMatch_GetClanWaittingRoomInfo = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_GetClanWaittingRoomInfo_Parms parms;

	if ( !psfAckClanMatch_GetClanWaittingRoomInfo )
		psfAckClanMatch_GetClanWaittingRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_GetClanWaittingRoomInfo" );

	parms.WaitRoomIndex = WaitRoomIndex;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	parms.WaitRoomName = WaitRoomName;
	this->ProcessEvent ( psfAckClanMatch_GetClanWaittingRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_GetClanWaittingRoomInfo (  )
{
	static UFunction* psfReqClanMatch_GetClanWaittingRoomInfo = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_GetClanWaittingRoomInfo_Parms parms;

	if ( !psfReqClanMatch_GetClanWaittingRoomInfo )
		psfReqClanMatch_GetClanWaittingRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_GetClanWaittingRoomInfo" );

	this->ProcessEvent ( psfReqClanMatch_GetClanWaittingRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckReturnBotID ( int Result )
{
	static UFunction* psfAckReturnBotID = 0;
	UBTTcpLink_Channel_execsfAckReturnBotID_Parms parms;

	if ( !psfAckReturnBotID )
		psfAckReturnBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckReturnBotID" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckReturnBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqReturnBotID ( class TArray< int > BotID )
{
	static UFunction* psfReqReturnBotID = 0;
	UBTTcpLink_Channel_execsfReqReturnBotID_Parms parms;

	if ( !psfReqReturnBotID )
		psfReqReturnBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqReturnBotID" );

	parms.BotID = BotID;
	this->ProcessEvent ( psfReqReturnBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID )
{
	static UFunction* psfAckGetBotID = 0;
	UBTTcpLink_Channel_execsfAckGetBotID_Parms parms;

	if ( !psfAckGetBotID )
		psfAckGetBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetBotID" );

	parms.Result = Result;
	parms.RequestedAFCount = RequestedAFCount;
	parms.RequestedRSACount = RequestedRSACount;
	parms.AFBotID = AFBotID;
	parms.RSABotID = RSABotID;
	this->ProcessEvent ( psfAckGetBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetBotID ( unsigned char AFCount, unsigned char RSACount )
{
	static UFunction* psfReqGetBotID = 0;
	UBTTcpLink_Channel_execsfReqGetBotID_Parms parms;

	if ( !psfReqGetBotID )
		psfReqGetBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetBotID" );

	parms.AFCount = AFCount;
	parms.RSACount = RSACount;
	this->ProcessEvent ( psfReqGetBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic )
{
	static UFunction* psfAckClanMatch_ChangeRoomSetting = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_ChangeRoomSetting_Parms parms;

	if ( !psfAckClanMatch_ChangeRoomSetting )
		psfAckClanMatch_ChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_ChangeRoomSetting" );

	parms.WaitRoomIndex = WaitRoomIndex;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	parms.IsPublic = IsPublic;
	this->ProcessEvent ( psfAckClanMatch_ChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_ChangeRoomSetting ( int WaitRoomIndex, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic )
{
	static UFunction* psfReqClanMatch_ChangeRoomSetting = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_ChangeRoomSetting_Parms parms;

	if ( !psfReqClanMatch_ChangeRoomSetting )
		psfReqClanMatch_ChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_ChangeRoomSetting" );

	parms.WaitRoomIndex = WaitRoomIndex;
	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	parms.IsPublic = IsPublic;
	this->ProcessEvent ( psfReqClanMatch_ChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckParamCheckSum ( int Result )
{
	static UFunction* psfAckParamCheckSum = 0;
	UBTTcpLink_Channel_execsfAckParamCheckSum_Parms parms;

	if ( !psfAckParamCheckSum )
		psfAckParamCheckSum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckParamCheckSum" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckParamCheckSum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqParamCheckSum ( struct FString key, struct FString Value )
{
	static UFunction* psfReqParamCheckSum = 0;
	UBTTcpLink_Channel_execsfReqParamCheckSum_Parms parms;

	if ( !psfReqParamCheckSum )
		psfReqParamCheckSum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqParamCheckSum" );

	parms.key = key;
	parms.Value = Value;
	this->ProcessEvent ( psfReqParamCheckSum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra )
{
	static UFunction* psfAckWebzenBillingUseStorageItem = 0;
	UBTTcpLink_Channel_execsfAckWebzenBillingUseStorageItem_Parms parms;

	if ( !psfAckWebzenBillingUseStorageItem )
		psfAckWebzenBillingUseStorageItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingUseStorageItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.ItemID = ItemID;
	parms.ItemExtra = ItemExtra;
	this->ProcessEvent ( psfAckWebzenBillingUseStorageItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqWebzenBillingUseStorageItem ( int StorageSeq, int StorageItemSeq, unsigned char StorageItemType )
{
	static UFunction* psfReqWebzenBillingUseStorageItem = 0;
	UBTTcpLink_Channel_execsfReqWebzenBillingUseStorageItem_Parms parms;

	if ( !psfReqWebzenBillingUseStorageItem )
		psfReqWebzenBillingUseStorageItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqWebzenBillingUseStorageItem" );

	parms.StorageSeq = StorageSeq;
	parms.StorageItemSeq = StorageItemSeq;
	parms.StorageItemType = StorageItemType;
	this->ProcessEvent ( psfReqWebzenBillingUseStorageItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckWebzenBillingStorageListEnd (  )
{
	static UFunction* psfAckWebzenBillingStorageListEnd = 0;
	UBTTcpLink_Channel_execsfAckWebzenBillingStorageListEnd_Parms parms;

	if ( !psfAckWebzenBillingStorageListEnd )
		psfAckWebzenBillingStorageListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingStorageListEnd" );

	this->ProcessEvent ( psfAckWebzenBillingStorageListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq )
{
	static UFunction* psfAckWebzenBillingStorageList = 0;
	UBTTcpLink_Channel_execsfAckWebzenBillingStorageList_Parms parms;

	if ( !psfAckWebzenBillingStorageList )
		psfAckWebzenBillingStorageList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingStorageList" );

	parms.Seq = Seq;
	parms.ItemSeq = ItemSeq;
	parms.GroupCode = GroupCode;
	parms.ShareFlag = ShareFlag;
	parms.ProductSeq = ProductSeq;
	parms.CashName = CashName;
	parms.CashPoint = CashPoint;
	parms.SendAccountID = SendAccountID;
	parms.SendMessage = SendMessage;
	parms.ItemType = ItemType;
	parms.RelationType = RelationType;
	parms.ProductType = ProductType;
	parms.PriceSeq = PriceSeq;
	this->ProcessEvent ( psfAckWebzenBillingStorageList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage )
{
	static UFunction* psfAckWebzenBillingStorageListStart = 0;
	UBTTcpLink_Channel_execsfAckWebzenBillingStorageListStart_Parms parms;

	if ( !psfAckWebzenBillingStorageListStart )
		psfAckWebzenBillingStorageListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckWebzenBillingStorageListStart" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.TotalCount = TotalCount;
	parms.TotalPage = TotalPage;
	parms.CurPage = CurPage;
	this->ProcessEvent ( psfAckWebzenBillingStorageListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqWebzenBillingStorageList ( int Page, int CountForPage, unsigned char Type )
{
	static UFunction* psfReqWebzenBillingStorageList = 0;
	UBTTcpLink_Channel_execsfReqWebzenBillingStorageList_Parms parms;

	if ( !psfReqWebzenBillingStorageList )
		psfReqWebzenBillingStorageList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqWebzenBillingStorageList" );

	parms.Page = Page;
	parms.CountForPage = CountForPage;
	parms.Type = Type;
	this->ProcessEvent ( psfReqWebzenBillingStorageList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount )
{
	static UFunction* psfAckGiftItemByWebzenCash = 0;
	UBTTcpLink_Channel_execsfAckGiftItemByWebzenCash_Parms parms;

	if ( !psfAckGiftItemByWebzenCash )
		psfAckGiftItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGiftItemByWebzenCash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.LeftProductCount = LeftProductCount;
	this->ProcessEvent ( psfAckGiftItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGiftItemByWebzenCash ( struct FString ReceiverCharName, struct FString Message, int PackageProductSeq, int PriceSeq, int ProductDisplaySeq )
{
	static UFunction* psfReqGiftItemByWebzenCash = 0;
	UBTTcpLink_Channel_execsfReqGiftItemByWebzenCash_Parms parms;

	if ( !psfReqGiftItemByWebzenCash )
		psfReqGiftItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGiftItemByWebzenCash" );

	parms.ReceiverCharName = ReceiverCharName;
	parms.Message = Message;
	parms.PackageProductSeq = PackageProductSeq;
	parms.PriceSeq = PriceSeq;
	parms.ProductDisplaySeq = ProductDisplaySeq;
	this->ProcessEvent ( psfReqGiftItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGiftItemByWebzenCashGP20 ( struct FString ReceiverCharName, struct FString Message, int ProductNo, unsigned char Cointype )
{
	static UFunction* psfReqGiftItemByWebzenCashGP20 = 0;
	UBTTcpLink_Channel_execsfReqGiftItemByWebzenCashGP20_Parms parms;

	if ( !psfReqGiftItemByWebzenCashGP20 )
		psfReqGiftItemByWebzenCashGP20 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGiftItemByWebzenCashGP20" );

	parms.ReceiverCharName = ReceiverCharName;
	parms.Message = Message;
	parms.ProductNo = ProductNo;
	parms.Cointype = Cointype;
	this->ProcessEvent ( psfReqGiftItemByWebzenCashGP20, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckBuyItemByWebzenCash = 0;
	UBTTcpLink_Channel_execsfAckBuyItemByWebzenCash_Parms parms;

	if ( !psfAckBuyItemByWebzenCash )
		psfAckBuyItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckBuyItemByWebzenCash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckBuyItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqBuyItemByWebzenCash ( int PackageProductSeq, int ProductDisplaySeq, int PriceSeq, class TArray< int > ItemIDs, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 )
{
	static UFunction* psfReqBuyItemByWebzenCash = 0;
	UBTTcpLink_Channel_execsfReqBuyItemByWebzenCash_Parms parms;

	if ( !psfReqBuyItemByWebzenCash )
		psfReqBuyItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqBuyItemByWebzenCash" );

	parms.PackageProductSeq = PackageProductSeq;
	parms.ProductDisplaySeq = ProductDisplaySeq;
	parms.PriceSeq = PriceSeq;
	parms.ItemIDs = ItemIDs;
	parms.ItemUniqueID = ItemUniqueID;
	parms.BuyOption1 = BuyOption1;
	parms.BuyOption2 = BuyOption2;
	this->ProcessEvent ( psfReqBuyItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqBuyItemByWebzenCashGP20 ( int ProductNo, unsigned char Cointype, struct FBtrDouble ItemID )
{
	static UFunction* psfReqBuyItemByWebzenCashGP20 = 0;
	UBTTcpLink_Channel_execsfReqBuyItemByWebzenCashGP20_Parms parms;

	if ( !psfReqBuyItemByWebzenCashGP20 )
		psfReqBuyItemByWebzenCashGP20 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqBuyItemByWebzenCashGP20" );

	parms.ProductNo = ProductNo;
	parms.Cointype = Cointype;
	parms.ItemID = ItemID;
	this->ProcessEvent ( psfReqBuyItemByWebzenCashGP20, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode )
{
	static UFunction* psfAckWebzenShopScriptVersion = 0;
	UBTTcpLink_Channel_execsfAckWebzenShopScriptVersion_Parms parms;

	if ( !psfAckWebzenShopScriptVersion )
		psfAckWebzenShopScriptVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckWebzenShopScriptVersion" );

	parms.Year = Year;
	parms.YearId = YearId;
	parms.SalesZoneCode = SalesZoneCode;
	this->ProcessEvent ( psfAckWebzenShopScriptVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqWebzenShopScriptVersion (  )
{
	static UFunction* psfReqWebzenShopScriptVersion = 0;
	UBTTcpLink_Channel_execsfReqWebzenShopScriptVersion_Parms parms;

	if ( !psfReqWebzenShopScriptVersion )
		psfReqWebzenShopScriptVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqWebzenShopScriptVersion" );

	this->ProcessEvent ( psfReqWebzenShopScriptVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash )
{
	static UFunction* psfAckWebzenCash = 0;
	UBTTcpLink_Channel_execsfAckWebzenCash_Parms parms;

	if ( !psfAckWebzenCash )
		psfAckWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckWebzenCash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PCoinCash = PCoinCash;
	parms.CCoinCash = CCoinCash;
	this->ProcessEvent ( psfAckWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqWebzenCash (  )
{
	static UFunction* psfReqWebzenCash = 0;
	UBTTcpLink_Channel_execsfReqWebzenCash_Parms parms;

	if ( !psfReqWebzenCash )
		psfReqWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqWebzenCash" );

	this->ProcessEvent ( psfReqWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName )
{
	static UFunction* psfAckRegisteredPCBangInfo = 0;
	UBTTcpLink_Channel_execsfAckRegisteredPCBangInfo_Parms parms;

	if ( !psfAckRegisteredPCBangInfo )
		psfAckRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRegisteredPCBangInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsRegisteredPCBang = IsRegisteredPCBang;
	parms.IsMainPCBang = IsMainPCBang;
	parms.PCBangName = PCBangName;
	this->ProcessEvent ( psfAckRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRegisteredPCBangInfo (  )
{
	static UFunction* psfReqRegisteredPCBangInfo = 0;
	UBTTcpLink_Channel_execsfReqRegisteredPCBangInfo_Parms parms;

	if ( !psfReqRegisteredPCBangInfo )
		psfReqRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRegisteredPCBangInfo" );

	this->ProcessEvent ( psfReqRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRegisterMainPCBang ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckRegisterMainPCBang = 0;
	UBTTcpLink_Channel_execsfAckRegisterMainPCBang_Parms parms;

	if ( !psfAckRegisterMainPCBang )
		psfAckRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRegisterMainPCBang" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRegisterMainPCBang (  )
{
	static UFunction* psfReqRegisterMainPCBang = 0;
	UBTTcpLink_Channel_execsfReqRegisterMainPCBang_Parms parms;

	if ( !psfReqRegisterMainPCBang )
		psfReqRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRegisterMainPCBang" );

	this->ProcessEvent ( psfReqRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPCBangUserListEnd (  )
{
	static UFunction* psfAckPCBangUserListEnd = 0;
	UBTTcpLink_Channel_execsfAckPCBangUserListEnd_Parms parms;

	if ( !psfAckPCBangUserListEnd )
		psfAckPCBangUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPCBangUserListEnd" );

	this->ProcessEvent ( psfAckPCBangUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* psfAckPCBangUserList = 0;
	UBTTcpLink_Channel_execsfAckPCBangUserList_Parms parms;

	if ( !psfAckPCBangUserList )
		psfAckPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPCBangUserList" );

	parms.FriendName = FriendName;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.Level = Level;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookForClan = IsLookForClan;
	parms.IsCombat = IsCombat;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPCBangUserListStart ( int Result, int TotalCount )
{
	static UFunction* psfAckPCBangUserListStart = 0;
	UBTTcpLink_Channel_execsfAckPCBangUserListStart_Parms parms;

	if ( !psfAckPCBangUserListStart )
		psfAckPCBangUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPCBangUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckPCBangUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPCBangUserList (  )
{
	static UFunction* psfReqPCBangUserList = 0;
	UBTTcpLink_Channel_execsfReqPCBangUserList_Parms parms;

	if ( !psfReqPCBangUserList )
		psfReqPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPCBangUserList" );

	this->ProcessEvent ( psfReqPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID )
{
	static UFunction* psfReqDailyQuestNewAvailable = 0;
	UBTTcpLink_Channel_execsfReqDailyQuestNewAvailable_Parms parms;

	if ( !psfReqDailyQuestNewAvailable )
		psfReqDailyQuestNewAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDailyQuestNewAvailable" );

	parms.ExpiredQuestID = ExpiredQuestID;
	parms.NewQuestID = NewQuestID;
	this->ProcessEvent ( psfReqDailyQuestNewAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest )
{
	static UFunction* psfReqQuestNewAvailable = 0;
	UBTTcpLink_Channel_execsfReqQuestNewAvailable_Parms parms;

	if ( !psfReqQuestNewAvailable )
		psfReqQuestNewAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqQuestNewAvailable" );

	parms.AchivedQuestID = AchivedQuestID;
	parms.NewQuestID = NewQuestID;
	parms.IsDailyQuest = IsDailyQuest;
	parms.ExpiredQuest = ExpiredQuest;
	this->ProcessEvent ( psfReqQuestNewAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckQuestUpdate ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckQuestUpdate = 0;
	UBTTcpLink_Channel_execsfAckQuestUpdate_Parms parms;

	if ( !psfAckQuestUpdate )
		psfAckQuestUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckQuestUpdate" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckQuestUpdate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqQuestUpdate ( int UniqueID, int GameRoomNum, class TArray< int > QuestID, class TArray< int > CountPrograss )
{
	static UFunction* psfReqQuestUpdate = 0;
	UBTTcpLink_Channel_execsfReqQuestUpdate_Parms parms;

	if ( !psfReqQuestUpdate )
		psfReqQuestUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqQuestUpdate" );

	parms.UniqueID = UniqueID;
	parms.GameRoomNum = GameRoomNum;
	parms.QuestID = QuestID;
	parms.CountPrograss = CountPrograss;
	this->ProcessEvent ( psfReqQuestUpdate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckQuestListEnd (  )
{
	static UFunction* psfAckQuestListEnd = 0;
	UBTTcpLink_Channel_execsfAckQuestListEnd_Parms parms;

	if ( !psfAckQuestListEnd )
		psfAckQuestListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckQuestListEnd" );

	this->ProcessEvent ( psfAckQuestListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest )
{
	static UFunction* psfAckQuestList = 0;
	UBTTcpLink_Channel_execsfAckQuestList_Parms parms;

	if ( !psfAckQuestList )
		psfAckQuestList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckQuestList" );

	parms.QuestID = QuestID;
	parms.CountPrograss = CountPrograss;
	parms.IsDailyQuest = IsDailyQuest;
	this->ProcessEvent ( psfAckQuestList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckQuestListStart ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckQuestListStart = 0;
	UBTTcpLink_Channel_execsfAckQuestListStart_Parms parms;

	if ( !psfAckQuestListStart )
		psfAckQuestListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckQuestListStart" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckQuestListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqQuestList (  )
{
	static UFunction* psfReqQuestList = 0;
	UBTTcpLink_Channel_execsfReqQuestList_Parms parms;

	if ( !psfReqQuestList )
		psfReqQuestList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqQuestList" );

	this->ProcessEvent ( psfReqQuestList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckPermanentRoomInfo ( int Result, int ClanIdx, unsigned char FixedGameMode, unsigned char FixedMaxUserCnt )
{
	static UFunction* psfAckPermanentRoomInfo = 0;
	UBTTcpLink_Channel_execsfAckPermanentRoomInfo_Parms parms;

	if ( !psfAckPermanentRoomInfo )
		psfAckPermanentRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckPermanentRoomInfo" );

	parms.Result = Result;
	parms.ClanIdx = ClanIdx;
	parms.FixedGameMode = FixedGameMode;
	parms.FixedMaxUserCnt = FixedMaxUserCnt;
	this->ProcessEvent ( psfAckPermanentRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqPermanentRoomInfo ( int RoomNum )
{
	static UFunction* psfReqPermanentRoomInfo = 0;
	UBTTcpLink_Channel_execsfReqPermanentRoomInfo_Parms parms;

	if ( !psfReqPermanentRoomInfo )
		psfReqPermanentRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqPermanentRoomInfo" );

	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfReqPermanentRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_FoundMatch (  )
{
	static UFunction* psfAckClanMatch_FoundMatch = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_FoundMatch_Parms parms;

	if ( !psfAckClanMatch_FoundMatch )
		psfAckClanMatch_FoundMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_FoundMatch" );

	this->ProcessEvent ( psfAckClanMatch_FoundMatch, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber )
{
	static UFunction* psfReqClanMatch_FoundMatch = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_FoundMatch_Parms parms;

	if ( !psfReqClanMatch_FoundMatch )
		psfReqClanMatch_FoundMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_FoundMatch" );

	parms.ChannelID = ChannelID;
	parms.RoomNumber = RoomNumber;
	this->ProcessEvent ( psfReqClanMatch_FoundMatch, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore )
{
	static UFunction* psfAckClanMatch_NotifyStartSearching = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_NotifyStartSearching_Parms parms;

	if ( !psfAckClanMatch_NotifyStartSearching )
		psfAckClanMatch_NotifyStartSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_NotifyStartSearching" );

	parms.ShouldWaitMore = ShouldWaitMore;
	this->ProcessEvent ( psfAckClanMatch_NotifyStartSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore )
{
	static UFunction* psfAckClanMatch_StartSearching = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_StartSearching_Parms parms;

	if ( !psfAckClanMatch_StartSearching )
		psfAckClanMatch_StartSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StartSearching" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ShouldWaitMore = ShouldWaitMore;
	this->ProcessEvent ( psfAckClanMatch_StartSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_StartSearching ( int RequestCount )
{
	static UFunction* psfReqClanMatch_StartSearching = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_StartSearching_Parms parms;

	if ( !psfReqClanMatch_StartSearching )
		psfReqClanMatch_StartSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_StartSearching" );

	parms.RequestCount = RequestCount;
	this->ProcessEvent ( psfReqClanMatch_StartSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID )
{
	static UFunction* psfAckLimitedListInChannel = 0;
	UBTTcpLink_Channel_execsfAckLimitedListInChannel_Parms parms;

	if ( !psfAckLimitedListInChannel )
		psfAckLimitedListInChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckLimitedListInChannel" );

	parms.Result = Result;
	parms.LimitedMapID = LimitedMapID;
	parms.LimitedModeID = LimitedModeID;
	this->ProcessEvent ( psfAckLimitedListInChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLimitedListInChannel (  )
{
	static UFunction* psfReqLimitedListInChannel = 0;
	UBTTcpLink_Channel_execsfReqLimitedListInChannel_Parms parms;

	if ( !psfReqLimitedListInChannel )
		psfReqLimitedListInChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLimitedListInChannel" );

	this->ProcessEvent ( psfReqLimitedListInChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRecvInviteGameRoomResult ( int Result )
{
	static UFunction* psfAckRecvInviteGameRoomResult = 0;
	UBTTcpLink_Channel_execsfAckRecvInviteGameRoomResult_Parms parms;

	if ( !psfAckRecvInviteGameRoomResult )
		psfAckRecvInviteGameRoomResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRecvInviteGameRoomResult" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckRecvInviteGameRoomResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRecvInviteGameRoom ( struct FString RoomUniqueID, int RoomNumber, unsigned char Answer, struct FString InviteCharName )
{
	static UFunction* psfAckRecvInviteGameRoom = 0;
	UBTTcpLink_Channel_execsfAckRecvInviteGameRoom_Parms parms;

	if ( !psfAckRecvInviteGameRoom )
		psfAckRecvInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRecvInviteGameRoom" );

	parms.RoomUniqueID = RoomUniqueID;
	parms.RoomNumber = RoomNumber;
	parms.Answer = Answer;
	parms.InviteCharName = InviteCharName;
	this->ProcessEvent ( psfAckRecvInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName )
{
	static UFunction* psfReqRecvInviteGameRoom = 0;
	UBTTcpLink_Channel_execsfReqRecvInviteGameRoom_Parms parms;

	if ( !psfReqRecvInviteGameRoom )
		psfReqRecvInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvInviteGameRoom" );

	parms.InviteUserServerName = InviteUserServerName;
	parms.InviteUserServerID = InviteUserServerID;
	parms.InviteUserChannelNumber = InviteUserChannelNumber;
	parms.RoomUniqueID = RoomUniqueID;
	parms.RoomNumber = RoomNumber;
	parms.RoomName = RoomName;
	parms.RoomState = RoomState;
	parms.MapName = MapName;
	parms.OwnerName = OwnerName;
	parms.GameMode = GameMode;
	parms.WeaponLimit = WeaponLimit;
	parms.IsTeamBalance = IsTeamBalance;
	parms.Password = Password;
	parms.InviteCharName = InviteCharName;
	this->ProcessEvent ( psfReqRecvInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName )
{
	static UFunction* psfAckInviteGameRoom = 0;
	UBTTcpLink_Channel_execsfAckInviteGameRoom_Parms parms;

	if ( !psfAckInviteGameRoom )
		psfAckInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckInviteGameRoom" );

	parms.Result = Result;
	parms.Answer = Answer;
	parms.GuestCharName = GuestCharName;
	this->ProcessEvent ( psfAckInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqInviteGameRoom ( struct FString GuestCharName )
{
	static UFunction* psfReqInviteGameRoom = 0;
	UBTTcpLink_Channel_execsfReqInviteGameRoom_Parms parms;

	if ( !psfReqInviteGameRoom )
		psfReqInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqInviteGameRoom" );

	parms.GuestCharName = GuestCharName;
	this->ProcessEvent ( psfReqInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_StopSearching (  )
{
	static UFunction* psfAckClanMatch_StopSearching = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_StopSearching_Parms parms;

	if ( !psfAckClanMatch_StopSearching )
		psfAckClanMatch_StopSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StopSearching" );

	this->ProcessEvent ( psfAckClanMatch_StopSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_StopSearching (  )
{
	static UFunction* psfReqClanMatch_StopSearching = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_StopSearching_Parms parms;

	if ( !psfReqClanMatch_StopSearching )
		psfReqClanMatch_StopSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_StopSearching" );

	this->ProcessEvent ( psfReqClanMatch_StopSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName )
{
	static UFunction* psfAckClanMatch_ChangeLeader = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_ChangeLeader_Parms parms;

	if ( !psfAckClanMatch_ChangeLeader )
		psfAckClanMatch_ChangeLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_ChangeLeader" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.NewLeader = NewLeader;
	parms.NewLeaderName = NewLeaderName;
	this->ProcessEvent ( psfAckClanMatch_ChangeLeader, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_ChangeLeader ( int WaitRoomIdx, int NewLeaderID, struct FString NewLeaderName )
{
	static UFunction* psfReqClanMatch_ChangeLeader = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_ChangeLeader_Parms parms;

	if ( !psfReqClanMatch_ChangeLeader )
		psfReqClanMatch_ChangeLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_ChangeLeader" );

	parms.WaitRoomIdx = WaitRoomIdx;
	parms.NewLeaderID = NewLeaderID;
	parms.NewLeaderName = NewLeaderName;
	this->ProcessEvent ( psfReqClanMatch_ChangeLeader, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus )
{
	static UFunction* psfAckClanMatch_WaittingTeamList = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_WaittingTeamList_Parms parms;

	if ( !psfAckClanMatch_WaittingTeamList )
		psfAckClanMatch_WaittingTeamList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_WaittingTeamList" );

	parms.TtotlCount = TtotlCount;
	parms.Grade = Grade;
	parms.Map = Map;
	parms.Versus = Versus;
	this->ProcessEvent ( psfAckClanMatch_WaittingTeamList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_WaittingTeamList ( int StartIndex, int ReturnCount )
{
	static UFunction* psfReqClanMatch_WaittingTeamList = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_WaittingTeamList_Parms parms;

	if ( !psfReqClanMatch_WaittingTeamList )
		psfReqClanMatch_WaittingTeamList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_WaittingTeamList" );

	parms.StartIndex = StartIndex;
	parms.ReturnCount = ReturnCount;
	this->ProcessEvent ( psfReqClanMatch_WaittingTeamList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString CharName, struct FString Msg )
{
	static UFunction* psfAckClanMatch_Chat = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_Chat_Parms parms;

	if ( !psfAckClanMatch_Chat )
		psfAckClanMatch_Chat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_Chat" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.CharName = CharName;
	parms.Msg = Msg;
	this->ProcessEvent ( psfAckClanMatch_Chat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_Chat ( struct FString Msg )
{
	static UFunction* psfReqClanMatch_Chat = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_Chat_Parms parms;

	if ( !psfReqClanMatch_Chat )
		psfReqClanMatch_Chat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_Chat" );

	parms.Msg = Msg;
	this->ProcessEvent ( psfReqClanMatch_Chat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_LeaveNotify ( struct FString CharName )
{
	static UFunction* psfAckClanMatch_LeaveNotify = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_LeaveNotify_Parms parms;

	if ( !psfAckClanMatch_LeaveNotify )
		psfAckClanMatch_LeaveNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_LeaveNotify" );

	parms.CharName = CharName;
	this->ProcessEvent ( psfAckClanMatch_LeaveNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_Leave ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckClanMatch_Leave = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_Leave_Parms parms;

	if ( !psfAckClanMatch_Leave )
		psfAckClanMatch_Leave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_Leave" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckClanMatch_Leave, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_Leave ( int WaittingID )
{
	static UFunction* psfReqClanMatch_Leave = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_Leave_Parms parms;

	if ( !psfReqClanMatch_Leave )
		psfReqClanMatch_Leave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_Leave" );

	parms.WaittingID = WaittingID;
	this->ProcessEvent ( psfReqClanMatch_Leave, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* psfAckClanMatch_MemberList = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_MemberList_Parms parms;

	if ( !psfAckClanMatch_MemberList )
		psfAckClanMatch_MemberList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_MemberList" );

	parms.IsLeader = IsLeader;
	parms.ClanMarkPA = ClanMarkPA;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.ClanName = ClanName;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckClanMatch_MemberList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_MemberList (  )
{
	static UFunction* psfReqClanMatch_MemberList = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_MemberList_Parms parms;

	if ( !psfReqClanMatch_MemberList )
		psfReqClanMatch_MemberList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_MemberList" );

	this->ProcessEvent ( psfReqClanMatch_MemberList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* psfAckClanMatch_JoinNotify = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_JoinNotify_Parms parms;

	if ( !psfAckClanMatch_JoinNotify )
		psfAckClanMatch_JoinNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_JoinNotify" );

	parms.IsLeader = IsLeader;
	parms.ClanMarkPA = ClanMarkPA;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.ClanName = ClanName;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckClanMatch_JoinNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_Join ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckClanMatch_Join = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_Join_Parms parms;

	if ( !psfAckClanMatch_Join )
		psfAckClanMatch_Join = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_Join" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckClanMatch_Join, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_Join ( int WaittingID )
{
	static UFunction* psfReqClanMatch_Join = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_Join_Parms parms;

	if ( !psfReqClanMatch_Join )
		psfReqClanMatch_Join = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_Join" );

	parms.WaittingID = WaittingID;
	this->ProcessEvent ( psfReqClanMatch_Join, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result )
{
	static UFunction* psfReqClanMatch_InviteCrewResult = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_InviteCrewResult_Parms parms;

	if ( !psfReqClanMatch_InviteCrewResult )
		psfReqClanMatch_InviteCrewResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_InviteCrewResult" );

	parms.Invitee = Invitee;
	parms.Result = Result;
	this->ProcessEvent ( psfReqClanMatch_InviteCrewResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_RecvInviteCrew ( int Result, struct FString Inviter )
{
	static UFunction* psfAckClanMatch_RecvInviteCrew = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_RecvInviteCrew_Parms parms;

	if ( !psfAckClanMatch_RecvInviteCrew )
		psfAckClanMatch_RecvInviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_RecvInviteCrew" );

	parms.Result = Result;
	parms.Inviter = Inviter;
	this->ProcessEvent ( psfAckClanMatch_RecvInviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName )
{
	static UFunction* psfReqClanMatch_RecvInviteCrew = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_RecvInviteCrew_Parms parms;

	if ( !psfReqClanMatch_RecvInviteCrew )
		psfReqClanMatch_RecvInviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_RecvInviteCrew" );

	parms.Inviter = Inviter;
	parms.ServerIP = ServerIP;
	parms.Port = Port;
	parms.WaittingID = WaittingID;
	parms.Msg = Msg;
	parms.MapNum = MapNum;
	parms.InviteUserChannelNum = InviteUserChannelNum;
	parms.LeaderName = LeaderName;
	parms.RoomName = RoomName;
	this->ProcessEvent ( psfReqClanMatch_RecvInviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckClanMatch_InviteCrew = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_InviteCrew_Parms parms;

	if ( !psfAckClanMatch_InviteCrew )
		psfAckClanMatch_InviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_InviteCrew" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckClanMatch_InviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_InviteCrew ( struct FString Invitee )
{
	static UFunction* psfReqClanMatch_InviteCrew = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_InviteCrew_Parms parms;

	if ( !psfReqClanMatch_InviteCrew )
		psfReqClanMatch_InviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_InviteCrew" );

	parms.Invitee = Invitee;
	this->ProcessEvent ( psfReqClanMatch_InviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode )
{
	static UFunction* psfAckClanMatch_NotifiyStartCombat = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_NotifiyStartCombat_Parms parms;

	if ( !psfAckClanMatch_NotifiyStartCombat )
		psfAckClanMatch_NotifiyStartCombat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_NotifiyStartCombat" );

	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	this->ProcessEvent ( psfAckClanMatch_NotifiyStartCombat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckClanMatch_StartCombat = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_StartCombat_Parms parms;

	if ( !psfAckClanMatch_StartCombat )
		psfAckClanMatch_StartCombat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_StartCombat" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckClanMatch_StartCombat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_StartCombat ( class TArray< int > MapNumArray, int VersusMode )
{
	static UFunction* psfReqClanMatch_StartCombat = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_StartCombat_Parms parms;

	if ( !psfReqClanMatch_StartCombat )
		psfReqClanMatch_StartCombat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_StartCombat" );

	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	this->ProcessEvent ( psfReqClanMatch_StartCombat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex )
{
	static UFunction* psfAckClanMatch_GetReady = 0;
	UBTTcpLink_Channel_execsfAckClanMatch_GetReady_Parms parms;

	if ( !psfAckClanMatch_GetReady )
		psfAckClanMatch_GetReady = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanMatch_GetReady" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RoomIndex = RoomIndex;
	this->ProcessEvent ( psfAckClanMatch_GetReady, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanMatch_GetReady (  )
{
	static UFunction* psfReqClanMatch_GetReady = 0;
	UBTTcpLink_Channel_execsfReqClanMatch_GetReady_Parms parms;

	if ( !psfReqClanMatch_GetReady )
		psfReqClanMatch_GetReady = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanMatch_GetReady" );

	this->ProcessEvent ( psfReqClanMatch_GetReady, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum )
{
	static UFunction* psfAckAutoChangedTeamUserList = 0;
	UBTTcpLink_Channel_execsfAckAutoChangedTeamUserList_Parms parms;

	if ( !psfAckAutoChangedTeamUserList )
		psfAckAutoChangedTeamUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAutoChangedTeamUserList" );

	parms.UserID = UserID;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( psfAckAutoChangedTeamUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount )
{
	static UFunction* psfAckGetItemFromItemBox = 0;
	UBTTcpLink_Channel_execsfAckGetItemFromItemBox_Parms parms;

	if ( !psfAckGetItemFromItemBox )
		psfAckGetItemFromItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetItemFromItemBox" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIDChoose = ItemIDChoose;
	parms.PartIDChoose = PartIDChoose;
	parms.BoxItemIdx = BoxItemIdx;
	parms.BxoItemCount = BxoItemCount;
	parms.bHave = bHave;
	parms.ItemIdx = ItemIdx;
	parms.UntilTime = UntilTime;
	parms.StackCount = StackCount;
	this->ProcessEvent ( psfAckGetItemFromItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetItemFromItemBox ( struct FBtrDouble ItemUniqueID, int ItemID, int ItemIDChoose, int PartIDChoose )
{
	static UFunction* psfReqGetItemFromItemBox = 0;
	UBTTcpLink_Channel_execsfReqGetItemFromItemBox_Parms parms;

	if ( !psfReqGetItemFromItemBox )
		psfReqGetItemFromItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetItemFromItemBox" );

	parms.ItemUniqueID = ItemUniqueID;
	parms.ItemID = ItemID;
	parms.ItemIDChoose = ItemIDChoose;
	parms.PartIDChoose = PartIDChoose;
	this->ProcessEvent ( psfReqGetItemFromItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID )
{
	static UFunction* psfAckItemListInItemBox = 0;
	UBTTcpLink_Channel_execsfAckItemListInItemBox_Parms parms;

	if ( !psfAckItemListInItemBox )
		psfAckItemListInItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckItemListInItemBox" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemUniqueID = ItemUniqueID;
	parms.BoxItemID = BoxItemID;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	this->ProcessEvent ( psfAckItemListInItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqItemListInItemBox ( struct FBtrDouble ItemUniqueID, int BoxItemID )
{
	static UFunction* psfReqItemListInItemBox = 0;
	UBTTcpLink_Channel_execsfReqItemListInItemBox_Parms parms;

	if ( !psfReqItemListInItemBox )
		psfReqItemListInItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqItemListInItemBox" );

	parms.ItemUniqueID = ItemUniqueID;
	parms.BoxItemID = BoxItemID;
	this->ProcessEvent ( psfReqItemListInItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvForceFailedClientLoading ( int ErrCode )
{
	static UFunction* psfReqRecvForceFailedClientLoading = 0;
	UBTTcpLink_Channel_execsfReqRecvForceFailedClientLoading_Parms parms;

	if ( !psfReqRecvForceFailedClientLoading )
		psfReqRecvForceFailedClientLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvForceFailedClientLoading" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( psfReqRecvForceFailedClientLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckForceFailedClientLoading ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckForceFailedClientLoading = 0;
	UBTTcpLink_Channel_execsfAckForceFailedClientLoading_Parms parms;

	if ( !psfAckForceFailedClientLoading )
		psfAckForceFailedClientLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckForceFailedClientLoading" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckForceFailedClientLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqForceFailedClientLoading ( int FailedUserID, int ErrCode )
{
	static UFunction* psfReqForceFailedClientLoading = 0;
	UBTTcpLink_Channel_execsfReqForceFailedClientLoading_Parms parms;

	if ( !psfReqForceFailedClientLoading )
		psfReqForceFailedClientLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqForceFailedClientLoading" );

	parms.FailedUserID = FailedUserID;
	parms.ErrCode = ErrCode;
	this->ProcessEvent ( psfReqForceFailedClientLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID )
{
	static UFunction* psfAckStartHolePunching = 0;
	UBTTcpLink_Channel_execsfAckStartHolePunching_Parms parms;

	if ( !psfAckStartHolePunching )
		psfAckStartHolePunching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckStartHolePunching" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.GameType = GameType;
	parms.ReqStartUserID = ReqStartUserID;
	this->ProcessEvent ( psfAckStartHolePunching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqStartHolePunching ( int GameType, int ReqStartUserID )
{
	static UFunction* psfReqStartHolePunching = 0;
	UBTTcpLink_Channel_execsfReqStartHolePunching_Parms parms;

	if ( !psfReqStartHolePunching )
		psfReqStartHolePunching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqStartHolePunching" );

	parms.GameType = GameType;
	parms.ReqStartUserID = ReqStartUserID;
	this->ProcessEvent ( psfReqStartHolePunching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor )
{
	static UFunction* psfAckNotifyMyCharInfoToRoomUser = 0;
	UBTTcpLink_Channel_execsfAckNotifyMyCharInfoToRoomUser_Parms parms;

	if ( !psfAckNotifyMyCharInfoToRoomUser )
		psfAckNotifyMyCharInfoToRoomUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyMyCharInfoToRoomUser" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UID = UID;
	parms.UserName = UserName;
	parms.Grade = Grade;
	parms.TeamNum = TeamNum;
	parms.Statue = Statue;
	parms.IsHost = IsHost;
	parms.UserIP = UserIP;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.IsLookFor = IsLookFor;
	this->ProcessEvent ( psfAckNotifyMyCharInfoToRoomUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyMyCharInfoToRoomUser (  )
{
	static UFunction* psfReqNotifyMyCharInfoToRoomUser = 0;
	UBTTcpLink_Channel_execsfReqNotifyMyCharInfoToRoomUser_Parms parms;

	if ( !psfReqNotifyMyCharInfoToRoomUser )
		psfReqNotifyMyCharInfoToRoomUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyMyCharInfoToRoomUser" );

	this->ProcessEvent ( psfReqNotifyMyCharInfoToRoomUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos )
{
	static UFunction* psfReqNotifyDurabilityZeroItem = 0;
	UBTTcpLink_Channel_execsfReqNotifyDurabilityZeroItem_Parms parms;

	if ( !psfReqNotifyDurabilityZeroItem )
		psfReqNotifyDurabilityZeroItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyDurabilityZeroItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.ItemUniqueIDs = ItemUniqueIDs;
	parms.ItemIDs = ItemIDs;
	parms.ItemPartIDs = ItemPartIDs;
	parms.ItemSlotPos = ItemSlotPos;
	this->ProcessEvent ( psfReqNotifyDurabilityZeroItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChatWispherMyCommunity ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckChatWispherMyCommunity = 0;
	UBTTcpLink_Channel_execsfAckChatWispherMyCommunity_Parms parms;

	if ( !psfAckChatWispherMyCommunity )
		psfAckChatWispherMyCommunity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChatWispherMyCommunity" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckChatWispherMyCommunity, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChatWispherMyCommunity ( struct FString SourceCharName, struct FString SenderName, struct FString Msg )
{
	static UFunction* psfReqChatWispherMyCommunity = 0;
	UBTTcpLink_Channel_execsfReqChatWispherMyCommunity_Parms parms;

	if ( !psfReqChatWispherMyCommunity )
		psfReqChatWispherMyCommunity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChatWispherMyCommunity" );

	parms.SourceCharName = SourceCharName;
	parms.SenderName = SenderName;
	parms.Msg = Msg;
	this->ProcessEvent ( psfReqChatWispherMyCommunity, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID )
{
	static UFunction* psfReqNotifyDisconnectHostInLoading = 0;
	UBTTcpLink_Channel_execsfReqNotifyDisconnectHostInLoading_Parms parms;

	if ( !psfReqNotifyDisconnectHostInLoading )
		psfReqNotifyDisconnectHostInLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyDisconnectHostInLoading" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.HostID = HostID;
	this->ProcessEvent ( psfReqNotifyDisconnectHostInLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg )
{
	static UFunction* psfReqRecvForceDisconnected_FromGM = 0;
	UBTTcpLink_Channel_execsfReqRecvForceDisconnected_FromGM_Parms parms;

	if ( !psfReqRecvForceDisconnected_FromGM )
		psfReqRecvForceDisconnected_FromGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvForceDisconnected_FromGM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfReqRecvForceDisconnected_FromGM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName )
{
	static UFunction* psfAckForceDisconnectUser_GM = 0;
	UBTTcpLink_Channel_execsfAckForceDisconnectUser_GM_Parms parms;

	if ( !psfAckForceDisconnectUser_GM )
		psfAckForceDisconnectUser_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckForceDisconnectUser_GM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.CharName = CharName;
	this->ProcessEvent ( psfAckForceDisconnectUser_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqForceDisconnectUser_GM ( struct FString CharName )
{
	static UFunction* psfReqForceDisconnectUser_GM = 0;
	UBTTcpLink_Channel_execsfReqForceDisconnectUser_GM_Parms parms;

	if ( !psfReqForceDisconnectUser_GM )
		psfReqForceDisconnectUser_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqForceDisconnectUser_GM" );

	parms.CharName = CharName;
	this->ProcessEvent ( psfReqForceDisconnectUser_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB )
{
	static UFunction* psfReqRecvNotice_FromGM = 0;
	UBTTcpLink_Channel_execsfReqRecvNotice_FromGM_Parms parms;

	if ( !psfReqRecvNotice_FromGM )
		psfReqRecvNotice_FromGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvNotice_FromGM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.NoticeMsg = NoticeMsg;
	parms.IsFromDB = IsFromDB;
	this->ProcessEvent ( psfReqRecvNotice_FromGM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg )
{
	static UFunction* psfAckNotice_GM = 0;
	UBTTcpLink_Channel_execsfAckNotice_GM_Parms parms;

	if ( !psfAckNotice_GM )
		psfAckNotice_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotice_GM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.NoticeType = NoticeType;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.GameRoomNum = GameRoomNum;
	parms.Msg = Msg;
	this->ProcessEvent ( psfAckNotice_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotice_GM ( unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg )
{
	static UFunction* psfReqNotice_GM = 0;
	UBTTcpLink_Channel_execsfReqNotice_GM_Parms parms;

	if ( !psfReqNotice_GM )
		psfReqNotice_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotice_GM" );

	parms.NoticeType = NoticeType;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.GameRoomNum = GameRoomNum;
	parms.Msg = Msg;
	this->ProcessEvent ( psfReqNotice_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSpecificChannelUserInfo ( int UID, struct FString UserID, int UserLevels, struct FString ClanName, int ClanPattern, int ClanBG, int ClanBL, int Result, struct FString ErrMsg, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* psfAckSpecificChannelUserInfo = 0;
	UBTTcpLink_Channel_execsfAckSpecificChannelUserInfo_Parms parms;

	if ( !psfAckSpecificChannelUserInfo )
		psfAckSpecificChannelUserInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSpecificChannelUserInfo" );

	parms.UID = UID;
	parms.UserID = UserID;
	parms.UserLevels = UserLevels;
	parms.ClanName = ClanName;
	parms.ClanPattern = ClanPattern;
	parms.ClanBG = ClanBG;
	parms.ClanBL = ClanBL;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckSpecificChannelUserInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSpecificChannelUserInfo ( int UserID )
{
	static UFunction* psfReqSpecificChannelUserInfo = 0;
	UBTTcpLink_Channel_execsfReqSpecificChannelUserInfo_Parms parms;

	if ( !psfReqSpecificChannelUserInfo )
		psfReqSpecificChannelUserInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSpecificChannelUserInfo" );

	parms.UserID = UserID;
	this->ProcessEvent ( psfReqSpecificChannelUserInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSpecificGameRoomInfo ( int Result, int GameNum, struct FString Title, struct FString MapName, int MapNum, unsigned char UserCount, unsigned char MaxCount, struct FString GameModeName, int ModeNum, unsigned char WeaponLimit, unsigned char IsHardCore, unsigned char Status, struct FString RoomOwnerIP, int GameMinute, struct FString RoomOwnerName, unsigned char IsSpecial, unsigned char IsPassword )
{
	static UFunction* psfAckSpecificGameRoomInfo = 0;
	UBTTcpLink_Channel_execsfAckSpecificGameRoomInfo_Parms parms;

	if ( !psfAckSpecificGameRoomInfo )
		psfAckSpecificGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSpecificGameRoomInfo" );

	parms.Result = Result;
	parms.GameNum = GameNum;
	parms.Title = Title;
	parms.MapName = MapName;
	parms.MapNum = MapNum;
	parms.UserCount = UserCount;
	parms.MaxCount = MaxCount;
	parms.GameModeName = GameModeName;
	parms.ModeNum = ModeNum;
	parms.WeaponLimit = WeaponLimit;
	parms.IsHardCore = IsHardCore;
	parms.Status = Status;
	parms.RoomOwnerIP = RoomOwnerIP;
	parms.GameMinute = GameMinute;
	parms.RoomOwnerName = RoomOwnerName;
	parms.IsSpecial = IsSpecial;
	parms.IsPassword = IsPassword;
	this->ProcessEvent ( psfAckSpecificGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSpecificGameRoomInfo ( int RoomNum )
{
	static UFunction* psfReqSpecificGameRoomInfo = 0;
	UBTTcpLink_Channel_execsfReqSpecificGameRoomInfo_Parms parms;

	if ( !psfReqSpecificGameRoomInfo )
		psfReqSpecificGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSpecificGameRoomInfo" );

	parms.RoomNum = RoomNum;
	this->ProcessEvent ( psfReqSpecificGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* psfAckChannelUserListInGameRoom = 0;
	UBTTcpLink_Channel_execsfAckChannelUserListInGameRoom_Parms parms;

	if ( !psfAckChannelUserListInGameRoom )
		psfAckChannelUserListInGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChannelUserListInGameRoom" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	parms.Count = Count;
	parms.StartIndex = StartIndex;
	parms.UID = UID;
	parms.CharName = CharName;
	parms.UserLevel = UserLevel;
	parms.ClanName = ClanName;
	parms.ClanPattern = ClanPattern;
	parms.ClanBG = ClanBG;
	parms.ClanBL = ClanBL;
	parms.IsLookForClan = IsLookForClan;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckChannelUserListInGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChannelUserListInGameRoom ( int ChannelNum, int StartIndex, int Count )
{
	static UFunction* psfReqChannelUserListInGameRoom = 0;
	UBTTcpLink_Channel_execsfReqChannelUserListInGameRoom_Parms parms;

	if ( !psfReqChannelUserListInGameRoom )
		psfReqChannelUserListInGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChannelUserListInGameRoom" );

	parms.ChannelNum = ChannelNum;
	parms.StartIndex = StartIndex;
	parms.Count = Count;
	this->ProcessEvent ( psfReqChannelUserListInGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvDeleteFriend ( int Result, struct FString FromCharName )
{
	static UFunction* psfReqRecvDeleteFriend = 0;
	UBTTcpLink_Channel_execsfReqRecvDeleteFriend_Parms parms;

	if ( !psfReqRecvDeleteFriend )
		psfReqRecvDeleteFriend = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvDeleteFriend" );

	parms.Result = Result;
	parms.FromCharName = FromCharName;
	this->ProcessEvent ( psfReqRecvDeleteFriend, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname )
{
	static UFunction* psfAckDeleteFriend = 0;
	UBTTcpLink_Channel_execsfAckDeleteFriend_Parms parms;

	if ( !psfAckDeleteFriend )
		psfAckDeleteFriend = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDeleteFriend" );

	parms.Result = Result;
	parms.FailedCharname = FailedCharname;
	this->ProcessEvent ( psfAckDeleteFriend, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDeleteFriend ( class TArray< struct FString > DeleteCharName )
{
	static UFunction* psfReqDeleteFriend = 0;
	UBTTcpLink_Channel_execsfReqDeleteFriend_Parms parms;

	if ( !psfReqDeleteFriend )
		psfReqDeleteFriend = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDeleteFriend" );

	parms.DeleteCharName = DeleteCharName;
	this->ProcessEvent ( psfReqDeleteFriend, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 )
{
	static UFunction* psfAckGameGuardAuthData = 0;
	UBTTcpLink_Channel_execsfAckGameGuardAuthData_Parms parms;

	if ( !psfAckGameGuardAuthData )
		psfAckGameGuardAuthData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGameGuardAuthData" );

	parms.AuthDataIndex = AuthDataIndex;
	parms.AuthDataVal1 = AuthDataVal1;
	parms.AuthDataVal2 = AuthDataVal2;
	parms.AuthDataVal3 = AuthDataVal3;
	this->ProcessEvent ( psfAckGameGuardAuthData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 )
{
	static UFunction* psfReqGameGuardAuthData = 0;
	UBTTcpLink_Channel_execsfReqGameGuardAuthData_Parms parms;

	if ( !psfReqGameGuardAuthData )
		psfReqGameGuardAuthData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGameGuardAuthData" );

	parms.AuthDataIndex = AuthDataIndex;
	parms.AuthDataVal1 = AuthDataVal1;
	parms.AuthDataVal2 = AuthDataVal2;
	parms.AuthDataVal3 = AuthDataVal3;
	this->ProcessEvent ( psfReqGameGuardAuthData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum )
{
	static UFunction* psfAckCheckEquipedWeaponDurability = 0;
	UBTTcpLink_Channel_execsfAckCheckEquipedWeaponDurability_Parms parms;

	if ( !psfAckCheckEquipedWeaponDurability )
		psfAckCheckEquipedWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCheckEquipedWeaponDurability" );

	parms.Result = Result;
	parms.ItemUniqueID = ItemUniqueID;
	parms.ItemSlotNum = ItemSlotNum;
	this->ProcessEvent ( psfAckCheckEquipedWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCheckEquipedWeaponDurability (  )
{
	static UFunction* psfReqCheckEquipedWeaponDurability = 0;
	UBTTcpLink_Channel_execsfReqCheckEquipedWeaponDurability_Parms parms;

	if ( !psfReqCheckEquipedWeaponDurability )
		psfReqCheckEquipedWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCheckEquipedWeaponDurability" );

	this->ProcessEvent ( psfReqCheckEquipedWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_GetChopper ( int GetChopperUID, class TArray< int > GetChopperAssistUID, float KillXCoord, float KillYCoord, float KillZCoord, int KillPos, int KillWeaponID, int KillWeaponPartID, int KillRange, int KillDamage, int ChopperCallerID, struct FString ChopperCallerName, float ChopperXCoord, float ChopperYCoord, float ChopperZCoord )
{
	static UFunction* psfReqGamePlay_GetChopper = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_GetChopper_Parms parms;

	if ( !psfReqGamePlay_GetChopper )
		psfReqGamePlay_GetChopper = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_GetChopper" );

	parms.GetChopperUID = GetChopperUID;
	parms.GetChopperAssistUID = GetChopperAssistUID;
	parms.KillXCoord = KillXCoord;
	parms.KillYCoord = KillYCoord;
	parms.KillZCoord = KillZCoord;
	parms.KillPos = KillPos;
	parms.KillWeaponID = KillWeaponID;
	parms.KillWeaponPartID = KillWeaponPartID;
	parms.KillRange = KillRange;
	parms.KillDamage = KillDamage;
	parms.ChopperCallerID = ChopperCallerID;
	parms.ChopperCallerName = ChopperCallerName;
	parms.ChopperXCoord = ChopperXCoord;
	parms.ChopperYCoord = ChopperYCoord;
	parms.ChopperZCoord = ChopperZCoord;
	this->ProcessEvent ( psfReqGamePlay_GetChopper, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs )
{
	static UFunction* psfAckAcquirePromotionItems = 0;
	UBTTcpLink_Channel_execsfAckAcquirePromotionItems_Parms parms;

	if ( !psfAckAcquirePromotionItems )
		psfAckAcquirePromotionItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAcquirePromotionItems" );

	parms.UID = UID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemUniqueID = ItemUniqueID;
	parms.ItemIDs = ItemIDs;
	parms.PartIDs = PartIDs;
	this->ProcessEvent ( psfAckAcquirePromotionItems, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckIsAvailClanURL ( struct FString ClanURL, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckIsAvailClanURL = 0;
	UBTTcpLink_Channel_execsfAckIsAvailClanURL_Parms parms;

	if ( !psfAckIsAvailClanURL )
		psfAckIsAvailClanURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckIsAvailClanURL" );

	parms.ClanURL = ClanURL;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckIsAvailClanURL, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqIsAvailClanURL ( struct FString ClanURL )
{
	static UFunction* psfReqIsAvailClanURL = 0;
	UBTTcpLink_Channel_execsfReqIsAvailClanURL_Parms parms;

	if ( !psfReqIsAvailClanURL )
		psfReqIsAvailClanURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqIsAvailClanURL" );

	parms.ClanURL = ClanURL;
	this->ProcessEvent ( psfReqIsAvailClanURL, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetIsHostBlocking ( int Result, unsigned char Blocking )
{
	static UFunction* psfAckGetIsHostBlocking = 0;
	UBTTcpLink_Channel_execsfAckGetIsHostBlocking_Parms parms;

	if ( !psfAckGetIsHostBlocking )
		psfAckGetIsHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetIsHostBlocking" );

	parms.Result = Result;
	parms.Blocking = Blocking;
	this->ProcessEvent ( psfAckGetIsHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetIsHostBlocking (  )
{
	static UFunction* psfReqGetIsHostBlocking = 0;
	UBTTcpLink_Channel_execsfReqGetIsHostBlocking_Parms parms;

	if ( !psfReqGetIsHostBlocking )
		psfReqGetIsHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetIsHostBlocking" );

	this->ProcessEvent ( psfReqGetIsHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyHostBlocking ( int Result, unsigned char Blocking )
{
	static UFunction* psfAckNotifyHostBlocking = 0;
	UBTTcpLink_Channel_execsfAckNotifyHostBlocking_Parms parms;

	if ( !psfAckNotifyHostBlocking )
		psfAckNotifyHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyHostBlocking" );

	parms.Result = Result;
	parms.Blocking = Blocking;
	this->ProcessEvent ( psfAckNotifyHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyHostBlocking ( unsigned char Blocking )
{
	static UFunction* psfReqNotifyHostBlocking = 0;
	UBTTcpLink_Channel_execsfReqNotifyHostBlocking_Parms parms;

	if ( !psfReqNotifyHostBlocking )
		psfReqNotifyHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyHostBlocking" );

	parms.Blocking = Blocking;
	this->ProcessEvent ( psfReqNotifyHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs )
{
	static UFunction* psfAckGetHolePunchingResult = 0;
	UBTTcpLink_Channel_execsfAckGetHolePunchingResult_Parms parms;

	if ( !psfAckGetHolePunchingResult )
		psfAckGetHolePunchingResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetHolePunchingResult" );

	parms.Result = Result;
	parms.Phrase = Phrase;
	parms.InterventionUserID = InterventionUserID;
	parms.Intervention = Intervention;
	parms.FailedUserIDs = FailedUserIDs;
	this->ProcessEvent ( psfAckGetHolePunchingResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetHolePunchingResult (  )
{
	static UFunction* psfReqGetHolePunchingResult = 0;
	UBTTcpLink_Channel_execsfReqGetHolePunchingResult_Parms parms;

	if ( !psfReqGetHolePunchingResult )
		psfReqGetHolePunchingResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetHolePunchingResult" );

	this->ProcessEvent ( psfReqGetHolePunchingResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyRecvDummyForHolePunching ( int ClientUserID, unsigned char Phrase )
{
	static UFunction* psfReqNotifyRecvDummyForHolePunching = 0;
	UBTTcpLink_Channel_execsfReqNotifyRecvDummyForHolePunching_Parms parms;

	if ( !psfReqNotifyRecvDummyForHolePunching )
		psfReqNotifyRecvDummyForHolePunching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyRecvDummyForHolePunching" );

	parms.ClientUserID = ClientUserID;
	parms.Phrase = Phrase;
	this->ProcessEvent ( psfReqNotifyRecvDummyForHolePunching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_ChangeWeaponSet ( int UID, int SetNumber )
{
	static UFunction* psfReqGamePlay_ChangeWeaponSet = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_ChangeWeaponSet_Parms parms;

	if ( !psfReqGamePlay_ChangeWeaponSet )
		psfReqGamePlay_ChangeWeaponSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_ChangeWeaponSet" );

	parms.UID = UID;
	parms.SetNumber = SetNumber;
	this->ProcessEvent ( psfReqGamePlay_ChangeWeaponSet, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_UpdateDomScore ( int AFScore, int RSAScore )
{
	static UFunction* psfReqGamePlay_UpdateDomScore = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_UpdateDomScore_Parms parms;

	if ( !psfReqGamePlay_UpdateDomScore )
		psfReqGamePlay_UpdateDomScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_UpdateDomScore" );

	parms.AFScore = AFScore;
	parms.RSAScore = RSAScore;
	this->ProcessEvent ( psfReqGamePlay_UpdateDomScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort )
{
	static UFunction* psfReqNotifyRelayServerAddr = 0;
	UBTTcpLink_Channel_execsfReqNotifyRelayServerAddr_Parms parms;

	if ( !psfReqNotifyRelayServerAddr )
		psfReqNotifyRelayServerAddr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyRelayServerAddr" );

	parms.RelayIP = RelayIP;
	parms.RelayPort = RelayPort;
	this->ProcessEvent ( psfReqNotifyRelayServerAddr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint )
{
	static UFunction* psfAckGetUserHostPriorityPoint = 0;
	UBTTcpLink_Channel_execsfAckGetUserHostPriorityPoint_Parms parms;

	if ( !psfAckGetUserHostPriorityPoint )
		psfAckGetUserHostPriorityPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetUserHostPriorityPoint" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( psfAckGetUserHostPriorityPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetUserHostPriorityPoint ( int UserID )
{
	static UFunction* psfReqGetUserHostPriorityPoint = 0;
	UBTTcpLink_Channel_execsfReqGetUserHostPriorityPoint_Parms parms;

	if ( !psfReqGetUserHostPriorityPoint )
		psfReqGetUserHostPriorityPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetUserHostPriorityPoint" );

	parms.UserID = UserID;
	this->ProcessEvent ( psfReqGetUserHostPriorityPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqUpdateMyHostPriorityPoint ( int HostPriorityPoint )
{
	static UFunction* psfReqUpdateMyHostPriorityPoint = 0;
	UBTTcpLink_Channel_execsfReqUpdateMyHostPriorityPoint_Parms parms;

	if ( !psfReqUpdateMyHostPriorityPoint )
		psfReqUpdateMyHostPriorityPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqUpdateMyHostPriorityPoint" );

	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( psfReqUpdateMyHostPriorityPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqWriteServerLog ( unsigned char Destination, struct FString LogMsg )
{
	static UFunction* psfReqWriteServerLog = 0;
	UBTTcpLink_Channel_execsfReqWriteServerLog_Parms parms;

	if ( !psfReqWriteServerLog )
		psfReqWriteServerLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqWriteServerLog" );

	parms.Destination = Destination;
	parms.LogMsg = LogMsg;
	this->ProcessEvent ( psfReqWriteServerLog, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_SetRoundStartTime ( class TArray< int > UID )
{
	static UFunction* psfReqGamePlay_SetRoundStartTime = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_SetRoundStartTime_Parms parms;

	if ( !psfReqGamePlay_SetRoundStartTime )
		psfReqGamePlay_SetRoundStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_SetRoundStartTime" );

	parms.UID = UID;
	this->ProcessEvent ( psfReqGamePlay_SetRoundStartTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_SetGameStartTime ( class TArray< int > UID )
{
	static UFunction* psfReqGamePlay_SetGameStartTime = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_SetGameStartTime_Parms parms;

	if ( !psfReqGamePlay_SetGameStartTime )
		psfReqGamePlay_SetGameStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_SetGameStartTime" );

	parms.UID = UID;
	this->ProcessEvent ( psfReqGamePlay_SetGameStartTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvForceDisconnectUDPFromHost ( int Result )
{
	static UFunction* psfReqRecvForceDisconnectUDPFromHost = 0;
	UBTTcpLink_Channel_execsfReqRecvForceDisconnectUDPFromHost_Parms parms;

	if ( !psfReqRecvForceDisconnectUDPFromHost )
		psfReqRecvForceDisconnectUDPFromHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvForceDisconnectUDPFromHost" );

	parms.Result = Result;
	this->ProcessEvent ( psfReqRecvForceDisconnectUDPFromHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckForceDisconnectUDPFromHost ( int Result )
{
	static UFunction* psfAckForceDisconnectUDPFromHost = 0;
	UBTTcpLink_Channel_execsfAckForceDisconnectUDPFromHost_Parms parms;

	if ( !psfAckForceDisconnectUDPFromHost )
		psfAckForceDisconnectUDPFromHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckForceDisconnectUDPFromHost" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckForceDisconnectUDPFromHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqForceDisconnectUDPFromHost ( int UserID )
{
	static UFunction* psfReqForceDisconnectUDPFromHost = 0;
	UBTTcpLink_Channel_execsfReqForceDisconnectUDPFromHost_Parms parms;

	if ( !psfReqForceDisconnectUDPFromHost )
		psfReqForceDisconnectUDPFromHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqForceDisconnectUDPFromHost" );

	parms.UserID = UserID;
	this->ProcessEvent ( psfReqForceDisconnectUDPFromHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_TakeAPoint ( class TArray< int > TakerUID, unsigned char TakePos, class TArray< float > TakerXCoord, class TArray< float > TakerYCoord, class TArray< float > TakerZCoord, class TArray< int > TakerPos, class TArray< int > TakerWeaponID, class TArray< int > TakerWeaponPartID, class TArray< int > TakerRange )
{
	static UFunction* psfReqGamePlay_TakeAPoint = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_TakeAPoint_Parms parms;

	if ( !psfReqGamePlay_TakeAPoint )
		psfReqGamePlay_TakeAPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_TakeAPoint" );

	parms.TakerUID = TakerUID;
	parms.TakePos = TakePos;
	parms.TakerXCoord = TakerXCoord;
	parms.TakerYCoord = TakerYCoord;
	parms.TakerZCoord = TakerZCoord;
	parms.TakerPos = TakerPos;
	parms.TakerWeaponID = TakerWeaponID;
	parms.TakerWeaponPartID = TakerWeaponPartID;
	parms.TakerRange = TakerRange;
	this->ProcessEvent ( psfReqGamePlay_TakeAPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyChangeRoomState ( unsigned char RoomState )
{
	static UFunction* psfReqNotifyChangeRoomState = 0;
	UBTTcpLink_Channel_execsfReqNotifyChangeRoomState_Parms parms;

	if ( !psfReqNotifyChangeRoomState )
		psfReqNotifyChangeRoomState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyChangeRoomState" );

	parms.RoomState = RoomState;
	this->ProcessEvent ( psfReqNotifyChangeRoomState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_DefuseBomb ( int DefuserUID, unsigned char DefusePos, float DefuserXCoord, float DefuserYCoord, float DefuserZCoord, int DefuserPos, int DefuserWeaponID, int DefuserWeaponPartID, int DefuserRange )
{
	static UFunction* psfReqGamePlay_DefuseBomb = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_DefuseBomb_Parms parms;

	if ( !psfReqGamePlay_DefuseBomb )
		psfReqGamePlay_DefuseBomb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_DefuseBomb" );

	parms.DefuserUID = DefuserUID;
	parms.DefusePos = DefusePos;
	parms.DefuserXCoord = DefuserXCoord;
	parms.DefuserYCoord = DefuserYCoord;
	parms.DefuserZCoord = DefuserZCoord;
	parms.DefuserPos = DefuserPos;
	parms.DefuserWeaponID = DefuserWeaponID;
	parms.DefuserWeaponPartID = DefuserWeaponPartID;
	parms.DefuserRange = DefuserRange;
	this->ProcessEvent ( psfReqGamePlay_DefuseBomb, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGamePlay_InstallBomb ( int InstallerUID, unsigned char InstallPos, float InstallerXCoord, float InstallerYCoord, float InstallerZCoord, int InstallerPos, int InstallerWeaponID, int InstallerWeaponPartID, int InstallerRange )
{
	static UFunction* psfReqGamePlay_InstallBomb = 0;
	UBTTcpLink_Channel_execsfReqGamePlay_InstallBomb_Parms parms;

	if ( !psfReqGamePlay_InstallBomb )
		psfReqGamePlay_InstallBomb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGamePlay_InstallBomb" );

	parms.InstallerUID = InstallerUID;
	parms.InstallPos = InstallPos;
	parms.InstallerXCoord = InstallerXCoord;
	parms.InstallerYCoord = InstallerYCoord;
	parms.InstallerZCoord = InstallerZCoord;
	parms.InstallerPos = InstallerPos;
	parms.InstallerWeaponID = InstallerWeaponID;
	parms.InstallerWeaponPartID = InstallerWeaponPartID;
	parms.InstallerRange = InstallerRange;
	this->ProcessEvent ( psfReqGamePlay_InstallBomb, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel )
{
	static UFunction* psfAckDBCharInfo = 0;
	UBTTcpLink_Channel_execsfAckDBCharInfo_Parms parms;

	if ( !psfAckDBCharInfo )
		psfAckDBCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDBCharInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.CharName = CharName;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.ClanPersonIntro = ClanPersonIntro;
	parms.MainWeaponItemID = MainWeaponItemID;
	parms.MainWeaponPartID = MainWeaponPartID;
	parms.SubWeaponItemID = SubWeaponItemID;
	parms.SubWeaponPartID = SubWeaponPartID;
	parms.AFSpecialCostumeItemID = AFSpecialCostumeItemID;
	parms.RSASpecialCostumeItemID = RSASpecialCostumeItemID;
	parms.stCharInfo = stCharInfo;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( psfAckDBCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDBCharInfo ( struct FString CharName )
{
	static UFunction* psfReqDBCharInfo = 0;
	UBTTcpLink_Channel_execsfReqDBCharInfo_Parms parms;

	if ( !psfReqDBCharInfo )
		psfReqDBCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDBCharInfo" );

	parms.CharName = CharName;
	this->ProcessEvent ( psfReqDBCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqForceNatTypeSetting ( int NatType )
{
	static UFunction* psfReqForceNatTypeSetting = 0;
	UBTTcpLink_Channel_execsfReqForceNatTypeSetting_Parms parms;

	if ( !psfReqForceNatTypeSetting )
		psfReqForceNatTypeSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqForceNatTypeSetting" );

	parms.NatType = NatType;
	this->ProcessEvent ( psfReqForceNatTypeSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP )
{
	static UFunction* psfAckGetServerTime = 0;
	UBTTcpLink_Channel_execsfAckGetServerTime_Parms parms;

	if ( !psfAckGetServerTime )
		psfAckGetServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetServerTime" );

	parms.ServerTime = ServerTime;
	parms.ClientIP = ClientIP;
	this->ProcessEvent ( psfAckGetServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetServerTime (  )
{
	static UFunction* psfReqGetServerTime = 0;
	UBTTcpLink_Channel_execsfReqGetServerTime_Parms parms;

	if ( !psfReqGetServerTime )
		psfReqGetServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetServerTime" );

	this->ProcessEvent ( psfReqGetServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLogEndEachRound ( int StartCnt, int EndCnt, int RoundEndType, int RoundEndTime, unsigned char VTeam, unsigned char VTeamAD, int AFScore, int RSAScore, int Round )
{
	static UFunction* psfReqLogEndEachRound = 0;
	UBTTcpLink_Channel_execsfReqLogEndEachRound_Parms parms;

	if ( !psfReqLogEndEachRound )
		psfReqLogEndEachRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLogEndEachRound" );

	parms.StartCnt = StartCnt;
	parms.EndCnt = EndCnt;
	parms.RoundEndType = RoundEndType;
	parms.RoundEndTime = RoundEndTime;
	parms.VTeam = VTeam;
	parms.VTeamAD = VTeamAD;
	parms.AFScore = AFScore;
	parms.RSAScore = RSAScore;
	parms.Round = Round;
	this->ProcessEvent ( psfReqLogEndEachRound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLogGetScore ( struct FKillDeathLog KillDeathLogParam, class TArray< int > AssistUIDs, class TArray< unsigned char > AssistScores )
{
	static UFunction* psfReqLogGetScore = 0;
	UBTTcpLink_Channel_execsfReqLogGetScore_Parms parms;

	if ( !psfReqLogGetScore )
		psfReqLogGetScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLogGetScore" );

	parms.KillDeathLogParam = KillDeathLogParam;
	parms.AssistUIDs = AssistUIDs;
	parms.AssistScores = AssistScores;
	this->ProcessEvent ( psfReqLogGetScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price )
{
	static UFunction* psfAckAuctionTradeHistory = 0;
	UBTTcpLink_Channel_execsfAckAuctionTradeHistory_Parms parms;

	if ( !psfAckAuctionTradeHistory )
		psfAckAuctionTradeHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionTradeHistory" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	parms.SellerCharNm = SellerCharNm;
	parms.DamageDegree = DamageDegree;
	parms.Price = Price;
	this->ProcessEvent ( psfAckAuctionTradeHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAuctionTradeHistory ( int ItemID, int PartID )
{
	static UFunction* psfReqAuctionTradeHistory = 0;
	UBTTcpLink_Channel_execsfReqAuctionTradeHistory_Parms parms;

	if ( !psfReqAuctionTradeHistory )
		psfReqAuctionTradeHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAuctionTradeHistory" );

	parms.ItemID = ItemID;
	parms.PartID = PartID;
	this->ProcessEvent ( psfReqAuctionTradeHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain )
{
	static UFunction* psfAckSendGift = 0;
	UBTTcpLink_Channel_execsfAckSendGift_Parms parms;

	if ( !psfAckSendGift )
		psfAckSendGift = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSendGift" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	parms.CashRemain = CashRemain;
	this->ProcessEvent ( psfAckSendGift, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSendGift ( int ItemID, struct FString RecvCharname, struct FString RecvMessage, unsigned char BuyOption1, unsigned char BuyOption2 )
{
	static UFunction* psfReqSendGift = 0;
	UBTTcpLink_Channel_execsfReqSendGift_Parms parms;

	if ( !psfReqSendGift )
		psfReqSendGift = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSendGift" );

	parms.ItemID = ItemID;
	parms.RecvCharname = RecvCharname;
	parms.RecvMessage = RecvMessage;
	parms.BuyOption1 = BuyOption1;
	parms.BuyOption2 = BuyOption2;
	this->ProcessEvent ( psfReqSendGift, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID )
{
	static UFunction* psfAckGetAttachedItemFromMemo = 0;
	UBTTcpLink_Channel_execsfAckGetAttachedItemFromMemo_Parms parms;

	if ( !psfAckGetAttachedItemFromMemo )
		psfAckGetAttachedItemFromMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetAttachedItemFromMemo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.ItemID = ItemID;
	this->ProcessEvent ( psfAckGetAttachedItemFromMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetAttachedItemFromMemo ( int UserID, int MemoIdx, int ItemID )
{
	static UFunction* psfReqGetAttachedItemFromMemo = 0;
	UBTTcpLink_Channel_execsfReqGetAttachedItemFromMemo_Parms parms;

	if ( !psfReqGetAttachedItemFromMemo )
		psfReqGetAttachedItemFromMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetAttachedItemFromMemo" );

	parms.UserID = UserID;
	parms.MemoIdx = MemoIdx;
	parms.ItemID = ItemID;
	this->ProcessEvent ( psfReqGetAttachedItemFromMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName )
{
	static UFunction* psfAckNotifyNewClanMember = 0;
	UBTTcpLink_Channel_execsfAckNotifyNewClanMember_Parms parms;

	if ( !psfAckNotifyNewClanMember )
		psfAckNotifyNewClanMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyNewClanMember" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	this->ProcessEvent ( psfAckNotifyNewClanMember, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChatClan ( struct FString CharName, struct FString Message, int Result )
{
	static UFunction* psfAckChatClan = 0;
	UBTTcpLink_Channel_execsfAckChatClan_Parms parms;

	if ( !psfAckChatClan )
		psfAckChatClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChatClan" );

	parms.CharName = CharName;
	parms.Message = Message;
	parms.Result = Result;
	this->ProcessEvent ( psfAckChatClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChatClan ( struct FString Message )
{
	static UFunction* psfReqChatClan = 0;
	UBTTcpLink_Channel_execsfReqChatClan_Parms parms;

	if ( !psfReqChatClan )
		psfReqChatClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChatClan" );

	parms.Message = Message;
	this->ProcessEvent ( psfReqChatClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles )
{
	static UFunction* psfAckTestDouble = 0;
	UBTTcpLink_Channel_execsfAckTestDouble_Parms parms;

	if ( !psfAckTestDouble )
		psfAckTestDouble = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckTestDouble" );

	parms.vDouble = vDouble;
	parms.vDoubles = vDoubles;
	this->ProcessEvent ( psfAckTestDouble, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles )
{
	static UFunction* psfReqTestDouble = 0;
	UBTTcpLink_Channel_execsfReqTestDouble_Parms parms;

	if ( !psfReqTestDouble )
		psfReqTestDouble = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqTestDouble" );

	parms.vDouble = vDouble;
	parms.vDoubles = vDoubles;
	this->ProcessEvent ( psfReqTestDouble, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState )
{
	static UFunction* psfAckNotifyLoadingState = 0;
	UBTTcpLink_Channel_execsfAckNotifyLoadingState_Parms parms;

	if ( !psfAckNotifyLoadingState )
		psfAckNotifyLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyLoadingState" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.LoadingState = LoadingState;
	this->ProcessEvent ( psfAckNotifyLoadingState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyLoadingState ( unsigned char LoadingState )
{
	static UFunction* psfReqNotifyLoadingState = 0;
	UBTTcpLink_Channel_execsfReqNotifyLoadingState_Parms parms;

	if ( !psfReqNotifyLoadingState )
		psfReqNotifyLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyLoadingState" );

	parms.LoadingState = LoadingState;
	this->ProcessEvent ( psfReqNotifyLoadingState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep )
{
	static UFunction* psfAckFailedStartGame = 0;
	UBTTcpLink_Channel_execsfAckFailedStartGame_Parms parms;

	if ( !psfAckFailedStartGame )
		psfAckFailedStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckFailedStartGame" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsHost = IsHost;
	parms.FailedUserID = FailedUserID;
	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( psfAckFailedStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqFailedStartGame ( int LoadingStep )
{
	static UFunction* psfReqFailedStartGame = 0;
	UBTTcpLink_Channel_execsfReqFailedStartGame_Parms parms;

	if ( !psfReqFailedStartGame )
		psfReqFailedStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqFailedStartGame" );

	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( psfReqFailedStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep )
{
	static UFunction* psfAckSuccessStartGame = 0;
	UBTTcpLink_Channel_execsfAckSuccessStartGame_Parms parms;

	if ( !psfAckSuccessStartGame )
		psfAckSuccessStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSuccessStartGame" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsHost = IsHost;
	parms.HostIP = HostIP;
	parms.HostPort = HostPort;
	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( psfAckSuccessStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSuccessStartGame ( int LoadingStep )
{
	static UFunction* psfReqSuccessStartGame = 0;
	UBTTcpLink_Channel_execsfReqSuccessStartGame_Parms parms;

	if ( !psfReqSuccessStartGame )
		psfReqSuccessStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSuccessStartGame" );

	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( psfReqSuccessStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro )
{
	static UFunction* psfAckClanCharPersonelIntro = 0;
	UBTTcpLink_Channel_execsfAckClanCharPersonelIntro_Parms parms;

	if ( !psfAckClanCharPersonelIntro )
		psfAckClanCharPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanCharPersonelIntro" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PersonelIntro = PersonelIntro;
	this->ProcessEvent ( psfAckClanCharPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName )
{
	static UFunction* psfReqClanCharPersonelIntro = 0;
	UBTTcpLink_Channel_execsfReqClanCharPersonelIntro_Parms parms;

	if ( !psfReqClanCharPersonelIntro )
		psfReqClanCharPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanCharPersonelIntro" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	this->ProcessEvent ( psfReqClanCharPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanPersonelIntro ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckClanPersonelIntro = 0;
	UBTTcpLink_Channel_execsfAckClanPersonelIntro_Parms parms;

	if ( !psfAckClanPersonelIntro )
		psfAckClanPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanPersonelIntro" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckClanPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanPersonelIntro ( struct FString ClanName, struct FString CharName, struct FString PersonelIntro )
{
	static UFunction* psfReqClanPersonelIntro = 0;
	UBTTcpLink_Channel_execsfReqClanPersonelIntro_Parms parms;

	if ( !psfReqClanPersonelIntro )
		psfReqClanPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanPersonelIntro" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.PersonelIntro = PersonelIntro;
	this->ProcessEvent ( psfReqClanPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanChangeInfo ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckClanChangeInfo = 0;
	UBTTcpLink_Channel_execsfAckClanChangeInfo_Parms parms;

	if ( !psfAckClanChangeInfo )
		psfAckClanChangeInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanChangeInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckClanChangeInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanChangeInfo ( struct FString ClanName, unsigned char IsRecruit, unsigned char Region, struct FString Keyword, struct FString ClanIntro, struct FString Notice )
{
	static UFunction* psfReqClanChangeInfo = 0;
	UBTTcpLink_Channel_execsfReqClanChangeInfo_Parms parms;

	if ( !psfReqClanChangeInfo )
		psfReqClanChangeInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanChangeInfo" );

	parms.ClanName = ClanName;
	parms.IsRecruit = IsRecruit;
	parms.Region = Region;
	parms.Keyword = Keyword;
	parms.ClanIntro = ClanIntro;
	parms.Notice = Notice;
	this->ProcessEvent ( psfReqClanChangeInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName )
{
	static UFunction* psfAckClanClose = 0;
	UBTTcpLink_Channel_execsfAckClanClose_Parms parms;

	if ( !psfAckClanClose )
		psfAckClanClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanClose" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanName = ClanName;
	this->ProcessEvent ( psfAckClanClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanClose ( struct FString ClanName )
{
	static UFunction* psfReqClanClose = 0;
	UBTTcpLink_Channel_execsfReqClanClose_Parms parms;

	if ( !psfReqClanClose )
		psfReqClanClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanClose" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( psfReqClanClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName )
{
	static UFunction* psfAckNotifyClanSecession = 0;
	UBTTcpLink_Channel_execsfAckNotifyClanSecession_Parms parms;

	if ( !psfAckNotifyClanSecession )
		psfAckNotifyClanSecession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyClanSecession" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	this->ProcessEvent ( psfAckNotifyClanSecession, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanSecession ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckClanSecession = 0;
	UBTTcpLink_Channel_execsfAckClanSecession_Parms parms;

	if ( !psfAckClanSecession )
		psfAckClanSecession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanSecession" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckClanSecession, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanSecession ( struct FString ClanName )
{
	static UFunction* psfReqClanSecession = 0;
	UBTTcpLink_Channel_execsfReqClanSecession_Parms parms;

	if ( !psfReqClanSecession )
		psfReqClanSecession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanSecession" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( psfReqClanSecession, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember )
{
	static UFunction* psfAckClanNews = 0;
	UBTTcpLink_Channel_execsfAckClanNews_Parms parms;

	if ( !psfAckClanNews )
		psfAckClanNews = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanNews" );

	parms.IssueDate = IssueDate;
	parms.IssueType = IssueType;
	parms.IssuedClanMember = IssuedClanMember;
	this->ProcessEvent ( psfAckClanNews, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanNews ( struct FString ClanName )
{
	static UFunction* psfReqClanNews = 0;
	UBTTcpLink_Channel_execsfReqClanNews_Parms parms;

	if ( !psfReqClanNews )
		psfReqClanNews = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanNews" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( psfReqClanNews, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade )
{
	static UFunction* psfAckNotifyAdjustClanMemberGrade = 0;
	UBTTcpLink_Channel_execsfAckNotifyAdjustClanMemberGrade_Parms parms;

	if ( !psfAckNotifyAdjustClanMemberGrade )
		psfAckNotifyAdjustClanMemberGrade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyAdjustClanMemberGrade" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.CharGrade = CharGrade;
	this->ProcessEvent ( psfAckNotifyAdjustClanMemberGrade, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade )
{
	static UFunction* psfAckAdjustClanMemberGrade = 0;
	UBTTcpLink_Channel_execsfAckAdjustClanMemberGrade_Parms parms;

	if ( !psfAckAdjustClanMemberGrade )
		psfAckAdjustClanMemberGrade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAdjustClanMemberGrade" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.CharGrade = CharGrade;
	this->ProcessEvent ( psfAckAdjustClanMemberGrade, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade )
{
	static UFunction* psfReqAdjustClanMemberGrade = 0;
	UBTTcpLink_Channel_execsfReqAdjustClanMemberGrade_Parms parms;

	if ( !psfReqAdjustClanMemberGrade )
		psfReqAdjustClanMemberGrade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAdjustClanMemberGrade" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.CharGrade = CharGrade;
	this->ProcessEvent ( psfReqAdjustClanMemberGrade, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanUserListEnd (  )
{
	static UFunction* psfAckClanUserListEnd = 0;
	UBTTcpLink_Channel_execsfAckClanUserListEnd_Parms parms;

	if ( !psfAckClanUserListEnd )
		psfAckClanUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanUserListEnd" );

	this->ProcessEvent ( psfAckClanUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId )
{
	static UFunction* psfAckClanUserList = 0;
	UBTTcpLink_Channel_execsfAckClanUserList_Parms parms;

	if ( !psfAckClanUserList )
		psfAckClanUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanUserList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ClanWinCnt = ClanWinCnt;
	parms.ClanLoseCnt = ClanLoseCnt;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.DudeId = DudeId;
	this->ProcessEvent ( psfAckClanUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanUserListStart ( int Result, int TotalCount )
{
	static UFunction* psfAckClanUserListStart = 0;
	UBTTcpLink_Channel_execsfAckClanUserListStart_Parms parms;

	if ( !psfAckClanUserListStart )
		psfAckClanUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckClanUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanUserList ( struct FString ClanName )
{
	static UFunction* psfReqClanUserList = 0;
	UBTTcpLink_Channel_execsfReqClanUserList_Parms parms;

	if ( !psfReqClanUserList )
		psfReqClanUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanUserList" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( psfReqClanUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel )
{
	static UFunction* psfAckSearchClan = 0;
	UBTTcpLink_Channel_execsfAckSearchClan_Parms parms;

	if ( !psfAckSearchClan )
		psfAckSearchClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSearchClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.TotalPage = TotalPage;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.ClanName = ClanName;
	parms.ClanMaster = ClanMaster;
	parms.ClanMember = ClanMember;
	parms.ClanMemberMax = ClanMemberMax;
	parms.ClanCreateDate = ClanCreateDate;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.ClanDraw = ClanDraw;
	parms.ClanRank = ClanRank;
	parms.ClanRecruit = ClanRecruit;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( psfAckSearchClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSerachClan ( unsigned char SearchType, struct FString Keyword, unsigned char ClanStatus, unsigned char ClanRegion, int ReqPage )
{
	static UFunction* psfReqSerachClan = 0;
	UBTTcpLink_Channel_execsfReqSerachClan_Parms parms;

	if ( !psfReqSerachClan )
		psfReqSerachClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSerachClan" );

	parms.SearchType = SearchType;
	parms.Keyword = Keyword;
	parms.ClanStatus = ClanStatus;
	parms.ClanRegion = ClanRegion;
	parms.ReqPage = ReqPage;
	this->ProcessEvent ( psfReqSerachClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName )
{
	static UFunction* psfAckJoinClanResult = 0;
	UBTTcpLink_Channel_execsfAckJoinClanResult_Parms parms;

	if ( !psfAckJoinClanResult )
		psfAckJoinClanResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckJoinClanResult" );

	parms.ClanName = ClanName;
	parms.Permit = Permit;
	parms.PermitCharName = PermitCharName;
	this->ProcessEvent ( psfAckJoinClanResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRecvJoinClanResult ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckRecvJoinClanResult = 0;
	UBTTcpLink_Channel_execsfAckRecvJoinClanResult_Parms parms;

	if ( !psfAckRecvJoinClanResult )
		psfAckRecvJoinClanResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRecvJoinClanResult" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckRecvJoinClanResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRecvJoinClan ( int UserIdx, struct FString CharName, struct FString ReqMsg, unsigned char Permit )
{
	static UFunction* psfAckRecvJoinClan = 0;
	UBTTcpLink_Channel_execsfAckRecvJoinClan_Parms parms;

	if ( !psfAckRecvJoinClan )
		psfAckRecvJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRecvJoinClan" );

	parms.UserIdx = UserIdx;
	parms.CharName = CharName;
	parms.ReqMsg = ReqMsg;
	parms.Permit = Permit;
	this->ProcessEvent ( psfAckRecvJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message )
{
	static UFunction* psfReqRecvJoinClan = 0;
	UBTTcpLink_Channel_execsfReqRecvJoinClan_Parms parms;

	if ( !psfReqRecvJoinClan )
		psfReqRecvJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvJoinClan" );

	parms.UserIdx = UserIdx;
	parms.CharName = CharName;
	parms.Message = Message;
	this->ProcessEvent ( psfReqRecvJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade )
{
	static UFunction* psfAckJoinClan = 0;
	UBTTcpLink_Channel_execsfAckJoinClan_Parms parms;

	if ( !psfAckJoinClan )
		psfAckJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckJoinClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.SpecificCharName = SpecificCharName;
	parms.RealRecvCharName = RealRecvCharName;
	parms.RealRecvCharClanGrade = RealRecvCharClanGrade;
	this->ProcessEvent ( psfAckJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqJoinClan ( struct FString ClanName, struct FString ClanManagerName, struct FString Message )
{
	static UFunction* psfReqJoinClan = 0;
	UBTTcpLink_Channel_execsfReqJoinClan_Parms parms;

	if ( !psfReqJoinClan )
		psfReqJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqJoinClan" );

	parms.ClanName = ClanName;
	parms.ClanManagerName = ClanManagerName;
	parms.Message = Message;
	this->ProcessEvent ( psfReqJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm )
{
	static UFunction* psfAckInviteClanResult = 0;
	UBTTcpLink_Channel_execsfAckInviteClanResult_Parms parms;

	if ( !psfAckInviteClanResult )
		psfAckInviteClanResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckInviteClanResult" );

	parms.CharName = CharName;
	parms.Permit = Permit;
	parms.ClanNm = ClanNm;
	this->ProcessEvent ( psfAckInviteClanResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRecvClanInviteResult ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckRecvClanInviteResult = 0;
	UBTTcpLink_Channel_execsfAckRecvClanInviteResult_Parms parms;

	if ( !psfAckRecvClanInviteResult )
		psfAckRecvClanInviteResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRecvClanInviteResult" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckRecvClanInviteResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString InviterMsg, struct FString ClanName, unsigned char Permit )
{
	static UFunction* psfAckRecvClanInvite = 0;
	UBTTcpLink_Channel_execsfAckRecvClanInvite_Parms parms;

	if ( !psfAckRecvClanInvite )
		psfAckRecvClanInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRecvClanInvite" );

	parms.InviterUserDBID = InviterUserDBID;
	parms.InviterCharname = InviterCharname;
	parms.InviterMsg = InviterMsg;
	parms.ClanName = ClanName;
	parms.Permit = Permit;
	this->ProcessEvent ( psfAckRecvClanInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg )
{
	static UFunction* psfReqRecvClanInvite = 0;
	UBTTcpLink_Channel_execsfReqRecvClanInvite_Parms parms;

	if ( !psfReqRecvClanInvite )
		psfReqRecvClanInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvClanInvite" );

	parms.InviterUserDBID = InviterUserDBID;
	parms.InviterCharname = InviterCharname;
	parms.ClanName = ClanName;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( psfReqRecvClanInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckInviteClan ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckInviteClan = 0;
	UBTTcpLink_Channel_execsfAckInviteClan_Parms parms;

	if ( !psfAckInviteClan )
		psfAckInviteClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckInviteClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckInviteClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqInviteClan ( struct FString CharName, struct FString InviteMsg )
{
	static UFunction* psfReqInviteClan = 0;
	UBTTcpLink_Channel_execsfReqInviteClan_Parms parms;

	if ( !psfReqInviteClan )
		psfReqInviteClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqInviteClan" );

	parms.CharName = CharName;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( psfReqInviteClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClanInfo ( struct FClanInfo stClanInfo )
{
	static UFunction* psfAckClanInfo = 0;
	UBTTcpLink_Channel_execsfAckClanInfo_Parms parms;

	if ( !psfAckClanInfo )
		psfAckClanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClanInfo" );

	parms.stClanInfo = stClanInfo;
	this->ProcessEvent ( psfAckClanInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClanInfo ( struct FString ClanName )
{
	static UFunction* psfReqClanInfo = 0;
	UBTTcpLink_Channel_execsfReqClanInfo_Parms parms;

	if ( !psfReqClanInfo )
		psfReqClanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClanInfo" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( psfReqClanInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount )
{
	static UFunction* psfAckCreateClan = 0;
	UBTTcpLink_Channel_execsfAckCreateClan_Parms parms;

	if ( !psfAckCreateClan )
		psfAckCreateClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCreateClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.StackCount = StackCount;
	this->ProcessEvent ( psfAckCreateClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCreateClan ( struct FString ClanName, struct FString ClanURL, struct FString ClanIntro, struct FString ClanKeyword, unsigned char ClanRegion )
{
	static UFunction* psfReqCreateClan = 0;
	UBTTcpLink_Channel_execsfReqCreateClan_Parms parms;

	if ( !psfReqCreateClan )
		psfReqCreateClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCreateClan" );

	parms.ClanName = ClanName;
	parms.ClanURL = ClanURL;
	parms.ClanIntro = ClanIntro;
	parms.ClanKeyword = ClanKeyword;
	parms.ClanRegion = ClanRegion;
	this->ProcessEvent ( psfReqCreateClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDupCheckClanName ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckDupCheckClanName = 0;
	UBTTcpLink_Channel_execsfAckDupCheckClanName_Parms parms;

	if ( !psfAckDupCheckClanName )
		psfAckDupCheckClanName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDupCheckClanName" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckDupCheckClanName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDupCheckClanName ( struct FString ClanNam )
{
	static UFunction* psfReqDupCheckClanName = 0;
	UBTTcpLink_Channel_execsfReqDupCheckClanName_Parms parms;

	if ( !psfReqDupCheckClanName )
		psfReqDupCheckClanName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDupCheckClanName" );

	parms.ClanNam = ClanNam;
	this->ProcessEvent ( psfReqDupCheckClanName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint )
{
	static UFunction* psfAckSellShopItemInfo = 0;
	UBTTcpLink_Channel_execsfAckSellShopItemInfo_Parms parms;

	if ( !psfAckSellShopItemInfo )
		psfAckSellShopItemInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSellShopItemInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.SellPoint = SellPoint;
	parms.CurPoint = CurPoint;
	parms.AfterPoint = AfterPoint;
	this->ProcessEvent ( psfAckSellShopItemInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSellShopItemInfo ( struct FBtrDouble UniqueItemID, int Count )
{
	static UFunction* psfReqSellShopItemInfo = 0;
	UBTTcpLink_Channel_execsfReqSellShopItemInfo_Parms parms;

	if ( !psfReqSellShopItemInfo )
		psfReqSellShopItemInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSellShopItemInfo" );

	parms.UniqueItemID = UniqueItemID;
	parms.Count = Count;
	this->ProcessEvent ( psfReqSellShopItemInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGameOverEnd ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckGameOverEnd = 0;
	UBTTcpLink_Channel_execsfAckGameOverEnd_Parms parms;

	if ( !psfAckGameOverEnd )
		psfAckGameOverEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGameOverEnd" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckGameOverEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGameOverEnd (  )
{
	static UFunction* psfReqGameOverEnd = 0;
	UBTTcpLink_Channel_execsfReqGameOverEnd_Parms parms;

	if ( !psfReqGameOverEnd )
		psfReqGameOverEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGameOverEnd" );

	this->ProcessEvent ( psfReqGameOverEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count )
{
	static UFunction* psfAckAuctionItemListCount = 0;
	UBTTcpLink_Channel_execsfAckAuctionItemListCount_Parms parms;

	if ( !psfAckAuctionItemListCount )
		psfAckAuctionItemListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionItemListCount" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Section = Section;
	parms.Classfy = Classfy;
	parms.ItemType = ItemType;
	parms.ItemGrade = ItemGrade;
	parms.Count = Count;
	this->ProcessEvent ( psfAckAuctionItemListCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAuctionItemListCount ( unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade )
{
	static UFunction* psfReqAuctionItemListCount = 0;
	UBTTcpLink_Channel_execsfReqAuctionItemListCount_Parms parms;

	if ( !psfReqAuctionItemListCount )
		psfReqAuctionItemListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAuctionItemListCount" );

	parms.Section = Section;
	parms.Classfy = Classfy;
	parms.ItemType = ItemType;
	parms.ItemGrade = ItemGrade;
	this->ProcessEvent ( psfReqAuctionItemListCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckServerTime ( int Time )
{
	static UFunction* psfAckServerTime = 0;
	UBTTcpLink_Channel_execsfAckServerTime_Parms parms;

	if ( !psfAckServerTime )
		psfAckServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckServerTime" );

	parms.Time = Time;
	this->ProcessEvent ( psfAckServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqServerTime (  )
{
	static UFunction* psfReqServerTime = 0;
	UBTTcpLink_Channel_execsfReqServerTime_Parms parms;

	if ( !psfReqServerTime )
		psfReqServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqServerTime" );

	this->ProcessEvent ( psfReqServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID )
{
	static UFunction* psfAckEntryQSlotIDList = 0;
	UBTTcpLink_Channel_execsfAckEntryQSlotIDList_Parms parms;

	if ( !psfAckEntryQSlotIDList )
		psfAckEntryQSlotIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEntryQSlotIDList" );

	parms.UserNum = UserNum;
	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWItemID = MWItemID;
	parms.MWPartID = MWPartID;
	parms.MWPaintID = MWPaintID;
	parms.PistolItemID = PistolItemID;
	parms.PistolPartID = PistolPartID;
	parms.PistolPaintID = PistolPaintID;
	parms.TWItemID1 = TWItemID1;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1ID = Skill1ID;
	parms.Skill2ID = Skill2ID;
	parms.Skill3ID = Skill3ID;
	parms.Skill4ID = Skill4ID;
	this->ProcessEvent ( psfAckEntryQSlotIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEntryQSlotIDList ( int UserNum )
{
	static UFunction* psfReqEntryQSlotIDList = 0;
	UBTTcpLink_Channel_execsfReqEntryQSlotIDList_Parms parms;

	if ( !psfReqEntryQSlotIDList )
		psfReqEntryQSlotIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEntryQSlotIDList" );

	parms.UserNum = UserNum;
	this->ProcessEvent ( psfReqEntryQSlotIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID )
{
	static UFunction* psfAckEntryQSlotUniqueIDList = 0;
	UBTTcpLink_Channel_execsfAckEntryQSlotUniqueIDList_Parms parms;

	if ( !psfAckEntryQSlotUniqueIDList )
		psfAckEntryQSlotUniqueIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEntryQSlotUniqueIDList" );

	parms.UserNum = UserNum;
	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWUniqueID = MWUniqueID;
	parms.PistolUniqueID = PistolUniqueID;
	parms.TW1UniqueID = TW1UniqueID;
	parms.TW2UniqueID = TW2UniqueID;
	this->ProcessEvent ( psfAckEntryQSlotUniqueIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEntryQSlotUniqueIDList ( int UserNum )
{
	static UFunction* psfReqEntryQSlotUniqueIDList = 0;
	UBTTcpLink_Channel_execsfReqEntryQSlotUniqueIDList_Parms parms;

	if ( !psfReqEntryQSlotUniqueIDList )
		psfReqEntryQSlotUniqueIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEntryQSlotUniqueIDList" );

	parms.UserNum = UserNum;
	this->ProcessEvent ( psfReqEntryQSlotUniqueIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain )
{
	static UFunction* psfAckAuctionBidding = 0;
	UBTTcpLink_Channel_execsfAckAuctionBidding_Parms parms;

	if ( !psfAckAuctionBidding )
		psfAckAuctionBidding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionBidding" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	this->ProcessEvent ( psfAckAuctionBidding, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAuctionBidding ( int UniqueID, int BiddingPrice )
{
	static UFunction* psfReqAuctionBidding = 0;
	UBTTcpLink_Channel_execsfReqAuctionBidding_Parms parms;

	if ( !psfReqAuctionBidding )
		psfReqAuctionBidding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAuctionBidding" );

	parms.UniqueID = UniqueID;
	parms.BiddingPrice = BiddingPrice;
	this->ProcessEvent ( psfReqAuctionBidding, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain )
{
	static UFunction* psfAckAuctionInstantlyBuying = 0;
	UBTTcpLink_Channel_execsfAckAuctionInstantlyBuying_Parms parms;

	if ( !psfAckAuctionInstantlyBuying )
		psfAckAuctionInstantlyBuying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionInstantlyBuying" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	this->ProcessEvent ( psfAckAuctionInstantlyBuying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAuctionInstantlyBuying ( int UniqueID )
{
	static UFunction* psfReqAuctionInstantlyBuying = 0;
	UBTTcpLink_Channel_execsfReqAuctionInstantlyBuying_Parms parms;

	if ( !psfReqAuctionInstantlyBuying )
		psfReqAuctionInstantlyBuying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAuctionInstantlyBuying" );

	parms.UniqueID = UniqueID;
	this->ProcessEvent ( psfReqAuctionInstantlyBuying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionItemListEnd ( unsigned char Section )
{
	static UFunction* psfAckAuctionItemListEnd = 0;
	UBTTcpLink_Channel_execsfAckAuctionItemListEnd_Parms parms;

	if ( !psfAckAuctionItemListEnd )
		psfAckAuctionItemListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionItemListEnd" );

	parms.Section = Section;
	this->ProcessEvent ( psfAckAuctionItemListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount )
{
	static UFunction* psfAckAuctionItemList = 0;
	UBTTcpLink_Channel_execsfAckAuctionItemList_Parms parms;

	if ( !psfAckAuctionItemList )
		psfAckAuctionItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionItemList" );

	parms.Section = Section;
	parms.UniqueIDs = UniqueIDs;
	parms.ItemIDs = ItemIDs;
	parms.AddPartsIDs = AddPartsIDs;
	parms.UntilTimes = UntilTimes;
	parms.BiddingPrices = BiddingPrices;
	parms.InstantlyByuingPrices = InstantlyByuingPrices;
	parms.ItemDamageds = ItemDamageds;
	parms.HighestBidderNames = HighestBidderNames;
	parms.SellerNames = SellerNames;
	parms.ItemCount = ItemCount;
	this->ProcessEvent ( psfAckAuctionItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count )
{
	static UFunction* psfAckAuctionItemListStart = 0;
	UBTTcpLink_Channel_execsfAckAuctionItemListStart_Parms parms;

	if ( !psfAckAuctionItemListStart )
		psfAckAuctionItemListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionItemListStart" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Section = Section;
	parms.PageNum = PageNum;
	parms.Count = Count;
	this->ProcessEvent ( psfAckAuctionItemListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAuctionItemList ( unsigned char Section, struct FString Keyword, int ItemRank, unsigned char ItemClassfy, unsigned char IsAvailable, int PageNum, int Count, int SortOpt )
{
	static UFunction* psfReqAuctionItemList = 0;
	UBTTcpLink_Channel_execsfReqAuctionItemList_Parms parms;

	if ( !psfReqAuctionItemList )
		psfReqAuctionItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAuctionItemList" );

	parms.Section = Section;
	parms.Keyword = Keyword;
	parms.ItemRank = ItemRank;
	parms.ItemClassfy = ItemClassfy;
	parms.IsAvailable = IsAvailable;
	parms.PageNum = PageNum;
	parms.Count = Count;
	parms.SortOpt = SortOpt;
	this->ProcessEvent ( psfReqAuctionItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckAuctionMyItemCancel = 0;
	UBTTcpLink_Channel_execsfAckAuctionMyItemCancel_Parms parms;

	if ( !psfAckAuctionMyItemCancel )
		psfAckAuctionMyItemCancel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionMyItemCancel" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckAuctionMyItemCancel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAuctionMyItemCancel ( int UniqueID )
{
	static UFunction* psfReqAuctionMyItemCancel = 0;
	UBTTcpLink_Channel_execsfReqAuctionMyItemCancel_Parms parms;

	if ( !psfReqAuctionMyItemCancel )
		psfReqAuctionMyItemCancel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAuctionMyItemCancel" );

	parms.UniqueID = UniqueID;
	this->ProcessEvent ( psfReqAuctionMyItemCancel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain )
{
	static UFunction* psfAckAuctionMyItemRegister = 0;
	UBTTcpLink_Channel_execsfAckAuctionMyItemRegister_Parms parms;

	if ( !psfAckAuctionMyItemRegister )
		psfAckAuctionMyItemRegister = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAuctionMyItemRegister" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.BeginPrice = BeginPrice;
	parms.BuyPrice = BuyPrice;
	parms.GuarantyPoint = GuarantyPoint;
	parms.PointRemain = PointRemain;
	this->ProcessEvent ( psfAckAuctionMyItemRegister, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAuctionMyItemRegister ( struct FBtrDouble UniqueID, int ItemCount, int BeginPrice, int PeriodHour, int InstantlyBuyingPrice )
{
	static UFunction* psfReqAuctionMyItemRegister = 0;
	UBTTcpLink_Channel_execsfReqAuctionMyItemRegister_Parms parms;

	if ( !psfReqAuctionMyItemRegister )
		psfReqAuctionMyItemRegister = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAuctionMyItemRegister" );

	parms.UniqueID = UniqueID;
	parms.ItemCount = ItemCount;
	parms.BeginPrice = BeginPrice;
	parms.PeriodHour = PeriodHour;
	parms.InstantlyBuyingPrice = InstantlyBuyingPrice;
	this->ProcessEvent ( psfReqAuctionMyItemRegister, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash )
{
	static UFunction* psfAckMyMoney = 0;
	UBTTcpLink_Channel_execsfAckMyMoney_Parms parms;

	if ( !psfAckMyMoney )
		psfAckMyMoney = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckMyMoney" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Point = Point;
	parms.Cash = Cash;
	this->ProcessEvent ( psfAckMyMoney, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqMyMoney (  )
{
	static UFunction* psfReqMyMoney = 0;
	UBTTcpLink_Channel_execsfReqMyMoney_Parms parms;

	if ( !psfReqMyMoney )
		psfReqMyMoney = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqMyMoney" );

	this->ProcessEvent ( psfReqMyMoney, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckUpdateQSlot ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckUpdateQSlot = 0;
	UBTTcpLink_Channel_execsfAckUpdateQSlot_Parms parms;

	if ( !psfAckUpdateQSlot )
		psfAckUpdateQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckUpdateQSlot" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckUpdateQSlot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqUpdateQSlot ( int QSlotID, struct FString QSlotName, struct FBtrDouble MWItemID, struct FBtrDouble PistolItemID, struct FBtrDouble TWItemID1, struct FBtrDouble TWItemID2, int Skill1, int Skill2, int Skill3, int Skill4 )
{
	static UFunction* psfReqUpdateQSlot = 0;
	UBTTcpLink_Channel_execsfReqUpdateQSlot_Parms parms;

	if ( !psfReqUpdateQSlot )
		psfReqUpdateQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqUpdateQSlot" );

	parms.QSlotID = QSlotID;
	parms.QSlotName = QSlotName;
	parms.MWItemID = MWItemID;
	parms.PistolItemID = PistolItemID;
	parms.TWItemID1 = TWItemID1;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1 = Skill1;
	parms.Skill2 = Skill2;
	parms.Skill3 = Skill3;
	parms.Skill4 = Skill4;
	this->ProcessEvent ( psfReqUpdateQSlot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 )
{
	static UFunction* psfAckQSlotList = 0;
	UBTTcpLink_Channel_execsfAckQSlotList_Parms parms;

	if ( !psfAckQSlotList )
		psfAckQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckQSlotList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.QSlotID = QSlotID;
	parms.QSlotName = QSlotName;
	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWItemID = MWItemID;
	parms.PistolItemID = PistolItemID;
	parms.TWItemID1 = TWItemID1;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1 = Skill1;
	parms.Skill2 = Skill2;
	parms.Skill3 = Skill3;
	parms.Skill4 = Skill4;
	this->ProcessEvent ( psfAckQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqQSlotList (  )
{
	static UFunction* psfReqQSlotList = 0;
	UBTTcpLink_Channel_execsfReqQSlotList_Parms parms;

	if ( !psfReqQSlotList )
		psfReqQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqQSlotList" );

	this->ProcessEvent ( psfReqQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree )
{
	static UFunction* psfAckRepairItem = 0;
	UBTTcpLink_Channel_execsfAckRepairItem_Parms parms;

	if ( !psfAckRepairItem )
		psfAckRepairItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRepairItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.RepairCost = RepairCost;
	parms.DamageDegree = DamageDegree;
	this->ProcessEvent ( psfAckRepairItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRepairItem ( class TArray< struct FBtrDouble > UniqueItemID )
{
	static UFunction* psfReqRepairItem = 0;
	UBTTcpLink_Channel_execsfReqRepairItem_Parms parms;

	if ( !psfReqRepairItem )
		psfReqRepairItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRepairItem" );

	parms.UniqueItemID = UniqueItemID;
	this->ProcessEvent ( psfReqRepairItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost )
{
	static UFunction* psfAckRepairCost = 0;
	UBTTcpLink_Channel_execsfAckRepairCost_Parms parms;

	if ( !psfAckRepairCost )
		psfAckRepairCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRepairCost" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.RepairCost = RepairCost;
	this->ProcessEvent ( psfAckRepairCost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRepairCost ( class TArray< struct FBtrDouble > UniqueItemID )
{
	static UFunction* psfReqRepairCost = 0;
	UBTTcpLink_Channel_execsfReqRepairCost_Parms parms;

	if ( !psfReqRepairCost )
		psfReqRepairCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRepairCost" );

	parms.UniqueItemID = UniqueItemID;
	this->ProcessEvent ( psfReqRepairCost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID )
{
	static UFunction* psfAckUpdateWeaponDurability = 0;
	UBTTcpLink_Channel_execsfAckUpdateWeaponDurability_Parms parms;

	if ( !psfAckUpdateWeaponDurability )
		psfAckUpdateWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckUpdateWeaponDurability" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.Durability = Durability;
	parms.IsDestroy = IsDestroy;
	parms.FailedWeaponUniqueID = FailedWeaponUniqueID;
	this->ProcessEvent ( psfAckUpdateWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqUpdateWeaponDurability ( int TotalPlayTime, class TArray< int > OwnerID, class TArray< int > Number, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > UsingSec, class TArray< int > UsingRoundInSD )
{
	static UFunction* psfReqUpdateWeaponDurability = 0;
	UBTTcpLink_Channel_execsfReqUpdateWeaponDurability_Parms parms;

	if ( !psfReqUpdateWeaponDurability )
		psfReqUpdateWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqUpdateWeaponDurability" );

	parms.TotalPlayTime = TotalPlayTime;
	parms.OwnerID = OwnerID;
	parms.Number = Number;
	parms.UniqueItemID = UniqueItemID;
	parms.UsingSec = UsingSec;
	parms.UsingRoundInSD = UsingRoundInSD;
	this->ProcessEvent ( psfReqUpdateWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash )
{
	static UFunction* psfAckModifyWeapon = 0;
	UBTTcpLink_Channel_execsfAckModifyWeapon_Parms parms;

	if ( !psfAckModifyWeapon )
		psfAckModifyWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckModifyWeapon" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueID = UniqueID;
	parms.AddPartID = AddPartID;
	parms.PaintID = PaintID;
	parms.Point = Point;
	parms.Cash = Cash;
	this->ProcessEvent ( psfAckModifyWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqModifyWeapon ( struct FBtrDouble UniqueID, int AddPartID, int PaintID )
{
	static UFunction* psfReqModifyWeapon = 0;
	UBTTcpLink_Channel_execsfReqModifyWeapon_Parms parms;

	if ( !psfReqModifyWeapon )
		psfReqModifyWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqModifyWeapon" );

	parms.UniqueID = UniqueID;
	parms.AddPartID = AddPartID;
	parms.PaintID = PaintID;
	this->ProcessEvent ( psfReqModifyWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count )
{
	static UFunction* psfAckSellShopItem = 0;
	UBTTcpLink_Channel_execsfAckSellShopItem_Parms parms;

	if ( !psfAckSellShopItem )
		psfAckSellShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSellShopItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	parms.CashRemain = CashRemain;
	parms.Count = Count;
	this->ProcessEvent ( psfAckSellShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSellShopItem ( struct FBtrDouble ItemUniqueID, int Count )
{
	static UFunction* psfReqSellShopItem = 0;
	UBTTcpLink_Channel_execsfReqSellShopItem_Parms parms;

	if ( !psfReqSellShopItem )
		psfReqSellShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSellShopItem" );

	parms.ItemUniqueID = ItemUniqueID;
	parms.Count = Count;
	this->ProcessEvent ( psfReqSellShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain )
{
	static UFunction* psfAckBuyShopItem = 0;
	UBTTcpLink_Channel_execsfAckBuyShopItem_Parms parms;

	if ( !psfAckBuyShopItem )
		psfAckBuyShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckBuyShopItem" );

	parms.ItemCount = ItemCount;
	parms.Result = Result;
	parms.BoughtItemTypeID = BoughtItemTypeID;
	parms.BoughtItemUniqueID = BoughtItemUniqueID;
	parms.BoughtPartID = BoughtPartID;
	parms.BoughtUntilTIme = BoughtUntilTIme;
	parms.BoughtStackCnt = BoughtStackCnt;
	parms.PointRemain = PointRemain;
	parms.CashRemain = CashRemain;
	this->ProcessEvent ( psfAckBuyShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqBuyShopItem ( int ItemID, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 )
{
	static UFunction* psfReqBuyShopItem = 0;
	UBTTcpLink_Channel_execsfReqBuyShopItem_Parms parms;

	if ( !psfReqBuyShopItem )
		psfReqBuyShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqBuyShopItem" );

	parms.ItemID = ItemID;
	parms.ItemUniqueID = ItemUniqueID;
	parms.BuyOption1 = BuyOption1;
	parms.BuyOption2 = BuyOption2;
	this->ProcessEvent ( psfReqBuyShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckShopItemListEnd (  )
{
	static UFunction* psfAckShopItemListEnd = 0;
	UBTTcpLink_Channel_execsfAckShopItemListEnd_Parms parms;

	if ( !psfAckShopItemListEnd )
		psfAckShopItemListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckShopItemListEnd" );

	this->ProcessEvent ( psfAckShopItemListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckShopItemList ( class TArray< int > ItemID )
{
	static UFunction* psfAckShopItemList = 0;
	UBTTcpLink_Channel_execsfAckShopItemList_Parms parms;

	if ( !psfAckShopItemList )
		psfAckShopItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckShopItemList" );

	parms.ItemID = ItemID;
	this->ProcessEvent ( psfAckShopItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckShopItemListStart ( int Count )
{
	static UFunction* psfAckShopItemListStart = 0;
	UBTTcpLink_Channel_execsfAckShopItemListStart_Parms parms;

	if ( !psfAckShopItemListStart )
		psfAckShopItemListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckShopItemListStart" );

	parms.Count = Count;
	this->ProcessEvent ( psfAckShopItemListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqShopItemList (  )
{
	static UFunction* psfReqShopItemList = 0;
	UBTTcpLink_Channel_execsfReqShopItemList_Parms parms;

	if ( !psfReqShopItemList )
		psfReqShopItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqShopItemList" );

	this->ProcessEvent ( psfReqShopItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckForceGameOver = 0;
	UBTTcpLink_Channel_execsfAckForceGameOver_Parms parms;

	if ( !psfAckForceGameOver )
		psfAckForceGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckForceGameOver" );

	parms.UserID = UserID;
	parms.GameRoomNumber = GameRoomNumber;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckForceGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqForceGameOver (  )
{
	static UFunction* psfReqForceGameOver = 0;
	UBTTcpLink_Channel_execsfReqForceGameOver_Parms parms;

	if ( !psfReqForceGameOver )
		psfReqForceGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqForceGameOver" );

	this->ProcessEvent ( psfReqForceGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGiveSkill ( int SkillID, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckGiveSkill = 0;
	UBTTcpLink_Channel_execsfAckGiveSkill_Parms parms;

	if ( !psfAckGiveSkill )
		psfAckGiveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGiveSkill" );

	parms.SkillID = SkillID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckGiveSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGiveSkill (  )
{
	static UFunction* psfReqGiveSkill = 0;
	UBTTcpLink_Channel_execsfReqGiveSkill_Parms parms;

	if ( !psfReqGiveSkill )
		psfReqGiveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGiveSkill" );

	this->ProcessEvent ( psfReqGiveSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckNotifyExpiredItemIDs = 0;
	UBTTcpLink_Channel_execsfAckNotifyExpiredItemIDs_Parms parms;

	if ( !psfAckNotifyExpiredItemIDs )
		psfAckNotifyExpiredItemIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyExpiredItemIDs" );

	parms.UserID = UserID;
	parms.ExpiredItemUniqueIDs = ExpiredItemUniqueIDs;
	parms.ExpiredItemIDs = ExpiredItemIDs;
	parms.ExpiredItemPartIDs = ExpiredItemPartIDs;
	parms.ExpiredItemSlotPos = ExpiredItemSlotPos;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckNotifyExpiredItemIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyExpiredItemIDs (  )
{
	static UFunction* psfReqNotifyExpiredItemIDs = 0;
	UBTTcpLink_Channel_execsfReqNotifyExpiredItemIDs_Parms parms;

	if ( !psfReqNotifyExpiredItemIDs )
		psfReqNotifyExpiredItemIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyExpiredItemIDs" );

	this->ProcessEvent ( psfReqNotifyExpiredItemIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions )
{
	static UFunction* psfAckNotifyExpiredSkillIDs = 0;
	UBTTcpLink_Channel_execsfAckNotifyExpiredSkillIDs_Parms parms;

	if ( !psfAckNotifyExpiredSkillIDs )
		psfAckNotifyExpiredSkillIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyExpiredSkillIDs" );

	parms.UserID = UserID;
	parms.ExpiredSkillUniqueIDs = ExpiredSkillUniqueIDs;
	parms.ExpiredSkillIDs = ExpiredSkillIDs;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ExpiredSkillSlotPositions = ExpiredSkillSlotPositions;
	this->ProcessEvent ( psfAckNotifyExpiredSkillIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyExpiredSkillIDs (  )
{
	static UFunction* psfReqNotifyExpiredSkillIDs = 0;
	UBTTcpLink_Channel_execsfReqNotifyExpiredSkillIDs_Parms parms;

	if ( !psfReqNotifyExpiredSkillIDs )
		psfReqNotifyExpiredSkillIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyExpiredSkillIDs" );

	this->ProcessEvent ( psfReqNotifyExpiredSkillIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyChangedSkillState ( int UserID, class TArray< int > SkillIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckNotifyChangedSkillState = 0;
	UBTTcpLink_Channel_execsfAckNotifyChangedSkillState_Parms parms;

	if ( !psfAckNotifyChangedSkillState )
		psfAckNotifyChangedSkillState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyChangedSkillState" );

	parms.UserID = UserID;
	parms.SkillIDs = SkillIDs;
	parms.NewStates = NewStates;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckNotifyChangedSkillState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyChangedSkillState (  )
{
	static UFunction* psfReqNotifyChangedSkillState = 0;
	UBTTcpLink_Channel_execsfReqNotifyChangedSkillState_Parms parms;

	if ( !psfReqNotifyChangedSkillState )
		psfReqNotifyChangedSkillState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyChangedSkillState" );

	this->ProcessEvent ( psfReqNotifyChangedSkillState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyChangedItemState ( int UserID, class TArray< int > ItemIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckNotifyChangedItemState = 0;
	UBTTcpLink_Channel_execsfAckNotifyChangedItemState_Parms parms;

	if ( !psfAckNotifyChangedItemState )
		psfAckNotifyChangedItemState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyChangedItemState" );

	parms.UserID = UserID;
	parms.ItemIDs = ItemIDs;
	parms.NewStates = NewStates;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckNotifyChangedItemState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyChangedItemState (  )
{
	static UFunction* psfReqNotifyChangedItemState = 0;
	UBTTcpLink_Channel_execsfReqNotifyChangedItemState_Parms parms;

	if ( !psfReqNotifyChangedItemState )
		psfReqNotifyChangedItemState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyChangedItemState" );

	this->ProcessEvent ( psfReqNotifyChangedItemState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckConfirmSkillChanged ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckConfirmSkillChanged = 0;
	UBTTcpLink_Channel_execsfAckConfirmSkillChanged_Parms parms;

	if ( !psfAckConfirmSkillChanged )
		psfAckConfirmSkillChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckConfirmSkillChanged" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckConfirmSkillChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqConfirmSkillChanged (  )
{
	static UFunction* psfReqConfirmSkillChanged = 0;
	UBTTcpLink_Channel_execsfReqConfirmSkillChanged_Parms parms;

	if ( !psfReqConfirmSkillChanged )
		psfReqConfirmSkillChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqConfirmSkillChanged" );

	this->ProcessEvent ( psfReqConfirmSkillChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckEquipSkill = 0;
	UBTTcpLink_Channel_execsfAckEquipSkill_Parms parms;

	if ( !psfAckEquipSkill )
		psfAckEquipSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEquipSkill" );

	parms.ChangedNewSkillID = ChangedNewSkillID;
	parms.ChangedNewSkillUniqueID = ChangedNewSkillUniqueID;
	parms.ChangedNewSlotPosition = ChangedNewSlotPosition;
	parms.ChangedOldSkillID = ChangedOldSkillID;
	parms.ChangedOldSkillUniqueID = ChangedOldSkillUniqueID;
	parms.ChangedOldSlotPosition = ChangedOldSlotPosition;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckEquipSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEquipSkill ( int SkillID, int SkillUniqueID, unsigned char NewSlotPosition )
{
	static UFunction* psfReqEquipSkill = 0;
	UBTTcpLink_Channel_execsfReqEquipSkill_Parms parms;

	if ( !psfReqEquipSkill )
		psfReqEquipSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEquipSkill" );

	parms.SkillID = SkillID;
	parms.SkillUniqueID = SkillUniqueID;
	parms.NewSlotPosition = NewSlotPosition;
	this->ProcessEvent ( psfReqEquipSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckUserSkillListEnd (  )
{
	static UFunction* psfAckUserSkillListEnd = 0;
	UBTTcpLink_Channel_execsfAckUserSkillListEnd_Parms parms;

	if ( !psfAckUserSkillListEnd )
		psfAckUserSkillListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckUserSkillListEnd" );

	this->ProcessEvent ( psfAckUserSkillListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition )
{
	static UFunction* psfAckUserSkillList = 0;
	UBTTcpLink_Channel_execsfAckUserSkillList_Parms parms;

	if ( !psfAckUserSkillList )
		psfAckUserSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckUserSkillList" );

	parms.UniqueSkillID = UniqueSkillID;
	parms.SkillID = SkillID;
	parms.UntilTime = UntilTime;
	parms.SlotPosition = SlotPosition;
	this->ProcessEvent ( psfAckUserSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckUserSkillListStart = 0;
	UBTTcpLink_Channel_execsfAckUserSkillListStart_Parms parms;

	if ( !psfAckUserSkillListStart )
		psfAckUserSkillListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckUserSkillListStart" );

	parms.Count = Count;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckUserSkillListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqUserSkillList ( int UserID )
{
	static UFunction* psfReqUserSkillList = 0;
	UBTTcpLink_Channel_execsfReqUserSkillList_Parms parms;

	if ( !psfReqUserSkillList )
		psfReqUserSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqUserSkillList" );

	parms.UserID = UserID;
	this->ProcessEvent ( psfReqUserSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID )
{
	static UFunction* psfAckDelMemo = 0;
	UBTTcpLink_Channel_execsfAckDelMemo_Parms parms;

	if ( !psfAckDelMemo )
		psfAckDelMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDelMemo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.FailedMemoID = FailedMemoID;
	this->ProcessEvent ( psfAckDelMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDelMemo ( class TArray< int > MemoIdx, unsigned char Type )
{
	static UFunction* psfReqDelMemo = 0;
	UBTTcpLink_Channel_execsfReqDelMemo_Parms parms;

	if ( !psfReqDelMemo )
		psfReqDelMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDelMemo" );

	parms.MemoIdx = MemoIdx;
	parms.Type = Type;
	this->ProcessEvent ( psfReqDelMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID )
{
	static UFunction* psfAckReadMemo = 0;
	UBTTcpLink_Channel_execsfAckReadMemo_Parms parms;

	if ( !psfAckReadMemo )
		psfAckReadMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckReadMemo" );

	parms.cnameFrom = cnameFrom;
	parms.Text = Text;
	parms.dateRecv = dateRecv;
	parms.ItemUID = ItemUID;
	this->ProcessEvent ( psfAckReadMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqReadMemo ( int MemoIdx )
{
	static UFunction* psfReqReadMemo = 0;
	UBTTcpLink_Channel_execsfReqReadMemo_Parms parms;

	if ( !psfReqReadMemo )
		psfReqReadMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqReadMemo" );

	parms.MemoIdx = MemoIdx;
	this->ProcessEvent ( psfReqReadMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEndMemoList (  )
{
	static UFunction* psfAckEndMemoList = 0;
	UBTTcpLink_Channel_execsfAckEndMemoList_Parms parms;

	if ( !psfAckEndMemoList )
		psfAckEndMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEndMemoList" );

	this->ProcessEvent ( psfAckEndMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID )
{
	static UFunction* psfAckMemoList = 0;
	UBTTcpLink_Channel_execsfAckMemoList_Parms parms;

	if ( !psfAckMemoList )
		psfAckMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckMemoList" );

	parms.MemoIdx = MemoIdx;
	parms.cnameFrom = cnameFrom;
	parms.dateRecv = dateRecv;
	parms.Text = Text;
	parms.Status = Status;
	parms.UntilExpire = UntilExpire;
	parms.ItemUID = ItemUID;
	parms.ItemID = ItemID;
	parms.MsgType = MsgType;
	parms.ItemPartID = ItemPartID;
	this->ProcessEvent ( psfAckMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount )
{
	static UFunction* psfAckStartMemoList = 0;
	UBTTcpLink_Channel_execsfAckStartMemoList_Parms parms;

	if ( !psfAckStartMemoList )
		psfAckStartMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckStartMemoList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Type = Type;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckStartMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqMemoList ( unsigned char Type, unsigned char MemoType )
{
	static UFunction* psfReqMemoList = 0;
	UBTTcpLink_Channel_execsfReqMemoList_Parms parms;

	if ( !psfReqMemoList )
		psfReqMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqMemoList" );

	parms.Type = Type;
	parms.MemoType = MemoType;
	this->ProcessEvent ( psfReqMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvMemo ( struct FString cnameFrom, unsigned char MemoType )
{
	static UFunction* psfReqRecvMemo = 0;
	UBTTcpLink_Channel_execsfReqRecvMemo_Parms parms;

	if ( !psfReqRecvMemo )
		psfReqRecvMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvMemo" );

	parms.cnameFrom = cnameFrom;
	parms.MemoType = MemoType;
	this->ProcessEvent ( psfReqRecvMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray )
{
	static UFunction* psfAckSendMemo = 0;
	UBTTcpLink_Channel_execsfAckSendMemo_Parms parms;

	if ( !psfAckSendMemo )
		psfAckSendMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSendMemo" );

	parms.CnamesToFail = CnamesToFail;
	parms.ResultArray = ResultArray;
	this->ProcessEvent ( psfAckSendMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSendMemo ( class TArray< struct FString > cnames, struct FString Msg, int ItemUID )
{
	static UFunction* psfReqSendMemo = 0;
	UBTTcpLink_Channel_execsfReqSendMemo_Parms parms;

	if ( !psfReqSendMemo )
		psfReqSendMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSendMemo" );

	parms.cnames = cnames;
	parms.Msg = Msg;
	parms.ItemUID = ItemUID;
	this->ProcessEvent ( psfReqSendMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message )
{
	static UFunction* psfReqRecvChatWispher = 0;
	UBTTcpLink_Channel_execsfReqRecvChatWispher_Parms parms;

	if ( !psfReqRecvChatWispher )
		psfReqRecvChatWispher = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvChatWispher" );

	parms.CharnameFrom = CharnameFrom;
	parms.Message = Message;
	this->ProcessEvent ( psfReqRecvChatWispher, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName )
{
	static UFunction* psfAckChatWispher = 0;
	UBTTcpLink_Channel_execsfAckChatWispher_Parms parms;

	if ( !psfAckChatWispher )
		psfAckChatWispher = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChatWispher" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ToCharName = ToCharName;
	this->ProcessEvent ( psfAckChatWispher, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChatWispher ( struct FString CharName, struct FString Message )
{
	static UFunction* psfReqChatWispher = 0;
	UBTTcpLink_Channel_execsfReqChatWispher_Parms parms;

	if ( !psfReqChatWispher )
		psfReqChatWispher = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChatWispher" );

	parms.CharName = CharName;
	parms.Message = Message;
	this->ProcessEvent ( psfReqChatWispher, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRemoveBlockUserList ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckRemoveBlockUserList = 0;
	UBTTcpLink_Channel_execsfAckRemoveBlockUserList_Parms parms;

	if ( !psfAckRemoveBlockUserList )
		psfAckRemoveBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRemoveBlockUserList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckRemoveBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRemoveBlockUserList ( struct FString CharName )
{
	static UFunction* psfReqRemoveBlockUserList = 0;
	UBTTcpLink_Channel_execsfReqRemoveBlockUserList_Parms parms;

	if ( !psfReqRemoveBlockUserList )
		psfReqRemoveBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRemoveBlockUserList" );

	parms.CharName = CharName;
	this->ProcessEvent ( psfReqRemoveBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckAddBlockUserList ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckAddBlockUserList = 0;
	UBTTcpLink_Channel_execsfAckAddBlockUserList_Parms parms;

	if ( !psfAckAddBlockUserList )
		psfAckAddBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckAddBlockUserList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckAddBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqAddBlockUserList ( struct FString CharName )
{
	static UFunction* psfReqAddBlockUserList = 0;
	UBTTcpLink_Channel_execsfReqAddBlockUserList_Parms parms;

	if ( !psfReqAddBlockUserList )
		psfReqAddBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqAddBlockUserList" );

	parms.CharName = CharName;
	this->ProcessEvent ( psfReqAddBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckBlockUserListEnd (  )
{
	static UFunction* psfAckBlockUserListEnd = 0;
	UBTTcpLink_Channel_execsfAckBlockUserListEnd_Parms parms;

	if ( !psfAckBlockUserListEnd )
		psfAckBlockUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckBlockUserListEnd" );

	this->ProcessEvent ( psfAckBlockUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckBlockUserList ( class TArray< struct FString > CharName )
{
	static UFunction* psfAckBlockUserList = 0;
	UBTTcpLink_Channel_execsfAckBlockUserList_Parms parms;

	if ( !psfAckBlockUserList )
		psfAckBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckBlockUserList" );

	parms.CharName = CharName;
	this->ProcessEvent ( psfAckBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckBlockUserListStart ( int Result, int TotalCount )
{
	static UFunction* psfAckBlockUserListStart = 0;
	UBTTcpLink_Channel_execsfAckBlockUserListStart_Parms parms;

	if ( !psfAckBlockUserListStart )
		psfAckBlockUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckBlockUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckBlockUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqBlockUserList (  )
{
	static UFunction* psfReqBlockUserList = 0;
	UBTTcpLink_Channel_execsfReqBlockUserList_Parms parms;

	if ( !psfReqBlockUserList )
		psfReqBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqBlockUserList" );

	this->ProcessEvent ( psfReqBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit )
{
	static UFunction* psfReqCompleteFriendInvite = 0;
	UBTTcpLink_Channel_execsfReqCompleteFriendInvite_Parms parms;

	if ( !psfReqCompleteFriendInvite )
		psfReqCompleteFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCompleteFriendInvite" );

	parms.CharnameToBeInvited = CharnameToBeInvited;
	parms.IsPermit = IsPermit;
	this->ProcessEvent ( psfReqCompleteFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckConfirmFriendInvite ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckConfirmFriendInvite = 0;
	UBTTcpLink_Channel_execsfAckConfirmFriendInvite_Parms parms;

	if ( !psfAckConfirmFriendInvite )
		psfAckConfirmFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckConfirmFriendInvite" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckConfirmFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqConfirmFriendInvite ( int ReqUserID, struct FString ReqedCharname, unsigned char IsPermit )
{
	static UFunction* psfReqConfirmFriendInvite = 0;
	UBTTcpLink_Channel_execsfReqConfirmFriendInvite_Parms parms;

	if ( !psfReqConfirmFriendInvite )
		psfReqConfirmFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqConfirmFriendInvite" );

	parms.ReqUserID = ReqUserID;
	parms.ReqedCharname = ReqedCharname;
	parms.IsPermit = IsPermit;
	this->ProcessEvent ( psfReqConfirmFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg )
{
	static UFunction* psfReqRecvFriendInvite = 0;
	UBTTcpLink_Channel_execsfReqRecvFriendInvite_Parms parms;

	if ( !psfReqRecvFriendInvite )
		psfReqRecvFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRecvFriendInvite" );

	parms.ReqUserID = ReqUserID;
	parms.ReqCharname = ReqCharname;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( psfReqRecvFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSendFriendInvite ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckSendFriendInvite = 0;
	UBTTcpLink_Channel_execsfAckSendFriendInvite_Parms parms;

	if ( !psfAckSendFriendInvite )
		psfAckSendFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSendFriendInvite" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckSendFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSendFriendInvite ( int InviteUserID, struct FString InviteName, struct FString InviteMsg )
{
	static UFunction* psfReqSendFriendInvite = 0;
	UBTTcpLink_Channel_execsfReqSendFriendInvite_Parms parms;

	if ( !psfReqSendFriendInvite )
		psfReqSendFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSendFriendInvite" );

	parms.InviteUserID = InviteUserID;
	parms.InviteName = InviteName;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( psfReqSendFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result )
{
	static UFunction* psfAckChatNormal = 0;
	UBTTcpLink_Channel_execsfAckChatNormal_Parms parms;

	if ( !psfAckChatNormal )
		psfAckChatNormal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChatNormal" );

	parms.id = id;
	parms.Sender = Sender;
	parms.Message = Message;
	parms.Result = Result;
	this->ProcessEvent ( psfAckChatNormal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChatNormal ( struct FString Message )
{
	static UFunction* psfReqChatNormal = 0;
	UBTTcpLink_Channel_execsfReqChatNormal_Parms parms;

	if ( !psfReqChatNormal )
		psfReqChatNormal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChatNormal" );

	parms.Message = Message;
	this->ProcessEvent ( psfReqChatNormal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDummy ( int Result )
{
	static UFunction* psfAckDummy = 0;
	UBTTcpLink_Channel_execsfAckDummy_Parms parms;

	if ( !psfAckDummy )
		psfAckDummy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDummy" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckDummy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDummy ( int DelayCheck )
{
	static UFunction* psfReqDummy = 0;
	UBTTcpLink_Channel_execsfReqDummy_Parms parms;

	if ( !psfReqDummy )
		psfReqDummy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDummy" );

	parms.DelayCheck = DelayCheck;
	this->ProcessEvent ( psfReqDummy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckConfirmItemChanged ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckConfirmItemChanged = 0;
	UBTTcpLink_Channel_execsfAckConfirmItemChanged_Parms parms;

	if ( !psfAckConfirmItemChanged )
		psfAckConfirmItemChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckConfirmItemChanged" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckConfirmItemChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqConfirmItemChanged (  )
{
	static UFunction* psfReqConfirmItemChanged = 0;
	UBTTcpLink_Channel_execsfReqConfirmItemChanged_Parms parms;

	if ( !psfReqConfirmItemChanged )
		psfReqConfirmItemChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqConfirmItemChanged" );

	this->ProcessEvent ( psfReqConfirmItemChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckEquipItem = 0;
	UBTTcpLink_Channel_execsfAckEquipItem_Parms parms;

	if ( !psfAckEquipItem )
		psfAckEquipItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEquipItem" );

	parms.ChangedNewItemID = ChangedNewItemID;
	parms.ChangedNewUniqueID = ChangedNewUniqueID;
	parms.ChangedNewSlotPosition = ChangedNewSlotPosition;
	parms.ChangedOldItemID = ChangedOldItemID;
	parms.ChangedOldUniqueID = ChangedOldUniqueID;
	parms.ChangedOldSlotPosition = ChangedOldSlotPosition;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckEquipItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEquipItem ( int ItemID, struct FBtrDouble UniqueID, int SlotPosition )
{
	static UFunction* psfReqEquipItem = 0;
	UBTTcpLink_Channel_execsfReqEquipItem_Parms parms;

	if ( !psfReqEquipItem )
		psfReqEquipItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEquipItem" );

	parms.ItemID = ItemID;
	parms.UniqueID = UniqueID;
	parms.SlotPosition = SlotPosition;
	this->ProcessEvent ( psfReqEquipItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckItemListEnd (  )
{
	static UFunction* psfAckItemListEnd = 0;
	UBTTcpLink_Channel_execsfAckItemListEnd_Parms parms;

	if ( !psfAckItemListEnd )
		psfAckItemListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckItemListEnd" );

	this->ProcessEvent ( psfAckItemListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount )
{
	static UFunction* psfAckItemList = 0;
	UBTTcpLink_Channel_execsfAckItemList_Parms parms;

	if ( !psfAckItemList )
		psfAckItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckItemList" );

	parms.UniqueID = UniqueID;
	parms.ItemID = ItemID;
	parms.ItemType = ItemType;
	parms.Durability = Durability;
	parms.UntilTime = UntilTime;
	parms.SlotPosition = SlotPosition;
	parms.AddPartsID = AddPartsID;
	parms.DamageDegree = DamageDegree;
	parms.ItemState = ItemState;
	parms.StackCount = StackCount;
	parms.PaintID = PaintID;
	parms.TradeCount = TradeCount;
	this->ProcessEvent ( psfAckItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckItemListStart ( int Count, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckItemListStart = 0;
	UBTTcpLink_Channel_execsfAckItemListStart_Parms parms;

	if ( !psfAckItemListStart )
		psfAckItemListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckItemListStart" );

	parms.Count = Count;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckItemListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqItemList ( int UID )
{
	static UFunction* psfReqItemList = 0;
	UBTTcpLink_Channel_execsfReqItemList_Parms parms;

	if ( !psfReqItemList )
		psfReqItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqItemList" );

	parms.UID = UID;
	this->ProcessEvent ( psfReqItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckEntrySkillList = 0;
	UBTTcpLink_Channel_execsfAckEntrySkillList_Parms parms;

	if ( !psfAckEntrySkillList )
		psfAckEntrySkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEntrySkillList" );

	parms.UserIDs = UserIDs;
	parms.SkillIDs = SkillIDs;
	parms.SlotPositions = SlotPositions;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckEntrySkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEntrySkillList ( int UserID )
{
	static UFunction* psfReqEntrySkillList = 0;
	UBTTcpLink_Channel_execsfReqEntrySkillList_Parms parms;

	if ( !psfReqEntrySkillList )
		psfReqEntrySkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEntrySkillList" );

	parms.UserID = UserID;
	this->ProcessEvent ( psfReqEntrySkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckEntryItemList = 0;
	UBTTcpLink_Channel_execsfAckEntryItemList_Parms parms;

	if ( !psfAckEntryItemList )
		psfAckEntryItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEntryItemList" );

	parms.UserIDs = UserIDs;
	parms.ItemIDs = ItemIDs;
	parms.SlotPositions = SlotPositions;
	parms.AddPartsID = AddPartsID;
	parms.UniqueID = UniqueID;
	parms.PaintID = PaintID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckEntryItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEntryItemList ( int UserID )
{
	static UFunction* psfReqEntryItemList = 0;
	UBTTcpLink_Channel_execsfReqEntryItemList_Parms parms;

	if ( !psfReqEntryItemList )
		psfReqEntryItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEntryItemList" );

	parms.UserID = UserID;
	this->ProcessEvent ( psfReqEntryItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates )
{
	static UFunction* psfAckChangeUserState = 0;
	UBTTcpLink_Channel_execsfAckChangeUserState_Parms parms;

	if ( !psfAckChangeUserState )
		psfAckChangeUserState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeUserState" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserIDs = UserIDs;
	parms.Positions = Positions;
	parms.Numbers = Numbers;
	parms.OldStates = OldStates;
	parms.NewStates = NewStates;
	this->ProcessEvent ( psfAckChangeUserState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChangeUserState ( unsigned char NewState, unsigned char CheckPlaying )
{
	static UFunction* psfReqChangeUserState = 0;
	UBTTcpLink_Channel_execsfReqChangeUserState_Parms parms;

	if ( !psfReqChangeUserState )
		psfReqChangeUserState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChangeUserState" );

	parms.NewState = NewState;
	parms.CheckPlaying = CheckPlaying;
	this->ProcessEvent ( psfReqChangeUserState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckExteriorRoomState (  )
{
	static UFunction* psfAckExteriorRoomState = 0;
	UBTTcpLink_Channel_execsfAckExteriorRoomState_Parms parms;

	if ( !psfAckExteriorRoomState )
		psfAckExteriorRoomState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomState" );

	this->ProcessEvent ( psfAckExteriorRoomState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState )
{
	static UFunction* psfReqExteriorRoomState = 0;
	UBTTcpLink_Channel_execsfReqExteriorRoomState_Parms parms;

	if ( !psfReqExteriorRoomState )
		psfReqExteriorRoomState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomState" );

	parms.RoomNumber = RoomNumber;
	parms.RoomState = RoomState;
	this->ProcessEvent ( psfReqExteriorRoomState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckExteriorRoomUserCount (  )
{
	static UFunction* psfAckExteriorRoomUserCount = 0;
	UBTTcpLink_Channel_execsfAckExteriorRoomUserCount_Parms parms;

	if ( !psfAckExteriorRoomUserCount )
		psfAckExteriorRoomUserCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomUserCount" );

	this->ProcessEvent ( psfAckExteriorRoomUserCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount )
{
	static UFunction* psfReqExteriorRoomUserCount = 0;
	UBTTcpLink_Channel_execsfReqExteriorRoomUserCount_Parms parms;

	if ( !psfReqExteriorRoomUserCount )
		psfReqExteriorRoomUserCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomUserCount" );

	parms.RoomNumber = RoomNumber;
	parms.RoomUserCount = RoomUserCount;
	this->ProcessEvent ( psfReqExteriorRoomUserCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckExteriorRoomInfo (  )
{
	static UFunction* psfAckExteriorRoomInfo = 0;
	UBTTcpLink_Channel_execsfAckExteriorRoomInfo_Parms parms;

	if ( !psfAckExteriorRoomInfo )
		psfAckExteriorRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckExteriorRoomInfo" );

	this->ProcessEvent ( psfAckExteriorRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum )
{
	static UFunction* psfReqExteriorRoomInfo = 0;
	UBTTcpLink_Channel_execsfReqExteriorRoomInfo_Parms parms;

	if ( !psfReqExteriorRoomInfo )
		psfReqExteriorRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqExteriorRoomInfo" );

	parms.SP = SP;
	parms.RoomNumber = RoomNumber;
	parms.IsPW = IsPW;
	parms.RoomName = RoomName;
	parms.MapName = MapName;
	parms.ModeName = ModeName;
	parms.MapNum = MapNum;
	parms.ModeNum = ModeNum;
	parms.IsTeamBalance = IsTeamBalance;
	parms.MaxUserCount = MaxUserCount;
	parms.RoomUserCount = RoomUserCount;
	parms.RoomState = RoomState;
	parms.BotDifficult = BotDifficult;
	parms.WeaponLimit = WeaponLimit;
	parms.BotModeUserTeamNum = BotModeUserTeamNum;
	this->ProcessEvent ( psfReqExteriorRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID )
{
	static UFunction* psfAckGetBootyChoose = 0;
	UBTTcpLink_Channel_execsfAckGetBootyChoose_Parms parms;

	if ( !psfAckGetBootyChoose )
		psfAckGetBootyChoose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetBootyChoose" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.GiveType = GiveType;
	parms.ItemUniqueNumber = ItemUniqueNumber;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	parms.ItemType = ItemType;
	parms.UntilTime = UntilTime;
	parms.StackCount = StackCount;
	parms.PaintID = PaintID;
	this->ProcessEvent ( psfAckGetBootyChoose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID )
{
	static UFunction* psfAckGetBooty = 0;
	UBTTcpLink_Channel_execsfAckGetBooty_Parms parms;

	if ( !psfAckGetBooty )
		psfAckGetBooty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGetBooty" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PrizeWinUserID = PrizeWinUserID;
	parms.BootyItemID = BootyItemID;
	parms.BootyPartsID = BootyPartsID;
	this->ProcessEvent ( psfAckGetBooty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGetBooty ( int RoomNumber )
{
	static UFunction* psfReqGetBooty = 0;
	UBTTcpLink_Channel_execsfReqGetBooty_Parms parms;

	if ( !psfReqGetBooty )
		psfReqGetBooty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGetBooty" );

	parms.RoomNumber = RoomNumber;
	this->ProcessEvent ( psfReqGetBooty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSetUserBootySeedValue ( int UserID, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckSetUserBootySeedValue = 0;
	UBTTcpLink_Channel_execsfAckSetUserBootySeedValue_Parms parms;

	if ( !psfAckSetUserBootySeedValue )
		psfAckSetUserBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSetUserBootySeedValue" );

	parms.UserID = UserID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckSetUserBootySeedValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSetUserBootySeedValue ( int UserID, int SeedValue )
{
	static UFunction* psfReqSetUserBootySeedValue = 0;
	UBTTcpLink_Channel_execsfReqSetUserBootySeedValue_Parms parms;

	if ( !psfReqSetUserBootySeedValue )
		psfReqSetUserBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSetUserBootySeedValue" );

	parms.UserID = UserID;
	parms.SeedValue = SeedValue;
	this->ProcessEvent ( psfReqSetUserBootySeedValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo )
{
	static UFunction* psfAckChangeRoomSetting = 0;
	UBTTcpLink_Channel_execsfAckChangeRoomSetting_Parms parms;

	if ( !psfAckChangeRoomSetting )
		psfAckChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeRoomSetting" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RoomInfo = RoomInfo;
	this->ProcessEvent ( psfAckChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChangeRoomSetting ( struct FGameRoomInfo RoomInfo )
{
	static UFunction* psfReqChangeRoomSetting = 0;
	UBTTcpLink_Channel_execsfReqChangeRoomSetting_Parms parms;

	if ( !psfReqChangeRoomSetting )
		psfReqChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChangeRoomSetting" );

	parms.RoomInfo = RoomInfo;
	this->ProcessEvent ( psfReqChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID )
{
	static UFunction* psfReqNotifyLevelUp = 0;
	UBTTcpLink_Channel_execsfReqNotifyLevelUp_Parms parms;

	if ( !psfReqNotifyLevelUp )
		psfReqNotifyLevelUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyLevelUp" );

	parms.LevelUpUserID = LevelUpUserID;
	parms.Level = Level;
	parms.Exp = Exp;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	this->ProcessEvent ( psfReqNotifyLevelUp, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckClientUdpInfoList ( int Result, struct FString ErrMsg, class TArray< int > UID, class TArray< struct FString > IP, class TArray< int > Port )
{
	static UFunction* psfAckClientUdpInfoList = 0;
	UBTTcpLink_Channel_execsfAckClientUdpInfoList_Parms parms;

	if ( !psfAckClientUdpInfoList )
		psfAckClientUdpInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckClientUdpInfoList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UID = UID;
	parms.IP = IP;
	parms.Port = Port;
	this->ProcessEvent ( psfAckClientUdpInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqClientUdpInfoList ( int GameNum )
{
	static UFunction* psfReqClientUdpInfoList = 0;
	UBTTcpLink_Channel_execsfReqClientUdpInfoList_Parms parms;

	if ( !psfReqClientUdpInfoList )
		psfReqClientUdpInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqClientUdpInfoList" );

	parms.GameNum = GameNum;
	this->ProcessEvent ( psfReqClientUdpInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort )
{
	static UFunction* psfAckRegisterOtherUdpInfo = 0;
	UBTTcpLink_Channel_execsfAckRegisterOtherUdpInfo_Parms parms;

	if ( !psfAckRegisterOtherUdpInfo )
		psfAckRegisterOtherUdpInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRegisterOtherUdpInfo" );

	parms.UID = UID;
	parms.IP = IP;
	parms.Port = Port;
	parms.NatType = NatType;
	parms.Intervention = Intervention;
	parms.HostInnerIP = HostInnerIP;
	parms.HostInnerPort = HostInnerPort;
	this->ProcessEvent ( psfAckRegisterOtherUdpInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckRegisterMyUdpInfo = 0;
	UBTTcpLink_Channel_execsfAckRegisterMyUdpInfo_Parms parms;

	if ( !psfAckRegisterMyUdpInfo )
		psfAckRegisterMyUdpInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRegisterMyUdpInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckRegisterMyUdpInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRegisterMyUdpInfo ( unsigned char IsHost, struct FString IP, int Port, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort )
{
	static UFunction* psfReqRegisterMyUdpInfo = 0;
	UBTTcpLink_Channel_execsfReqRegisterMyUdpInfo_Parms parms;

	if ( !psfReqRegisterMyUdpInfo )
		psfReqRegisterMyUdpInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRegisterMyUdpInfo" );

	parms.IsHost = IsHost;
	parms.IP = IP;
	parms.Port = Port;
	parms.Intervention = Intervention;
	parms.HostInnerIP = HostInnerIP;
	parms.HostInnerPort = HostInnerPort;
	this->ProcessEvent ( psfReqRegisterMyUdpInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckNotifyClientJoinTime ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckNotifyClientJoinTime = 0;
	UBTTcpLink_Channel_execsfAckNotifyClientJoinTime_Parms parms;

	if ( !psfAckNotifyClientJoinTime )
		psfAckNotifyClientJoinTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckNotifyClientJoinTime" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckNotifyClientJoinTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqNotifyClientJoinTime ( int JoinedClientID )
{
	static UFunction* psfReqNotifyClientJoinTime = 0;
	UBTTcpLink_Channel_execsfReqNotifyClientJoinTime_Parms parms;

	if ( !psfReqNotifyClientJoinTime )
		psfReqNotifyClientJoinTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqNotifyClientJoinTime" );

	parms.JoinedClientID = JoinedClientID;
	this->ProcessEvent ( psfReqNotifyClientJoinTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeNewGuest ( struct FString HostIP )
{
	static UFunction* psfAckChangeNewGuest = 0;
	UBTTcpLink_Channel_execsfAckChangeNewGuest_Parms parms;

	if ( !psfAckChangeNewGuest )
		psfAckChangeNewGuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeNewGuest" );

	parms.HostIP = HostIP;
	this->ProcessEvent ( psfAckChangeNewGuest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeHost ( unsigned char ClientNum )
{
	static UFunction* psfAckChangeHost = 0;
	UBTTcpLink_Channel_execsfAckChangeHost_Parms parms;

	if ( !psfAckChangeHost )
		psfAckChangeHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeHost" );

	parms.ClientNum = ClientNum;
	this->ProcessEvent ( psfAckChangeHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName )
{
	static UFunction* psfAckDisconnectGame = 0;
	UBTTcpLink_Channel_execsfAckDisconnectGame_Parms parms;

	if ( !psfAckDisconnectGame )
		psfAckDisconnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckDisconnectGame" );

	parms.Result = Result;
	parms.DisconnectUserID = DisconnectUserID;
	parms.DisconnectUserName = DisconnectUserName;
	this->ProcessEvent ( psfAckDisconnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqDisconnectGame (  )
{
	static UFunction* psfReqDisconnectGame = 0;
	UBTTcpLink_Channel_execsfReqDisconnectGame_Parms parms;

	if ( !psfReqDisconnectGame )
		psfReqDisconnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqDisconnectGame" );

	this->ProcessEvent ( psfReqDisconnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckConnectGame ( int UserID, int Result )
{
	static UFunction* psfAckConnectGame = 0;
	UBTTcpLink_Channel_execsfAckConnectGame_Parms parms;

	if ( !psfAckConnectGame )
		psfAckConnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckConnectGame" );

	parms.UserID = UserID;
	parms.Result = Result;
	this->ProcessEvent ( psfAckConnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqConnectGame (  )
{
	static UFunction* psfReqConnectGame = 0;
	UBTTcpLink_Channel_execsfReqConnectGame_Parms parms;

	if ( !psfReqConnectGame )
		psfReqConnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqConnectGame" );

	this->ProcessEvent ( psfReqConnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRelayServerOff (  )
{
	static UFunction* psfReqRelayServerOff = 0;
	UBTTcpLink_Channel_execsfReqRelayServerOff_Parms parms;

	if ( !psfReqRelayServerOff )
		psfReqRelayServerOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRelayServerOff" );

	this->ProcessEvent ( psfReqRelayServerOff, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum )
{
	static UFunction* psfReqRelayServerOn = 0;
	UBTTcpLink_Channel_execsfReqRelayServerOn_Parms parms;

	if ( !psfReqRelayServerOn )
		psfReqRelayServerOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRelayServerOn" );

	parms.RelayServerIP = RelayServerIP;
	parms.RelayServerPortNum = RelayServerPortNum;
	this->ProcessEvent ( psfReqRelayServerOn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckGameOver = 0;
	UBTTcpLink_Channel_execsfAckGameOver_Parms parms;

	if ( !psfAckGameOver )
		psfAckGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGameOver" );

	parms.UID = UID;
	parms.GameRoomNumber = GameRoomNumber;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGameOver ( int UID, int GameRoomNumber )
{
	static UFunction* psfReqGameOver = 0;
	UBTTcpLink_Channel_execsfReqGameOver_Parms parms;

	if ( !psfReqGameOver )
		psfReqGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGameOver" );

	parms.UID = UID;
	parms.GameRoomNumber = GameRoomNumber;
	this->ProcessEvent ( psfReqGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying )
{
	static UFunction* psfAckIsGameRoomPlaying = 0;
	UBTTcpLink_Channel_execsfAckIsGameRoomPlaying_Parms parms;

	if ( !psfAckIsGameRoomPlaying )
		psfAckIsGameRoomPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckIsGameRoomPlaying" );

	parms.GameRoomNum = GameRoomNum;
	parms.IsPlaying = IsPlaying;
	this->ProcessEvent ( psfAckIsGameRoomPlaying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqIsGameRoomPlaying ( int GameRoomNum )
{
	static UFunction* psfReqIsGameRoomPlaying = 0;
	UBTTcpLink_Channel_execsfReqIsGameRoomPlaying_Parms parms;

	if ( !psfReqIsGameRoomPlaying )
		psfReqIsGameRoomPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqIsGameRoomPlaying" );

	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( psfReqIsGameRoomPlaying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGameRoomDestroy ( int GameRoomNum )
{
	static UFunction* psfAckGameRoomDestroy = 0;
	UBTTcpLink_Channel_execsfAckGameRoomDestroy_Parms parms;

	if ( !psfAckGameRoomDestroy )
		psfAckGameRoomDestroy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGameRoomDestroy" );

	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( psfAckGameRoomDestroy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeRoomMaxNum ( int GameNum, int Number, int TeamNumber, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckChangeRoomMaxNum = 0;
	UBTTcpLink_Channel_execsfAckChangeRoomMaxNum_Parms parms;

	if ( !psfAckChangeRoomMaxNum )
		psfAckChangeRoomMaxNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeRoomMaxNum" );

	parms.GameNum = GameNum;
	parms.Number = Number;
	parms.TeamNumber = TeamNumber;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckChangeRoomMaxNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChangeRoomMaxNum ( int GameNum, int UID, int Number, int TeamNum )
{
	static UFunction* psfReqChangeRoomMaxNum = 0;
	UBTTcpLink_Channel_execsfReqChangeRoomMaxNum_Parms parms;

	if ( !psfReqChangeRoomMaxNum )
		psfReqChangeRoomMaxNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChangeRoomMaxNum" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.Number = Number;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( psfReqChangeRoomMaxNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckUpdateScoreResult ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckUpdateScoreResult = 0;
	UBTTcpLink_Channel_execsfAckUpdateScoreResult_Parms parms;

	if ( !psfAckUpdateScoreResult )
		psfAckUpdateScoreResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckUpdateScoreResult" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckUpdateScoreResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID )
{
	static UFunction* psfAckUpdateScore = 0;
	UBTTcpLink_Channel_execsfAckUpdateScore_Parms parms;

	if ( !psfAckUpdateScore )
		psfAckUpdateScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckUpdateScore" );

	parms.UserIDs = UserIDs;
	parms.NickNames = NickNames;
	parms.TeamIDs = TeamIDs;
	parms.Scores = Scores;
	parms.Kills = Kills;
	parms.Assists = Assists;
	parms.Deaths = Deaths;
	parms.EXPs = EXPs;
	parms.EXPBonuses = EXPBonuses;
	parms.Points = Points;
	parms.PointBonuses = PointBonuses;
	parms.TeamScores = TeamScores;
	parms.BonusOwnerID = BonusOwnerID;
	parms.BonusID = BonusID;
	this->ProcessEvent ( psfAckUpdateScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqUpdateScore ( int GameNumber, class TArray< int > UserIDs, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > Points, class TArray< int > Scores, class TArray< int > TeamScores, class TArray< int > RoundJoin, class TArray< int > TimeJoin, int Playtime, unsigned char GameEndType, class TArray< struct FString > UserNames )
{
	static UFunction* psfReqUpdateScore = 0;
	UBTTcpLink_Channel_execsfReqUpdateScore_Parms parms;

	if ( !psfReqUpdateScore )
		psfReqUpdateScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqUpdateScore" );

	parms.GameNumber = GameNumber;
	parms.UserIDs = UserIDs;
	parms.Kills = Kills;
	parms.Assists = Assists;
	parms.Deaths = Deaths;
	parms.EXPs = EXPs;
	parms.Points = Points;
	parms.Scores = Scores;
	parms.TeamScores = TeamScores;
	parms.RoundJoin = RoundJoin;
	parms.TimeJoin = TimeJoin;
	parms.Playtime = Playtime;
	parms.GameEndType = GameEndType;
	parms.UserNames = UserNames;
	this->ProcessEvent ( psfReqUpdateScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckStartGame = 0;
	UBTTcpLink_Channel_execsfAckStartGame_Parms parms;

	if ( !psfAckStartGame )
		psfAckStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckStartGame" );

	parms.GameNumber = GameNumber;
	parms.ClientsCount = ClientsCount;
	parms.StartSeed = StartSeed;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqStartGame ( int GameNumber )
{
	static UFunction* psfReqStartGame = 0;
	UBTTcpLink_Channel_execsfReqStartGame_Parms parms;

	if ( !psfReqStartGame )
		psfReqStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqStartGame" );

	parms.GameNumber = GameNumber;
	this->ProcessEvent ( psfReqStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckGameHostInfo = 0;
	UBTTcpLink_Channel_execsfAckGameHostInfo_Parms parms;

	if ( !psfAckGameHostInfo )
		psfAckGameHostInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGameHostInfo" );

	parms.GameNumber = GameNumber;
	parms.UserID = UserID;
	parms.IP = IP;
	parms.Port = Port;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckGameHostInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGameHostInfo ( int GameNumber )
{
	static UFunction* psfReqGameHostInfo = 0;
	UBTTcpLink_Channel_execsfReqGameHostInfo_Parms parms;

	if ( !psfReqGameHostInfo )
		psfReqGameHostInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGameHostInfo" );

	parms.GameNumber = GameNumber;
	this->ProcessEvent ( psfReqGameHostInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckIsHostAvailable ( int Result )
{
	static UFunction* psfAckIsHostAvailable = 0;
	UBTTcpLink_Channel_execsfAckIsHostAvailable_Parms parms;

	if ( !psfAckIsHostAvailable )
		psfAckIsHostAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckIsHostAvailable" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckIsHostAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqIsHostAvailable ( struct FString MyIp, int CPUGrade, int RamGrade, int VGAGrade, int VGARam )
{
	static UFunction* psfReqIsHostAvailable = 0;
	UBTTcpLink_Channel_execsfReqIsHostAvailable_Parms parms;

	if ( !psfReqIsHostAvailable )
		psfReqIsHostAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqIsHostAvailable" );

	parms.MyIp = MyIp;
	parms.CPUGrade = CPUGrade;
	parms.RamGrade = RamGrade;
	parms.VGAGrade = VGAGrade;
	parms.VGARam = VGARam;
	this->ProcessEvent ( psfReqIsHostAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckChangeTeam = 0;
	UBTTcpLink_Channel_execsfAckChangeTeam_Parms parms;

	if ( !psfAckChangeTeam )
		psfAckChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeTeam" );

	parms.GameNumber = GameNumber;
	parms.UserID = UserID;
	parms.UID = UID;
	parms.TeamNum = TeamNum;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckChangeTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChangeTeam ( int TeamNum )
{
	static UFunction* psfReqChangeTeam = 0;
	UBTTcpLink_Channel_execsfReqChangeTeam_Parms parms;

	if ( !psfReqChangeTeam )
		psfReqChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChangeTeam" );

	parms.TeamNum = TeamNum;
	this->ProcessEvent ( psfReqChangeTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckChangeRoomOwner = 0;
	UBTTcpLink_Channel_execsfAckChangeRoomOwner_Parms parms;

	if ( !psfAckChangeRoomOwner )
		psfAckChangeRoomOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeRoomOwner" );

	parms.GameNum = GameNum;
	parms.OldOwner = OldOwner;
	parms.NewOwner = NewOwner;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckChangeRoomOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChangeRoomOwner ( int GameNum, int UID, int NewOwner )
{
	static UFunction* psfReqChangeRoomOwner = 0;
	UBTTcpLink_Channel_execsfReqChangeRoomOwner_Parms parms;

	if ( !psfReqChangeRoomOwner )
		psfReqChangeRoomOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChangeRoomOwner" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.NewOwner = NewOwner;
	this->ProcessEvent ( psfReqChangeRoomOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckChangeGameMode = 0;
	UBTTcpLink_Channel_execsfAckChangeGameMode_Parms parms;

	if ( !psfAckChangeGameMode )
		psfAckChangeGameMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChangeGameMode" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.GameMode = GameMode;
	parms.GameModeNum = GameModeNum;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckChangeGameMode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum )
{
	static UFunction* psfReqChangeGameMode = 0;
	UBTTcpLink_Channel_execsfReqChangeGameMode_Parms parms;

	if ( !psfReqChangeGameMode )
		psfReqChangeGameMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChangeGameMode" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.GameMode = GameMode;
	parms.GameModeNum = GameModeNum;
	this->ProcessEvent ( psfReqChangeGameMode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckBanUser = 0;
	UBTTcpLink_Channel_execsfAckBanUser_Parms parms;

	if ( !psfAckBanUser )
		psfAckBanUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckBanUser" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.BanUID = BanUID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckBanUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqBanUser ( int GameNum, int UID, int BanUID )
{
	static UFunction* psfReqBanUser = 0;
	UBTTcpLink_Channel_execsfReqBanUser_Parms parms;

	if ( !psfReqBanUser )
		psfReqBanUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqBanUser" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.BanUID = BanUID;
	this->ProcessEvent ( psfReqBanUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckSelectMap = 0;
	UBTTcpLink_Channel_execsfAckSelectMap_Parms parms;

	if ( !psfAckSelectMap )
		psfAckSelectMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckSelectMap" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.MapName = MapName;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckSelectMap, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqSelectMap ( int GameNum, int UID, struct FString MapName )
{
	static UFunction* psfReqSelectMap = 0;
	UBTTcpLink_Channel_execsfReqSelectMap_Parms parms;

	if ( !psfReqSelectMap )
		psfReqSelectMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqSelectMap" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.MapName = MapName;
	this->ProcessEvent ( psfReqSelectMap, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo )
{
	static UFunction* psfAckGameRoomInfo = 0;
	UBTTcpLink_Channel_execsfAckGameRoomInfo_Parms parms;

	if ( !psfAckGameRoomInfo )
		psfAckGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckGameRoomInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RoomInfo = RoomInfo;
	this->ProcessEvent ( psfAckGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqGameRoomInfo ( int GameNum, int UID )
{
	static UFunction* psfReqGameRoomInfo = 0;
	UBTTcpLink_Channel_execsfReqGameRoomInfo_Parms parms;

	if ( !psfReqGameRoomInfo )
		psfReqGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqGameRoomInfo" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	this->ProcessEvent ( psfReqGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo )
{
	static UFunction* psfAckCreateGameRoom = 0;
	UBTTcpLink_Channel_execsfAckCreateGameRoom_Parms parms;

	if ( !psfAckCreateGameRoom )
		psfAckCreateGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCreateGameRoom" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.RoomOwnerIP = RoomOwnerIP;
	parms.NetRoomInfo = NetRoomInfo;
	this->ProcessEvent ( psfAckCreateGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCreateGameRoom ( struct FGameRoomInfo NetRoomInfo )
{
	static UFunction* psfReqCreateGameRoom = 0;
	UBTTcpLink_Channel_execsfReqCreateGameRoom_Parms parms;

	if ( !psfReqCreateGameRoom )
		psfReqCreateGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCreateGameRoom" );

	parms.NetRoomInfo = NetRoomInfo;
	this->ProcessEvent ( psfReqCreateGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckExceedMaxUser (  )
{
	static UFunction* psfAckExceedMaxUser = 0;
	UBTTcpLink_Channel_execsfAckExceedMaxUser_Parms parms;

	if ( !psfAckExceedMaxUser )
		psfAckExceedMaxUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckExceedMaxUser" );

	this->ProcessEvent ( psfAckExceedMaxUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg )
{
	static UFunction* psfAckLeaveRoom = 0;
	UBTTcpLink_Channel_execsfAckLeaveRoom_Parms parms;

	if ( !psfAckLeaveRoom )
		psfAckLeaveRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckLeaveRoom" );

	parms.Num = Num;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckLeaveRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLeaveRoom ( int Num )
{
	static UFunction* psfReqLeaveRoom = 0;
	UBTTcpLink_Channel_execsfReqLeaveRoom_Parms parms;

	if ( !psfReqLeaveRoom )
		psfReqLeaveRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLeaveRoom" );

	parms.Num = Num;
	this->ProcessEvent ( psfReqLeaveRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* psfAckRoomUserList = 0;
	UBTTcpLink_Channel_execsfAckRoomUserList_Parms parms;

	if ( !psfAckRoomUserList )
		psfAckRoomUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRoomUserList" );

	parms.UID = UID;
	parms.UserName = UserName;
	parms.Grade = Grade;
	parms.TeamNum = TeamNum;
	parms.Statue = Statue;
	parms.IsHost = IsHost;
	parms.UserIP = UserIP;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.IsLookingFor = IsLookingFor;
	parms.GMUID = GMUID;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckRoomUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRoomUserList ( int GameNum )
{
	static UFunction* psfReqRoomUserList = 0;
	UBTTcpLink_Channel_execsfReqRoomUserList_Parms parms;

	if ( !psfReqRoomUserList )
		psfReqRoomUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRoomUserList" );

	parms.GameNum = GameNum;
	this->ProcessEvent ( psfReqRoomUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* psfAckEnterRoom = 0;
	UBTTcpLink_Channel_execsfAckEnterRoom_Parms parms;

	if ( !psfAckEnterRoom )
		psfAckEnterRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEnterRoom" );

	parms.GameNum = GameNum;
	parms.OwnerID = OwnerID;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.TeamNum = TeamNum;
	parms.Grade = Grade;
	parms.UserIP = UserIP;
	parms.ClanName = ClanName;
	parms.Clan_Mark_Pattern = Clan_Mark_Pattern;
	parms.Clan_Mark_BG = Clan_Mark_BG;
	parms.Clan_Mark_BL = Clan_Mark_BL;
	parms.IsLookFor = IsLookFor;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckEnterRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEnterRoom ( int GameNum, struct FString Password, unsigned char RoomEnterType )
{
	static UFunction* psfReqEnterRoom = 0;
	UBTTcpLink_Channel_execsfReqEnterRoom_Parms parms;

	if ( !psfReqEnterRoom )
		psfReqEnterRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEnterRoom" );

	parms.GameNum = GameNum;
	parms.Password = Password;
	parms.RoomEnterType = RoomEnterType;
	this->ProcessEvent ( psfReqEnterRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRoomListEnd (  )
{
	static UFunction* psfAckRoomListEnd = 0;
	UBTTcpLink_Channel_execsfAckRoomListEnd_Parms parms;

	if ( !psfAckRoomListEnd )
		psfAckRoomListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRoomListEnd" );

	this->ProcessEvent ( psfAckRoomListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum )
{
	static UFunction* psfAckRoomList = 0;
	UBTTcpLink_Channel_execsfAckRoomList_Parms parms;

	if ( !psfAckRoomList )
		psfAckRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRoomList" );

	parms.GameNum = GameNum;
	parms.Title = Title;
	parms.MapName = MapName;
	parms.MapNum = MapNum;
	parms.UserCount = UserCount;
	parms.MaxCount = MaxCount;
	parms.ModeName = ModeName;
	parms.ModeNum = ModeNum;
	parms.WeaponLimit = WeaponLimit;
	parms.IsTeamBalance = IsTeamBalance;
	parms.Status = Status;
	parms.RoomOwnerIP = RoomOwnerIP;
	parms.GameMinute = GameMinute;
	parms.RoomOwnerName = RoomOwnerName;
	parms.IsSpecial = IsSpecial;
	parms.IsPassword = IsPassword;
	parms.BotDifficult = BotDifficult;
	parms.BotModeUserTeamNum = BotModeUserTeamNum;
	this->ProcessEvent ( psfAckRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex )
{
	static UFunction* psfAckRoomListStart = 0;
	UBTTcpLink_Channel_execsfAckRoomListStart_Parms parms;

	if ( !psfAckRoomListStart )
		psfAckRoomListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckRoomListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	parms.Count = Count;
	parms.StartIndex = StartIndex;
	this->ProcessEvent ( psfAckRoomListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqRoomList ( int id, int StartIndex, int Count )
{
	static UFunction* psfReqRoomList = 0;
	UBTTcpLink_Channel_execsfReqRoomList_Parms parms;

	if ( !psfReqRoomList )
		psfReqRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqRoomList" );

	parms.id = id;
	parms.StartIndex = StartIndex;
	parms.Count = Count;
	this->ProcessEvent ( psfReqRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* psfAckChannelUserList = 0;
	UBTTcpLink_Channel_execsfAckChannelUserList_Parms parms;

	if ( !psfAckChannelUserList )
		psfAckChannelUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChannelUserList" );

	parms.TotalCount = TotalCount;
	parms.Count = Count;
	parms.StartIndex = StartIndex;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.UserLevels = UserLevels;
	parms.ClanName = ClanName;
	parms.ClanPattern = ClanPattern;
	parms.ClanBG = ClanBG;
	parms.ClanBL = ClanBL;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookForClan = IsLookForClan;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckChannelUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChannelUserList ( int id, int StartIndex, int Count )
{
	static UFunction* psfReqChannelUserList = 0;
	UBTTcpLink_Channel_execsfReqChannelUserList_Parms parms;

	if ( !psfReqChannelUserList )
		psfReqChannelUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChannelUserList" );

	parms.id = id;
	parms.StartIndex = StartIndex;
	parms.Count = Count;
	this->ProcessEvent ( psfReqChannelUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckLeaveChannel ( int Result, struct FString UserID, int UID )
{
	static UFunction* psfAckLeaveChannel = 0;
	UBTTcpLink_Channel_execsfAckLeaveChannel_Parms parms;

	if ( !psfAckLeaveChannel )
		psfAckLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckLeaveChannel" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.UID = UID;
	this->ProcessEvent ( psfAckLeaveChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLeaveChannel ( int id )
{
	static UFunction* psfReqLeaveChannel = 0;
	UBTTcpLink_Channel_execsfReqLeaveChannel_Parms parms;

	if ( !psfReqLeaveChannel )
		psfReqLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLeaveChannel" );

	parms.id = id;
	this->ProcessEvent ( psfReqLeaveChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* psfAckEnterChannel = 0;
	UBTTcpLink_Channel_execsfAckEnterChannel_Parms parms;

	if ( !psfAckEnterChannel )
		psfAckEnterChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckEnterChannel" );

	parms.id = id;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.Level = Level;
	parms.ClanName = ClanName;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookFor = IsLookFor;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( psfAckEnterChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqEnterChannel ( int id )
{
	static UFunction* psfReqEnterChannel = 0;
	UBTTcpLink_Channel_execsfReqEnterChannel_Parms parms;

	if ( !psfReqEnterChannel )
		psfReqEnterChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqEnterChannel" );

	parms.id = id;
	this->ProcessEvent ( psfReqEnterChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckChannelList ( class TArray< int > id, class TArray< struct FString > Title, class TArray< int > CurUser, class TArray< int > MaxUser )
{
	static UFunction* psfAckChannelList = 0;
	UBTTcpLink_Channel_execsfAckChannelList_Parms parms;

	if ( !psfAckChannelList )
		psfAckChannelList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckChannelList" );

	parms.id = id;
	parms.Title = Title;
	parms.CurUser = CurUser;
	parms.MaxUser = MaxUser;
	this->ProcessEvent ( psfAckChannelList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqChannelList ( int bChannelType )
{
	static UFunction* psfReqChannelList = 0;
	UBTTcpLink_Channel_execsfReqChannelList_Parms parms;

	if ( !psfReqChannelList )
		psfReqChannelList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqChannelList" );

	parms.bChannelType = bChannelType;
	this->ProcessEvent ( psfReqChannelList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckFriendListEnd (  )
{
	static UFunction* psfAckFriendListEnd = 0;
	UBTTcpLink_Channel_execsfAckFriendListEnd_Parms parms;

	if ( !psfAckFriendListEnd )
		psfAckFriendListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckFriendListEnd" );

	this->ProcessEvent ( psfAckFriendListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan )
{
	static UFunction* psfAckFriendList = 0;
	UBTTcpLink_Channel_execsfAckFriendList_Parms parms;

	if ( !psfAckFriendList )
		psfAckFriendList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckFriendList" );

	parms.FriendName = FriendName;
	parms.IsLogOn = IsLogOn;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.LevelMarkID = LevelMarkID;
	parms.ClanLevel = ClanLevel;
	parms.Level = Level;
	parms.IsLookForClan = IsLookForClan;
	this->ProcessEvent ( psfAckFriendList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckFriendListStart ( int Result, int TotalCount )
{
	static UFunction* psfAckFriendListStart = 0;
	UBTTcpLink_Channel_execsfAckFriendListStart_Parms parms;

	if ( !psfAckFriendListStart )
		psfAckFriendListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckFriendListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckFriendListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqFriendList (  )
{
	static UFunction* psfReqFriendList = 0;
	UBTTcpLink_Channel_execsfReqFriendList_Parms parms;

	if ( !psfReqFriendList )
		psfReqFriendList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqFriendList" );

	this->ProcessEvent ( psfReqFriendList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel )
{
	static UFunction* psfAckCharInfo = 0;
	UBTTcpLink_Channel_execsfAckCharInfo_Parms parms;

	if ( !psfAckCharInfo )
		psfAckCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckCharInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.stCharInfo = stCharInfo;
	parms.InClanRank = InClanRank;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( psfAckCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqCharInfo (  )
{
	static UFunction* psfReqCharInfo = 0;
	UBTTcpLink_Channel_execsfReqCharInfo_Parms parms;

	if ( !psfReqCharInfo )
		psfReqCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqCharInfo" );

	this->ProcessEvent ( psfReqCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM )
{
	static UFunction* psfAckLogin2 = 0;
	UBTTcpLink_Channel_execsfAckLogin2_Parms parms;

	if ( !psfAckLogin2 )
		psfAckLogin2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckLogin2" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.CurServerTime = CurServerTime;
	parms.CharDBID = CharDBID;
	parms.IsGM = IsGM;
	this->ProcessEvent ( psfAckLogin2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLogin2 ( struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, struct FString Guid, int UserType )
{
	static UFunction* psfReqLogin2 = 0;
	UBTTcpLink_Channel_execsfReqLogin2_Parms parms;

	if ( !psfReqLogin2 )
		psfReqLogin2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLogin2" );

	parms.CharName = CharName;
	parms.TimeStamp = TimeStamp;
	parms.LoginHash1 = LoginHash1;
	parms.LoginHash2 = LoginHash2;
	parms.LoginHash3 = LoginHash3;
	parms.LoginHash4 = LoginHash4;
	parms.LoginHash5 = LoginHash5;
	parms.Guid = Guid;
	parms.UserType = UserType;
	this->ProcessEvent ( psfReqLogin2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckStartNatDiag ( int NatType )
{
	static UFunction* psfAckStartNatDiag = 0;
	UBTTcpLink_Channel_execsfAckStartNatDiag_Parms parms;

	if ( !psfAckStartNatDiag )
		psfAckStartNatDiag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckStartNatDiag" );

	parms.NatType = NatType;
	this->ProcessEvent ( psfAckStartNatDiag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port )
{
	static UFunction* psfReqStartNatDiag = 0;
	UBTTcpLink_Channel_execsfReqStartNatDiag_Parms parms;

	if ( !psfReqStartNatDiag )
		psfReqStartNatDiag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqStartNatDiag" );

	parms.Server1Addr = Server1Addr;
	parms.Server1Port = Server1Port;
	parms.Server2Addr = Server2Addr;
	parms.Server2Port = Server2Port;
	this->ProcessEvent ( psfReqStartNatDiag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqForceLogoutByOwner (  )
{
	static UFunction* psfReqForceLogoutByOwner = 0;
	UBTTcpLink_Channel_execsfReqForceLogoutByOwner_Parms parms;

	if ( !psfReqForceLogoutByOwner )
		psfReqForceLogoutByOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqForceLogoutByOwner" );

	this->ProcessEvent ( psfReqForceLogoutByOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckLogin ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, struct FCharInfo btCharInfo )
{
	static UFunction* psfAckLogin = 0;
	UBTTcpLink_Channel_execsfAckLogin_Parms parms;

	if ( !psfAckLogin )
		psfAckLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckLogin" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.ClanName = ClanName;
	parms.btCharInfo = btCharInfo;
	this->ProcessEvent ( psfAckLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqLogin ( struct FString id )
{
	static UFunction* psfReqLogin = 0;
	UBTTcpLink_Channel_execsfReqLogin_Parms parms;

	if ( !psfReqLogin )
		psfReqLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqLogin" );

	parms.id = id;
	this->ProcessEvent ( psfReqLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfAckHash ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckHash = 0;
	UBTTcpLink_Channel_execsfAckHash_Parms parms;

	if ( !psfAckHash )
		psfAckHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfAckHash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::sfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 )
{
	static UFunction* psfReqHash = 0;
	UBTTcpLink_Channel_execsfReqHash_Parms parms;

	if ( !psfReqHash )
		psfReqHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.sfReqHash" );

	parms.HashField0 = HashField0;
	parms.HashField1 = HashField1;
	parms.HashField2 = HashField2;
	parms.HashField3 = HashField3;
	this->ProcessEvent ( psfReqHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfNotifyCouponUseError ( int Time )
{
	static UFunction* prfNotifyCouponUseError = 0;
	UBTTcpLink_Channel_eventrfNotifyCouponUseError_Parms parms;

	if ( !prfNotifyCouponUseError )
		prfNotifyCouponUseError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfNotifyCouponUseError" );

	parms.Time = Time;
	this->ProcessEvent ( prfNotifyCouponUseError, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCouponUse ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckCouponUse = 0;
	UBTTcpLink_Channel_eventrfAckCouponUse_Parms parms;

	if ( !prfAckCouponUse )
		prfAckCouponUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCouponUse" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckCouponUse, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCouponUse ( struct FString Serial )
{
	static UFunction* prfReqCouponUse = 0;
	UBTTcpLink_Channel_eventrfReqCouponUse_Parms parms;

	if ( !prfReqCouponUse )
		prfReqCouponUse = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCouponUse" );

	parms.Serial = Serial;
	this->ProcessEvent ( prfReqCouponUse, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyShopItemDataEnd ( int Ver )
{
	static UFunction* prfReqNotifyShopItemDataEnd = 0;
	UBTTcpLink_Channel_eventrfReqNotifyShopItemDataEnd_Parms parms;

	if ( !prfReqNotifyShopItemDataEnd )
		prfReqNotifyShopItemDataEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyShopItemDataEnd" );

	parms.Ver = Ver;
	this->ProcessEvent ( prfReqNotifyShopItemDataEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyShopItemData ( class TArray< int > ProductNo, class TArray< struct FString > ProductRowGuid, class TArray< struct FString > ServiceCode, class TArray< struct FString > ProductName, class TArray< struct FString > ProductCode, class TArray< struct FString > ProductType, class TArray< unsigned char > SaleType, class TArray< struct FString > ItemSaleType, class TArray< unsigned char > ISIncludeBonus, class TArray< int > ProductCost, class TArray< int > ProductHour, class TArray< int > ProductQuantity, class TArray< int > TotalQuantity, class TArray< int > ReOrderTerms, class TArray< int > ReorderCount, class TArray< int > PurchaseAvailableQuantity, class TArray< int > AvailableMinLevel, class TArray< int > AvailableMaxLevel, class TArray< unsigned char > AvailableGender, class TArray< int > InventoryKeepDays, class TArray< int > SaleMasterFlag, class TArray< int > SaleStatus, class TArray< struct FString > Description, class TArray< struct FString > Property0, class TArray< struct FString > Property1, class TArray< struct FString > Property2, class TArray< struct FString > Property3, class TArray< struct FString > Property4, class TArray< int > IsGift )
{
	static UFunction* prfReqNotifyShopItemData = 0;
	UBTTcpLink_Channel_eventrfReqNotifyShopItemData_Parms parms;

	if ( !prfReqNotifyShopItemData )
		prfReqNotifyShopItemData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyShopItemData" );

	parms.ProductNo = ProductNo;
	parms.ProductRowGuid = ProductRowGuid;
	parms.ServiceCode = ServiceCode;
	parms.ProductName = ProductName;
	parms.ProductCode = ProductCode;
	parms.ProductType = ProductType;
	parms.SaleType = SaleType;
	parms.ItemSaleType = ItemSaleType;
	parms.ISIncludeBonus = ISIncludeBonus;
	parms.ProductCost = ProductCost;
	parms.ProductHour = ProductHour;
	parms.ProductQuantity = ProductQuantity;
	parms.TotalQuantity = TotalQuantity;
	parms.ReOrderTerms = ReOrderTerms;
	parms.ReorderCount = ReorderCount;
	parms.PurchaseAvailableQuantity = PurchaseAvailableQuantity;
	parms.AvailableMinLevel = AvailableMinLevel;
	parms.AvailableMaxLevel = AvailableMaxLevel;
	parms.AvailableGender = AvailableGender;
	parms.InventoryKeepDays = InventoryKeepDays;
	parms.SaleMasterFlag = SaleMasterFlag;
	parms.SaleStatus = SaleStatus;
	parms.Description = Description;
	parms.Property0 = Property0;
	parms.Property1 = Property1;
	parms.Property2 = Property2;
	parms.Property3 = Property3;
	parms.Property4 = Property4;
	parms.IsGift = IsGift;
	this->ProcessEvent ( prfReqNotifyShopItemData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckShopItemData (  )
{
	static UFunction* prfAckShopItemData = 0;
	UBTTcpLink_Channel_eventrfAckShopItemData_Parms parms;

	if ( !prfAckShopItemData )
		prfAckShopItemData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckShopItemData" );

	this->ProcessEvent ( prfAckShopItemData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqShopItemData ( int Ver )
{
	static UFunction* prfReqShopItemData = 0;
	UBTTcpLink_Channel_eventrfReqShopItemData_Parms parms;

	if ( !prfReqShopItemData )
		prfReqShopItemData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqShopItemData" );

	parms.Ver = Ver;
	this->ProcessEvent ( prfReqShopItemData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyLoadingStatus ( int Status )
{
	static UFunction* prfReqNotifyLoadingStatus = 0;
	UBTTcpLink_Channel_eventrfReqNotifyLoadingStatus_Parms parms;

	if ( !prfReqNotifyLoadingStatus )
		prfReqNotifyLoadingStatus = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyLoadingStatus" );

	parms.Status = Status;
	this->ProcessEvent ( prfReqNotifyLoadingStatus, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqUpdateUserPerformenceInfo ( int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing )
{
	static UFunction* prfReqUpdateUserPerformenceInfo = 0;
	UBTTcpLink_Channel_eventrfReqUpdateUserPerformenceInfo_Parms parms;

	if ( !prfReqUpdateUserPerformenceInfo )
		prfReqUpdateUserPerformenceInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqUpdateUserPerformenceInfo" );

	parms.UserID = UserID;
	parms.MinFps = MinFps;
	parms.MaxFps = MaxFps;
	parms.AvgFps = AvgFps;
	parms.MinPing = MinPing;
	parms.MaxPing = MaxPing;
	parms.AvgPing = AvgPing;
	this->ProcessEvent ( prfReqUpdateUserPerformenceInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAhnNotifyDisconnct ( int Code )
{
	static UFunction* prfReqAhnNotifyDisconnct = 0;
	UBTTcpLink_Channel_eventrfReqAhnNotifyDisconnct_Parms parms;

	if ( !prfReqAhnNotifyDisconnct )
		prfReqAhnNotifyDisconnct = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAhnNotifyDisconnct" );

	parms.Code = Code;
	this->ProcessEvent ( prfReqAhnNotifyDisconnct, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAhnHsObject ( class TArray< unsigned char > Data, int DataSize )
{
	static UFunction* prfAckAhnHsObject = 0;
	UBTTcpLink_Channel_eventrfAckAhnHsObject_Parms parms;

	if ( !prfAckAhnHsObject )
		prfAckAhnHsObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAhnHsObject" );

	parms.Data = Data;
	parms.DataSize = DataSize;
	this->ProcessEvent ( prfAckAhnHsObject, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAhnHsObject ( class TArray< unsigned char > Data, int DataSize )
{
	static UFunction* prfReqAhnHsObject = 0;
	UBTTcpLink_Channel_eventrfReqAhnHsObject_Parms parms;

	if ( !prfReqAhnHsObject )
		prfReqAhnHsObject = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAhnHsObject" );

	parms.Data = Data;
	parms.DataSize = DataSize;
	this->ProcessEvent ( prfReqAhnHsObject, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfNotifyClanLevelup ( struct FString ClanName, int Levelup )
{
	static UFunction* prfNotifyClanLevelup = 0;
	UBTTcpLink_Channel_eventrfNotifyClanLevelup_Parms parms;

	if ( !prfNotifyClanLevelup )
		prfNotifyClanLevelup = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfNotifyClanLevelup" );

	parms.ClanName = ClanName;
	parms.Levelup = Levelup;
	this->ProcessEvent ( prfNotifyClanLevelup, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfNotifyNewClanName ( struct FString New_NickName )
{
	static UFunction* prfNotifyNewClanName = 0;
	UBTTcpLink_Channel_eventrfNotifyNewClanName_Parms parms;

	if ( !prfNotifyNewClanName )
		prfNotifyNewClanName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfNotifyNewClanName" );

	parms.New_NickName = New_NickName;
	this->ProcessEvent ( prfNotifyNewClanName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfNotifyNewNickName ( int Community_Type, struct FString Old_NickName, struct FString New_NickName )
{
	static UFunction* prfNotifyNewNickName = 0;
	UBTTcpLink_Channel_eventrfNotifyNewNickName_Parms parms;

	if ( !prfNotifyNewNickName )
		prfNotifyNewNickName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfNotifyNewNickName" );

	parms.Community_Type = Community_Type;
	parms.Old_NickName = Old_NickName;
	parms.New_NickName = New_NickName;
	this->ProcessEvent ( prfNotifyNewNickName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGameMapData ( class TArray< int > nIdx, class TArray< int > nMapID, class TArray< struct FString > nMapNm, class TArray< float > fSupHealth, class TArray< float > fSupHeli, class TArray< float > fSupBomb, class TArray< float > fSupUAV, class TArray< int > nModFFA, class TArray< int > nModFFAMax, class TArray< int > nModTDM, class TArray< int > nModTDMMax, class TArray< int > nModSD, class TArray< int > nModSDMax, class TArray< int > nModDOM, class TArray< int > nModDOMMax, class TArray< int > nModSab, class TArray< int > nModSabMax )
{
	static UFunction* prfAckGameMapData = 0;
	UBTTcpLink_Channel_eventrfAckGameMapData_Parms parms;

	if ( !prfAckGameMapData )
		prfAckGameMapData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGameMapData" );

	parms.nIdx = nIdx;
	parms.nMapID = nMapID;
	parms.nMapNm = nMapNm;
	parms.fSupHealth = fSupHealth;
	parms.fSupHeli = fSupHeli;
	parms.fSupBomb = fSupBomb;
	parms.fSupUAV = fSupUAV;
	parms.nModFFA = nModFFA;
	parms.nModFFAMax = nModFFAMax;
	parms.nModTDM = nModTDM;
	parms.nModTDMMax = nModTDMMax;
	parms.nModSD = nModSD;
	parms.nModSDMax = nModSDMax;
	parms.nModDOM = nModDOM;
	parms.nModDOMMax = nModDOMMax;
	parms.nModSab = nModSab;
	parms.nModSabMax = nModSabMax;
	this->ProcessEvent ( prfAckGameMapData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGameMapData (  )
{
	static UFunction* prfReqGameMapData = 0;
	UBTTcpLink_Channel_eventrfReqGameMapData_Parms parms;

	if ( !prfReqGameMapData )
		prfReqGameMapData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGameMapData" );

	this->ProcessEvent ( prfReqGameMapData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckTencent_StartTenProtect ( int CharDBID )
{
	static UFunction* prfAckTencent_StartTenProtect = 0;
	UBTTcpLink_Channel_eventrfAckTencent_StartTenProtect_Parms parms;

	if ( !prfAckTencent_StartTenProtect )
		prfAckTencent_StartTenProtect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckTencent_StartTenProtect" );

	parms.CharDBID = CharDBID;
	this->ProcessEvent ( prfAckTencent_StartTenProtect, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckMoveToLobby ( unsigned char MessageType )
{
	static UFunction* prfAckMoveToLobby = 0;
	UBTTcpLink_Channel_eventrfAckMoveToLobby_Parms parms;

	if ( !prfAckMoveToLobby )
		prfAckMoveToLobby = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckMoveToLobby" );

	parms.MessageType = MessageType;
	this->ProcessEvent ( prfAckMoveToLobby, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPopUpMessage ( int MessageType )
{
	static UFunction* prfAckPopUpMessage = 0;
	UBTTcpLink_Channel_eventrfAckPopUpMessage_Parms parms;

	if ( !prfAckPopUpMessage )
		prfAckPopUpMessage = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPopUpMessage" );

	parms.MessageType = MessageType;
	this->ProcessEvent ( prfAckPopUpMessage, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfUpdateWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode )
{
	static UFunction* prfUpdateWebzenShopScriptVersion = 0;
	UBTTcpLink_Channel_eventrfUpdateWebzenShopScriptVersion_Parms parms;

	if ( !prfUpdateWebzenShopScriptVersion )
		prfUpdateWebzenShopScriptVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfUpdateWebzenShopScriptVersion" );

	parms.Year = Year;
	parms.YearId = YearId;
	parms.SalesZoneCode = SalesZoneCode;
	this->ProcessEvent ( prfUpdateWebzenShopScriptVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSetClientVersion ( int ClientVersion )
{
	static UFunction* prfReqSetClientVersion = 0;
	UBTTcpLink_Channel_eventrfReqSetClientVersion_Parms parms;

	if ( !prfReqSetClientVersion )
		prfReqSetClientVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSetClientVersion" );

	parms.ClientVersion = ClientVersion;
	this->ProcessEvent ( prfReqSetClientVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckFriendPosition ( int Result, struct FString TargetCharName, unsigned char ServerType, struct FString fServername, struct FString fServerShortName, struct FString fServerIP, int fServerPort, unsigned char CurPos, unsigned char CurState, int ChannelNum, struct FString ChannelNickName, int GameRoomNum )
{
	static UFunction* prfAckFriendPosition = 0;
	UBTTcpLink_Channel_eventrfAckFriendPosition_Parms parms;

	if ( !prfAckFriendPosition )
		prfAckFriendPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckFriendPosition" );

	parms.Result = Result;
	parms.TargetCharName = TargetCharName;
	parms.ServerType = ServerType;
	parms.fServername = fServername;
	parms.fServerShortName = fServerShortName;
	parms.fServerIP = fServerIP;
	parms.fServerPort = fServerPort;
	parms.CurPos = CurPos;
	parms.CurState = CurState;
	parms.ChannelNum = ChannelNum;
	parms.ChannelNickName = ChannelNickName;
	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( prfAckFriendPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqFriendPosition ( struct FString TargetCharName, unsigned char CommunityType )
{
	static UFunction* prfReqFriendPosition = 0;
	UBTTcpLink_Channel_eventrfReqFriendPosition_Parms parms;

	if ( !prfReqFriendPosition )
		prfReqFriendPosition = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqFriendPosition" );

	parms.TargetCharName = TargetCharName;
	parms.CommunityType = CommunityType;
	this->ProcessEvent ( prfReqFriendPosition, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDedicateHost_Login ( int Result, int UserID, int ChannelNum, int RoomNum )
{
	static UFunction* prfAckDedicateHost_Login = 0;
	UBTTcpLink_Channel_eventrfAckDedicateHost_Login_Parms parms;

	if ( !prfAckDedicateHost_Login )
		prfAckDedicateHost_Login = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDedicateHost_Login" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfAckDedicateHost_Login, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDedicateHost_Login ( int ProcessID, int ChannelNum, int RoomNum )
{
	static UFunction* prfReqDedicateHost_Login = 0;
	UBTTcpLink_Channel_eventrfReqDedicateHost_Login_Parms parms;

	if ( !prfReqDedicateHost_Login )
		prfReqDedicateHost_Login = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDedicateHost_Login" );

	parms.ProcessID = ProcessID;
	parms.ChannelNum = ChannelNum;
	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfReqDedicateHost_Login, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckLogOut ( unsigned char Result, unsigned char Reason )
{
	static UFunction* prfAckLogOut = 0;
	UBTTcpLink_Channel_eventrfAckLogOut_Parms parms;

	if ( !prfAckLogOut )
		prfAckLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckLogOut" );

	parms.Result = Result;
	parms.Reason = Reason;
	this->ProcessEvent ( prfAckLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLogOut ( unsigned char Reason )
{
	static UFunction* prfReqLogOut = 0;
	UBTTcpLink_Channel_eventrfReqLogOut_Parms parms;

	if ( !prfReqLogOut )
		prfReqLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLogOut" );

	parms.Reason = Reason;
	this->ProcessEvent ( prfReqLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec )
{
	static UFunction* prfAckTencent_AASInfo = 0;
	UBTTcpLink_Channel_eventrfAckTencent_AASInfo_Parms parms;

	if ( !prfAckTencent_AASInfo )
		prfAckTencent_AASInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckTencent_AASInfo" );

	parms.UserID = UserID;
	parms.IsAdult = IsAdult;
	parms.IsQQAuth = IsQQAuth;
	parms.AccumTimeSec = AccumTimeSec;
	this->ProcessEvent ( prfAckTencent_AASInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSetCommunityOption ( int Result, struct FString ErrStr )
{
	static UFunction* prfAckSetCommunityOption = 0;
	UBTTcpLink_Channel_eventrfAckSetCommunityOption_Parms parms;

	if ( !prfAckSetCommunityOption )
		prfAckSetCommunityOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSetCommunityOption" );

	parms.Result = Result;
	parms.ErrStr = ErrStr;
	this->ProcessEvent ( prfAckSetCommunityOption, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSetCommunityOption ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite )
{
	static UFunction* prfReqSetCommunityOption = 0;
	UBTTcpLink_Channel_eventrfReqSetCommunityOption_Parms parms;

	if ( !prfReqSetCommunityOption )
		prfReqSetCommunityOption = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSetCommunityOption" );

	parms.Opt_Wispher = Opt_Wispher;
	parms.Opt_GameInvite = Opt_GameInvite;
	parms.Opt_FriendInvite = Opt_FriendInvite;
	parms.Opt_ClanInvite = Opt_ClanInvite;
	this->ProcessEvent ( prfReqSetCommunityOption, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCommunityOptionList ( int Opt_Wispher, int Opt_GameInvite, int Opt_FriendInvite, int Opt_ClanInvite )
{
	static UFunction* prfAckCommunityOptionList = 0;
	UBTTcpLink_Channel_eventrfAckCommunityOptionList_Parms parms;

	if ( !prfAckCommunityOptionList )
		prfAckCommunityOptionList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCommunityOptionList" );

	parms.Opt_Wispher = Opt_Wispher;
	parms.Opt_GameInvite = Opt_GameInvite;
	parms.Opt_FriendInvite = Opt_FriendInvite;
	parms.Opt_ClanInvite = Opt_ClanInvite;
	this->ProcessEvent ( prfAckCommunityOptionList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCommunityOptionList (  )
{
	static UFunction* prfReqCommunityOptionList = 0;
	UBTTcpLink_Channel_eventrfReqCommunityOptionList_Parms parms;

	if ( !prfReqCommunityOptionList )
		prfReqCommunityOptionList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCommunityOptionList" );

	this->ProcessEvent ( prfReqCommunityOptionList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyUpdateCharInfo_TitleMark ( struct FString CharName, int TitleMarkID )
{
	static UFunction* prfAckNotifyUpdateCharInfo_TitleMark = 0;
	UBTTcpLink_Channel_eventrfAckNotifyUpdateCharInfo_TitleMark_Parms parms;

	if ( !prfAckNotifyUpdateCharInfo_TitleMark )
		prfAckNotifyUpdateCharInfo_TitleMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyUpdateCharInfo_TitleMark" );

	parms.CharName = CharName;
	parms.TitleMarkID = TitleMarkID;
	this->ProcessEvent ( prfAckNotifyUpdateCharInfo_TitleMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyUpdateCharInfo_LevelMark ( struct FString CharName, int LevelMarkID )
{
	static UFunction* prfAckNotifyUpdateCharInfo_LevelMark = 0;
	UBTTcpLink_Channel_eventrfAckNotifyUpdateCharInfo_LevelMark_Parms parms;

	if ( !prfAckNotifyUpdateCharInfo_LevelMark )
		prfAckNotifyUpdateCharInfo_LevelMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyUpdateCharInfo_LevelMark" );

	parms.CharName = CharName;
	parms.LevelMarkID = LevelMarkID;
	this->ProcessEvent ( prfAckNotifyUpdateCharInfo_LevelMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetRankingInfoListEnd (  )
{
	static UFunction* prfAckGetRankingInfoListEnd = 0;
	UBTTcpLink_Channel_eventrfAckGetRankingInfoListEnd_Parms parms;

	if ( !prfAckGetRankingInfoListEnd )
		prfAckGetRankingInfoListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetRankingInfoListEnd" );

	this->ProcessEvent ( prfAckGetRankingInfoListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetRankingInfoList ( int Result, unsigned char RankingType, unsigned char CommunityType, class TArray< struct FString > CharName, class TArray< int > CharLevel, class TArray< struct FString > ClanName, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Ranking_Accum, class TArray< int > Ranking_Accum_Prev, class TArray< int > Ranking_Accum_Exp, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* prfAckGetRankingInfoList = 0;
	UBTTcpLink_Channel_eventrfAckGetRankingInfoList_Parms parms;

	if ( !prfAckGetRankingInfoList )
		prfAckGetRankingInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetRankingInfoList" );

	parms.Result = Result;
	parms.RankingType = RankingType;
	parms.CommunityType = CommunityType;
	parms.CharName = CharName;
	parms.CharLevel = CharLevel;
	parms.ClanName = ClanName;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.Ranking_Accum = Ranking_Accum;
	parms.Ranking_Accum_Prev = Ranking_Accum_Prev;
	parms.Ranking_Accum_Exp = Ranking_Accum_Exp;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckGetRankingInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetRankingInfoListStart ( int Result, unsigned char RankingType, unsigned char CommunityType, int TotalCount )
{
	static UFunction* prfAckGetRankingInfoListStart = 0;
	UBTTcpLink_Channel_eventrfAckGetRankingInfoListStart_Parms parms;

	if ( !prfAckGetRankingInfoListStart )
		prfAckGetRankingInfoListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetRankingInfoListStart" );

	parms.Result = Result;
	parms.RankingType = RankingType;
	parms.CommunityType = CommunityType;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckGetRankingInfoListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetRankingInfoList ( unsigned char RankingType, unsigned char CommunityType )
{
	static UFunction* prfReqGetRankingInfoList = 0;
	UBTTcpLink_Channel_eventrfReqGetRankingInfoList_Parms parms;

	if ( !prfReqGetRankingInfoList )
		prfReqGetRankingInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetRankingInfoList" );

	parms.RankingType = RankingType;
	parms.CommunityType = CommunityType;
	this->ProcessEvent ( prfReqGetRankingInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCharDetailInfo ( int MaxSerial, int MaxScore, int MaxKill, int MaxAssist, int Serial3, int Serial5, int Serial7, int Serial10, int Serial15, int AR, int SMG, int SR, int SW, int Melee, int Grenade, int FlashBang, int Foot, int AT4, int MG, int Fire, int RPG7, int TimeBomb, int IcendiaryBomb, int ClusterBomb, int ByChopper, int Artillery, int KillChopper, int FirstKill, int LastKill, int AllKill, int Dominate, int InstallBomb, int DefuseBomb )
{
	static UFunction* prfAckCharDetailInfo = 0;
	UBTTcpLink_Channel_eventrfAckCharDetailInfo_Parms parms;

	if ( !prfAckCharDetailInfo )
		prfAckCharDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCharDetailInfo" );

	parms.MaxSerial = MaxSerial;
	parms.MaxScore = MaxScore;
	parms.MaxKill = MaxKill;
	parms.MaxAssist = MaxAssist;
	parms.Serial3 = Serial3;
	parms.Serial5 = Serial5;
	parms.Serial7 = Serial7;
	parms.Serial10 = Serial10;
	parms.Serial15 = Serial15;
	parms.AR = AR;
	parms.SMG = SMG;
	parms.SR = SR;
	parms.SW = SW;
	parms.Melee = Melee;
	parms.Grenade = Grenade;
	parms.FlashBang = FlashBang;
	parms.Foot = Foot;
	parms.AT4 = AT4;
	parms.MG = MG;
	parms.Fire = Fire;
	parms.RPG7 = RPG7;
	parms.TimeBomb = TimeBomb;
	parms.IcendiaryBomb = IcendiaryBomb;
	parms.ClusterBomb = ClusterBomb;
	parms.ByChopper = ByChopper;
	parms.Artillery = Artillery;
	parms.KillChopper = KillChopper;
	parms.FirstKill = FirstKill;
	parms.LastKill = LastKill;
	parms.AllKill = AllKill;
	parms.Dominate = Dominate;
	parms.InstallBomb = InstallBomb;
	parms.DefuseBomb = DefuseBomb;
	this->ProcessEvent ( prfAckCharDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCharDetailInfo (  )
{
	static UFunction* prfReqCharDetailInfo = 0;
	UBTTcpLink_Channel_eventrfReqCharDetailInfo_Parms parms;

	if ( !prfReqCharDetailInfo )
		prfReqCharDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCharDetailInfo" );

	this->ProcessEvent ( prfReqCharDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqInGameRoomUserClanLevelChanged ( int UserID, int ClanLevel )
{
	static UFunction* prfReqInGameRoomUserClanLevelChanged = 0;
	UBTTcpLink_Channel_eventrfReqInGameRoomUserClanLevelChanged_Parms parms;

	if ( !prfReqInGameRoomUserClanLevelChanged )
		prfReqInGameRoomUserClanLevelChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqInGameRoomUserClanLevelChanged" );

	parms.UserID = UserID;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( prfReqInGameRoomUserClanLevelChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqInGameRoomUserInfoChanged (  )
{
	static UFunction* prfReqInGameRoomUserInfoChanged = 0;
	UBTTcpLink_Channel_eventrfReqInGameRoomUserInfoChanged_Parms parms;

	if ( !prfReqInGameRoomUserInfoChanged )
		prfReqInGameRoomUserInfoChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqInGameRoomUserInfoChanged" );

	this->ProcessEvent ( prfReqInGameRoomUserInfoChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatchResultHistory ( class TArray< struct FBtrDouble > MatchDate, class TArray< unsigned char > IsWin, class TArray< struct FString > EnemyClanname )
{
	static UFunction* prfAckClanMatchResultHistory = 0;
	UBTTcpLink_Channel_eventrfAckClanMatchResultHistory_Parms parms;

	if ( !prfAckClanMatchResultHistory )
		prfAckClanMatchResultHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatchResultHistory" );

	parms.MatchDate = MatchDate;
	parms.IsWin = IsWin;
	parms.EnemyClanname = EnemyClanname;
	this->ProcessEvent ( prfAckClanMatchResultHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatchResultHistory ( struct FString ClanNm )
{
	static UFunction* prfReqClanMatchResultHistory = 0;
	UBTTcpLink_Channel_eventrfReqClanMatchResultHistory_Parms parms;

	if ( !prfReqClanMatchResultHistory )
		prfReqClanMatchResultHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatchResultHistory" );

	parms.ClanNm = ClanNm;
	this->ProcessEvent ( prfReqClanMatchResultHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDeleteMailAll ( int Result, unsigned char MailType, int Count )
{
	static UFunction* prfAckDeleteMailAll = 0;
	UBTTcpLink_Channel_eventrfAckDeleteMailAll_Parms parms;

	if ( !prfAckDeleteMailAll )
		prfAckDeleteMailAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDeleteMailAll" );

	parms.Result = Result;
	parms.MailType = MailType;
	parms.Count = Count;
	this->ProcessEvent ( prfAckDeleteMailAll, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDeleteMailAll ( unsigned char MailType )
{
	static UFunction* prfReqDeleteMailAll = 0;
	UBTTcpLink_Channel_eventrfReqDeleteMailAll_Parms parms;

	if ( !prfReqDeleteMailAll )
		prfReqDeleteMailAll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDeleteMailAll" );

	parms.MailType = MailType;
	this->ProcessEvent ( prfReqDeleteMailAll, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_PublicWaitRoomChanged ( int WaitRoomIdx, struct FString RoomName, int MapNum, int CurUserCount, int MaxUserCount, unsigned char Status, unsigned char IsPublic )
{
	static UFunction* prfAckClanMatch_PublicWaitRoomChanged = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_PublicWaitRoomChanged_Parms parms;

	if ( !prfAckClanMatch_PublicWaitRoomChanged )
		prfAckClanMatch_PublicWaitRoomChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_PublicWaitRoomChanged" );

	parms.WaitRoomIdx = WaitRoomIdx;
	parms.RoomName = RoomName;
	parms.MapNum = MapNum;
	parms.CurUserCount = CurUserCount;
	parms.MaxUserCount = MaxUserCount;
	parms.Status = Status;
	parms.IsPublic = IsPublic;
	this->ProcessEvent ( prfAckClanMatch_PublicWaitRoomChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEventNotify ( int Type )
{
	static UFunction* prfAckEventNotify = 0;
	UBTTcpLink_Channel_eventrfAckEventNotify_Parms parms;

	if ( !prfAckEventNotify )
		prfAckEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEventNotify" );

	parms.Type = Type;
	this->ProcessEvent ( prfAckEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEventNotify (  )
{
	static UFunction* prfReqEventNotify = 0;
	UBTTcpLink_Channel_eventrfReqEventNotify_Parms parms;

	if ( !prfReqEventNotify )
		prfReqEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEventNotify" );

	this->ProcessEvent ( prfReqEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_NotifyChangeClanname ( struct FString NewClanname )
{
	static UFunction* prfAckPaidItem_NotifyChangeClanname = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_NotifyChangeClanname_Parms parms;

	if ( !prfAckPaidItem_NotifyChangeClanname )
		prfAckPaidItem_NotifyChangeClanname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_NotifyChangeClanname" );

	parms.NewClanname = NewClanname;
	this->ProcessEvent ( prfAckPaidItem_NotifyChangeClanname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_ChangeClanname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewClanname )
{
	static UFunction* prfAckPaidItem_ChangeClanname = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_ChangeClanname_Parms parms;

	if ( !prfAckPaidItem_ChangeClanname )
		prfAckPaidItem_ChangeClanname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ChangeClanname" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.RemainCount = RemainCount;
	parms.NewClanname = NewClanname;
	this->ProcessEvent ( prfAckPaidItem_ChangeClanname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPaidItem_ChangeClanname ( struct FBtrDouble ItemIdx, struct FString NewClanname )
{
	static UFunction* prfReqPaidItem_ChangeClanname = 0;
	UBTTcpLink_Channel_eventrfReqPaidItem_ChangeClanname_Parms parms;

	if ( !prfReqPaidItem_ChangeClanname )
		prfReqPaidItem_ChangeClanname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ChangeClanname" );

	parms.ItemIdx = ItemIdx;
	parms.NewClanname = NewClanname;
	this->ProcessEvent ( prfReqPaidItem_ChangeClanname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_EndPublicWaitRoomList (  )
{
	static UFunction* prfAckClanMatch_EndPublicWaitRoomList = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_EndPublicWaitRoomList_Parms parms;

	if ( !prfAckClanMatch_EndPublicWaitRoomList )
		prfAckClanMatch_EndPublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_EndPublicWaitRoomList" );

	this->ProcessEvent ( prfAckClanMatch_EndPublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_PublicWaitRoomList ( class TArray< int > WaitRoomIdx, class TArray< struct FString > LeaderName, class TArray< struct FString > RoomName, class TArray< int > MapNum, class TArray< int > CurUserCount, class TArray< int > MaxUserCount, class TArray< unsigned char > Status )
{
	static UFunction* prfAckClanMatch_PublicWaitRoomList = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_PublicWaitRoomList_Parms parms;

	if ( !prfAckClanMatch_PublicWaitRoomList )
		prfAckClanMatch_PublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_PublicWaitRoomList" );

	parms.WaitRoomIdx = WaitRoomIdx;
	parms.LeaderName = LeaderName;
	parms.RoomName = RoomName;
	parms.MapNum = MapNum;
	parms.CurUserCount = CurUserCount;
	parms.MaxUserCount = MaxUserCount;
	parms.Status = Status;
	this->ProcessEvent ( prfAckClanMatch_PublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_StartPublicWaitRoomList ( int Result, struct FString ErrMsg, int Count )
{
	static UFunction* prfAckClanMatch_StartPublicWaitRoomList = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_StartPublicWaitRoomList_Parms parms;

	if ( !prfAckClanMatch_StartPublicWaitRoomList )
		prfAckClanMatch_StartPublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StartPublicWaitRoomList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Count = Count;
	this->ProcessEvent ( prfAckClanMatch_StartPublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_GetPublicWaitRoomList (  )
{
	static UFunction* prfReqClanMatch_GetPublicWaitRoomList = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_GetPublicWaitRoomList_Parms parms;

	if ( !prfReqClanMatch_GetPublicWaitRoomList )
		prfReqClanMatch_GetPublicWaitRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_GetPublicWaitRoomList" );

	this->ProcessEvent ( prfReqClanMatch_GetPublicWaitRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckServerType ( unsigned char Type )
{
	static UFunction* prfAckServerType = 0;
	UBTTcpLink_Channel_eventrfAckServerType_Parms parms;

	if ( !prfAckServerType )
		prfAckServerType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckServerType" );

	parms.Type = Type;
	this->ProcessEvent ( prfAckServerType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqServerType (  )
{
	static UFunction* prfReqServerType = 0;
	UBTTcpLink_Channel_eventrfReqServerType_Parms parms;

	if ( !prfReqServerType )
		prfReqServerType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqServerType" );

	this->ProcessEvent ( prfReqServerType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckServerShutdown ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckServerShutdown = 0;
	UBTTcpLink_Channel_eventrfAckServerShutdown_Parms parms;

	if ( !prfAckServerShutdown )
		prfAckServerShutdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckServerShutdown" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckServerShutdown, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqServerShutdown ( struct FString AuthKey, int SecondAfter, struct FBtrDouble ShutdownTime )
{
	static UFunction* prfReqServerShutdown = 0;
	UBTTcpLink_Channel_eventrfReqServerShutdown_Parms parms;

	if ( !prfReqServerShutdown )
		prfReqServerShutdown = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqServerShutdown" );

	parms.AuthKey = AuthKey;
	parms.SecondAfter = SecondAfter;
	parms.ShutdownTime = ShutdownTime;
	this->ProcessEvent ( prfReqServerShutdown, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyEndTutorial ( int UserID, struct FString CharName, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* prfAckNotifyEndTutorial = 0;
	UBTTcpLink_Channel_eventrfAckNotifyEndTutorial_Parms parms;

	if ( !prfAckNotifyEndTutorial )
		prfAckNotifyEndTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyEndTutorial" );

	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.Level = Level;
	parms.ClanName = ClanName;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookFor = IsLookFor;
	parms.Result = Result;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckNotifyEndTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyEndTutorial ( int TutorialResultType )
{
	static UFunction* prfReqNotifyEndTutorial = 0;
	UBTTcpLink_Channel_eventrfReqNotifyEndTutorial_Parms parms;

	if ( !prfReqNotifyEndTutorial )
		prfReqNotifyEndTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyEndTutorial" );

	parms.TutorialResultType = TutorialResultType;
	this->ProcessEvent ( prfReqNotifyEndTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyStartTutorial ( int Result, int UserID )
{
	static UFunction* prfAckNotifyStartTutorial = 0;
	UBTTcpLink_Channel_eventrfAckNotifyStartTutorial_Parms parms;

	if ( !prfAckNotifyStartTutorial )
		prfAckNotifyStartTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyStartTutorial" );

	parms.Result = Result;
	parms.UserID = UserID;
	this->ProcessEvent ( prfAckNotifyStartTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyStartTutorial (  )
{
	static UFunction* prfReqNotifyStartTutorial = 0;
	UBTTcpLink_Channel_eventrfReqNotifyStartTutorial_Parms parms;

	if ( !prfReqNotifyStartTutorial )
		prfReqNotifyStartTutorial = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyStartTutorial" );

	this->ProcessEvent ( prfReqNotifyStartTutorial, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint )
{
	static UFunction* prfAckRoomUserPingInfo = 0;
	UBTTcpLink_Channel_eventrfAckRoomUserPingInfo_Parms parms;

	if ( !prfAckRoomUserPingInfo )
		prfAckRoomUserPingInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRoomUserPingInfo" );

	parms.UnqueID = UnqueID;
	parms.Ping = Ping;
	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( prfAckRoomUserPingInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRoomUserPingInfo ( class TArray< int > UnqueID, class TArray< int > Ping, int HostPriorityPoint )
{
	static UFunction* prfReqRoomUserPingInfo = 0;
	UBTTcpLink_Channel_eventrfReqRoomUserPingInfo_Parms parms;

	if ( !prfReqRoomUserPingInfo )
		prfReqRoomUserPingInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRoomUserPingInfo" );

	parms.UnqueID = UnqueID;
	parms.Ping = Ping;
	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( prfReqRoomUserPingInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckMyEquipedQSlotList ( class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< int > TWItemID1, class TArray< struct FBtrDouble > TW2UniqueID, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID, int Result )
{
	static UFunction* prfAckMyEquipedQSlotList = 0;
	UBTTcpLink_Channel_eventrfAckMyEquipedQSlotList_Parms parms;

	if ( !prfAckMyEquipedQSlotList )
		prfAckMyEquipedQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckMyEquipedQSlotList" );

	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWUniqueID = MWUniqueID;
	parms.MWItemID = MWItemID;
	parms.MWPartID = MWPartID;
	parms.MWPaintID = MWPaintID;
	parms.PistolUniqueID = PistolUniqueID;
	parms.PistolItemID = PistolItemID;
	parms.PistolPartID = PistolPartID;
	parms.PistolPaintID = PistolPaintID;
	parms.TW1UniqueID = TW1UniqueID;
	parms.TWItemID1 = TWItemID1;
	parms.TW2UniqueID = TW2UniqueID;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1ID = Skill1ID;
	parms.Skill2ID = Skill2ID;
	parms.Skill3ID = Skill3ID;
	parms.Skill4ID = Skill4ID;
	parms.Result = Result;
	this->ProcessEvent ( prfAckMyEquipedQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqMyEquipedQSlotList (  )
{
	static UFunction* prfReqMyEquipedQSlotList = 0;
	UBTTcpLink_Channel_eventrfReqMyEquipedQSlotList_Parms parms;

	if ( !prfReqMyEquipedQSlotList )
		prfReqMyEquipedQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqMyEquipedQSlotList" );

	this->ProcessEvent ( prfReqMyEquipedQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckMyEquipedSkillList ( class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result )
{
	static UFunction* prfAckMyEquipedSkillList = 0;
	UBTTcpLink_Channel_eventrfAckMyEquipedSkillList_Parms parms;

	if ( !prfAckMyEquipedSkillList )
		prfAckMyEquipedSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckMyEquipedSkillList" );

	parms.SkillIDs = SkillIDs;
	parms.SlotPositions = SlotPositions;
	parms.Result = Result;
	this->ProcessEvent ( prfAckMyEquipedSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqMyEquipedSkillList (  )
{
	static UFunction* prfReqMyEquipedSkillList = 0;
	UBTTcpLink_Channel_eventrfReqMyEquipedSkillList_Parms parms;

	if ( !prfReqMyEquipedSkillList )
		prfReqMyEquipedSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqMyEquipedSkillList" );

	this->ProcessEvent ( prfReqMyEquipedSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckMyEquipedItemList ( class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< int > PaintID, class TArray< struct FBtrDouble > UniqueID, int Result )
{
	static UFunction* prfAckMyEquipedItemList = 0;
	UBTTcpLink_Channel_eventrfAckMyEquipedItemList_Parms parms;

	if ( !prfAckMyEquipedItemList )
		prfAckMyEquipedItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckMyEquipedItemList" );

	parms.ItemIDs = ItemIDs;
	parms.SlotPositions = SlotPositions;
	parms.AddPartsID = AddPartsID;
	parms.PaintID = PaintID;
	parms.UniqueID = UniqueID;
	parms.Result = Result;
	this->ProcessEvent ( prfAckMyEquipedItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqMyEquipedItemList (  )
{
	static UFunction* prfReqMyEquipedItemList = 0;
	UBTTcpLink_Channel_eventrfReqMyEquipedItemList_Parms parms;

	if ( !prfReqMyEquipedItemList )
		prfReqMyEquipedItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqMyEquipedItemList" );

	this->ProcessEvent ( prfReqMyEquipedItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetMyMailBoxState ( int Result, unsigned char IsFull, int NewMailCount )
{
	static UFunction* prfAckGetMyMailBoxState = 0;
	UBTTcpLink_Channel_eventrfAckGetMyMailBoxState_Parms parms;

	if ( !prfAckGetMyMailBoxState )
		prfAckGetMyMailBoxState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetMyMailBoxState" );

	parms.Result = Result;
	parms.IsFull = IsFull;
	parms.NewMailCount = NewMailCount;
	this->ProcessEvent ( prfAckGetMyMailBoxState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetMyMailBoxState (  )
{
	static UFunction* prfReqGetMyMailBoxState = 0;
	UBTTcpLink_Channel_eventrfReqGetMyMailBoxState_Parms parms;

	if ( !prfReqGetMyMailBoxState )
		prfReqGetMyMailBoxState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetMyMailBoxState" );

	this->ProcessEvent ( prfReqGetMyMailBoxState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSetLookForClan ( int Result, struct FString ErrMsg, unsigned char IsLookingFor )
{
	static UFunction* prfAckSetLookForClan = 0;
	UBTTcpLink_Channel_eventrfAckSetLookForClan_Parms parms;

	if ( !prfAckSetLookForClan )
		prfAckSetLookForClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSetLookForClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsLookingFor = IsLookingFor;
	this->ProcessEvent ( prfAckSetLookForClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSetLookForClan ( unsigned char IsLookingFor )
{
	static UFunction* prfReqSetLookForClan = 0;
	UBTTcpLink_Channel_eventrfReqSetLookForClan_Parms parms;

	if ( !prfReqSetLookForClan )
		prfReqSetLookForClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSetLookForClan" );

	parms.IsLookingFor = IsLookingFor;
	this->ProcessEvent ( prfReqSetLookForClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckExteriorRoomOwnerInfo (  )
{
	static UFunction* prfAckExteriorRoomOwnerInfo = 0;
	UBTTcpLink_Channel_eventrfAckExteriorRoomOwnerInfo_Parms parms;

	if ( !prfAckExteriorRoomOwnerInfo )
		prfAckExteriorRoomOwnerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomOwnerInfo" );

	this->ProcessEvent ( prfAckExteriorRoomOwnerInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqExteriorRoomOwnerInfo ( int RoomNum, struct FString OwnerName, struct FString OwnerIP )
{
	static UFunction* prfReqExteriorRoomOwnerInfo = 0;
	UBTTcpLink_Channel_eventrfReqExteriorRoomOwnerInfo_Parms parms;

	if ( !prfReqExteriorRoomOwnerInfo )
		prfReqExteriorRoomOwnerInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomOwnerInfo" );

	parms.RoomNum = RoomNum;
	parms.OwnerName = OwnerName;
	parms.OwnerIP = OwnerIP;
	this->ProcessEvent ( prfReqExteriorRoomOwnerInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_SetWaitRoomPublic ( int Result, struct FString ErrMsg, unsigned char Set )
{
	static UFunction* prfAckClanMatch_SetWaitRoomPublic = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_SetWaitRoomPublic_Parms parms;

	if ( !prfAckClanMatch_SetWaitRoomPublic )
		prfAckClanMatch_SetWaitRoomPublic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_SetWaitRoomPublic" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Set = Set;
	this->ProcessEvent ( prfAckClanMatch_SetWaitRoomPublic, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_SetWaitRoomPublic ( unsigned char Set )
{
	static UFunction* prfReqClanMatch_SetWaitRoomPublic = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_SetWaitRoomPublic_Parms parms;

	if ( !prfReqClanMatch_SetWaitRoomPublic )
		prfReqClanMatch_SetWaitRoomPublic = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_SetWaitRoomPublic" );

	parms.Set = Set;
	this->ProcessEvent ( prfReqClanMatch_SetWaitRoomPublic, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRemoveCheckTeamBalanceList (  )
{
	static UFunction* prfReqRemoveCheckTeamBalanceList = 0;
	UBTTcpLink_Channel_eventrfReqRemoveCheckTeamBalanceList_Parms parms;

	if ( !prfReqRemoveCheckTeamBalanceList )
		prfReqRemoveCheckTeamBalanceList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRemoveCheckTeamBalanceList" );

	this->ProcessEvent ( prfReqRemoveCheckTeamBalanceList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_NotifyChangeClanMark ( struct FString ClanName, int Pattern, int BG, int BL )
{
	static UFunction* prfAckPaidItem_NotifyChangeClanMark = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_NotifyChangeClanMark_Parms parms;

	if ( !prfAckPaidItem_NotifyChangeClanMark )
		prfAckPaidItem_NotifyChangeClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_NotifyChangeClanMark" );

	parms.ClanName = ClanName;
	parms.Pattern = Pattern;
	parms.BG = BG;
	parms.BL = BL;
	this->ProcessEvent ( prfAckPaidItem_NotifyChangeClanMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_ChangeClanMark ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount )
{
	static UFunction* prfAckPaidItem_ChangeClanMark = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_ChangeClanMark_Parms parms;

	if ( !prfAckPaidItem_ChangeClanMark )
		prfAckPaidItem_ChangeClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ChangeClanMark" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.StackCount = StackCount;
	this->ProcessEvent ( prfAckPaidItem_ChangeClanMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPaidItem_ChangeClanMark ( struct FBtrDouble ItemIdx, unsigned char IsPaid, int Pattern, int BG, int BL )
{
	static UFunction* prfReqPaidItem_ChangeClanMark = 0;
	UBTTcpLink_Channel_eventrfReqPaidItem_ChangeClanMark_Parms parms;

	if ( !prfReqPaidItem_ChangeClanMark )
		prfReqPaidItem_ChangeClanMark = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ChangeClanMark" );

	parms.ItemIdx = ItemIdx;
	parms.IsPaid = IsPaid;
	parms.Pattern = Pattern;
	parms.BG = BG;
	parms.BL = BL;
	this->ProcessEvent ( prfReqPaidItem_ChangeClanMark, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_ClanMarkDupCheck ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckPaidItem_ClanMarkDupCheck = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_ClanMarkDupCheck_Parms parms;

	if ( !prfAckPaidItem_ClanMarkDupCheck )
		prfAckPaidItem_ClanMarkDupCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ClanMarkDupCheck" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckPaidItem_ClanMarkDupCheck, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPaidItem_ClanMarkDupCheck ( unsigned char IsPaid, int Pattern, int BG, int BL )
{
	static UFunction* prfReqPaidItem_ClanMarkDupCheck = 0;
	UBTTcpLink_Channel_eventrfReqPaidItem_ClanMarkDupCheck_Parms parms;

	if ( !prfReqPaidItem_ClanMarkDupCheck )
		prfReqPaidItem_ClanMarkDupCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ClanMarkDupCheck" );

	parms.IsPaid = IsPaid;
	parms.Pattern = Pattern;
	parms.BG = BG;
	parms.BL = BL;
	this->ProcessEvent ( prfReqPaidItem_ClanMarkDupCheck, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_RelayBroadcast ( struct FString CharName, struct FString Msg )
{
	static UFunction* prfAckPaidItem_RelayBroadcast = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_RelayBroadcast_Parms parms;

	if ( !prfAckPaidItem_RelayBroadcast )
		prfAckPaidItem_RelayBroadcast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_RelayBroadcast" );

	parms.CharName = CharName;
	parms.Msg = Msg;
	this->ProcessEvent ( prfAckPaidItem_RelayBroadcast, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_BroadCast ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount )
{
	static UFunction* prfAckPaidItem_BroadCast = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_BroadCast_Parms parms;

	if ( !prfAckPaidItem_BroadCast )
		prfAckPaidItem_BroadCast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_BroadCast" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.StackCount = StackCount;
	this->ProcessEvent ( prfAckPaidItem_BroadCast, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPaidItem_BroadCast ( struct FBtrDouble ItemIdx, int Command, struct FString Message )
{
	static UFunction* prfReqPaidItem_BroadCast = 0;
	UBTTcpLink_Channel_eventrfReqPaidItem_BroadCast_Parms parms;

	if ( !prfReqPaidItem_BroadCast )
		prfReqPaidItem_BroadCast = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPaidItem_BroadCast" );

	parms.ItemIdx = ItemIdx;
	parms.Command = Command;
	parms.Message = Message;
	this->ProcessEvent ( prfReqPaidItem_BroadCast, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_EraseRecord ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int Command, int RemainCount )
{
	static UFunction* prfAckPaidItem_EraseRecord = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_EraseRecord_Parms parms;

	if ( !prfAckPaidItem_EraseRecord )
		prfAckPaidItem_EraseRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_EraseRecord" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.Command = Command;
	parms.RemainCount = RemainCount;
	this->ProcessEvent ( prfAckPaidItem_EraseRecord, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPaidItem_EraseRecord ( struct FBtrDouble ItemIdx, int Command )
{
	static UFunction* prfReqPaidItem_EraseRecord = 0;
	UBTTcpLink_Channel_eventrfReqPaidItem_EraseRecord_Parms parms;

	if ( !prfReqPaidItem_EraseRecord )
		prfReqPaidItem_EraseRecord = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPaidItem_EraseRecord" );

	parms.ItemIdx = ItemIdx;
	parms.Command = Command;
	this->ProcessEvent ( prfReqPaidItem_EraseRecord, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPaidItem_ChangeCharname ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int RemainCount, struct FString NewCharname )
{
	static UFunction* prfAckPaidItem_ChangeCharname = 0;
	UBTTcpLink_Channel_eventrfAckPaidItem_ChangeCharname_Parms parms;

	if ( !prfAckPaidItem_ChangeCharname )
		prfAckPaidItem_ChangeCharname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPaidItem_ChangeCharname" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.RemainCount = RemainCount;
	parms.NewCharname = NewCharname;
	this->ProcessEvent ( prfAckPaidItem_ChangeCharname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPaidItem_ChangeCharname ( struct FBtrDouble ItemIdx, struct FString NewCharname )
{
	static UFunction* prfReqPaidItem_ChangeCharname = 0;
	UBTTcpLink_Channel_eventrfReqPaidItem_ChangeCharname_Parms parms;

	if ( !prfReqPaidItem_ChangeCharname )
		prfReqPaidItem_ChangeCharname = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPaidItem_ChangeCharname" );

	parms.ItemIdx = ItemIdx;
	parms.NewCharname = NewCharname;
	this->ProcessEvent ( prfReqPaidItem_ChangeCharname, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRecvSystemMsg ( unsigned char CommunityType, struct FSystemMsgParam MsgInfo )
{
	static UFunction* prfAckRecvSystemMsg = 0;
	UBTTcpLink_Channel_eventrfAckRecvSystemMsg_Parms parms;

	if ( !prfAckRecvSystemMsg )
		prfAckRecvSystemMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRecvSystemMsg" );

	parms.CommunityType = CommunityType;
	parms.MsgInfo = MsgInfo;
	this->ProcessEvent ( prfAckRecvSystemMsg, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSendSystemMsg ( int Result )
{
	static UFunction* prfAckSendSystemMsg = 0;
	UBTTcpLink_Channel_eventrfAckSendSystemMsg_Parms parms;

	if ( !prfAckSendSystemMsg )
		prfAckSendSystemMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSendSystemMsg" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckSendSystemMsg, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSendSystemMsg ( unsigned char RecvType, struct FString SendCharName, struct FString RecvCharname, struct FSystemMsgParam MsgInfo )
{
	static UFunction* prfReqSendSystemMsg = 0;
	UBTTcpLink_Channel_eventrfReqSendSystemMsg_Parms parms;

	if ( !prfReqSendSystemMsg )
		prfReqSendSystemMsg = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSendSystemMsg" );

	parms.RecvType = RecvType;
	parms.SendCharName = SendCharName;
	parms.RecvCharname = RecvCharname;
	parms.MsgInfo = MsgInfo;
	this->ProcessEvent ( prfReqSendSystemMsg, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRandomBox_Use ( int Result, struct FString ErrMsg, struct FBtrDouble RandomBoxItemIdx, int RandomBxoItemCount, class TArray< int > ItemIDChoose, class TArray< int > PartIDChoose, class TArray< int > PeriodOnChoosenItem, class TArray< int > StackCountOnChoosenItem, class TArray< unsigned char > bHave, class TArray< struct FBtrDouble > ItemIdx, class TArray< struct FBtrDouble > UntilTime, class TArray< int > StackCount )
{
	static UFunction* prfAckRandomBox_Use = 0;
	UBTTcpLink_Channel_eventrfAckRandomBox_Use_Parms parms;

	if ( !prfAckRandomBox_Use )
		prfAckRandomBox_Use = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRandomBox_Use" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RandomBoxItemIdx = RandomBoxItemIdx;
	parms.RandomBxoItemCount = RandomBxoItemCount;
	parms.ItemIDChoose = ItemIDChoose;
	parms.PartIDChoose = PartIDChoose;
	parms.PeriodOnChoosenItem = PeriodOnChoosenItem;
	parms.StackCountOnChoosenItem = StackCountOnChoosenItem;
	parms.bHave = bHave;
	parms.ItemIdx = ItemIdx;
	parms.UntilTime = UntilTime;
	parms.StackCount = StackCount;
	this->ProcessEvent ( prfAckRandomBox_Use, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRandomBox_Use ( struct FBtrDouble ItemIdx )
{
	static UFunction* prfReqRandomBox_Use = 0;
	UBTTcpLink_Channel_eventrfReqRandomBox_Use_Parms parms;

	if ( !prfReqRandomBox_Use )
		prfReqRandomBox_Use = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRandomBox_Use" );

	parms.ItemIdx = ItemIdx;
	this->ProcessEvent ( prfReqRandomBox_Use, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangedRoomTitle_FromGM ( int Result, int RoomNumber, struct FString NewRoomTitle )
{
	static UFunction* prfAckChangedRoomTitle_FromGM = 0;
	UBTTcpLink_Channel_eventrfAckChangedRoomTitle_FromGM_Parms parms;

	if ( !prfAckChangedRoomTitle_FromGM )
		prfAckChangedRoomTitle_FromGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangedRoomTitle_FromGM" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.NewRoomTitle = NewRoomTitle;
	this->ProcessEvent ( prfAckChangedRoomTitle_FromGM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeRoomTitle_GM ( int Result, int RoomNumber, struct FString NewRoomTitle )
{
	static UFunction* prfAckChangeRoomTitle_GM = 0;
	UBTTcpLink_Channel_eventrfAckChangeRoomTitle_GM_Parms parms;

	if ( !prfAckChangeRoomTitle_GM )
		prfAckChangeRoomTitle_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeRoomTitle_GM" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.NewRoomTitle = NewRoomTitle;
	this->ProcessEvent ( prfAckChangeRoomTitle_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChangeRoomTitle_GM ( int RoomNumber, struct FString NewRoomTitle )
{
	static UFunction* prfReqChangeRoomTitle_GM = 0;
	UBTTcpLink_Channel_eventrfReqChangeRoomTitle_GM_Parms parms;

	if ( !prfReqChangeRoomTitle_GM )
		prfReqChangeRoomTitle_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChangeRoomTitle_GM" );

	parms.RoomNumber = RoomNumber;
	parms.NewRoomTitle = NewRoomTitle;
	this->ProcessEvent ( prfReqChangeRoomTitle_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGMLeaveRoom ( int Result, int RoomNumber, int UserID )
{
	static UFunction* prfAckGMLeaveRoom = 0;
	UBTTcpLink_Channel_eventrfAckGMLeaveRoom_Parms parms;

	if ( !prfAckGMLeaveRoom )
		prfAckGMLeaveRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGMLeaveRoom" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.UserID = UserID;
	this->ProcessEvent ( prfAckGMLeaveRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGMEnterRoom ( int Result, int RoomNumber, int UserID )
{
	static UFunction* prfAckGMEnterRoom = 0;
	UBTTcpLink_Channel_eventrfAckGMEnterRoom_Parms parms;

	if ( !prfAckGMEnterRoom )
		prfAckGMEnterRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGMEnterRoom" );

	parms.Result = Result;
	parms.RoomNumber = RoomNumber;
	parms.UserID = UserID;
	this->ProcessEvent ( prfAckGMEnterRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckQuestGetAvailableEventList ( int Result, struct FString ErrMsg, class TArray< int > QuestID )
{
	static UFunction* prfAckQuestGetAvailableEventList = 0;
	UBTTcpLink_Channel_eventrfAckQuestGetAvailableEventList_Parms parms;

	if ( !prfAckQuestGetAvailableEventList )
		prfAckQuestGetAvailableEventList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckQuestGetAvailableEventList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.QuestID = QuestID;
	this->ProcessEvent ( prfAckQuestGetAvailableEventList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqQuestGetAvailableEventList (  )
{
	static UFunction* prfReqQuestGetAvailableEventList = 0;
	UBTTcpLink_Channel_eventrfReqQuestGetAvailableEventList_Parms parms;

	if ( !prfReqQuestGetAvailableEventList )
		prfReqQuestGetAvailableEventList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqQuestGetAvailableEventList" );

	this->ProcessEvent ( prfReqQuestGetAvailableEventList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCharBlockInfo ( int Result, struct FBtrDouble ChatBlockStartTime, struct FBtrDouble ChatBlockEndTime, class TArray< struct FBtrDouble > BlockedItemIdx )
{
	static UFunction* prfAckCharBlockInfo = 0;
	UBTTcpLink_Channel_eventrfAckCharBlockInfo_Parms parms;

	if ( !prfAckCharBlockInfo )
		prfAckCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCharBlockInfo" );

	parms.Result = Result;
	parms.ChatBlockStartTime = ChatBlockStartTime;
	parms.ChatBlockEndTime = ChatBlockEndTime;
	parms.BlockedItemIdx = BlockedItemIdx;
	this->ProcessEvent ( prfAckCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCharBlockInfo (  )
{
	static UFunction* prfReqCharBlockInfo = 0;
	UBTTcpLink_Channel_eventrfReqCharBlockInfo_Parms parms;

	if ( !prfReqCharBlockInfo )
		prfReqCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCharBlockInfo" );

	this->ProcessEvent ( prfReqCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqIsPaidWebzenPCBang ( unsigned char IsPaid )
{
	static UFunction* prfReqIsPaidWebzenPCBang = 0;
	UBTTcpLink_Channel_eventrfReqIsPaidWebzenPCBang_Parms parms;

	if ( !prfReqIsPaidWebzenPCBang )
		prfReqIsPaidWebzenPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqIsPaidWebzenPCBang" );

	parms.IsPaid = IsPaid;
	this->ProcessEvent ( prfReqIsPaidWebzenPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_GetClanWaittingRoomInfo ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, struct FString WaitRoomName )
{
	static UFunction* prfAckClanMatch_GetClanWaittingRoomInfo = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_GetClanWaittingRoomInfo_Parms parms;

	if ( !prfAckClanMatch_GetClanWaittingRoomInfo )
		prfAckClanMatch_GetClanWaittingRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_GetClanWaittingRoomInfo" );

	parms.WaitRoomIndex = WaitRoomIndex;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	parms.WaitRoomName = WaitRoomName;
	this->ProcessEvent ( prfAckClanMatch_GetClanWaittingRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_GetClanWaittingRoomInfo (  )
{
	static UFunction* prfReqClanMatch_GetClanWaittingRoomInfo = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_GetClanWaittingRoomInfo_Parms parms;

	if ( !prfReqClanMatch_GetClanWaittingRoomInfo )
		prfReqClanMatch_GetClanWaittingRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_GetClanWaittingRoomInfo" );

	this->ProcessEvent ( prfReqClanMatch_GetClanWaittingRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckReturnBotID ( int Result )
{
	static UFunction* prfAckReturnBotID = 0;
	UBTTcpLink_Channel_eventrfAckReturnBotID_Parms parms;

	if ( !prfAckReturnBotID )
		prfAckReturnBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckReturnBotID" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckReturnBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqReturnBotID ( class TArray< int > BotID )
{
	static UFunction* prfReqReturnBotID = 0;
	UBTTcpLink_Channel_eventrfReqReturnBotID_Parms parms;

	if ( !prfReqReturnBotID )
		prfReqReturnBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqReturnBotID" );

	parms.BotID = BotID;
	this->ProcessEvent ( prfReqReturnBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID )
{
	static UFunction* prfAckGetBotID = 0;
	UBTTcpLink_Channel_eventrfAckGetBotID_Parms parms;

	if ( !prfAckGetBotID )
		prfAckGetBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetBotID" );

	parms.Result = Result;
	parms.RequestedAFCount = RequestedAFCount;
	parms.RequestedRSACount = RequestedRSACount;
	parms.AFBotID = AFBotID;
	parms.RSABotID = RSABotID;
	this->ProcessEvent ( prfAckGetBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetBotID ( unsigned char AFCount, unsigned char RSACount )
{
	static UFunction* prfReqGetBotID = 0;
	UBTTcpLink_Channel_eventrfReqGetBotID_Parms parms;

	if ( !prfReqGetBotID )
		prfReqGetBotID = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetBotID" );

	parms.AFCount = AFCount;
	parms.RSACount = RSACount;
	this->ProcessEvent ( prfReqGetBotID, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_ChangeRoomSetting ( int WaitRoomIndex, int Result, struct FString ErrMsg, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic )
{
	static UFunction* prfAckClanMatch_ChangeRoomSetting = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_ChangeRoomSetting_Parms parms;

	if ( !prfAckClanMatch_ChangeRoomSetting )
		prfAckClanMatch_ChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_ChangeRoomSetting" );

	parms.WaitRoomIndex = WaitRoomIndex;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	parms.IsPublic = IsPublic;
	this->ProcessEvent ( prfAckClanMatch_ChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_ChangeRoomSetting ( int WaitRoomIndex, class TArray< int > MapNumArray, int VersusMode, unsigned char IsPublic )
{
	static UFunction* prfReqClanMatch_ChangeRoomSetting = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_ChangeRoomSetting_Parms parms;

	if ( !prfReqClanMatch_ChangeRoomSetting )
		prfReqClanMatch_ChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_ChangeRoomSetting" );

	parms.WaitRoomIndex = WaitRoomIndex;
	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	parms.IsPublic = IsPublic;
	this->ProcessEvent ( prfReqClanMatch_ChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckParamCheckSum ( int Result )
{
	static UFunction* prfAckParamCheckSum = 0;
	UBTTcpLink_Channel_eventrfAckParamCheckSum_Parms parms;

	if ( !prfAckParamCheckSum )
		prfAckParamCheckSum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckParamCheckSum" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckParamCheckSum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqParamCheckSum ( struct FString key, struct FString Value )
{
	static UFunction* prfReqParamCheckSum = 0;
	UBTTcpLink_Channel_eventrfReqParamCheckSum_Parms parms;

	if ( !prfReqParamCheckSum )
		prfReqParamCheckSum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqParamCheckSum" );

	parms.key = key;
	parms.Value = Value;
	this->ProcessEvent ( prfReqParamCheckSum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckWebzenBillingUseStorageItem ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID, struct FBtrDouble ItemExtra )
{
	static UFunction* prfAckWebzenBillingUseStorageItem = 0;
	UBTTcpLink_Channel_eventrfAckWebzenBillingUseStorageItem_Parms parms;

	if ( !prfAckWebzenBillingUseStorageItem )
		prfAckWebzenBillingUseStorageItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingUseStorageItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.ItemID = ItemID;
	parms.ItemExtra = ItemExtra;
	this->ProcessEvent ( prfAckWebzenBillingUseStorageItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqWebzenBillingUseStorageItem ( int StorageSeq, int StorageItemSeq, unsigned char StorageItemType )
{
	static UFunction* prfReqWebzenBillingUseStorageItem = 0;
	UBTTcpLink_Channel_eventrfReqWebzenBillingUseStorageItem_Parms parms;

	if ( !prfReqWebzenBillingUseStorageItem )
		prfReqWebzenBillingUseStorageItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqWebzenBillingUseStorageItem" );

	parms.StorageSeq = StorageSeq;
	parms.StorageItemSeq = StorageItemSeq;
	parms.StorageItemType = StorageItemType;
	this->ProcessEvent ( prfReqWebzenBillingUseStorageItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckWebzenBillingStorageListEnd (  )
{
	static UFunction* prfAckWebzenBillingStorageListEnd = 0;
	UBTTcpLink_Channel_eventrfAckWebzenBillingStorageListEnd_Parms parms;

	if ( !prfAckWebzenBillingStorageListEnd )
		prfAckWebzenBillingStorageListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingStorageListEnd" );

	this->ProcessEvent ( prfAckWebzenBillingStorageListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckWebzenBillingStorageList ( class TArray< int > Seq, class TArray< int > ItemSeq, class TArray< int > GroupCode, class TArray< int > ShareFlag, class TArray< int > ProductSeq, class TArray< struct FString > CashName, class TArray< struct FBtrDouble > CashPoint, class TArray< struct FString > SendAccountID, class TArray< struct FString > SendMessage, class TArray< unsigned char > ItemType, class TArray< unsigned char > RelationType, class TArray< int > ProductType, class TArray< int > PriceSeq )
{
	static UFunction* prfAckWebzenBillingStorageList = 0;
	UBTTcpLink_Channel_eventrfAckWebzenBillingStorageList_Parms parms;

	if ( !prfAckWebzenBillingStorageList )
		prfAckWebzenBillingStorageList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingStorageList" );

	parms.Seq = Seq;
	parms.ItemSeq = ItemSeq;
	parms.GroupCode = GroupCode;
	parms.ShareFlag = ShareFlag;
	parms.ProductSeq = ProductSeq;
	parms.CashName = CashName;
	parms.CashPoint = CashPoint;
	parms.SendAccountID = SendAccountID;
	parms.SendMessage = SendMessage;
	parms.ItemType = ItemType;
	parms.RelationType = RelationType;
	parms.ProductType = ProductType;
	parms.PriceSeq = PriceSeq;
	this->ProcessEvent ( prfAckWebzenBillingStorageList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckWebzenBillingStorageListStart ( int Result, struct FString ErrMsg, int TotalCount, int TotalPage, int CurPage )
{
	static UFunction* prfAckWebzenBillingStorageListStart = 0;
	UBTTcpLink_Channel_eventrfAckWebzenBillingStorageListStart_Parms parms;

	if ( !prfAckWebzenBillingStorageListStart )
		prfAckWebzenBillingStorageListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckWebzenBillingStorageListStart" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.TotalCount = TotalCount;
	parms.TotalPage = TotalPage;
	parms.CurPage = CurPage;
	this->ProcessEvent ( prfAckWebzenBillingStorageListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqWebzenBillingStorageList ( int Page, int CountForPage, unsigned char Type )
{
	static UFunction* prfReqWebzenBillingStorageList = 0;
	UBTTcpLink_Channel_eventrfReqWebzenBillingStorageList_Parms parms;

	if ( !prfReqWebzenBillingStorageList )
		prfReqWebzenBillingStorageList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqWebzenBillingStorageList" );

	parms.Page = Page;
	parms.CountForPage = CountForPage;
	parms.Type = Type;
	this->ProcessEvent ( prfReqWebzenBillingStorageList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGiftItemByWebzenCash ( int Result, struct FString ErrMsg, int LeftProductCount )
{
	static UFunction* prfAckGiftItemByWebzenCash = 0;
	UBTTcpLink_Channel_eventrfAckGiftItemByWebzenCash_Parms parms;

	if ( !prfAckGiftItemByWebzenCash )
		prfAckGiftItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGiftItemByWebzenCash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.LeftProductCount = LeftProductCount;
	this->ProcessEvent ( prfAckGiftItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGiftItemByWebzenCash ( struct FString ReceiverCharName, struct FString Message, int PackageProductSeq, int PriceSeq, int ProductDisplaySeq )
{
	static UFunction* prfReqGiftItemByWebzenCash = 0;
	UBTTcpLink_Channel_eventrfReqGiftItemByWebzenCash_Parms parms;

	if ( !prfReqGiftItemByWebzenCash )
		prfReqGiftItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGiftItemByWebzenCash" );

	parms.ReceiverCharName = ReceiverCharName;
	parms.Message = Message;
	parms.PackageProductSeq = PackageProductSeq;
	parms.PriceSeq = PriceSeq;
	parms.ProductDisplaySeq = ProductDisplaySeq;
	this->ProcessEvent ( prfReqGiftItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGiftItemByWebzenCashGP20 ( struct FString ReceiverCharName, struct FString Message, int ProductNo, unsigned char Cointype )
{
	static UFunction* prfReqGiftItemByWebzenCashGP20 = 0;
	UBTTcpLink_Channel_eventrfReqGiftItemByWebzenCashGP20_Parms parms;

	if ( !prfReqGiftItemByWebzenCashGP20 )
		prfReqGiftItemByWebzenCashGP20 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGiftItemByWebzenCashGP20" );

	parms.ReceiverCharName = ReceiverCharName;
	parms.Message = Message;
	parms.ProductNo = ProductNo;
	parms.Cointype = Cointype;
	this->ProcessEvent ( prfReqGiftItemByWebzenCashGP20, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckBuyItemByWebzenCash ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckBuyItemByWebzenCash = 0;
	UBTTcpLink_Channel_eventrfAckBuyItemByWebzenCash_Parms parms;

	if ( !prfAckBuyItemByWebzenCash )
		prfAckBuyItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckBuyItemByWebzenCash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckBuyItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqBuyItemByWebzenCash ( int PackageProductSeq, int ProductDisplaySeq, int PriceSeq, class TArray< int > ItemIDs, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 )
{
	static UFunction* prfReqBuyItemByWebzenCash = 0;
	UBTTcpLink_Channel_eventrfReqBuyItemByWebzenCash_Parms parms;

	if ( !prfReqBuyItemByWebzenCash )
		prfReqBuyItemByWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqBuyItemByWebzenCash" );

	parms.PackageProductSeq = PackageProductSeq;
	parms.ProductDisplaySeq = ProductDisplaySeq;
	parms.PriceSeq = PriceSeq;
	parms.ItemIDs = ItemIDs;
	parms.ItemUniqueID = ItemUniqueID;
	parms.BuyOption1 = BuyOption1;
	parms.BuyOption2 = BuyOption2;
	this->ProcessEvent ( prfReqBuyItemByWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqBuyItemByWebzenCashGP20 ( int ProductNo, unsigned char Cointype, struct FBtrDouble ItemID )
{
	static UFunction* prfReqBuyItemByWebzenCashGP20 = 0;
	UBTTcpLink_Channel_eventrfReqBuyItemByWebzenCashGP20_Parms parms;

	if ( !prfReqBuyItemByWebzenCashGP20 )
		prfReqBuyItemByWebzenCashGP20 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqBuyItemByWebzenCashGP20" );

	parms.ProductNo = ProductNo;
	parms.Cointype = Cointype;
	parms.ItemID = ItemID;
	this->ProcessEvent ( prfReqBuyItemByWebzenCashGP20, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckWebzenShopScriptVersion ( int Year, int YearId, int SalesZoneCode )
{
	static UFunction* prfAckWebzenShopScriptVersion = 0;
	UBTTcpLink_Channel_eventrfAckWebzenShopScriptVersion_Parms parms;

	if ( !prfAckWebzenShopScriptVersion )
		prfAckWebzenShopScriptVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckWebzenShopScriptVersion" );

	parms.Year = Year;
	parms.YearId = YearId;
	parms.SalesZoneCode = SalesZoneCode;
	this->ProcessEvent ( prfAckWebzenShopScriptVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqWebzenShopScriptVersion (  )
{
	static UFunction* prfReqWebzenShopScriptVersion = 0;
	UBTTcpLink_Channel_eventrfReqWebzenShopScriptVersion_Parms parms;

	if ( !prfReqWebzenShopScriptVersion )
		prfReqWebzenShopScriptVersion = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqWebzenShopScriptVersion" );

	this->ProcessEvent ( prfReqWebzenShopScriptVersion, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckWebzenCash ( int Result, struct FString ErrMsg, struct FBtrDouble PCoinCash, struct FBtrDouble CCoinCash )
{
	static UFunction* prfAckWebzenCash = 0;
	UBTTcpLink_Channel_eventrfAckWebzenCash_Parms parms;

	if ( !prfAckWebzenCash )
		prfAckWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckWebzenCash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PCoinCash = PCoinCash;
	parms.CCoinCash = CCoinCash;
	this->ProcessEvent ( prfAckWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqWebzenCash (  )
{
	static UFunction* prfReqWebzenCash = 0;
	UBTTcpLink_Channel_eventrfReqWebzenCash_Parms parms;

	if ( !prfReqWebzenCash )
		prfReqWebzenCash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqWebzenCash" );

	this->ProcessEvent ( prfReqWebzenCash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName )
{
	static UFunction* prfAckRegisteredPCBangInfo = 0;
	UBTTcpLink_Channel_eventrfAckRegisteredPCBangInfo_Parms parms;

	if ( !prfAckRegisteredPCBangInfo )
		prfAckRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRegisteredPCBangInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsRegisteredPCBang = IsRegisteredPCBang;
	parms.IsMainPCBang = IsMainPCBang;
	parms.PCBangName = PCBangName;
	this->ProcessEvent ( prfAckRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRegisteredPCBangInfo (  )
{
	static UFunction* prfReqRegisteredPCBangInfo = 0;
	UBTTcpLink_Channel_eventrfReqRegisteredPCBangInfo_Parms parms;

	if ( !prfReqRegisteredPCBangInfo )
		prfReqRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRegisteredPCBangInfo" );

	this->ProcessEvent ( prfReqRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRegisterMainPCBang ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckRegisterMainPCBang = 0;
	UBTTcpLink_Channel_eventrfAckRegisterMainPCBang_Parms parms;

	if ( !prfAckRegisterMainPCBang )
		prfAckRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRegisterMainPCBang" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRegisterMainPCBang (  )
{
	static UFunction* prfReqRegisterMainPCBang = 0;
	UBTTcpLink_Channel_eventrfReqRegisterMainPCBang_Parms parms;

	if ( !prfReqRegisterMainPCBang )
		prfReqRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRegisterMainPCBang" );

	this->ProcessEvent ( prfReqRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPCBangUserListEnd (  )
{
	static UFunction* prfAckPCBangUserListEnd = 0;
	UBTTcpLink_Channel_eventrfAckPCBangUserListEnd_Parms parms;

	if ( !prfAckPCBangUserListEnd )
		prfAckPCBangUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPCBangUserListEnd" );

	this->ProcessEvent ( prfAckPCBangUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, class TArray< unsigned char > IsCombat, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* prfAckPCBangUserList = 0;
	UBTTcpLink_Channel_eventrfAckPCBangUserList_Parms parms;

	if ( !prfAckPCBangUserList )
		prfAckPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPCBangUserList" );

	parms.FriendName = FriendName;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.Level = Level;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookForClan = IsLookForClan;
	parms.IsCombat = IsCombat;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPCBangUserListStart ( int Result, int TotalCount )
{
	static UFunction* prfAckPCBangUserListStart = 0;
	UBTTcpLink_Channel_eventrfAckPCBangUserListStart_Parms parms;

	if ( !prfAckPCBangUserListStart )
		prfAckPCBangUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPCBangUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckPCBangUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPCBangUserList (  )
{
	static UFunction* prfReqPCBangUserList = 0;
	UBTTcpLink_Channel_eventrfReqPCBangUserList_Parms parms;

	if ( !prfReqPCBangUserList )
		prfReqPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPCBangUserList" );

	this->ProcessEvent ( prfReqPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDailyQuestNewAvailable ( class TArray< int > ExpiredQuestID, class TArray< int > NewQuestID )
{
	static UFunction* prfReqDailyQuestNewAvailable = 0;
	UBTTcpLink_Channel_eventrfReqDailyQuestNewAvailable_Parms parms;

	if ( !prfReqDailyQuestNewAvailable )
		prfReqDailyQuestNewAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDailyQuestNewAvailable" );

	parms.ExpiredQuestID = ExpiredQuestID;
	parms.NewQuestID = NewQuestID;
	this->ProcessEvent ( prfReqDailyQuestNewAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqQuestNewAvailable ( class TArray< int > AchivedQuestID, class TArray< int > NewQuestID, class TArray< unsigned char > IsDailyQuest, class TArray< int > ExpiredQuest )
{
	static UFunction* prfReqQuestNewAvailable = 0;
	UBTTcpLink_Channel_eventrfReqQuestNewAvailable_Parms parms;

	if ( !prfReqQuestNewAvailable )
		prfReqQuestNewAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqQuestNewAvailable" );

	parms.AchivedQuestID = AchivedQuestID;
	parms.NewQuestID = NewQuestID;
	parms.IsDailyQuest = IsDailyQuest;
	parms.ExpiredQuest = ExpiredQuest;
	this->ProcessEvent ( prfReqQuestNewAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckQuestUpdate ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckQuestUpdate = 0;
	UBTTcpLink_Channel_eventrfAckQuestUpdate_Parms parms;

	if ( !prfAckQuestUpdate )
		prfAckQuestUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckQuestUpdate" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckQuestUpdate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqQuestUpdate ( int UniqueID, int GameRoomNum, class TArray< int > QuestID, class TArray< int > CountPrograss )
{
	static UFunction* prfReqQuestUpdate = 0;
	UBTTcpLink_Channel_eventrfReqQuestUpdate_Parms parms;

	if ( !prfReqQuestUpdate )
		prfReqQuestUpdate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqQuestUpdate" );

	parms.UniqueID = UniqueID;
	parms.GameRoomNum = GameRoomNum;
	parms.QuestID = QuestID;
	parms.CountPrograss = CountPrograss;
	this->ProcessEvent ( prfReqQuestUpdate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckQuestListEnd (  )
{
	static UFunction* prfAckQuestListEnd = 0;
	UBTTcpLink_Channel_eventrfAckQuestListEnd_Parms parms;

	if ( !prfAckQuestListEnd )
		prfAckQuestListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckQuestListEnd" );

	this->ProcessEvent ( prfAckQuestListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckQuestList ( class TArray< int > QuestID, class TArray< int > CountPrograss, class TArray< unsigned char > IsDailyQuest )
{
	static UFunction* prfAckQuestList = 0;
	UBTTcpLink_Channel_eventrfAckQuestList_Parms parms;

	if ( !prfAckQuestList )
		prfAckQuestList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckQuestList" );

	parms.QuestID = QuestID;
	parms.CountPrograss = CountPrograss;
	parms.IsDailyQuest = IsDailyQuest;
	this->ProcessEvent ( prfAckQuestList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckQuestListStart ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckQuestListStart = 0;
	UBTTcpLink_Channel_eventrfAckQuestListStart_Parms parms;

	if ( !prfAckQuestListStart )
		prfAckQuestListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckQuestListStart" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckQuestListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqQuestList (  )
{
	static UFunction* prfReqQuestList = 0;
	UBTTcpLink_Channel_eventrfReqQuestList_Parms parms;

	if ( !prfReqQuestList )
		prfReqQuestList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqQuestList" );

	this->ProcessEvent ( prfReqQuestList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckPermanentRoomInfo ( int Result, int ClanIdx, unsigned char FixedGameMode, unsigned char FixedMaxUserCnt )
{
	static UFunction* prfAckPermanentRoomInfo = 0;
	UBTTcpLink_Channel_eventrfAckPermanentRoomInfo_Parms parms;

	if ( !prfAckPermanentRoomInfo )
		prfAckPermanentRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckPermanentRoomInfo" );

	parms.Result = Result;
	parms.ClanIdx = ClanIdx;
	parms.FixedGameMode = FixedGameMode;
	parms.FixedMaxUserCnt = FixedMaxUserCnt;
	this->ProcessEvent ( prfAckPermanentRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqPermanentRoomInfo ( int RoomNum )
{
	static UFunction* prfReqPermanentRoomInfo = 0;
	UBTTcpLink_Channel_eventrfReqPermanentRoomInfo_Parms parms;

	if ( !prfReqPermanentRoomInfo )
		prfReqPermanentRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqPermanentRoomInfo" );

	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfReqPermanentRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_FoundMatch (  )
{
	static UFunction* prfAckClanMatch_FoundMatch = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_FoundMatch_Parms parms;

	if ( !prfAckClanMatch_FoundMatch )
		prfAckClanMatch_FoundMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_FoundMatch" );

	this->ProcessEvent ( prfAckClanMatch_FoundMatch, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_FoundMatch ( int ChannelID, int RoomNumber )
{
	static UFunction* prfReqClanMatch_FoundMatch = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_FoundMatch_Parms parms;

	if ( !prfReqClanMatch_FoundMatch )
		prfReqClanMatch_FoundMatch = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_FoundMatch" );

	parms.ChannelID = ChannelID;
	parms.RoomNumber = RoomNumber;
	this->ProcessEvent ( prfReqClanMatch_FoundMatch, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_NotifyStartSearching ( int ShouldWaitMore )
{
	static UFunction* prfAckClanMatch_NotifyStartSearching = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_NotifyStartSearching_Parms parms;

	if ( !prfAckClanMatch_NotifyStartSearching )
		prfAckClanMatch_NotifyStartSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_NotifyStartSearching" );

	parms.ShouldWaitMore = ShouldWaitMore;
	this->ProcessEvent ( prfAckClanMatch_NotifyStartSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_StartSearching ( int Result, struct FString ErrMsg, int ShouldWaitMore )
{
	static UFunction* prfAckClanMatch_StartSearching = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_StartSearching_Parms parms;

	if ( !prfAckClanMatch_StartSearching )
		prfAckClanMatch_StartSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StartSearching" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ShouldWaitMore = ShouldWaitMore;
	this->ProcessEvent ( prfAckClanMatch_StartSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_StartSearching ( int RequestCount )
{
	static UFunction* prfReqClanMatch_StartSearching = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_StartSearching_Parms parms;

	if ( !prfReqClanMatch_StartSearching )
		prfReqClanMatch_StartSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_StartSearching" );

	parms.RequestCount = RequestCount;
	this->ProcessEvent ( prfReqClanMatch_StartSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckLimitedListInChannel ( int Result, class TArray< int > LimitedMapID, class TArray< int > LimitedModeID )
{
	static UFunction* prfAckLimitedListInChannel = 0;
	UBTTcpLink_Channel_eventrfAckLimitedListInChannel_Parms parms;

	if ( !prfAckLimitedListInChannel )
		prfAckLimitedListInChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckLimitedListInChannel" );

	parms.Result = Result;
	parms.LimitedMapID = LimitedMapID;
	parms.LimitedModeID = LimitedModeID;
	this->ProcessEvent ( prfAckLimitedListInChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLimitedListInChannel (  )
{
	static UFunction* prfReqLimitedListInChannel = 0;
	UBTTcpLink_Channel_eventrfReqLimitedListInChannel_Parms parms;

	if ( !prfReqLimitedListInChannel )
		prfReqLimitedListInChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLimitedListInChannel" );

	this->ProcessEvent ( prfReqLimitedListInChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRecvInviteGameRoomResult ( int Result )
{
	static UFunction* prfAckRecvInviteGameRoomResult = 0;
	UBTTcpLink_Channel_eventrfAckRecvInviteGameRoomResult_Parms parms;

	if ( !prfAckRecvInviteGameRoomResult )
		prfAckRecvInviteGameRoomResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRecvInviteGameRoomResult" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckRecvInviteGameRoomResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRecvInviteGameRoom ( struct FString RoomUniqueID, int RoomNumber, unsigned char Answer, struct FString InviteCharName )
{
	static UFunction* prfAckRecvInviteGameRoom = 0;
	UBTTcpLink_Channel_eventrfAckRecvInviteGameRoom_Parms parms;

	if ( !prfAckRecvInviteGameRoom )
		prfAckRecvInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRecvInviteGameRoom" );

	parms.RoomUniqueID = RoomUniqueID;
	parms.RoomNumber = RoomNumber;
	parms.Answer = Answer;
	parms.InviteCharName = InviteCharName;
	this->ProcessEvent ( prfAckRecvInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvInviteGameRoom ( struct FString InviteUserServerName, int InviteUserServerID, int InviteUserChannelNumber, struct FString RoomUniqueID, int RoomNumber, struct FString RoomName, unsigned char RoomState, struct FString MapName, struct FString OwnerName, unsigned char GameMode, unsigned char WeaponLimit, unsigned char IsTeamBalance, struct FString Password, struct FString InviteCharName )
{
	static UFunction* prfReqRecvInviteGameRoom = 0;
	UBTTcpLink_Channel_eventrfReqRecvInviteGameRoom_Parms parms;

	if ( !prfReqRecvInviteGameRoom )
		prfReqRecvInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvInviteGameRoom" );

	parms.InviteUserServerName = InviteUserServerName;
	parms.InviteUserServerID = InviteUserServerID;
	parms.InviteUserChannelNumber = InviteUserChannelNumber;
	parms.RoomUniqueID = RoomUniqueID;
	parms.RoomNumber = RoomNumber;
	parms.RoomName = RoomName;
	parms.RoomState = RoomState;
	parms.MapName = MapName;
	parms.OwnerName = OwnerName;
	parms.GameMode = GameMode;
	parms.WeaponLimit = WeaponLimit;
	parms.IsTeamBalance = IsTeamBalance;
	parms.Password = Password;
	parms.InviteCharName = InviteCharName;
	this->ProcessEvent ( prfReqRecvInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckInviteGameRoom ( int Result, unsigned char Answer, struct FString GuestCharName )
{
	static UFunction* prfAckInviteGameRoom = 0;
	UBTTcpLink_Channel_eventrfAckInviteGameRoom_Parms parms;

	if ( !prfAckInviteGameRoom )
		prfAckInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckInviteGameRoom" );

	parms.Result = Result;
	parms.Answer = Answer;
	parms.GuestCharName = GuestCharName;
	this->ProcessEvent ( prfAckInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqInviteGameRoom ( struct FString GuestCharName )
{
	static UFunction* prfReqInviteGameRoom = 0;
	UBTTcpLink_Channel_eventrfReqInviteGameRoom_Parms parms;

	if ( !prfReqInviteGameRoom )
		prfReqInviteGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqInviteGameRoom" );

	parms.GuestCharName = GuestCharName;
	this->ProcessEvent ( prfReqInviteGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_StopSearching (  )
{
	static UFunction* prfAckClanMatch_StopSearching = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_StopSearching_Parms parms;

	if ( !prfAckClanMatch_StopSearching )
		prfAckClanMatch_StopSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StopSearching" );

	this->ProcessEvent ( prfAckClanMatch_StopSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_StopSearching (  )
{
	static UFunction* prfReqClanMatch_StopSearching = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_StopSearching_Parms parms;

	if ( !prfReqClanMatch_StopSearching )
		prfReqClanMatch_StopSearching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_StopSearching" );

	this->ProcessEvent ( prfReqClanMatch_StopSearching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_ChangeLeader ( int Result, struct FString ErrMsg, int NewLeader, struct FString NewLeaderName )
{
	static UFunction* prfAckClanMatch_ChangeLeader = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_ChangeLeader_Parms parms;

	if ( !prfAckClanMatch_ChangeLeader )
		prfAckClanMatch_ChangeLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_ChangeLeader" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.NewLeader = NewLeader;
	parms.NewLeaderName = NewLeaderName;
	this->ProcessEvent ( prfAckClanMatch_ChangeLeader, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_ChangeLeader ( int WaitRoomIdx, int NewLeaderID, struct FString NewLeaderName )
{
	static UFunction* prfReqClanMatch_ChangeLeader = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_ChangeLeader_Parms parms;

	if ( !prfReqClanMatch_ChangeLeader )
		prfReqClanMatch_ChangeLeader = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_ChangeLeader" );

	parms.WaitRoomIdx = WaitRoomIdx;
	parms.NewLeaderID = NewLeaderID;
	parms.NewLeaderName = NewLeaderName;
	this->ProcessEvent ( prfReqClanMatch_ChangeLeader, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_WaittingTeamList ( int TtotlCount, class TArray< int > Grade, class TArray< int > Map, class TArray< int > Versus )
{
	static UFunction* prfAckClanMatch_WaittingTeamList = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_WaittingTeamList_Parms parms;

	if ( !prfAckClanMatch_WaittingTeamList )
		prfAckClanMatch_WaittingTeamList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_WaittingTeamList" );

	parms.TtotlCount = TtotlCount;
	parms.Grade = Grade;
	parms.Map = Map;
	parms.Versus = Versus;
	this->ProcessEvent ( prfAckClanMatch_WaittingTeamList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_WaittingTeamList ( int StartIndex, int ReturnCount )
{
	static UFunction* prfReqClanMatch_WaittingTeamList = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_WaittingTeamList_Parms parms;

	if ( !prfReqClanMatch_WaittingTeamList )
		prfReqClanMatch_WaittingTeamList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_WaittingTeamList" );

	parms.StartIndex = StartIndex;
	parms.ReturnCount = ReturnCount;
	this->ProcessEvent ( prfReqClanMatch_WaittingTeamList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_Chat ( int Result, struct FString ErrMsg, struct FString CharName, struct FString Msg )
{
	static UFunction* prfAckClanMatch_Chat = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_Chat_Parms parms;

	if ( !prfAckClanMatch_Chat )
		prfAckClanMatch_Chat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_Chat" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.CharName = CharName;
	parms.Msg = Msg;
	this->ProcessEvent ( prfAckClanMatch_Chat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_Chat ( struct FString Msg )
{
	static UFunction* prfReqClanMatch_Chat = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_Chat_Parms parms;

	if ( !prfReqClanMatch_Chat )
		prfReqClanMatch_Chat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_Chat" );

	parms.Msg = Msg;
	this->ProcessEvent ( prfReqClanMatch_Chat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_LeaveNotify ( struct FString CharName )
{
	static UFunction* prfAckClanMatch_LeaveNotify = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_LeaveNotify_Parms parms;

	if ( !prfAckClanMatch_LeaveNotify )
		prfAckClanMatch_LeaveNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_LeaveNotify" );

	parms.CharName = CharName;
	this->ProcessEvent ( prfAckClanMatch_LeaveNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_Leave ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckClanMatch_Leave = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_Leave_Parms parms;

	if ( !prfAckClanMatch_Leave )
		prfAckClanMatch_Leave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_Leave" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckClanMatch_Leave, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_Leave ( int WaittingID )
{
	static UFunction* prfReqClanMatch_Leave = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_Leave_Parms parms;

	if ( !prfReqClanMatch_Leave )
		prfReqClanMatch_Leave = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_Leave" );

	parms.WaittingID = WaittingID;
	this->ProcessEvent ( prfReqClanMatch_Leave, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_MemberList ( class TArray< unsigned char > IsLeader, class TArray< int > ClanMarkPA, class TArray< int > ClanMarkBG, class TArray< int > ClanMarkBL, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< struct FString > ClanName, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* prfAckClanMatch_MemberList = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_MemberList_Parms parms;

	if ( !prfAckClanMatch_MemberList )
		prfAckClanMatch_MemberList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_MemberList" );

	parms.IsLeader = IsLeader;
	parms.ClanMarkPA = ClanMarkPA;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.ClanName = ClanName;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckClanMatch_MemberList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_MemberList (  )
{
	static UFunction* prfReqClanMatch_MemberList = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_MemberList_Parms parms;

	if ( !prfReqClanMatch_MemberList )
		prfReqClanMatch_MemberList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_MemberList" );

	this->ProcessEvent ( prfReqClanMatch_MemberList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_JoinNotify ( unsigned char IsLeader, int ClanMarkPA, int ClanMarkBG, int ClanMarkBL, int Level, struct FString CharName, int ClanGrade, int ClanWin, int ClanLose, struct FString ClanName, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* prfAckClanMatch_JoinNotify = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_JoinNotify_Parms parms;

	if ( !prfAckClanMatch_JoinNotify )
		prfAckClanMatch_JoinNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_JoinNotify" );

	parms.IsLeader = IsLeader;
	parms.ClanMarkPA = ClanMarkPA;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.ClanName = ClanName;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckClanMatch_JoinNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_Join ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckClanMatch_Join = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_Join_Parms parms;

	if ( !prfAckClanMatch_Join )
		prfAckClanMatch_Join = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_Join" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckClanMatch_Join, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_Join ( int WaittingID )
{
	static UFunction* prfReqClanMatch_Join = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_Join_Parms parms;

	if ( !prfReqClanMatch_Join )
		prfReqClanMatch_Join = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_Join" );

	parms.WaittingID = WaittingID;
	this->ProcessEvent ( prfReqClanMatch_Join, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_InviteCrewResult ( struct FString Invitee, int Result )
{
	static UFunction* prfReqClanMatch_InviteCrewResult = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_InviteCrewResult_Parms parms;

	if ( !prfReqClanMatch_InviteCrewResult )
		prfReqClanMatch_InviteCrewResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_InviteCrewResult" );

	parms.Invitee = Invitee;
	parms.Result = Result;
	this->ProcessEvent ( prfReqClanMatch_InviteCrewResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_RecvInviteCrew ( int Result, struct FString Inviter )
{
	static UFunction* prfAckClanMatch_RecvInviteCrew = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_RecvInviteCrew_Parms parms;

	if ( !prfAckClanMatch_RecvInviteCrew )
		prfAckClanMatch_RecvInviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_RecvInviteCrew" );

	parms.Result = Result;
	parms.Inviter = Inviter;
	this->ProcessEvent ( prfAckClanMatch_RecvInviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_RecvInviteCrew ( struct FString Inviter, struct FString ServerIP, int Port, int WaittingID, struct FString Msg, int MapNum, int InviteUserChannelNum, struct FString LeaderName, struct FString RoomName )
{
	static UFunction* prfReqClanMatch_RecvInviteCrew = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_RecvInviteCrew_Parms parms;

	if ( !prfReqClanMatch_RecvInviteCrew )
		prfReqClanMatch_RecvInviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_RecvInviteCrew" );

	parms.Inviter = Inviter;
	parms.ServerIP = ServerIP;
	parms.Port = Port;
	parms.WaittingID = WaittingID;
	parms.Msg = Msg;
	parms.MapNum = MapNum;
	parms.InviteUserChannelNum = InviteUserChannelNum;
	parms.LeaderName = LeaderName;
	parms.RoomName = RoomName;
	this->ProcessEvent ( prfReqClanMatch_RecvInviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_InviteCrew ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckClanMatch_InviteCrew = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_InviteCrew_Parms parms;

	if ( !prfAckClanMatch_InviteCrew )
		prfAckClanMatch_InviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_InviteCrew" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckClanMatch_InviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_InviteCrew ( struct FString Invitee )
{
	static UFunction* prfReqClanMatch_InviteCrew = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_InviteCrew_Parms parms;

	if ( !prfReqClanMatch_InviteCrew )
		prfReqClanMatch_InviteCrew = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_InviteCrew" );

	parms.Invitee = Invitee;
	this->ProcessEvent ( prfReqClanMatch_InviteCrew, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_NotifiyStartCombat ( class TArray< int > MapNumArray, int VersusMode )
{
	static UFunction* prfAckClanMatch_NotifiyStartCombat = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_NotifiyStartCombat_Parms parms;

	if ( !prfAckClanMatch_NotifiyStartCombat )
		prfAckClanMatch_NotifiyStartCombat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_NotifiyStartCombat" );

	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	this->ProcessEvent ( prfAckClanMatch_NotifiyStartCombat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_StartCombat ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckClanMatch_StartCombat = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_StartCombat_Parms parms;

	if ( !prfAckClanMatch_StartCombat )
		prfAckClanMatch_StartCombat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_StartCombat" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckClanMatch_StartCombat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_StartCombat ( class TArray< int > MapNumArray, int VersusMode )
{
	static UFunction* prfReqClanMatch_StartCombat = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_StartCombat_Parms parms;

	if ( !prfReqClanMatch_StartCombat )
		prfReqClanMatch_StartCombat = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_StartCombat" );

	parms.MapNumArray = MapNumArray;
	parms.VersusMode = VersusMode;
	this->ProcessEvent ( prfReqClanMatch_StartCombat, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanMatch_GetReady ( int Result, struct FString ErrMsg, int RoomIndex )
{
	static UFunction* prfAckClanMatch_GetReady = 0;
	UBTTcpLink_Channel_eventrfAckClanMatch_GetReady_Parms parms;

	if ( !prfAckClanMatch_GetReady )
		prfAckClanMatch_GetReady = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanMatch_GetReady" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RoomIndex = RoomIndex;
	this->ProcessEvent ( prfAckClanMatch_GetReady, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanMatch_GetReady (  )
{
	static UFunction* prfReqClanMatch_GetReady = 0;
	UBTTcpLink_Channel_eventrfReqClanMatch_GetReady_Parms parms;

	if ( !prfReqClanMatch_GetReady )
		prfReqClanMatch_GetReady = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanMatch_GetReady" );

	this->ProcessEvent ( prfReqClanMatch_GetReady, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAutoChangedTeamUserList ( class TArray< int > UserID, class TArray< int > TeamNum )
{
	static UFunction* prfAckAutoChangedTeamUserList = 0;
	UBTTcpLink_Channel_eventrfAckAutoChangedTeamUserList_Parms parms;

	if ( !prfAckAutoChangedTeamUserList )
		prfAckAutoChangedTeamUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAutoChangedTeamUserList" );

	parms.UserID = UserID;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( prfAckAutoChangedTeamUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetItemFromItemBox ( int Result, struct FString ErrMsg, int ItemIDChoose, int PartIDChoose, struct FBtrDouble BoxItemIdx, int BxoItemCount, unsigned char bHave, struct FBtrDouble ItemIdx, struct FBtrDouble UntilTime, int StackCount )
{
	static UFunction* prfAckGetItemFromItemBox = 0;
	UBTTcpLink_Channel_eventrfAckGetItemFromItemBox_Parms parms;

	if ( !prfAckGetItemFromItemBox )
		prfAckGetItemFromItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetItemFromItemBox" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIDChoose = ItemIDChoose;
	parms.PartIDChoose = PartIDChoose;
	parms.BoxItemIdx = BoxItemIdx;
	parms.BxoItemCount = BxoItemCount;
	parms.bHave = bHave;
	parms.ItemIdx = ItemIdx;
	parms.UntilTime = UntilTime;
	parms.StackCount = StackCount;
	this->ProcessEvent ( prfAckGetItemFromItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetItemFromItemBox ( struct FBtrDouble ItemUniqueID, int ItemID, int ItemIDChoose, int PartIDChoose )
{
	static UFunction* prfReqGetItemFromItemBox = 0;
	UBTTcpLink_Channel_eventrfReqGetItemFromItemBox_Parms parms;

	if ( !prfReqGetItemFromItemBox )
		prfReqGetItemFromItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetItemFromItemBox" );

	parms.ItemUniqueID = ItemUniqueID;
	parms.ItemID = ItemID;
	parms.ItemIDChoose = ItemIDChoose;
	parms.PartIDChoose = PartIDChoose;
	this->ProcessEvent ( prfReqGetItemFromItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckItemListInItemBox ( int Result, struct FString ErrMsg, struct FBtrDouble ItemUniqueID, int BoxItemID, class TArray< int > ItemID, class TArray< int > PartID )
{
	static UFunction* prfAckItemListInItemBox = 0;
	UBTTcpLink_Channel_eventrfAckItemListInItemBox_Parms parms;

	if ( !prfAckItemListInItemBox )
		prfAckItemListInItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckItemListInItemBox" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemUniqueID = ItemUniqueID;
	parms.BoxItemID = BoxItemID;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	this->ProcessEvent ( prfAckItemListInItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqItemListInItemBox ( struct FBtrDouble ItemUniqueID, int BoxItemID )
{
	static UFunction* prfReqItemListInItemBox = 0;
	UBTTcpLink_Channel_eventrfReqItemListInItemBox_Parms parms;

	if ( !prfReqItemListInItemBox )
		prfReqItemListInItemBox = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqItemListInItemBox" );

	parms.ItemUniqueID = ItemUniqueID;
	parms.BoxItemID = BoxItemID;
	this->ProcessEvent ( prfReqItemListInItemBox, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvForceFailedClientLoading ( int ErrCode )
{
	static UFunction* prfReqRecvForceFailedClientLoading = 0;
	UBTTcpLink_Channel_eventrfReqRecvForceFailedClientLoading_Parms parms;

	if ( !prfReqRecvForceFailedClientLoading )
		prfReqRecvForceFailedClientLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvForceFailedClientLoading" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( prfReqRecvForceFailedClientLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckForceFailedClientLoading ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckForceFailedClientLoading = 0;
	UBTTcpLink_Channel_eventrfAckForceFailedClientLoading_Parms parms;

	if ( !prfAckForceFailedClientLoading )
		prfAckForceFailedClientLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckForceFailedClientLoading" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckForceFailedClientLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqForceFailedClientLoading ( int FailedUserID, int ErrCode )
{
	static UFunction* prfReqForceFailedClientLoading = 0;
	UBTTcpLink_Channel_eventrfReqForceFailedClientLoading_Parms parms;

	if ( !prfReqForceFailedClientLoading )
		prfReqForceFailedClientLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqForceFailedClientLoading" );

	parms.FailedUserID = FailedUserID;
	parms.ErrCode = ErrCode;
	this->ProcessEvent ( prfReqForceFailedClientLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckStartHolePunching ( int Result, struct FString ErrMsg, int GameType, int ReqStartUserID )
{
	static UFunction* prfAckStartHolePunching = 0;
	UBTTcpLink_Channel_eventrfAckStartHolePunching_Parms parms;

	if ( !prfAckStartHolePunching )
		prfAckStartHolePunching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckStartHolePunching" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.GameType = GameType;
	parms.ReqStartUserID = ReqStartUserID;
	this->ProcessEvent ( prfAckStartHolePunching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqStartHolePunching ( int GameType, int ReqStartUserID )
{
	static UFunction* prfReqStartHolePunching = 0;
	UBTTcpLink_Channel_eventrfReqStartHolePunching_Parms parms;

	if ( !prfReqStartHolePunching )
		prfReqStartHolePunching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqStartHolePunching" );

	parms.GameType = GameType;
	parms.ReqStartUserID = ReqStartUserID;
	this->ProcessEvent ( prfReqStartHolePunching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyMyCharInfoToRoomUser ( int Result, struct FString ErrMsg, int UID, struct FString UserName, int Grade, int TeamNum, unsigned char Statue, unsigned char IsHost, struct FString UserIP, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, unsigned char IsLookFor )
{
	static UFunction* prfAckNotifyMyCharInfoToRoomUser = 0;
	UBTTcpLink_Channel_eventrfAckNotifyMyCharInfoToRoomUser_Parms parms;

	if ( !prfAckNotifyMyCharInfoToRoomUser )
		prfAckNotifyMyCharInfoToRoomUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyMyCharInfoToRoomUser" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UID = UID;
	parms.UserName = UserName;
	parms.Grade = Grade;
	parms.TeamNum = TeamNum;
	parms.Statue = Statue;
	parms.IsHost = IsHost;
	parms.UserIP = UserIP;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.IsLookFor = IsLookFor;
	this->ProcessEvent ( prfAckNotifyMyCharInfoToRoomUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyMyCharInfoToRoomUser (  )
{
	static UFunction* prfReqNotifyMyCharInfoToRoomUser = 0;
	UBTTcpLink_Channel_eventrfReqNotifyMyCharInfoToRoomUser_Parms parms;

	if ( !prfReqNotifyMyCharInfoToRoomUser )
		prfReqNotifyMyCharInfoToRoomUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyMyCharInfoToRoomUser" );

	this->ProcessEvent ( prfReqNotifyMyCharInfoToRoomUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyDurabilityZeroItem ( int Result, struct FString ErrMsg, int UserID, class TArray< struct FBtrDouble > ItemUniqueIDs, class TArray< int > ItemIDs, class TArray< int > ItemPartIDs, class TArray< unsigned char > ItemSlotPos )
{
	static UFunction* prfReqNotifyDurabilityZeroItem = 0;
	UBTTcpLink_Channel_eventrfReqNotifyDurabilityZeroItem_Parms parms;

	if ( !prfReqNotifyDurabilityZeroItem )
		prfReqNotifyDurabilityZeroItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyDurabilityZeroItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.ItemUniqueIDs = ItemUniqueIDs;
	parms.ItemIDs = ItemIDs;
	parms.ItemPartIDs = ItemPartIDs;
	parms.ItemSlotPos = ItemSlotPos;
	this->ProcessEvent ( prfReqNotifyDurabilityZeroItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChatWispherMyCommunity ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckChatWispherMyCommunity = 0;
	UBTTcpLink_Channel_eventrfAckChatWispherMyCommunity_Parms parms;

	if ( !prfAckChatWispherMyCommunity )
		prfAckChatWispherMyCommunity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChatWispherMyCommunity" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckChatWispherMyCommunity, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChatWispherMyCommunity ( struct FString SourceCharName, struct FString SenderName, struct FString Msg )
{
	static UFunction* prfReqChatWispherMyCommunity = 0;
	UBTTcpLink_Channel_eventrfReqChatWispherMyCommunity_Parms parms;

	if ( !prfReqChatWispherMyCommunity )
		prfReqChatWispherMyCommunity = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChatWispherMyCommunity" );

	parms.SourceCharName = SourceCharName;
	parms.SenderName = SenderName;
	parms.Msg = Msg;
	this->ProcessEvent ( prfReqChatWispherMyCommunity, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyDisconnectHostInLoading ( int Result, struct FString ErrMsg, int HostID )
{
	static UFunction* prfReqNotifyDisconnectHostInLoading = 0;
	UBTTcpLink_Channel_eventrfReqNotifyDisconnectHostInLoading_Parms parms;

	if ( !prfReqNotifyDisconnectHostInLoading )
		prfReqNotifyDisconnectHostInLoading = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyDisconnectHostInLoading" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.HostID = HostID;
	this->ProcessEvent ( prfReqNotifyDisconnectHostInLoading, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvForceDisconnected_FromGM ( int Result, struct FString ErrMsg )
{
	static UFunction* prfReqRecvForceDisconnected_FromGM = 0;
	UBTTcpLink_Channel_eventrfReqRecvForceDisconnected_FromGM_Parms parms;

	if ( !prfReqRecvForceDisconnected_FromGM )
		prfReqRecvForceDisconnected_FromGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvForceDisconnected_FromGM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfReqRecvForceDisconnected_FromGM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckForceDisconnectUser_GM ( int Result, struct FString ErrMsg, struct FString CharName )
{
	static UFunction* prfAckForceDisconnectUser_GM = 0;
	UBTTcpLink_Channel_eventrfAckForceDisconnectUser_GM_Parms parms;

	if ( !prfAckForceDisconnectUser_GM )
		prfAckForceDisconnectUser_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckForceDisconnectUser_GM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.CharName = CharName;
	this->ProcessEvent ( prfAckForceDisconnectUser_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqForceDisconnectUser_GM ( struct FString CharName )
{
	static UFunction* prfReqForceDisconnectUser_GM = 0;
	UBTTcpLink_Channel_eventrfReqForceDisconnectUser_GM_Parms parms;

	if ( !prfReqForceDisconnectUser_GM )
		prfReqForceDisconnectUser_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqForceDisconnectUser_GM" );

	parms.CharName = CharName;
	this->ProcessEvent ( prfReqForceDisconnectUser_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvNotice_FromGM ( int Result, struct FString ErrMsg, class TArray< struct FString > NoticeMsg, unsigned char IsFromDB )
{
	static UFunction* prfReqRecvNotice_FromGM = 0;
	UBTTcpLink_Channel_eventrfReqRecvNotice_FromGM_Parms parms;

	if ( !prfReqRecvNotice_FromGM )
		prfReqRecvNotice_FromGM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvNotice_FromGM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.NoticeMsg = NoticeMsg;
	parms.IsFromDB = IsFromDB;
	this->ProcessEvent ( prfReqRecvNotice_FromGM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotice_GM ( int Result, struct FString ErrMsg, unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg )
{
	static UFunction* prfAckNotice_GM = 0;
	UBTTcpLink_Channel_eventrfAckNotice_GM_Parms parms;

	if ( !prfAckNotice_GM )
		prfAckNotice_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotice_GM" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.NoticeType = NoticeType;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.GameRoomNum = GameRoomNum;
	parms.Msg = Msg;
	this->ProcessEvent ( prfAckNotice_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotice_GM ( unsigned char NoticeType, int ServerID, int ChannelNum, int GameRoomNum, struct FString Msg )
{
	static UFunction* prfReqNotice_GM = 0;
	UBTTcpLink_Channel_eventrfReqNotice_GM_Parms parms;

	if ( !prfReqNotice_GM )
		prfReqNotice_GM = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotice_GM" );

	parms.NoticeType = NoticeType;
	parms.ServerID = ServerID;
	parms.ChannelNum = ChannelNum;
	parms.GameRoomNum = GameRoomNum;
	parms.Msg = Msg;
	this->ProcessEvent ( prfReqNotice_GM, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSpecificChannelUserInfo ( int UID, struct FString UserID, int UserLevels, struct FString ClanName, int ClanPattern, int ClanBG, int ClanBL, int Result, struct FString ErrMsg, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* prfAckSpecificChannelUserInfo = 0;
	UBTTcpLink_Channel_eventrfAckSpecificChannelUserInfo_Parms parms;

	if ( !prfAckSpecificChannelUserInfo )
		prfAckSpecificChannelUserInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSpecificChannelUserInfo" );

	parms.UID = UID;
	parms.UserID = UserID;
	parms.UserLevels = UserLevels;
	parms.ClanName = ClanName;
	parms.ClanPattern = ClanPattern;
	parms.ClanBG = ClanBG;
	parms.ClanBL = ClanBL;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckSpecificChannelUserInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSpecificChannelUserInfo ( int UserID )
{
	static UFunction* prfReqSpecificChannelUserInfo = 0;
	UBTTcpLink_Channel_eventrfReqSpecificChannelUserInfo_Parms parms;

	if ( !prfReqSpecificChannelUserInfo )
		prfReqSpecificChannelUserInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSpecificChannelUserInfo" );

	parms.UserID = UserID;
	this->ProcessEvent ( prfReqSpecificChannelUserInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSpecificGameRoomInfo ( int Result, int GameNum, struct FString Title, struct FString MapName, int MapNum, unsigned char UserCount, unsigned char MaxCount, struct FString GameModeName, int ModeNum, unsigned char WeaponLimit, unsigned char IsHardCore, unsigned char Status, struct FString RoomOwnerIP, int GameMinute, struct FString RoomOwnerName, unsigned char IsSpecial, unsigned char IsPassword )
{
	static UFunction* prfAckSpecificGameRoomInfo = 0;
	UBTTcpLink_Channel_eventrfAckSpecificGameRoomInfo_Parms parms;

	if ( !prfAckSpecificGameRoomInfo )
		prfAckSpecificGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSpecificGameRoomInfo" );

	parms.Result = Result;
	parms.GameNum = GameNum;
	parms.Title = Title;
	parms.MapName = MapName;
	parms.MapNum = MapNum;
	parms.UserCount = UserCount;
	parms.MaxCount = MaxCount;
	parms.GameModeName = GameModeName;
	parms.ModeNum = ModeNum;
	parms.WeaponLimit = WeaponLimit;
	parms.IsHardCore = IsHardCore;
	parms.Status = Status;
	parms.RoomOwnerIP = RoomOwnerIP;
	parms.GameMinute = GameMinute;
	parms.RoomOwnerName = RoomOwnerName;
	parms.IsSpecial = IsSpecial;
	parms.IsPassword = IsPassword;
	this->ProcessEvent ( prfAckSpecificGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSpecificGameRoomInfo ( int RoomNum )
{
	static UFunction* prfReqSpecificGameRoomInfo = 0;
	UBTTcpLink_Channel_eventrfReqSpecificGameRoomInfo_Parms parms;

	if ( !prfReqSpecificGameRoomInfo )
		prfReqSpecificGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSpecificGameRoomInfo" );

	parms.RoomNum = RoomNum;
	this->ProcessEvent ( prfReqSpecificGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChannelUserListInGameRoom ( int Result, int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > CharName, class TArray< int > UserLevel, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< unsigned char > IsLookForClan, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* prfAckChannelUserListInGameRoom = 0;
	UBTTcpLink_Channel_eventrfAckChannelUserListInGameRoom_Parms parms;

	if ( !prfAckChannelUserListInGameRoom )
		prfAckChannelUserListInGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChannelUserListInGameRoom" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	parms.Count = Count;
	parms.StartIndex = StartIndex;
	parms.UID = UID;
	parms.CharName = CharName;
	parms.UserLevel = UserLevel;
	parms.ClanName = ClanName;
	parms.ClanPattern = ClanPattern;
	parms.ClanBG = ClanBG;
	parms.ClanBL = ClanBL;
	parms.IsLookForClan = IsLookForClan;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckChannelUserListInGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChannelUserListInGameRoom ( int ChannelNum, int StartIndex, int Count )
{
	static UFunction* prfReqChannelUserListInGameRoom = 0;
	UBTTcpLink_Channel_eventrfReqChannelUserListInGameRoom_Parms parms;

	if ( !prfReqChannelUserListInGameRoom )
		prfReqChannelUserListInGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChannelUserListInGameRoom" );

	parms.ChannelNum = ChannelNum;
	parms.StartIndex = StartIndex;
	parms.Count = Count;
	this->ProcessEvent ( prfReqChannelUserListInGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvDeleteFriend ( int Result, struct FString FromCharName )
{
	static UFunction* prfReqRecvDeleteFriend = 0;
	UBTTcpLink_Channel_eventrfReqRecvDeleteFriend_Parms parms;

	if ( !prfReqRecvDeleteFriend )
		prfReqRecvDeleteFriend = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvDeleteFriend" );

	parms.Result = Result;
	parms.FromCharName = FromCharName;
	this->ProcessEvent ( prfReqRecvDeleteFriend, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDeleteFriend ( int Result, class TArray< struct FString > FailedCharname )
{
	static UFunction* prfAckDeleteFriend = 0;
	UBTTcpLink_Channel_eventrfAckDeleteFriend_Parms parms;

	if ( !prfAckDeleteFriend )
		prfAckDeleteFriend = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDeleteFriend" );

	parms.Result = Result;
	parms.FailedCharname = FailedCharname;
	this->ProcessEvent ( prfAckDeleteFriend, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDeleteFriend ( class TArray< struct FString > DeleteCharName )
{
	static UFunction* prfReqDeleteFriend = 0;
	UBTTcpLink_Channel_eventrfReqDeleteFriend_Parms parms;

	if ( !prfReqDeleteFriend )
		prfReqDeleteFriend = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDeleteFriend" );

	parms.DeleteCharName = DeleteCharName;
	this->ProcessEvent ( prfReqDeleteFriend, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 )
{
	static UFunction* prfAckGameGuardAuthData = 0;
	UBTTcpLink_Channel_eventrfAckGameGuardAuthData_Parms parms;

	if ( !prfAckGameGuardAuthData )
		prfAckGameGuardAuthData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGameGuardAuthData" );

	parms.AuthDataIndex = AuthDataIndex;
	parms.AuthDataVal1 = AuthDataVal1;
	parms.AuthDataVal2 = AuthDataVal2;
	parms.AuthDataVal3 = AuthDataVal3;
	this->ProcessEvent ( prfAckGameGuardAuthData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGameGuardAuthData ( int AuthDataIndex, int AuthDataVal1, int AuthDataVal2, int AuthDataVal3 )
{
	static UFunction* prfReqGameGuardAuthData = 0;
	UBTTcpLink_Channel_eventrfReqGameGuardAuthData_Parms parms;

	if ( !prfReqGameGuardAuthData )
		prfReqGameGuardAuthData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGameGuardAuthData" );

	parms.AuthDataIndex = AuthDataIndex;
	parms.AuthDataVal1 = AuthDataVal1;
	parms.AuthDataVal2 = AuthDataVal2;
	parms.AuthDataVal3 = AuthDataVal3;
	this->ProcessEvent ( prfReqGameGuardAuthData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCheckEquipedWeaponDurability ( int Result, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemSlotNum )
{
	static UFunction* prfAckCheckEquipedWeaponDurability = 0;
	UBTTcpLink_Channel_eventrfAckCheckEquipedWeaponDurability_Parms parms;

	if ( !prfAckCheckEquipedWeaponDurability )
		prfAckCheckEquipedWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCheckEquipedWeaponDurability" );

	parms.Result = Result;
	parms.ItemUniqueID = ItemUniqueID;
	parms.ItemSlotNum = ItemSlotNum;
	this->ProcessEvent ( prfAckCheckEquipedWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCheckEquipedWeaponDurability (  )
{
	static UFunction* prfReqCheckEquipedWeaponDurability = 0;
	UBTTcpLink_Channel_eventrfReqCheckEquipedWeaponDurability_Parms parms;

	if ( !prfReqCheckEquipedWeaponDurability )
		prfReqCheckEquipedWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCheckEquipedWeaponDurability" );

	this->ProcessEvent ( prfReqCheckEquipedWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_GetChopper ( int GetChopperUID, class TArray< int > GetChopperAssistUID, float KillXCoord, float KillYCoord, float KillZCoord, int KillPos, int KillWeaponID, int KillWeaponPartID, int KillRange, int KillDamage, int ChopperCallerID, struct FString ChopperCallerName, float ChopperXCoord, float ChopperYCoord, float ChopperZCoord )
{
	static UFunction* prfReqGamePlay_GetChopper = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_GetChopper_Parms parms;

	if ( !prfReqGamePlay_GetChopper )
		prfReqGamePlay_GetChopper = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_GetChopper" );

	parms.GetChopperUID = GetChopperUID;
	parms.GetChopperAssistUID = GetChopperAssistUID;
	parms.KillXCoord = KillXCoord;
	parms.KillYCoord = KillYCoord;
	parms.KillZCoord = KillZCoord;
	parms.KillPos = KillPos;
	parms.KillWeaponID = KillWeaponID;
	parms.KillWeaponPartID = KillWeaponPartID;
	parms.KillRange = KillRange;
	parms.KillDamage = KillDamage;
	parms.ChopperCallerID = ChopperCallerID;
	parms.ChopperCallerName = ChopperCallerName;
	parms.ChopperXCoord = ChopperXCoord;
	parms.ChopperYCoord = ChopperYCoord;
	parms.ChopperZCoord = ChopperZCoord;
	this->ProcessEvent ( prfReqGamePlay_GetChopper, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAcquirePromotionItems ( int UID, int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > ItemUniqueID, class TArray< int > ItemIDs, class TArray< int > PartIDs )
{
	static UFunction* prfAckAcquirePromotionItems = 0;
	UBTTcpLink_Channel_eventrfAckAcquirePromotionItems_Parms parms;

	if ( !prfAckAcquirePromotionItems )
		prfAckAcquirePromotionItems = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAcquirePromotionItems" );

	parms.UID = UID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemUniqueID = ItemUniqueID;
	parms.ItemIDs = ItemIDs;
	parms.PartIDs = PartIDs;
	this->ProcessEvent ( prfAckAcquirePromotionItems, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckIsAvailClanURL ( struct FString ClanURL, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckIsAvailClanURL = 0;
	UBTTcpLink_Channel_eventrfAckIsAvailClanURL_Parms parms;

	if ( !prfAckIsAvailClanURL )
		prfAckIsAvailClanURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckIsAvailClanURL" );

	parms.ClanURL = ClanURL;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckIsAvailClanURL, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqIsAvailClanURL ( struct FString ClanURL )
{
	static UFunction* prfReqIsAvailClanURL = 0;
	UBTTcpLink_Channel_eventrfReqIsAvailClanURL_Parms parms;

	if ( !prfReqIsAvailClanURL )
		prfReqIsAvailClanURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqIsAvailClanURL" );

	parms.ClanURL = ClanURL;
	this->ProcessEvent ( prfReqIsAvailClanURL, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetIsHostBlocking ( int Result, unsigned char Blocking )
{
	static UFunction* prfAckGetIsHostBlocking = 0;
	UBTTcpLink_Channel_eventrfAckGetIsHostBlocking_Parms parms;

	if ( !prfAckGetIsHostBlocking )
		prfAckGetIsHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetIsHostBlocking" );

	parms.Result = Result;
	parms.Blocking = Blocking;
	this->ProcessEvent ( prfAckGetIsHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetIsHostBlocking (  )
{
	static UFunction* prfReqGetIsHostBlocking = 0;
	UBTTcpLink_Channel_eventrfReqGetIsHostBlocking_Parms parms;

	if ( !prfReqGetIsHostBlocking )
		prfReqGetIsHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetIsHostBlocking" );

	this->ProcessEvent ( prfReqGetIsHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyHostBlocking ( int Result, unsigned char Blocking )
{
	static UFunction* prfAckNotifyHostBlocking = 0;
	UBTTcpLink_Channel_eventrfAckNotifyHostBlocking_Parms parms;

	if ( !prfAckNotifyHostBlocking )
		prfAckNotifyHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyHostBlocking" );

	parms.Result = Result;
	parms.Blocking = Blocking;
	this->ProcessEvent ( prfAckNotifyHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyHostBlocking ( unsigned char Blocking )
{
	static UFunction* prfReqNotifyHostBlocking = 0;
	UBTTcpLink_Channel_eventrfReqNotifyHostBlocking_Parms parms;

	if ( !prfReqNotifyHostBlocking )
		prfReqNotifyHostBlocking = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyHostBlocking" );

	parms.Blocking = Blocking;
	this->ProcessEvent ( prfReqNotifyHostBlocking, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs )
{
	static UFunction* prfAckGetHolePunchingResult = 0;
	UBTTcpLink_Channel_eventrfAckGetHolePunchingResult_Parms parms;

	if ( !prfAckGetHolePunchingResult )
		prfAckGetHolePunchingResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetHolePunchingResult" );

	parms.Result = Result;
	parms.Phrase = Phrase;
	parms.InterventionUserID = InterventionUserID;
	parms.Intervention = Intervention;
	parms.FailedUserIDs = FailedUserIDs;
	this->ProcessEvent ( prfAckGetHolePunchingResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetHolePunchingResult (  )
{
	static UFunction* prfReqGetHolePunchingResult = 0;
	UBTTcpLink_Channel_eventrfReqGetHolePunchingResult_Parms parms;

	if ( !prfReqGetHolePunchingResult )
		prfReqGetHolePunchingResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetHolePunchingResult" );

	this->ProcessEvent ( prfReqGetHolePunchingResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyRecvDummyForHolePunching ( int ClientUserID, unsigned char Phrase )
{
	static UFunction* prfReqNotifyRecvDummyForHolePunching = 0;
	UBTTcpLink_Channel_eventrfReqNotifyRecvDummyForHolePunching_Parms parms;

	if ( !prfReqNotifyRecvDummyForHolePunching )
		prfReqNotifyRecvDummyForHolePunching = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyRecvDummyForHolePunching" );

	parms.ClientUserID = ClientUserID;
	parms.Phrase = Phrase;
	this->ProcessEvent ( prfReqNotifyRecvDummyForHolePunching, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_ChangeWeaponSet ( int UID, int SetNumber )
{
	static UFunction* prfReqGamePlay_ChangeWeaponSet = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_ChangeWeaponSet_Parms parms;

	if ( !prfReqGamePlay_ChangeWeaponSet )
		prfReqGamePlay_ChangeWeaponSet = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_ChangeWeaponSet" );

	parms.UID = UID;
	parms.SetNumber = SetNumber;
	this->ProcessEvent ( prfReqGamePlay_ChangeWeaponSet, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_UpdateDomScore ( int AFScore, int RSAScore )
{
	static UFunction* prfReqGamePlay_UpdateDomScore = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_UpdateDomScore_Parms parms;

	if ( !prfReqGamePlay_UpdateDomScore )
		prfReqGamePlay_UpdateDomScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_UpdateDomScore" );

	parms.AFScore = AFScore;
	parms.RSAScore = RSAScore;
	this->ProcessEvent ( prfReqGamePlay_UpdateDomScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyRelayServerAddr ( struct FString RelayIP, int RelayPort )
{
	static UFunction* prfReqNotifyRelayServerAddr = 0;
	UBTTcpLink_Channel_eventrfReqNotifyRelayServerAddr_Parms parms;

	if ( !prfReqNotifyRelayServerAddr )
		prfReqNotifyRelayServerAddr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyRelayServerAddr" );

	parms.RelayIP = RelayIP;
	parms.RelayPort = RelayPort;
	this->ProcessEvent ( prfReqNotifyRelayServerAddr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetUserHostPriorityPoint ( int Result, int UserID, int HostPriorityPoint )
{
	static UFunction* prfAckGetUserHostPriorityPoint = 0;
	UBTTcpLink_Channel_eventrfAckGetUserHostPriorityPoint_Parms parms;

	if ( !prfAckGetUserHostPriorityPoint )
		prfAckGetUserHostPriorityPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetUserHostPriorityPoint" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( prfAckGetUserHostPriorityPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetUserHostPriorityPoint ( int UserID )
{
	static UFunction* prfReqGetUserHostPriorityPoint = 0;
	UBTTcpLink_Channel_eventrfReqGetUserHostPriorityPoint_Parms parms;

	if ( !prfReqGetUserHostPriorityPoint )
		prfReqGetUserHostPriorityPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetUserHostPriorityPoint" );

	parms.UserID = UserID;
	this->ProcessEvent ( prfReqGetUserHostPriorityPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqUpdateMyHostPriorityPoint ( int HostPriorityPoint )
{
	static UFunction* prfReqUpdateMyHostPriorityPoint = 0;
	UBTTcpLink_Channel_eventrfReqUpdateMyHostPriorityPoint_Parms parms;

	if ( !prfReqUpdateMyHostPriorityPoint )
		prfReqUpdateMyHostPriorityPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqUpdateMyHostPriorityPoint" );

	parms.HostPriorityPoint = HostPriorityPoint;
	this->ProcessEvent ( prfReqUpdateMyHostPriorityPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqWriteServerLog ( unsigned char Destination, struct FString LogMsg )
{
	static UFunction* prfReqWriteServerLog = 0;
	UBTTcpLink_Channel_eventrfReqWriteServerLog_Parms parms;

	if ( !prfReqWriteServerLog )
		prfReqWriteServerLog = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqWriteServerLog" );

	parms.Destination = Destination;
	parms.LogMsg = LogMsg;
	this->ProcessEvent ( prfReqWriteServerLog, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_SetRoundStartTime ( class TArray< int > UID )
{
	static UFunction* prfReqGamePlay_SetRoundStartTime = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_SetRoundStartTime_Parms parms;

	if ( !prfReqGamePlay_SetRoundStartTime )
		prfReqGamePlay_SetRoundStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_SetRoundStartTime" );

	parms.UID = UID;
	this->ProcessEvent ( prfReqGamePlay_SetRoundStartTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_SetGameStartTime ( class TArray< int > UID )
{
	static UFunction* prfReqGamePlay_SetGameStartTime = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_SetGameStartTime_Parms parms;

	if ( !prfReqGamePlay_SetGameStartTime )
		prfReqGamePlay_SetGameStartTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_SetGameStartTime" );

	parms.UID = UID;
	this->ProcessEvent ( prfReqGamePlay_SetGameStartTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvForceDisconnectUDPFromHost ( int Result )
{
	static UFunction* prfReqRecvForceDisconnectUDPFromHost = 0;
	UBTTcpLink_Channel_eventrfReqRecvForceDisconnectUDPFromHost_Parms parms;

	if ( !prfReqRecvForceDisconnectUDPFromHost )
		prfReqRecvForceDisconnectUDPFromHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvForceDisconnectUDPFromHost" );

	parms.Result = Result;
	this->ProcessEvent ( prfReqRecvForceDisconnectUDPFromHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckForceDisconnectUDPFromHost ( int Result )
{
	static UFunction* prfAckForceDisconnectUDPFromHost = 0;
	UBTTcpLink_Channel_eventrfAckForceDisconnectUDPFromHost_Parms parms;

	if ( !prfAckForceDisconnectUDPFromHost )
		prfAckForceDisconnectUDPFromHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckForceDisconnectUDPFromHost" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckForceDisconnectUDPFromHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqForceDisconnectUDPFromHost ( int UserID )
{
	static UFunction* prfReqForceDisconnectUDPFromHost = 0;
	UBTTcpLink_Channel_eventrfReqForceDisconnectUDPFromHost_Parms parms;

	if ( !prfReqForceDisconnectUDPFromHost )
		prfReqForceDisconnectUDPFromHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqForceDisconnectUDPFromHost" );

	parms.UserID = UserID;
	this->ProcessEvent ( prfReqForceDisconnectUDPFromHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_TakeAPoint ( class TArray< int > TakerUID, unsigned char TakePos, class TArray< float > TakerXCoord, class TArray< float > TakerYCoord, class TArray< float > TakerZCoord, class TArray< int > TakerPos, class TArray< int > TakerWeaponID, class TArray< int > TakerWeaponPartID, class TArray< int > TakerRange )
{
	static UFunction* prfReqGamePlay_TakeAPoint = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_TakeAPoint_Parms parms;

	if ( !prfReqGamePlay_TakeAPoint )
		prfReqGamePlay_TakeAPoint = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_TakeAPoint" );

	parms.TakerUID = TakerUID;
	parms.TakePos = TakePos;
	parms.TakerXCoord = TakerXCoord;
	parms.TakerYCoord = TakerYCoord;
	parms.TakerZCoord = TakerZCoord;
	parms.TakerPos = TakerPos;
	parms.TakerWeaponID = TakerWeaponID;
	parms.TakerWeaponPartID = TakerWeaponPartID;
	parms.TakerRange = TakerRange;
	this->ProcessEvent ( prfReqGamePlay_TakeAPoint, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyChangeRoomState ( unsigned char RoomState )
{
	static UFunction* prfReqNotifyChangeRoomState = 0;
	UBTTcpLink_Channel_eventrfReqNotifyChangeRoomState_Parms parms;

	if ( !prfReqNotifyChangeRoomState )
		prfReqNotifyChangeRoomState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyChangeRoomState" );

	parms.RoomState = RoomState;
	this->ProcessEvent ( prfReqNotifyChangeRoomState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_DefuseBomb ( int DefuserUID, unsigned char DefusePos, float DefuserXCoord, float DefuserYCoord, float DefuserZCoord, int DefuserPos, int DefuserWeaponID, int DefuserWeaponPartID, int DefuserRange )
{
	static UFunction* prfReqGamePlay_DefuseBomb = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_DefuseBomb_Parms parms;

	if ( !prfReqGamePlay_DefuseBomb )
		prfReqGamePlay_DefuseBomb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_DefuseBomb" );

	parms.DefuserUID = DefuserUID;
	parms.DefusePos = DefusePos;
	parms.DefuserXCoord = DefuserXCoord;
	parms.DefuserYCoord = DefuserYCoord;
	parms.DefuserZCoord = DefuserZCoord;
	parms.DefuserPos = DefuserPos;
	parms.DefuserWeaponID = DefuserWeaponID;
	parms.DefuserWeaponPartID = DefuserWeaponPartID;
	parms.DefuserRange = DefuserRange;
	this->ProcessEvent ( prfReqGamePlay_DefuseBomb, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGamePlay_InstallBomb ( int InstallerUID, unsigned char InstallPos, float InstallerXCoord, float InstallerYCoord, float InstallerZCoord, int InstallerPos, int InstallerWeaponID, int InstallerWeaponPartID, int InstallerRange )
{
	static UFunction* prfReqGamePlay_InstallBomb = 0;
	UBTTcpLink_Channel_eventrfReqGamePlay_InstallBomb_Parms parms;

	if ( !prfReqGamePlay_InstallBomb )
		prfReqGamePlay_InstallBomb = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGamePlay_InstallBomb" );

	parms.InstallerUID = InstallerUID;
	parms.InstallPos = InstallPos;
	parms.InstallerXCoord = InstallerXCoord;
	parms.InstallerYCoord = InstallerYCoord;
	parms.InstallerZCoord = InstallerZCoord;
	parms.InstallerPos = InstallerPos;
	parms.InstallerWeaponID = InstallerWeaponID;
	parms.InstallerWeaponPartID = InstallerWeaponPartID;
	parms.InstallerRange = InstallerRange;
	this->ProcessEvent ( prfReqGamePlay_InstallBomb, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDBCharInfo ( int Result, struct FString ErrMsg, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FString ClanPersonIntro, int MainWeaponItemID, int MainWeaponPartID, int SubWeaponItemID, int SubWeaponPartID, int AFSpecialCostumeItemID, int RSASpecialCostumeItemID, struct FCharInfo stCharInfo, int ClanLevel )
{
	static UFunction* prfAckDBCharInfo = 0;
	UBTTcpLink_Channel_eventrfAckDBCharInfo_Parms parms;

	if ( !prfAckDBCharInfo )
		prfAckDBCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDBCharInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.CharName = CharName;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.ClanPersonIntro = ClanPersonIntro;
	parms.MainWeaponItemID = MainWeaponItemID;
	parms.MainWeaponPartID = MainWeaponPartID;
	parms.SubWeaponItemID = SubWeaponItemID;
	parms.SubWeaponPartID = SubWeaponPartID;
	parms.AFSpecialCostumeItemID = AFSpecialCostumeItemID;
	parms.RSASpecialCostumeItemID = RSASpecialCostumeItemID;
	parms.stCharInfo = stCharInfo;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( prfAckDBCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDBCharInfo ( struct FString CharName )
{
	static UFunction* prfReqDBCharInfo = 0;
	UBTTcpLink_Channel_eventrfReqDBCharInfo_Parms parms;

	if ( !prfReqDBCharInfo )
		prfReqDBCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDBCharInfo" );

	parms.CharName = CharName;
	this->ProcessEvent ( prfReqDBCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqForceNatTypeSetting ( int NatType )
{
	static UFunction* prfReqForceNatTypeSetting = 0;
	UBTTcpLink_Channel_eventrfReqForceNatTypeSetting_Parms parms;

	if ( !prfReqForceNatTypeSetting )
		prfReqForceNatTypeSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqForceNatTypeSetting" );

	parms.NatType = NatType;
	this->ProcessEvent ( prfReqForceNatTypeSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetServerTime ( struct FBtrDouble ServerTime, struct FString ClientIP )
{
	static UFunction* prfAckGetServerTime = 0;
	UBTTcpLink_Channel_eventrfAckGetServerTime_Parms parms;

	if ( !prfAckGetServerTime )
		prfAckGetServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetServerTime" );

	parms.ServerTime = ServerTime;
	parms.ClientIP = ClientIP;
	this->ProcessEvent ( prfAckGetServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetServerTime (  )
{
	static UFunction* prfReqGetServerTime = 0;
	UBTTcpLink_Channel_eventrfReqGetServerTime_Parms parms;

	if ( !prfReqGetServerTime )
		prfReqGetServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetServerTime" );

	this->ProcessEvent ( prfReqGetServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLogEndEachRound ( int StartCnt, int EndCnt, int RoundEndType, int RoundEndTime, unsigned char VTeam, unsigned char VTeamAD, int AFScore, int RSAScore, int Round )
{
	static UFunction* prfReqLogEndEachRound = 0;
	UBTTcpLink_Channel_eventrfReqLogEndEachRound_Parms parms;

	if ( !prfReqLogEndEachRound )
		prfReqLogEndEachRound = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLogEndEachRound" );

	parms.StartCnt = StartCnt;
	parms.EndCnt = EndCnt;
	parms.RoundEndType = RoundEndType;
	parms.RoundEndTime = RoundEndTime;
	parms.VTeam = VTeam;
	parms.VTeamAD = VTeamAD;
	parms.AFScore = AFScore;
	parms.RSAScore = RSAScore;
	parms.Round = Round;
	this->ProcessEvent ( prfReqLogEndEachRound, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLogGetScore ( struct FKillDeathLog KillDeathLogParam, class TArray< int > AssistUIDs, class TArray< unsigned char > AssistScores )
{
	static UFunction* prfReqLogGetScore = 0;
	UBTTcpLink_Channel_eventrfReqLogGetScore_Parms parms;

	if ( !prfReqLogGetScore )
		prfReqLogGetScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLogGetScore" );

	parms.KillDeathLogParam = KillDeathLogParam;
	parms.AssistUIDs = AssistUIDs;
	parms.AssistScores = AssistScores;
	this->ProcessEvent ( prfReqLogGetScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionTradeHistory ( int Result, struct FString ErrMsg, int ItemID, int PartID, class TArray< struct FString > SellerCharNm, class TArray< int > DamageDegree, class TArray< int > Price )
{
	static UFunction* prfAckAuctionTradeHistory = 0;
	UBTTcpLink_Channel_eventrfAckAuctionTradeHistory_Parms parms;

	if ( !prfAckAuctionTradeHistory )
		prfAckAuctionTradeHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionTradeHistory" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	parms.SellerCharNm = SellerCharNm;
	parms.DamageDegree = DamageDegree;
	parms.Price = Price;
	this->ProcessEvent ( prfAckAuctionTradeHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAuctionTradeHistory ( int ItemID, int PartID )
{
	static UFunction* prfReqAuctionTradeHistory = 0;
	UBTTcpLink_Channel_eventrfReqAuctionTradeHistory_Parms parms;

	if ( !prfReqAuctionTradeHistory )
		prfReqAuctionTradeHistory = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAuctionTradeHistory" );

	parms.ItemID = ItemID;
	parms.PartID = PartID;
	this->ProcessEvent ( prfReqAuctionTradeHistory, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSendGift ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain )
{
	static UFunction* prfAckSendGift = 0;
	UBTTcpLink_Channel_eventrfAckSendGift_Parms parms;

	if ( !prfAckSendGift )
		prfAckSendGift = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSendGift" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	parms.CashRemain = CashRemain;
	this->ProcessEvent ( prfAckSendGift, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSendGift ( int ItemID, struct FString RecvCharname, struct FString RecvMessage, unsigned char BuyOption1, unsigned char BuyOption2 )
{
	static UFunction* prfReqSendGift = 0;
	UBTTcpLink_Channel_eventrfReqSendGift_Parms parms;

	if ( !prfReqSendGift )
		prfReqSendGift = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSendGift" );

	parms.ItemID = ItemID;
	parms.RecvCharname = RecvCharname;
	parms.RecvMessage = RecvMessage;
	parms.BuyOption1 = BuyOption1;
	parms.BuyOption2 = BuyOption2;
	this->ProcessEvent ( prfReqSendGift, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetAttachedItemFromMemo ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int ItemID )
{
	static UFunction* prfAckGetAttachedItemFromMemo = 0;
	UBTTcpLink_Channel_eventrfAckGetAttachedItemFromMemo_Parms parms;

	if ( !prfAckGetAttachedItemFromMemo )
		prfAckGetAttachedItemFromMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetAttachedItemFromMemo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.ItemID = ItemID;
	this->ProcessEvent ( prfAckGetAttachedItemFromMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetAttachedItemFromMemo ( int UserID, int MemoIdx, int ItemID )
{
	static UFunction* prfReqGetAttachedItemFromMemo = 0;
	UBTTcpLink_Channel_eventrfReqGetAttachedItemFromMemo_Parms parms;

	if ( !prfReqGetAttachedItemFromMemo )
		prfReqGetAttachedItemFromMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetAttachedItemFromMemo" );

	parms.UserID = UserID;
	parms.MemoIdx = MemoIdx;
	parms.ItemID = ItemID;
	this->ProcessEvent ( prfReqGetAttachedItemFromMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyNewClanMember ( struct FString ClanName, struct FString CharName )
{
	static UFunction* prfAckNotifyNewClanMember = 0;
	UBTTcpLink_Channel_eventrfAckNotifyNewClanMember_Parms parms;

	if ( !prfAckNotifyNewClanMember )
		prfAckNotifyNewClanMember = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyNewClanMember" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	this->ProcessEvent ( prfAckNotifyNewClanMember, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChatClan ( struct FString CharName, struct FString Message, int Result )
{
	static UFunction* prfAckChatClan = 0;
	UBTTcpLink_Channel_eventrfAckChatClan_Parms parms;

	if ( !prfAckChatClan )
		prfAckChatClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChatClan" );

	parms.CharName = CharName;
	parms.Message = Message;
	parms.Result = Result;
	this->ProcessEvent ( prfAckChatClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChatClan ( struct FString Message )
{
	static UFunction* prfReqChatClan = 0;
	UBTTcpLink_Channel_eventrfReqChatClan_Parms parms;

	if ( !prfReqChatClan )
		prfReqChatClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChatClan" );

	parms.Message = Message;
	this->ProcessEvent ( prfReqChatClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles )
{
	static UFunction* prfAckTestDouble = 0;
	UBTTcpLink_Channel_eventrfAckTestDouble_Parms parms;

	if ( !prfAckTestDouble )
		prfAckTestDouble = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckTestDouble" );

	parms.vDouble = vDouble;
	parms.vDoubles = vDoubles;
	this->ProcessEvent ( prfAckTestDouble, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqTestDouble ( struct FBtrDouble vDouble, class TArray< struct FBtrDouble > vDoubles )
{
	static UFunction* prfReqTestDouble = 0;
	UBTTcpLink_Channel_eventrfReqTestDouble_Parms parms;

	if ( !prfReqTestDouble )
		prfReqTestDouble = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqTestDouble" );

	parms.vDouble = vDouble;
	parms.vDoubles = vDoubles;
	this->ProcessEvent ( prfReqTestDouble, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyLoadingState ( int Result, int UserID, unsigned char LoadingState )
{
	static UFunction* prfAckNotifyLoadingState = 0;
	UBTTcpLink_Channel_eventrfAckNotifyLoadingState_Parms parms;

	if ( !prfAckNotifyLoadingState )
		prfAckNotifyLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyLoadingState" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.LoadingState = LoadingState;
	this->ProcessEvent ( prfAckNotifyLoadingState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyLoadingState ( unsigned char LoadingState )
{
	static UFunction* prfReqNotifyLoadingState = 0;
	UBTTcpLink_Channel_eventrfReqNotifyLoadingState_Parms parms;

	if ( !prfReqNotifyLoadingState )
		prfReqNotifyLoadingState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyLoadingState" );

	parms.LoadingState = LoadingState;
	this->ProcessEvent ( prfReqNotifyLoadingState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckFailedStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, int FailedUserID, int LoadingStep )
{
	static UFunction* prfAckFailedStartGame = 0;
	UBTTcpLink_Channel_eventrfAckFailedStartGame_Parms parms;

	if ( !prfAckFailedStartGame )
		prfAckFailedStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckFailedStartGame" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsHost = IsHost;
	parms.FailedUserID = FailedUserID;
	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( prfAckFailedStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqFailedStartGame ( int LoadingStep )
{
	static UFunction* prfReqFailedStartGame = 0;
	UBTTcpLink_Channel_eventrfReqFailedStartGame_Parms parms;

	if ( !prfReqFailedStartGame )
		prfReqFailedStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqFailedStartGame" );

	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( prfReqFailedStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSuccessStartGame ( int Result, struct FString ErrMsg, unsigned char IsHost, struct FString HostIP, int HostPort, int LoadingStep )
{
	static UFunction* prfAckSuccessStartGame = 0;
	UBTTcpLink_Channel_eventrfAckSuccessStartGame_Parms parms;

	if ( !prfAckSuccessStartGame )
		prfAckSuccessStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSuccessStartGame" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsHost = IsHost;
	parms.HostIP = HostIP;
	parms.HostPort = HostPort;
	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( prfAckSuccessStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSuccessStartGame ( int LoadingStep )
{
	static UFunction* prfReqSuccessStartGame = 0;
	UBTTcpLink_Channel_eventrfReqSuccessStartGame_Parms parms;

	if ( !prfReqSuccessStartGame )
		prfReqSuccessStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSuccessStartGame" );

	parms.LoadingStep = LoadingStep;
	this->ProcessEvent ( prfReqSuccessStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanCharPersonelIntro ( int Result, struct FString ErrMsg, struct FString PersonelIntro )
{
	static UFunction* prfAckClanCharPersonelIntro = 0;
	UBTTcpLink_Channel_eventrfAckClanCharPersonelIntro_Parms parms;

	if ( !prfAckClanCharPersonelIntro )
		prfAckClanCharPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanCharPersonelIntro" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PersonelIntro = PersonelIntro;
	this->ProcessEvent ( prfAckClanCharPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanCharPersonelIntro ( struct FString ClanName, struct FString CharName )
{
	static UFunction* prfReqClanCharPersonelIntro = 0;
	UBTTcpLink_Channel_eventrfReqClanCharPersonelIntro_Parms parms;

	if ( !prfReqClanCharPersonelIntro )
		prfReqClanCharPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanCharPersonelIntro" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	this->ProcessEvent ( prfReqClanCharPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanPersonelIntro ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckClanPersonelIntro = 0;
	UBTTcpLink_Channel_eventrfAckClanPersonelIntro_Parms parms;

	if ( !prfAckClanPersonelIntro )
		prfAckClanPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanPersonelIntro" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckClanPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanPersonelIntro ( struct FString ClanName, struct FString CharName, struct FString PersonelIntro )
{
	static UFunction* prfReqClanPersonelIntro = 0;
	UBTTcpLink_Channel_eventrfReqClanPersonelIntro_Parms parms;

	if ( !prfReqClanPersonelIntro )
		prfReqClanPersonelIntro = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanPersonelIntro" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.PersonelIntro = PersonelIntro;
	this->ProcessEvent ( prfReqClanPersonelIntro, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanChangeInfo ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckClanChangeInfo = 0;
	UBTTcpLink_Channel_eventrfAckClanChangeInfo_Parms parms;

	if ( !prfAckClanChangeInfo )
		prfAckClanChangeInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanChangeInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckClanChangeInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanChangeInfo ( struct FString ClanName, unsigned char IsRecruit, unsigned char Region, struct FString Keyword, struct FString ClanIntro, struct FString Notice )
{
	static UFunction* prfReqClanChangeInfo = 0;
	UBTTcpLink_Channel_eventrfReqClanChangeInfo_Parms parms;

	if ( !prfReqClanChangeInfo )
		prfReqClanChangeInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanChangeInfo" );

	parms.ClanName = ClanName;
	parms.IsRecruit = IsRecruit;
	parms.Region = Region;
	parms.Keyword = Keyword;
	parms.ClanIntro = ClanIntro;
	parms.Notice = Notice;
	this->ProcessEvent ( prfReqClanChangeInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanClose ( int Result, struct FString ErrMsg, struct FString ClanName )
{
	static UFunction* prfAckClanClose = 0;
	UBTTcpLink_Channel_eventrfAckClanClose_Parms parms;

	if ( !prfAckClanClose )
		prfAckClanClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanClose" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanName = ClanName;
	this->ProcessEvent ( prfAckClanClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanClose ( struct FString ClanName )
{
	static UFunction* prfReqClanClose = 0;
	UBTTcpLink_Channel_eventrfReqClanClose_Parms parms;

	if ( !prfReqClanClose )
		prfReqClanClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanClose" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( prfReqClanClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyClanSecession ( struct FString ClanName, struct FString CharName )
{
	static UFunction* prfAckNotifyClanSecession = 0;
	UBTTcpLink_Channel_eventrfAckNotifyClanSecession_Parms parms;

	if ( !prfAckNotifyClanSecession )
		prfAckNotifyClanSecession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyClanSecession" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	this->ProcessEvent ( prfAckNotifyClanSecession, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanSecession ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckClanSecession = 0;
	UBTTcpLink_Channel_eventrfAckClanSecession_Parms parms;

	if ( !prfAckClanSecession )
		prfAckClanSecession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanSecession" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckClanSecession, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanSecession ( struct FString ClanName )
{
	static UFunction* prfReqClanSecession = 0;
	UBTTcpLink_Channel_eventrfReqClanSecession_Parms parms;

	if ( !prfReqClanSecession )
		prfReqClanSecession = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanSecession" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( prfReqClanSecession, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanNews ( class TArray< struct FString > IssueDate, class TArray< unsigned char > IssueType, class TArray< struct FString > IssuedClanMember )
{
	static UFunction* prfAckClanNews = 0;
	UBTTcpLink_Channel_eventrfAckClanNews_Parms parms;

	if ( !prfAckClanNews )
		prfAckClanNews = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanNews" );

	parms.IssueDate = IssueDate;
	parms.IssueType = IssueType;
	parms.IssuedClanMember = IssuedClanMember;
	this->ProcessEvent ( prfAckClanNews, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanNews ( struct FString ClanName )
{
	static UFunction* prfReqClanNews = 0;
	UBTTcpLink_Channel_eventrfReqClanNews_Parms parms;

	if ( !prfReqClanNews )
		prfReqClanNews = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanNews" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( prfReqClanNews, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade )
{
	static UFunction* prfAckNotifyAdjustClanMemberGrade = 0;
	UBTTcpLink_Channel_eventrfAckNotifyAdjustClanMemberGrade_Parms parms;

	if ( !prfAckNotifyAdjustClanMemberGrade )
		prfAckNotifyAdjustClanMemberGrade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyAdjustClanMemberGrade" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.CharGrade = CharGrade;
	this->ProcessEvent ( prfAckNotifyAdjustClanMemberGrade, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAdjustClanMemberGrade ( int Result, struct FString ErrMsg, struct FString ClanName, struct FString CharName, unsigned char CharGrade )
{
	static UFunction* prfAckAdjustClanMemberGrade = 0;
	UBTTcpLink_Channel_eventrfAckAdjustClanMemberGrade_Parms parms;

	if ( !prfAckAdjustClanMemberGrade )
		prfAckAdjustClanMemberGrade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAdjustClanMemberGrade" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.CharGrade = CharGrade;
	this->ProcessEvent ( prfAckAdjustClanMemberGrade, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAdjustClanMemberGrade ( struct FString ClanName, struct FString CharName, unsigned char CharGrade )
{
	static UFunction* prfReqAdjustClanMemberGrade = 0;
	UBTTcpLink_Channel_eventrfReqAdjustClanMemberGrade_Parms parms;

	if ( !prfReqAdjustClanMemberGrade )
		prfReqAdjustClanMemberGrade = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAdjustClanMemberGrade" );

	parms.ClanName = ClanName;
	parms.CharName = CharName;
	parms.CharGrade = CharGrade;
	this->ProcessEvent ( prfReqAdjustClanMemberGrade, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanUserListEnd (  )
{
	static UFunction* prfAckClanUserListEnd = 0;
	UBTTcpLink_Channel_eventrfAckClanUserListEnd_Parms parms;

	if ( !prfAckClanUserListEnd )
		prfAckClanUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanUserListEnd" );

	this->ProcessEvent ( prfAckClanUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanUserList ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< int > ClanWinCnt, class TArray< int > ClanLoseCnt, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > DudeId )
{
	static UFunction* prfAckClanUserList = 0;
	UBTTcpLink_Channel_eventrfAckClanUserList_Parms parms;

	if ( !prfAckClanUserList )
		prfAckClanUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanUserList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ClanWinCnt = ClanWinCnt;
	parms.ClanLoseCnt = ClanLoseCnt;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.DudeId = DudeId;
	this->ProcessEvent ( prfAckClanUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanUserListStart ( int Result, int TotalCount )
{
	static UFunction* prfAckClanUserListStart = 0;
	UBTTcpLink_Channel_eventrfAckClanUserListStart_Parms parms;

	if ( !prfAckClanUserListStart )
		prfAckClanUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckClanUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanUserList ( struct FString ClanName )
{
	static UFunction* prfReqClanUserList = 0;
	UBTTcpLink_Channel_eventrfReqClanUserList_Parms parms;

	if ( !prfReqClanUserList )
		prfReqClanUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanUserList" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( prfReqClanUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSearchClan ( int Result, struct FString ErrMsg, int TotalPage, class TArray< int > ClanMarkPattern, class TArray< int > ClanMarkBG, class TArray< unsigned char > ClanMarkBL, class TArray< struct FString > ClanName, class TArray< struct FString > ClanMaster, class TArray< int > ClanMember, class TArray< int > ClanMemberMax, class TArray< int > ClanCreateDate, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< int > ClanDraw, class TArray< int > ClanRank, class TArray< unsigned char > ClanRecruit, class TArray< int > ClanLevel )
{
	static UFunction* prfAckSearchClan = 0;
	UBTTcpLink_Channel_eventrfAckSearchClan_Parms parms;

	if ( !prfAckSearchClan )
		prfAckSearchClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSearchClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.TotalPage = TotalPage;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.ClanName = ClanName;
	parms.ClanMaster = ClanMaster;
	parms.ClanMember = ClanMember;
	parms.ClanMemberMax = ClanMemberMax;
	parms.ClanCreateDate = ClanCreateDate;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.ClanDraw = ClanDraw;
	parms.ClanRank = ClanRank;
	parms.ClanRecruit = ClanRecruit;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( prfAckSearchClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSerachClan ( unsigned char SearchType, struct FString Keyword, unsigned char ClanStatus, unsigned char ClanRegion, int ReqPage )
{
	static UFunction* prfReqSerachClan = 0;
	UBTTcpLink_Channel_eventrfReqSerachClan_Parms parms;

	if ( !prfReqSerachClan )
		prfReqSerachClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSerachClan" );

	parms.SearchType = SearchType;
	parms.Keyword = Keyword;
	parms.ClanStatus = ClanStatus;
	parms.ClanRegion = ClanRegion;
	parms.ReqPage = ReqPage;
	this->ProcessEvent ( prfReqSerachClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckJoinClanResult ( struct FString ClanName, unsigned char Permit, struct FString PermitCharName )
{
	static UFunction* prfAckJoinClanResult = 0;
	UBTTcpLink_Channel_eventrfAckJoinClanResult_Parms parms;

	if ( !prfAckJoinClanResult )
		prfAckJoinClanResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckJoinClanResult" );

	parms.ClanName = ClanName;
	parms.Permit = Permit;
	parms.PermitCharName = PermitCharName;
	this->ProcessEvent ( prfAckJoinClanResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRecvJoinClanResult ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckRecvJoinClanResult = 0;
	UBTTcpLink_Channel_eventrfAckRecvJoinClanResult_Parms parms;

	if ( !prfAckRecvJoinClanResult )
		prfAckRecvJoinClanResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRecvJoinClanResult" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckRecvJoinClanResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRecvJoinClan ( int UserIdx, struct FString CharName, struct FString ReqMsg, unsigned char Permit )
{
	static UFunction* prfAckRecvJoinClan = 0;
	UBTTcpLink_Channel_eventrfAckRecvJoinClan_Parms parms;

	if ( !prfAckRecvJoinClan )
		prfAckRecvJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRecvJoinClan" );

	parms.UserIdx = UserIdx;
	parms.CharName = CharName;
	parms.ReqMsg = ReqMsg;
	parms.Permit = Permit;
	this->ProcessEvent ( prfAckRecvJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvJoinClan ( int UserIdx, struct FString CharName, struct FString Message )
{
	static UFunction* prfReqRecvJoinClan = 0;
	UBTTcpLink_Channel_eventrfReqRecvJoinClan_Parms parms;

	if ( !prfReqRecvJoinClan )
		prfReqRecvJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvJoinClan" );

	parms.UserIdx = UserIdx;
	parms.CharName = CharName;
	parms.Message = Message;
	this->ProcessEvent ( prfReqRecvJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckJoinClan ( int Result, struct FString ErrMsg, struct FString SpecificCharName, struct FString RealRecvCharName, unsigned char RealRecvCharClanGrade )
{
	static UFunction* prfAckJoinClan = 0;
	UBTTcpLink_Channel_eventrfAckJoinClan_Parms parms;

	if ( !prfAckJoinClan )
		prfAckJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckJoinClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.SpecificCharName = SpecificCharName;
	parms.RealRecvCharName = RealRecvCharName;
	parms.RealRecvCharClanGrade = RealRecvCharClanGrade;
	this->ProcessEvent ( prfAckJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqJoinClan ( struct FString ClanName, struct FString ClanManagerName, struct FString Message )
{
	static UFunction* prfReqJoinClan = 0;
	UBTTcpLink_Channel_eventrfReqJoinClan_Parms parms;

	if ( !prfReqJoinClan )
		prfReqJoinClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqJoinClan" );

	parms.ClanName = ClanName;
	parms.ClanManagerName = ClanManagerName;
	parms.Message = Message;
	this->ProcessEvent ( prfReqJoinClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckInviteClanResult ( struct FString CharName, unsigned char Permit, struct FString ClanNm )
{
	static UFunction* prfAckInviteClanResult = 0;
	UBTTcpLink_Channel_eventrfAckInviteClanResult_Parms parms;

	if ( !prfAckInviteClanResult )
		prfAckInviteClanResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckInviteClanResult" );

	parms.CharName = CharName;
	parms.Permit = Permit;
	parms.ClanNm = ClanNm;
	this->ProcessEvent ( prfAckInviteClanResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRecvClanInviteResult ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckRecvClanInviteResult = 0;
	UBTTcpLink_Channel_eventrfAckRecvClanInviteResult_Parms parms;

	if ( !prfAckRecvClanInviteResult )
		prfAckRecvClanInviteResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRecvClanInviteResult" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckRecvClanInviteResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString InviterMsg, struct FString ClanName, unsigned char Permit )
{
	static UFunction* prfAckRecvClanInvite = 0;
	UBTTcpLink_Channel_eventrfAckRecvClanInvite_Parms parms;

	if ( !prfAckRecvClanInvite )
		prfAckRecvClanInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRecvClanInvite" );

	parms.InviterUserDBID = InviterUserDBID;
	parms.InviterCharname = InviterCharname;
	parms.InviterMsg = InviterMsg;
	parms.ClanName = ClanName;
	parms.Permit = Permit;
	this->ProcessEvent ( prfAckRecvClanInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvClanInvite ( int InviterUserDBID, struct FString InviterCharname, struct FString ClanName, struct FString InviteMsg )
{
	static UFunction* prfReqRecvClanInvite = 0;
	UBTTcpLink_Channel_eventrfReqRecvClanInvite_Parms parms;

	if ( !prfReqRecvClanInvite )
		prfReqRecvClanInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvClanInvite" );

	parms.InviterUserDBID = InviterUserDBID;
	parms.InviterCharname = InviterCharname;
	parms.ClanName = ClanName;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( prfReqRecvClanInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckInviteClan ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckInviteClan = 0;
	UBTTcpLink_Channel_eventrfAckInviteClan_Parms parms;

	if ( !prfAckInviteClan )
		prfAckInviteClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckInviteClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckInviteClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqInviteClan ( struct FString CharName, struct FString InviteMsg )
{
	static UFunction* prfReqInviteClan = 0;
	UBTTcpLink_Channel_eventrfReqInviteClan_Parms parms;

	if ( !prfReqInviteClan )
		prfReqInviteClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqInviteClan" );

	parms.CharName = CharName;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( prfReqInviteClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClanInfo ( struct FClanInfo stClanInfo )
{
	static UFunction* prfAckClanInfo = 0;
	UBTTcpLink_Channel_eventrfAckClanInfo_Parms parms;

	if ( !prfAckClanInfo )
		prfAckClanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClanInfo" );

	parms.stClanInfo = stClanInfo;
	this->ProcessEvent ( prfAckClanInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClanInfo ( struct FString ClanName )
{
	static UFunction* prfReqClanInfo = 0;
	UBTTcpLink_Channel_eventrfReqClanInfo_Parms parms;

	if ( !prfReqClanInfo )
		prfReqClanInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClanInfo" );

	parms.ClanName = ClanName;
	this->ProcessEvent ( prfReqClanInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCreateClan ( int Result, struct FString ErrMsg, struct FBtrDouble ItemIdx, int StackCount )
{
	static UFunction* prfAckCreateClan = 0;
	UBTTcpLink_Channel_eventrfAckCreateClan_Parms parms;

	if ( !prfAckCreateClan )
		prfAckCreateClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCreateClan" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ItemIdx = ItemIdx;
	parms.StackCount = StackCount;
	this->ProcessEvent ( prfAckCreateClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCreateClan ( struct FString ClanName, struct FString ClanURL, struct FString ClanIntro, struct FString ClanKeyword, unsigned char ClanRegion )
{
	static UFunction* prfReqCreateClan = 0;
	UBTTcpLink_Channel_eventrfReqCreateClan_Parms parms;

	if ( !prfReqCreateClan )
		prfReqCreateClan = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCreateClan" );

	parms.ClanName = ClanName;
	parms.ClanURL = ClanURL;
	parms.ClanIntro = ClanIntro;
	parms.ClanKeyword = ClanKeyword;
	parms.ClanRegion = ClanRegion;
	this->ProcessEvent ( prfReqCreateClan, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDupCheckClanName ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckDupCheckClanName = 0;
	UBTTcpLink_Channel_eventrfAckDupCheckClanName_Parms parms;

	if ( !prfAckDupCheckClanName )
		prfAckDupCheckClanName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDupCheckClanName" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckDupCheckClanName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDupCheckClanName ( struct FString ClanNam )
{
	static UFunction* prfReqDupCheckClanName = 0;
	UBTTcpLink_Channel_eventrfReqDupCheckClanName_Parms parms;

	if ( !prfReqDupCheckClanName )
		prfReqDupCheckClanName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDupCheckClanName" );

	parms.ClanNam = ClanNam;
	this->ProcessEvent ( prfReqDupCheckClanName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSellShopItemInfo ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueItemID, int SellPoint, int CurPoint, int AfterPoint )
{
	static UFunction* prfAckSellShopItemInfo = 0;
	UBTTcpLink_Channel_eventrfAckSellShopItemInfo_Parms parms;

	if ( !prfAckSellShopItemInfo )
		prfAckSellShopItemInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSellShopItemInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.SellPoint = SellPoint;
	parms.CurPoint = CurPoint;
	parms.AfterPoint = AfterPoint;
	this->ProcessEvent ( prfAckSellShopItemInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSellShopItemInfo ( struct FBtrDouble UniqueItemID, int Count )
{
	static UFunction* prfReqSellShopItemInfo = 0;
	UBTTcpLink_Channel_eventrfReqSellShopItemInfo_Parms parms;

	if ( !prfReqSellShopItemInfo )
		prfReqSellShopItemInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSellShopItemInfo" );

	parms.UniqueItemID = UniqueItemID;
	parms.Count = Count;
	this->ProcessEvent ( prfReqSellShopItemInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGameOverEnd ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckGameOverEnd = 0;
	UBTTcpLink_Channel_eventrfAckGameOverEnd_Parms parms;

	if ( !prfAckGameOverEnd )
		prfAckGameOverEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGameOverEnd" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckGameOverEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGameOverEnd (  )
{
	static UFunction* prfReqGameOverEnd = 0;
	UBTTcpLink_Channel_eventrfReqGameOverEnd_Parms parms;

	if ( !prfReqGameOverEnd )
		prfReqGameOverEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGameOverEnd" );

	this->ProcessEvent ( prfReqGameOverEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionItemListCount ( int Result, struct FString ErrMsg, unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade, int Count )
{
	static UFunction* prfAckAuctionItemListCount = 0;
	UBTTcpLink_Channel_eventrfAckAuctionItemListCount_Parms parms;

	if ( !prfAckAuctionItemListCount )
		prfAckAuctionItemListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionItemListCount" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Section = Section;
	parms.Classfy = Classfy;
	parms.ItemType = ItemType;
	parms.ItemGrade = ItemGrade;
	parms.Count = Count;
	this->ProcessEvent ( prfAckAuctionItemListCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAuctionItemListCount ( unsigned char Section, unsigned char Classfy, int ItemType, int ItemGrade )
{
	static UFunction* prfReqAuctionItemListCount = 0;
	UBTTcpLink_Channel_eventrfReqAuctionItemListCount_Parms parms;

	if ( !prfReqAuctionItemListCount )
		prfReqAuctionItemListCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAuctionItemListCount" );

	parms.Section = Section;
	parms.Classfy = Classfy;
	parms.ItemType = ItemType;
	parms.ItemGrade = ItemGrade;
	this->ProcessEvent ( prfReqAuctionItemListCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckServerTime ( int Time )
{
	static UFunction* prfAckServerTime = 0;
	UBTTcpLink_Channel_eventrfAckServerTime_Parms parms;

	if ( !prfAckServerTime )
		prfAckServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckServerTime" );

	parms.Time = Time;
	this->ProcessEvent ( prfAckServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqServerTime (  )
{
	static UFunction* prfReqServerTime = 0;
	UBTTcpLink_Channel_eventrfReqServerTime_Parms parms;

	if ( !prfReqServerTime )
		prfReqServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqServerTime" );

	this->ProcessEvent ( prfReqServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEntryQSlotIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< int > MWItemID, class TArray< int > MWPartID, class TArray< int > MWPaintID, class TArray< int > PistolItemID, class TArray< int > PistolPartID, class TArray< int > PistolPaintID, class TArray< int > TWItemID1, class TArray< int > TWItemID2, class TArray< int > Skill1ID, class TArray< int > Skill2ID, class TArray< int > Skill3ID, class TArray< int > Skill4ID )
{
	static UFunction* prfAckEntryQSlotIDList = 0;
	UBTTcpLink_Channel_eventrfAckEntryQSlotIDList_Parms parms;

	if ( !prfAckEntryQSlotIDList )
		prfAckEntryQSlotIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEntryQSlotIDList" );

	parms.UserNum = UserNum;
	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWItemID = MWItemID;
	parms.MWPartID = MWPartID;
	parms.MWPaintID = MWPaintID;
	parms.PistolItemID = PistolItemID;
	parms.PistolPartID = PistolPartID;
	parms.PistolPaintID = PistolPaintID;
	parms.TWItemID1 = TWItemID1;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1ID = Skill1ID;
	parms.Skill2ID = Skill2ID;
	parms.Skill3ID = Skill3ID;
	parms.Skill4ID = Skill4ID;
	this->ProcessEvent ( prfAckEntryQSlotIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEntryQSlotIDList ( int UserNum )
{
	static UFunction* prfReqEntryQSlotIDList = 0;
	UBTTcpLink_Channel_eventrfReqEntryQSlotIDList_Parms parms;

	if ( !prfReqEntryQSlotIDList )
		prfReqEntryQSlotIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEntryQSlotIDList" );

	parms.UserNum = UserNum;
	this->ProcessEvent ( prfReqEntryQSlotIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEntryQSlotUniqueIDList ( int UserNum, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWUniqueID, class TArray< struct FBtrDouble > PistolUniqueID, class TArray< struct FBtrDouble > TW1UniqueID, class TArray< struct FBtrDouble > TW2UniqueID )
{
	static UFunction* prfAckEntryQSlotUniqueIDList = 0;
	UBTTcpLink_Channel_eventrfAckEntryQSlotUniqueIDList_Parms parms;

	if ( !prfAckEntryQSlotUniqueIDList )
		prfAckEntryQSlotUniqueIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEntryQSlotUniqueIDList" );

	parms.UserNum = UserNum;
	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWUniqueID = MWUniqueID;
	parms.PistolUniqueID = PistolUniqueID;
	parms.TW1UniqueID = TW1UniqueID;
	parms.TW2UniqueID = TW2UniqueID;
	this->ProcessEvent ( prfAckEntryQSlotUniqueIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEntryQSlotUniqueIDList ( int UserNum )
{
	static UFunction* prfReqEntryQSlotUniqueIDList = 0;
	UBTTcpLink_Channel_eventrfReqEntryQSlotUniqueIDList_Parms parms;

	if ( !prfReqEntryQSlotUniqueIDList )
		prfReqEntryQSlotUniqueIDList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEntryQSlotUniqueIDList" );

	parms.UserNum = UserNum;
	this->ProcessEvent ( prfReqEntryQSlotUniqueIDList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionBidding ( int Result, struct FString ErrMsg, int PointRemain )
{
	static UFunction* prfAckAuctionBidding = 0;
	UBTTcpLink_Channel_eventrfAckAuctionBidding_Parms parms;

	if ( !prfAckAuctionBidding )
		prfAckAuctionBidding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionBidding" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	this->ProcessEvent ( prfAckAuctionBidding, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAuctionBidding ( int UniqueID, int BiddingPrice )
{
	static UFunction* prfReqAuctionBidding = 0;
	UBTTcpLink_Channel_eventrfReqAuctionBidding_Parms parms;

	if ( !prfReqAuctionBidding )
		prfReqAuctionBidding = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAuctionBidding" );

	parms.UniqueID = UniqueID;
	parms.BiddingPrice = BiddingPrice;
	this->ProcessEvent ( prfReqAuctionBidding, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionInstantlyBuying ( int Result, struct FString ErrMsg, int PointRemain )
{
	static UFunction* prfAckAuctionInstantlyBuying = 0;
	UBTTcpLink_Channel_eventrfAckAuctionInstantlyBuying_Parms parms;

	if ( !prfAckAuctionInstantlyBuying )
		prfAckAuctionInstantlyBuying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionInstantlyBuying" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	this->ProcessEvent ( prfAckAuctionInstantlyBuying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAuctionInstantlyBuying ( int UniqueID )
{
	static UFunction* prfReqAuctionInstantlyBuying = 0;
	UBTTcpLink_Channel_eventrfReqAuctionInstantlyBuying_Parms parms;

	if ( !prfReqAuctionInstantlyBuying )
		prfReqAuctionInstantlyBuying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAuctionInstantlyBuying" );

	parms.UniqueID = UniqueID;
	this->ProcessEvent ( prfReqAuctionInstantlyBuying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionItemListEnd ( unsigned char Section )
{
	static UFunction* prfAckAuctionItemListEnd = 0;
	UBTTcpLink_Channel_eventrfAckAuctionItemListEnd_Parms parms;

	if ( !prfAckAuctionItemListEnd )
		prfAckAuctionItemListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionItemListEnd" );

	parms.Section = Section;
	this->ProcessEvent ( prfAckAuctionItemListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionItemList ( unsigned char Section, class TArray< int > UniqueIDs, class TArray< int > ItemIDs, class TArray< int > AddPartsIDs, class TArray< struct FBtrDouble > UntilTimes, class TArray< int > BiddingPrices, class TArray< int > InstantlyByuingPrices, class TArray< int > ItemDamageds, class TArray< struct FString > HighestBidderNames, class TArray< struct FString > SellerNames, class TArray< int > ItemCount )
{
	static UFunction* prfAckAuctionItemList = 0;
	UBTTcpLink_Channel_eventrfAckAuctionItemList_Parms parms;

	if ( !prfAckAuctionItemList )
		prfAckAuctionItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionItemList" );

	parms.Section = Section;
	parms.UniqueIDs = UniqueIDs;
	parms.ItemIDs = ItemIDs;
	parms.AddPartsIDs = AddPartsIDs;
	parms.UntilTimes = UntilTimes;
	parms.BiddingPrices = BiddingPrices;
	parms.InstantlyByuingPrices = InstantlyByuingPrices;
	parms.ItemDamageds = ItemDamageds;
	parms.HighestBidderNames = HighestBidderNames;
	parms.SellerNames = SellerNames;
	parms.ItemCount = ItemCount;
	this->ProcessEvent ( prfAckAuctionItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionItemListStart ( int Result, struct FString ErrMsg, unsigned char Section, int PageNum, int Count )
{
	static UFunction* prfAckAuctionItemListStart = 0;
	UBTTcpLink_Channel_eventrfAckAuctionItemListStart_Parms parms;

	if ( !prfAckAuctionItemListStart )
		prfAckAuctionItemListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionItemListStart" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Section = Section;
	parms.PageNum = PageNum;
	parms.Count = Count;
	this->ProcessEvent ( prfAckAuctionItemListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAuctionItemList ( unsigned char Section, struct FString Keyword, int ItemRank, unsigned char ItemClassfy, unsigned char IsAvailable, int PageNum, int Count, int SortOpt )
{
	static UFunction* prfReqAuctionItemList = 0;
	UBTTcpLink_Channel_eventrfReqAuctionItemList_Parms parms;

	if ( !prfReqAuctionItemList )
		prfReqAuctionItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAuctionItemList" );

	parms.Section = Section;
	parms.Keyword = Keyword;
	parms.ItemRank = ItemRank;
	parms.ItemClassfy = ItemClassfy;
	parms.IsAvailable = IsAvailable;
	parms.PageNum = PageNum;
	parms.Count = Count;
	parms.SortOpt = SortOpt;
	this->ProcessEvent ( prfReqAuctionItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionMyItemCancel ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckAuctionMyItemCancel = 0;
	UBTTcpLink_Channel_eventrfAckAuctionMyItemCancel_Parms parms;

	if ( !prfAckAuctionMyItemCancel )
		prfAckAuctionMyItemCancel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionMyItemCancel" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckAuctionMyItemCancel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAuctionMyItemCancel ( int UniqueID )
{
	static UFunction* prfReqAuctionMyItemCancel = 0;
	UBTTcpLink_Channel_eventrfReqAuctionMyItemCancel_Parms parms;

	if ( !prfReqAuctionMyItemCancel )
		prfReqAuctionMyItemCancel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAuctionMyItemCancel" );

	parms.UniqueID = UniqueID;
	this->ProcessEvent ( prfReqAuctionMyItemCancel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAuctionMyItemRegister ( int Result, struct FString ErrMsg, int BeginPrice, int BuyPrice, int GuarantyPoint, int PointRemain )
{
	static UFunction* prfAckAuctionMyItemRegister = 0;
	UBTTcpLink_Channel_eventrfAckAuctionMyItemRegister_Parms parms;

	if ( !prfAckAuctionMyItemRegister )
		prfAckAuctionMyItemRegister = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAuctionMyItemRegister" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.BeginPrice = BeginPrice;
	parms.BuyPrice = BuyPrice;
	parms.GuarantyPoint = GuarantyPoint;
	parms.PointRemain = PointRemain;
	this->ProcessEvent ( prfAckAuctionMyItemRegister, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAuctionMyItemRegister ( struct FBtrDouble UniqueID, int ItemCount, int BeginPrice, int PeriodHour, int InstantlyBuyingPrice )
{
	static UFunction* prfReqAuctionMyItemRegister = 0;
	UBTTcpLink_Channel_eventrfReqAuctionMyItemRegister_Parms parms;

	if ( !prfReqAuctionMyItemRegister )
		prfReqAuctionMyItemRegister = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAuctionMyItemRegister" );

	parms.UniqueID = UniqueID;
	parms.ItemCount = ItemCount;
	parms.BeginPrice = BeginPrice;
	parms.PeriodHour = PeriodHour;
	parms.InstantlyBuyingPrice = InstantlyBuyingPrice;
	this->ProcessEvent ( prfReqAuctionMyItemRegister, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckMyMoney ( int Result, struct FString ErrMsg, int Point, int Cash )
{
	static UFunction* prfAckMyMoney = 0;
	UBTTcpLink_Channel_eventrfAckMyMoney_Parms parms;

	if ( !prfAckMyMoney )
		prfAckMyMoney = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckMyMoney" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Point = Point;
	parms.Cash = Cash;
	this->ProcessEvent ( prfAckMyMoney, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqMyMoney (  )
{
	static UFunction* prfReqMyMoney = 0;
	UBTTcpLink_Channel_eventrfReqMyMoney_Parms parms;

	if ( !prfReqMyMoney )
		prfReqMyMoney = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqMyMoney" );

	this->ProcessEvent ( prfReqMyMoney, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckUpdateQSlot ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckUpdateQSlot = 0;
	UBTTcpLink_Channel_eventrfAckUpdateQSlot_Parms parms;

	if ( !prfAckUpdateQSlot )
		prfAckUpdateQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckUpdateQSlot" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckUpdateQSlot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqUpdateQSlot ( int QSlotID, struct FString QSlotName, struct FBtrDouble MWItemID, struct FBtrDouble PistolItemID, struct FBtrDouble TWItemID1, struct FBtrDouble TWItemID2, int Skill1, int Skill2, int Skill3, int Skill4 )
{
	static UFunction* prfReqUpdateQSlot = 0;
	UBTTcpLink_Channel_eventrfReqUpdateQSlot_Parms parms;

	if ( !prfReqUpdateQSlot )
		prfReqUpdateQSlot = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqUpdateQSlot" );

	parms.QSlotID = QSlotID;
	parms.QSlotName = QSlotName;
	parms.MWItemID = MWItemID;
	parms.PistolItemID = PistolItemID;
	parms.TWItemID1 = TWItemID1;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1 = Skill1;
	parms.Skill2 = Skill2;
	parms.Skill3 = Skill3;
	parms.Skill4 = Skill4;
	this->ProcessEvent ( prfReqUpdateQSlot, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckQSlotList ( int Result, struct FString ErrMsg, class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 )
{
	static UFunction* prfAckQSlotList = 0;
	UBTTcpLink_Channel_eventrfAckQSlotList_Parms parms;

	if ( !prfAckQSlotList )
		prfAckQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckQSlotList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.QSlotID = QSlotID;
	parms.QSlotName = QSlotName;
	parms.QSlotDispOrder = QSlotDispOrder;
	parms.MWItemID = MWItemID;
	parms.PistolItemID = PistolItemID;
	parms.TWItemID1 = TWItemID1;
	parms.TWItemID2 = TWItemID2;
	parms.Skill1 = Skill1;
	parms.Skill2 = Skill2;
	parms.Skill3 = Skill3;
	parms.Skill4 = Skill4;
	this->ProcessEvent ( prfAckQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqQSlotList (  )
{
	static UFunction* prfReqQSlotList = 0;
	UBTTcpLink_Channel_eventrfReqQSlotList_Parms parms;

	if ( !prfReqQSlotList )
		prfReqQSlotList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqQSlotList" );

	this->ProcessEvent ( prfReqQSlotList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRepairItem ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, int RepairCost, class TArray< int > DamageDegree )
{
	static UFunction* prfAckRepairItem = 0;
	UBTTcpLink_Channel_eventrfAckRepairItem_Parms parms;

	if ( !prfAckRepairItem )
		prfAckRepairItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRepairItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.RepairCost = RepairCost;
	parms.DamageDegree = DamageDegree;
	this->ProcessEvent ( prfAckRepairItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRepairItem ( class TArray< struct FBtrDouble > UniqueItemID )
{
	static UFunction* prfReqRepairItem = 0;
	UBTTcpLink_Channel_eventrfReqRepairItem_Parms parms;

	if ( !prfReqRepairItem )
		prfReqRepairItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRepairItem" );

	parms.UniqueItemID = UniqueItemID;
	this->ProcessEvent ( prfReqRepairItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRepairCost ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > RepairCost )
{
	static UFunction* prfAckRepairCost = 0;
	UBTTcpLink_Channel_eventrfAckRepairCost_Parms parms;

	if ( !prfAckRepairCost )
		prfAckRepairCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRepairCost" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.RepairCost = RepairCost;
	this->ProcessEvent ( prfAckRepairCost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRepairCost ( class TArray< struct FBtrDouble > UniqueItemID )
{
	static UFunction* prfReqRepairCost = 0;
	UBTTcpLink_Channel_eventrfReqRepairCost_Parms parms;

	if ( !prfReqRepairCost )
		prfReqRepairCost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRepairCost" );

	parms.UniqueItemID = UniqueItemID;
	this->ProcessEvent ( prfReqRepairCost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckUpdateWeaponDurability ( int Result, struct FString ErrMsg, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > Durability, class TArray< unsigned char > IsDestroy, class TArray< struct FBtrDouble > FailedWeaponUniqueID )
{
	static UFunction* prfAckUpdateWeaponDurability = 0;
	UBTTcpLink_Channel_eventrfAckUpdateWeaponDurability_Parms parms;

	if ( !prfAckUpdateWeaponDurability )
		prfAckUpdateWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckUpdateWeaponDurability" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueItemID = UniqueItemID;
	parms.Durability = Durability;
	parms.IsDestroy = IsDestroy;
	parms.FailedWeaponUniqueID = FailedWeaponUniqueID;
	this->ProcessEvent ( prfAckUpdateWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqUpdateWeaponDurability ( int TotalPlayTime, class TArray< int > OwnerID, class TArray< int > Number, class TArray< struct FBtrDouble > UniqueItemID, class TArray< int > UsingSec, class TArray< int > UsingRoundInSD )
{
	static UFunction* prfReqUpdateWeaponDurability = 0;
	UBTTcpLink_Channel_eventrfReqUpdateWeaponDurability_Parms parms;

	if ( !prfReqUpdateWeaponDurability )
		prfReqUpdateWeaponDurability = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqUpdateWeaponDurability" );

	parms.TotalPlayTime = TotalPlayTime;
	parms.OwnerID = OwnerID;
	parms.Number = Number;
	parms.UniqueItemID = UniqueItemID;
	parms.UsingSec = UsingSec;
	parms.UsingRoundInSD = UsingRoundInSD;
	this->ProcessEvent ( prfReqUpdateWeaponDurability, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckModifyWeapon ( int Result, struct FString ErrMsg, struct FBtrDouble UniqueID, int AddPartID, int PaintID, int Point, int Cash )
{
	static UFunction* prfAckModifyWeapon = 0;
	UBTTcpLink_Channel_eventrfAckModifyWeapon_Parms parms;

	if ( !prfAckModifyWeapon )
		prfAckModifyWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckModifyWeapon" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UniqueID = UniqueID;
	parms.AddPartID = AddPartID;
	parms.PaintID = PaintID;
	parms.Point = Point;
	parms.Cash = Cash;
	this->ProcessEvent ( prfAckModifyWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqModifyWeapon ( struct FBtrDouble UniqueID, int AddPartID, int PaintID )
{
	static UFunction* prfReqModifyWeapon = 0;
	UBTTcpLink_Channel_eventrfReqModifyWeapon_Parms parms;

	if ( !prfReqModifyWeapon )
		prfReqModifyWeapon = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqModifyWeapon" );

	parms.UniqueID = UniqueID;
	parms.AddPartID = AddPartID;
	parms.PaintID = PaintID;
	this->ProcessEvent ( prfReqModifyWeapon, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSellShopItem ( int Result, struct FString ErrMsg, int PointRemain, int CashRemain, int Count )
{
	static UFunction* prfAckSellShopItem = 0;
	UBTTcpLink_Channel_eventrfAckSellShopItem_Parms parms;

	if ( !prfAckSellShopItem )
		prfAckSellShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSellShopItem" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PointRemain = PointRemain;
	parms.CashRemain = CashRemain;
	parms.Count = Count;
	this->ProcessEvent ( prfAckSellShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSellShopItem ( struct FBtrDouble ItemUniqueID, int Count )
{
	static UFunction* prfReqSellShopItem = 0;
	UBTTcpLink_Channel_eventrfReqSellShopItem_Parms parms;

	if ( !prfReqSellShopItem )
		prfReqSellShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSellShopItem" );

	parms.ItemUniqueID = ItemUniqueID;
	parms.Count = Count;
	this->ProcessEvent ( prfReqSellShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckBuyShopItem ( int ItemCount, class TArray< int > Result, class TArray< int > BoughtItemTypeID, class TArray< struct FBtrDouble > BoughtItemUniqueID, class TArray< int > BoughtPartID, class TArray< struct FBtrDouble > BoughtUntilTIme, class TArray< int > BoughtStackCnt, int PointRemain, int CashRemain )
{
	static UFunction* prfAckBuyShopItem = 0;
	UBTTcpLink_Channel_eventrfAckBuyShopItem_Parms parms;

	if ( !prfAckBuyShopItem )
		prfAckBuyShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckBuyShopItem" );

	parms.ItemCount = ItemCount;
	parms.Result = Result;
	parms.BoughtItemTypeID = BoughtItemTypeID;
	parms.BoughtItemUniqueID = BoughtItemUniqueID;
	parms.BoughtPartID = BoughtPartID;
	parms.BoughtUntilTIme = BoughtUntilTIme;
	parms.BoughtStackCnt = BoughtStackCnt;
	parms.PointRemain = PointRemain;
	parms.CashRemain = CashRemain;
	this->ProcessEvent ( prfAckBuyShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqBuyShopItem ( int ItemID, struct FBtrDouble ItemUniqueID, unsigned char BuyOption1, unsigned char BuyOption2 )
{
	static UFunction* prfReqBuyShopItem = 0;
	UBTTcpLink_Channel_eventrfReqBuyShopItem_Parms parms;

	if ( !prfReqBuyShopItem )
		prfReqBuyShopItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqBuyShopItem" );

	parms.ItemID = ItemID;
	parms.ItemUniqueID = ItemUniqueID;
	parms.BuyOption1 = BuyOption1;
	parms.BuyOption2 = BuyOption2;
	this->ProcessEvent ( prfReqBuyShopItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckShopItemListEnd (  )
{
	static UFunction* prfAckShopItemListEnd = 0;
	UBTTcpLink_Channel_eventrfAckShopItemListEnd_Parms parms;

	if ( !prfAckShopItemListEnd )
		prfAckShopItemListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckShopItemListEnd" );

	this->ProcessEvent ( prfAckShopItemListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckShopItemList ( class TArray< int > ItemID )
{
	static UFunction* prfAckShopItemList = 0;
	UBTTcpLink_Channel_eventrfAckShopItemList_Parms parms;

	if ( !prfAckShopItemList )
		prfAckShopItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckShopItemList" );

	parms.ItemID = ItemID;
	this->ProcessEvent ( prfAckShopItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckShopItemListStart ( int Count )
{
	static UFunction* prfAckShopItemListStart = 0;
	UBTTcpLink_Channel_eventrfAckShopItemListStart_Parms parms;

	if ( !prfAckShopItemListStart )
		prfAckShopItemListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckShopItemListStart" );

	parms.Count = Count;
	this->ProcessEvent ( prfAckShopItemListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqShopItemList (  )
{
	static UFunction* prfReqShopItemList = 0;
	UBTTcpLink_Channel_eventrfReqShopItemList_Parms parms;

	if ( !prfReqShopItemList )
		prfReqShopItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqShopItemList" );

	this->ProcessEvent ( prfReqShopItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckForceGameOver ( int UserID, int GameRoomNumber, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckForceGameOver = 0;
	UBTTcpLink_Channel_eventrfAckForceGameOver_Parms parms;

	if ( !prfAckForceGameOver )
		prfAckForceGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckForceGameOver" );

	parms.UserID = UserID;
	parms.GameRoomNumber = GameRoomNumber;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckForceGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqForceGameOver (  )
{
	static UFunction* prfReqForceGameOver = 0;
	UBTTcpLink_Channel_eventrfReqForceGameOver_Parms parms;

	if ( !prfReqForceGameOver )
		prfReqForceGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqForceGameOver" );

	this->ProcessEvent ( prfReqForceGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGiveSkill ( int SkillID, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckGiveSkill = 0;
	UBTTcpLink_Channel_eventrfAckGiveSkill_Parms parms;

	if ( !prfAckGiveSkill )
		prfAckGiveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGiveSkill" );

	parms.SkillID = SkillID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckGiveSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGiveSkill (  )
{
	static UFunction* prfReqGiveSkill = 0;
	UBTTcpLink_Channel_eventrfReqGiveSkill_Parms parms;

	if ( !prfReqGiveSkill )
		prfReqGiveSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGiveSkill" );

	this->ProcessEvent ( prfReqGiveSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyExpiredItemIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredItemUniqueIDs, class TArray< int > ExpiredItemIDs, class TArray< int > ExpiredItemPartIDs, class TArray< unsigned char > ExpiredItemSlotPos, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckNotifyExpiredItemIDs = 0;
	UBTTcpLink_Channel_eventrfAckNotifyExpiredItemIDs_Parms parms;

	if ( !prfAckNotifyExpiredItemIDs )
		prfAckNotifyExpiredItemIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyExpiredItemIDs" );

	parms.UserID = UserID;
	parms.ExpiredItemUniqueIDs = ExpiredItemUniqueIDs;
	parms.ExpiredItemIDs = ExpiredItemIDs;
	parms.ExpiredItemPartIDs = ExpiredItemPartIDs;
	parms.ExpiredItemSlotPos = ExpiredItemSlotPos;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckNotifyExpiredItemIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyExpiredItemIDs (  )
{
	static UFunction* prfReqNotifyExpiredItemIDs = 0;
	UBTTcpLink_Channel_eventrfReqNotifyExpiredItemIDs_Parms parms;

	if ( !prfReqNotifyExpiredItemIDs )
		prfReqNotifyExpiredItemIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyExpiredItemIDs" );

	this->ProcessEvent ( prfReqNotifyExpiredItemIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyExpiredSkillIDs ( int UserID, class TArray< struct FBtrDouble > ExpiredSkillUniqueIDs, class TArray< int > ExpiredSkillIDs, int Result, struct FString ErrMsg, class TArray< unsigned char > ExpiredSkillSlotPositions )
{
	static UFunction* prfAckNotifyExpiredSkillIDs = 0;
	UBTTcpLink_Channel_eventrfAckNotifyExpiredSkillIDs_Parms parms;

	if ( !prfAckNotifyExpiredSkillIDs )
		prfAckNotifyExpiredSkillIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyExpiredSkillIDs" );

	parms.UserID = UserID;
	parms.ExpiredSkillUniqueIDs = ExpiredSkillUniqueIDs;
	parms.ExpiredSkillIDs = ExpiredSkillIDs;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ExpiredSkillSlotPositions = ExpiredSkillSlotPositions;
	this->ProcessEvent ( prfAckNotifyExpiredSkillIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyExpiredSkillIDs (  )
{
	static UFunction* prfReqNotifyExpiredSkillIDs = 0;
	UBTTcpLink_Channel_eventrfReqNotifyExpiredSkillIDs_Parms parms;

	if ( !prfReqNotifyExpiredSkillIDs )
		prfReqNotifyExpiredSkillIDs = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyExpiredSkillIDs" );

	this->ProcessEvent ( prfReqNotifyExpiredSkillIDs, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyChangedSkillState ( int UserID, class TArray< int > SkillIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckNotifyChangedSkillState = 0;
	UBTTcpLink_Channel_eventrfAckNotifyChangedSkillState_Parms parms;

	if ( !prfAckNotifyChangedSkillState )
		prfAckNotifyChangedSkillState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyChangedSkillState" );

	parms.UserID = UserID;
	parms.SkillIDs = SkillIDs;
	parms.NewStates = NewStates;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckNotifyChangedSkillState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyChangedSkillState (  )
{
	static UFunction* prfReqNotifyChangedSkillState = 0;
	UBTTcpLink_Channel_eventrfReqNotifyChangedSkillState_Parms parms;

	if ( !prfReqNotifyChangedSkillState )
		prfReqNotifyChangedSkillState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyChangedSkillState" );

	this->ProcessEvent ( prfReqNotifyChangedSkillState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyChangedItemState ( int UserID, class TArray< int > ItemIDs, class TArray< unsigned char > NewStates, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckNotifyChangedItemState = 0;
	UBTTcpLink_Channel_eventrfAckNotifyChangedItemState_Parms parms;

	if ( !prfAckNotifyChangedItemState )
		prfAckNotifyChangedItemState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyChangedItemState" );

	parms.UserID = UserID;
	parms.ItemIDs = ItemIDs;
	parms.NewStates = NewStates;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckNotifyChangedItemState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyChangedItemState (  )
{
	static UFunction* prfReqNotifyChangedItemState = 0;
	UBTTcpLink_Channel_eventrfReqNotifyChangedItemState_Parms parms;

	if ( !prfReqNotifyChangedItemState )
		prfReqNotifyChangedItemState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyChangedItemState" );

	this->ProcessEvent ( prfReqNotifyChangedItemState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckConfirmSkillChanged ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckConfirmSkillChanged = 0;
	UBTTcpLink_Channel_eventrfAckConfirmSkillChanged_Parms parms;

	if ( !prfAckConfirmSkillChanged )
		prfAckConfirmSkillChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckConfirmSkillChanged" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckConfirmSkillChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqConfirmSkillChanged (  )
{
	static UFunction* prfReqConfirmSkillChanged = 0;
	UBTTcpLink_Channel_eventrfReqConfirmSkillChanged_Parms parms;

	if ( !prfReqConfirmSkillChanged )
		prfReqConfirmSkillChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqConfirmSkillChanged" );

	this->ProcessEvent ( prfReqConfirmSkillChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEquipSkill ( int ChangedNewSkillID, int ChangedNewSkillUniqueID, unsigned char ChangedNewSlotPosition, int ChangedOldSkillID, int ChangedOldSkillUniqueID, unsigned char ChangedOldSlotPosition, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckEquipSkill = 0;
	UBTTcpLink_Channel_eventrfAckEquipSkill_Parms parms;

	if ( !prfAckEquipSkill )
		prfAckEquipSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEquipSkill" );

	parms.ChangedNewSkillID = ChangedNewSkillID;
	parms.ChangedNewSkillUniqueID = ChangedNewSkillUniqueID;
	parms.ChangedNewSlotPosition = ChangedNewSlotPosition;
	parms.ChangedOldSkillID = ChangedOldSkillID;
	parms.ChangedOldSkillUniqueID = ChangedOldSkillUniqueID;
	parms.ChangedOldSlotPosition = ChangedOldSlotPosition;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckEquipSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEquipSkill ( int SkillID, int SkillUniqueID, unsigned char NewSlotPosition )
{
	static UFunction* prfReqEquipSkill = 0;
	UBTTcpLink_Channel_eventrfReqEquipSkill_Parms parms;

	if ( !prfReqEquipSkill )
		prfReqEquipSkill = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEquipSkill" );

	parms.SkillID = SkillID;
	parms.SkillUniqueID = SkillUniqueID;
	parms.NewSlotPosition = NewSlotPosition;
	this->ProcessEvent ( prfReqEquipSkill, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckUserSkillListEnd (  )
{
	static UFunction* prfAckUserSkillListEnd = 0;
	UBTTcpLink_Channel_eventrfAckUserSkillListEnd_Parms parms;

	if ( !prfAckUserSkillListEnd )
		prfAckUserSkillListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckUserSkillListEnd" );

	this->ProcessEvent ( prfAckUserSkillListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckUserSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition )
{
	static UFunction* prfAckUserSkillList = 0;
	UBTTcpLink_Channel_eventrfAckUserSkillList_Parms parms;

	if ( !prfAckUserSkillList )
		prfAckUserSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckUserSkillList" );

	parms.UniqueSkillID = UniqueSkillID;
	parms.SkillID = SkillID;
	parms.UntilTime = UntilTime;
	parms.SlotPosition = SlotPosition;
	this->ProcessEvent ( prfAckUserSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckUserSkillListStart ( int Count, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckUserSkillListStart = 0;
	UBTTcpLink_Channel_eventrfAckUserSkillListStart_Parms parms;

	if ( !prfAckUserSkillListStart )
		prfAckUserSkillListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckUserSkillListStart" );

	parms.Count = Count;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckUserSkillListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqUserSkillList ( int UserID )
{
	static UFunction* prfReqUserSkillList = 0;
	UBTTcpLink_Channel_eventrfReqUserSkillList_Parms parms;

	if ( !prfReqUserSkillList )
		prfReqUserSkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqUserSkillList" );

	parms.UserID = UserID;
	this->ProcessEvent ( prfReqUserSkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDelMemo ( int Result, struct FString ErrMsg, class TArray< int > FailedMemoID )
{
	static UFunction* prfAckDelMemo = 0;
	UBTTcpLink_Channel_eventrfAckDelMemo_Parms parms;

	if ( !prfAckDelMemo )
		prfAckDelMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDelMemo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.FailedMemoID = FailedMemoID;
	this->ProcessEvent ( prfAckDelMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDelMemo ( class TArray< int > MemoIdx, unsigned char Type )
{
	static UFunction* prfReqDelMemo = 0;
	UBTTcpLink_Channel_eventrfReqDelMemo_Parms parms;

	if ( !prfReqDelMemo )
		prfReqDelMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDelMemo" );

	parms.MemoIdx = MemoIdx;
	parms.Type = Type;
	this->ProcessEvent ( prfReqDelMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckReadMemo ( struct FString cnameFrom, struct FString Text, struct FString dateRecv, struct FBtrDouble ItemUID )
{
	static UFunction* prfAckReadMemo = 0;
	UBTTcpLink_Channel_eventrfAckReadMemo_Parms parms;

	if ( !prfAckReadMemo )
		prfAckReadMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckReadMemo" );

	parms.cnameFrom = cnameFrom;
	parms.Text = Text;
	parms.dateRecv = dateRecv;
	parms.ItemUID = ItemUID;
	this->ProcessEvent ( prfAckReadMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqReadMemo ( int MemoIdx )
{
	static UFunction* prfReqReadMemo = 0;
	UBTTcpLink_Channel_eventrfReqReadMemo_Parms parms;

	if ( !prfReqReadMemo )
		prfReqReadMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqReadMemo" );

	parms.MemoIdx = MemoIdx;
	this->ProcessEvent ( prfReqReadMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEndMemoList (  )
{
	static UFunction* prfAckEndMemoList = 0;
	UBTTcpLink_Channel_eventrfAckEndMemoList_Parms parms;

	if ( !prfAckEndMemoList )
		prfAckEndMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEndMemoList" );

	this->ProcessEvent ( prfAckEndMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckMemoList ( class TArray< int > MemoIdx, class TArray< struct FString > cnameFrom, class TArray< struct FString > dateRecv, class TArray< struct FString > Text, class TArray< unsigned char > Status, class TArray< int > UntilExpire, class TArray< struct FBtrDouble > ItemUID, class TArray< int > ItemID, class TArray< unsigned char > MsgType, class TArray< int > ItemPartID )
{
	static UFunction* prfAckMemoList = 0;
	UBTTcpLink_Channel_eventrfAckMemoList_Parms parms;

	if ( !prfAckMemoList )
		prfAckMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckMemoList" );

	parms.MemoIdx = MemoIdx;
	parms.cnameFrom = cnameFrom;
	parms.dateRecv = dateRecv;
	parms.Text = Text;
	parms.Status = Status;
	parms.UntilExpire = UntilExpire;
	parms.ItemUID = ItemUID;
	parms.ItemID = ItemID;
	parms.MsgType = MsgType;
	parms.ItemPartID = ItemPartID;
	this->ProcessEvent ( prfAckMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckStartMemoList ( int Result, struct FString ErrMsg, unsigned char Type, int TotalCount )
{
	static UFunction* prfAckStartMemoList = 0;
	UBTTcpLink_Channel_eventrfAckStartMemoList_Parms parms;

	if ( !prfAckStartMemoList )
		prfAckStartMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckStartMemoList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Type = Type;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckStartMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqMemoList ( unsigned char Type, unsigned char MemoType )
{
	static UFunction* prfReqMemoList = 0;
	UBTTcpLink_Channel_eventrfReqMemoList_Parms parms;

	if ( !prfReqMemoList )
		prfReqMemoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqMemoList" );

	parms.Type = Type;
	parms.MemoType = MemoType;
	this->ProcessEvent ( prfReqMemoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvMemo ( struct FString cnameFrom, unsigned char MemoType )
{
	static UFunction* prfReqRecvMemo = 0;
	UBTTcpLink_Channel_eventrfReqRecvMemo_Parms parms;

	if ( !prfReqRecvMemo )
		prfReqRecvMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvMemo" );

	parms.cnameFrom = cnameFrom;
	parms.MemoType = MemoType;
	this->ProcessEvent ( prfReqRecvMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSendMemo ( class TArray< struct FString > CnamesToFail, class TArray< int > ResultArray )
{
	static UFunction* prfAckSendMemo = 0;
	UBTTcpLink_Channel_eventrfAckSendMemo_Parms parms;

	if ( !prfAckSendMemo )
		prfAckSendMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSendMemo" );

	parms.CnamesToFail = CnamesToFail;
	parms.ResultArray = ResultArray;
	this->ProcessEvent ( prfAckSendMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSendMemo ( class TArray< struct FString > cnames, struct FString Msg, int ItemUID )
{
	static UFunction* prfReqSendMemo = 0;
	UBTTcpLink_Channel_eventrfReqSendMemo_Parms parms;

	if ( !prfReqSendMemo )
		prfReqSendMemo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSendMemo" );

	parms.cnames = cnames;
	parms.Msg = Msg;
	parms.ItemUID = ItemUID;
	this->ProcessEvent ( prfReqSendMemo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvChatWispher ( struct FString CharnameFrom, struct FString Message )
{
	static UFunction* prfReqRecvChatWispher = 0;
	UBTTcpLink_Channel_eventrfReqRecvChatWispher_Parms parms;

	if ( !prfReqRecvChatWispher )
		prfReqRecvChatWispher = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvChatWispher" );

	parms.CharnameFrom = CharnameFrom;
	parms.Message = Message;
	this->ProcessEvent ( prfReqRecvChatWispher, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChatWispher ( int Result, struct FString ErrMsg, struct FString ToCharName )
{
	static UFunction* prfAckChatWispher = 0;
	UBTTcpLink_Channel_eventrfAckChatWispher_Parms parms;

	if ( !prfAckChatWispher )
		prfAckChatWispher = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChatWispher" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ToCharName = ToCharName;
	this->ProcessEvent ( prfAckChatWispher, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChatWispher ( struct FString CharName, struct FString Message )
{
	static UFunction* prfReqChatWispher = 0;
	UBTTcpLink_Channel_eventrfReqChatWispher_Parms parms;

	if ( !prfReqChatWispher )
		prfReqChatWispher = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChatWispher" );

	parms.CharName = CharName;
	parms.Message = Message;
	this->ProcessEvent ( prfReqChatWispher, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRemoveBlockUserList ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckRemoveBlockUserList = 0;
	UBTTcpLink_Channel_eventrfAckRemoveBlockUserList_Parms parms;

	if ( !prfAckRemoveBlockUserList )
		prfAckRemoveBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRemoveBlockUserList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckRemoveBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRemoveBlockUserList ( struct FString CharName )
{
	static UFunction* prfReqRemoveBlockUserList = 0;
	UBTTcpLink_Channel_eventrfReqRemoveBlockUserList_Parms parms;

	if ( !prfReqRemoveBlockUserList )
		prfReqRemoveBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRemoveBlockUserList" );

	parms.CharName = CharName;
	this->ProcessEvent ( prfReqRemoveBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckAddBlockUserList ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckAddBlockUserList = 0;
	UBTTcpLink_Channel_eventrfAckAddBlockUserList_Parms parms;

	if ( !prfAckAddBlockUserList )
		prfAckAddBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckAddBlockUserList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckAddBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqAddBlockUserList ( struct FString CharName )
{
	static UFunction* prfReqAddBlockUserList = 0;
	UBTTcpLink_Channel_eventrfReqAddBlockUserList_Parms parms;

	if ( !prfReqAddBlockUserList )
		prfReqAddBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqAddBlockUserList" );

	parms.CharName = CharName;
	this->ProcessEvent ( prfReqAddBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckBlockUserListEnd (  )
{
	static UFunction* prfAckBlockUserListEnd = 0;
	UBTTcpLink_Channel_eventrfAckBlockUserListEnd_Parms parms;

	if ( !prfAckBlockUserListEnd )
		prfAckBlockUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckBlockUserListEnd" );

	this->ProcessEvent ( prfAckBlockUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckBlockUserList ( class TArray< struct FString > CharName )
{
	static UFunction* prfAckBlockUserList = 0;
	UBTTcpLink_Channel_eventrfAckBlockUserList_Parms parms;

	if ( !prfAckBlockUserList )
		prfAckBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckBlockUserList" );

	parms.CharName = CharName;
	this->ProcessEvent ( prfAckBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckBlockUserListStart ( int Result, int TotalCount )
{
	static UFunction* prfAckBlockUserListStart = 0;
	UBTTcpLink_Channel_eventrfAckBlockUserListStart_Parms parms;

	if ( !prfAckBlockUserListStart )
		prfAckBlockUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckBlockUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckBlockUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqBlockUserList (  )
{
	static UFunction* prfReqBlockUserList = 0;
	UBTTcpLink_Channel_eventrfReqBlockUserList_Parms parms;

	if ( !prfReqBlockUserList )
		prfReqBlockUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqBlockUserList" );

	this->ProcessEvent ( prfReqBlockUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCompleteFriendInvite ( struct FString CharnameToBeInvited, unsigned char IsPermit )
{
	static UFunction* prfReqCompleteFriendInvite = 0;
	UBTTcpLink_Channel_eventrfReqCompleteFriendInvite_Parms parms;

	if ( !prfReqCompleteFriendInvite )
		prfReqCompleteFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCompleteFriendInvite" );

	parms.CharnameToBeInvited = CharnameToBeInvited;
	parms.IsPermit = IsPermit;
	this->ProcessEvent ( prfReqCompleteFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckConfirmFriendInvite ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckConfirmFriendInvite = 0;
	UBTTcpLink_Channel_eventrfAckConfirmFriendInvite_Parms parms;

	if ( !prfAckConfirmFriendInvite )
		prfAckConfirmFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckConfirmFriendInvite" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckConfirmFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqConfirmFriendInvite ( int ReqUserID, struct FString ReqedCharname, unsigned char IsPermit )
{
	static UFunction* prfReqConfirmFriendInvite = 0;
	UBTTcpLink_Channel_eventrfReqConfirmFriendInvite_Parms parms;

	if ( !prfReqConfirmFriendInvite )
		prfReqConfirmFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqConfirmFriendInvite" );

	parms.ReqUserID = ReqUserID;
	parms.ReqedCharname = ReqedCharname;
	parms.IsPermit = IsPermit;
	this->ProcessEvent ( prfReqConfirmFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRecvFriendInvite ( int ReqUserID, struct FString ReqCharname, struct FString InviteMsg )
{
	static UFunction* prfReqRecvFriendInvite = 0;
	UBTTcpLink_Channel_eventrfReqRecvFriendInvite_Parms parms;

	if ( !prfReqRecvFriendInvite )
		prfReqRecvFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRecvFriendInvite" );

	parms.ReqUserID = ReqUserID;
	parms.ReqCharname = ReqCharname;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( prfReqRecvFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSendFriendInvite ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckSendFriendInvite = 0;
	UBTTcpLink_Channel_eventrfAckSendFriendInvite_Parms parms;

	if ( !prfAckSendFriendInvite )
		prfAckSendFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSendFriendInvite" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckSendFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSendFriendInvite ( int InviteUserID, struct FString InviteName, struct FString InviteMsg )
{
	static UFunction* prfReqSendFriendInvite = 0;
	UBTTcpLink_Channel_eventrfReqSendFriendInvite_Parms parms;

	if ( !prfReqSendFriendInvite )
		prfReqSendFriendInvite = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSendFriendInvite" );

	parms.InviteUserID = InviteUserID;
	parms.InviteName = InviteName;
	parms.InviteMsg = InviteMsg;
	this->ProcessEvent ( prfReqSendFriendInvite, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChatNormal ( int id, struct FString Sender, struct FString Message, int Result )
{
	static UFunction* prfAckChatNormal = 0;
	UBTTcpLink_Channel_eventrfAckChatNormal_Parms parms;

	if ( !prfAckChatNormal )
		prfAckChatNormal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChatNormal" );

	parms.id = id;
	parms.Sender = Sender;
	parms.Message = Message;
	parms.Result = Result;
	this->ProcessEvent ( prfAckChatNormal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChatNormal ( struct FString Message )
{
	static UFunction* prfReqChatNormal = 0;
	UBTTcpLink_Channel_eventrfReqChatNormal_Parms parms;

	if ( !prfReqChatNormal )
		prfReqChatNormal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChatNormal" );

	parms.Message = Message;
	this->ProcessEvent ( prfReqChatNormal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDummy ( int Result )
{
	static UFunction* prfAckDummy = 0;
	UBTTcpLink_Channel_eventrfAckDummy_Parms parms;

	if ( !prfAckDummy )
		prfAckDummy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDummy" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckDummy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDummy ( int DelayCheck )
{
	static UFunction* prfReqDummy = 0;
	UBTTcpLink_Channel_eventrfReqDummy_Parms parms;

	if ( !prfReqDummy )
		prfReqDummy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDummy" );

	parms.DelayCheck = DelayCheck;
	this->ProcessEvent ( prfReqDummy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckConfirmItemChanged ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckConfirmItemChanged = 0;
	UBTTcpLink_Channel_eventrfAckConfirmItemChanged_Parms parms;

	if ( !prfAckConfirmItemChanged )
		prfAckConfirmItemChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckConfirmItemChanged" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckConfirmItemChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqConfirmItemChanged (  )
{
	static UFunction* prfReqConfirmItemChanged = 0;
	UBTTcpLink_Channel_eventrfReqConfirmItemChanged_Parms parms;

	if ( !prfReqConfirmItemChanged )
		prfReqConfirmItemChanged = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqConfirmItemChanged" );

	this->ProcessEvent ( prfReqConfirmItemChanged, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEquipItem ( int ChangedNewItemID, struct FBtrDouble ChangedNewUniqueID, int ChangedNewSlotPosition, int ChangedOldItemID, struct FBtrDouble ChangedOldUniqueID, int ChangedOldSlotPosition, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckEquipItem = 0;
	UBTTcpLink_Channel_eventrfAckEquipItem_Parms parms;

	if ( !prfAckEquipItem )
		prfAckEquipItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEquipItem" );

	parms.ChangedNewItemID = ChangedNewItemID;
	parms.ChangedNewUniqueID = ChangedNewUniqueID;
	parms.ChangedNewSlotPosition = ChangedNewSlotPosition;
	parms.ChangedOldItemID = ChangedOldItemID;
	parms.ChangedOldUniqueID = ChangedOldUniqueID;
	parms.ChangedOldSlotPosition = ChangedOldSlotPosition;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckEquipItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEquipItem ( int ItemID, struct FBtrDouble UniqueID, int SlotPosition )
{
	static UFunction* prfReqEquipItem = 0;
	UBTTcpLink_Channel_eventrfReqEquipItem_Parms parms;

	if ( !prfReqEquipItem )
		prfReqEquipItem = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEquipItem" );

	parms.ItemID = ItemID;
	parms.UniqueID = UniqueID;
	parms.SlotPosition = SlotPosition;
	this->ProcessEvent ( prfReqEquipItem, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckItemListEnd (  )
{
	static UFunction* prfAckItemListEnd = 0;
	UBTTcpLink_Channel_eventrfAckItemListEnd_Parms parms;

	if ( !prfAckItemListEnd )
		prfAckItemListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckItemListEnd" );

	this->ProcessEvent ( prfAckItemListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID, class TArray< int > TradeCount )
{
	static UFunction* prfAckItemList = 0;
	UBTTcpLink_Channel_eventrfAckItemList_Parms parms;

	if ( !prfAckItemList )
		prfAckItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckItemList" );

	parms.UniqueID = UniqueID;
	parms.ItemID = ItemID;
	parms.ItemType = ItemType;
	parms.Durability = Durability;
	parms.UntilTime = UntilTime;
	parms.SlotPosition = SlotPosition;
	parms.AddPartsID = AddPartsID;
	parms.DamageDegree = DamageDegree;
	parms.ItemState = ItemState;
	parms.StackCount = StackCount;
	parms.PaintID = PaintID;
	parms.TradeCount = TradeCount;
	this->ProcessEvent ( prfAckItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckItemListStart ( int Count, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckItemListStart = 0;
	UBTTcpLink_Channel_eventrfAckItemListStart_Parms parms;

	if ( !prfAckItemListStart )
		prfAckItemListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckItemListStart" );

	parms.Count = Count;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckItemListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqItemList ( int UID )
{
	static UFunction* prfReqItemList = 0;
	UBTTcpLink_Channel_eventrfReqItemList_Parms parms;

	if ( !prfReqItemList )
		prfReqItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqItemList" );

	parms.UID = UID;
	this->ProcessEvent ( prfReqItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEntrySkillList ( class TArray< int > UserIDs, class TArray< int > SkillIDs, class TArray< int > SlotPositions, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckEntrySkillList = 0;
	UBTTcpLink_Channel_eventrfAckEntrySkillList_Parms parms;

	if ( !prfAckEntrySkillList )
		prfAckEntrySkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEntrySkillList" );

	parms.UserIDs = UserIDs;
	parms.SkillIDs = SkillIDs;
	parms.SlotPositions = SlotPositions;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckEntrySkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEntrySkillList ( int UserID )
{
	static UFunction* prfReqEntrySkillList = 0;
	UBTTcpLink_Channel_eventrfReqEntrySkillList_Parms parms;

	if ( !prfReqEntrySkillList )
		prfReqEntrySkillList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEntrySkillList" );

	parms.UserID = UserID;
	this->ProcessEvent ( prfReqEntrySkillList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEntryItemList ( class TArray< int > UserIDs, class TArray< int > ItemIDs, class TArray< int > SlotPositions, class TArray< int > AddPartsID, class TArray< struct FBtrDouble > UniqueID, class TArray< int > PaintID, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckEntryItemList = 0;
	UBTTcpLink_Channel_eventrfAckEntryItemList_Parms parms;

	if ( !prfAckEntryItemList )
		prfAckEntryItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEntryItemList" );

	parms.UserIDs = UserIDs;
	parms.ItemIDs = ItemIDs;
	parms.SlotPositions = SlotPositions;
	parms.AddPartsID = AddPartsID;
	parms.UniqueID = UniqueID;
	parms.PaintID = PaintID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckEntryItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEntryItemList ( int UserID )
{
	static UFunction* prfReqEntryItemList = 0;
	UBTTcpLink_Channel_eventrfReqEntryItemList_Parms parms;

	if ( !prfReqEntryItemList )
		prfReqEntryItemList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEntryItemList" );

	parms.UserID = UserID;
	this->ProcessEvent ( prfReqEntryItemList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeUserState ( int Result, struct FString ErrMsg, class TArray< int > UserIDs, class TArray< unsigned char > Positions, class TArray< int > Numbers, class TArray< unsigned char > OldStates, class TArray< unsigned char > NewStates )
{
	static UFunction* prfAckChangeUserState = 0;
	UBTTcpLink_Channel_eventrfAckChangeUserState_Parms parms;

	if ( !prfAckChangeUserState )
		prfAckChangeUserState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeUserState" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserIDs = UserIDs;
	parms.Positions = Positions;
	parms.Numbers = Numbers;
	parms.OldStates = OldStates;
	parms.NewStates = NewStates;
	this->ProcessEvent ( prfAckChangeUserState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChangeUserState ( unsigned char NewState, unsigned char CheckPlaying )
{
	static UFunction* prfReqChangeUserState = 0;
	UBTTcpLink_Channel_eventrfReqChangeUserState_Parms parms;

	if ( !prfReqChangeUserState )
		prfReqChangeUserState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChangeUserState" );

	parms.NewState = NewState;
	parms.CheckPlaying = CheckPlaying;
	this->ProcessEvent ( prfReqChangeUserState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckExteriorRoomState (  )
{
	static UFunction* prfAckExteriorRoomState = 0;
	UBTTcpLink_Channel_eventrfAckExteriorRoomState_Parms parms;

	if ( !prfAckExteriorRoomState )
		prfAckExteriorRoomState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomState" );

	this->ProcessEvent ( prfAckExteriorRoomState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqExteriorRoomState ( int RoomNumber, unsigned char RoomState )
{
	static UFunction* prfReqExteriorRoomState = 0;
	UBTTcpLink_Channel_eventrfReqExteriorRoomState_Parms parms;

	if ( !prfReqExteriorRoomState )
		prfReqExteriorRoomState = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomState" );

	parms.RoomNumber = RoomNumber;
	parms.RoomState = RoomState;
	this->ProcessEvent ( prfReqExteriorRoomState, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckExteriorRoomUserCount (  )
{
	static UFunction* prfAckExteriorRoomUserCount = 0;
	UBTTcpLink_Channel_eventrfAckExteriorRoomUserCount_Parms parms;

	if ( !prfAckExteriorRoomUserCount )
		prfAckExteriorRoomUserCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomUserCount" );

	this->ProcessEvent ( prfAckExteriorRoomUserCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqExteriorRoomUserCount ( int RoomNumber, int RoomUserCount )
{
	static UFunction* prfReqExteriorRoomUserCount = 0;
	UBTTcpLink_Channel_eventrfReqExteriorRoomUserCount_Parms parms;

	if ( !prfReqExteriorRoomUserCount )
		prfReqExteriorRoomUserCount = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomUserCount" );

	parms.RoomNumber = RoomNumber;
	parms.RoomUserCount = RoomUserCount;
	this->ProcessEvent ( prfReqExteriorRoomUserCount, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckExteriorRoomInfo (  )
{
	static UFunction* prfAckExteriorRoomInfo = 0;
	UBTTcpLink_Channel_eventrfAckExteriorRoomInfo_Parms parms;

	if ( !prfAckExteriorRoomInfo )
		prfAckExteriorRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckExteriorRoomInfo" );

	this->ProcessEvent ( prfAckExteriorRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqExteriorRoomInfo ( int SP, int RoomNumber, unsigned char IsPW, struct FString RoomName, struct FString MapName, struct FString ModeName, int MapNum, int ModeNum, unsigned char IsTeamBalance, int MaxUserCount, int RoomUserCount, unsigned char RoomState, unsigned char BotDifficult, unsigned char WeaponLimit, unsigned char BotModeUserTeamNum )
{
	static UFunction* prfReqExteriorRoomInfo = 0;
	UBTTcpLink_Channel_eventrfReqExteriorRoomInfo_Parms parms;

	if ( !prfReqExteriorRoomInfo )
		prfReqExteriorRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqExteriorRoomInfo" );

	parms.SP = SP;
	parms.RoomNumber = RoomNumber;
	parms.IsPW = IsPW;
	parms.RoomName = RoomName;
	parms.MapName = MapName;
	parms.ModeName = ModeName;
	parms.MapNum = MapNum;
	parms.ModeNum = ModeNum;
	parms.IsTeamBalance = IsTeamBalance;
	parms.MaxUserCount = MaxUserCount;
	parms.RoomUserCount = RoomUserCount;
	parms.RoomState = RoomState;
	parms.BotDifficult = BotDifficult;
	parms.WeaponLimit = WeaponLimit;
	parms.BotModeUserTeamNum = BotModeUserTeamNum;
	this->ProcessEvent ( prfReqExteriorRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetBootyChoose ( int Result, struct FString ErrMsg, unsigned char GiveType, struct FBtrDouble ItemUniqueNumber, int ItemID, int PartID, unsigned char ItemType, struct FBtrDouble UntilTime, int StackCount, int PaintID )
{
	static UFunction* prfAckGetBootyChoose = 0;
	UBTTcpLink_Channel_eventrfAckGetBootyChoose_Parms parms;

	if ( !prfAckGetBootyChoose )
		prfAckGetBootyChoose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetBootyChoose" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.GiveType = GiveType;
	parms.ItemUniqueNumber = ItemUniqueNumber;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	parms.ItemType = ItemType;
	parms.UntilTime = UntilTime;
	parms.StackCount = StackCount;
	parms.PaintID = PaintID;
	this->ProcessEvent ( prfAckGetBootyChoose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGetBooty ( int Result, struct FString ErrMsg, class TArray< int > PrizeWinUserID, class TArray< int > BootyItemID, class TArray< int > BootyPartsID )
{
	static UFunction* prfAckGetBooty = 0;
	UBTTcpLink_Channel_eventrfAckGetBooty_Parms parms;

	if ( !prfAckGetBooty )
		prfAckGetBooty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGetBooty" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.PrizeWinUserID = PrizeWinUserID;
	parms.BootyItemID = BootyItemID;
	parms.BootyPartsID = BootyPartsID;
	this->ProcessEvent ( prfAckGetBooty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGetBooty ( int RoomNumber )
{
	static UFunction* prfReqGetBooty = 0;
	UBTTcpLink_Channel_eventrfReqGetBooty_Parms parms;

	if ( !prfReqGetBooty )
		prfReqGetBooty = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGetBooty" );

	parms.RoomNumber = RoomNumber;
	this->ProcessEvent ( prfReqGetBooty, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSetUserBootySeedValue ( int UserID, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckSetUserBootySeedValue = 0;
	UBTTcpLink_Channel_eventrfAckSetUserBootySeedValue_Parms parms;

	if ( !prfAckSetUserBootySeedValue )
		prfAckSetUserBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSetUserBootySeedValue" );

	parms.UserID = UserID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckSetUserBootySeedValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSetUserBootySeedValue ( int UserID, int SeedValue )
{
	static UFunction* prfReqSetUserBootySeedValue = 0;
	UBTTcpLink_Channel_eventrfReqSetUserBootySeedValue_Parms parms;

	if ( !prfReqSetUserBootySeedValue )
		prfReqSetUserBootySeedValue = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSetUserBootySeedValue" );

	parms.UserID = UserID;
	parms.SeedValue = SeedValue;
	this->ProcessEvent ( prfReqSetUserBootySeedValue, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeRoomSetting ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo )
{
	static UFunction* prfAckChangeRoomSetting = 0;
	UBTTcpLink_Channel_eventrfAckChangeRoomSetting_Parms parms;

	if ( !prfAckChangeRoomSetting )
		prfAckChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeRoomSetting" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RoomInfo = RoomInfo;
	this->ProcessEvent ( prfAckChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChangeRoomSetting ( struct FGameRoomInfo RoomInfo )
{
	static UFunction* prfReqChangeRoomSetting = 0;
	UBTTcpLink_Channel_eventrfReqChangeRoomSetting_Parms parms;

	if ( !prfReqChangeRoomSetting )
		prfReqChangeRoomSetting = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChangeRoomSetting" );

	parms.RoomInfo = RoomInfo;
	this->ProcessEvent ( prfReqChangeRoomSetting, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyLevelUp ( int LevelUpUserID, int Level, int Exp, class TArray< int > ItemID, class TArray< int > PartID )
{
	static UFunction* prfReqNotifyLevelUp = 0;
	UBTTcpLink_Channel_eventrfReqNotifyLevelUp_Parms parms;

	if ( !prfReqNotifyLevelUp )
		prfReqNotifyLevelUp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyLevelUp" );

	parms.LevelUpUserID = LevelUpUserID;
	parms.Level = Level;
	parms.Exp = Exp;
	parms.ItemID = ItemID;
	parms.PartID = PartID;
	this->ProcessEvent ( prfReqNotifyLevelUp, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckClientUdpInfoList ( int Result, struct FString ErrMsg, class TArray< int > UID, class TArray< struct FString > IP, class TArray< int > Port )
{
	static UFunction* prfAckClientUdpInfoList = 0;
	UBTTcpLink_Channel_eventrfAckClientUdpInfoList_Parms parms;

	if ( !prfAckClientUdpInfoList )
		prfAckClientUdpInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckClientUdpInfoList" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UID = UID;
	parms.IP = IP;
	parms.Port = Port;
	this->ProcessEvent ( prfAckClientUdpInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqClientUdpInfoList ( int GameNum )
{
	static UFunction* prfReqClientUdpInfoList = 0;
	UBTTcpLink_Channel_eventrfReqClientUdpInfoList_Parms parms;

	if ( !prfReqClientUdpInfoList )
		prfReqClientUdpInfoList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqClientUdpInfoList" );

	parms.GameNum = GameNum;
	this->ProcessEvent ( prfReqClientUdpInfoList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRegisterOtherUdpInfo ( int UID, struct FString IP, int Port, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort )
{
	static UFunction* prfAckRegisterOtherUdpInfo = 0;
	UBTTcpLink_Channel_eventrfAckRegisterOtherUdpInfo_Parms parms;

	if ( !prfAckRegisterOtherUdpInfo )
		prfAckRegisterOtherUdpInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRegisterOtherUdpInfo" );

	parms.UID = UID;
	parms.IP = IP;
	parms.Port = Port;
	parms.NatType = NatType;
	parms.Intervention = Intervention;
	parms.HostInnerIP = HostInnerIP;
	parms.HostInnerPort = HostInnerPort;
	this->ProcessEvent ( prfAckRegisterOtherUdpInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRegisterMyUdpInfo ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckRegisterMyUdpInfo = 0;
	UBTTcpLink_Channel_eventrfAckRegisterMyUdpInfo_Parms parms;

	if ( !prfAckRegisterMyUdpInfo )
		prfAckRegisterMyUdpInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRegisterMyUdpInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckRegisterMyUdpInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRegisterMyUdpInfo ( unsigned char IsHost, struct FString IP, int Port, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort )
{
	static UFunction* prfReqRegisterMyUdpInfo = 0;
	UBTTcpLink_Channel_eventrfReqRegisterMyUdpInfo_Parms parms;

	if ( !prfReqRegisterMyUdpInfo )
		prfReqRegisterMyUdpInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRegisterMyUdpInfo" );

	parms.IsHost = IsHost;
	parms.IP = IP;
	parms.Port = Port;
	parms.Intervention = Intervention;
	parms.HostInnerIP = HostInnerIP;
	parms.HostInnerPort = HostInnerPort;
	this->ProcessEvent ( prfReqRegisterMyUdpInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckNotifyClientJoinTime ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckNotifyClientJoinTime = 0;
	UBTTcpLink_Channel_eventrfAckNotifyClientJoinTime_Parms parms;

	if ( !prfAckNotifyClientJoinTime )
		prfAckNotifyClientJoinTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckNotifyClientJoinTime" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckNotifyClientJoinTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqNotifyClientJoinTime ( int JoinedClientID )
{
	static UFunction* prfReqNotifyClientJoinTime = 0;
	UBTTcpLink_Channel_eventrfReqNotifyClientJoinTime_Parms parms;

	if ( !prfReqNotifyClientJoinTime )
		prfReqNotifyClientJoinTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqNotifyClientJoinTime" );

	parms.JoinedClientID = JoinedClientID;
	this->ProcessEvent ( prfReqNotifyClientJoinTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeNewGuest ( struct FString HostIP )
{
	static UFunction* prfAckChangeNewGuest = 0;
	UBTTcpLink_Channel_eventrfAckChangeNewGuest_Parms parms;

	if ( !prfAckChangeNewGuest )
		prfAckChangeNewGuest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeNewGuest" );

	parms.HostIP = HostIP;
	this->ProcessEvent ( prfAckChangeNewGuest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeHost ( unsigned char ClientNum )
{
	static UFunction* prfAckChangeHost = 0;
	UBTTcpLink_Channel_eventrfAckChangeHost_Parms parms;

	if ( !prfAckChangeHost )
		prfAckChangeHost = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeHost" );

	parms.ClientNum = ClientNum;
	this->ProcessEvent ( prfAckChangeHost, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckDisconnectGame ( int Result, int DisconnectUserID, struct FString DisconnectUserName )
{
	static UFunction* prfAckDisconnectGame = 0;
	UBTTcpLink_Channel_eventrfAckDisconnectGame_Parms parms;

	if ( !prfAckDisconnectGame )
		prfAckDisconnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckDisconnectGame" );

	parms.Result = Result;
	parms.DisconnectUserID = DisconnectUserID;
	parms.DisconnectUserName = DisconnectUserName;
	this->ProcessEvent ( prfAckDisconnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqDisconnectGame (  )
{
	static UFunction* prfReqDisconnectGame = 0;
	UBTTcpLink_Channel_eventrfReqDisconnectGame_Parms parms;

	if ( !prfReqDisconnectGame )
		prfReqDisconnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqDisconnectGame" );

	this->ProcessEvent ( prfReqDisconnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckConnectGame ( int UserID, int Result )
{
	static UFunction* prfAckConnectGame = 0;
	UBTTcpLink_Channel_eventrfAckConnectGame_Parms parms;

	if ( !prfAckConnectGame )
		prfAckConnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckConnectGame" );

	parms.UserID = UserID;
	parms.Result = Result;
	this->ProcessEvent ( prfAckConnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqConnectGame (  )
{
	static UFunction* prfReqConnectGame = 0;
	UBTTcpLink_Channel_eventrfReqConnectGame_Parms parms;

	if ( !prfReqConnectGame )
		prfReqConnectGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqConnectGame" );

	this->ProcessEvent ( prfReqConnectGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRelayServerOff (  )
{
	static UFunction* prfReqRelayServerOff = 0;
	UBTTcpLink_Channel_eventrfReqRelayServerOff_Parms parms;

	if ( !prfReqRelayServerOff )
		prfReqRelayServerOff = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRelayServerOff" );

	this->ProcessEvent ( prfReqRelayServerOff, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum )
{
	static UFunction* prfReqRelayServerOn = 0;
	UBTTcpLink_Channel_eventrfReqRelayServerOn_Parms parms;

	if ( !prfReqRelayServerOn )
		prfReqRelayServerOn = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRelayServerOn" );

	parms.RelayServerIP = RelayServerIP;
	parms.RelayServerPortNum = RelayServerPortNum;
	this->ProcessEvent ( prfReqRelayServerOn, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGameOver ( int UID, int GameRoomNumber, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckGameOver = 0;
	UBTTcpLink_Channel_eventrfAckGameOver_Parms parms;

	if ( !prfAckGameOver )
		prfAckGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGameOver" );

	parms.UID = UID;
	parms.GameRoomNumber = GameRoomNumber;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGameOver ( int UID, int GameRoomNumber )
{
	static UFunction* prfReqGameOver = 0;
	UBTTcpLink_Channel_eventrfReqGameOver_Parms parms;

	if ( !prfReqGameOver )
		prfReqGameOver = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGameOver" );

	parms.UID = UID;
	parms.GameRoomNumber = GameRoomNumber;
	this->ProcessEvent ( prfReqGameOver, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckIsGameRoomPlaying ( int GameRoomNum, unsigned char IsPlaying )
{
	static UFunction* prfAckIsGameRoomPlaying = 0;
	UBTTcpLink_Channel_eventrfAckIsGameRoomPlaying_Parms parms;

	if ( !prfAckIsGameRoomPlaying )
		prfAckIsGameRoomPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckIsGameRoomPlaying" );

	parms.GameRoomNum = GameRoomNum;
	parms.IsPlaying = IsPlaying;
	this->ProcessEvent ( prfAckIsGameRoomPlaying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqIsGameRoomPlaying ( int GameRoomNum )
{
	static UFunction* prfReqIsGameRoomPlaying = 0;
	UBTTcpLink_Channel_eventrfReqIsGameRoomPlaying_Parms parms;

	if ( !prfReqIsGameRoomPlaying )
		prfReqIsGameRoomPlaying = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqIsGameRoomPlaying" );

	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( prfReqIsGameRoomPlaying, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGameRoomDestroy ( int GameRoomNum )
{
	static UFunction* prfAckGameRoomDestroy = 0;
	UBTTcpLink_Channel_eventrfAckGameRoomDestroy_Parms parms;

	if ( !prfAckGameRoomDestroy )
		prfAckGameRoomDestroy = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGameRoomDestroy" );

	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( prfAckGameRoomDestroy, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeRoomMaxNum ( int GameNum, int Number, int TeamNumber, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckChangeRoomMaxNum = 0;
	UBTTcpLink_Channel_eventrfAckChangeRoomMaxNum_Parms parms;

	if ( !prfAckChangeRoomMaxNum )
		prfAckChangeRoomMaxNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeRoomMaxNum" );

	parms.GameNum = GameNum;
	parms.Number = Number;
	parms.TeamNumber = TeamNumber;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckChangeRoomMaxNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChangeRoomMaxNum ( int GameNum, int UID, int Number, int TeamNum )
{
	static UFunction* prfReqChangeRoomMaxNum = 0;
	UBTTcpLink_Channel_eventrfReqChangeRoomMaxNum_Parms parms;

	if ( !prfReqChangeRoomMaxNum )
		prfReqChangeRoomMaxNum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChangeRoomMaxNum" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.Number = Number;
	parms.TeamNum = TeamNum;
	this->ProcessEvent ( prfReqChangeRoomMaxNum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckUpdateScoreResult ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckUpdateScoreResult = 0;
	UBTTcpLink_Channel_eventrfAckUpdateScoreResult_Parms parms;

	if ( !prfAckUpdateScoreResult )
		prfAckUpdateScoreResult = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckUpdateScoreResult" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckUpdateScoreResult, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckUpdateScore ( class TArray< int > UserIDs, class TArray< struct FString > NickNames, class TArray< unsigned char > TeamIDs, class TArray< int > Scores, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > EXPBonuses, class TArray< int > Points, class TArray< int > PointBonuses, class TArray< int > TeamScores, class TArray< int > BonusOwnerID, class TArray< int > BonusID )
{
	static UFunction* prfAckUpdateScore = 0;
	UBTTcpLink_Channel_eventrfAckUpdateScore_Parms parms;

	if ( !prfAckUpdateScore )
		prfAckUpdateScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckUpdateScore" );

	parms.UserIDs = UserIDs;
	parms.NickNames = NickNames;
	parms.TeamIDs = TeamIDs;
	parms.Scores = Scores;
	parms.Kills = Kills;
	parms.Assists = Assists;
	parms.Deaths = Deaths;
	parms.EXPs = EXPs;
	parms.EXPBonuses = EXPBonuses;
	parms.Points = Points;
	parms.PointBonuses = PointBonuses;
	parms.TeamScores = TeamScores;
	parms.BonusOwnerID = BonusOwnerID;
	parms.BonusID = BonusID;
	this->ProcessEvent ( prfAckUpdateScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqUpdateScore ( int GameNumber, class TArray< int > UserIDs, class TArray< int > Kills, class TArray< int > Assists, class TArray< int > Deaths, class TArray< int > EXPs, class TArray< int > Points, class TArray< int > Scores, class TArray< int > TeamScores, class TArray< int > RoundJoin, class TArray< int > TimeJoin, int Playtime, unsigned char GameEndType, class TArray< struct FString > UserNames )
{
	static UFunction* prfReqUpdateScore = 0;
	UBTTcpLink_Channel_eventrfReqUpdateScore_Parms parms;

	if ( !prfReqUpdateScore )
		prfReqUpdateScore = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqUpdateScore" );

	parms.GameNumber = GameNumber;
	parms.UserIDs = UserIDs;
	parms.Kills = Kills;
	parms.Assists = Assists;
	parms.Deaths = Deaths;
	parms.EXPs = EXPs;
	parms.Points = Points;
	parms.Scores = Scores;
	parms.TeamScores = TeamScores;
	parms.RoundJoin = RoundJoin;
	parms.TimeJoin = TimeJoin;
	parms.Playtime = Playtime;
	parms.GameEndType = GameEndType;
	parms.UserNames = UserNames;
	this->ProcessEvent ( prfReqUpdateScore, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckStartGame ( int GameNumber, int ClientsCount, int StartSeed, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckStartGame = 0;
	UBTTcpLink_Channel_eventrfAckStartGame_Parms parms;

	if ( !prfAckStartGame )
		prfAckStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckStartGame" );

	parms.GameNumber = GameNumber;
	parms.ClientsCount = ClientsCount;
	parms.StartSeed = StartSeed;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqStartGame ( int GameNumber )
{
	static UFunction* prfReqStartGame = 0;
	UBTTcpLink_Channel_eventrfReqStartGame_Parms parms;

	if ( !prfReqStartGame )
		prfReqStartGame = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqStartGame" );

	parms.GameNumber = GameNumber;
	this->ProcessEvent ( prfReqStartGame, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGameHostInfo ( int GameNumber, struct FString UserID, struct FString IP, int Port, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckGameHostInfo = 0;
	UBTTcpLink_Channel_eventrfAckGameHostInfo_Parms parms;

	if ( !prfAckGameHostInfo )
		prfAckGameHostInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGameHostInfo" );

	parms.GameNumber = GameNumber;
	parms.UserID = UserID;
	parms.IP = IP;
	parms.Port = Port;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckGameHostInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGameHostInfo ( int GameNumber )
{
	static UFunction* prfReqGameHostInfo = 0;
	UBTTcpLink_Channel_eventrfReqGameHostInfo_Parms parms;

	if ( !prfReqGameHostInfo )
		prfReqGameHostInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGameHostInfo" );

	parms.GameNumber = GameNumber;
	this->ProcessEvent ( prfReqGameHostInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckIsHostAvailable ( int Result )
{
	static UFunction* prfAckIsHostAvailable = 0;
	UBTTcpLink_Channel_eventrfAckIsHostAvailable_Parms parms;

	if ( !prfAckIsHostAvailable )
		prfAckIsHostAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckIsHostAvailable" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckIsHostAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqIsHostAvailable ( struct FString MyIp, int CPUGrade, int RamGrade, int VGAGrade, int VGARam )
{
	static UFunction* prfReqIsHostAvailable = 0;
	UBTTcpLink_Channel_eventrfReqIsHostAvailable_Parms parms;

	if ( !prfReqIsHostAvailable )
		prfReqIsHostAvailable = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqIsHostAvailable" );

	parms.MyIp = MyIp;
	parms.CPUGrade = CPUGrade;
	parms.RamGrade = RamGrade;
	parms.VGAGrade = VGAGrade;
	parms.VGARam = VGARam;
	this->ProcessEvent ( prfReqIsHostAvailable, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeTeam ( int GameNumber, struct FString UserID, int UID, int TeamNum, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckChangeTeam = 0;
	UBTTcpLink_Channel_eventrfAckChangeTeam_Parms parms;

	if ( !prfAckChangeTeam )
		prfAckChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeTeam" );

	parms.GameNumber = GameNumber;
	parms.UserID = UserID;
	parms.UID = UID;
	parms.TeamNum = TeamNum;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckChangeTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChangeTeam ( int TeamNum )
{
	static UFunction* prfReqChangeTeam = 0;
	UBTTcpLink_Channel_eventrfReqChangeTeam_Parms parms;

	if ( !prfReqChangeTeam )
		prfReqChangeTeam = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChangeTeam" );

	parms.TeamNum = TeamNum;
	this->ProcessEvent ( prfReqChangeTeam, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeRoomOwner ( int GameNum, int OldOwner, int NewOwner, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckChangeRoomOwner = 0;
	UBTTcpLink_Channel_eventrfAckChangeRoomOwner_Parms parms;

	if ( !prfAckChangeRoomOwner )
		prfAckChangeRoomOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeRoomOwner" );

	parms.GameNum = GameNum;
	parms.OldOwner = OldOwner;
	parms.NewOwner = NewOwner;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckChangeRoomOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChangeRoomOwner ( int GameNum, int UID, int NewOwner )
{
	static UFunction* prfReqChangeRoomOwner = 0;
	UBTTcpLink_Channel_eventrfReqChangeRoomOwner_Parms parms;

	if ( !prfReqChangeRoomOwner )
		prfReqChangeRoomOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChangeRoomOwner" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.NewOwner = NewOwner;
	this->ProcessEvent ( prfReqChangeRoomOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckChangeGameMode = 0;
	UBTTcpLink_Channel_eventrfAckChangeGameMode_Parms parms;

	if ( !prfAckChangeGameMode )
		prfAckChangeGameMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChangeGameMode" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.GameMode = GameMode;
	parms.GameModeNum = GameModeNum;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckChangeGameMode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChangeGameMode ( int GameNum, int UID, struct FString GameMode, unsigned char GameModeNum )
{
	static UFunction* prfReqChangeGameMode = 0;
	UBTTcpLink_Channel_eventrfReqChangeGameMode_Parms parms;

	if ( !prfReqChangeGameMode )
		prfReqChangeGameMode = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChangeGameMode" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.GameMode = GameMode;
	parms.GameModeNum = GameModeNum;
	this->ProcessEvent ( prfReqChangeGameMode, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckBanUser ( int GameNum, int UID, int BanUID, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckBanUser = 0;
	UBTTcpLink_Channel_eventrfAckBanUser_Parms parms;

	if ( !prfAckBanUser )
		prfAckBanUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckBanUser" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.BanUID = BanUID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckBanUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqBanUser ( int GameNum, int UID, int BanUID )
{
	static UFunction* prfReqBanUser = 0;
	UBTTcpLink_Channel_eventrfReqBanUser_Parms parms;

	if ( !prfReqBanUser )
		prfReqBanUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqBanUser" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.BanUID = BanUID;
	this->ProcessEvent ( prfReqBanUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckSelectMap ( int GameNum, int UID, struct FString MapName, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckSelectMap = 0;
	UBTTcpLink_Channel_eventrfAckSelectMap_Parms parms;

	if ( !prfAckSelectMap )
		prfAckSelectMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckSelectMap" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.MapName = MapName;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckSelectMap, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqSelectMap ( int GameNum, int UID, struct FString MapName )
{
	static UFunction* prfReqSelectMap = 0;
	UBTTcpLink_Channel_eventrfReqSelectMap_Parms parms;

	if ( !prfReqSelectMap )
		prfReqSelectMap = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqSelectMap" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	parms.MapName = MapName;
	this->ProcessEvent ( prfReqSelectMap, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckGameRoomInfo ( int Result, struct FString ErrMsg, struct FGameRoomInfo RoomInfo )
{
	static UFunction* prfAckGameRoomInfo = 0;
	UBTTcpLink_Channel_eventrfAckGameRoomInfo_Parms parms;

	if ( !prfAckGameRoomInfo )
		prfAckGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckGameRoomInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.RoomInfo = RoomInfo;
	this->ProcessEvent ( prfAckGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqGameRoomInfo ( int GameNum, int UID )
{
	static UFunction* prfReqGameRoomInfo = 0;
	UBTTcpLink_Channel_eventrfReqGameRoomInfo_Parms parms;

	if ( !prfReqGameRoomInfo )
		prfReqGameRoomInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqGameRoomInfo" );

	parms.GameNum = GameNum;
	parms.UID = UID;
	this->ProcessEvent ( prfReqGameRoomInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCreateGameRoom ( int Result, struct FString ErrMsg, int UserID, struct FString RoomOwnerIP, struct FGameRoomInfo NetRoomInfo )
{
	static UFunction* prfAckCreateGameRoom = 0;
	UBTTcpLink_Channel_eventrfAckCreateGameRoom_Parms parms;

	if ( !prfAckCreateGameRoom )
		prfAckCreateGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCreateGameRoom" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.RoomOwnerIP = RoomOwnerIP;
	parms.NetRoomInfo = NetRoomInfo;
	this->ProcessEvent ( prfAckCreateGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCreateGameRoom ( struct FGameRoomInfo NetRoomInfo )
{
	static UFunction* prfReqCreateGameRoom = 0;
	UBTTcpLink_Channel_eventrfReqCreateGameRoom_Parms parms;

	if ( !prfReqCreateGameRoom )
		prfReqCreateGameRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCreateGameRoom" );

	parms.NetRoomInfo = NetRoomInfo;
	this->ProcessEvent ( prfReqCreateGameRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckExceedMaxUser (  )
{
	static UFunction* prfAckExceedMaxUser = 0;
	UBTTcpLink_Channel_eventrfAckExceedMaxUser_Parms parms;

	if ( !prfAckExceedMaxUser )
		prfAckExceedMaxUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckExceedMaxUser" );

	this->ProcessEvent ( prfAckExceedMaxUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckLeaveRoom ( int Num, int UID, struct FString UserID, int Result, struct FString ErrMsg )
{
	static UFunction* prfAckLeaveRoom = 0;
	UBTTcpLink_Channel_eventrfAckLeaveRoom_Parms parms;

	if ( !prfAckLeaveRoom )
		prfAckLeaveRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckLeaveRoom" );

	parms.Num = Num;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckLeaveRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLeaveRoom ( int Num )
{
	static UFunction* prfReqLeaveRoom = 0;
	UBTTcpLink_Channel_eventrfReqLeaveRoom_Parms parms;

	if ( !prfReqLeaveRoom )
		prfReqLeaveRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLeaveRoom" );

	parms.Num = Num;
	this->ProcessEvent ( prfReqLeaveRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRoomUserList ( class TArray< int > UID, class TArray< struct FString > UserName, class TArray< int > Grade, class TArray< int > TeamNum, class TArray< unsigned char > Statue, class TArray< unsigned char > IsHost, class TArray< struct FString > UserIP, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< unsigned char > IsLookingFor, class TArray< int > GMUID, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* prfAckRoomUserList = 0;
	UBTTcpLink_Channel_eventrfAckRoomUserList_Parms parms;

	if ( !prfAckRoomUserList )
		prfAckRoomUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRoomUserList" );

	parms.UID = UID;
	parms.UserName = UserName;
	parms.Grade = Grade;
	parms.TeamNum = TeamNum;
	parms.Statue = Statue;
	parms.IsHost = IsHost;
	parms.UserIP = UserIP;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.IsLookingFor = IsLookingFor;
	parms.GMUID = GMUID;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckRoomUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRoomUserList ( int GameNum )
{
	static UFunction* prfReqRoomUserList = 0;
	UBTTcpLink_Channel_eventrfReqRoomUserList_Parms parms;

	if ( !prfReqRoomUserList )
		prfReqRoomUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRoomUserList" );

	parms.GameNum = GameNum;
	this->ProcessEvent ( prfReqRoomUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEnterRoom ( int GameNum, int OwnerID, int UID, struct FString UserID, int TeamNum, int Grade, struct FString UserIP, struct FString ClanName, int Clan_Mark_Pattern, int Clan_Mark_BG, int Clan_Mark_BL, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* prfAckEnterRoom = 0;
	UBTTcpLink_Channel_eventrfAckEnterRoom_Parms parms;

	if ( !prfAckEnterRoom )
		prfAckEnterRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEnterRoom" );

	parms.GameNum = GameNum;
	parms.OwnerID = OwnerID;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.TeamNum = TeamNum;
	parms.Grade = Grade;
	parms.UserIP = UserIP;
	parms.ClanName = ClanName;
	parms.Clan_Mark_Pattern = Clan_Mark_Pattern;
	parms.Clan_Mark_BG = Clan_Mark_BG;
	parms.Clan_Mark_BL = Clan_Mark_BL;
	parms.IsLookFor = IsLookFor;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckEnterRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEnterRoom ( int GameNum, struct FString Password, unsigned char RoomEnterType )
{
	static UFunction* prfReqEnterRoom = 0;
	UBTTcpLink_Channel_eventrfReqEnterRoom_Parms parms;

	if ( !prfReqEnterRoom )
		prfReqEnterRoom = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEnterRoom" );

	parms.GameNum = GameNum;
	parms.Password = Password;
	parms.RoomEnterType = RoomEnterType;
	this->ProcessEvent ( prfReqEnterRoom, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRoomListEnd (  )
{
	static UFunction* prfAckRoomListEnd = 0;
	UBTTcpLink_Channel_eventrfAckRoomListEnd_Parms parms;

	if ( !prfAckRoomListEnd )
		prfAckRoomListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRoomListEnd" );

	this->ProcessEvent ( prfAckRoomListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRoomList ( class TArray< int > GameNum, class TArray< struct FString > Title, class TArray< struct FString > MapName, class TArray< int > MapNum, class TArray< unsigned char > UserCount, class TArray< unsigned char > MaxCount, class TArray< struct FString > ModeName, class TArray< int > ModeNum, class TArray< unsigned char > WeaponLimit, class TArray< unsigned char > IsTeamBalance, class TArray< unsigned char > Status, class TArray< struct FString > RoomOwnerIP, class TArray< int > GameMinute, class TArray< struct FString > RoomOwnerName, class TArray< unsigned char > IsSpecial, class TArray< unsigned char > IsPassword, class TArray< unsigned char > BotDifficult, class TArray< unsigned char > BotModeUserTeamNum )
{
	static UFunction* prfAckRoomList = 0;
	UBTTcpLink_Channel_eventrfAckRoomList_Parms parms;

	if ( !prfAckRoomList )
		prfAckRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRoomList" );

	parms.GameNum = GameNum;
	parms.Title = Title;
	parms.MapName = MapName;
	parms.MapNum = MapNum;
	parms.UserCount = UserCount;
	parms.MaxCount = MaxCount;
	parms.ModeName = ModeName;
	parms.ModeNum = ModeNum;
	parms.WeaponLimit = WeaponLimit;
	parms.IsTeamBalance = IsTeamBalance;
	parms.Status = Status;
	parms.RoomOwnerIP = RoomOwnerIP;
	parms.GameMinute = GameMinute;
	parms.RoomOwnerName = RoomOwnerName;
	parms.IsSpecial = IsSpecial;
	parms.IsPassword = IsPassword;
	parms.BotDifficult = BotDifficult;
	parms.BotModeUserTeamNum = BotModeUserTeamNum;
	this->ProcessEvent ( prfAckRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckRoomListStart ( int Result, int TotalCount, int Count, int StartIndex )
{
	static UFunction* prfAckRoomListStart = 0;
	UBTTcpLink_Channel_eventrfAckRoomListStart_Parms parms;

	if ( !prfAckRoomListStart )
		prfAckRoomListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckRoomListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	parms.Count = Count;
	parms.StartIndex = StartIndex;
	this->ProcessEvent ( prfAckRoomListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqRoomList ( int id, int StartIndex, int Count )
{
	static UFunction* prfReqRoomList = 0;
	UBTTcpLink_Channel_eventrfReqRoomList_Parms parms;

	if ( !prfReqRoomList )
		prfReqRoomList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqRoomList" );

	parms.id = id;
	parms.StartIndex = StartIndex;
	parms.Count = Count;
	this->ProcessEvent ( prfReqRoomList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChannelUserList ( int TotalCount, int Count, int StartIndex, class TArray< int > UID, class TArray< struct FString > UserID, class TArray< int > UserLevels, class TArray< struct FString > ClanName, class TArray< int > ClanPattern, class TArray< int > ClanBG, class TArray< int > ClanBL, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose, class TArray< unsigned char > IsLookForClan, int Result, struct FString ErrMsg, class TArray< int > ClanLevel, class TArray< int > LevelMarkID, class TArray< int > TitleMarkID, class TArray< int > Reserved1, class TArray< int > Reserved2, class TArray< int > Reserved3 )
{
	static UFunction* prfAckChannelUserList = 0;
	UBTTcpLink_Channel_eventrfAckChannelUserList_Parms parms;

	if ( !prfAckChannelUserList )
		prfAckChannelUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChannelUserList" );

	parms.TotalCount = TotalCount;
	parms.Count = Count;
	parms.StartIndex = StartIndex;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.UserLevels = UserLevels;
	parms.ClanName = ClanName;
	parms.ClanPattern = ClanPattern;
	parms.ClanBG = ClanBG;
	parms.ClanBL = ClanBL;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookForClan = IsLookForClan;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckChannelUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChannelUserList ( int id, int StartIndex, int Count )
{
	static UFunction* prfReqChannelUserList = 0;
	UBTTcpLink_Channel_eventrfReqChannelUserList_Parms parms;

	if ( !prfReqChannelUserList )
		prfReqChannelUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChannelUserList" );

	parms.id = id;
	parms.StartIndex = StartIndex;
	parms.Count = Count;
	this->ProcessEvent ( prfReqChannelUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckLeaveChannel ( int Result, struct FString UserID, int UID )
{
	static UFunction* prfAckLeaveChannel = 0;
	UBTTcpLink_Channel_eventrfAckLeaveChannel_Parms parms;

	if ( !prfAckLeaveChannel )
		prfAckLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckLeaveChannel" );

	parms.Result = Result;
	parms.UserID = UserID;
	parms.UID = UID;
	this->ProcessEvent ( prfAckLeaveChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLeaveChannel ( int id )
{
	static UFunction* prfReqLeaveChannel = 0;
	UBTTcpLink_Channel_eventrfReqLeaveChannel_Parms parms;

	if ( !prfReqLeaveChannel )
		prfReqLeaveChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLeaveChannel" );

	parms.id = id;
	this->ProcessEvent ( prfReqLeaveChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckEnterChannel ( int id, int UID, struct FString UserID, int Level, struct FString ClanName, int ClanMarkPattern, int ClanMarkBG, int ClanMarkBL, int ClanGrade, int ClanWin, int ClanLose, unsigned char IsLookFor, int Result, struct FString ErrMsg, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 )
{
	static UFunction* prfAckEnterChannel = 0;
	UBTTcpLink_Channel_eventrfAckEnterChannel_Parms parms;

	if ( !prfAckEnterChannel )
		prfAckEnterChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckEnterChannel" );

	parms.id = id;
	parms.UID = UID;
	parms.UserID = UserID;
	parms.Level = Level;
	parms.ClanName = ClanName;
	parms.ClanMarkPattern = ClanMarkPattern;
	parms.ClanMarkBG = ClanMarkBG;
	parms.ClanMarkBL = ClanMarkBL;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	parms.IsLookFor = IsLookFor;
	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.ClanLevel = ClanLevel;
	parms.LevelMarkID = LevelMarkID;
	parms.TitleMarkID = TitleMarkID;
	parms.Reserved1 = Reserved1;
	parms.Reserved2 = Reserved2;
	parms.Reserved3 = Reserved3;
	this->ProcessEvent ( prfAckEnterChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqEnterChannel ( int id )
{
	static UFunction* prfReqEnterChannel = 0;
	UBTTcpLink_Channel_eventrfReqEnterChannel_Parms parms;

	if ( !prfReqEnterChannel )
		prfReqEnterChannel = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqEnterChannel" );

	parms.id = id;
	this->ProcessEvent ( prfReqEnterChannel, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckChannelList ( class TArray< int > id, class TArray< struct FString > Title, class TArray< int > CurUser, class TArray< int > MaxUser )
{
	static UFunction* prfAckChannelList = 0;
	UBTTcpLink_Channel_eventrfAckChannelList_Parms parms;

	if ( !prfAckChannelList )
		prfAckChannelList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckChannelList" );

	parms.id = id;
	parms.Title = Title;
	parms.CurUser = CurUser;
	parms.MaxUser = MaxUser;
	this->ProcessEvent ( prfAckChannelList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqChannelList ( int bChannelType )
{
	static UFunction* prfReqChannelList = 0;
	UBTTcpLink_Channel_eventrfReqChannelList_Parms parms;

	if ( !prfReqChannelList )
		prfReqChannelList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqChannelList" );

	parms.bChannelType = bChannelType;
	this->ProcessEvent ( prfReqChannelList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckFriendListEnd (  )
{
	static UFunction* prfAckFriendListEnd = 0;
	UBTTcpLink_Channel_eventrfAckFriendListEnd_Parms parms;

	if ( !prfAckFriendListEnd )
		prfAckFriendListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckFriendListEnd" );

	this->ProcessEvent ( prfAckFriendListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckFriendList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > LevelMarkID, class TArray< int > ClanLevel, class TArray< int > Level, class TArray< unsigned char > IsLookForClan )
{
	static UFunction* prfAckFriendList = 0;
	UBTTcpLink_Channel_eventrfAckFriendList_Parms parms;

	if ( !prfAckFriendList )
		prfAckFriendList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckFriendList" );

	parms.FriendName = FriendName;
	parms.IsLogOn = IsLogOn;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.LevelMarkID = LevelMarkID;
	parms.ClanLevel = ClanLevel;
	parms.Level = Level;
	parms.IsLookForClan = IsLookForClan;
	this->ProcessEvent ( prfAckFriendList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckFriendListStart ( int Result, int TotalCount )
{
	static UFunction* prfAckFriendListStart = 0;
	UBTTcpLink_Channel_eventrfAckFriendListStart_Parms parms;

	if ( !prfAckFriendListStart )
		prfAckFriendListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckFriendListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckFriendListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqFriendList (  )
{
	static UFunction* prfReqFriendList = 0;
	UBTTcpLink_Channel_eventrfReqFriendList_Parms parms;

	if ( !prfReqFriendList )
		prfReqFriendList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqFriendList" );

	this->ProcessEvent ( prfReqFriendList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckCharInfo ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, int CM_Pattern, int CM_BG, int CM_BL, struct FCharInfo stCharInfo, unsigned char InClanRank, int ClanLevel )
{
	static UFunction* prfAckCharInfo = 0;
	UBTTcpLink_Channel_eventrfAckCharInfo_Parms parms;

	if ( !prfAckCharInfo )
		prfAckCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckCharInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.stCharInfo = stCharInfo;
	parms.InClanRank = InClanRank;
	parms.ClanLevel = ClanLevel;
	this->ProcessEvent ( prfAckCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqCharInfo (  )
{
	static UFunction* prfReqCharInfo = 0;
	UBTTcpLink_Channel_eventrfReqCharInfo_Parms parms;

	if ( !prfReqCharInfo )
		prfReqCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqCharInfo" );

	this->ProcessEvent ( prfReqCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckLogin2 ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FBtrDouble CurServerTime, int CharDBID, unsigned char IsGM )
{
	static UFunction* prfAckLogin2 = 0;
	UBTTcpLink_Channel_eventrfAckLogin2_Parms parms;

	if ( !prfAckLogin2 )
		prfAckLogin2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckLogin2" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.CurServerTime = CurServerTime;
	parms.CharDBID = CharDBID;
	parms.IsGM = IsGM;
	this->ProcessEvent ( prfAckLogin2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLogin2 ( struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, struct FString Guid, int UserType )
{
	static UFunction* prfReqLogin2 = 0;
	UBTTcpLink_Channel_eventrfReqLogin2_Parms parms;

	if ( !prfReqLogin2 )
		prfReqLogin2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLogin2" );

	parms.CharName = CharName;
	parms.TimeStamp = TimeStamp;
	parms.LoginHash1 = LoginHash1;
	parms.LoginHash2 = LoginHash2;
	parms.LoginHash3 = LoginHash3;
	parms.LoginHash4 = LoginHash4;
	parms.LoginHash5 = LoginHash5;
	parms.Guid = Guid;
	parms.UserType = UserType;
	this->ProcessEvent ( prfReqLogin2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckStartNatDiag ( int NatType )
{
	static UFunction* prfAckStartNatDiag = 0;
	UBTTcpLink_Channel_eventrfAckStartNatDiag_Parms parms;

	if ( !prfAckStartNatDiag )
		prfAckStartNatDiag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckStartNatDiag" );

	parms.NatType = NatType;
	this->ProcessEvent ( prfAckStartNatDiag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqStartNatDiag ( struct FString Server1Addr, int Server1Port, struct FString Server2Addr, int Server2Port )
{
	static UFunction* prfReqStartNatDiag = 0;
	UBTTcpLink_Channel_eventrfReqStartNatDiag_Parms parms;

	if ( !prfReqStartNatDiag )
		prfReqStartNatDiag = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqStartNatDiag" );

	parms.Server1Addr = Server1Addr;
	parms.Server1Port = Server1Port;
	parms.Server2Addr = Server2Addr;
	parms.Server2Port = Server2Port;
	this->ProcessEvent ( prfReqStartNatDiag, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqForceLogoutByOwner (  )
{
	static UFunction* prfReqForceLogoutByOwner = 0;
	UBTTcpLink_Channel_eventrfReqForceLogoutByOwner_Parms parms;

	if ( !prfReqForceLogoutByOwner )
		prfReqForceLogoutByOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqForceLogoutByOwner" );

	this->ProcessEvent ( prfReqForceLogoutByOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckLogin ( int Result, struct FString ErrMsg, int UserID, struct FString CharName, struct FString ClanName, struct FCharInfo btCharInfo )
{
	static UFunction* prfAckLogin = 0;
	UBTTcpLink_Channel_eventrfAckLogin_Parms parms;

	if ( !prfAckLogin )
		prfAckLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckLogin" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.UserID = UserID;
	parms.CharName = CharName;
	parms.ClanName = ClanName;
	parms.btCharInfo = btCharInfo;
	this->ProcessEvent ( prfAckLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqLogin ( struct FString id )
{
	static UFunction* prfReqLogin = 0;
	UBTTcpLink_Channel_eventrfReqLogin_Parms parms;

	if ( !prfReqLogin )
		prfReqLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqLogin" );

	parms.id = id;
	this->ProcessEvent ( prfReqLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfAckHash ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckHash = 0;
	UBTTcpLink_Channel_eventrfAckHash_Parms parms;

	if ( !prfAckHash )
		prfAckHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfAckHash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::eventrfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 )
{
	static UFunction* prfReqHash = 0;
	UBTTcpLink_Channel_eventrfReqHash_Parms parms;

	if ( !prfReqHash )
		prfReqHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.rfReqHash" );

	parms.HashField0 = HashField0;
	parms.HashField1 = HashField1;
	parms.HashField2 = HashField2;
	parms.HashField3 = HashField3;
	this->ProcessEvent ( prfReqHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UBTTcpLink_Channel::eventOnError ( int ErrCode )
{
	static UFunction* pOnError = 0;
	UBTTcpLink_Channel_eventOnError_Parms parms;

	if ( !pOnError )
		pOnError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.OnError" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnError, &parms, NULL );

}*/

/*void UBTTcpLink_Channel::eventOnClose ( int ErrCode )
{
	static UFunction* pOnClose = 0;
	UBTTcpLink_Channel_eventOnClose_Parms parms;

	if ( !pOnClose )
		pOnClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.OnClose" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnClose, &parms, NULL );

}*/

/*void UBTTcpLink_Channel::eventOnConnect ( int ErrCode )
{
	static UFunction* pOnConnect = 0;
	UBTTcpLink_Channel_eventOnConnect_Parms parms;

	if ( !pOnConnect )
		pOnConnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.OnConnect" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnConnect, &parms, NULL );

}*/

/*bool UBTTcpLink_Channel::Close (  )
{
	static UFunction* pClose = 0;
	UBTTcpLink_Channel_execClose_Parms parms;

	if ( !pClose )
		pClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.Close" );

	this->ProcessEvent ( pClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::Connect ( struct FString sIpaddr, int nPort )
{
	static UFunction* pConnect = 0;
	UBTTcpLink_Channel_execConnect_Parms parms;

	if ( !pConnect )
		pConnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.Connect" );

	parms.sIpaddr = sIpaddr;
	parms.nPort = nPort;
	this->ProcessEvent ( pConnect, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Channel::InitNetwork (  )
{
	static UFunction* pInitNetwork = 0;
	UBTTcpLink_Channel_execInitNetwork_Parms parms;

	if ( !pInitNetwork )
		pInitNetwork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Channel.InitNetwork" );

	this->ProcessEvent ( pInitNetwork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UBTTcpHandler_DS_Script_Interface::eventSetGameManager ( class UwGameManager* pgameMgr )
{
	static UFunction* pSetGameManager = 0;
	UBTTcpHandler_DS_Script_Interface_eventSetGameManager_Parms parms;

	if ( !pSetGameManager )
		pSetGameManager = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpHandler_DS_Script_Interface.SetGameManager" );

	parms.pgameMgr = pgameMgr;
	this->ProcessEvent ( pSetGameManager, &parms, NULL );

}*/

/*void UBTTcpHandler_DS_Script_Interface::eventSetMatchMaker ( class UwMatchMaker* pMM )
{
	static UFunction* pSetMatchMaker = 0;
	UBTTcpHandler_DS_Script_Interface_eventSetMatchMaker_Parms parms;

	if ( !pSetMatchMaker )
		pSetMatchMaker = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpHandler_DS_Script_Interface.SetMatchMaker" );

	parms.pMM = pMM;
	this->ProcessEvent ( pSetMatchMaker, &parms, NULL );

}*/

/*void UBTDataTransferClientLink::eventOnReceivedParamDataComplete ( int Result )
{
	static UFunction* pOnReceivedParamDataComplete = 0;
	UBTDataTransferClientLink_eventOnReceivedParamDataComplete_Parms parms;

	if ( !pOnReceivedParamDataComplete )
		pOnReceivedParamDataComplete = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTDataTransferClientLink.OnReceivedParamDataComplete" );

	parms.Result = Result;
	this->ProcessEvent ( pOnReceivedParamDataComplete, &parms, NULL );

}*/

/*bool UBTDataTransferClientLink::Close (  )
{
	static UFunction* pClose = 0;
	UBTDataTransferClientLink_execClose_Parms parms;

	if ( !pClose )
		pClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTDataTransferClientLink.Close" );

	this->ProcessEvent ( pClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTDataTransferClientLink::RequestData (  )
{
	static UFunction* pRequestData = 0;
	UBTDataTransferClientLink_execRequestData_Parms parms;

	if ( !pRequestData )
		pRequestData = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTDataTransferClientLink.RequestData" );

	this->ProcessEvent ( pRequestData, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTDataTransferClientLink::InitNetwork ( struct FString ServerIP, int serverPort )
{
	static UFunction* pInitNetwork = 0;
	UBTDataTransferClientLink_execInitNetwork_Parms parms;

	if ( !pInitNetwork )
		pInitNetwork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTDataTransferClientLink.InitNetwork" );

	parms.ServerIP = ServerIP;
	parms.serverPort = serverPort;
	this->ProcessEvent ( pInitNetwork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLoginWithIndonesia ( int Result )
{
	static UFunction* psfAckLoginWithIndonesia = 0;
	UBTTcpLink_Login_execsfAckLoginWithIndonesia_Parms parms;

	if ( !psfAckLoginWithIndonesia )
		psfAckLoginWithIndonesia = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLoginWithIndonesia" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckLoginWithIndonesia, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLoginWithIndonesia ( struct FString HashValue )
{
	static UFunction* psfReqLoginWithIndonesia = 0;
	UBTTcpLink_Login_execsfReqLoginWithIndonesia_Parms parms;

	if ( !psfReqLoginWithIndonesia )
		psfReqLoginWithIndonesia = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLoginWithIndonesia" );

	parms.HashValue = HashValue;
	this->ProcessEvent ( psfReqLoginWithIndonesia, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLoginWithGlobal ( int Result )
{
	static UFunction* psfAckLoginWithGlobal = 0;
	UBTTcpLink_Login_execsfAckLoginWithGlobal_Parms parms;

	if ( !psfAckLoginWithGlobal )
		psfAckLoginWithGlobal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLoginWithGlobal" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckLoginWithGlobal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLoginWithGlobal ( struct FString G_AccountID, struct FString G_GUID, struct FString G_AuthKey, int UserType )
{
	static UFunction* psfReqLoginWithGlobal = 0;
	UBTTcpLink_Login_execsfReqLoginWithGlobal_Parms parms;

	if ( !psfReqLoginWithGlobal )
		psfReqLoginWithGlobal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLoginWithGlobal" );

	parms.G_AccountID = G_AccountID;
	parms.G_GUID = G_GUID;
	parms.G_AuthKey = G_AuthKey;
	parms.UserType = UserType;
	this->ProcessEvent ( psfReqLoginWithGlobal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLoginWithThailand ( int Result )
{
	static UFunction* psfAckLoginWithThailand = 0;
	UBTTcpLink_Login_execsfAckLoginWithThailand_Parms parms;

	if ( !psfAckLoginWithThailand )
		psfAckLoginWithThailand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLoginWithThailand" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckLoginWithThailand, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLoginWithThailand ( struct FString USN, int BloodDisplayType, int PCBangType, struct FString UnixTimeStamp, struct FString HashValue, unsigned char Sex )
{
	static UFunction* psfReqLoginWithThailand = 0;
	UBTTcpLink_Login_execsfReqLoginWithThailand_Parms parms;

	if ( !psfReqLoginWithThailand )
		psfReqLoginWithThailand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLoginWithThailand" );

	parms.USN = USN;
	parms.BloodDisplayType = BloodDisplayType;
	parms.PCBangType = PCBangType;
	parms.UnixTimeStamp = UnixTimeStamp;
	parms.HashValue = HashValue;
	parms.Sex = Sex;
	this->ProcessEvent ( psfReqLoginWithThailand, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLogOut ( unsigned char Result, unsigned char Reason )
{
	static UFunction* psfAckLogOut = 0;
	UBTTcpLink_Login_execsfAckLogOut_Parms parms;

	if ( !psfAckLogOut )
		psfAckLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLogOut" );

	parms.Result = Result;
	parms.Reason = Reason;
	this->ProcessEvent ( psfAckLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLogOut ( unsigned char Reason )
{
	static UFunction* psfReqLogOut = 0;
	UBTTcpLink_Login_execsfReqLogOut_Parms parms;

	if ( !psfReqLogOut )
		psfReqLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLogOut" );

	parms.Reason = Reason;
	this->ProcessEvent ( psfReqLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock )
{
	static UFunction* psfAckLoginWithTencentAuth = 0;
	UBTTcpLink_Login_execsfAckLoginWithTencentAuth_Parms parms;

	if ( !psfAckLoginWithTencentAuth )
		psfAckLoginWithTencentAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLoginWithTencentAuth" );

	parms.Result = Result;
	parms.tc_AccountType = tc_AccountType;
	parms.tc_IsBlock = tc_IsBlock;
	this->ProcessEvent ( psfAckLoginWithTencentAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLoginWithTencentAuth ( struct FString AccountID, class TArray< unsigned char > Signature )
{
	static UFunction* psfReqLoginWithTencentAuth = 0;
	UBTTcpLink_Login_execsfReqLoginWithTencentAuth_Parms parms;

	if ( !psfReqLoginWithTencentAuth )
		psfReqLoginWithTencentAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLoginWithTencentAuth" );

	parms.AccountID = AccountID;
	parms.Signature = Signature;
	this->ProcessEvent ( psfReqLoginWithTencentAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec )
{
	static UFunction* psfAckTencent_AASInfo = 0;
	UBTTcpLink_Login_execsfAckTencent_AASInfo_Parms parms;

	if ( !psfAckTencent_AASInfo )
		psfAckTencent_AASInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckTencent_AASInfo" );

	parms.UserID = UserID;
	parms.IsAdult = IsAdult;
	parms.IsQQAuth = IsQQAuth;
	parms.AccumTimeSec = AccumTimeSec;
	this->ProcessEvent ( psfAckTencent_AASInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckEventNotify ( int Type )
{
	static UFunction* psfAckEventNotify = 0;
	UBTTcpLink_Login_execsfAckEventNotify_Parms parms;

	if ( !psfAckEventNotify )
		psfAckEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckEventNotify" );

	parms.Type = Type;
	this->ProcessEvent ( psfAckEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqEventNotify (  )
{
	static UFunction* psfReqEventNotify = 0;
	UBTTcpLink_Login_execsfReqEventNotify_Parms parms;

	if ( !psfReqEventNotify )
		psfReqEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqEventNotify" );

	this->ProcessEvent ( psfReqEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckErrorReportServerAddr ( struct FString Addr, int Port )
{
	static UFunction* psfAckErrorReportServerAddr = 0;
	UBTTcpLink_Login_execsfAckErrorReportServerAddr_Parms parms;

	if ( !psfAckErrorReportServerAddr )
		psfAckErrorReportServerAddr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckErrorReportServerAddr" );

	parms.Addr = Addr;
	parms.Port = Port;
	this->ProcessEvent ( psfAckErrorReportServerAddr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqErrorReportServerAddr (  )
{
	static UFunction* psfReqErrorReportServerAddr = 0;
	UBTTcpLink_Login_execsfReqErrorReportServerAddr_Parms parms;

	if ( !psfReqErrorReportServerAddr )
		psfReqErrorReportServerAddr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqErrorReportServerAddr" );

	this->ProcessEvent ( psfReqErrorReportServerAddr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckClientChecksum ( int Result )
{
	static UFunction* psfAckClientChecksum = 0;
	UBTTcpLink_Login_execsfAckClientChecksum_Parms parms;

	if ( !psfAckClientChecksum )
		psfAckClientChecksum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckClientChecksum" );

	parms.Result = Result;
	this->ProcessEvent ( psfAckClientChecksum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqClientChecksum ( struct FString Key1, struct FBtrDouble Key2 )
{
	static UFunction* psfReqClientChecksum = 0;
	UBTTcpLink_Login_execsfReqClientChecksum_Parms parms;

	if ( !psfReqClientChecksum )
		psfReqClientChecksum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqClientChecksum" );

	parms.Key1 = Key1;
	parms.Key2 = Key2;
	this->ProcessEvent ( psfReqClientChecksum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 )
{
	static UFunction* psfAckClientChallenge = 0;
	UBTTcpLink_Login_execsfAckClientChallenge_Parms parms;

	if ( !psfAckClientChallenge )
		psfAckClientChallenge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckClientChallenge" );

	parms.Key1 = Key1;
	parms.Key2 = Key2;
	this->ProcessEvent ( psfAckClientChallenge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqClientChallenge (  )
{
	static UFunction* psfReqClientChallenge = 0;
	UBTTcpLink_Login_execsfReqClientChallenge_Parms parms;

	if ( !psfReqClientChallenge )
		psfReqClientChallenge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqClientChallenge" );

	this->ProcessEvent ( psfReqClientChallenge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckServerTime ( int Time )
{
	static UFunction* psfAckServerTime = 0;
	UBTTcpLink_Login_execsfAckServerTime_Parms parms;

	if ( !psfAckServerTime )
		psfAckServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckServerTime" );

	parms.Time = Time;
	this->ProcessEvent ( psfAckServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqServerTime (  )
{
	static UFunction* psfReqServerTime = 0;
	UBTTcpLink_Login_execsfReqServerTime_Parms parms;

	if ( !psfReqServerTime )
		psfReqServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqServerTime" );

	this->ProcessEvent ( psfReqServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckGetCharBlockInfo ( int Result, unsigned char IsAccountBlock, unsigned char IsChattingBlock, struct FBtrDouble ChattingBlockEndTime, class TArray< struct FString > BlockedItemName )
{
	static UFunction* psfAckGetCharBlockInfo = 0;
	UBTTcpLink_Login_execsfAckGetCharBlockInfo_Parms parms;

	if ( !psfAckGetCharBlockInfo )
		psfAckGetCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckGetCharBlockInfo" );

	parms.Result = Result;
	parms.IsAccountBlock = IsAccountBlock;
	parms.IsChattingBlock = IsChattingBlock;
	parms.ChattingBlockEndTime = ChattingBlockEndTime;
	parms.BlockedItemName = BlockedItemName;
	this->ProcessEvent ( psfAckGetCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqGetCharBlockInfo (  )
{
	static UFunction* psfReqGetCharBlockInfo = 0;
	UBTTcpLink_Login_execsfReqGetCharBlockInfo_Parms parms;

	if ( !psfReqGetCharBlockInfo )
		psfReqGetCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqGetCharBlockInfo" );

	this->ProcessEvent ( psfReqGetCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckRegisterMainPCBang ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckRegisterMainPCBang = 0;
	UBTTcpLink_Login_execsfAckRegisterMainPCBang_Parms parms;

	if ( !psfAckRegisterMainPCBang )
		psfAckRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckRegisterMainPCBang" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqRegisterMainPCBang (  )
{
	static UFunction* psfReqRegisterMainPCBang = 0;
	UBTTcpLink_Login_execsfReqRegisterMainPCBang_Parms parms;

	if ( !psfReqRegisterMainPCBang )
		psfReqRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqRegisterMainPCBang" );

	this->ProcessEvent ( psfReqRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckPCBangUserListEnd (  )
{
	static UFunction* psfAckPCBangUserListEnd = 0;
	UBTTcpLink_Login_execsfAckPCBangUserListEnd_Parms parms;

	if ( !psfAckPCBangUserListEnd )
		psfAckPCBangUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckPCBangUserListEnd" );

	this->ProcessEvent ( psfAckPCBangUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose )
{
	static UFunction* psfAckPCBangUserList = 0;
	UBTTcpLink_Login_execsfAckPCBangUserList_Parms parms;

	if ( !psfAckPCBangUserList )
		psfAckPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckPCBangUserList" );

	parms.FriendName = FriendName;
	parms.IsLogOn = IsLogOn;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.Level = Level;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	this->ProcessEvent ( psfAckPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckPCBangUserListStart ( int Result, int TotalCount )
{
	static UFunction* psfAckPCBangUserListStart = 0;
	UBTTcpLink_Login_execsfAckPCBangUserListStart_Parms parms;

	if ( !psfAckPCBangUserListStart )
		psfAckPCBangUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckPCBangUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckPCBangUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqPCBangUserList (  )
{
	static UFunction* psfReqPCBangUserList = 0;
	UBTTcpLink_Login_execsfReqPCBangUserList_Parms parms;

	if ( !psfReqPCBangUserList )
		psfReqPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqPCBangUserList" );

	this->ProcessEvent ( psfReqPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName )
{
	static UFunction* psfAckRegisteredPCBangInfo = 0;
	UBTTcpLink_Login_execsfAckRegisteredPCBangInfo_Parms parms;

	if ( !psfAckRegisteredPCBangInfo )
		psfAckRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckRegisteredPCBangInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsRegisteredPCBang = IsRegisteredPCBang;
	parms.IsMainPCBang = IsMainPCBang;
	parms.PCBangName = PCBangName;
	this->ProcessEvent ( psfAckRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqRegisteredPCBangInfo (  )
{
	static UFunction* psfReqRegisteredPCBangInfo = 0;
	UBTTcpLink_Login_execsfReqRegisteredPCBangInfo_Parms parms;

	if ( !psfReqRegisteredPCBangInfo )
		psfReqRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqRegisteredPCBangInfo" );

	this->ProcessEvent ( psfReqRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckCharInfo ( int Result, struct FString CharName, int Level, int Exp, struct FString ClanName )
{
	static UFunction* psfAckCharInfo = 0;
	UBTTcpLink_Login_execsfAckCharInfo_Parms parms;

	if ( !psfAckCharInfo )
		psfAckCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckCharInfo" );

	parms.Result = Result;
	parms.CharName = CharName;
	parms.Level = Level;
	parms.Exp = Exp;
	parms.ClanName = ClanName;
	this->ProcessEvent ( psfAckCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqCharInfo ( struct FString CharName )
{
	static UFunction* psfReqCharInfo = 0;
	UBTTcpLink_Login_execsfReqCharInfo_Parms parms;

	if ( !psfReqCharInfo )
		psfReqCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqCharInfo" );

	parms.CharName = CharName;
	this->ProcessEvent ( psfReqCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqForceLogoutByOwner (  )
{
	static UFunction* psfReqForceLogoutByOwner = 0;
	UBTTcpLink_Login_execsfReqForceLogoutByOwner_Parms parms;

	if ( !psfReqForceLogoutByOwner )
		psfReqForceLogoutByOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqForceLogoutByOwner" );

	this->ProcessEvent ( psfReqForceLogoutByOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqKeepAlive (  )
{
	static UFunction* psfReqKeepAlive = 0;
	UBTTcpLink_Login_execsfReqKeepAlive_Parms parms;

	if ( !psfReqKeepAlive )
		psfReqKeepAlive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqKeepAlive" );

	this->ProcessEvent ( psfReqKeepAlive, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckMaxUserExceed (  )
{
	static UFunction* psfAckMaxUserExceed = 0;
	UBTTcpLink_Login_execsfAckMaxUserExceed_Parms parms;

	if ( !psfAckMaxUserExceed )
		psfAckMaxUserExceed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckMaxUserExceed" );

	this->ProcessEvent ( psfAckMaxUserExceed, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckClanMemberListFromClientEnd (  )
{
	static UFunction* psfAckClanMemberListFromClientEnd = 0;
	UBTTcpLink_Login_execsfAckClanMemberListFromClientEnd_Parms parms;

	if ( !psfAckClanMemberListFromClientEnd )
		psfAckClanMemberListFromClientEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckClanMemberListFromClientEnd" );

	this->ProcessEvent ( psfAckClanMemberListFromClientEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckClanMemberListFromClient ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< struct FString > ServerName, class TArray< struct FString > ServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< unsigned char > CurPos, class TArray< int > ChannelNum, class TArray< struct FString > ChannelNickName, class TArray< int > GameRoomNum )
{
	static UFunction* psfAckClanMemberListFromClient = 0;
	UBTTcpLink_Login_execsfAckClanMemberListFromClient_Parms parms;

	if ( !psfAckClanMemberListFromClient )
		psfAckClanMemberListFromClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckClanMemberListFromClient" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ServerName = ServerName;
	parms.ServerShortName = ServerShortName;
	parms.ServerIP = ServerIP;
	parms.serverPort = serverPort;
	parms.CurPos = CurPos;
	parms.ChannelNum = ChannelNum;
	parms.ChannelNickName = ChannelNickName;
	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( psfAckClanMemberListFromClient, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckClanMemberListFromClientStart ( int Result, int TotalCount )
{
	static UFunction* psfAckClanMemberListFromClientStart = 0;
	UBTTcpLink_Login_execsfAckClanMemberListFromClientStart_Parms parms;

	if ( !psfAckClanMemberListFromClientStart )
		psfAckClanMemberListFromClientStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckClanMemberListFromClientStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckClanMemberListFromClientStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqClanMemberListFromClient (  )
{
	static UFunction* psfReqClanMemberListFromClient = 0;
	UBTTcpLink_Login_execsfReqClanMemberListFromClient_Parms parms;

	if ( !psfReqClanMemberListFromClient )
		psfReqClanMemberListFromClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqClanMemberListFromClient" );

	this->ProcessEvent ( psfReqClanMemberListFromClient, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType )
{
	static UFunction* psfAckLoginWithWZAuth = 0;
	UBTTcpLink_Login_execsfAckLoginWithWZAuth_Parms parms;

	if ( !psfAckLoginWithWZAuth )
		psfAckLoginWithWZAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLoginWithWZAuth" );

	parms.Result = Result;
	parms.wzp_AccountType = wzp_AccountType;
	parms.wzp_IsBlock = wzp_IsBlock;
	parms.wzp_AuthKeySuccess = wzp_AuthKeySuccess;
	parms.ChannelType = ChannelType;
	this->ProcessEvent ( psfAckLoginWithWZAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLoginWithWZAuth ( struct FString AccountID, struct FString Guid, struct FString AuthKey )
{
	static UFunction* psfReqLoginWithWZAuth = 0;
	UBTTcpLink_Login_execsfReqLoginWithWZAuth_Parms parms;

	if ( !psfReqLoginWithWZAuth )
		psfReqLoginWithWZAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLoginWithWZAuth" );

	parms.AccountID = AccountID;
	parms.Guid = Guid;
	parms.AuthKey = AuthKey;
	this->ProcessEvent ( psfReqLoginWithWZAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckProcessPreLoginUser ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckProcessPreLoginUser = 0;
	UBTTcpLink_Login_execsfAckProcessPreLoginUser_Parms parms;

	if ( !psfAckProcessPreLoginUser )
		psfAckProcessPreLoginUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckProcessPreLoginUser" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckProcessPreLoginUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqProcessPreLoginUser ( struct FString CharName, unsigned char Type )
{
	static UFunction* psfReqProcessPreLoginUser = 0;
	UBTTcpLink_Login_execsfReqProcessPreLoginUser_Parms parms;

	if ( !psfReqProcessPreLoginUser )
		psfReqProcessPreLoginUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqProcessPreLoginUser" );

	parms.CharName = CharName;
	parms.Type = Type;
	this->ProcessEvent ( psfReqProcessPreLoginUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime )
{
	static UFunction* psfAckLoginInHouseTest = 0;
	UBTTcpLink_Login_execsfAckLoginInHouseTest_Parms parms;

	if ( !psfAckLoginInHouseTest )
		psfAckLoginInHouseTest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLoginInHouseTest" );

	parms.Sucess = Sucess;
	parms.CharName = CharName;
	parms.TimeStamp = TimeStamp;
	parms.LoginHash1 = LoginHash1;
	parms.LoginHash2 = LoginHash2;
	parms.LoginHash3 = LoginHash3;
	parms.LoginHash4 = LoginHash4;
	parms.LoginHash5 = LoginHash5;
	parms.NeedChar = NeedChar;
	parms.ErrMsg = ErrMsg;
	parms.BDay = BDay;
	parms.Sex = Sex;
	parms.ServerTime = ServerTime;
	this->ProcessEvent ( psfAckLoginInHouseTest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLoginInHouseTest ( struct FString UserName, struct FString Password, struct FString Guid )
{
	static UFunction* psfReqLoginInHouseTest = 0;
	UBTTcpLink_Login_execsfReqLoginInHouseTest_Parms parms;

	if ( !psfReqLoginInHouseTest )
		psfReqLoginInHouseTest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLoginInHouseTest" );

	parms.UserName = UserName;
	parms.Password = Password;
	parms.Guid = Guid;
	this->ProcessEvent ( psfReqLoginInHouseTest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckAdvertisement ( int Result, unsigned char Type, struct FString Address )
{
	static UFunction* psfAckAdvertisement = 0;
	UBTTcpLink_Login_execsfAckAdvertisement_Parms parms;

	if ( !psfAckAdvertisement )
		psfAckAdvertisement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckAdvertisement" );

	parms.Result = Result;
	parms.Type = Type;
	parms.Address = Address;
	this->ProcessEvent ( psfAckAdvertisement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqAdvertisement (  )
{
	static UFunction* psfReqAdvertisement = 0;
	UBTTcpLink_Login_execsfReqAdvertisement_Parms parms;

	if ( !psfReqAdvertisement )
		psfReqAdvertisement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqAdvertisement" );

	this->ProcessEvent ( psfReqAdvertisement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckUserDetailInfo ( int Result, struct FString UserName, struct FString ClanName, int Ranking, int MatchNum, int WinNum, int LoseNum, int CurrentEXP, int NextExp, int ForcedDisconnectedNum, int PrimaryWeaponID, int SubWeaponID, int Point )
{
	static UFunction* psfAckUserDetailInfo = 0;
	UBTTcpLink_Login_execsfAckUserDetailInfo_Parms parms;

	if ( !psfAckUserDetailInfo )
		psfAckUserDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckUserDetailInfo" );

	parms.Result = Result;
	parms.UserName = UserName;
	parms.ClanName = ClanName;
	parms.Ranking = Ranking;
	parms.MatchNum = MatchNum;
	parms.WinNum = WinNum;
	parms.LoseNum = LoseNum;
	parms.CurrentEXP = CurrentEXP;
	parms.NextExp = NextExp;
	parms.ForcedDisconnectedNum = ForcedDisconnectedNum;
	parms.PrimaryWeaponID = PrimaryWeaponID;
	parms.SubWeaponID = SubWeaponID;
	parms.Point = Point;
	this->ProcessEvent ( psfAckUserDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqUserDetailInfo ( int UserID, struct FString UserName )
{
	static UFunction* psfReqUserDetailInfo = 0;
	UBTTcpLink_Login_execsfReqUserDetailInfo_Parms parms;

	if ( !psfReqUserDetailInfo )
		psfReqUserDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqUserDetailInfo" );

	parms.UserID = UserID;
	parms.UserName = UserName;
	this->ProcessEvent ( psfReqUserDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckFriendsListEnd (  )
{
	static UFunction* psfAckFriendsListEnd = 0;
	UBTTcpLink_Login_execsfAckFriendsListEnd_Parms parms;

	if ( !psfAckFriendsListEnd )
		psfAckFriendsListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckFriendsListEnd" );

	this->ProcessEvent ( psfAckFriendsListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckFriendsList ( unsigned char ListType, class TArray< struct FString > UserName, class TArray< unsigned char > IsLogOn, class TArray< int > CMarkPattern, class TArray< int > CMarkBG, class TArray< int > CMarkBL, class TArray< struct FString > ClanName, class TArray< int > Level )
{
	static UFunction* psfAckFriendsList = 0;
	UBTTcpLink_Login_execsfAckFriendsList_Parms parms;

	if ( !psfAckFriendsList )
		psfAckFriendsList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckFriendsList" );

	parms.ListType = ListType;
	parms.UserName = UserName;
	parms.IsLogOn = IsLogOn;
	parms.CMarkPattern = CMarkPattern;
	parms.CMarkBG = CMarkBG;
	parms.CMarkBL = CMarkBL;
	parms.ClanName = ClanName;
	parms.Level = Level;
	this->ProcessEvent ( psfAckFriendsList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckFriendsListStart ( int Result, int TotalCount )
{
	static UFunction* psfAckFriendsListStart = 0;
	UBTTcpLink_Login_execsfAckFriendsListStart_Parms parms;

	if ( !psfAckFriendsListStart )
		psfAckFriendsListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckFriendsListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( psfAckFriendsListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqFriendsList (  )
{
	static UFunction* psfReqFriendsList = 0;
	UBTTcpLink_Login_execsfReqFriendsList_Parms parms;

	if ( !psfReqFriendsList )
		psfReqFriendsList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqFriendsList" );

	this->ProcessEvent ( psfReqFriendsList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckConnectChannelServer ( struct FString SessionKey, int TimeStamp )
{
	static UFunction* psfAckConnectChannelServer = 0;
	UBTTcpLink_Login_execsfAckConnectChannelServer_Parms parms;

	if ( !psfAckConnectChannelServer )
		psfAckConnectChannelServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckConnectChannelServer" );

	parms.SessionKey = SessionKey;
	parms.TimeStamp = TimeStamp;
	this->ProcessEvent ( psfAckConnectChannelServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqConnectChannelServer ( struct FString ServerIP, int serverPort )
{
	static UFunction* psfReqConnectChannelServer = 0;
	UBTTcpLink_Login_execsfReqConnectChannelServer_Parms parms;

	if ( !psfReqConnectChannelServer )
		psfReqConnectChannelServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqConnectChannelServer" );

	parms.ServerIP = ServerIP;
	parms.serverPort = serverPort;
	this->ProcessEvent ( psfReqConnectChannelServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckServerList ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost )
{
	static UFunction* psfAckServerList = 0;
	UBTTcpLink_Login_execsfAckServerList_Parms parms;

	if ( !psfAckServerList )
		psfAckServerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckServerList" );

	parms.CServername = CServername;
	parms.CServerShortName = CServerShortName;
	parms.ServerIP = ServerIP;
	parms.serverPort = serverPort;
	parms.ChannelName = ChannelName;
	parms.ChannelNickName = ChannelNickName;
	parms.ChannelNum = ChannelNum;
	parms.chMaxUser = chMaxUser;
	parms.chCurUser = chCurUser;
	parms.ServerGroupName = ServerGroupName;
	parms.ServerGroupID = ServerGroupID;
	parms.ServerDispOrder = ServerDispOrder;
	parms.DataPort = DataPort;
	parms.OptionCount_byte = OptionCount_byte;
	parms.OptionKey_byte = OptionKey_byte;
	parms.OptionValue_byte = OptionValue_byte;
	parms.OptionCount_int = OptionCount_int;
	parms.OptionKey_int = OptionKey_int;
	parms.OptionValue_int = OptionValue_int;
	parms.OptionCount_float = OptionCount_float;
	parms.OptionKey_float = OptionKey_float;
	parms.OptionValue_float = OptionValue_float;
	parms.IsClanChannel = IsClanChannel;
	parms.IsUseDedicateHost = IsUseDedicateHost;
	this->ProcessEvent ( psfAckServerList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqServerList (  )
{
	static UFunction* psfReqServerList = 0;
	UBTTcpLink_Login_execsfReqServerList_Parms parms;

	if ( !psfReqServerList )
		psfReqServerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqServerList" );

	this->ProcessEvent ( psfReqServerList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckCreateChar ( int Success, struct FString ErrMsg )
{
	static UFunction* psfAckCreateChar = 0;
	UBTTcpLink_Login_execsfAckCreateChar_Parms parms;

	if ( !psfAckCreateChar )
		psfAckCreateChar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckCreateChar" );

	parms.Success = Success;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckCreateChar, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqCreateChar ( struct FString CharName, int HeadItemID, int HelmetItemID, int AccesoItemID )
{
	static UFunction* psfReqCreateChar = 0;
	UBTTcpLink_Login_execsfReqCreateChar_Parms parms;

	if ( !psfReqCreateChar )
		psfReqCreateChar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqCreateChar" );

	parms.CharName = CharName;
	parms.HeadItemID = HeadItemID;
	parms.HelmetItemID = HelmetItemID;
	parms.AccesoItemID = AccesoItemID;
	this->ProcessEvent ( psfReqCreateChar, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckAccesItemTypeList ( class TArray< struct FString > AccesoItemName, class TArray< int > AccesoItemID )
{
	static UFunction* psfAckAccesItemTypeList = 0;
	UBTTcpLink_Login_execsfAckAccesItemTypeList_Parms parms;

	if ( !psfAckAccesItemTypeList )
		psfAckAccesItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckAccesItemTypeList" );

	parms.AccesoItemName = AccesoItemName;
	parms.AccesoItemID = AccesoItemID;
	this->ProcessEvent ( psfAckAccesItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqAccesItemTypeList (  )
{
	static UFunction* psfReqAccesItemTypeList = 0;
	UBTTcpLink_Login_execsfReqAccesItemTypeList_Parms parms;

	if ( !psfReqAccesItemTypeList )
		psfReqAccesItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqAccesItemTypeList" );

	this->ProcessEvent ( psfReqAccesItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckHelmetItemTypeList ( class TArray< struct FString > HelmetItemName, class TArray< int > HelmetItemID )
{
	static UFunction* psfAckHelmetItemTypeList = 0;
	UBTTcpLink_Login_execsfAckHelmetItemTypeList_Parms parms;

	if ( !psfAckHelmetItemTypeList )
		psfAckHelmetItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckHelmetItemTypeList" );

	parms.HelmetItemName = HelmetItemName;
	parms.HelmetItemID = HelmetItemID;
	this->ProcessEvent ( psfAckHelmetItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqHelmetItemTypeList (  )
{
	static UFunction* psfReqHelmetItemTypeList = 0;
	UBTTcpLink_Login_execsfReqHelmetItemTypeList_Parms parms;

	if ( !psfReqHelmetItemTypeList )
		psfReqHelmetItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqHelmetItemTypeList" );

	this->ProcessEvent ( psfReqHelmetItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckHeadItemTypeList ( class TArray< int > HeadItemID )
{
	static UFunction* psfAckHeadItemTypeList = 0;
	UBTTcpLink_Login_execsfAckHeadItemTypeList_Parms parms;

	if ( !psfAckHeadItemTypeList )
		psfAckHeadItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckHeadItemTypeList" );

	parms.HeadItemID = HeadItemID;
	this->ProcessEvent ( psfAckHeadItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqHeadItemTypeList (  )
{
	static UFunction* psfReqHeadItemTypeList = 0;
	UBTTcpLink_Login_execsfReqHeadItemTypeList_Parms parms;

	if ( !psfReqHeadItemTypeList )
		psfReqHeadItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqHeadItemTypeList" );

	this->ProcessEvent ( psfReqHeadItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckLogin ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg )
{
	static UFunction* psfAckLogin = 0;
	UBTTcpLink_Login_execsfAckLogin_Parms parms;

	if ( !psfAckLogin )
		psfAckLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckLogin" );

	parms.Sucess = Sucess;
	parms.CharName = CharName;
	parms.TimeStamp = TimeStamp;
	parms.LoginHash1 = LoginHash1;
	parms.LoginHash2 = LoginHash2;
	parms.LoginHash3 = LoginHash3;
	parms.LoginHash4 = LoginHash4;
	parms.LoginHash5 = LoginHash5;
	parms.NeedChar = NeedChar;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqLogin ( struct FString PortalID )
{
	static UFunction* psfReqLogin = 0;
	UBTTcpLink_Login_execsfReqLogin_Parms parms;

	if ( !psfReqLogin )
		psfReqLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqLogin" );

	parms.PortalID = PortalID;
	this->ProcessEvent ( psfReqLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckExceedMaxUser (  )
{
	static UFunction* psfAckExceedMaxUser = 0;
	UBTTcpLink_Login_execsfAckExceedMaxUser_Parms parms;

	if ( !psfAckExceedMaxUser )
		psfAckExceedMaxUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckExceedMaxUser" );

	this->ProcessEvent ( psfAckExceedMaxUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfAckHash ( int Result, struct FString ErrMsg )
{
	static UFunction* psfAckHash = 0;
	UBTTcpLink_Login_execsfAckHash_Parms parms;

	if ( !psfAckHash )
		psfAckHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfAckHash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( psfAckHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::sfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 )
{
	static UFunction* psfReqHash = 0;
	UBTTcpLink_Login_execsfReqHash_Parms parms;

	if ( !psfReqHash )
		psfReqHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.sfReqHash" );

	parms.HashField0 = HashField0;
	parms.HashField1 = HashField1;
	parms.HashField2 = HashField2;
	parms.HashField3 = HashField3;
	this->ProcessEvent ( psfReqHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLoginWithIndonesia ( int Result )
{
	static UFunction* prfAckLoginWithIndonesia = 0;
	UBTTcpLink_Login_eventrfAckLoginWithIndonesia_Parms parms;

	if ( !prfAckLoginWithIndonesia )
		prfAckLoginWithIndonesia = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLoginWithIndonesia" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckLoginWithIndonesia, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLoginWithIndonesia ( struct FString HashValue )
{
	static UFunction* prfReqLoginWithIndonesia = 0;
	UBTTcpLink_Login_eventrfReqLoginWithIndonesia_Parms parms;

	if ( !prfReqLoginWithIndonesia )
		prfReqLoginWithIndonesia = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLoginWithIndonesia" );

	parms.HashValue = HashValue;
	this->ProcessEvent ( prfReqLoginWithIndonesia, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLoginWithGlobal ( int Result )
{
	static UFunction* prfAckLoginWithGlobal = 0;
	UBTTcpLink_Login_eventrfAckLoginWithGlobal_Parms parms;

	if ( !prfAckLoginWithGlobal )
		prfAckLoginWithGlobal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLoginWithGlobal" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckLoginWithGlobal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLoginWithGlobal ( struct FString G_AccountID, struct FString G_GUID, struct FString G_AuthKey, int UserType )
{
	static UFunction* prfReqLoginWithGlobal = 0;
	UBTTcpLink_Login_eventrfReqLoginWithGlobal_Parms parms;

	if ( !prfReqLoginWithGlobal )
		prfReqLoginWithGlobal = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLoginWithGlobal" );

	parms.G_AccountID = G_AccountID;
	parms.G_GUID = G_GUID;
	parms.G_AuthKey = G_AuthKey;
	parms.UserType = UserType;
	this->ProcessEvent ( prfReqLoginWithGlobal, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLoginWithThailand ( int Result )
{
	static UFunction* prfAckLoginWithThailand = 0;
	UBTTcpLink_Login_eventrfAckLoginWithThailand_Parms parms;

	if ( !prfAckLoginWithThailand )
		prfAckLoginWithThailand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLoginWithThailand" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckLoginWithThailand, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLoginWithThailand ( struct FString USN, int BloodDisplayType, int PCBangType, struct FString UnixTimeStamp, struct FString HashValue, unsigned char Sex )
{
	static UFunction* prfReqLoginWithThailand = 0;
	UBTTcpLink_Login_eventrfReqLoginWithThailand_Parms parms;

	if ( !prfReqLoginWithThailand )
		prfReqLoginWithThailand = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLoginWithThailand" );

	parms.USN = USN;
	parms.BloodDisplayType = BloodDisplayType;
	parms.PCBangType = PCBangType;
	parms.UnixTimeStamp = UnixTimeStamp;
	parms.HashValue = HashValue;
	parms.Sex = Sex;
	this->ProcessEvent ( prfReqLoginWithThailand, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLogOut ( unsigned char Result, unsigned char Reason )
{
	static UFunction* prfAckLogOut = 0;
	UBTTcpLink_Login_eventrfAckLogOut_Parms parms;

	if ( !prfAckLogOut )
		prfAckLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLogOut" );

	parms.Result = Result;
	parms.Reason = Reason;
	this->ProcessEvent ( prfAckLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLogOut ( unsigned char Reason )
{
	static UFunction* prfReqLogOut = 0;
	UBTTcpLink_Login_eventrfReqLogOut_Parms parms;

	if ( !prfReqLogOut )
		prfReqLogOut = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLogOut" );

	parms.Reason = Reason;
	this->ProcessEvent ( prfReqLogOut, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLoginWithTencentAuth ( int Result, unsigned char tc_AccountType, unsigned char tc_IsBlock )
{
	static UFunction* prfAckLoginWithTencentAuth = 0;
	UBTTcpLink_Login_eventrfAckLoginWithTencentAuth_Parms parms;

	if ( !prfAckLoginWithTencentAuth )
		prfAckLoginWithTencentAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLoginWithTencentAuth" );

	parms.Result = Result;
	parms.tc_AccountType = tc_AccountType;
	parms.tc_IsBlock = tc_IsBlock;
	this->ProcessEvent ( prfAckLoginWithTencentAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLoginWithTencentAuth ( struct FString AccountID, class TArray< unsigned char > Signature )
{
	static UFunction* prfReqLoginWithTencentAuth = 0;
	UBTTcpLink_Login_eventrfReqLoginWithTencentAuth_Parms parms;

	if ( !prfReqLoginWithTencentAuth )
		prfReqLoginWithTencentAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLoginWithTencentAuth" );

	parms.AccountID = AccountID;
	parms.Signature = Signature;
	this->ProcessEvent ( prfReqLoginWithTencentAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckTencent_AASInfo ( int UserID, unsigned char IsAdult, unsigned char IsQQAuth, int AccumTimeSec )
{
	static UFunction* prfAckTencent_AASInfo = 0;
	UBTTcpLink_Login_eventrfAckTencent_AASInfo_Parms parms;

	if ( !prfAckTencent_AASInfo )
		prfAckTencent_AASInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckTencent_AASInfo" );

	parms.UserID = UserID;
	parms.IsAdult = IsAdult;
	parms.IsQQAuth = IsQQAuth;
	parms.AccumTimeSec = AccumTimeSec;
	this->ProcessEvent ( prfAckTencent_AASInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckEventNotify ( int Type )
{
	static UFunction* prfAckEventNotify = 0;
	UBTTcpLink_Login_eventrfAckEventNotify_Parms parms;

	if ( !prfAckEventNotify )
		prfAckEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckEventNotify" );

	parms.Type = Type;
	this->ProcessEvent ( prfAckEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqEventNotify (  )
{
	static UFunction* prfReqEventNotify = 0;
	UBTTcpLink_Login_eventrfReqEventNotify_Parms parms;

	if ( !prfReqEventNotify )
		prfReqEventNotify = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqEventNotify" );

	this->ProcessEvent ( prfReqEventNotify, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckErrorReportServerAddr ( struct FString Addr, int Port )
{
	static UFunction* prfAckErrorReportServerAddr = 0;
	UBTTcpLink_Login_eventrfAckErrorReportServerAddr_Parms parms;

	if ( !prfAckErrorReportServerAddr )
		prfAckErrorReportServerAddr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckErrorReportServerAddr" );

	parms.Addr = Addr;
	parms.Port = Port;
	this->ProcessEvent ( prfAckErrorReportServerAddr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqErrorReportServerAddr (  )
{
	static UFunction* prfReqErrorReportServerAddr = 0;
	UBTTcpLink_Login_eventrfReqErrorReportServerAddr_Parms parms;

	if ( !prfReqErrorReportServerAddr )
		prfReqErrorReportServerAddr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqErrorReportServerAddr" );

	this->ProcessEvent ( prfReqErrorReportServerAddr, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckClientChecksum ( int Result )
{
	static UFunction* prfAckClientChecksum = 0;
	UBTTcpLink_Login_eventrfAckClientChecksum_Parms parms;

	if ( !prfAckClientChecksum )
		prfAckClientChecksum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckClientChecksum" );

	parms.Result = Result;
	this->ProcessEvent ( prfAckClientChecksum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqClientChecksum ( struct FString Key1, struct FBtrDouble Key2 )
{
	static UFunction* prfReqClientChecksum = 0;
	UBTTcpLink_Login_eventrfReqClientChecksum_Parms parms;

	if ( !prfReqClientChecksum )
		prfReqClientChecksum = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqClientChecksum" );

	parms.Key1 = Key1;
	parms.Key2 = Key2;
	this->ProcessEvent ( prfReqClientChecksum, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckClientChallenge ( struct FString Key1, struct FBtrDouble Key2 )
{
	static UFunction* prfAckClientChallenge = 0;
	UBTTcpLink_Login_eventrfAckClientChallenge_Parms parms;

	if ( !prfAckClientChallenge )
		prfAckClientChallenge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckClientChallenge" );

	parms.Key1 = Key1;
	parms.Key2 = Key2;
	this->ProcessEvent ( prfAckClientChallenge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqClientChallenge (  )
{
	static UFunction* prfReqClientChallenge = 0;
	UBTTcpLink_Login_eventrfReqClientChallenge_Parms parms;

	if ( !prfReqClientChallenge )
		prfReqClientChallenge = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqClientChallenge" );

	this->ProcessEvent ( prfReqClientChallenge, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckServerTime ( int Time )
{
	static UFunction* prfAckServerTime = 0;
	UBTTcpLink_Login_eventrfAckServerTime_Parms parms;

	if ( !prfAckServerTime )
		prfAckServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckServerTime" );

	parms.Time = Time;
	this->ProcessEvent ( prfAckServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqServerTime (  )
{
	static UFunction* prfReqServerTime = 0;
	UBTTcpLink_Login_eventrfReqServerTime_Parms parms;

	if ( !prfReqServerTime )
		prfReqServerTime = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqServerTime" );

	this->ProcessEvent ( prfReqServerTime, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckGetCharBlockInfo ( int Result, unsigned char IsAccountBlock, unsigned char IsChattingBlock, struct FBtrDouble ChattingBlockEndTime, class TArray< struct FString > BlockedItemName )
{
	static UFunction* prfAckGetCharBlockInfo = 0;
	UBTTcpLink_Login_eventrfAckGetCharBlockInfo_Parms parms;

	if ( !prfAckGetCharBlockInfo )
		prfAckGetCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckGetCharBlockInfo" );

	parms.Result = Result;
	parms.IsAccountBlock = IsAccountBlock;
	parms.IsChattingBlock = IsChattingBlock;
	parms.ChattingBlockEndTime = ChattingBlockEndTime;
	parms.BlockedItemName = BlockedItemName;
	this->ProcessEvent ( prfAckGetCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqGetCharBlockInfo (  )
{
	static UFunction* prfReqGetCharBlockInfo = 0;
	UBTTcpLink_Login_eventrfReqGetCharBlockInfo_Parms parms;

	if ( !prfReqGetCharBlockInfo )
		prfReqGetCharBlockInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqGetCharBlockInfo" );

	this->ProcessEvent ( prfReqGetCharBlockInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckRegisterMainPCBang ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckRegisterMainPCBang = 0;
	UBTTcpLink_Login_eventrfAckRegisterMainPCBang_Parms parms;

	if ( !prfAckRegisterMainPCBang )
		prfAckRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckRegisterMainPCBang" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqRegisterMainPCBang (  )
{
	static UFunction* prfReqRegisterMainPCBang = 0;
	UBTTcpLink_Login_eventrfReqRegisterMainPCBang_Parms parms;

	if ( !prfReqRegisterMainPCBang )
		prfReqRegisterMainPCBang = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqRegisterMainPCBang" );

	this->ProcessEvent ( prfReqRegisterMainPCBang, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckPCBangUserListEnd (  )
{
	static UFunction* prfAckPCBangUserListEnd = 0;
	UBTTcpLink_Login_eventrfAckPCBangUserListEnd_Parms parms;

	if ( !prfAckPCBangUserListEnd )
		prfAckPCBangUserListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckPCBangUserListEnd" );

	this->ProcessEvent ( prfAckPCBangUserListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckPCBangUserList ( class TArray< struct FString > FriendName, class TArray< unsigned char > IsLogOn, class TArray< struct FString > ClanName, class TArray< int > CM_Pattern, class TArray< int > CM_BG, class TArray< int > CM_BL, class TArray< int > Level, class TArray< int > ClanGrade, class TArray< int > ClanWin, class TArray< int > ClanLose )
{
	static UFunction* prfAckPCBangUserList = 0;
	UBTTcpLink_Login_eventrfAckPCBangUserList_Parms parms;

	if ( !prfAckPCBangUserList )
		prfAckPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckPCBangUserList" );

	parms.FriendName = FriendName;
	parms.IsLogOn = IsLogOn;
	parms.ClanName = ClanName;
	parms.CM_Pattern = CM_Pattern;
	parms.CM_BG = CM_BG;
	parms.CM_BL = CM_BL;
	parms.Level = Level;
	parms.ClanGrade = ClanGrade;
	parms.ClanWin = ClanWin;
	parms.ClanLose = ClanLose;
	this->ProcessEvent ( prfAckPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckPCBangUserListStart ( int Result, int TotalCount )
{
	static UFunction* prfAckPCBangUserListStart = 0;
	UBTTcpLink_Login_eventrfAckPCBangUserListStart_Parms parms;

	if ( !prfAckPCBangUserListStart )
		prfAckPCBangUserListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckPCBangUserListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckPCBangUserListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqPCBangUserList (  )
{
	static UFunction* prfReqPCBangUserList = 0;
	UBTTcpLink_Login_eventrfReqPCBangUserList_Parms parms;

	if ( !prfReqPCBangUserList )
		prfReqPCBangUserList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqPCBangUserList" );

	this->ProcessEvent ( prfReqPCBangUserList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckRegisteredPCBangInfo ( int Result, struct FString ErrMsg, unsigned char IsRegisteredPCBang, unsigned char IsMainPCBang, struct FString PCBangName )
{
	static UFunction* prfAckRegisteredPCBangInfo = 0;
	UBTTcpLink_Login_eventrfAckRegisteredPCBangInfo_Parms parms;

	if ( !prfAckRegisteredPCBangInfo )
		prfAckRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckRegisteredPCBangInfo" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.IsRegisteredPCBang = IsRegisteredPCBang;
	parms.IsMainPCBang = IsMainPCBang;
	parms.PCBangName = PCBangName;
	this->ProcessEvent ( prfAckRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqRegisteredPCBangInfo (  )
{
	static UFunction* prfReqRegisteredPCBangInfo = 0;
	UBTTcpLink_Login_eventrfReqRegisteredPCBangInfo_Parms parms;

	if ( !prfReqRegisteredPCBangInfo )
		prfReqRegisteredPCBangInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqRegisteredPCBangInfo" );

	this->ProcessEvent ( prfReqRegisteredPCBangInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckCharInfo ( int Result, struct FString CharName, int Level, int Exp, struct FString ClanName )
{
	static UFunction* prfAckCharInfo = 0;
	UBTTcpLink_Login_eventrfAckCharInfo_Parms parms;

	if ( !prfAckCharInfo )
		prfAckCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckCharInfo" );

	parms.Result = Result;
	parms.CharName = CharName;
	parms.Level = Level;
	parms.Exp = Exp;
	parms.ClanName = ClanName;
	this->ProcessEvent ( prfAckCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqCharInfo ( struct FString CharName )
{
	static UFunction* prfReqCharInfo = 0;
	UBTTcpLink_Login_eventrfReqCharInfo_Parms parms;

	if ( !prfReqCharInfo )
		prfReqCharInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqCharInfo" );

	parms.CharName = CharName;
	this->ProcessEvent ( prfReqCharInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqForceLogoutByOwner (  )
{
	static UFunction* prfReqForceLogoutByOwner = 0;
	UBTTcpLink_Login_eventrfReqForceLogoutByOwner_Parms parms;

	if ( !prfReqForceLogoutByOwner )
		prfReqForceLogoutByOwner = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqForceLogoutByOwner" );

	this->ProcessEvent ( prfReqForceLogoutByOwner, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqKeepAlive (  )
{
	static UFunction* prfReqKeepAlive = 0;
	UBTTcpLink_Login_eventrfReqKeepAlive_Parms parms;

	if ( !prfReqKeepAlive )
		prfReqKeepAlive = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqKeepAlive" );

	this->ProcessEvent ( prfReqKeepAlive, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckMaxUserExceed (  )
{
	static UFunction* prfAckMaxUserExceed = 0;
	UBTTcpLink_Login_eventrfAckMaxUserExceed_Parms parms;

	if ( !prfAckMaxUserExceed )
		prfAckMaxUserExceed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckMaxUserExceed" );

	this->ProcessEvent ( prfAckMaxUserExceed, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckClanMemberListFromClientEnd (  )
{
	static UFunction* prfAckClanMemberListFromClientEnd = 0;
	UBTTcpLink_Login_eventrfAckClanMemberListFromClientEnd_Parms parms;

	if ( !prfAckClanMemberListFromClientEnd )
		prfAckClanMemberListFromClientEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckClanMemberListFromClientEnd" );

	this->ProcessEvent ( prfAckClanMemberListFromClientEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckClanMemberListFromClient ( int Result, struct FString ErrMsg, class TArray< int > Level, class TArray< struct FString > CharName, class TArray< unsigned char > ClanGrade, class TArray< struct FString > ServerName, class TArray< struct FString > ServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< unsigned char > CurPos, class TArray< int > ChannelNum, class TArray< struct FString > ChannelNickName, class TArray< int > GameRoomNum )
{
	static UFunction* prfAckClanMemberListFromClient = 0;
	UBTTcpLink_Login_eventrfAckClanMemberListFromClient_Parms parms;

	if ( !prfAckClanMemberListFromClient )
		prfAckClanMemberListFromClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckClanMemberListFromClient" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	parms.Level = Level;
	parms.CharName = CharName;
	parms.ClanGrade = ClanGrade;
	parms.ServerName = ServerName;
	parms.ServerShortName = ServerShortName;
	parms.ServerIP = ServerIP;
	parms.serverPort = serverPort;
	parms.CurPos = CurPos;
	parms.ChannelNum = ChannelNum;
	parms.ChannelNickName = ChannelNickName;
	parms.GameRoomNum = GameRoomNum;
	this->ProcessEvent ( prfAckClanMemberListFromClient, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckClanMemberListFromClientStart ( int Result, int TotalCount )
{
	static UFunction* prfAckClanMemberListFromClientStart = 0;
	UBTTcpLink_Login_eventrfAckClanMemberListFromClientStart_Parms parms;

	if ( !prfAckClanMemberListFromClientStart )
		prfAckClanMemberListFromClientStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckClanMemberListFromClientStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckClanMemberListFromClientStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqClanMemberListFromClient (  )
{
	static UFunction* prfReqClanMemberListFromClient = 0;
	UBTTcpLink_Login_eventrfReqClanMemberListFromClient_Parms parms;

	if ( !prfReqClanMemberListFromClient )
		prfReqClanMemberListFromClient = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqClanMemberListFromClient" );

	this->ProcessEvent ( prfReqClanMemberListFromClient, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLoginWithWZAuth ( int Result, unsigned char wzp_AccountType, unsigned char wzp_IsBlock, unsigned char wzp_AuthKeySuccess, unsigned char ChannelType )
{
	static UFunction* prfAckLoginWithWZAuth = 0;
	UBTTcpLink_Login_eventrfAckLoginWithWZAuth_Parms parms;

	if ( !prfAckLoginWithWZAuth )
		prfAckLoginWithWZAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLoginWithWZAuth" );

	parms.Result = Result;
	parms.wzp_AccountType = wzp_AccountType;
	parms.wzp_IsBlock = wzp_IsBlock;
	parms.wzp_AuthKeySuccess = wzp_AuthKeySuccess;
	parms.ChannelType = ChannelType;
	this->ProcessEvent ( prfAckLoginWithWZAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLoginWithWZAuth ( struct FString AccountID, struct FString Guid, struct FString AuthKey )
{
	static UFunction* prfReqLoginWithWZAuth = 0;
	UBTTcpLink_Login_eventrfReqLoginWithWZAuth_Parms parms;

	if ( !prfReqLoginWithWZAuth )
		prfReqLoginWithWZAuth = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLoginWithWZAuth" );

	parms.AccountID = AccountID;
	parms.Guid = Guid;
	parms.AuthKey = AuthKey;
	this->ProcessEvent ( prfReqLoginWithWZAuth, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckProcessPreLoginUser ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckProcessPreLoginUser = 0;
	UBTTcpLink_Login_eventrfAckProcessPreLoginUser_Parms parms;

	if ( !prfAckProcessPreLoginUser )
		prfAckProcessPreLoginUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckProcessPreLoginUser" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckProcessPreLoginUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqProcessPreLoginUser ( struct FString CharName, unsigned char Type )
{
	static UFunction* prfReqProcessPreLoginUser = 0;
	UBTTcpLink_Login_eventrfReqProcessPreLoginUser_Parms parms;

	if ( !prfReqProcessPreLoginUser )
		prfReqProcessPreLoginUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqProcessPreLoginUser" );

	parms.CharName = CharName;
	parms.Type = Type;
	this->ProcessEvent ( prfReqProcessPreLoginUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLoginInHouseTest ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg, struct FString BDay, unsigned char Sex, struct FBtrDouble ServerTime )
{
	static UFunction* prfAckLoginInHouseTest = 0;
	UBTTcpLink_Login_eventrfAckLoginInHouseTest_Parms parms;

	if ( !prfAckLoginInHouseTest )
		prfAckLoginInHouseTest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLoginInHouseTest" );

	parms.Sucess = Sucess;
	parms.CharName = CharName;
	parms.TimeStamp = TimeStamp;
	parms.LoginHash1 = LoginHash1;
	parms.LoginHash2 = LoginHash2;
	parms.LoginHash3 = LoginHash3;
	parms.LoginHash4 = LoginHash4;
	parms.LoginHash5 = LoginHash5;
	parms.NeedChar = NeedChar;
	parms.ErrMsg = ErrMsg;
	parms.BDay = BDay;
	parms.Sex = Sex;
	parms.ServerTime = ServerTime;
	this->ProcessEvent ( prfAckLoginInHouseTest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLoginInHouseTest ( struct FString UserName, struct FString Password, struct FString Guid )
{
	static UFunction* prfReqLoginInHouseTest = 0;
	UBTTcpLink_Login_eventrfReqLoginInHouseTest_Parms parms;

	if ( !prfReqLoginInHouseTest )
		prfReqLoginInHouseTest = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLoginInHouseTest" );

	parms.UserName = UserName;
	parms.Password = Password;
	parms.Guid = Guid;
	this->ProcessEvent ( prfReqLoginInHouseTest, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckAdvertisement ( int Result, unsigned char Type, struct FString Address )
{
	static UFunction* prfAckAdvertisement = 0;
	UBTTcpLink_Login_eventrfAckAdvertisement_Parms parms;

	if ( !prfAckAdvertisement )
		prfAckAdvertisement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckAdvertisement" );

	parms.Result = Result;
	parms.Type = Type;
	parms.Address = Address;
	this->ProcessEvent ( prfAckAdvertisement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqAdvertisement (  )
{
	static UFunction* prfReqAdvertisement = 0;
	UBTTcpLink_Login_eventrfReqAdvertisement_Parms parms;

	if ( !prfReqAdvertisement )
		prfReqAdvertisement = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqAdvertisement" );

	this->ProcessEvent ( prfReqAdvertisement, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckUserDetailInfo ( int Result, struct FString UserName, struct FString ClanName, int Ranking, int MatchNum, int WinNum, int LoseNum, int CurrentEXP, int NextExp, int ForcedDisconnectedNum, int PrimaryWeaponID, int SubWeaponID, int Point )
{
	static UFunction* prfAckUserDetailInfo = 0;
	UBTTcpLink_Login_eventrfAckUserDetailInfo_Parms parms;

	if ( !prfAckUserDetailInfo )
		prfAckUserDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckUserDetailInfo" );

	parms.Result = Result;
	parms.UserName = UserName;
	parms.ClanName = ClanName;
	parms.Ranking = Ranking;
	parms.MatchNum = MatchNum;
	parms.WinNum = WinNum;
	parms.LoseNum = LoseNum;
	parms.CurrentEXP = CurrentEXP;
	parms.NextExp = NextExp;
	parms.ForcedDisconnectedNum = ForcedDisconnectedNum;
	parms.PrimaryWeaponID = PrimaryWeaponID;
	parms.SubWeaponID = SubWeaponID;
	parms.Point = Point;
	this->ProcessEvent ( prfAckUserDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqUserDetailInfo ( int UserID, struct FString UserName )
{
	static UFunction* prfReqUserDetailInfo = 0;
	UBTTcpLink_Login_eventrfReqUserDetailInfo_Parms parms;

	if ( !prfReqUserDetailInfo )
		prfReqUserDetailInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqUserDetailInfo" );

	parms.UserID = UserID;
	parms.UserName = UserName;
	this->ProcessEvent ( prfReqUserDetailInfo, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckFriendsListEnd (  )
{
	static UFunction* prfAckFriendsListEnd = 0;
	UBTTcpLink_Login_eventrfAckFriendsListEnd_Parms parms;

	if ( !prfAckFriendsListEnd )
		prfAckFriendsListEnd = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckFriendsListEnd" );

	this->ProcessEvent ( prfAckFriendsListEnd, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckFriendsList ( unsigned char ListType, class TArray< struct FString > UserName, class TArray< unsigned char > IsLogOn, class TArray< int > CMarkPattern, class TArray< int > CMarkBG, class TArray< int > CMarkBL, class TArray< struct FString > ClanName, class TArray< int > Level )
{
	static UFunction* prfAckFriendsList = 0;
	UBTTcpLink_Login_eventrfAckFriendsList_Parms parms;

	if ( !prfAckFriendsList )
		prfAckFriendsList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckFriendsList" );

	parms.ListType = ListType;
	parms.UserName = UserName;
	parms.IsLogOn = IsLogOn;
	parms.CMarkPattern = CMarkPattern;
	parms.CMarkBG = CMarkBG;
	parms.CMarkBL = CMarkBL;
	parms.ClanName = ClanName;
	parms.Level = Level;
	this->ProcessEvent ( prfAckFriendsList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckFriendsListStart ( int Result, int TotalCount )
{
	static UFunction* prfAckFriendsListStart = 0;
	UBTTcpLink_Login_eventrfAckFriendsListStart_Parms parms;

	if ( !prfAckFriendsListStart )
		prfAckFriendsListStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckFriendsListStart" );

	parms.Result = Result;
	parms.TotalCount = TotalCount;
	this->ProcessEvent ( prfAckFriendsListStart, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqFriendsList (  )
{
	static UFunction* prfReqFriendsList = 0;
	UBTTcpLink_Login_eventrfReqFriendsList_Parms parms;

	if ( !prfReqFriendsList )
		prfReqFriendsList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqFriendsList" );

	this->ProcessEvent ( prfReqFriendsList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckConnectChannelServer ( struct FString SessionKey, int TimeStamp )
{
	static UFunction* prfAckConnectChannelServer = 0;
	UBTTcpLink_Login_eventrfAckConnectChannelServer_Parms parms;

	if ( !prfAckConnectChannelServer )
		prfAckConnectChannelServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckConnectChannelServer" );

	parms.SessionKey = SessionKey;
	parms.TimeStamp = TimeStamp;
	this->ProcessEvent ( prfAckConnectChannelServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqConnectChannelServer ( struct FString ServerIP, int serverPort )
{
	static UFunction* prfReqConnectChannelServer = 0;
	UBTTcpLink_Login_eventrfReqConnectChannelServer_Parms parms;

	if ( !prfReqConnectChannelServer )
		prfReqConnectChannelServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqConnectChannelServer" );

	parms.ServerIP = ServerIP;
	parms.serverPort = serverPort;
	this->ProcessEvent ( prfReqConnectChannelServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckServerList ( class TArray< struct FString > CServername, class TArray< struct FString > CServerShortName, class TArray< struct FString > ServerIP, class TArray< int > serverPort, class TArray< struct FString > ChannelName, class TArray< struct FString > ChannelNickName, class TArray< int > ChannelNum, class TArray< int > chMaxUser, class TArray< int > chCurUser, class TArray< struct FString > ServerGroupName, class TArray< int > ServerGroupID, class TArray< int > ServerDispOrder, class TArray< int > DataPort, class TArray< unsigned char > OptionCount_byte, class TArray< unsigned char > OptionKey_byte, class TArray< unsigned char > OptionValue_byte, class TArray< unsigned char > OptionCount_int, class TArray< unsigned char > OptionKey_int, class TArray< int > OptionValue_int, class TArray< unsigned char > OptionCount_float, class TArray< unsigned char > OptionKey_float, class TArray< float > OptionValue_float, class TArray< unsigned char > IsClanChannel, class TArray< unsigned char > IsUseDedicateHost )
{
	static UFunction* prfAckServerList = 0;
	UBTTcpLink_Login_eventrfAckServerList_Parms parms;

	if ( !prfAckServerList )
		prfAckServerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckServerList" );

	parms.CServername = CServername;
	parms.CServerShortName = CServerShortName;
	parms.ServerIP = ServerIP;
	parms.serverPort = serverPort;
	parms.ChannelName = ChannelName;
	parms.ChannelNickName = ChannelNickName;
	parms.ChannelNum = ChannelNum;
	parms.chMaxUser = chMaxUser;
	parms.chCurUser = chCurUser;
	parms.ServerGroupName = ServerGroupName;
	parms.ServerGroupID = ServerGroupID;
	parms.ServerDispOrder = ServerDispOrder;
	parms.DataPort = DataPort;
	parms.OptionCount_byte = OptionCount_byte;
	parms.OptionKey_byte = OptionKey_byte;
	parms.OptionValue_byte = OptionValue_byte;
	parms.OptionCount_int = OptionCount_int;
	parms.OptionKey_int = OptionKey_int;
	parms.OptionValue_int = OptionValue_int;
	parms.OptionCount_float = OptionCount_float;
	parms.OptionKey_float = OptionKey_float;
	parms.OptionValue_float = OptionValue_float;
	parms.IsClanChannel = IsClanChannel;
	parms.IsUseDedicateHost = IsUseDedicateHost;
	this->ProcessEvent ( prfAckServerList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqServerList (  )
{
	static UFunction* prfReqServerList = 0;
	UBTTcpLink_Login_eventrfReqServerList_Parms parms;

	if ( !prfReqServerList )
		prfReqServerList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqServerList" );

	this->ProcessEvent ( prfReqServerList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckCreateChar ( int Success, struct FString ErrMsg )
{
	static UFunction* prfAckCreateChar = 0;
	UBTTcpLink_Login_eventrfAckCreateChar_Parms parms;

	if ( !prfAckCreateChar )
		prfAckCreateChar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckCreateChar" );

	parms.Success = Success;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckCreateChar, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqCreateChar ( struct FString CharName, int HeadItemID, int HelmetItemID, int AccesoItemID )
{
	static UFunction* prfReqCreateChar = 0;
	UBTTcpLink_Login_eventrfReqCreateChar_Parms parms;

	if ( !prfReqCreateChar )
		prfReqCreateChar = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqCreateChar" );

	parms.CharName = CharName;
	parms.HeadItemID = HeadItemID;
	parms.HelmetItemID = HelmetItemID;
	parms.AccesoItemID = AccesoItemID;
	this->ProcessEvent ( prfReqCreateChar, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckAccesItemTypeList ( class TArray< struct FString > AccesoItemName, class TArray< int > AccesoItemID )
{
	static UFunction* prfAckAccesItemTypeList = 0;
	UBTTcpLink_Login_eventrfAckAccesItemTypeList_Parms parms;

	if ( !prfAckAccesItemTypeList )
		prfAckAccesItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckAccesItemTypeList" );

	parms.AccesoItemName = AccesoItemName;
	parms.AccesoItemID = AccesoItemID;
	this->ProcessEvent ( prfAckAccesItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqAccesItemTypeList (  )
{
	static UFunction* prfReqAccesItemTypeList = 0;
	UBTTcpLink_Login_eventrfReqAccesItemTypeList_Parms parms;

	if ( !prfReqAccesItemTypeList )
		prfReqAccesItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqAccesItemTypeList" );

	this->ProcessEvent ( prfReqAccesItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckHelmetItemTypeList ( class TArray< struct FString > HelmetItemName, class TArray< int > HelmetItemID )
{
	static UFunction* prfAckHelmetItemTypeList = 0;
	UBTTcpLink_Login_eventrfAckHelmetItemTypeList_Parms parms;

	if ( !prfAckHelmetItemTypeList )
		prfAckHelmetItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckHelmetItemTypeList" );

	parms.HelmetItemName = HelmetItemName;
	parms.HelmetItemID = HelmetItemID;
	this->ProcessEvent ( prfAckHelmetItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqHelmetItemTypeList (  )
{
	static UFunction* prfReqHelmetItemTypeList = 0;
	UBTTcpLink_Login_eventrfReqHelmetItemTypeList_Parms parms;

	if ( !prfReqHelmetItemTypeList )
		prfReqHelmetItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqHelmetItemTypeList" );

	this->ProcessEvent ( prfReqHelmetItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckHeadItemTypeList ( class TArray< int > HeadItemID )
{
	static UFunction* prfAckHeadItemTypeList = 0;
	UBTTcpLink_Login_eventrfAckHeadItemTypeList_Parms parms;

	if ( !prfAckHeadItemTypeList )
		prfAckHeadItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckHeadItemTypeList" );

	parms.HeadItemID = HeadItemID;
	this->ProcessEvent ( prfAckHeadItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqHeadItemTypeList (  )
{
	static UFunction* prfReqHeadItemTypeList = 0;
	UBTTcpLink_Login_eventrfReqHeadItemTypeList_Parms parms;

	if ( !prfReqHeadItemTypeList )
		prfReqHeadItemTypeList = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqHeadItemTypeList" );

	this->ProcessEvent ( prfReqHeadItemTypeList, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckLogin ( unsigned char Sucess, struct FString CharName, int TimeStamp, int LoginHash1, int LoginHash2, int LoginHash3, int LoginHash4, int LoginHash5, unsigned char NeedChar, struct FString ErrMsg )
{
	static UFunction* prfAckLogin = 0;
	UBTTcpLink_Login_eventrfAckLogin_Parms parms;

	if ( !prfAckLogin )
		prfAckLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckLogin" );

	parms.Sucess = Sucess;
	parms.CharName = CharName;
	parms.TimeStamp = TimeStamp;
	parms.LoginHash1 = LoginHash1;
	parms.LoginHash2 = LoginHash2;
	parms.LoginHash3 = LoginHash3;
	parms.LoginHash4 = LoginHash4;
	parms.LoginHash5 = LoginHash5;
	parms.NeedChar = NeedChar;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqLogin ( struct FString PortalID )
{
	static UFunction* prfReqLogin = 0;
	UBTTcpLink_Login_eventrfReqLogin_Parms parms;

	if ( !prfReqLogin )
		prfReqLogin = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqLogin" );

	parms.PortalID = PortalID;
	this->ProcessEvent ( prfReqLogin, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckExceedMaxUser (  )
{
	static UFunction* prfAckExceedMaxUser = 0;
	UBTTcpLink_Login_eventrfAckExceedMaxUser_Parms parms;

	if ( !prfAckExceedMaxUser )
		prfAckExceedMaxUser = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckExceedMaxUser" );

	this->ProcessEvent ( prfAckExceedMaxUser, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfAckHash ( int Result, struct FString ErrMsg )
{
	static UFunction* prfAckHash = 0;
	UBTTcpLink_Login_eventrfAckHash_Parms parms;

	if ( !prfAckHash )
		prfAckHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfAckHash" );

	parms.Result = Result;
	parms.ErrMsg = ErrMsg;
	this->ProcessEvent ( prfAckHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::eventrfReqHash ( int HashField0, int HashField1, int HashField2, int HashField3 )
{
	static UFunction* prfReqHash = 0;
	UBTTcpLink_Login_eventrfReqHash_Parms parms;

	if ( !prfReqHash )
		prfReqHash = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.rfReqHash" );

	parms.HashField0 = HashField0;
	parms.HashField1 = HashField1;
	parms.HashField2 = HashField2;
	parms.HashField3 = HashField3;
	this->ProcessEvent ( prfReqHash, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void UBTTcpLink_Login::eventOnError ( int ErrCode )
{
	static UFunction* pOnError = 0;
	UBTTcpLink_Login_eventOnError_Parms parms;

	if ( !pOnError )
		pOnError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.OnError" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnError, &parms, NULL );

}*/

/*void UBTTcpLink_Login::eventOnClose ( int ErrCode )
{
	static UFunction* pOnClose = 0;
	UBTTcpLink_Login_eventOnClose_Parms parms;

	if ( !pOnClose )
		pOnClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.OnClose" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnClose, &parms, NULL );

}*/

/*void UBTTcpLink_Login::eventOnConnect ( int ErrCode )
{
	static UFunction* pOnConnect = 0;
	UBTTcpLink_Login_eventOnConnect_Parms parms;

	if ( !pOnConnect )
		pOnConnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.OnConnect" );

	parms.ErrCode = ErrCode;
	this->ProcessEvent ( pOnConnect, &parms, NULL );

}*/

/*bool UBTTcpLink_Login::Close (  )
{
	static UFunction* pClose = 0;
	UBTTcpLink_Login_execClose_Parms parms;

	if ( !pClose )
		pClose = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.Close" );

	this->ProcessEvent ( pClose, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::Connect ( struct FString sIpaddr, int nPort )
{
	static UFunction* pConnect = 0;
	UBTTcpLink_Login_execConnect_Parms parms;

	if ( !pConnect )
		pConnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.Connect" );

	parms.sIpaddr = sIpaddr;
	parms.nPort = nPort;
	this->ProcessEvent ( pConnect, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTTcpLink_Login::InitNetwork (  )
{
	static UFunction* pInitNetwork = 0;
	UBTTcpLink_Login_execInitNetwork_Parms parms;

	if ( !pInitNetwork )
		pInitNetwork = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTTcpLink_Login.InitNetwork" );

	this->ProcessEvent ( pInitNetwork, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString UBTSteamMapping::GetPayURL ( struct FString AccountID, unsigned char connectAlpha )
{
	static UFunction* pGetPayURL = 0;
	UBTSteamMapping_execGetPayURL_Parms parms;

	if ( !pGetPayURL )
		pGetPayURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTSteamMapping.GetPayURL" );

	parms.AccountID = AccountID;
	parms.connectAlpha = connectAlpha;
	this->ProcessEvent ( pGetPayURL, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::ProcessStep2 (  )
{
	static UFunction* pProcessStep2 = 0;
	UBTNatDiag_execProcessStep2_Parms parms;

	if ( !pProcessStep2 )
		pProcessStep2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.ProcessStep2" );

	this->ProcessEvent ( pProcessStep2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::ProcessStep1 (  )
{
	static UFunction* pProcessStep1 = 0;
	UBTNatDiag_execProcessStep1_Parms parms;

	if ( !pProcessStep1 )
		pProcessStep1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.ProcessStep1" );

	this->ProcessEvent ( pProcessStep1, &parms, NULL );

	return parms.ReturnValue;
}*/

/*unsigned char UBTNatDiag::GetNatType (  )
{
	static UFunction* pGetNatType = 0;
	UBTNatDiag_execGetNatType_Parms parms;

	if ( !pGetNatType )
		pGetNatType = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.GetNatType" );

	this->ProcessEvent ( pGetNatType, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UBTNatDiag::CheckPhrase2 (  )
{
	static UFunction* pCheckPhrase2 = 0;
	UBTNatDiag_execCheckPhrase2_Parms parms;

	if ( !pCheckPhrase2 )
		pCheckPhrase2 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.CheckPhrase2" );

	this->ProcessEvent ( pCheckPhrase2, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int UBTNatDiag::CheckPhrase1 (  )
{
	static UFunction* pCheckPhrase1 = 0;
	UBTNatDiag_execCheckPhrase1_Parms parms;

	if ( !pCheckPhrase1 )
		pCheckPhrase1 = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.CheckPhrase1" );

	this->ProcessEvent ( pCheckPhrase1, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::SetSecondServer ( struct FString server_ip, int nPort )
{
	static UFunction* pSetSecondServer = 0;
	UBTNatDiag_execSetSecondServer_Parms parms;

	if ( !pSetSecondServer )
		pSetSecondServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.SetSecondServer" );

	parms.server_ip = server_ip;
	parms.nPort = nPort;
	this->ProcessEvent ( pSetSecondServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::SetPrimaryServer ( struct FString server_ip, int nPort )
{
	static UFunction* pSetPrimaryServer = 0;
	UBTNatDiag_execSetPrimaryServer_Parms parms;

	if ( !pSetPrimaryServer )
		pSetPrimaryServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.SetPrimaryServer" );

	parms.server_ip = server_ip;
	parms.nPort = nPort;
	this->ProcessEvent ( pSetPrimaryServer, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::StartNatCheck ( struct FString nat_server_ip, int nPort, struct FString sLocalBindAddr )
{
	static UFunction* pStartNatCheck = 0;
	UBTNatDiag_execStartNatCheck_Parms parms;

	if ( !pStartNatCheck )
		pStartNatCheck = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.StartNatCheck" );

	parms.nat_server_ip = nat_server_ip;
	parms.nPort = nPort;
	parms.sLocalBindAddr = sLocalBindAddr;
	this->ProcessEvent ( pStartNatCheck, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::InitNatSocket (  )
{
	static UFunction* pInitNatSocket = 0;
	UBTNatDiag_execInitNatSocket_Parms parms;

	if ( !pInitNatSocket )
		pInitNatSocket = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.InitNatSocket" );

	this->ProcessEvent ( pInitNatSocket, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::SetNatServerIp ( class TArray< struct FString > nat_server_ip, class TArray< int > nPorts )
{
	static UFunction* pSetNatServerIp = 0;
	UBTNatDiag_execSetNatServerIp_Parms parms;

	if ( !pSetNatServerIp )
		pSetNatServerIp = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.SetNatServerIp" );

	parms.nat_server_ip = nat_server_ip;
	parms.nPorts = nPorts;
	this->ProcessEvent ( pSetNatServerIp, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool UBTNatDiag::Start ( class TArray< struct FString > ipaddresses, class TArray< int > ports )
{
	static UFunction* pStart = 0;
	UBTNatDiag_execStart_Parms parms;

	if ( !pStart )
		pStart = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"BatteryNet.BTNatDiag.Start" );

	parms.ipaddresses = ipaddresses;
	parms.ports = ports;
	this->ProcessEvent ( pStart, &parms, NULL );

	return parms.ReturnValue;
}*/

