#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : IpDrv
# >    File : ParamStructs.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif

// Function IpDrv.UdpLink.ReceivedBinary
// Flags: [ FUNC_Event ]
struct AUdpLink_eventReceivedBinary_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm ]
	int                                                Count;                                            		// 0x0008 ( 0x0004[ CPF_Parm ]
	unsigned char                                      B[ 0xFF ];                                        		// 0x000C ( 0x00FF[ CPF_Parm ]
};

// Function IpDrv.UdpLink.ReceivedLine
// Flags: [ FUNC_Event ]
struct AUdpLink_eventReceivedLine_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm ]
	struct FString                                     Line;                                             		// 0x0008 ( 0x000C[ CPF_Parm | CPF_NeedCtorLink ]
};

// Function IpDrv.UdpLink.ReceivedText
// Flags: [ FUNC_Event ]
struct AUdpLink_eventReceivedText_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm ]
	struct FString                                     Text;                                             		// 0x0008 ( 0x000C[ CPF_Parm | CPF_NeedCtorLink ]
};

// Function IpDrv.UdpLink.ReadBinary
// Flags: [ FUNC_Native ]
struct AUdpLink_execReadBinary_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm | CPF_OutParm ]
	int                                                Count;                                            		// 0x0008 ( 0x0004[ CPF_Parm ]
	unsigned char                                      B[ 0xFF ];                                        		// 0x000C ( 0x00FF[ CPF_Parm | CPF_OutParm ]
	int                                                ReturnValue;                                      		// 0x010C ( 0x0004[ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.UdpLink.ReadText
// Flags: [ FUNC_Native ]
struct AUdpLink_execReadText_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm | CPF_OutParm ]
	struct FString                                     str;                                              		// 0x0008 ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_NeedCtorLink ]
	int                                                ReturnValue;                                      		// 0x0014 ( 0x0004[ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.UdpLink.SendBinary
// Flags: [ FUNC_Native ]
struct AUdpLink_execSendBinary_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm ]
	int                                                Count;                                            		// 0x0008 ( 0x0004[ CPF_Parm ]
	unsigned char                                      B[ 0xFF ];                                        		// 0x000C ( 0x00FF[ CPF_Parm ]
	unsigned long                                      ReturnValue:1;                                    		// 0x010C ( 0x0004 [0x00000001][ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.UdpLink.SendText
// Flags: [ FUNC_Native ]
struct AUdpLink_execSendText_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm ]
	struct FString                                     str;                                              		// 0x0008 ( 0x000C[ CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink ]
	unsigned long                                      ReturnValue:1;                                    		// 0x0014 ( 0x0004 [0x00000001][ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.UdpLink.BindPort
// Flags: [ FUNC_Native ]
struct AUdpLink_execBindPort_Parms
{
	int                                                Port;                                             		// 0x0000 ( 0x0004[ CPF_OptionalParm | CPF_Parm ]
	unsigned long                                      bUseNextAvailable:1;                              		// 0x0004 ( 0x0004 [0x00000001][ CPF_OptionalParm | CPF_Parm ]
	int                                                ReturnValue;                                      		// 0x0008 ( 0x0004[ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.InternetLink.ResolveFailed
// Flags: [ FUNC_Event ]
struct AInternetLink_eventResolveFailed_Parms
{
};

// Function IpDrv.InternetLink.Resolved
// Flags: [ FUNC_Event ]
struct AInternetLink_eventResolved_Parms
{
	struct FIpAddr                                     Addr;                                             		// 0x0000 ( 0x0008[ CPF_Parm ]
};

// Function IpDrv.InternetLink.GetLocalIP
// Flags: [ FUNC_Native ]
struct AInternetLink_execGetLocalIP_Parms
{
	struct FIpAddr                                     Arg;                                              		// 0x0000 ( 0x0008[ CPF_Parm | CPF_OutParm ]
};

// Function IpDrv.InternetLink.GameSpyGameName
// Flags: [ FUNC_Native ]
struct AInternetLink_execGameSpyGameName_Parms
{
	struct FString                                     ReturnValue;                                      		// 0x0000 ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink ]
};

// Function IpDrv.InternetLink.GameSpyValidate
// Flags: [ FUNC_Native ]
struct AInternetLink_execGameSpyValidate_Parms
{
	struct FString                                     ValidationString;                                 		// 0x0000 ( 0x000C[ CPF_Parm | CPF_NeedCtorLink ]
	struct FString                                     ReturnValue;                                      		// 0x000C ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink ]
};

// Function IpDrv.InternetLink.StringToIpAddr
// Flags: [ FUNC_Native ]
struct AInternetLink_execStringToIpAddr_Parms
{
	struct FString                                     str;                                              		// 0x0000 ( 0x000C[ CPF_Parm | CPF_NeedCtorLink ]
	struct FIpAddr                                     Addr;                                             		// 0x000C ( 0x0008[ CPF_Parm | CPF_OutParm ]
	unsigned long                                      ReturnValue:1;                                    		// 0x0014 ( 0x0004 [0x00000001][ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.InternetLink.IpAddrToString
// Flags: [ FUNC_Native ]
struct AInternetLink_execIpAddrToString_Parms
{
	struct FIpAddr                                     Arg;                                              		// 0x0000 ( 0x0008[ CPF_Parm ]
	struct FString                                     ReturnValue;                                      		// 0x0008 ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink ]
};

// Function IpDrv.InternetLink.GetLastError
// Flags: [ FUNC_Native ]
struct AInternetLink_execGetLastError_Parms
{
	int                                                ReturnValue;                                      		// 0x0000 ( 0x0004[ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.InternetLink.Resolve
// Flags: [ FUNC_Native ]
struct AInternetLink_execResolve_Parms
{
	struct FString                                     Domain;                                           		// 0x0000 ( 0x000C[ CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink ]
};

// Function IpDrv.InternetLink.ParseURL
// Flags: [ FUNC_Native ]
struct AInternetLink_execParseURL_Parms
{
	struct FString                                     URL;                                              		// 0x0000 ( 0x000C[ CPF_Parm | CPF_CoerceParm | CPF_NeedCtorLink ]
	struct FString                                     Addr;                                             		// 0x000C ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_NeedCtorLink ]
	int                                                Port;                                             		// 0x0018 ( 0x0004[ CPF_Parm | CPF_OutParm ]
	struct FString                                     LevelName;                                        		// 0x001C ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_NeedCtorLink ]
	struct FString                                     EntryName;                                        		// 0x0028 ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_NeedCtorLink ]
	unsigned long                                      ReturnValue:1;                                    		// 0x0034 ( 0x0004 [0x00000001][ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.InternetLink.IsDataPending
// Flags: [ FUNC_Native ]
struct AInternetLink_execIsDataPending_Parms
{
	unsigned long                                      ReturnValue:1;                                    		// 0x0000 ( 0x0004 [0x00000001][ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.MasterServerGameStats.Logf
// Flags: 
struct AMasterServerGameStats_execLogf_Parms
{
	struct FString                                     LogString;                                        		// 0x0000 ( 0x000C[ CPF_Parm | CPF_NeedCtorLink ]
};

// Function IpDrv.MasterServerGameStats.Init
// Flags: 
struct AMasterServerGameStats_execInit_Parms
{
};

// Function IpDrv.MasterServerUplink.GetDescriptionText
// Flags: [ FUNC_Event ]
struct AMasterServerUplink_eventGetDescriptionText_Parms
{
	struct FString                                     PropName;                                         		// 0x0000 ( 0x000C[ CPF_Parm | CPF_NeedCtorLink ]
	struct FString                                     ReturnValue;                                      		// 0x000C ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_ReturnParm | CPF_NeedCtorLink ]
};

// Function IpDrv.MasterServerUplink.FillPlayInfo
// Flags: 
struct AMasterServerUplink_execFillPlayInfo_Parms
{
	class UPlayInfo*                                   PlayInfo;                                         		// 0x0000 ( 0x0004[ CPF_Parm ]
};

// Function IpDrv.MasterServerUplink.Tick
// Flags: [ FUNC_Simulated ]
struct AMasterServerUplink_execTick_Parms
{
	float                                              Delta;                                            		// 0x0000 ( 0x0004[ CPF_Parm ]
};

// Function IpDrv.MasterServerUplink.LogStatLine
// Flags: [ FUNC_Event | FUNC_Native ]
struct AMasterServerUplink_eventLogStatLine_Parms
{
	struct FString                                     StatLine;                                         		// 0x0000 ( 0x000C[ CPF_Parm | CPF_NeedCtorLink ]
	unsigned long                                      ReturnValue:1;                                    		// 0x000C ( 0x0004 [0x00000001][ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

// Function IpDrv.MasterServerUplink.Refresh
// Flags: [ FUNC_Event ]
struct AMasterServerUplink_eventRefresh_Parms
{
};

// Function IpDrv.MasterServerUplink.ConnectionFailed
// Flags: [ FUNC_Event ]
struct AMasterServerUplink_eventConnectionFailed_Parms
{
	unsigned long                                      bShouldReconnect:1;                               		// 0x0000 ( 0x0004 [0x00000001][ CPF_Parm ]
};

// Function IpDrv.MasterServerUplink.BeginPlay
// Flags: [ FUNC_Event ]
struct AMasterServerUplink_eventBeginPlay_Parms
{
	class UClass*                                      LinkClass;                                        		// 0x0000 ( 0x0004
};

// Function IpDrv.MasterServerUplink.ForceGameStateRefresh
// Flags: [ FUNC_Native ]
struct AMasterServerUplink_execForceGameStateRefresh_Parms
{
	int                                                When;                                             		// 0x0000 ( 0x0004[ CPF_Parm ]
};

// Function IpDrv.MasterServerUplink.Reconnect
// Flags: [ FUNC_Native ]
struct AMasterServerUplink_execReconnect_Parms
{
};

// Function IpDrv.MasterServerLink.Tick
// Flags: [ FUNC_Simulated ]
struct AMasterServerLink_execTick_Parms
{
	float                                              Delta;                                            		// 0x0000 ( 0x0004[ CPF_Parm ]
};

// Function IpDrv.MasterServerLink.GetMasterServer
// Flags: [ FUNC_Event ]
struct AMasterServerLink_eventGetMasterServer_Parms
{
	struct FString                                     OutAddress;                                       		// 0x0000 ( 0x000C[ CPF_Parm | CPF_OutParm | CPF_NeedCtorLink ]
	int                                                OutPort;                                          		// 0x000C ( 0x0004[ CPF_Parm | CPF_OutParm ]
	int                                                Index;                                            		// 0x0010 ( 0x0004
};

// Function IpDrv.MasterServerLink.Poll
// Flags: [ FUNC_Native ]
struct AMasterServerLink_execPoll_Parms
{
	int                                                WaitTime;                                         		// 0x0000 ( 0x0004[ CPF_Parm ]
	unsigned long                                      ReturnValue:1;                                    		// 0x0004 ( 0x0004 [0x00000001][ CPF_Parm | CPF_OutParm | CPF_ReturnParm ]
};

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

