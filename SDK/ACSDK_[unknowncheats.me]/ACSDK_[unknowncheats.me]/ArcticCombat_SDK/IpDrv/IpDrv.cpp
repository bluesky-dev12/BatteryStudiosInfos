#include "stdafx.h"
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : IpDrv
# >    File : Code.cpp
# ======================================================================================== #
*/

/*void AInternetLink::eventResolveFailed (  )
{
	static UFunction* pResolveFailed = 0;
	AInternetLink_eventResolveFailed_Parms parms;

	if ( !pResolveFailed )
		pResolveFailed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.ResolveFailed" );

	this->ProcessEvent ( pResolveFailed, &parms, NULL );

}*/

/*void AInternetLink::eventResolved ( struct FIpAddr Addr )
{
	static UFunction* pResolved = 0;
	AInternetLink_eventResolved_Parms parms;

	if ( !pResolved )
		pResolved = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.Resolved" );

	parms.Addr = Addr;
	this->ProcessEvent ( pResolved, &parms, NULL );

}*/

/*void AInternetLink::GetLocalIP ( struct FIpAddr* Arg )
{
	static UFunction* pGetLocalIP = 0;
	AInternetLink_execGetLocalIP_Parms parms;

	if ( !pGetLocalIP )
		pGetLocalIP = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.GetLocalIP" );

	parms.Arg = *Arg;
	this->ProcessEvent ( pGetLocalIP, &parms, NULL );

	*Arg = parms.Arg;
}*/

/*struct FString AInternetLink::GameSpyGameName (  )
{
	static UFunction* pGameSpyGameName = 0;
	AInternetLink_execGameSpyGameName_Parms parms;

	if ( !pGameSpyGameName )
		pGameSpyGameName = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.GameSpyGameName" );

	this->ProcessEvent ( pGameSpyGameName, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AInternetLink::GameSpyValidate ( struct FString ValidationString )
{
	static UFunction* pGameSpyValidate = 0;
	AInternetLink_execGameSpyValidate_Parms parms;

	if ( !pGameSpyValidate )
		pGameSpyValidate = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.GameSpyValidate" );

	parms.ValidationString = ValidationString;
	this->ProcessEvent ( pGameSpyValidate, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AInternetLink::StringToIpAddr ( struct FString str, struct FIpAddr* Addr )
{
	static UFunction* pStringToIpAddr = 0;
	AInternetLink_execStringToIpAddr_Parms parms;

	if ( !pStringToIpAddr )
		pStringToIpAddr = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.StringToIpAddr" );

	parms.str = str;
	this->ProcessEvent ( pStringToIpAddr, &parms, NULL );

	*Addr = parms.Addr;
	return parms.ReturnValue;
}*/

/*struct FString AInternetLink::IpAddrToString ( struct FIpAddr Arg )
{
	static UFunction* pIpAddrToString = 0;
	AInternetLink_execIpAddrToString_Parms parms;

	if ( !pIpAddrToString )
		pIpAddrToString = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.IpAddrToString" );

	parms.Arg = Arg;
	this->ProcessEvent ( pIpAddrToString, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AInternetLink::GetLastError (  )
{
	static UFunction* pGetLastError = 0;
	AInternetLink_execGetLastError_Parms parms;

	if ( !pGetLastError )
		pGetLastError = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.GetLastError" );

	this->ProcessEvent ( pGetLastError, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AInternetLink::Resolve ( struct FString Domain )
{
	static UFunction* pResolve = 0;
	AInternetLink_execResolve_Parms parms;

	if ( !pResolve )
		pResolve = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.Resolve" );

	parms.Domain = Domain;
	this->ProcessEvent ( pResolve, &parms, NULL );

}*/

/*bool AInternetLink::ParseURL ( struct FString URL, struct FString* Addr, int* Port, struct FString* LevelName, struct FString* EntryName )
{
	static UFunction* pParseURL = 0;
	AInternetLink_execParseURL_Parms parms;

	if ( !pParseURL )
		pParseURL = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.ParseURL" );

	parms.URL = URL;
	this->ProcessEvent ( pParseURL, &parms, NULL );

	*Addr = parms.Addr;
	*Port = parms.Port;
	*LevelName = parms.LevelName;
	*EntryName = parms.EntryName;
	return parms.ReturnValue;
}*/

/*bool AInternetLink::IsDataPending (  )
{
	static UFunction* pIsDataPending = 0;
	AInternetLink_execIsDataPending_Parms parms;

	if ( !pIsDataPending )
		pIsDataPending = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.InternetLink.IsDataPending" );

	this->ProcessEvent ( pIsDataPending, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AUdpLink::eventReceivedBinary ( struct FIpAddr Addr, int Count, unsigned char* B )
{
	static UFunction* pReceivedBinary = 0;
	AUdpLink_eventReceivedBinary_Parms parms;

	if ( !pReceivedBinary )
		pReceivedBinary = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.ReceivedBinary" );

	parms.Addr = Addr;
	parms.Count = Count;
	parms.B = B;
	this->ProcessEvent ( pReceivedBinary, &parms, NULL );

}*/

/*void AUdpLink::eventReceivedLine ( struct FIpAddr Addr, struct FString Line )
{
	static UFunction* pReceivedLine = 0;
	AUdpLink_eventReceivedLine_Parms parms;

	if ( !pReceivedLine )
		pReceivedLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.ReceivedLine" );

	parms.Addr = Addr;
	parms.Line = Line;
	this->ProcessEvent ( pReceivedLine, &parms, NULL );

}*/

/*void AUdpLink::eventReceivedText ( struct FIpAddr Addr, struct FString Text )
{
	static UFunction* pReceivedText = 0;
	AUdpLink_eventReceivedText_Parms parms;

	if ( !pReceivedText )
		pReceivedText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.ReceivedText" );

	parms.Addr = Addr;
	parms.Text = Text;
	this->ProcessEvent ( pReceivedText, &parms, NULL );

}*/

/*int AUdpLink::ReadBinary ( int Count, struct FIpAddr* Addr, unsigned char* B )
{
	static UFunction* pReadBinary = 0;
	AUdpLink_execReadBinary_Parms parms;

	if ( !pReadBinary )
		pReadBinary = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.ReadBinary" );

	parms.Count = Count;
	this->ProcessEvent ( pReadBinary, &parms, NULL );

	*Addr = parms.Addr;
	*B = parms.B;
	return parms.ReturnValue;
}*/

/*int AUdpLink::ReadText ( struct FIpAddr* Addr, struct FString* str )
{
	static UFunction* pReadText = 0;
	AUdpLink_execReadText_Parms parms;

	if ( !pReadText )
		pReadText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.ReadText" );

	parms.Addr = *Addr;
	parms.str = *str;
	this->ProcessEvent ( pReadText, &parms, NULL );

	*Addr = parms.Addr;
	*str = parms.str;
	return parms.ReturnValue;
}*/

/*bool AUdpLink::SendBinary ( struct FIpAddr Addr, int Count, unsigned char* B )
{
	static UFunction* pSendBinary = 0;
	AUdpLink_execSendBinary_Parms parms;

	if ( !pSendBinary )
		pSendBinary = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.SendBinary" );

	parms.Addr = Addr;
	parms.Count = Count;
	parms.B = B;
	this->ProcessEvent ( pSendBinary, &parms, NULL );

	return parms.ReturnValue;
}*/

/*bool AUdpLink::SendText ( struct FIpAddr Addr, struct FString str )
{
	static UFunction* pSendText = 0;
	AUdpLink_execSendText_Parms parms;

	if ( !pSendText )
		pSendText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.SendText" );

	parms.Addr = Addr;
	parms.str = str;
	this->ProcessEvent ( pSendText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*int AUdpLink::BindPort ( int Port, bool bUseNextAvailable )
{
	static UFunction* pBindPort = 0;
	AUdpLink_execBindPort_Parms parms;

	if ( !pBindPort )
		pBindPort = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.UdpLink.BindPort" );

	parms.Port = Port;
	parms.bUseNextAvailable = bUseNextAvailable;
	this->ProcessEvent ( pBindPort, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AMasterServerGameStats::Logf ( struct FString LogString )
{
	static UFunction* pLogf = 0;
	AMasterServerGameStats_execLogf_Parms parms;

	if ( !pLogf )
		pLogf = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerGameStats.Logf" );

	parms.LogString = LogString;
	this->ProcessEvent ( pLogf, &parms, NULL );

}*/

/*void AMasterServerGameStats::Init (  )
{
	static UFunction* pInit = 0;
	AMasterServerGameStats_execInit_Parms parms;

	if ( !pInit )
		pInit = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerGameStats.Init" );

	this->ProcessEvent ( pInit, &parms, NULL );

}*/

/*void AMasterServerLink::Tick ( float Delta )
{
	static UFunction* pTick = 0;
	AMasterServerLink_execTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerLink.Tick" );

	parms.Delta = Delta;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*void AMasterServerLink::eventGetMasterServer ( struct FString* OutAddress, int* OutPort )
{
	static UFunction* pGetMasterServer = 0;
	AMasterServerLink_eventGetMasterServer_Parms parms;

	if ( !pGetMasterServer )
		pGetMasterServer = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerLink.GetMasterServer" );

	parms.OutAddress = *OutAddress;
	parms.OutPort = *OutPort;
	this->ProcessEvent ( pGetMasterServer, &parms, NULL );

	*OutAddress = parms.OutAddress;
	*OutPort = parms.OutPort;
}*/

/*bool AMasterServerLink::Poll ( int WaitTime )
{
	static UFunction* pPoll = 0;
	AMasterServerLink_execPoll_Parms parms;

	if ( !pPoll )
		pPoll = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerLink.Poll" );

	parms.WaitTime = WaitTime;
	this->ProcessEvent ( pPoll, &parms, NULL );

	return parms.ReturnValue;
}*/

/*struct FString AMasterServerUplink::eventGetDescriptionText ( struct FString PropName )
{
	static UFunction* pGetDescriptionText = 0;
	AMasterServerUplink_eventGetDescriptionText_Parms parms;

	if ( !pGetDescriptionText )
		pGetDescriptionText = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.GetDescriptionText" );

	parms.PropName = PropName;
	this->ProcessEvent ( pGetDescriptionText, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AMasterServerUplink::FillPlayInfo ( class UPlayInfo* PlayInfo )
{
	static UFunction* pFillPlayInfo = 0;
	AMasterServerUplink_execFillPlayInfo_Parms parms;

	if ( !pFillPlayInfo )
		pFillPlayInfo = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.FillPlayInfo" );

	parms.PlayInfo = PlayInfo;
	this->ProcessEvent ( pFillPlayInfo, &parms, NULL );

}*/

/*void AMasterServerUplink::Tick ( float Delta )
{
	static UFunction* pTick = 0;
	AMasterServerUplink_execTick_Parms parms;

	if ( !pTick )
		pTick = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.Tick" );

	parms.Delta = Delta;
	this->ProcessEvent ( pTick, &parms, NULL );

}*/

/*bool AMasterServerUplink::eventLogStatLine ( struct FString StatLine )
{
	static UFunction* pLogStatLine = 0;
	AMasterServerUplink_eventLogStatLine_Parms parms;

	if ( !pLogStatLine )
		pLogStatLine = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.LogStatLine" );

	parms.StatLine = StatLine;
	this->ProcessEvent ( pLogStatLine, &parms, NULL );

	return parms.ReturnValue;
}*/

/*void AMasterServerUplink::eventRefresh (  )
{
	static UFunction* pRefresh = 0;
	AMasterServerUplink_eventRefresh_Parms parms;

	if ( !pRefresh )
		pRefresh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.Refresh" );

	this->ProcessEvent ( pRefresh, &parms, NULL );

}*/

/*void AMasterServerUplink::eventConnectionFailed ( bool bShouldReconnect )
{
	static UFunction* pConnectionFailed = 0;
	AMasterServerUplink_eventConnectionFailed_Parms parms;

	if ( !pConnectionFailed )
		pConnectionFailed = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.ConnectionFailed" );

	parms.bShouldReconnect = bShouldReconnect;
	this->ProcessEvent ( pConnectionFailed, &parms, NULL );

}*/

/*void AMasterServerUplink::eventBeginPlay (  )
{
	static UFunction* pBeginPlay = 0;
	AMasterServerUplink_eventBeginPlay_Parms parms;

	if ( !pBeginPlay )
		pBeginPlay = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.BeginPlay" );

	this->ProcessEvent ( pBeginPlay, &parms, NULL );

}*/

/*void AMasterServerUplink::ForceGameStateRefresh ( int When )
{
	static UFunction* pForceGameStateRefresh = 0;
	AMasterServerUplink_execForceGameStateRefresh_Parms parms;

	if ( !pForceGameStateRefresh )
		pForceGameStateRefresh = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.ForceGameStateRefresh" );

	parms.When = When;
	this->ProcessEvent ( pForceGameStateRefresh, &parms, NULL );

}*/

/*void AMasterServerUplink::Reconnect (  )
{
	static UFunction* pReconnect = 0;
	AMasterServerUplink_execReconnect_Parms parms;

	if ( !pReconnect )
		pReconnect = ( UFunction* )UFunction::StaticFindObject ( UFunction::StaticClass(), NULL, L"IpDrv.MasterServerUplink.Reconnect" );

	this->ProcessEvent ( pReconnect, &parms, NULL );

}*/

