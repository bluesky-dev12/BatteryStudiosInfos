#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : IpDrv
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Constants
# ======================================================================================== #
*/

#define CONST_MSUPROPNUM                                         3

/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum IpDrv.MasterServerUplink.EHeartbeatType
enum EHeartbeatType
{
	HB_QueryInterface                                  = 0,
	HB_GamePort                                        = 1,
	HB_GamespyQueryPort                                = 2
};

// Enum IpDrv.MasterServerUplink.EMasterToServer
enum EMasterToServer
{
	MTS_ClientChallenge                                = 0,
	MTS_ClientAuthFailed                               = 1,
	MTS_Shutdown                                       = 2,
	MTS_MatchID                                        = 3,
	MTS_MD5Update                                      = 4,
	MTS_UpdateOption                                   = 5,
	MTS_CheckOption                                    = 6,
	MTS_ClientMD5Fail                                  = 7,
	MTS_ClientBanned                                   = 8,
	MTS_ClientDupKey                                   = 9,
	MTS_UTANBan                                        = 10
};

// Enum IpDrv.MasterServerUplink.EServerToMaster
enum EServerToMaster
{
	STM_ClientResponse                                 = 0,
	STM_GameState                                      = 1,
	STM_Stats                                          = 2,
	STM_ClientDisconnectFailed                         = 3,
	STM_MD5Version                                     = 4,
	STM_CheckOptionReply                               = 5
};

// Enum IpDrv.InternetLink.EReceiveMode
enum EReceiveMode
{
	RMODE_Manual                                       = 0,
	RMODE_Event                                        = 1
};

// Enum IpDrv.InternetLink.ELineMode
enum ELineMode
{
	LMODE_auto                                         = 0,
	LMODE_DOS                                          = 1,
	LMODE_UNIX                                         = 2,
	LMODE_MAC                                          = 3
};

// Enum IpDrv.InternetLink.ELinkMode
enum ELinkMode
{
	MODE_Text                                          = 0,
	MODE_Line                                          = 1,
	MODE_Binary                                        = 2
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

// Class IpDrv.TcpBTMapLoader
class DLL_IMPORT UTcpBTMapLoader : public UBTMapLoader
{
public:
	unsigned char                                      _0x003C[ 0x28 ];                                  		// 0x003C ( 0x0028 )

	// Public Imports
	UTcpBTMapLoader(class UTcpBTMapLoader const &);
	UTcpBTMapLoader(void);
	class UTcpBTMapLoader &  operator=(class UTcpBTMapLoader const &);
	int  CreateImage(void);
	int  DestroyImage(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class IpDrv.TcpBTLoadingState_ChangeClient
class DLL_IMPORT UTcpBTLoadingState_ChangeClient : public UBTLoadingState
{
public:
	unsigned char                                      _0x00B8[ 0x20 ];                                  		// 0x00B8 ( 0x0020 )

	// Public Imports
	UTcpBTLoadingState_ChangeClient(class UTcpBTLoadingState_ChangeClient const &);
	UTcpBTLoadingState_ChangeClient(void);
	class UTcpBTLoadingState_ChangeClient &  operator=(class UTcpBTLoadingState_ChangeClient const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class IpDrv.TcpBTLoadingState_ChangeHost
class DLL_IMPORT UTcpBTLoadingState_ChangeHost : public UBTLoadingState
{
public:
	unsigned char                                      _0x00B8[ 0x10 ];                                  		// 0x00B8 ( 0x0010 )

	// Public Imports
	UTcpBTLoadingState_ChangeHost(class UTcpBTLoadingState_ChangeHost const &);
	UTcpBTLoadingState_ChangeHost(void);
	class UTcpBTLoadingState_ChangeHost &  operator=(class UTcpBTLoadingState_ChangeHost const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class IpDrv.TcpBTLoadingState_ClientLoading
class DLL_IMPORT UTcpBTLoadingState_ClientLoading : public UBTLoadingState
{
public:
	unsigned char                                      _0x00B8[ 0x34 ];                                  		// 0x00B8 ( 0x0034 )

	// Public Imports
	UTcpBTLoadingState_ClientLoading(class UTcpBTLoadingState_ClientLoading const &);
	UTcpBTLoadingState_ClientLoading(void);
	class UTcpBTLoadingState_ClientLoading &  operator=(class UTcpBTLoadingState_ClientLoading const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0034

// Class IpDrv.TcpBTLoadingState_HostLoading
class DLL_IMPORT UTcpBTLoadingState_HostLoading : public UBTLoadingState
{
public:
	unsigned char                                      _0x00B8[ 0x1C ];                                  		// 0x00B8 ( 0x001C )

	// Public Imports
	UTcpBTLoadingState_HostLoading(class UTcpBTLoadingState_HostLoading const &);
	UTcpBTLoadingState_HostLoading(void);
	class UTcpBTLoadingState_HostLoading &  operator=(class UTcpBTLoadingState_HostLoading const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class IpDrv.BTUdpPingChecker
class DLL_IMPORT UBTUdpPingChecker : public UBTPingChecker
{
public:
	unsigned char                                      _0x0030[ 0x818 ];                                 		// 0x0030 ( 0x0818 )

	// Public Imports
	UBTUdpPingChecker(class UBTUdpPingChecker const &);
	UBTUdpPingChecker(void);
	class UBTUdpPingChecker &  operator=(class UBTUdpPingChecker const &);
	unsigned short  CalcChecksum(char *,int);
	int  CheckSendHeaderLiveTime(void);
	int  Initialize(void);
	static void  InternalConstructor(void *);
	int  IsValidRecvHeader(struct ICMPheader,double &);
	int  ResolveIP(char *,char * *);
	static class UClass *  StaticClass(void);
	int  UnInitialize(void);
	int  ValidateChecksum(char *,int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0818

// Class IpDrv.DWebzenShopItemListDownloader
class DLL_IMPORT UDWebzenShopItemListDownloader : public UWebzenShopItemListDownloader
{
public:

	// Public Imports
	UDWebzenShopItemListDownloader(class UDWebzenShopItemListDownloader const &);
	UDWebzenShopItemListDownloader(void);
	class UDWebzenShopItemListDownloader &  operator=(class UDWebzenShopItemListDownloader const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
	void  SetServerInfo_CN(class CShopListManager * &,class CListVersionInfo * &,int);
	void  SetServerInfo_KR(class CShopListManager * &,class CListVersionInfo * &,int);
	void  SetServerInfo_TH(class CShopListManager * &,class CListVersionInfo * &,int);
}; // Size: 0x0000

// Class IpDrv.InternetLink
class DLL_IMPORT AInternetLink : public AInternetInfo
{
public:
	unsigned char                                      LinkMode;                                         		// 0x041C ( 0x0001 ) 
	unsigned char                                      InLineMode;                                       		// 0x041D ( 0x0001 ) 
	unsigned char                                      OutLineMode;                                      		// 0x041E ( 0x0001 ) 
	void*                                              Socket;                                           		// 0x0420 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	int                                                Port;                                             		// 0x0424 ( 0x0004 ) [ CPF_Const ]
	void*                                              RemoteSocket;                                     		// 0x0428 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              PrivateResolveInfo;                               		// 0x042C ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]
	int                                                DataPending;                                      		// 0x0430 ( 0x0004 ) [ CPF_Const ]
	unsigned char                                      ReceiveMode;                                      		// 0x0434 ( 0x0001 ) 

	// UScript Functions
	 void                      eventResolveFailed (  );                          		// [ FUNC_Event ] IpDrv.InternetLink.ResolveFailed
	 void                      eventResolved ( struct FIpAddr Addr );            		// [ FUNC_Event ] IpDrv.InternetLink.Resolved
	 void                      GetLocalIP ( struct FIpAddr* Arg );               		// [ FUNC_Native ] IpDrv.InternetLink.GetLocalIP
	 struct FString            GameSpyGameName (  );                             		// [ FUNC_Native ] IpDrv.InternetLink.GameSpyGameName
	 struct FString            GameSpyValidate ( struct FString ValidationString );		// [ FUNC_Native ] IpDrv.InternetLink.GameSpyValidate
	 bool                      StringToIpAddr ( struct FString str, struct FIpAddr* Addr );		// [ FUNC_Native ] IpDrv.InternetLink.StringToIpAddr
	 struct FString            IpAddrToString ( struct FIpAddr Arg );            		// [ FUNC_Native ] IpDrv.InternetLink.IpAddrToString
	 int                       GetLastError (  );                                		// [ FUNC_Native ] IpDrv.InternetLink.GetLastError
	 void                      Resolve ( struct FString Domain );                		// [ FUNC_Native ] IpDrv.InternetLink.Resolve
	 bool                      ParseURL ( struct FString URL, struct FString* Addr, int* Port, struct FString* LevelName, struct FString* EntryName );		// [ FUNC_Native ] IpDrv.InternetLink.ParseURL
	 bool                      IsDataPending (  );                               		// [ FUNC_Native ] IpDrv.InternetLink.IsDataPending

	// Public Imports
	AInternetLink(class AInternetLink const &);
	AInternetLink(void);
	class AInternetLink &  operator=(class AInternetLink const &);
	class FResolveInfo * &  GetResolveInfo(void);
	unsigned int &  GetSocket(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class IpDrv.UdpLink
class DLL_IMPORT AUdpLink : public AInternetLink
{
public:
	int                                                BroadcastAddr;                                    		// 0x0438 ( 0x0004 ) [ CPF_Edit | CPF_Const ]
	struct FString                                     RecvBuf;                                          		// 0x043C ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      eventReceivedBinary ( struct FIpAddr Addr, int Count, unsigned char* B );		// [ FUNC_Event ] IpDrv.UdpLink.ReceivedBinary
	 void                      eventReceivedLine ( struct FIpAddr Addr, struct FString Line );		// [ FUNC_Event ] IpDrv.UdpLink.ReceivedLine
	 void                      eventReceivedText ( struct FIpAddr Addr, struct FString Text );		// [ FUNC_Event ] IpDrv.UdpLink.ReceivedText
	 int                       ReadBinary ( int Count, struct FIpAddr* Addr, unsigned char* B );		// [ FUNC_Native ] IpDrv.UdpLink.ReadBinary
	 int                       ReadText ( struct FIpAddr* Addr, struct FString* str );		// [ FUNC_Native ] IpDrv.UdpLink.ReadText
	 bool                      SendBinary ( struct FIpAddr Addr, int Count, unsigned char* B );		// [ FUNC_Native ] IpDrv.UdpLink.SendBinary
	 bool                      SendText ( struct FIpAddr Addr, struct FString str );		// [ FUNC_Native ] IpDrv.UdpLink.SendText
	 int                       BindPort ( int Port, bool bUseNextAvailable );    		// [ FUNC_Native ] IpDrv.UdpLink.BindPort

	// Public Imports
	AUdpLink(class AUdpLink const &);
	AUdpLink(void);
	class AUdpLink &  operator=(class AUdpLink const &);
	struct FSocketData  GetSocketData(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class IpDrv.DecompressCommandlet
class DLL_IMPORT UDecompressCommandlet : public UCommandlet
{
public:
}; // Size: 0x0000

// Class IpDrv.CompressCommandlet
class DLL_IMPORT UCompressCommandlet : public UCommandlet
{
public:
}; // Size: 0x0000

// Class IpDrv.TcpNetDriver
class DLL_IMPORT UTcpNetDriver : public UNetDriver
{
public:
	unsigned char                                      _0x120C[ 0x10 ];                                  		// 0x120C ( 0x0010 )
	unsigned long                                      LimitConnPerIPRangePerMinute:1;                   		// 0x121C ( 0x0004 )  [0x00000001][ CPF_Config ]
	unsigned char                                      _0x1220[ 0x28 ];                                  		// 0x1220 ( 0x0028 )

	// Public Imports
	UTcpNetDriver(class UTcpNetDriver const &);
	UTcpNetDriver(void);
	class UTcpNetDriver &  operator=(class UTcpNetDriver const &);
	class UTcpipConnection *  GetServerConnection(void);
	struct FSocketData  GetSocketData(void);
	int  InitBase(int,class FNetworkNotify *,class FURL &,class FString &);
	static void  InternalConstructor(void *);
	void  RecvLog(void);
	void  RecvTickLog(void);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class IpDrv.TcpipConnection
class DLL_IMPORT UTcpipConnection : public UNetConnection
{
public:
	unsigned char                                      _0x4FAC[ 0x34 ];                                  		// 0x4FAC ( 0x0034 )

	// Public Imports
	UTcpipConnection(class UTcpipConnection const &);
	UTcpipConnection(unsigned int,class UNetDriver *,struct sockaddr_in,enum EConnectionState,int,class FURL const &,int);
	class UTcpipConnection &  operator=(class UTcpipConnection const &);
	static void  InternalConstructor(void *);
	void  SendLog(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0034

// Class IpDrv.NatChecker
class DLL_IMPORT UNatChecker : public UObject
{
public:
	unsigned char                                      _0x002C[ 0xA8 ];                                  		// 0x002C ( 0x00A8 )

	// Public Imports
	UNatChecker(class UNatChecker const &);
	UNatChecker(unsigned int,class UNetDriver *,class UGameEngine *);
	class UNatChecker &  operator=(class UNatChecker const &);
	int  InitClient(int,class FString &,int,unsigned char,unsigned char);
	int  InitHost(int,class FString &,int,unsigned char,unsigned char);
	static void  InternalConstructor(void *);
	int  ReceivedTick(char *,int,struct sockaddr_in &,int);
	int  ResendTick(double);
	void  ResetTick(void);
	void  SetAllowTick(void);
	static class UClass *  StaticClass(void);
	int  Tick(float);
	int  receivedPacketFromNatServer(char *,int);
	int  sendOutSideAddrToChannelServer(void);
	int  sendToNatServer(int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00A8

// Class IpDrv.NatCheckStater
class DLL_IMPORT UNatCheckStater : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x50 ];                                  		// 0x002C ( 0x0050 )

	// Public Imports
	UNatCheckStater(class UNatCheckStater const &);
	UNatCheckStater(class UNatChecker *,unsigned char,class FString &,int,unsigned char,unsigned long,unsigned char);
	class UNatCheckStater &  operator=(class UNatCheckStater const &);
	int  AddRemoteAddrForSend(struct sockaddr_in &);
	static void  InternalConstructor(void *);
	int  IsSameAddr(struct sockaddr_in &);
	int  RecvDummyPacket(struct sockaddr_in &,int);
	int  SendDummyPacket(char *,int);
	void  SetAllowStart(void);
	static class UClass *  StaticClass(void);
	int  Tick(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0050

// Class IpDrv.TcpTickChecker
class DLL_IMPORT UTcpTickChecker : public UTickChecker
{
public:
	unsigned char                                      _0x0044[ 0x1C ];                                  		// 0x0044 ( 0x001C )

	// Public Imports
	UTcpTickChecker(class UTcpTickChecker const &);
	UTcpTickChecker(void);
	class UTcpTickChecker &  operator=(class UTcpTickChecker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class IpDrv.TcpLink
class DLL_IMPORT ATcpLink : public AInternetLink
{
public:
	unsigned char                                      _0x0438[ 0x28 ];                                  		// 0x0438 ( 0x0028 )

	// Public Imports
	ATcpLink(class ATcpLink const &);
	ATcpLink(void);
	class ATcpLink &  operator=(class ATcpLink const &);
	void  CheckConnectionAttempt(void);
	void  CheckConnectionQueue(void);
	int  FlushSendBuffer(void);
	static void  InternalConstructor(void *);
	void  PollConnections(void);
	void  ShutdownConnection(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class IpDrv.MasterServerGameStats
class DLL_IMPORT AMasterServerGameStats : public AGameStats
{
public:
	class AMasterServerUplink*                         Uplink;                                           		// 0x0444 ( 0x0004 ) 

	// UScript Functions
	 void                      Logf ( struct FString LogString );                		//  IpDrv.MasterServerGameStats.Logf
	 void                      Init (  );                                        		//  IpDrv.MasterServerGameStats.Init

	// Public Imports
	AMasterServerGameStats(class AMasterServerGameStats const &);
	class AMasterServerGameStats &  operator=(class AMasterServerGameStats const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class IpDrv.MasterServerLink
class DLL_IMPORT AMasterServerLink : public AInfo
{
public:
	void*                                              LinkPtr;                                          		// 0x041C ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]
	int                                                LANPort;                                          		// 0x0420 ( 0x0004 ) 
	int                                                LANServerPort;                                    		// 0x0424 ( 0x0004 ) 
	class TArray< struct FtMasterServerEntry >         MasterServerList;                                 		// 0x0428 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FtMasterServerEntry >         ActiveMasterServerList;                           		// 0x0434 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                LastMSIndex;                                      		// 0x0440 ( 0x0004 ) 

	// UScript Functions
	 void                      Tick ( float Delta );                             		// [ FUNC_Simulated ] IpDrv.MasterServerLink.Tick
	 void                      eventGetMasterServer ( struct FString* OutAddress, int* OutPort );		// [ FUNC_Event ] IpDrv.MasterServerLink.GetMasterServer
	 bool                      Poll ( int WaitTime );                            		// [ FUNC_Native ] IpDrv.MasterServerLink.Poll

	// Public Imports
	AMasterServerLink(class AMasterServerLink const &);
	AMasterServerLink(void);
	class AMasterServerLink &  operator=(class AMasterServerLink const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class IpDrv.MasterServerUplink
class DLL_IMPORT AMasterServerUplink : public AMasterServerLink
{
public:
	unsigned long                                      bInitialStateCached:1;                            		// 0x0444 ( 0x0004 )  [0x00000001]
	struct FServerResponseLine                         ServerState;                                      		// 0x0448 ( 0x0070 ) [ CPF_NeedCtorLink ]
	struct FServerResponseLine                         FullCachedServerState;                            		// 0x04B8 ( 0x0070 ) [ CPF_NeedCtorLink ]
	struct FServerResponseLine                         CachedServerState;                                		// 0x0528 ( 0x0070 ) [ CPF_NeedCtorLink ]
	float                                              CacheRefreshTime;                                 		// 0x0598 ( 0x0004 ) 
	int                                                CachePlayerCount;                                 		// 0x059C ( 0x0004 ) 
	class AMasterServerGameStats*                      GameStats;                                        		// 0x05A0 ( 0x0004 ) 
	class AUdpLink*                                    GamespyQueryLink;                                 		// 0x05A4 ( 0x0004 ) 
	int                                                MatchID;                                          		// 0x05A8 ( 0x0004 ) [ CPF_Const ]
	float                                              ReconnectTime;                                    		// 0x05AC ( 0x0004 ) 
	unsigned long                                      bReconnectPending:1;                              		// 0x05B0 ( 0x0004 )  [0x00000001]
	unsigned long                                      DoUplink:1;                                       		// 0x05B0 ( 0x0004 )  [0x00000002]
	unsigned long                                      UplinkToGamespy:1;                                		// 0x05B0 ( 0x0004 )  [0x00000004]
	unsigned long                                      SendStats:1;                                      		// 0x05B0 ( 0x0004 )  [0x00000008]
	unsigned long                                      ServerBehindNAT:1;                                		// 0x05B0 ( 0x0004 )  [0x00000010]
	unsigned long                                      DoLANBroadcast:1;                                 		// 0x05B0 ( 0x0004 )  [0x00000020]
	unsigned long                                      bIgnoreUTANBans:1;                                		// 0x05B0 ( 0x0004 )  [0x00000040]
	struct FString                                     MSUPropText[ 0x03 ];                              		// 0x05B4 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MSUPropDesc[ 0x03 ];                              		// 0x05D8 ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] IpDrv.MasterServerUplink.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  IpDrv.MasterServerUplink.FillPlayInfo
	 void                      Tick ( float Delta );                             		// [ FUNC_Simulated ] IpDrv.MasterServerUplink.Tick
	 bool                      eventLogStatLine ( struct FString StatLine );     		// [ FUNC_Event | FUNC_Native ] IpDrv.MasterServerUplink.LogStatLine
	 void                      eventRefresh (  );                                		// [ FUNC_Event ] IpDrv.MasterServerUplink.Refresh
	 void                      eventConnectionFailed ( bool bShouldReconnect );  		// [ FUNC_Event ] IpDrv.MasterServerUplink.ConnectionFailed
	 void                      eventBeginPlay (  );                              		// [ FUNC_Event ] IpDrv.MasterServerUplink.BeginPlay
	 void                      ForceGameStateRefresh ( int When );               		// [ FUNC_Native ] IpDrv.MasterServerUplink.ForceGameStateRefresh
	 void                      Reconnect (  );                                   		// [ FUNC_Native ] IpDrv.MasterServerUplink.Reconnect

	// Public Imports
	AMasterServerUplink(class AMasterServerUplink const &);
	AMasterServerUplink(void);
	class AMasterServerUplink &  operator=(class AMasterServerUplink const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x01B8

// Class IpDrv.ServerQueryClient
class DLL_IMPORT AServerQueryClient : public AMasterServerLink
{
public:
	unsigned char                                      _0x0444[ 0x14 ];                                  		// 0x0444 ( 0x0014 )

	// Public Imports
	AServerQueryClient(class AServerQueryClient const &);
	AServerQueryClient(void);
	class AServerQueryClient &  operator=(class AServerQueryClient const &);
	void  Init(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnPingTimeout(int,unsigned char);
	void  delegateOnReceivedPingInfo(int,unsigned char,struct FServerResponseLine);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class IpDrv.MasterServerClient
class DLL_IMPORT AMasterServerClient : public AServerQueryClient
{
public:
	unsigned char                                      _0x0458[ 0x50 ];                                  		// 0x0458 ( 0x0050 )

	// Public Imports
	AMasterServerClient(class AMasterServerClient const &);
	AMasterServerClient(void);
	class AMasterServerClient &  operator=(class AMasterServerClient const &);
	void  Init(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnQueryFinished(unsigned char,int);
	void  delegateOnReceivedMOTDData(unsigned char,class FString const &);
	void  delegateOnReceivedModMOTDData(class FString const &);
	void  delegateOnReceivedOwnageItem(int,class FString const &,class FString const &,class FString const &);
	void  delegateOnReceivedServer(struct FServerResponseLine);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0050

// Class IpDrv.HTTPDownload
class DLL_IMPORT UHTTPDownload : public UDownload
{
public:
	unsigned char                                      _0x045C[ 0xA8 ];                                  		// 0x045C ( 0x00A8 )
}; // Size: 0x00A8

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

