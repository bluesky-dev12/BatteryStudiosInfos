#pragma once
/*
# ======================================================================================== #
# > ArcticCombat SDK
# > Generated By HJSdkGen v1.06b
# ---------------------------------------------------------------------------------------- #
# > Package : Engine
# >    File : Classes.h
# ======================================================================================== #
*/

#ifdef _MSC_VER
#pragma pack ( push, 4 )
#endif


/*
# ======================================================================================== #
# > Constants
# ======================================================================================== #
*/

#define CONST_MINFLOORZ                                          0.7
#define CONST_MAXSTEPHEIGHT                                      35.0
#define CONST_LATENT_MOVETOWARD                                  503
#define CONST_kIISF_All                                          0x7F
#define CONST_kIISF_Sales                                        0x40
#define CONST_kIISF_Reserved                                     0x20
#define CONST_kIISF_Best                                         0x10
#define CONST_kIISF_Hot                                          0x08
#define CONST_kIISF_Limited                                      0x04
#define CONST_kIISF_Event                                        0x02
#define CONST_kIISF_New                                          0x01
#define CONST_kIISF_Enabled                                      0x00
#define CONST_kIISF_Disabled                                     -1
#define CONST_LevelImageHeight                                   32
#define CONST_LevelImageWidth                                    32
#define CONST_LevelImageRowCount                                 16
#define CONST_LevelImageCount                                    64
#define CONST_NUM_FIRE_MODES                                     3
#define CONST_GIPROPNUM                                          15
#define CONST_RefreshSec                                         1.0
#define CONST_PROPNUM                                            4
#define CONST_TEAM_MAX                                           3
#define CONST_IDC_WAIT                                           6
#define CONST_IDC_SIZEWE                                         5
#define CONST_IDC_SIZENWSE                                       4
#define CONST_IDC_SIZENS                                         3
#define CONST_IDC_SIZENESW                                       2
#define CONST_IDC_SIZEALL                                        1
#define CONST_IDC_ARROW                                          0
#define CONST_NUMPROPS                                           6
#define CONST_PROPNUM01                                          2
#define CONST_kST_ComplexCoinFlatRate                            0x07
#define CONST_kST_CCoinFlatRate                                  0x06
#define CONST_kST_ETC                                            0x05
#define CONST_kST_FlatRate                                       0x04
#define CONST_kST_ComplexCoin                                    0x03
#define CONST_kST_PCoin                                          0x02
#define CONST_kST_CCoin                                          0x01
#define CONST_kST_None                                           0x00
#define CONST_MaxFilterEntries                                   4
#define CONST_NumPresets                                         4
#define CONST_InputMax                                           32768
#define CONST_NUM_LADDERS                                        6
#define CONST_LINEUP_SIZE                                        4
#define CONST_TEAM_SIZE                                          7
#define CONST_NUM_POSITIONS                                      5
#define CONST_ChampionshipLadderIndex                            5
#define CONST_BRLadderIndex                                      4
#define CONST_CTFLadderIndex                                     3
#define CONST_DOMLadderIndex                                     2
#define CONST_TDMLadderIndex                                     1
#define CONST_DMLadderIndex                                      0
#define CONST_INVALIDSONGHANDLE                                  0
#define CONST_mMaxTimes                                          5
#define CONST_FilterFrames                                       5

/*
# ======================================================================================== #
# > Enums
# ======================================================================================== #
*/

// Enum Engine.Client.ETextureDetail
enum ETextureDetail
{
	UltraHigh                                          = 0,
	VeryHigh                                           = 1,
	High                                               = 2,
	Higher                                             = 3,
	Normal                                             = 4,
	Lower                                              = 5,
	Low                                                = 6,
	VeryLow                                            = 7,
	UltraLow                                           = 8
};

// Enum Engine.Actor.ERenderStyle
enum ERenderStyle
{
	STY_None                                           = 0,
	STY_Normal                                         = 1,
	STY_Masked                                         = 2,
	STY_Translucent                                    = 3,
	STY_Modulated                                      = 4,
	STY_Alpha                                          = 5,
	STY_Additive                                       = 6,
	STY_Subtractive                                    = 7,
	STY_Particle                                       = 8,
	STY_AlphaZ                                         = 9
};

// Enum Engine.Actor.ESoundSlot
enum ESoundSlot
{
	SLOT_None                                          = 0,
	SLOT_Misc                                          = 1,
	SLOT_Pain                                          = 2,
	SLOT_Interact                                      = 3,
	SLOT_Ambient                                       = 4,
	SLOT_Talk                                          = 5,
	SLOT_Interface                                     = 6,
	SLOT_PlayerSoundAlly                               = 7,
	SLOT_PlayerSoundEnemy                              = 8,
	SLOT_HUDPART                                       = 9,
	SLOT_ETC_0                                         = 10,
	SLOT_ETC_1                                         = 11,
	SLOT_ETC_2                                         = 12,
	SLOT_ETC_3                                         = 13,
	SLOT_ETC_4                                         = 14,
	SLOT_ETC_5                                         = 15,
	SLOT_ETC_6                                         = 16,
	SLOT_ETC_7                                         = 17,
	SLOT_ETC_8                                         = 18
};

// Enum Engine.Actor.CollisionPartsType
enum CollisionPartsType
{
	CP_None                                            = 0,
	CP_Head                                            = 1,
	CP_UpperTorso                                      = 2,
	CP_LowerTorso                                      = 3,
	CP_UpperArm_L                                      = 4,
	CP_UpperArm_R                                      = 5,
	CP_LowerArm_L                                      = 6,
	CP_LowerArm_R                                      = 7,
	CP_UpperLeg_L                                      = 8,
	CP_UpperLeg_R                                      = 9,
	CP_LowerLeg_L                                      = 10,
	CP_LowerLeg_R                                      = 11,
	CP_Bomb_L                                          = 12,
	CP_Bomb_R                                          = 13,
	CP_Bomb_U                                          = 14,
	CP_Bomb_D                                          = 15,
	CP_ETC                                             = 16,
	CP_Head_Round                                      = 17
};

// Enum Engine.Actor.eKillZType
enum eKillZType
{
	KILLZ_None                                         = 0,
	KILLZ_Lava                                         = 1,
	KILLZ_Suicide                                      = 2
};

// Enum Engine.Actor.EPhysics
enum EPhysics
{
	PHYS_None                                          = 0,
	PHYS_Walking                                       = 1,
	PHYS_Falling                                       = 2,
	PHYS_Swimming                                      = 3,
	PHYS_Flying                                        = 4,
	PHYS_Rotating                                      = 5,
	PHYS_Projectile                                    = 6,
	PHYS_Interpolating                                 = 7,
	PHYS_MovingBrush                                   = 8,
	PHYS_Spider                                        = 9,
	PHYS_Trailer                                       = 10,
	PHYS_Ladder                                        = 11,
	PHYS_RootMotion                                    = 12,
	PHYS_Karma                                         = 13,
	PHYS_KarmaRagDoll                                  = 14,
	PHYS_Hovering                                      = 15,
	PHYS_CinMotion                                     = 16
};

// Enum Engine.Actor.EDrawType
enum EDrawType
{
	DT_None                                            = 0,
	DT_Sprite                                          = 1,
	DT_Mesh                                            = 2,
	DT_Brush                                           = 3,
	DT_RopeSprite                                      = 4,
	DT_VerticalSprite                                  = 5,
	DT_Terraform                                       = 6,
	DT_SpriteAnimOnce                                  = 7,
	DT_StaticMesh                                      = 8,
	DT_DrawType                                        = 9,
	DT_Particle                                        = 10,
	DT_AntiPortal                                      = 11,
	DT_LinkAntiPortalVolume                            = 12,
	DT_FluidSurface                                    = 13,
	DT_CubemapVolume                                   = 14
};

// Enum Engine.Actor.EScaleMode
enum EScaleMode
{
	SM_None                                            = 0,
	SM_Up                                              = 1,
	SM_Down                                            = 2,
	SM_Left                                            = 3,
	SM_Right                                           = 4
};

// Enum Engine.Actor.ePlayerParts
enum ePlayerParts
{
	PParts_Head                                        = 0,
	PParts_Helmet                                      = 1,
	PParts_Accessory                                   = 2
};

// Enum Engine.Actor.EFlagState
enum EFlagState
{
	FLAG_Home                                          = 0,
	FLAG_HeldFriendly                                  = 1,
	FLAG_HeldEnemy                                     = 2,
	FLAG_Down                                          = 3
};

// Enum Engine.Actor.EDoubleClickDir
enum EDoubleClickDir
{
	DCLICK_None                                        = 0,
	DCLICK_Left                                        = 1,
	DCLICK_Right                                       = 2,
	DCLICK_Forward                                     = 3,
	DCLICK_Back                                        = 4,
	DCLICK_Active                                      = 5,
	DCLICK_Done                                        = 6
};

// Enum Engine.Actor.ETravelType
enum ETravelType
{
	TRAVEL_Absolute                                    = 0,
	TRAVEL_Partial                                     = 1,
	TRAVEL_Relative                                    = 2
};

// Enum Engine.Actor.EForceType
enum EForceType
{
	FT_None                                            = 0,
	FT_DragAlong                                       = 1,
	FT_Constant                                        = 2
};

// Enum Engine.Actor.EMusicTransition
enum EMusicTransition
{
	MTRAN_None                                         = 0,
	MTRAN_Instant                                      = 1,
	MTRAN_Segue                                        = 2,
	MTRAN_Fade                                         = 3,
	MTRAN_FastFade                                     = 4,
	MTRAN_SlowFade                                     = 5
};

// Enum Engine.Actor.ESoundOcclusion
enum ESoundOcclusion
{
	OCCLUSION_Default                                  = 0,
	OCCLUSION_None                                     = 1,
	OCCLUSION_BSP                                      = 2,
	OCCLUSION_StaticMeshes                             = 3
};

// Enum Engine.Actor.ESurfaceTypes
enum ESurfaceTypes
{
	EST_Default                                        = 0,
	EST_ETC                                            = 1,
	EST_Rock                                           = 2,
	EST_Brick                                          = 3,
	EST_Concrete                                       = 4,
	EST_Dirt                                           = 5,
	EST_Metal                                          = 6,
	EST_Metal_pt                                       = 7,
	EST_Wood                                           = 8,
	EST_Plant                                          = 9,
	EST_Flesh                                          = 10,
	EST_Ice                                            = 11,
	EST_Snow                                           = 12,
	EST_Water                                          = 13,
	EST_Glass                                          = 14,
	EST_cotton                                         = 15,
	EST_blood_headshot                                 = 16,
	EST_blood                                          = 17,
	EST_blood_death                                    = 18,
	EST_blood_spurt                                    = 19,
	EST_crackwood                                      = 20,
	EST_plastic                                        = 21,
	EST_paper                                          = 22,
	EST_rubber                                         = 23,
	EST_carpet                                         = 24,
	EST_leaves                                         = 25,
	EST_cloth                                          = 26,
	EST_sand                                           = 27,
	EST_mud                                            = 28,
	EST_water_foot                                     = 29,
	EST_water_wall                                     = 30,
	EST_alien_tankersheld                              = 31,
	EST_Custom10                                       = 32,
	EST_Custom11                                       = 33,
	EST_Custom12                                       = 34,
	EST_Custom13                                       = 35,
	EST_Custom14                                       = 36,
	EST_Custom15                                       = 37,
	EST_Custom16                                       = 38,
	EST_Custom17                                       = 39,
	EST_Custom18                                       = 40,
	EST_Custom19                                       = 41,
	EST_Custom20                                       = 42,
	EST_Custom21                                       = 43,
	EST_Custom22                                       = 44,
	EST_Custom23                                       = 45,
	EST_Custom24                                       = 46,
	EST_Custom25                                       = 47,
	EST_Custom26                                       = 48,
	EST_Custom27                                       = 49,
	EST_Custom28                                       = 50,
	EST_Custom29                                       = 51,
	EST_Custom30                                       = 52,
	EST_Custom31                                       = 53
};

// Enum Engine.Actor.EUV2Mode
enum EUV2Mode
{
	UVM_MacroTexture                                   = 0,
	UVM_LightMap                                       = 1,
	UVM_Skin                                           = 2
};

// Enum Engine.Actor.ENetRole
enum ENetRole
{
	ROLE_None                                          = 0,
	ROLE_DumbProxy                                     = 1,
	ROLE_SimulatedProxy                                = 2,
	ROLE_AutonomousProxy                               = 3,
	ROLE_Authority                                     = 4
};

// Enum Engine.Actor.eWeaponType
enum eWeaponType
{
	WType_None                                         = 0,
	WType_AR                                           = 1,
	WType_SR                                           = 2,
	WType_SMG                                          = 3,
	WType_Pistol                                       = 4,
	WType_GR                                           = 5,
	WType_Shotgun                                      = 6,
	WType_RPG                                          = 7,
	WType_FlameThrower                                 = 8,
	WType_MG                                           = 9,
	WType_Demo                                         = 10,
	WType_AirStrike                                    = 11,
	WType_Melee                                        = 12,
	WType_Helicopter                                   = 13,
	WType_Telegraph_Airstrike                          = 14,
	WType_Telegraph_Heli                               = 15,
	WType_Telegraph_UAV                                = 16,
	WType_Knife                                        = 17
};

// Enum Engine.Actor.EFilterState
enum EFilterState
{
	FS_Maybe                                           = 0,
	FS_Yes                                             = 1,
	FS_No                                              = 2
};

// Enum Engine.Actor.ELightEffect
enum ELightEffect
{
	LE_None                                            = 0,
	LE_TorchWaver                                      = 1,
	LE_FireWaver                                       = 2,
	LE_WateryShimmer                                   = 3,
	LE_Searchlight                                     = 4,
	LE_SlowWave                                        = 5,
	LE_FastWave                                        = 6,
	LE_CloudCast                                       = 7,
	LE_StaticSpot                                      = 8,
	LE_Shock                                           = 9,
	LE_Disco                                           = 10,
	LE_Warp                                            = 11,
	LE_Spotlight                                       = 12,
	LE_NonIncidence                                    = 13,
	LE_Shell                                           = 14,
	LE_OmniBumpMap                                     = 15,
	LE_Interference                                    = 16,
	LE_Cylinder                                        = 17,
	LE_Rotor                                           = 18,
	LE_Negative                                        = 19,
	LE_Sunlight                                        = 20,
	LE_QuadraticNonIncidence                           = 21
};

// Enum Engine.Actor.ELightType
enum ELightType
{
	LT_None                                            = 0,
	LT_Steady                                          = 1,
	LT_Pulse                                           = 2,
	LT_Blink                                           = 3,
	LT_Flicker                                         = 4,
	LT_Strobe                                          = 5,
	LT_BackdropLight                                   = 6,
	LT_SubtlePulse                                     = 7,
	LT_TexturePaletteOnce                              = 8,
	LT_TexturePaletteLoop                              = 9,
	LT_FadeOut                                         = 10
};

// Enum Engine.RenderedMaterial.EOutputBlending
enum EOutputBlending
{
	OB_Normal                                          = 0,
	OB_Masked                                          = 1,
	OB_Modulate                                        = 2,
	OB_Translucent                                     = 3,
	OB_Invisible                                       = 4,
	OB_Brighten                                        = 5,
	OB_Darken                                          = 6
};

// Enum Engine.RenderedMaterial.ERenderTechnique
enum ERenderTechnique
{
	RT_None                                            = 0,
	RT_DynamicCubeMap                                  = 1,
	RT_SelfIllumination                                = 2,
	RT_Both                                            = 3,
	RT_OnlyCubeMap                                     = 4,
	RT_SimpleLighting                                  = 5
};

// Enum Engine.BitmapMaterial.ETexClampMode
enum ETexClampMode
{
	TC_Wrap                                            = 0,
	TC_Clamp                                           = 1,
	TC_Border                                          = 2
};

// Enum Engine.BitmapMaterial.ETextureFormat
enum ETextureFormat
{
	TEXF_P8                                            = 0,
	TEXF_RGBA7                                         = 1,
	TEXF_RGB16                                         = 2,
	TEXF_DXT1                                          = 3,
	TEXF_RGB8                                          = 4,
	TEXF_RGBA8                                         = 5,
	TEXF_NODATA                                        = 6,
	TEXF_DXT3                                          = 7,
	TEXF_DXT5                                          = 8,
	TEXF_L8                                            = 9,
	TEXF_G16                                           = 10,
	TEXF_RRRGGGBBB                                     = 11
};

// Enum Engine.Texture.ELODSet
enum ELODSet
{
	LODSET_None                                        = 0,
	LODSET_World                                       = 1,
	LODSET_PlayerSkin                                  = 2,
	LODSET_WeaponSkin                                  = 3,
	LODSET_Terrain                                     = 4,
	LODSET_Interface                                   = 5,
	LODSET_RenderMap                                   = 6,
	LODSET_Lightmap                                    = 7
};

// Enum Engine.Texture.EEnvMapTransformType
enum EEnvMapTransformType
{
	EMTT_ViewSpace                                     = 0,
	EMTT_WorldSpace                                    = 1,
	EMTT_LightSpace                                    = 2
};

// Enum Engine.VoiceChatRoom.EJoinChatResult
enum EJoinChatResult
{
	JCR_Invalid                                        = 0,
	JCR_Member                                         = 1,
	JCR_NeedPassword                                   = 2,
	JCR_WrongPassword                                  = 3,
	JCR_Banned                                         = 4,
	JCR_Full                                           = 5,
	JCR_NotAllowed                                     = 6,
	JCR_Success                                        = 7
};

// Enum Engine.PlayerController.EShakeState
enum EShakeState
{
	Shake_None                                         = 0,
	Shake_Kick                                         = 1,
	Shake_Stay                                         = 2,
	Shake_Decay                                        = 3
};

// Enum Engine.Interactions.EStreamFinishReason
enum EStreamFinishReason
{
	STREAMFINISH_EOF                                   = 0,
	STREAMFINISH_Error                                 = 1
};

// Enum Engine.PlayerController.EAttackedDirState
enum EAttackedDirState
{
	AttackedDS_None                                    = 0,
	AttackedDS_Front                                   = 1,
	AttackedDS_Back                                    = 2,
	AttackedDS_Right                                   = 3,
	AttackedDS_Left                                    = 4,
	AttackedDS_Up                                      = 5,
	AttackedDS_Down                                    = 6
};

// Enum Engine.PlayerController.EAttackedState
enum EAttackedState
{
	Attacked_None                                      = 0,
	Attacked_Kick                                      = 1,
	Attacked_Stay                                      = 2,
	Attacked_Decay                                     = 3
};

// Enum Engine.PlayerController.EShockState
enum EShockState
{
	Shock_None                                         = 0,
	Shock_Stay                                         = 1,
	Shock_Decay                                        = 2
};

// Enum Engine.wMatchMaker.CHANNEL_OPTION
enum CHANNEL_OPTION
{
	CHANNEL_OPTION_KEY_ON                              = 0,
	CHANNEL_OPTION_KEY_BONUS_EXP_RATIO                 = 1,
	CHANNEL_OPTION_KEY_IGNORE_ASSIST_RECORD            = 2,
	CHANNEL_OPTION_KEY_IGNORE_DEATH_RECORD             = 3,
	CHANNEL_OPTION_KEY_IGNORE_HEADSHOT_RECORD          = 4,
	CHANNEL_OPTION_KEY_IGNORE_KILL_RECORD              = 5,
	CHANNEL_OPTION_KEY_IGNORE_LOSE_RECORD              = 6,
	CHANNEL_OPTION_KEY_IGNORE_WIN_RECORD               = 7,
	CHANNEL_OPTION_KEY_LIMITATION_DEATH_HIGH           = 8,
	CHANNEL_OPTION_KEY_LIMITATION_DEATH_LOW            = 9,
	CHANNEL_OPTION_KEY_LIMITATION_KILL_HIGH            = 10,
	CHANNEL_OPTION_KEY_LIMITATION_KILL_LOW             = 11,
	CHANNEL_OPTION_KEY_LIMITATION_KILLDEATHRATIO_HIGH  = 12,
	CHANNEL_OPTION_KEY_LIMITATION_KILLDEATHRATIO_LOW   = 13,
	CHANNEL_OPTION_KEY_LIMITATION_LEVEL_HIGH           = 14,
	CHANNEL_OPTION_KEY_LIMITATION_LEVEL_LOW            = 15,
	CHANNEL_OPTION_KEY_END                             = 16
};

// Enum Engine.wMatchMaker.EGameEndType
enum EGameEndType
{
	E_GAME_END_TYPE_NONE0                              = 0,
	E_GAME_END_TYPE_TIME_OVER                          = 1,
	E_GAME_END_TYPE_NONE2                              = 2,
	E_GAME_END_TYPE_NONE3                              = 3,
	E_GAME_END_TYPE_NONE4                              = 4,
	E_GAME_END_TYPE_DRAW                               = 5,
	E_GAME_END_TYPE_PURPOSE_SCORE                      = 6,
	E_GAME_END_TYPE_NONE7                              = 7,
	E_GAME_END_TYPE_NONE8                              = 8,
	E_GAME_END_TYPE_NONE9                              = 9,
	E_GAME_END_TYPE_NONE10                             = 10,
	E_GAME_END_TYPE_A_TEAM_ALL_LEAVE                   = 11,
	E_GAME_END_TYPE_TWO_TEAM_ALL_LEAVE                 = 12
};

// Enum Engine.wMatchMaker.EGamePageState
enum EGamePageState
{
	EGPState_None                                      = 0,
	EGPState_InitLoading                               = 1,
	EGPState_ChannelSellect                            = 2,
	EGPState_Lobby                                     = 3,
	EGPState_RoomLobby                                 = 4,
	EGPState_Store                                     = 5,
	EGPState_Inventory                                 = 6
};

// Enum Engine.wMatchMaker.GameModeNum
enum GameModeNum
{
	Mode_TeamDeathMatch                                = 0,
	Mode_SearchAndDestroy                              = 1,
	Mode_FreeForAll                                    = 2,
	Mode_Domination                                    = 3,
	Mode_Sabotage                                      = 4
};

// Enum Engine.wMatchMaker.WeaponLimit
enum WeaponLimit
{
	EWeaponLimit_Default                               = 0,
	EWeaponLimit_KnifeOnly                             = 1,
	EWeaponLimit_PistolOnly                            = 2,
	EWeaponLimit_GrenadeOnly                           = 3,
	EWeaponLimit_RPGOnly                               = 4,
	EWeaponLimit_SROnly                                = 5,
	EWeaponLimit_SRBan                                 = 6,
	EWeaponLimit_TEST                                  = 7,
	EWeaponLimit_SGOnly                                = 8,
	EWeaponLimit_MGOnly                                = 9,
	EWeaponLimit_FlameThrower                          = 10,
	EWeaponLimit_End                                   = 11
};

// Enum Engine.wGameManager.EItemType
enum EItemType
{
	ITYPE_AR                                           = 0,
	ITYPE_SMG                                          = 1,
	ITYPE_SR                                           = 2,
	ITYPE_SG                                           = 3,
	ITYPE_MG                                           = 4,
	ITYPE_Pistol                                       = 5,
	ITYPE_TW                                           = 6,
	ITYPE_Knife                                        = 7,
	ITYPE_Head                                         = 8,
	ITYPE_Face                                         = 9,
	ITYPE_Accessory                                    = 10,
	ITYPE_SpChar                                       = 11,
	ITYPE_Cash                                         = 12,
	ITYPE_Body                                         = 13,
	ITYPE_Backpack                                     = 14,
	ITYPE_HW                                           = 15,
	ITYPE_Bomb                                         = 16,
	ITYPE_SPW                                          = 17,
	ITYPE_Meele                                        = 18,
	ITYPE_Skill                                        = 19,
	ITYPE_Part_Sight                                   = 20,
	ITYPE_Part_Silencer                                = 21,
	ITYPE_Part_Camo                                    = 22,
	ITYPE_Part_Paint                                   = 23,
	ITYPE_Part_Barrel                                  = 24,
	ITYPE_Part_Gunstock                                = 25,
	ITYPE_Part_Scope                                   = 26,
	ITYPE_Supply                                       = 27,
	ITYPE_Passive                                      = 28,
	ITYPE_ETC                                          = 29,
	ITYPE_ItemBox                                      = 30,
	ITYPE_Use                                          = 31,
	ITYPE_RandBox                                      = 32,
	ITYPE_LVMark                                       = 33,
	ITYPE_GOLD                                         = 34,
	ITYPE_None                                         = 35
};

// Enum Engine.wGameManager.EAlienModeType
enum EAlienModeType
{
	EAM_HUMAN                                          = 0,
	EAM_HUMAN_HERO                                     = 1,
	EAM_ALIEN                                          = 2,
	EAM_ALIEN_HOST                                     = 3,
	EAM_ALIEN_MASTER                                   = 4
};

// Enum Engine.BTCustomDrawHK.DrawType
enum DrawType
{
	E_DT_ORDER_LT                                      = 0,
	E_DT_ORDER_CT                                      = 1,
	E_DT_ORDER_RT                                      = 2,
	E_DT_ORDER_LC                                      = 3,
	E_DT_ORDER_CC                                      = 4,
	E_DT_ORDER_RC                                      = 5,
	E_DT_ORDER_LB                                      = 6,
	E_DT_ORDER_CB                                      = 7,
	E_DT_ORDER_RB                                      = 8,
	E_DT_STRETCHED_WIDTH_ORDER_T                       = 9,
	E_DT_STRETCHED_WIDTH_ORDER_C                       = 10,
	E_DT_STRETCHED_WIDTH_ORDER_B                       = 11,
	E_DT_STRETCHED_HEIGHT_ORDER_R                      = 12,
	E_DT_STRETCHED_HEIGHT_ORDER_C                      = 13,
	E_DT_STRETCHED_HEIGHT_ORDER_L                      = 14,
	E_DT_STRETCHED_ALL                                 = 15,
	E_DT_SCALE_WIDTH_ORDER_T                           = 16,
	E_DT_SCALE_WIDTH_ORDER_C                           = 17,
	E_DT_SCALE_WIDTH_ORDER_B                           = 18,
	E_DT_SCALE_HEIGHT_ORDER_R                          = 19,
	E_DT_SCALE_HEIGHT_ORDER_C                          = 20,
	E_DT_SCALE_HEIGHT_ORDER_L                          = 21,
	E_DT_SCALE_WIDTH_RATIO_T                           = 22,
	E_DT_SCALE_WIDTH_RATIO_C                           = 23,
	E_DT_SCALE_WIDTH_RATIO_B                           = 24,
	E_DT_SCALE_HEIGHT_RATIO_L                          = 25,
	E_DT_SCALE_HEIGHT_RATIO_C                          = 26,
	E_DT_SCALE_HEIGHT_RATIO_R                          = 27,
	E_DT_SCALE_ALL                                     = 28,
	E_DT_SCALE_CLIP_ALL                                = 29
};

// Enum Engine.wGameManager.ESkillActiveType
enum ESkillActiveType
{
	SACT_Active                                        = 0,
	SACT_Passive                                       = 1,
	SACT_None                                          = 2
};

// Enum Engine.wGameManager.ESkillType
enum ESkillType
{
	STYPE_Normal                                       = 0,
	STYPE_Clan                                         = 1,
	STYPE_None                                         = 2
};

// Enum Engine.wGameManager.ECastType
enum ECastType
{
	CTYPE_Durability                                   = 0,
	CTYPE_Time                                         = 1,
	CTYPE_DurabilityX                                  = 2,
	CTYPE_Number                                       = 3,
	CTYPE_Time2                                        = 4,
	CTYPE_None                                         = 5
};

// Enum Engine.wGameManager.EEquipSlot
enum EEquipSlot
{
	ESlot_Pistol                                       = 0,
	ESlot_MainWeapon                                   = 1,
	ESlot_Special                                      = 2,
	ESlot_Grenade                                      = 3,
	ESlot_Meele                                        = 4,
	ESlot_Body                                         = 5,
	ESlot_Head                                         = 6,
	ESlot_Face                                         = 7,
	ESlot_Accessory                                    = 8,
	ESlot_Backpack                                     = 9,
	ESlot_SpChar                                       = 10,
	ESlot_Part_Sight                                   = 11,
	ESlot_Part_Silencer                                = 12,
	ESlot_Part_Camo                                    = 13,
	ESlot_Part_Paint                                   = 14,
	ESlot_Skill                                        = 15,
	ESlot_None                                         = 16
};

// Enum Engine.wGameManager.EItemGrade
enum EItemGrade
{
	IGRADE_Base                                        = 0,
	IGRADE_Shop                                        = 1,
	IGRADE_Common                                      = 2,
	IGRADE_Normal                                      = 3,
	IGRADE_High                                        = 4,
	IGRADE_Rare                                        = 5,
	IGRADE_Legend                                      = 6,
	IGRADE_PC                                          = 7,
	IGRADE_PCPLUS                                      = 8,
	IGRADE_Map_Spon                                    = 9,
	IGRADE_Map_Lock                                    = 10,
	IGRADE_Skill                                       = 11,
	IGRADE_Special                                     = 12,
	IGRADE_Part                                        = 13,
	IGRADE_Cash                                        = 14,
	IGRADE_Supply                                      = 15,
	IGRADE_War                                         = 16,
	IGRADE_None                                        = 17
};

// Enum Engine.wWeaponFire.ESpreadStance
enum ESpreadStance
{
	SS_None                                            = 0,
	SS_Stand                                           = 1,
	SS_Ducked                                          = 2,
	SS_Prone                                           = 3
};

// Enum Engine.LevelInfo.EPostProcessEffectMode
enum EPostProcessEffectMode
{
	PPEM_None                                          = 0,
	PPEM_ToneMapping                                   = 1,
	PPEM_HDRScene                                      = 2
};

// Enum Engine.LevelInfo.ENetMode
enum ENetMode
{
	NM_Standalone                                      = 0,
	NM_DedicatedServer                                 = 1,
	NM_ListenServer                                    = 2,
	NM_Client                                          = 3
};

// Enum Engine.LevelInfo.ELevelAction
enum ELevelAction
{
	LEVACT_None                                        = 0,
	LEVACT_Loading                                     = 1,
	LEVACT_Saving                                      = 2,
	LEVACT_Connecting                                  = 3,
	LEVACT_Precaching                                  = 4
};

// Enum Engine.LevelInfo.EMeshLODDetailLevel
enum EMeshLODDetailLevel
{
	MDL_Low                                            = 0,
	MDL_Medium                                         = 1,
	MDL_High                                           = 2,
	MDL_Ultra                                          = 3
};

// Enum Engine.LevelInfo.EPhysicsDetailLevel
enum EPhysicsDetailLevel
{
	PDL_Low                                            = 0,
	PDL_Medium                                         = 1,
	PDL_High                                           = 2
};

// Enum Engine.wWeaponAcce.EAcceType
enum EAcceType
{
	WAT_None                                           = 0,
	WAT_Sight                                          = 1,
	WAT_Dot                                            = 2,
	WAT_Scope                                          = 3,
	WAT_ButtStock                                      = 4,
	WAT_Silencer                                       = 5
};

// Enum Engine.wWeapon.EMeleeState
enum EMeleeState
{
	WMS_None                                           = 0,
	WMS_Attacking                                      = 1
};

// Enum Engine.wWeapon.EWeaponClientState
enum EWeaponClientState
{
	WS_None                                            = 0,
	WS_Hidden                                          = 1,
	WS_BringUp                                         = 2,
	WS_PutDown                                         = 3,
	WS_ReadyToFire                                     = 4
};

// Enum Engine.wWeaponBaseParams.ECrosshairType
enum ECrosshairType
{
	CrosshairType_Basic                                = 0,
	CrosshairType_Image                                = 1
};

// Enum Engine.wWeaponBaseParams.EReloadType
enum EReloadType
{
	ReloadType_None                                    = 0,
	ReloadType_Magazine                                = 1,
	ReloadType_Bullet                                  = 2
};

// Enum Engine.wWeaponBaseParams.EProjMoveType
enum EProjMoveType
{
	ProjMoveType_None                                  = 0,
	ProjMoveType_Throwing                              = 1,
	ProjMoveType_Rocket                                = 2,
	ProjMoveType_Flame                                 = 3
};

// Enum Engine.wWeaponBaseParams.EBulletType
enum EBulletType
{
	BulletType_None                                    = 0,
	BulletType_Inst                                    = 1,
	BulletType_Proj                                    = 2
};

// Enum Engine.wWeaponBaseParams.EDamType
enum EDamType
{
	DamType_None                                       = 0,
	DamType_BulletNormal                               = 1,
	DamType_BulletHeavy                                = 2,
	DamType_ExploNormal                                = 3,
	DamType_ExploHeavy                                 = 4
};

// Enum Engine.wWeaponBaseParams.EWEAPON_BASE_PARAMS_TYPE
enum EWEAPON_BASE_PARAMS_TYPE
{
	WBP_WEAPON_RESOURCE_ID                             = 0,
	WBP_FIRE_MODE                                      = 1,
	WBP_WEAPON_TYPE                                    = 2,
	WBP_WEAPON_NUM                                     = 3,
	WBP_WEAPON_PRIORITY                                = 4,
	WBP_DAMAGE_TYPE                                    = 5,
	WBP_AIM_FIRE                                       = 6,
	WBP_RATE_OF_FIRE                                   = 7,
	WBP_ROUND_BURST_COUNT                              = 8,
	WBP_ROUND_BURST_TIME                               = 9,
	WBP_FIRE_DELAY                                     = 10,
	WBP_BULLET_NAME                                    = 11,
	WBP_ZOOM_1                                         = 12,
	WBP_ZOOM_2                                         = 13,
	WBP_OVERHEAT                                       = 14,
	WBP_OVERHEAT_UP                                    = 15,
	WBP_OVERHEAT_DOWN                                  = 16,
	WBP_BULLET_TYPE                                    = 17,
	WBP_PROJECTILE_MOVE_TYPE                           = 18,
	WBP_BULLET_COUNT                                   = 19,
	WBP_PROJECTILE_SPEED                               = 20,
	WBP_BULLET_IMPACT_EXPLODE                          = 21,
	WBP_BULLET_LAND_EXPLODE                            = 22,
	WBP_PROJECTILE_TAKE_DAMAGE                         = 23,
	WBP_BULLET_BOUND_DECEL                             = 24,
	WBP_BULLET_THROW_ROTATE                            = 25,
	WBP_BULLET_THROW_ANGLE                             = 26,
	WBP_BULLET_GRAVITY                                 = 27,
	WBP_BOMBING_WEAPON_ID                              = 28,
	WBP_FUSE_TIME                                      = 29,
	WBP_ACTIVE_TIME                                    = 30,
	WBP_2ND_BULLET_COUNT                               = 31,
	WBP_MOMENTUM                                       = 32,
	WBP_MOMENTUM_CHAR                                  = 33,
	WBP_GORE_DAMAGE_OUTER                              = 34,
	WBP_GORE_DAMAGE                                    = 35,
	WBP_DAMAGE_OUTER                                   = 36,
	WBP_DAMAGE                                         = 37,
	WBP_DAMAGE_WALLSHOT                                = 38,
	WBP_DAMAGE_EFFECTIVE_RANGE                         = 39,
	WBP_DAMAGE_OUTER_RANGE                             = 40,
	WBP_PARTS_DAMAGE_HEAD                              = 41,
	WBP_PARTS_DAMAGE_UPPERTORSO                        = 42,
	WBP_PARTS_DAMAGE_LOWERTORSO                        = 43,
	WBP_PARTS_DAMAGE_UPPERARM                          = 44,
	WBP_PARTS_DAMAGE_LOWERARM                          = 45,
	WBP_PARTS_DAMAGE_UPPERLEG                          = 46,
	WBP_PARTS_DAMAGE_LOWERLEG                          = 47,
	WBP_PARTS_DAMAGE_HEIL                              = 48,
	WBP_HIT_EFFECT_FRIENDLY                            = 49,
	WBP_HIT_GUN_KICK                                   = 50,
	WBP_HIT_STUN_TIME                                  = 51,
	WBP_HIT_FREEZE_TIME                                = 52,
	WBP_HIT_VIEW_FLASH_TIME                            = 53,
	WBP_HIT_EAXSOUND_TIME                              = 54,
	WBP_HIT_EAXSOUND_CLASS                             = 55,
	WBP_HIT_FIRE_TIME                                  = 56,
	WBP_RELOAD_TYPE                                    = 57,
	WBP_RECHAMBER                                      = 58,
	WBP_ANI_TIME_RECHAMER                              = 59,
	WBP_ANI_TIME_RELOAD                                = 60,
	WBP_ANI_TIME_RELOAD_EMPTY                          = 61,
	WBP_ANI_TIME_RELOAD_START                          = 62,
	WBP_ANI_TIME_RELOAD_END                            = 63,
	WBP_EXPLOSION_INNER_RADIUS                         = 64,
	WBP_EXPLOSION_OUTER_RADIUS                         = 65,
	WBP_GROUND_RUMBLE_RADIUS                           = 66,
	WBP_GROUND_RUMBLE_FORCE                            = 67,
	WBP_EXPLOSION_INNER_DAMAGE                         = 68,
	WBP_EXPLOSION_OUTER_DAMAGE                         = 69,
	WBP_START_AMMO                                     = 70,
	WBP_CLIP_SIZE                                      = 71,
	WBP_RELOAD_AMMO                                    = 72,
	WBP_MAX_AMMO                                       = 73,
	WBP_SPREAD_2ND_STARTNUM                            = 74,
	WBP_SPREAD_2ND_ADD                                 = 75,
	WBP_SPREAD_2ND_MAX                                 = 76,
	WBP_SPREAD_AIM_MOVE_ADD                            = 77,
	WBP_SPREAD_VISUAL_ADD                              = 78,
	WBP_SPREAD_SHOTGUN                                 = 79,
	WBP_SPREAD_JUMP                                    = 80,
	WBP_SPREAD_STAND_MIN                               = 81,
	WBP_SPREAD_STAND_MAX                               = 82,
	WBP_SPREAD_DUCKED_MIN                              = 83,
	WBP_SPREAD_DUCKED_MAX                              = 84,
	WBP_SPREAD_PRONE_MIN                               = 85,
	WBP_SPREAD_PRONE_MAX                               = 86,
	WBP_SPREAD_MOVE_ADD                                = 87,
	WBP_SPREAD_FIRE_ADD                                = 88,
	WBP_SPREAD_OUT_SPEED                               = 89,
	WBP_SPREAD_STAND_IN_RT                             = 90,
	WBP_SPREAD_DUCKED_IN_RT                            = 91,
	WBP_SPREAD_PRONE_IN_RT                             = 92,
	WBP_VIEW_KICK_HIP_X_MIN                            = 93,
	WBP_VIEW_KICK_HIP_X_MAX                            = 94,
	WBP_VIEW_KICK_HIP_Y_MIN                            = 95,
	WBP_VIEW_KICK_HIP_Y_MAX                            = 96,
	WBP_VIEW_KICK_HIP_ACCEL                            = 97,
	WBP_VIEW_KICK_HIP_DECEL                            = 98,
	WBP_VIEW_KICK_HIP_STAY_TIME                        = 99,
	WBP_VIEW_KICK_HIP_DECAY_SPEED                      = 100,
	WBP_VIEW_KICK_HIP_DECAY_TIME_FAST                  = 101,
	WBP_VIEW_KICK_ADS_X_MIN                            = 102,
	WBP_VIEW_KICK_ADS_X_MAX                            = 103,
	WBP_VIEW_KICK_ADS_Y_MIN                            = 104,
	WBP_VIEW_KICK_ADS_Y_MAX                            = 105,
	WBP_VIEW_KICK_ADS_ACCEL                            = 106,
	WBP_VIEW_KICK_ADS_DECEL                            = 107,
	WBP_VIEW_KICK_ADS_STAY_TIME                        = 108,
	WBP_VIEW_KICK_ADS_DECAY_SPEED                      = 109,
	WBP_VIEW_KICK_ADS_DECAY_TIME_FAST                  = 110,
	WBP_BREATH_STAND_GUN                               = 111,
	WBP_BREATH_STAND_GUN_SPEED                         = 112,
	WBP_BREATH_ADS_GUNNAIM                             = 113,
	WBP_BREATH_ADS_GUNNAIM_SPEED                       = 114,
	WBP_BREATH_ADS_DUCKED_GUNNAIM                      = 115,
	WBP_BREATH_ADS_DUCKED_GUNNAIM_SPEED                = 116,
	WBP_BREATH_ADS_PRONE_GUNNAIM                       = 117,
	WBP_BREATH_ADS_PRONE_GUNNAIM_SPEED                 = 118,
	WBP_BOB_SPRINT_GUN                                 = 119,
	WBP_BOB_SPRINT_GUN_Y                               = 120,
	WBP_BOB_SPRINT_VIEW                                = 121,
	WBP_BOB_SPRINT_VIEW_Y                              = 122,
	WBP_BOB_ADS_MOVE_GUNNAIM                           = 123,
	WBP_BOB_ADS_MOVE_GUNNAIM_Y                         = 124,
	WBP_BOB_ADS_MOVE_VIEW                              = 125,
	WBP_BOB_ADS_MOVE_VIEW_Y                            = 126,
	WBP_BOB_HIP_MOVE_GUN                               = 127,
	WBP_BOB_HIP_MOVE_GUN_Y                             = 128,
	WBP_BOB_HIP_MOVE_VIEW                              = 129,
	WBP_BOB_HIP_MOVE_VIEW_Y                            = 130,
	WBP_BOB_HIP_DUCKED_MOVE_GUN                        = 131,
	WBP_BOB_HIP_DUCKED_MOVE_GUN_Y                      = 132,
	WBP_BOB_HIP_DUCKED_MOVE_VIEW                       = 133,
	WBP_BOB_HIP_DUCKED_MOVE_VIEW_Y                     = 134,
	WBP_BOB_HIP_PRONE_MOVE_VIEW                        = 135,
	WBP_BOB_HIP_PRONE_MOVE_VIEW_Y                      = 136,
	WBP_WP_SPRINT_STA_RATE                             = 137,
	WBP_WP_SPRINT_STA_RECOVERY                         = 138,
	WBP_WP_GUN_MOVE_SPEED                              = 139,
	WBP_WP_GUN_MOVE_TIME                               = 140,
	WBP_WP_GUN_MOVE_DELAY                              = 141,
	WBP_WP_SPRINT_MOVE                                 = 142,
	WBP_WP_STAND_MOVE                                  = 143,
	WBP_WP_CROUCH_MOVE                                 = 144,
	WBP_WP_PRONE_MOVE                                  = 145,
	WBP_WP_AIM_MOVE                                    = 146,
	WBP_WP_CROUCH_AIM_MOVE                             = 147,
	WBP_ANI_RATE_DROP                                  = 148,
	WBP_ANI_RATE_DROP_QUICK                            = 149,
	WBP_DROP_QUICK                                     = 150,
	WBP_ANI_RATE_RAISE                                 = 151,
	WBP_ANI_RATE_SPRINT_RAISE                          = 152,
	WBP_ANI_RATE_ADS_ON                                = 153,
	WBP_ANI_RATE_ADS_OFF                               = 154,
	WBP_SWAY_GUN_HIP_X_MAX_ANGLE                       = 155,
	WBP_SWAY_GUN_HIP_X_MOVE_ANGLE                      = 156,
	WBP_SWAY_GUN_HIP_X_MOVE                            = 157,
	WBP_SWAY_GUN_HIP_Y_MAX_ANGLE                       = 158,
	WBP_SWAY_GUN_HIP_Y_MOVE_ANGLE                      = 159,
	WBP_SWAY_GUN_HIP_Y_MOVE                            = 160,
	WBP_SWAY_GUN_ADS_X_MAX_ANGLE                       = 161,
	WBP_SWAY_GUN_ADS_X_MOVE_ANGLE                      = 162,
	WBP_SWAY_GUN_ADS_X_MOVE                            = 163,
	WBP_SWAY_GUN_ADS_Y_MAX_ANGLE                       = 164,
	WBP_SWAY_GUN_ADS_Y_MOVE_ANGLE                      = 165,
	WBP_SWAY_GUN_ADS_Y_MOVE                            = 166,
	WBP_VIEW_ANGLE_PITCH_MAX                           = 167,
	WBP_CROSSHAIR_TYPE                                 = 168,
	WBP_CROSSHAIR_IMAGE                                = 169,
	WBP_GUN_POS_HIP_MOVE_FRONT_Y                       = 170,
	WBP_GUN_POS_HIP_MOVE_FRONT_X                       = 171,
	WBP_UI_DAMAGE                                      = 172,
	WBP_UI_SPREAD                                      = 173,
	WBP_UI_VIEW_KICK                                   = 174,
	WBP_UI_RATE_OF_FIRE                                = 175,
	WBP_UI_MOVE                                        = 176,
	WBP_UI_RANGE                                       = 177,
	WBP_NPC_SPREAD_RATE                                = 178,
	WBP_NPC_RATE_OF_FIRE                               = 179,
	WBP_NPC_FIRE                                       = 180
};

// Enum Engine.wWeaponBaseParams.EWEAPON_EX_BASE_PARAMS_TYPE
enum EWEAPON_EX_BASE_PARAMS_TYPE
{
	WEXBP_MELEE_DELAY                                  = 0,
	WEXBP_MELEE_DAMAGE                                 = 1,
	WEXBP_MELEE_RANGE                                  = 2,
	WEXBP_MELEE_EXTENT                                 = 3,
	WEXBP_MELEE_DAMAGE_HEAD                            = 4,
	WEXBP_MELEE_DAMAGE_UPPERTORSO                      = 5,
	WEXBP_MELEE_DAMAGE_LOWERTORSO                      = 6,
	WEXBP_MELEE_DAMAGE_UPPERARM                        = 7,
	WEXBP_MELEE_DAMAGE_LOWERARM                        = 8,
	WEXBP_MELEE_DAMAGE_UPPERLEG                        = 9,
	WEXBP_MELEE_DAMAGE_LOWERLEG                        = 10,
	WEXBP_FIRING_SWAY_HIP_X_MAX_ANGLE                  = 11,
	WEXBP_FIRING_SWAY_HIP_X_MOVE_ANGLE                 = 12,
	WEXBP_FIRING_SWAY_HIP_X_MOVE                       = 13,
	WEXBP_FIRING_SWAY_HIP_Y_MAX_ANGLE                  = 14,
	WEXBP_FIRING_SWAY_HIP_Y_MOVE_ANGLE                 = 15,
	WEXBP_FIRING_SWAY_HIP_Y_MOVE                       = 16,
	WEXBP_FIRING_SWAY_ADS_X_MAX_ANGLE                  = 17,
	WEXBP_FIRING_SWAY_ADS_X_MOVE_ANGLE                 = 18,
	WEXBP_FIRING_SWAY_ADS_X_MOVE                       = 19,
	WEXBP_FIRING_SWAY_ADS_Y_MAX_ANGLE                  = 20,
	WEXBP_FIRING_SWAY_ADS_Y_MOVE_ANGLE                 = 21,
	WEXBP_FIRING_SWAY_ADS_Y_MOVE                       = 22
};

// Enum Engine.BTCustomDrawHK.TextArrayDrawType
enum TextArrayDrawType
{
	E_TADT_ORDER_CENTER                                = 0,
	E_TADT_ORDER_TOP                                   = 1,
	E_TADT_ORDER_BOTTOM                                = 2
};

// Enum Engine.LocalMessage.EStackMode
enum EStackMode
{
	SM_None01                                          = 0,
	SM_Up01                                            = 1,
	SM_Down01                                          = 2
};

// Enum Engine.wWeaponFire.ESpreadStyle
enum ESpreadStyle
{
	SStyle_None                                        = 0,
	SStyle_Random                                      = 1,
	SStyle_Line                                        = 2,
	SStyle_Ring                                        = 3
};

// Enum Engine.GameReplicationInfo.EROUND_STATE
enum EROUND_STATE
{
	EROUND_NONE                                        = 0,
	EROUND_END                                         = 1,
	EROUND_PLAYING                                     = 2,
	EGAME_END                                          = 3,
	EROUND_COUNT                                       = 4
};

// Enum Engine.wGun.EWeaponReloadState
enum EWeaponReloadState
{
	WR_None                                            = 0,
	WR_Reload                                          = 1,
	WR_ReloadPending                                   = 2,
	WR_ReadyToFire                                     = 3
};

// Enum Engine.wGun.EWeaponActionType
enum EWeaponActionType
{
	WA_None                                            = 0,
	WA_Single                                          = 1,
	WA_Auto                                            = 2
};

// Enum Engine.wGun.EWeaponAimState
enum EWeaponAimState
{
	WAS_None                                           = 0,
	WAS_Up                                             = 1,
	WAS_Idle                                           = 2,
	WAS_Down                                           = 3
};

// Enum Engine.Brush.ECsgOper
enum ECsgOper
{
	CSG_Active                                         = 0,
	CSG_Add                                            = 1,
	CSG_Subtract                                       = 2,
	CSG_Intersect                                      = 3,
	CSG_Deintersect                                    = 4
};

// Enum Engine.Mover.EBumpType
enum EBumpType
{
	BT_PlayerBump                                      = 0,
	BT_PawnBump                                        = 1,
	BT_AnyBump                                         = 2
};

// Enum Engine.Mover.EMoverGlideType
enum EMoverGlideType
{
	MV_MoveByTime                                      = 0,
	MV_GlideByTime                                     = 1
};

// Enum Engine.Mover.EMoverEncroachType
enum EMoverEncroachType
{
	ME_StopWhenEncroach                                = 0,
	ME_ReturnWhenEncroach                              = 1,
	ME_CrushWhenEncroach                               = 2,
	ME_IgnoreWhenEncroach                              = 3
};

// Enum Engine.Interactions.EInputKey
enum EInputKey
{
	IK_None                                            = 0,
	IK_LeftMouse                                       = 1,
	IK_RightMouse                                      = 2,
	IK_Cancel                                          = 3,
	IK_MiddleMouse                                     = 4,
	IK_Unknown05                                       = 5,
	IK_Unknown06                                       = 6,
	IK_Unknown07                                       = 7,
	IK_Backspace                                       = 8,
	IK_Tab                                             = 9,
	IK_Unknown0A                                       = 10,
	IK_Unknown0B                                       = 11,
	IK_Unknown0C                                       = 12,
	IK_Enter                                           = 13,
	IK_Unknown0E                                       = 14,
	IK_Unknown0F                                       = 15,
	IK_Shift                                           = 16,
	IK_Ctrl                                            = 17,
	IK_Alt                                             = 18,
	IK_Pause                                           = 19,
	IK_CapsLock                                        = 20,
	IK_Unknown15                                       = 21,
	IK_Unknown16                                       = 22,
	IK_Unknown17                                       = 23,
	IK_Unknown18                                       = 24,
	IK_Unknown19                                       = 25,
	IK_Uwwwwwnknown1A                                  = 26,
	IK_Escape                                          = 27,
	IK_Unknown1C                                       = 28,
	IK_Unknown1D                                       = 29,
	IK_Unknown1E                                       = 30,
	IK_Unknown1F                                       = 31,
	IK_Space                                           = 32,
	IK_PageUp                                          = 33,
	IK_PageDown                                        = 34,
	IK_End                                             = 35,
	IK_Home                                            = 36,
	IK_Left                                            = 37,
	IK_Up                                              = 38,
	IK_Right                                           = 39,
	IK_Down                                            = 40,
	IK_Select                                          = 41,
	IK_Print                                           = 42,
	IK_Execute                                         = 43,
	IK_PrintScrn                                       = 44,
	IK_Insert                                          = 45,
	IK_Delete                                          = 46,
	IK_Help                                            = 47,
	IK_0                                               = 48,
	IK_1                                               = 49,
	IK_2                                               = 50,
	IK_3                                               = 51,
	IK_4                                               = 52,
	IK_5                                               = 53,
	IK_6                                               = 54,
	IK_7                                               = 55,
	IK_8                                               = 56,
	IK_9                                               = 57,
	IK_Unknown3A                                       = 58,
	IK_Unknown3B                                       = 59,
	IK_Unknown3C                                       = 60,
	IK_Unknown3D                                       = 61,
	IK_Unknown3E                                       = 62,
	IK_Unknown3F                                       = 63,
	IK_Unknown40                                       = 64,
	IK_A                                               = 65,
	IK_B                                               = 66,
	IK_C                                               = 67,
	IK_D                                               = 68,
	IK_E                                               = 69,
	IK_F                                               = 70,
	IK_G                                               = 71,
	IK_H                                               = 72,
	IK_I                                               = 73,
	IK_J                                               = 74,
	IK_K                                               = 75,
	IK_L                                               = 76,
	IK_M                                               = 77,
	IK_N                                               = 78,
	IK_O                                               = 79,
	IK_P                                               = 80,
	IK_Q                                               = 81,
	IK_R                                               = 82,
	IK_S                                               = 83,
	IK_T                                               = 84,
	IK_U                                               = 85,
	IK_V                                               = 86,
	IK_W                                               = 87,
	IK_X                                               = 88,
	IK_Y                                               = 89,
	IK_Z                                               = 90,
	IK_Unknown5B                                       = 91,
	IK_Unknown5C                                       = 92,
	IK_Unknown5D                                       = 93,
	IK_Unknown5E                                       = 94,
	IK_Unknown5F                                       = 95,
	IK_NumPad0                                         = 96,
	IK_NumPad1                                         = 97,
	IK_NumPad2                                         = 98,
	IK_NumPad3                                         = 99,
	IK_NumPad4                                         = 100,
	IK_NumPad5                                         = 101,
	IK_NumPad6                                         = 102,
	IK_NumPad7                                         = 103,
	IK_NumPad8                                         = 104,
	IK_NumPad9                                         = 105,
	IK_GreyStar                                        = 106,
	IK_GreyPlus                                        = 107,
	IK_Separator                                       = 108,
	IK_GreyMinus                                       = 109,
	IK_NumPadPeriod                                    = 110,
	IK_GreySlash                                       = 111,
	IK_F1                                              = 112,
	IK_F2                                              = 113,
	IK_F3                                              = 114,
	IK_F4                                              = 115,
	IK_F5                                              = 116,
	IK_F6                                              = 117,
	IK_F7                                              = 118,
	IK_F8                                              = 119,
	IK_F9                                              = 120,
	IK_F10                                             = 121,
	IK_F11                                             = 122,
	IK_F12                                             = 123,
	IK_F13                                             = 124,
	IK_F14                                             = 125,
	IK_F15                                             = 126,
	IK_F16                                             = 127,
	IK_F17                                             = 128,
	IK_F18                                             = 129,
	IK_F19                                             = 130,
	IK_F20                                             = 131,
	IK_F21                                             = 132,
	IK_F22                                             = 133,
	IK_F23                                             = 134,
	IK_F24                                             = 135,
	IK_Unknown88                                       = 136,
	IK_Unknown89                                       = 137,
	IK_Unknown8A                                       = 138,
	IK_Unknown8B                                       = 139,
	IK_Unknown8C                                       = 140,
	IK_Unknown8D                                       = 141,
	IK_Unknown8E                                       = 142,
	IK_Unknown8F                                       = 143,
	IK_NumLock                                         = 144,
	IK_ScrollLock                                      = 145,
	IK_Unknown92                                       = 146,
	IK_Unknown93                                       = 147,
	IK_Unknown94                                       = 148,
	IK_Unknown95                                       = 149,
	IK_Unknown96                                       = 150,
	IK_Unknown97                                       = 151,
	IK_Unknown98                                       = 152,
	IK_Unknown99                                       = 153,
	IK_Unknown9A                                       = 154,
	IK_Unknown9B                                       = 155,
	IK_Unknown9C                                       = 156,
	IK_Unknown9D                                       = 157,
	IK_Unknown9E                                       = 158,
	IK_Unknown9F                                       = 159,
	IK_LShift                                          = 160,
	IK_RShift                                          = 161,
	IK_LControl                                        = 162,
	IK_RControl                                        = 163,
	IK_UnknownA4                                       = 164,
	IK_UnknownA5                                       = 165,
	IK_UnknownA6                                       = 166,
	IK_UnknownA7                                       = 167,
	IK_UnknownA8                                       = 168,
	IK_UnknownA9                                       = 169,
	IK_UnknownAA                                       = 170,
	IK_UnknownAB                                       = 171,
	IK_UnknownAC                                       = 172,
	IK_UnknownAD                                       = 173,
	IK_UnknownAE                                       = 174,
	IK_UnknownAF                                       = 175,
	IK_UnknownB0                                       = 176,
	IK_UnknownB1                                       = 177,
	IK_UnknownB2                                       = 178,
	IK_UnknownB3                                       = 179,
	IK_UnknownB4                                       = 180,
	IK_UnknownB5                                       = 181,
	IK_UnknownB6                                       = 182,
	IK_UnknownB7                                       = 183,
	IK_UnknownB8                                       = 184,
	IK_Unicode                                         = 185,
	IK_Semicolon                                       = 186,
	IK_Equals                                          = 187,
	IK_Comma                                           = 188,
	IK_Minus                                           = 189,
	IK_Period                                          = 190,
	IK_Slash                                           = 191,
	IK_Tilde                                           = 192,
	IK_Mouse4                                          = 193,
	IK_Mouse5                                          = 194,
	IK_Mouse6                                          = 195,
	IK_Mouse7                                          = 196,
	IK_Mouse8                                          = 197,
	IK_UnknownC6                                       = 198,
	IK_UnknownC7                                       = 199,
	IK_Joy1                                            = 200,
	IK_Joy2                                            = 201,
	IK_Joy3                                            = 202,
	IK_Joy4                                            = 203,
	IK_Joy5                                            = 204,
	IK_Joy6                                            = 205,
	IK_Joy7                                            = 206,
	IK_Joy8                                            = 207,
	IK_Joy9                                            = 208,
	IK_Joy10                                           = 209,
	IK_Joy11                                           = 210,
	IK_Joy12                                           = 211,
	IK_Joy13                                           = 212,
	IK_Joy14                                           = 213,
	IK_Joy15                                           = 214,
	IK_Joy16                                           = 215,
	IK_UnknownD8                                       = 216,
	IK_UnknownD9                                       = 217,
	IK_UnknownDA                                       = 218,
	IK_LeftBracket                                     = 219,
	IK_Backslash                                       = 220,
	IK_RightBracket                                    = 221,
	IK_SingleQuote                                     = 222,
	IK_UnknownDF                                       = 223,
	IK_UnknownE0                                       = 224,
	IK_UnknownE1                                       = 225,
	IK_UnknownE2                                       = 226,
	IK_UnknownE3                                       = 227,
	IK_MouseX                                          = 228,
	IK_MouseY                                          = 229,
	IK_MouseZ                                          = 230,
	IK_MouseW                                          = 231,
	IK_JoyU                                            = 232,
	IK_JoyV                                            = 233,
	IK_JoySlider1                                      = 234,
	IK_JoySlider2                                      = 235,
	IK_MouseWheelUp                                    = 236,
	IK_MouseWheelDown                                  = 237,
	IK_Unknown10E                                      = 238,
	UK_Unknown10F                                      = 239,
	IK_JoyX                                            = 240,
	IK_JoyY                                            = 241,
	IK_JoyZ                                            = 242,
	IK_JoyR                                            = 243,
	IK_UnknownF4                                       = 244,
	IK_UnknownF5                                       = 245,
	IK_Attn                                            = 246,
	IK_CrSel                                           = 247,
	IK_ExSel                                           = 248,
	IK_ErEof                                           = 249,
	IK_Play                                            = 250,
	IK_Zoom                                            = 251,
	IK_NoName                                          = 252,
	IK_PA1                                             = 253,
	IK_OEMClear                                        = 254
};

// Enum Engine.Interactions.EInputAction
enum EInputAction
{
	IST_None                                           = 0,
	IST_Press                                          = 1,
	IST_Hold                                           = 2,
	IST_Release                                        = 3,
	IST_Axis                                           = 4,
	IST_HotKey                                         = 5
};

// Enum Engine.wEmitter.EAttenFunc
enum EAttenFunc
{
	ATF_LerpInOut                                      = 0,
	ATF_ExpInOut                                       = 1,
	ATF_SmoothStep                                     = 2,
	ATF_Pulse                                          = 3,
	ATF_Random                                         = 4,
	ATF_None                                           = 5
};

// Enum Engine.wEmitter.ExSpawningTypes
enum ExSpawningTypes
{
	ST_Sphere                                          = 0,
	ST_Line                                            = 1,
	ST_Disc                                            = 2,
	ST_Cylinder                                        = 3,
	ST_AimedSphere                                     = 4,
	ST_StaticMesh                                      = 5,
	ST_Explode                                         = 6,
	ST_ExplodeRing                                     = 7,
	ST_OwnerSkeleton                                   = 8,
	ST_Test                                            = 9
};

// Enum Engine.wEmitter.ExParticleTypes
enum ExParticleTypes
{
	PT_Sprite                                          = 0,
	PT_Stream                                          = 1,
	PT_Line                                            = 2,
	PT_Disc                                            = 3,
	PT_Mesh                                            = 4,
	PT_Branch                                          = 5,
	PT_Beam                                            = 6
};

// Enum Engine.PlayInfo.EPlayInfoType
enum EPlayInfoType
{
	PIT_Check                                          = 0,
	PIT_Select                                         = 1,
	PIT_Text                                           = 2,
	PIT_Custom                                         = 3
};

// Enum Engine.GameProfile.EPlayerPos
enum EPlayerPos
{
	POS_Auto                                           = 0,
	POS_Defense                                        = 1,
	POS_Offense                                        = 2,
	POS_Roam                                           = 3,
	POS_Supporting                                     = 4
};

// Enum Engine.ParticleEmitter.EParticleCoordinateSystem
enum EParticleCoordinateSystem
{
	PTCS_Independent                                   = 0,
	PTCS_Relative                                      = 1,
	PTCS_Absolute                                      = 2
};

// Enum Engine.ParticleEmitter.EParticleEffectAxis
enum EParticleEffectAxis
{
	PTEA_NegativeX                                     = 0,
	PTEA_PositiveZ                                     = 1
};

// Enum Engine.ParticleEmitter.EParticleStartLocationShape
enum EParticleStartLocationShape
{
	PTLS_Box                                           = 0,
	PTLS_Sphere                                        = 1,
	PTLS_Polar                                         = 2,
	PTLS_All                                           = 3
};

// Enum Engine.ParticleEmitter.EParticleMeshSpawning
enum EParticleMeshSpawning
{
	PTMS_None                                          = 0,
	PTMS_Linear                                        = 1,
	PTMS_Random                                        = 2
};

// Enum Engine.ParticleEmitter.EParticleRotationSource
enum EParticleRotationSource
{
	PTRS_None                                          = 0,
	PTRS_Actor                                         = 1,
	PTRS_Offset                                        = 2,
	PTRS_Normal                                        = 3
};

// Enum Engine.ParticleEmitter.ESkelLocationUpdate
enum ESkelLocationUpdate
{
	PTSU_None                                          = 0,
	PTSU_SpawnOffset                                   = 1,
	PTSU_Location                                      = 2
};

// Enum Engine.ParticleEmitter.EParticleCollisionSound
enum EParticleCollisionSound
{
	PTSC_None                                          = 0,
	PTSC_LinearGlobal                                  = 1,
	PTSC_LinearLocal                                   = 2,
	PTSC_Random                                        = 3
};

// Enum Engine.ParticleEmitter.EParticleDrawStyle
enum EParticleDrawStyle
{
	PTDS_Regular                                       = 0,
	PTDS_AlphaBlend                                    = 1,
	PTDS_Modulated                                     = 2,
	PTDS_Translucent                                   = 3,
	PTDS_AlphaModulate_MightNotFogCorrectly            = 4,
	PTDS_Darken                                        = 5,
	PTDS_Brighten                                      = 6
};

// Enum Engine.ParticleEmitter.EParticleVelocityDirection
enum EParticleVelocityDirection
{
	PTVD_None                                          = 0,
	PTVD_StartPositionAndOwner                         = 1,
	PTVD_OwnerAndStartPosition                         = 2,
	PTVD_AddRadial                                     = 3
};

// Enum Engine.ParticleEmitter.EBlendMode
enum EBlendMode
{
	BM_MODULATE                                        = 0,
	BM_MODULATE2X                                      = 1,
	BM_MODULATE4X                                      = 2,
	BM_ADD                                             = 3,
	BM_ADDSIGNED                                       = 4,
	BM_ADDSIGNED2X                                     = 5,
	BM_SUBTRACT                                        = 6,
	BM_ADDSMOOTH                                       = 7,
	BM_BLENDDIFFUSEALPHA                               = 8,
	BM_BLENDTEXTUREALPHA                               = 9,
	BM_BLENDFACTORALPHA                                = 10,
	BM_BLENDTEXTUREALPHAPM                             = 11,
	BM_BLENDCURRENTALPHA                               = 12,
	BM_PREMODULATE                                     = 13,
	BM_MODULATEALPHA_ADDCOLOR                          = 14,
	BM_MODULATEINVALPHA_ADDCOLOR                       = 15,
	BM_MODULATEINVCOLOR_ADDALPHA                       = 16,
	BM_HACK                                            = 17
};

// Enum Engine.TexModifier.ETexCoordCount
enum ETexCoordCount
{
	TCN_2DCoords                                       = 0,
	TCN_3DCoords                                       = 1,
	TCN_4DCoords                                       = 2
};

// Enum Engine.TexModifier.ETexCoordSrc
enum ETexCoordSrc
{
	TCS_Stream0                                        = 0,
	TCS_Stream1                                        = 1,
	TCS_Stream2                                        = 2,
	TCS_Stream3                                        = 3,
	TCS_Stream4                                        = 4,
	TCS_Stream5                                        = 5,
	TCS_Stream6                                        = 6,
	TCS_Stream7                                        = 7,
	TCS_WorldCoords                                    = 8,
	TCS_CameraCoords                                   = 9,
	TCS_WorldEnvMapCoords                              = 10,
	TCS_CameraEnvMapCoords                             = 11,
	TCS_ProjectorCoords                                = 12,
	TCS_NoChange                                       = 13
};

// Enum Engine.Projector.EProjectorBlending
enum EProjectorBlending
{
	PB_None                                            = 0,
	PB_Modulate                                        = 1,
	PB_AlphaBlend                                      = 2,
	PB_Add                                             = 3
};

// Enum Engine.wMeleeFire.EExpressType
enum EExpressType
{
	ET_Anim                                            = 0,
	ET_Mesh                                            = 1
};

// Enum Engine.Trigger.ETriggerType
enum ETriggerType
{
	TT_PlayerProximity                                 = 0,
	TT_PawnProximity                                   = 1,
	TT_ClassProximity                                  = 2,
	TT_AnyProximity                                    = 3,
	TT_Shoot                                           = 4,
	TT_HumanPlayerProximity                            = 5,
	TT_LivePlayerProximity                             = 6
};

// Enum Engine.AntiPortalActor.EnumAntiPortalMode
enum EnumAntiPortalMode
{
	APM_Global                                         = 0,
	APM_TouchingZone                                   = 1,
	APM_Link                                           = 2
};

// Enum Engine.TerrainInfo.ESortOrder
enum ESortOrder
{
	SORT_NoSort                                        = 0,
	SORT_BackToFront                                   = 1,
	SORT_FrontToBack                                   = 2
};

// Enum Engine.TerrainInfo.ETexMapAxis
enum ETexMapAxis
{
	TEXMAPAXIS_XY                                      = 0,
	TEXMAPAXIS_XZ                                      = 1,
	TEXMAPAXIS_YZ                                      = 2
};

// Enum Engine.SceneManager.EAffect
enum EAffect
{
	AFFECT_ViewportCamera                              = 0,
	AFFECT_Actor                                       = 1
};

// Enum Engine.SceneSubtitles.ESST_Mode
enum ESST_Mode
{
	ESST_SkipToNextLine                                = 0
};

// Enum Engine.TexRotator.ETexRotationType
enum ETexRotationType
{
	TR_FixedRotation                                   = 0,
	TR_ConstantlyRotating                              = 1,
	TR_OscillatingRotation                             = 2
};

// Enum Engine.MatSubAction.ESAStatus
enum ESAStatus
{
	SASTATUS_Waiting                                   = 0,
	SASTATUS_Running                                   = 1,
	SASTATUS_Ending                                    = 2,
	SASTATUS_Expired                                   = 3
};

// Enum Engine.FluidSurfaceInfo.EFluidGridType
enum EFluidGridType
{
	FGT_Square                                         = 0,
	FGT_Hexagonal                                      = 1
};

// Enum Engine.wFPWeaponAttachment.EFPAimState
enum EFPAimState
{
	FPAS_None                                          = 0,
	FPAS_Up                                            = 1,
	FPAS_Idle                                          = 2,
	FPAS_Down                                          = 3
};

// Enum Engine.StreamBase.EFileType
enum EFileType
{
	FILE_None                                          = 0,
	FILE_Directory                                     = 1,
	FILE_Log                                           = 2,
	FILE_Ini                                           = 3,
	FILE_Stream                                        = 4,
	FILE_Playlist                                      = 5,
	FILE_Music                                         = 6,
	FILE_Map                                           = 7,
	FILE_Texture                                       = 8,
	FILE_Animation                                     = 9,
	FILE_Static                                        = 10,
	FILE_XML                                           = 11,
	FILE_HTML                                          = 12,
	FILE_Sound                                         = 13,
	FILE_Demo                                          = 14,
	FILE_DivX                                          = 15
};

// Enum Engine.StreamBase.EStreamPlaylistType
enum EStreamPlaylistType
{
	SPT_None                                           = 0,
	SPT_M3U                                            = 1,
	SPT_PLS                                            = 2,
	SPT_B4S                                            = 3
};

// Enum Engine.TrailEmitter.ETrailShadeType
enum ETrailShadeType
{
	PTTST_None                                         = 0,
	PTTST_RandomStatic                                 = 1,
	PTTST_RandomDynamic                                = 2,
	PTTST_Linear                                       = 3,
	PTTST_PointLife                                    = 4
};

// Enum Engine.TrailEmitter.ETrailLocation
enum ETrailLocation
{
	PTTL_AttachedToParticle                            = 0,
	PTTL_FollowEmitter                                 = 1
};

// Enum Engine.SVehicleWheel.EVehicleSteerType
enum EVehicleSteerType
{
	VST_Fixed                                          = 0,
	VST_Steered                                        = 1,
	VST_Inverted                                       = 2
};

// Enum Engine.SpriteEmitter.EParticleDirectionUsage
enum EParticleDirectionUsage
{
	PTDU_None                                          = 0,
	PTDU_Up                                            = 1,
	PTDU_Right                                         = 2,
	PTDU_Forward                                       = 3,
	PTDU_Normal                                        = 4,
	PTDU_UpAndNormal                                   = 5,
	PTDU_RightAndNormal                                = 6,
	PTDU_Scale                                         = 7
};

// Enum Engine.ActionMoveCamera.EPathStyle
enum EPathStyle
{
	PATHSTYLE_Linear                                   = 0,
	PATHSTYLE_Bezier                                   = 1
};

// Enum Engine.MeshObject.EMeshSectionMethod
enum EMeshSectionMethod
{
	MSM_SmoothOnly                                     = 0,
	MSM_RigidOnly                                      = 1,
	MSM_Mixed                                          = 2,
	MSM_SinglePiece                                    = 3,
	MSM_ForcedRigid                                    = 4
};

// Enum Engine.MeshObject.EImpLightMode
enum EImpLightMode
{
	ILM_Unlit                                          = 0,
	ILM_PseudoShaded                                   = 1,
	ILM_Uniform                                        = 2
};

// Enum Engine.MeshObject.EImpDrawMode
enum EImpDrawMode
{
	IDM_Normal                                         = 0,
	IDM_Fading                                         = 1
};

// Enum Engine.MeshObject.EImpSpaceMode
enum EImpSpaceMode
{
	ISM_Sprite                                         = 0,
	ISM_Fixed                                          = 1,
	ISM_PivotVertical                                  = 2,
	ISM_PivotHorizontal                                = 3
};

// Enum Engine.HardwareShader.SConstant
enum SConstant
{
	EVC_Unused                                         = 0,
	EVC_MaterialDefined                                = 1,
	EVC_ViewProjMatrix                                 = 2,
	EVC_WorldViewProjMatrix                            = 3,
	EVC_WorldMatrix                                    = 4,
	EVC_InvViewMatrix                                  = 5,
	EVC_ViewMatrix                                     = 6,
	EVC_InvWorldMatrix                                 = 7,
	EVC_Time                                           = 8,
	EVC_CosTime                                        = 9,
	EVC_SinTime                                        = 10,
	EVC_TanTime                                        = 11,
	EVC_Eye                                            = 12,
	EVC_XYCircle                                       = 13,
	EVC_NearestLightPos1                               = 14,
	EVC_InvLightRadius1                                = 15,
	EVC_NearestLightPos2                               = 16,
	EVC_InvLightRadius2                                = 17,
	EVC_LightColor1                                    = 18,
	EVC_LightColor2                                    = 19,
	EVC_AmbientLightColor                              = 20,
	EVC_Max                                            = 21
};

// Enum Engine.MaterialSequence.EMaterialSequenceAction
enum EMaterialSequenceAction
{
	MSA_ShowMaterial                                   = 0,
	MSA_FadeToMaterial                                 = 1
};

// Enum Engine.MaterialSequence.EMaterialSequenceTriggerActon
enum EMaterialSequenceTriggerActon
{
	MSTA_Ignore                                        = 0,
	MSTA_Reset                                         = 1,
	MSTA_Pause                                         = 2,
	MSTA_Stop                                          = 3
};

// Enum Engine.FinalBlend.EFrameBufferBlending
enum EFrameBufferBlending
{
	FB_Overwrite                                       = 0,
	FB_Modulate                                        = 1,
	FB_AlphaBlend                                      = 2,
	FB_AlphaModulate_MightNotFogCorrectly              = 3,
	FB_Translucent                                     = 4,
	FB_Darken                                          = 5,
	FB_Brighten                                        = 6,
	FB_Invisible                                       = 7
};

// Enum Engine.TexEnvMap.ETexEnvMapType
enum ETexEnvMapType
{
	EM_WorldSpace                                      = 0,
	EM_CameraSpace                                     = 1
};

// Enum Engine.TexOscillator.ETexOscillationType
enum ETexOscillationType
{
	OT_Pan                                             = 0,
	OT_Stretch                                         = 1,
	OT_StretchRepeat                                   = 2,
	OT_Jitter                                          = 3
};

// Enum Engine.TexOscillatorTriggered.ERetriggerAction
enum ERetriggerAction
{
	RTA_Reverse                                        = 0,
	RTA_Reset                                          = 1,
	RTA_Ignore                                         = 2,
	RTA_Retrigger                                      = 3
};

// Enum Engine.FadeColor.EColorFadeType
enum EColorFadeType
{
	FC_Linear                                          = 0,
	FC_Sinusoidal                                      = 1,
	FC_Zigzag                                          = 2
};

// Enum Engine.Combiner.EColorOperation
enum EColorOperation
{
	CO_Use_Color_From_Material1                        = 0,
	CO_Use_Color_From_Material2                        = 1,
	CO_Multiply                                        = 2,
	CO_Add                                             = 3,
	CO_Subtract                                        = 4,
	CO_AlphaBlend_With_Mask                            = 5,
	CO_Add_With_Mask_Modulation                        = 6,
	CO_Use_Color_From_Mask                             = 7
};

// Enum Engine.Combiner.EAlphaOperation
enum EAlphaOperation
{
	AO_Use_Mask                                        = 0,
	AO_Multiply                                        = 1,
	AO_Add                                             = 2,
	AO_Use_Alpha_From_Material1                        = 3,
	AO_Use_Alpha_From_Material2                        = 4
};

// Enum Engine.BeamEmitter.EBeamEndPointType
enum EBeamEndPointType
{
	PTEP_Velocity                                      = 0,
	PTEP_Distance                                      = 1,
	PTEP_Offset                                        = 2,
	PTEP_Actor                                         = 3,
	PTEP_TraceOffset                                   = 4,
	PTEP_OffsetAsAbsolute                              = 5,
	PTEP_DynamicDistance                               = 6
};

// Enum Engine.KHinge.EHingeType
enum EHingeType
{
	HT_Normal                                          = 0,
	HT_Springy                                         = 1,
	HT_Motor                                           = 2,
	HT_Controlled                                      = 3
};

// Enum Engine.wWeatherEffect.EWeatherType
enum EWeatherType
{
	WT_Rain                                            = 0,
	WT_Snow                                            = 1,
	WT_Dust                                            = 2
};

// Enum Engine.wProcMesh.EProcMeshType
enum EProcMeshType
{
	MT_Water                                           = 0,
	MT_Deform                                          = 1
};

// Enum Engine.Effect_ShadowController.CrispnessEnum
enum CrispnessEnum
{
	Low01                                              = 0,
	Medium                                             = 1,
	High01                                             = 2,
	Maximum                                            = 3
};

// Enum Engine.PlayerStart_DOM.EApplyFlag
enum EApplyFlag
{
	A_FLAG                                             = 0,
	B_FLAG                                             = 1,
	C_FLAG                                             = 2,
	Neutral                                            = 3
};


/*
# ======================================================================================== #
# > Classes
# ======================================================================================== #
*/

struct DLL_IMPORT FCanvasUtil
{
public:
    FCanvasUtil(struct FCanvasUtil const &);
    FCanvasUtil(struct FRenderTarget *,struct FRenderInterface *);
    ~FCanvasUtil(void);
    struct FCanvasUtil & operator=(struct FCanvasUtil const &);
    void BeginPrimitive(enum EPrimitiveType,class UMaterial *);
    void DrawLine(float,float,float,float,struct FColor);
    void DrawPoint(float,float,float,float,float,struct FColor);
    int DrawString(int,int,unsigned short const *,class UFont *,struct FColor,int);
    void DrawTile(float,float,float,float,float,float,float,float,float,class UMaterial *,struct FColor);
    void DrawTile(struct FVector,struct FVector,struct FVector,struct FVector,float,float,float,float,class UMaterial *,struct FColor);
    void Flush(void);
    virtual unsigned __int64 GetCacheId(void);
    virtual int GetComponents(struct FVertexComponent *);
    virtual void GetRawStreamData(void * *,int);
    virtual int GetRevision(void);
    virtual int GetSize(void);
    virtual void GetStreamData(void *);
    virtual int GetStride(void);
    void getTextWidthSize(unsigned short const *,int,long &,long &);
    void getTextWidthSizeLH(unsigned short const *,int,long &,long &);
    void getTextWidthSizeOLD(unsigned short const *,int,long &,long &);
    void storeDrawText(int,int,int,int,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,unsigned char,float,float,float,float,int,unsigned short const *,float,float,bool);
};

// Class Engine.wWeaponBaseParams
class DLL_IMPORT UwWeaponBaseParams : public UObject
{
public:
	unsigned char                                      eType;                                            		// 0x002C ( 0x0001 ) [ CPF_Edit | CPF_EditConst ]
	struct FString                                     strName;                                          		// 0x0030 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	int                                                iWeaponID;                                        		// 0x003C ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                iInventoryGroup;                                  		// 0x0040 ( 0x0004 ) [ CPF_Edit ]
	int                                                iPriority;                                        		// 0x0044 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     szClass_Resource;                                 		// 0x0048 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	int                                                iFireMode;                                        		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bAimAvailable:1;                                  		// 0x0058 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              fRateOfFire;                                      		// 0x005C ( 0x0004 ) [ CPF_Edit ]
	float                                              fFireDelay;                                       		// 0x0060 ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDelay;                                      		// 0x0064 ( 0x0004 ) [ CPF_Edit ]
	int                                                iRoundBurstCount;                                 		// 0x0068 ( 0x0004 ) [ CPF_Edit ]
	float                                              fRoundBurstTime;                                  		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	float                                              fZoomFOV;                                         		// 0x0070 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bOverHeat:1;                                      		// 0x0074 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              fOverHeat_Up;                                     		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	float                                              fOverHeat_Down;                                   		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      BulletType;                                       		// 0x0080 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      ProjMoveType;                                     		// 0x0081 ( 0x0001 ) [ CPF_Edit ]
	int                                                iBulletCount;                                     		// 0x0084 ( 0x0004 ) [ CPF_Edit ]
	float                                              fProjSpeed;                                       		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bExplodeCollide:1;                                		// 0x008C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bProjTakeDamage:1;                                		// 0x008C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                iBombWeaponID;                                    		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFuseTime;                                        		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	float                                              fActiveTime;                                      		// 0x0098 ( 0x0004 ) [ CPF_Edit ]
	float                                              fProjDecelEachBound;                              		// 0x009C ( 0x0004 ) [ CPF_Edit ]
	float                                              fProjSpin;                                        		// 0x00A0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fProjThrowPitch;                                  		// 0x00A4 ( 0x0004 ) [ CPF_Edit ]
	int                                                i2ndBulletCount;                                  		// 0x00A8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bBulletLandExplode:1;                             		// 0x00AC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      damtype;                                          		// 0x00B0 ( 0x0001 ) [ CPF_Edit ]
	int                                                iDamage;                                          		// 0x00B4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamWallShot;                                     		// 0x00B8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fMomentum;                                        		// 0x00BC ( 0x0004 ) [ CPF_Edit ]
	float                                              fMomentum_Pawn;                                   		// 0x00C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamRange_Eff;                                    		// 0x00C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamRange_Max;                                    		// 0x00C8 ( 0x0004 ) [ CPF_Edit ]
	int                                                iDam_OOR;                                         		// 0x00CC ( 0x0004 ) [ CPF_Edit ]
	int                                                iDamMelee;                                        		// 0x00D0 ( 0x0004 ) [ CPF_Edit ]
	int                                                iMeleeRange;                                      		// 0x00D4 ( 0x0004 ) [ CPF_Edit ]
	int                                                iMeleeExtent;                                     		// 0x00D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDam_Head;                                   		// 0x00DC ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDam_UpperTorso;                             		// 0x00E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDam_LowerTorso;                             		// 0x00E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDam_UpperArm;                               		// 0x00E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDam_LowerArm;                               		// 0x00EC ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDam_UpperLeg;                               		// 0x00F0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fMeleeDam_LowerLeg;                               		// 0x00F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_Head;                                    		// 0x00F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_UpperTorso;                              		// 0x00FC ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_LowerTorso;                              		// 0x0100 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_UpperArm;                                		// 0x0104 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_LowerArm;                                		// 0x0108 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_UpperLeg;                                		// 0x010C ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_LowerLeg;                                		// 0x0110 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamPerc_Heli;                                    		// 0x0114 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bHitEffFriendly:1;                                		// 0x0118 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              fHitGunKick;                                      		// 0x011C ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitStunTime;                                     		// 0x0120 ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitFlashTime;                                    		// 0x0124 ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitFireTime;                                     		// 0x0128 ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitFreezeTime;                                   		// 0x012C ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitEAXEffectTime;                                		// 0x0130 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     strHitEAXEffectClass;                             		// 0x0134 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      ReloadType;                                       		// 0x0140 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bRechamber:1;                                     		// 0x0144 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              fRechamberRate;                                   		// 0x0148 ( 0x0004 ) [ CPF_Edit ]
	float                                              fReloadRate;                                      		// 0x014C ( 0x0004 ) [ CPF_Edit ]
	float                                              fReloadEmptyRate;                                 		// 0x0150 ( 0x0004 ) [ CPF_Edit ]
	float                                              fReloadBeginRate;                                 		// 0x0154 ( 0x0004 ) [ CPF_Edit ]
	float                                              fReloadEndRate;                                   		// 0x0158 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBulletGravity;                                   		// 0x015C ( 0x0004 ) [ CPF_Edit ]
	float                                              fExplRad_Inner;                                   		// 0x0160 ( 0x0004 ) [ CPF_Edit ]
	float                                              fExplRad_Outer;                                   		// 0x0164 ( 0x0004 ) [ CPF_Edit ]
	float                                              fExplDam_Inner;                                   		// 0x0168 ( 0x0004 ) [ CPF_Edit ]
	float                                              fExplDam_Outer;                                   		// 0x016C ( 0x0004 ) [ CPF_Edit ]
	float                                              fExplForce_Effect;                                		// 0x0170 ( 0x0004 ) [ CPF_Edit ]
	float                                              fExplRad_Effect;                                  		// 0x0174 ( 0x0004 ) [ CPF_Edit ]
	int                                                iAmmo_Magazine;                                   		// 0x0178 ( 0x0004 ) [ CPF_Edit ]
	int                                                iAmmo_Reload;                                     		// 0x017C ( 0x0004 ) [ CPF_Edit ]
	int                                                iAmmo_Initial;                                    		// 0x0180 ( 0x0004 ) [ CPF_Edit ]
	int                                                iAmmo_Max;                                        		// 0x0184 ( 0x0004 ) [ CPF_Edit ]
	int                                                iSpread_2nd_StartNum;                             		// 0x0188 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_2nd_Add;                                  		// 0x018C ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_2nd_Max;                                  		// 0x0190 ( 0x0004 ) [ CPF_Edit ]
	int                                                iSpread_Visual_Add;                               		// 0x0194 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Shotgun;                                  		// 0x0198 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Jump;                                     		// 0x019C ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Stand_Min;                                		// 0x01A0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Stand_Max;                                		// 0x01A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Ducked_Min;                               		// 0x01A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Ducked_Max;                               		// 0x01AC ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Prone_Min;                                		// 0x01B0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Prone_Max;                                		// 0x01B4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Move_Add;                                 		// 0x01B8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Fire_Add;                                 		// 0x01BC ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Image_Increase;                           		// 0x01C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Stand_Reduce;                             		// 0x01C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Ducked_Reduce;                            		// 0x01C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Prone_Reduce;                             		// 0x01CC ( 0x0004 ) [ CPF_Edit ]
	float                                              fSpread_Aim_move_add;                             		// 0x01D0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_XMin;                                		// 0x01D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_XMax;                                		// 0x01D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_YMin;                                		// 0x01DC ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_YMax;                                		// 0x01E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_Accel;                               		// 0x01E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_Decel;                               		// 0x01E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_StayTime;                            		// 0x01EC ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_DecaySpeed;                          		// 0x01F0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickHip_DecayTimeFast;                       		// 0x01F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_XMin;                                		// 0x01F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_XMax;                                		// 0x01FC ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_YMin;                                		// 0x0200 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_YMax;                                		// 0x0204 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_Accel;                               		// 0x0208 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_Decel;                               		// 0x020C ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_StayTime;                            		// 0x0210 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_DecaySpeed;                          		// 0x0214 ( 0x0004 ) [ CPF_Edit ]
	float                                              fViewKickAds_DecayTimeFast;                       		// 0x0218 ( 0x0004 ) [ CPF_Edit ]
	float                                              fAnimRate_PutDown;                                		// 0x021C ( 0x0004 ) [ CPF_Edit ]
	float                                              fAnimRate_PutDown_Quick;                          		// 0x0220 ( 0x0004 ) [ CPF_Edit ]
	float                                              fAnimRate_BringUp;                                		// 0x0224 ( 0x0004 ) [ CPF_Edit ]
	float                                              fAnimRate_SprintBringUp;                          		// 0x0228 ( 0x0004 ) [ CPF_Edit ]
	float                                              fAnimRate_AdsOn;                                  		// 0x022C ( 0x0004 ) [ CPF_Edit ]
	float                                              fAnimRate_AdsOff;                                 		// 0x0230 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bApplyQuickDrop:1;                                		// 0x0234 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              fMaxPitch;                                        		// 0x0238 ( 0x0004 ) [ CPF_Edit ]
	int                                                iCrossHair;                                       		// 0x023C ( 0x0004 ) [ CPF_Edit ]
	float                                              fMovePivot;                                       		// 0x0240 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSprintStaminaRate;                               		// 0x0244 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSprintSpeed;                                     		// 0x0248 ( 0x0004 ) [ CPF_Edit ]
	float                                              fRunSpeed;                                        		// 0x024C ( 0x0004 ) [ CPF_Edit ]
	float                                              fCrouchSpeed;                                     		// 0x0250 ( 0x0004 ) [ CPF_Edit ]
	float                                              fPronedSpeed;                                     		// 0x0254 ( 0x0004 ) [ CPF_Edit ]
	float                                              fAimRunSpeed;                                     		// 0x0258 ( 0x0004 ) [ CPF_Edit ]
	float                                              fAimCrouchSpeed;                                  		// 0x025C ( 0x0004 ) [ CPF_Edit ]
	float                                              fStaminaRecovery;                                 		// 0x0260 ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitMoveSpeed;                                    		// 0x0264 ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitMoveTime;                                     		// 0x0268 ( 0x0004 ) [ CPF_Edit ]
	float                                              fHitMoveDelay;                                    		// 0x026C ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathRadius_Idle;                               		// 0x0270 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathSpeed_Idle;                                		// 0x0274 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathRadius_Aim;                                		// 0x0278 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathSpeed_Aim;                                 		// 0x027C ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathRadius_DuckedAim;                          		// 0x0280 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathSpeed_DuckedAim;                           		// 0x0284 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathRadius_ProneAim;                           		// 0x0288 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBreathSpeed_ProneAim;                            		// 0x028C ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_Move;                                  		// 0x0290 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_Move;                                  		// 0x0294 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_Ads_Move;                              		// 0x0298 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_Ads_Move;                              		// 0x029C ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_Ducked_Move;                           		// 0x02A0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_Ducked_Move;                           		// 0x02A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_Prone_Move;                            		// 0x02A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_Sprint_Move;                           		// 0x02AC ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_Sprint_Move;                           		// 0x02B0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_sprint_y;                              		// 0x02B4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_sprint_y;                              		// 0x02B8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_ads_move_y;                            		// 0x02BC ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_ads_move_y;                            		// 0x02C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_move_y;                                		// 0x02C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_move_y;                                		// 0x02C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobWeapon_ducked_move_y;                         		// 0x02CC ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_ducked_move_y;                         		// 0x02D0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fBobScreen_prone_move_y;                          		// 0x02D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_HipX_Max;                                   		// 0x02D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_HipX_Incr;                                  		// 0x02DC ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_HipX_Speed;                                 		// 0x02E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_HipY_Max;                                   		// 0x02E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_HipY_Incr;                                  		// 0x02E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_HipY_Speed;                                 		// 0x02EC ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_AdsX_Max;                                   		// 0x02F0 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_AdsX_Incr;                                  		// 0x02F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_AdsX_Speed;                                 		// 0x02F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_AdsY_Max;                                   		// 0x02FC ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_AdsY_Incr;                                  		// 0x0300 ( 0x0004 ) [ CPF_Edit ]
	float                                              fSway_AdsY_Speed;                                 		// 0x0304 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_HipX_Max;                             		// 0x0308 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_HipX_Incr;                            		// 0x030C ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_HipX_Speed;                           		// 0x0310 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_HipY_Max;                             		// 0x0314 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_HipY_Incr;                            		// 0x0318 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_HipY_Speed;                           		// 0x031C ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_AdsX_Max;                             		// 0x0320 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_AdsX_Incr;                            		// 0x0324 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_AdsX_Speed;                           		// 0x0328 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_AdsY_Max;                             		// 0x032C ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_AdsY_Incr;                            		// 0x0330 ( 0x0004 ) [ CPF_Edit ]
	float                                              fFiringSway_AdsY_Speed;                           		// 0x0334 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      CrosshairType;                                    		// 0x0338 ( 0x0001 ) [ CPF_Edit ]
	struct FString                                     CrosshairImage;                                   		// 0x033C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              fNPCSpreadRate;                                   		// 0x0348 ( 0x0004 ) 
	float                                              fNPCRateOfFire;                                   		// 0x034C ( 0x0004 ) 
	int                                                iNPCFire;                                         		// 0x0350 ( 0x0004 ) 
	float                                              wt_BoundingMax;                                   		// 0x0354 ( 0x0004 ) 
	float                                              wt_RandomMul;                                     		// 0x0358 ( 0x0004 ) 
	class TArray< float >                              wt_x;                                             		// 0x035C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wt_y;                                             		// 0x0368 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wt_RandomWeight;                                  		// 0x0374 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              wtAim_BoundingMax;                                		// 0x0380 ( 0x0004 ) 
	float                                              wtAim_RandomMul;                                  		// 0x0384 ( 0x0004 ) 
	class TArray< float >                              wtAim_x;                                          		// 0x0388 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wtAim_y;                                          		// 0x0394 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wtAim_RandomWeight;                               		// 0x03A0 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 unsigned char             GetCrosshairType ( struct FString szValue );      		//  Engine.wWeaponBaseParams.GetCrosshairType
	 unsigned char             GetReloadType ( struct FString szValue );         		//  Engine.wWeaponBaseParams.GetReloadType
	 unsigned char             GetProjMoveType ( struct FString szValue );       		//  Engine.wWeaponBaseParams.GetProjMoveType
	 unsigned char             GetBulletType ( struct FString szValue );         		//  Engine.wWeaponBaseParams.GetBulletType

	// Public Imports
	UwWeaponBaseParams(class UwWeaponBaseParams const &);
	UwWeaponBaseParams(void);
	class UwWeaponBaseParams &  operator=(class UwWeaponBaseParams const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0380

// Class Engine.wWeaponManager
class DLL_IMPORT UwWeaponManager : public UObject
{
public:
	class TArray< class UwWeaponBaseParams* >          WeaponParams;                                     		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     arr_szResClass;                                   		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UClass* >                      arr_classRes;                                     		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              BaseSpeed_Sprint;                                 		// 0x0050 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              BaseSpeed_Run;                                    		// 0x005C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              BaseSpeed_Aim;                                    		// 0x0068 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              BaseSpeed_Run_Cr;                                 		// 0x0074 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              BaseSpeed_Aim_Cr;                                 		// 0x0080 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              BaseSpeed_Prone;                                  		// 0x008C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      PrecacheSound (  );                               		//  Engine.wWeaponManager.PrecacheSound
	 void                      PrecacheMaterials ( class ALevelInfo* Level );    		//  Engine.wWeaponManager.PrecacheMaterials
	 void                      PrecacheClasses (  );                             		//  Engine.wWeaponManager.PrecacheClasses
	 class UwWeaponBaseParams* eventGetBaseParam ( int id );                     		// [ FUNC_Event ] Engine.wWeaponManager.GetBaseParam
	 void                      LoadWeaponExParams (  );                          		//  Engine.wWeaponManager.LoadWeaponExParams
	 void                      AddParams ( class UBTNetGameData* GameData );     		//  Engine.wWeaponManager.AddParams
	 void                      LoadWeaponParams (  );                            		//  Engine.wWeaponManager.LoadWeaponParams
	 void                      AddWeaponRecoilParams ( class UBTNetGameData* GameData );		//  Engine.wWeaponManager.AddWeaponRecoilParams
	 void                      LoadWeaponRecoilParams (  );                      		//  Engine.wWeaponManager.LoadWeaponRecoilParams
	 class UClass*             GetRes ( struct FString szRes );                  		//  Engine.wWeaponManager.GetRes
	 void                      eventInitWeaponPrecacheClasses (  );              		// [ FUNC_Event ] Engine.wWeaponManager.InitWeaponPrecacheClasses
	 void                      eventLoadWeaponRes (  );                          		// [ FUNC_Event ] Engine.wWeaponManager.LoadWeaponRes
	 void                      eventDestroyScript (  );                          		// [ FUNC_Event ] Engine.wWeaponManager.DestroyScript
	 void                      eventInitScript (  );                             		// [ FUNC_Event ] Engine.wWeaponManager.InitScript

	// Public Imports
	UwWeaponManager(class UwWeaponManager const &);
	UwWeaponManager(void);
	class UwWeaponManager &  operator=(class UwWeaponManager const &);
	void  DestroyNative(void);
	void  Init(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x006C

// Class Engine.ObjectPool
class DLL_IMPORT UObjectPool : public UObject
{
public:
	class TArray< class UObject* >                     Objects;                                          		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                NewCount;                                         		// 0x0038 ( 0x0004 ) 

	// UScript Functions
	 void                      Shrink (  );                                      		// [ FUNC_Simulated ] Engine.ObjectPool.Shrink
	 class UObject*            FreeObjectDupCheck ( class UObject* obj );        		// [ FUNC_Simulated | FUNC_Native ] Engine.ObjectPool.FreeObjectDupCheck
	 class UObject*            FreeObject ( class UObject* obj );                		// [ FUNC_Simulated ] Engine.ObjectPool.FreeObject
	 class UObject*            AllocateObject ( class UClass* ObjectClass );     		// [ FUNC_Simulated ] Engine.ObjectPool.AllocateObject
	 class UObject*            PopObject ( class UClass* ObjectClass );          		// [ FUNC_Simulated | FUNC_Native ] Engine.ObjectPool.PopObject

	// Public Imports
	UObjectPool(class UObjectPool const &);
	class UObjectPool &  operator=(class UObjectPool const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.Actor
class DLL_IMPORT AActor : public UObject
{
public:
	unsigned char                                      LightType;                                        		// 0x002C ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      LightEffect;                                      		// 0x002D ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      LightHue;                                         		// 0x002E ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      LightSaturation;                                  		// 0x002F ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	float                                              LightBrightness;                                  		// 0x0030 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	float                                              LightRadius;                                      		// 0x0034 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      LightPeriod;                                      		// 0x0038 ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      LightPhase;                                       		// 0x0039 ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      LightCone;                                        		// 0x003A ( 0x0001 ) [ CPF_Edit ]
	float                                              LightBrightnessScale;                             		// 0x003C ( 0x0004 ) [ CPF_Edit ]
	float                                              PawnLightBrightnessScale;                         		// 0x0040 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      DrawType;                                         		// 0x0044 ( 0x0001 ) [ CPF_Edit | CPF_Const | CPF_Net ]
	unsigned char                                      StaticFilterState;                                		// 0x0045 ( 0x0001 ) [ CPF_Const | CPF_Native ]
	class UStaticMesh*                                 StaticMesh;                                       		// 0x0048 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_Net ]
	class AActor*                                      Owner;                                            		// 0x004C ( 0x0004 ) [ CPF_Const | CPF_Net ]
	class AActor*                                      Base;                                             		// 0x0050 ( 0x0004 ) [ CPF_Const | CPF_Net ]
	class UMaterial*                                   BaseMaterial;                                     		// 0x0054 ( 0x0004 ) [ CPF_Const ]
	struct FActorRenderDataPtr                         ActorRenderData;                                  		// 0x0058 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	struct FLightRenderDataPtr                         LightRenderData;                                  		// 0x005C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	int                                                RenderRevision;                                   		// 0x0060 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	int                                                FunctionReplicateCount;                           		// 0x0064 ( 0x0004 ) 
	int                                                VariableReplicateCount;                           		// 0x0068 ( 0x0004 ) 
	class TArray< struct FBatchReference >             StaticSectionBatches;                             		// 0x006C ( 0x000C ) [ CPF_Const | CPF_Native ]
	struct FName                                       ForcedVisibilityZoneTag;                          		// 0x0078 ( 0x0004 ) [ CPF_Edit | CPF_Const ]
	float                                              CullDistance;                                     		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	float                                              fLightScale;                                      		// 0x0080 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bSpecialLit:1;                                    		// 0x0084 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Net ]
	unsigned long                                      bActorShadows:1;                                  		// 0x0084 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bCorona:1;                                        		// 0x0084 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bDirectionalCorona:1;                             		// 0x0084 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bAttenByLife:1;                                   		// 0x0084 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bLightingVisibility:1;                            		// 0x0084 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bUseDynamicLights:1;                              		// 0x0084 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bLightChanged:1;                                  		// 0x0084 ( 0x0004 )  [0x00000080]
	unsigned long                                      bDramaticLighting:1;                              		// 0x0084 ( 0x0004 )  [0x00000100]
	unsigned long                                      bStatic:1;                                        		// 0x0084 ( 0x0004 )  [0x00000200][ CPF_Edit | CPF_Const ]
	unsigned long                                      bHidden:1;                                        		// 0x0084 ( 0x0004 )  [0x00000400][ CPF_Edit | CPF_Net ]
	unsigned long                                      bNoDelete:1;                                      		// 0x0084 ( 0x0004 )  [0x00000800][ CPF_Edit | CPF_Const ]
	unsigned long                                      bDeleteMe:1;                                      		// 0x0084 ( 0x0004 )  [0x00001000][ CPF_Const ]
	unsigned long                                      bTicked:1;                                        		// 0x0084 ( 0x0004 )  [0x00002000][ CPF_Const | CPF_Transient ]
	unsigned long                                      bDynamicLight:1;                                  		// 0x0084 ( 0x0004 )  [0x00004000][ CPF_Edit ]
	unsigned long                                      bEnvironmentLight:1;                              		// 0x0084 ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      bTimerLoop:1;                                     		// 0x0084 ( 0x0004 )  [0x00010000]
	unsigned long                                      bOnlyOwnerSee:1;                                  		// 0x0084 ( 0x0004 )  [0x00020000][ CPF_Net ]
	unsigned long                                      bHighDetail:1;                                    		// 0x0084 ( 0x0004 )  [0x00040000][ CPF_Edit ]
	unsigned long                                      bSuperHighDetail:1;                               		// 0x0084 ( 0x0004 )  [0x00080000][ CPF_Edit ]
	unsigned long                                      bOnlyDrawIfAttached:1;                            		// 0x0084 ( 0x0004 )  [0x00100000][ CPF_Net ]
	unsigned long                                      bStasis:1;                                        		// 0x0084 ( 0x0004 )  [0x00200000][ CPF_Edit ]
	unsigned long                                      bTrailerAllowRotation:1;                          		// 0x0084 ( 0x0004 )  [0x00400000]
	unsigned long                                      bTrailerSameRotation:1;                           		// 0x0084 ( 0x0004 )  [0x00800000]
	unsigned long                                      bTrailerPrePivot:1;                               		// 0x0084 ( 0x0004 )  [0x01000000]
	unsigned long                                      bWorldGeometry:1;                                 		// 0x0084 ( 0x0004 )  [0x02000000]
	unsigned long                                      bAcceptsProjectors:1;                             		// 0x0084 ( 0x0004 )  [0x04000000][ CPF_Edit ]
	unsigned long                                      bOrientOnSlope:1;                                 		// 0x0084 ( 0x0004 )  [0x08000000]
	unsigned long                                      bOnlyAffectPawns:1;                               		// 0x0084 ( 0x0004 )  [0x10000000][ CPF_Const ]
	unsigned long                                      bDisableSorting:1;                                		// 0x0084 ( 0x0004 )  [0x20000000][ CPF_Edit ]
	unsigned long                                      bIgnoreEncroachers:1;                             		// 0x0084 ( 0x0004 )  [0x40000000][ CPF_Edit | CPF_Net ]
	unsigned long                                      bShowOctreeNodes:1;                               		// 0x0084 ( 0x0004 )  [0x80000000]
	unsigned long                                      bWasSNFiltered:1;                                 		// 0x0088 ( 0x0004 )  [0x00000001]
	unsigned long                                      bShouldStopKarma:1;                               		// 0x0088 ( 0x0004 )  [0x00000002][ CPF_Const | CPF_Transient ]
	unsigned long                                      bDetailAttachment:1;                              		// 0x0088 ( 0x0004 )  [0x00000004][ CPF_Const ]
	unsigned long                                      bNetTemporary:1;                                  		// 0x0088 ( 0x0004 )  [0x00000008][ CPF_Const ]
	unsigned long                                      bOnlyRelevantToOwner:1;                           		// 0x0088 ( 0x0004 )  [0x00000010]
	unsigned long                                      bNetDirty:1;                                      		// 0x0088 ( 0x0004 )  [0x00000020][ CPF_Const | CPF_Transient ]
	unsigned long                                      bAlwaysRelevant:1;                                		// 0x0088 ( 0x0004 )  [0x00000040]
	unsigned long                                      bReplicateInstigator:1;                           		// 0x0088 ( 0x0004 )  [0x00000080]
	unsigned long                                      bReplicateMovement:1;                             		// 0x0088 ( 0x0004 )  [0x00000100]
	unsigned long                                      bSkipActorPropertyReplication:1;                  		// 0x0088 ( 0x0004 )  [0x00000200]
	unsigned long                                      bUpdateSimulatedPosition:1;                       		// 0x0088 ( 0x0004 )  [0x00000400]
	unsigned long                                      bTearOff:1;                                       		// 0x0088 ( 0x0004 )  [0x00000800][ CPF_Net ]
	unsigned long                                      bOnlyDirtyReplication:1;                          		// 0x0088 ( 0x0004 )  [0x00001000]
	unsigned long                                      bReplicateAnimations:1;                           		// 0x0088 ( 0x0004 )  [0x00002000]
	unsigned long                                      bNetInitialRotation:1;                            		// 0x0088 ( 0x0004 )  [0x00004000][ CPF_Const ]
	unsigned long                                      bCompressedPosition:1;                            		// 0x0088 ( 0x0004 )  [0x00008000]
	unsigned long                                      bAlwaysZeroBoneOffset:1;                          		// 0x0088 ( 0x0004 )  [0x00010000]
	unsigned long                                      bIgnoreVehicles:1;                                		// 0x0088 ( 0x0004 )  [0x00020000]
	unsigned long                                      bDeferRendering:1;                                		// 0x0088 ( 0x0004 )  [0x00040000][ CPF_Edit ]
	unsigned long                                      bBadStateCode:1;                                  		// 0x0088 ( 0x0004 )  [0x00080000]
	unsigned long                                      bSkipTimerInChangedHost:1;                        		// 0x0088 ( 0x0004 )  [0x00100000]
	unsigned long                                      bSkipLifeSpanInChangedHost:1;                     		// 0x0088 ( 0x0004 )  [0x00200000]
	int                                                nOldActor;                                        		// 0x008C ( 0x0004 ) 
	class TArray< class UObject* >                     DestroyListeners;                                 		// 0x0090 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      Physics;                                          		// 0x009C ( 0x0001 ) [ CPF_Edit | CPF_Const | CPF_Net ]
	unsigned char                                      RemoteRole;                                       		// 0x009D ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      Role;                                             		// 0x009E ( 0x0001 ) [ CPF_Net ]
	int                                                NetTag;                                           		// 0x00A0 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	float                                              NetUpdateTime;                                    		// 0x00A4 ( 0x0004 ) 
	float                                              NetUpdateFrequency;                               		// 0x00A8 ( 0x0004 ) [ CPF_Localized ]
	float                                              NetPriority;                                      		// 0x00AC ( 0x0004 ) 
	class APawn*                                       Instigator;                                       		// 0x00B0 ( 0x0004 ) [ CPF_Net ]
	class USound*                                      AmbientSound;                                     		// 0x00B4 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	struct FName                                       AttachmentBone;                                   		// 0x00B8 ( 0x0004 ) [ CPF_Const | CPF_Net ]
	class ALevelInfo*                                  Level;                                            		// 0x00BC ( 0x0004 ) [ CPF_Const ]
	class ULevel*                                      XLevel;                                           		// 0x00C0 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	float                                              LifeSpan;                                         		// 0x00C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              LifeSpanReplicated;                               		// 0x00C8 ( 0x0004 ) [ CPF_Net ]
	float                                              LifeSpanReplicatedClient;                         		// 0x00CC ( 0x0004 ) 
	struct FPointRegion                                Region;                                           		// 0x00D0 ( 0x000C ) [ CPF_Const ]
	float                                              TimerRate;                                        		// 0x00DC ( 0x0004 ) 
	class UMaterial*                                   OverlayMaterial;                                  		// 0x00E0 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	class UMesh*                                       Mesh;                                             		// 0x00E4 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_Net ]
	float                                              LastRenderTime;                                   		// 0x00E8 ( 0x0004 ) [ CPF_Transient ]
	struct FName                                       Tag;                                              		// 0x00EC ( 0x0004 ) [ CPF_Edit ]
	class TArray< int >                                Leaves;                                           		// 0x00F0 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	struct FName                                       Event;                                            		// 0x00FC ( 0x0004 ) [ CPF_Edit ]
	class AInventory*                                  Inventory;                                        		// 0x0100 ( 0x0004 ) [ CPF_Net ]
	float                                              TimerCounter;                                     		// 0x0104 ( 0x0004 ) [ CPF_Const ]
	class UMeshInstance*                               MeshInstance;                                     		// 0x0108 ( 0x0004 ) [ CPF_Transient ]
	float                                              LODBias;                                          		// 0x010C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       InitialState;                                     		// 0x0110 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Group;                                            		// 0x0114 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class AActor* >                      Touching;                                         		// 0x0118 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< void* >                              OctreeNodes;                                      		// 0x0124 ( 0x000C ) [ CPF_Const | CPF_Transient | CPF_NeedCtorLink ]
	struct FBox                                        OctreeBox;                                        		// 0x0130 ( 0x001C ) [ CPF_Const | CPF_Transient ]
	struct FVector                                     OctreeBoxCenter;                                  		// 0x014C ( 0x000C ) [ CPF_Const | CPF_Transient ]
	struct FVector                                     OctreeBoxRadii;                                   		// 0x0158 ( 0x000C ) [ CPF_Const | CPF_Transient ]
	class AActor*                                      Deleted;                                          		// 0x0164 ( 0x0004 ) [ CPF_Const ]
	float                                              LatentFloat;                                      		// 0x0168 ( 0x0004 ) [ CPF_Const ]
	int                                                CollisionTag;                                     		// 0x016C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	int                                                JoinedTag;                                        		// 0x0170 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class APhysicsVolume*                              PhysicsVolume;                                    		// 0x0174 ( 0x0004 ) [ CPF_Const ]
	struct FVector                                     Location;                                         		// 0x0178 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_Net ]
	struct FRotator                                    Rotation;                                         		// 0x0184 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_Net ]
	struct FVector                                     Velocity;                                         		// 0x0190 ( 0x000C ) [ CPF_Edit | CPF_Net ]
	struct FVector                                     Acceleration;                                     		// 0x019C ( 0x000C ) 
	float                                              fLeanAcc;                                         		// 0x01A8 ( 0x0004 ) 
	struct FVector                                     vLeanVel;                                         		// 0x01AC ( 0x000C ) 
	struct FVector                                     vLeanAcc;                                         		// 0x01B8 ( 0x000C ) 
	struct FVector                                     CachedLocation;                                   		// 0x01C4 ( 0x000C ) [ CPF_Const ]
	struct FRotator                                    CachedRotation;                                   		// 0x01D0 ( 0x000C ) [ CPF_Const ]
	struct FMatrix                                     CachedLocalToWorld;                               		// 0x01DC ( 0x0040 ) 
	struct FName                                       AttachTag;                                        		// 0x021C ( 0x0004 ) [ CPF_Edit ]
	class TArray< class AActor* >                      Attached;                                         		// 0x0220 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	struct FVector                                     RelativeLocation;                                 		// 0x022C ( 0x000C ) [ CPF_Const | CPF_Net ]
	struct FRotator                                    RelativeRotation;                                 		// 0x0238 ( 0x000C ) [ CPF_Const | CPF_Net ]
	struct FMatrix                                     HardRelMatrix;                                    		// 0x0244 ( 0x0040 ) [ CPF_Const ]
	class TArray< struct FProjectorRenderInfoPtr >     Projectors;                                       		// 0x0284 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< struct FStaticMeshProjectorRenderInfoPtr > StaticMeshProjectors;                             		// 0x0290 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class UMaterial*                                   Texture;                                          		// 0x029C ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	class UStaticMeshInstance*                         StaticMeshInstance;                               		// 0x02A0 ( 0x0004 ) 
	class UModel*                                      Brush;                                            		// 0x02A4 ( 0x0004 ) [ CPF_Const | CPF_ExportObject ]
	float                                              DrawScale;                                        		// 0x02A8 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_Net ]
	struct FVector                                     DrawScale3D;                                      		// 0x02AC ( 0x000C ) [ CPF_Edit | CPF_Const ]
	struct FVector                                     PrePivot;                                         		// 0x02B8 ( 0x000C ) [ CPF_Edit | CPF_Net ]
	unsigned long                                      bSyncCollsionSizeHK:1;                            		// 0x02C4 ( 0x0004 )  [0x00000001]
	class TArray< class UMaterial* >                   Skins;                                            		// 0x02C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UMaterial*                                   RepSkin;                                          		// 0x02D4 ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      AmbientGlow;                                      		// 0x02D8 ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      MaxLights;                                        		// 0x02D9 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      UV2Mode;                                          		// 0x02DA ( 0x0001 ) [ CPF_Edit ]
	class UConvexVolume*                               AntiPortal;                                       		// 0x02DC ( 0x0004 ) [ CPF_Edit | CPF_ExportObject ]
	class UMaterial*                                   UV2Texture;                                       		// 0x02E0 ( 0x0004 ) [ CPF_Edit ]
	int                                                UV2TextureSize;                                   		// 0x02E4 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   UV2DirectionalLightmaps;                          		// 0x02E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              ScaleGlow;                                        		// 0x02EC ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   EnvironmentMap;                                   		// 0x02F0 ( 0x0004 ) [ CPF_Edit ]
	int                                                CurrentLODLevel;                                  		// 0x02F4 ( 0x0004 ) 
	unsigned long                                      bShadowMap:1;                                     		// 0x02F8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bSelfShadowCast:1;                                		// 0x02F8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bExcludeVisibilityTest:1;                         		// 0x02F8 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bIsFar:1;                                         		// 0x02F8 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bDontBatch:1;                                     		// 0x02F8 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned char                                      SurfaceType;                                      		// 0x02FC ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      Style;                                            		// 0x02FD ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned long                                      bUnlit:1;                                         		// 0x0300 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Net ]
	unsigned long                                      bShadowCast:1;                                    		// 0x0300 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bStaticLighting:1;                                		// 0x0300 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bUseLightingFromBase:1;                           		// 0x0300 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bHurtEntry:1;                                     		// 0x0300 ( 0x0004 )  [0x00000010]
	unsigned long                                      bGameRelevant:1;                                  		// 0x0300 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bCollideWhenPlacing:1;                            		// 0x0300 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bTravel:1;                                        		// 0x0300 ( 0x0004 )  [0x00000080]
	unsigned long                                      bMovable:1;                                       		// 0x0300 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bDestroyInPainVolume:1;                           		// 0x0300 ( 0x0004 )  [0x00000200]
	unsigned long                                      bCanBeDamaged:1;                                  		// 0x0300 ( 0x0004 )  [0x00000400]
	unsigned long                                      bShouldBaseAtStartup:1;                           		// 0x0300 ( 0x0004 )  [0x00000800][ CPF_Edit ]
	unsigned long                                      bPendingDelete:1;                                 		// 0x0300 ( 0x0004 )  [0x00001000]
	unsigned long                                      bAnimByOwner:1;                                   		// 0x0300 ( 0x0004 )  [0x00002000]
	unsigned long                                      bOwnerNoSee:1;                                    		// 0x0300 ( 0x0004 )  [0x00004000]
	unsigned long                                      bCanTeleport:1;                                   		// 0x0300 ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      bClientAnim:1;                                    		// 0x0300 ( 0x0004 )  [0x00010000]
	unsigned long                                      bDisturbFluidSurface:1;                           		// 0x0300 ( 0x0004 )  [0x00020000]
	float                                              FluidSurfaceShootStrengthMod;                     		// 0x0304 ( 0x0004 ) 
	unsigned long                                      bAlwaysTick:1;                                    		// 0x0308 ( 0x0004 )  [0x00000001][ CPF_Const ]
	unsigned long                                      bFullVolume:1;                                    		// 0x0308 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bNotifyLocalPlayerTeamReceived:1;                 		// 0x0308 ( 0x0004 )  [0x00000004]
	unsigned long                                      bHardAttach:1;                                    		// 0x0308 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bForceSkelUpdate:1;                               		// 0x0308 ( 0x0004 )  [0x00000010]
	unsigned long                                      bClientAuthoritative:1;                           		// 0x0308 ( 0x0004 )  [0x00000020][ CPF_Const ]
	unsigned long                                      bNotDrawSelf:1;                                   		// 0x0308 ( 0x0004 )  [0x00000040][ CPF_Net ]
	unsigned char                                      SoundVolume;                                      		// 0x030C ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      SoundPitch;                                       		// 0x030D ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      SoundOcclusion;                                   		// 0x030E ( 0x0001 ) [ CPF_Edit ]
	float                                              SoundRadius;                                      		// 0x0310 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	float                                              TransientSoundVolume;                             		// 0x0314 ( 0x0004 ) [ CPF_Edit ]
	float                                              TransientSoundRadius;                             		// 0x0318 ( 0x0004 ) [ CPF_Edit ]
	float                                              CollisionRadius;                                  		// 0x031C ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_Net ]
	float                                              CollisionHeight;                                  		// 0x0320 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_Net ]
	unsigned long                                      bCollideActors:1;                                 		// 0x0324 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Const | CPF_Net ]
	unsigned long                                      bCollideWorld:1;                                  		// 0x0324 ( 0x0004 )  [0x00000002][ CPF_Net ]
	unsigned long                                      bBlockActors:1;                                   		// 0x0324 ( 0x0004 )  [0x00000004][ CPF_Edit | CPF_Net ]
	unsigned long                                      bBlockPlayers:1;                                  		// 0x0324 ( 0x0004 )  [0x00000008]
	unsigned long                                      bBlockProjectiles:1;                              		// 0x0324 ( 0x0004 )  [0x00000010]
	unsigned long                                      bProjTarget:1;                                    		// 0x0324 ( 0x0004 )  [0x00000020][ CPF_Edit | CPF_Net ]
	unsigned long                                      bBlockZeroExtentTraces:1;                         		// 0x0324 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bBlockNonZeroExtentTraces:1;                      		// 0x0324 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bAutoAlignToTerrain:1;                            		// 0x0324 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bUseCylinderCollision:1;                          		// 0x0324 ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bBlockKarma:1;                                    		// 0x0324 ( 0x0004 )  [0x00000400][ CPF_Edit | CPF_Const ]
	unsigned long                                      bBlocksTeleport:1;                                		// 0x0324 ( 0x0004 )  [0x00000800]
	unsigned long                                      bAlwaysFaceCamera:1;                              		// 0x0324 ( 0x0004 )  [0x00001000][ CPF_Edit ]
	unsigned long                                      bNetNotify:1;                                     		// 0x0324 ( 0x0004 )  [0x00002000]
	unsigned long                                      bClientTrigger:1;                                 		// 0x0324 ( 0x0004 )  [0x00004000][ CPF_Net ]
	unsigned long                                      bUseCollisionStaticMesh:1;                        		// 0x0324 ( 0x0004 )  [0x00008000]
	unsigned long                                      bSmoothKarmaStateUpdates:1;                       		// 0x0324 ( 0x0004 )  [0x00010000]
	unsigned long                                      bIgnoreOutOfWorld:1;                              		// 0x0324 ( 0x0004 )  [0x00020000]
	unsigned long                                      bBounce:1;                                        		// 0x0324 ( 0x0004 )  [0x00040000][ CPF_Edit ]
	unsigned long                                      bFixedRotationDir:1;                              		// 0x0324 ( 0x0004 )  [0x00080000][ CPF_Edit | CPF_Net ]
	unsigned long                                      bRotateToDesired:1;                               		// 0x0324 ( 0x0004 )  [0x00100000][ CPF_Edit | CPF_Net ]
	unsigned long                                      bIgnoreTerminalVelocity:1;                        		// 0x0324 ( 0x0004 )  [0x00200000][ CPF_Edit ]
	unsigned long                                      bOrientToVelocity:1;                              		// 0x0324 ( 0x0004 )  [0x00400000][ CPF_Edit ]
	unsigned long                                      bInterpolating:1;                                 		// 0x0324 ( 0x0004 )  [0x00800000]
	unsigned long                                      bJustTeleported:1;                                		// 0x0324 ( 0x0004 )  [0x01000000][ CPF_Const ]
	float                                              Mass;                                             		// 0x0328 ( 0x0004 ) [ CPF_Edit ]
	float                                              Buoyancy;                                         		// 0x032C ( 0x0004 ) [ CPF_Edit ]
	struct FRotator                                    RotationRate;                                     		// 0x0330 ( 0x000C ) [ CPF_Edit | CPF_Net ]
	struct FRotator                                    DesiredRotation;                                  		// 0x033C ( 0x000C ) [ CPF_Edit | CPF_Net ]
	unsigned long                                      DesiredRotationCheck_Yaw:1;                       		// 0x0348 ( 0x0004 )  [0x00000001]
	unsigned long                                      DesiredRotationCheck_Pitch:1;                     		// 0x0348 ( 0x0004 )  [0x00000002]
	unsigned long                                      DesiredRotationCheck_Roll:1;                      		// 0x0348 ( 0x0004 )  [0x00000004]
	float                                              DesiredRotationThreshold_Yaw;                     		// 0x034C ( 0x0004 ) 
	float                                              DesiredRotationThreshold_Pitch;                   		// 0x0350 ( 0x0004 ) 
	float                                              DesiredRotationThreshold_Roll;                    		// 0x0354 ( 0x0004 ) 
	class AActor*                                      PendingTouch;                                     		// 0x0358 ( 0x0004 ) 
	struct FVector                                     ColLocation;                                      		// 0x035C ( 0x000C ) [ CPF_Const ]
	struct FName                                       ExcludeTag[ 0x08 ];                               		// 0x0368 ( 0x0020 ) [ CPF_Edit ]
	class UKarmaParamsCollision*                       KParams;                                          		// 0x0388 ( 0x0004 ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                KStepTag;                                         		// 0x038C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	float                                              AccumKarmaAngleError;                             		// 0x0390 ( 0x0004 ) 
	struct FAnimRep                                    SimAnim;                                          		// 0x0394 ( 0x000C ) [ CPF_Net ]
	unsigned char                                      ForceType;                                        		// 0x03A0 ( 0x0001 ) [ CPF_Edit ]
	float                                              ForceRadius;                                      		// 0x03A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              ForceScale;                                       		// 0x03A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              ForceNoise;                                       		// 0x03AC ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bNetInitial:1;                                    		// 0x03B0 ( 0x0004 )  [0x00000001][ CPF_Const ]
	unsigned long                                      bNetOwner:1;                                      		// 0x03B0 ( 0x0004 )  [0x00000002][ CPF_Const | CPF_Net ]
	unsigned long                                      bNetRelevant:1;                                   		// 0x03B0 ( 0x0004 )  [0x00000004][ CPF_Const ]
	unsigned long                                      bDemoRecording:1;                                 		// 0x03B0 ( 0x0004 )  [0x00000008][ CPF_Const ]
	unsigned long                                      bClientDemoRecording:1;                           		// 0x03B0 ( 0x0004 )  [0x00000010][ CPF_Const ]
	unsigned long                                      bRepClientDemo:1;                                 		// 0x03B0 ( 0x0004 )  [0x00000020][ CPF_Const ]
	unsigned long                                      bClientDemoNetFunc:1;                             		// 0x03B0 ( 0x0004 )  [0x00000040][ CPF_Const ]
	unsigned long                                      bDemoOwner:1;                                     		// 0x03B0 ( 0x0004 )  [0x00000080][ CPF_Const ]
	unsigned long                                      bNoRepMesh:1;                                     		// 0x03B0 ( 0x0004 )  [0x00000100]
	unsigned long                                      bNotOnDedServer:1;                                		// 0x03B0 ( 0x0004 )  [0x00000200]
	unsigned long                                      bAlreadyPrecachedMaterials:1;                     		// 0x03B0 ( 0x0004 )  [0x00000400]
	unsigned long                                      bAlreadyPrecachedMeshes:1;                        		// 0x03B0 ( 0x0004 )  [0x00000800]
	unsigned long                                      bAlreadyPrecachedSkeletalMeshes:1;                		// 0x03B0 ( 0x0004 )  [0x00001000]
	unsigned long                                      bHiddenEd:1;                                      		// 0x03B0 ( 0x0004 )  [0x00002000][ CPF_Edit ]
	unsigned long                                      bHiddenEdGroup:1;                                 		// 0x03B0 ( 0x0004 )  [0x00004000][ CPF_Edit ]
	unsigned long                                      bDirectional:1;                                   		// 0x03B0 ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      bSelected:1;                                      		// 0x03B0 ( 0x0004 )  [0x00010000][ CPF_Const ]
	unsigned long                                      bEdShouldSnap:1;                                  		// 0x03B0 ( 0x0004 )  [0x00020000][ CPF_Edit ]
	unsigned long                                      bEdSnap:1;                                        		// 0x03B0 ( 0x0004 )  [0x00040000][ CPF_Transient ]
	unsigned long                                      bTempEditor:1;                                    		// 0x03B0 ( 0x0004 )  [0x00080000][ CPF_Const | CPF_Transient ]
	unsigned long                                      bObsolete:1;                                      		// 0x03B0 ( 0x0004 )  [0x00100000]
	unsigned long                                      bPathColliding:1;                                 		// 0x03B0 ( 0x0004 )  [0x00200000][ CPF_Edit ]
	unsigned long                                      bPathTemp:1;                                      		// 0x03B0 ( 0x0004 )  [0x00400000][ CPF_Transient ]
	unsigned long                                      bScriptInitialized:1;                             		// 0x03B0 ( 0x0004 )  [0x00800000]
	unsigned long                                      bLockLocation:1;                                  		// 0x03B0 ( 0x0004 )  [0x01000000][ CPF_Edit ]
	unsigned long                                      bTraceWater:1;                                    		// 0x03B0 ( 0x0004 )  [0x02000000]
	unsigned long                                      bNoProne:1;                                       		// 0x03B0 ( 0x0004 )  [0x04000000][ CPF_Edit ]
	class UClass*                                      MessageClass;                                     		// 0x03B4 ( 0x0004 ) 
	float                                              OverlayTimer;                                     		// 0x03B8 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	float                                              ClientOverlayTimer;                               		// 0x03BC ( 0x0004 ) [ CPF_Edit | CPF_Transient ]
	float                                              ClientOverlayCounter;                             		// 0x03C0 ( 0x0004 ) [ CPF_Edit | CPF_Transient ]
	class UMaterial*                                   HighDetailOverlay;                                		// 0x03C4 ( 0x0004 ) 

	// UScript Functions
	 void                      OnEndRound (  );                                  		//  Engine.Actor.OnEndRound
	 void                      OnBeginRound (  );                                		//  Engine.Actor.OnBeginRound
	 void                      eventSunLightDirectionUpdate ( struct FVector direction );		// [ FUNC_Event ] Engine.Actor.SunLightDirectionUpdate
	 bool                      BlocksShotAt ( class AActor* Other );             		//  Engine.Actor.BlocksShotAt
	 void                      PawnBaseDied (  );                                		//  Engine.Actor.PawnBaseDied
	 void                      RecoverFromHostChange (  );                       		//  Engine.Actor.RecoverFromHostChange
	 float                     GetAngleH ( struct FVector V );                   		//  Engine.Actor.GetAngleH
	 float                     GetDotH ( struct FVector V );                     		//  Engine.Actor.GetDotH
	 bool                      IsStationary (  );                                		//  Engine.Actor.IsStationary
	 void                      InitBot ( int Grade );                            		//  Engine.Actor.InitBot
	 void                      eventrpclog ( struct FString rpc );               		// [ FUNC_Event ] Engine.Actor.rpclog
	 void                      eventdblog ( struct FString Msg );                		// [ FUNC_Event ] Engine.Actor.dblog
	 void                      crlog ( struct FString Msg );                     		//  Engine.Actor.crlog
	 void                      eventclog ( struct FString Msg );                 		// [ FUNC_Simulated | FUNC_Event ] Engine.Actor.clog
	 void                      eventctlog ( struct FString Msg );                		// [ FUNC_Event ] Engine.Actor.ctlog
	 void                      eventalllog ( struct FString Msg );               		// [ FUNC_Event ] Engine.Actor.alllog
	 void                      NotifyLocalPlayerTeamReceived (  );               		//  Engine.Actor.NotifyLocalPlayerTeamReceived
	 void                      NotifyLocalPlayerDead ( class APlayerController* PC );		//  Engine.Actor.NotifyLocalPlayerDead
	 void                      SetDelayedDamageInstigatorController ( class AController* C );		//  Engine.Actor.SetDelayedDamageInstigatorController
	 bool                      TeamLink ( int TeamNum );                         		//  Engine.Actor.TeamLink
	 bool                      SelfTriggered (  );                               		//  Engine.Actor.SelfTriggered
	 bool                      EffectIsRelevant ( struct FVector SpawnLocation, bool bForceDedicated );		// [ FUNC_Simulated ] Engine.Actor.EffectIsRelevant
	 bool                      CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation );		// [ FUNC_Simulated ] Engine.Actor.CheckMaxEffectDistance
	 void                      SetOverlayMaterial ( class UMaterial* mat, float Time, bool bOverride );		// [ FUNC_Simulated ] Engine.Actor.SetOverlayMaterial
	 void                      Crash (  );                                       		//  Engine.Actor.Crash
	 struct FVector            GetCollisionExtent (  );                          		//  Engine.Actor.GetCollisionExtent
	 bool                      CanSplash (  );                                   		// [ FUNC_Simulated ] Engine.Actor.CanSplash
	 void                      PlayTeleportEffect ( bool bOut, bool bSound );    		//  Engine.Actor.PlayTeleportEffect
	 bool                      IsInPain (  );                                    		//  Engine.Actor.IsInPain
	 bool                      IsInVolume ( class AVolume* aVolume );            		//  Engine.Actor.IsInVolume
	 void                      UntriggerEvent ( struct FName EventName, class AActor* Other, class APawn* EventInstigator );		//  Engine.Actor.UntriggerEvent
	 void                      eventTriggerEvent ( struct FName EventName, class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Simulated | FUNC_Event ] Engine.Actor.TriggerEvent
	 void                      Reset (  );                                       		//  Engine.Actor.Reset
	 void                      StartInterpolation (  );                          		// [ FUNC_Simulated ] Engine.Actor.StartInterpolation
	 bool                      TouchingActor ( class AActor* A );                		// [ FUNC_Final | FUNC_Simulated ] Engine.Actor.TouchingActor
	 bool                      NearSpot ( struct FVector Spot );                 		// [ FUNC_Final | FUNC_Simulated ] Engine.Actor.NearSpot
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.Actor.DisplayDebug
	 struct FString            GetDebugName (  );                                		//  Engine.Actor.GetDebugName
	 void                      SetGRI ( class AGameReplicationInfo* GRI );       		//  Engine.Actor.SetGRI
	 void                      MatchStarting (  );                               		//  Engine.Actor.MatchStarting
	 struct FString            GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 );		//  Engine.Actor.GetLocalString
	 void                      SetDefaultDisplayProperties (  );                 		//  Engine.Actor.SetDefaultDisplayProperties
	 void                      SetDisplayProperties ( unsigned char NewStyle, class UMaterial* NewTexture, bool bLighting );		//  Engine.Actor.SetDisplayProperties
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] Engine.Actor.GetHumanReadableName
	 void                      POVChanged ( class APlayerController* PC, bool bBehindViewChanged );		//  Engine.Actor.POVChanged
	 void                      BecomeViewTarget (  );                            		//  Engine.Actor.BecomeViewTarget
	 void                      eventTravelPostAccept (  );                       		// [ FUNC_Event ] Engine.Actor.TravelPostAccept
	 void                      eventTravelPreAccept (  );                        		// [ FUNC_Event ] Engine.Actor.TravelPreAccept
	 bool                      CheckForErrors (  );                              		//  Engine.Actor.CheckForErrors
	 void                      HurtRadius ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation );		// [ FUNC_Simulated ] Engine.Actor.HurtRadius
	 void                      PrecacheAnnouncer ( class AAnnouncerVoice* V, bool bRewardSounds );		// [ FUNC_Simulated ] Engine.Actor.PrecacheAnnouncer
	 void                      UpdateAnnouncements (  );                         		// [ FUNC_Simulated ] Engine.Actor.UpdateAnnouncements
	 void                      UpdatePrecacheSkeletalMeshes (  );                		// [ FUNC_Simulated ] Engine.Actor.UpdatePrecacheSkeletalMeshes
	 void                      UpdatePrecacheStaticMeshes (  );                  		// [ FUNC_Simulated ] Engine.Actor.UpdatePrecacheStaticMeshes
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] Engine.Actor.UpdatePrecacheMaterials
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Event ] Engine.Actor.PostNetBeginPlay
	 void                      eventSetGRIInitialState (  );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.Actor.SetGRIInitialState
	 void                      eventSetInitialState (  );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.Actor.SetInitialState
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.Actor.PostBeginPlay
	 void                      eventBroadcastLocalizedMessage ( class UClass* MessageClass, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Event ] Engine.Actor.BroadcastLocalizedMessage
	 void                      ForceBegin (  );                                  		//  Engine.Actor.ForceBegin
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.Actor.PreBeginPlay
	 void                      eventRenderTexture ( class UScriptedTexture* Tex );		// [ FUNC_Event ] Engine.Actor.RenderTexture
	 void                      RenderOverlays ( class UCanvas* Canvas );         		//  Engine.Actor.RenderOverlays
	 void                      eventRecoverFromBadStateCode (  );                		// [ FUNC_Event ] Engine.Actor.RecoverFromBadStateCode
	 class FColor              Multiply_ColorFloat ( class FColor A, float B );  		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0228 ] Engine.Actor.Multiply_ColorFloat
	 class FColor              Add_ColorColor ( class FColor A, class FColor B );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0227 ] Engine.Actor.Add_ColorColor
	 class FColor              Multiply_FloatColor ( float A, class FColor B );  		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0226 ] Engine.Actor.Multiply_FloatColor
	 class FColor              Subtract_ColorColor ( class FColor A, class FColor B );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0225 ] Engine.Actor.Subtract_ColorColor
	 void                      IterateObjectArray ( class TArray< class UObject* > ObjectArray, class UClass* baseClass, class UObject** Object );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.IterateObjectArray
	 void                      IterateActorArray ( class TArray< class AActor* > ActorArray, class UClass* baseClass, struct FName MatchTag, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.IterateActorArray
	 void                      CollidingActors ( class UClass* baseClass, float Radius, struct FVector loc, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0141 ] Engine.Actor.CollidingActors
	 void                      VisibleCollidingActors ( class UClass* baseClass, float Radius, struct FVector loc, bool bIgnoreHidden, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0138 ] Engine.Actor.VisibleCollidingActors
	 void                      VisibleActors ( class UClass* baseClass, float Radius, struct FVector loc, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0137 ] Engine.Actor.VisibleActors
	 void                      RadiusActors ( class UClass* baseClass, float Radius, struct FVector loc, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0136 ] Engine.Actor.RadiusActors
	 void                      TraceActors ( class UClass* baseClass, struct FVector End, struct FVector Start, struct FVector Extent, class AActor** Actor, struct FVector* HitLoc, struct FVector* HitNorm );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0135 ] Engine.Actor.TraceActors
	 void                      TouchingActors ( class UClass* baseClass, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0133 ] Engine.Actor.TouchingActors
	 void                      BasedActors ( class UClass* baseClass, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0132 ] Engine.Actor.BasedActors
	 void                      ChildActors ( class UClass* baseClass, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0131 ] Engine.Actor.ChildActors
	 void                      DynamicActors ( class UClass* baseClass, struct FName MatchTag, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0139 ] Engine.Actor.DynamicActors
	 void                      AllActors ( class UClass* baseClass, struct FName MatchTag, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0130 ] Engine.Actor.AllActors
	 bool                      MoveCacheEntry ( struct FString Guid, struct FString NewFilename );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.MoveCacheEntry
	 bool                      GetCacheEntry ( int Num, struct FString* Guid, struct FString* fileName );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetCacheEntry
	 void                      GetAllIntDesc ( struct FString MetaClass, class TArray< struct FString >* Entry, class TArray< struct FString >* Description );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetAllIntDesc
	 void                      GetAllInt ( struct FString MetaClass, class TArray< struct FString > Entries );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetAllInt
	 void                      GetNextIntDesc ( struct FString ClassName, int Num, struct FString* Entry, struct FString* Description );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetNextIntDesc
	 struct FString            GetNextInt ( struct FString ClassName, int Num ); 		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetNextInt
	 struct FString            GetURLMap ( bool bIncludeOptions );               		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0223 ] Engine.Actor.GetURLMap
	 void                      GetNextSkin ( struct FString Prefix, struct FString CurrentSkin, int Dir, struct FString* SkinName, struct FString* SkinDesc );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0221 ] Engine.Actor.GetNextSkin
	 struct FString            GetMapName ( struct FString NameEnding, struct FString MapName, int Dir );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x021B ] Engine.Actor.GetMapName
	 void                      AddToPackageMap ( struct FString PackageName );   		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AddToPackageMap
	 void                      ResetStaticFilterState (  );                      		// [ FUNC_Final | FUNC_Native ] Engine.Actor.ResetStaticFilterState
	 void                      eventBeginPlay (  );                              		// [ FUNC_Event ] Engine.Actor.BeginPlay
	 void                      eventPostTeleport ( class ATeleporter* OutTeleporter );		// [ FUNC_Event ] Engine.Actor.PostTeleport
	 bool                      eventPreTeleport ( class ATeleporter* InTeleporter );		// [ FUNC_Event ] Engine.Actor.PreTeleport
	 struct FVector            SuggestFallVelocity ( struct FVector Destination, struct FVector Start, float MaxZ, float MaxXYSpeed );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SuggestFallVelocity
	 bool                      PlayerCanSeeMe (  );                              		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0214 ] Engine.Actor.PlayerCanSeeMe
	 void                      MakeNoise ( float Loudness );                     		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0200 ] Engine.Actor.MakeNoise
	 bool                      ForceFeedbackSupported ( bool Enable );           		// [ FUNC_Final | FUNC_Native ] Engine.Actor.ForceFeedbackSupported
	 void                      ChangeBaseParamsFeedbackEffect ( struct FString EffectName, float DirectionX, float DirectionY, float Gain );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0239 ] Engine.Actor.ChangeBaseParamsFeedbackEffect
	 void                      ChangeSpringFeedbackEffect ( struct FString EffectName, float CenterX, float CenterY );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0238 ] Engine.Actor.ChangeSpringFeedbackEffect
	 void                      StopFeedbackEffect ( struct FString EffectName ); 		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0237 ] Engine.Actor.StopFeedbackEffect
	 void                      PlayFeedbackEffect ( struct FString EffectName ); 		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0236 ] Engine.Actor.PlayFeedbackEffect
	 float                     GetSoundDuration ( class USound* Sound );         		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetSoundDuration
	 bool                      IsSoundPlayingHK ( int SourceID );                		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.IsSoundPlayingHK
	 bool                      StopSoundHK ( int SourceID );                     		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.StopSoundHK
	 void                      StopLoopSoundByActor (  );                        		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.StopLoopSoundByActor
	 void                      StopAllSoundByActor (  );                         		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.StopAllSoundByActor
	 void                      StopAllSound (  );                                		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.StopAllSound
	 void                      StopSound ( unsigned char Slot, bool bNoOverride );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.StopSound
	 void                      eventDemoPlaySound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate );		// [ FUNC_Simulated | FUNC_Event | FUNC_Native ] Engine.Actor.DemoPlaySound
	 int                       PlayOwnedSound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.PlayOwnedSound
	 int                       PlaySound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0108 ] Engine.Actor.PlaySound
	 int                       SpecPlaySoundHK2 ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, struct FVector SoundLocation );		// [ FUNC_Native ] Engine.Actor.SpecPlaySoundHK2
	 int                       PlaySoundHK2 ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, struct FVector SoundLocation );		// [ FUNC_Native ] Engine.Actor.PlaySoundHK2
	 int                       ServerSpecPlaySoundHK ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		//  Engine.Actor.ServerSpecPlaySoundHK
	 int                       SpecPlaySoundHK ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		// [ FUNC_Native ] Engine.Actor.SpecPlaySoundHK
	 int                       PlaySoundHK ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		// [ FUNC_Native ] Engine.Actor.PlaySoundHK
	 int                       fPlaySound ( struct FString fileName, unsigned char Slot, bool bNoOverride, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		// [ FUNC_Native ] Engine.Actor.fPlaySound
	 void                      eventPostLoadSavedGame (  );                      		// [ FUNC_Event ] Engine.Actor.PostLoadSavedGame
	 void                      eventPreSaveGame (  );                            		// [ FUNC_Event ] Engine.Actor.PreSaveGame
	 void                      SetTimer ( float NewTimerRate, bool bLoop );      		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0118 ] Engine.Actor.SetTimer
	 void                      eventTornOff (  );                                		// [ FUNC_Event ] Engine.Actor.TornOff
	// bool                      Destroy (  );                                     		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0117 ] Engine.Actor.Destroy
	 class AActor*             Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation, bool bNoCollisionFail );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0116 ] Engine.Actor.Spawn
	 bool                      TraceThisActorHitPart ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, unsigned char* HitCollisionPart );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.TraceThisActorHitPart
	 bool                      TraceThisActor ( struct FVector TraceEnd, struct FVector TraceStart, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.TraceThisActor
	 bool                      FastTrace ( struct FVector TraceEnd, struct FVector TraceStart );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0224 ] Engine.Actor.FastTrace
	 void                      MultiTrace ( struct FVector TraceEnd, struct FVector TraceStart, bool bTraceActors, bool bTraceMaterial, struct FVector Extent, class UBtrTraceResult** BtrResult );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.MultiTrace
	 class AActor*             Trace ( struct FVector TraceEnd, struct FVector TraceStart, bool bTraceActors, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material, unsigned char* CollPart );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0115 ] Engine.Actor.Trace
	 bool                      GetNameFromStr ( struct FString strName, struct FName* retName );		// [ FUNC_Native ] Engine.Actor.GetNameFromStr
	 void                      eventTakeHeadRoundBullet ( struct FVector HitLocation, int WeaponType );		// [ FUNC_Event ] Engine.Actor.TakeHeadRoundBullet
	 bool                      HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );		//  Engine.Actor.HealDamage
	 void                      eventTakeDamage ( int Damage, class APawn* EventInstigator, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		// [ FUNC_Event ] Engine.Actor.TakeDamage
	 void                      eventKilledBy ( class APawn* EventInstigator );   		// [ FUNC_Event ] Engine.Actor.KilledBy
	 void                      eventFellOutOfWorld ( unsigned char KillType );   		// [ FUNC_Simulated | FUNC_Event ] Engine.Actor.FellOutOfWorld
	 void                      eventUsedBy ( class APawn* User );                		// [ FUNC_Event ] Engine.Actor.UsedBy
	 void                      eventEndedRotation (  );                          		// [ FUNC_Event ] Engine.Actor.EndedRotation
	 void                      eventFinishedInterpolation (  );                  		// [ FUNC_Event ] Engine.Actor.FinishedInterpolation
	 void                      eventRanInto ( class AActor* Other );             		// [ FUNC_Event ] Engine.Actor.RanInto
	 void                      eventEncroachedBy ( class AActor* Other );        		// [ FUNC_Event ] Engine.Actor.EncroachedBy
	 bool                      eventEncroachingOn ( class AActor* Other );       		// [ FUNC_Event ] Engine.Actor.EncroachingOn
	 class AActor*             eventSpecialHandling ( class APawn* Other );      		// [ FUNC_Event ] Engine.Actor.SpecialHandling
	 void                      eventDetach ( class AActor* Other );              		// [ FUNC_Event ] Engine.Actor.Detach
	 void                      eventAttach ( class AActor* Other );              		// [ FUNC_Event ] Engine.Actor.Attach
	 void                      eventBaseChange (  );                             		// [ FUNC_Event ] Engine.Actor.BaseChange
	 void                      eventBump ( class AActor* Other );                		// [ FUNC_Event ] Engine.Actor.Bump
	 void                      eventUnTouch ( class AActor* Other );             		// [ FUNC_Event ] Engine.Actor.UnTouch
	 void                      eventPostTouch ( class AActor* Other );           		// [ FUNC_Event ] Engine.Actor.PostTouch
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Event ] Engine.Actor.Touch
	 void                      eventPhysicsVolumeChange ( class APhysicsVolume* NewVolume );		// [ FUNC_Event ] Engine.Actor.PhysicsVolumeChange
	 void                      eventZoneChange ( class AZoneInfo* NewZone );     		// [ FUNC_Event ] Engine.Actor.ZoneChange
	 void                      eventLanded ( struct FVector HitNormal );         		// [ FUNC_Event ] Engine.Actor.Landed
	 void                      eventFalling (  );                                		// [ FUNC_Event ] Engine.Actor.Falling
	 void                      eventHitWall ( struct FVector HitNormal, class AActor* HitWall, class UMaterial* HitMaterial );		// [ FUNC_Event ] Engine.Actor.HitWall
	 void                      eventTimer (  );                                  		// [ FUNC_Event ] Engine.Actor.Timer
	 void                      TimerPop ( class AVolumeTimer* t );               		// [ FUNC_Simulated ] Engine.Actor.TimerPop
	 void                      eventEndEvent (  );                               		// [ FUNC_Event ] Engine.Actor.EndEvent
	 void                      eventBeginEvent (  );                             		// [ FUNC_Event ] Engine.Actor.BeginEvent
	 void                      eventUnTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] Engine.Actor.UnTrigger
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] Engine.Actor.Trigger
	 void                      eventClientTrigger (  );                          		// [ FUNC_Event ] Engine.Actor.ClientTrigger
	 void                      eventPostNetReceive (  );                         		// [ FUNC_Event ] Engine.Actor.PostNetReceive
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Event ] Engine.Actor.Tick
	 void                      eventLostChild ( class AActor* Other );           		// [ FUNC_Event ] Engine.Actor.LostChild
	 void                      eventGainedChild ( class AActor* Other );         		// [ FUNC_Event ] Engine.Actor.GainedChild
	 void                      CheckLifeSpanReplicated (  );                     		// [ FUNC_Simulated ] Engine.Actor.CheckLifeSpanReplicated
	 void                      RegisterDestroyListener ( class UObject* o );     		//  Engine.Actor.RegisterDestroyListener
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] Engine.Actor.Destroyed
	 bool                      IsPenetrate (  );                                 		// [ FUNC_Final | FUNC_Native ] Engine.Actor.IsPenetrate
	 float                     GetMusicDuration ( int SongHandle );              		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetMusicDuration
	 void                      StopAllMusicAndClearQueue ( float FadeOutTime );  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.StopAllMusicAndClearQueue
	 void                      StopAllMusic ( float FadeOutTime );               		// [ FUNC_Final | FUNC_Native ] Engine.Actor.StopAllMusic
	 void                      StopMusic ( int SongHandle, float FadeOutTime );  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.StopMusic
	 bool                      IsPlayingMusic ( int SongHandle );                		// [ FUNC_Final | FUNC_Native ] Engine.Actor.IsPlayingMusic
	 int                       PlayMusic ( struct FString Song, float FadeInTime, float InitialSeekTime );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.PlayMusic
	 bool                      PauseStream ( int Handle );                       		// [ FUNC_Final | FUNC_Native ] Engine.Actor.PauseStream
	 bool                      AdjustVolume ( int Handle, float NewVolume );     		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AdjustVolume
	 int                       SeekStream ( int Handle, float Seconds );         		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SeekStream
	 void                      StopStream ( int Handle, float FadeOutTime );     		// [ FUNC_Final | FUNC_Native ] Engine.Actor.StopStream
	 int                       PlayStream ( struct FString Song, bool UseMusicVolume, float Volume, float FadeInTime, float SeekTime );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.PlayStream
	 void                      AllowMusicPlayback ( bool Allow );                		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AllowMusicPlayback
	 void                      UnClock ( float* Time );                          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.UnClock
	 void                      Clock ( float* Time );                            		// [ FUNC_Final | FUNC_Native ] Engine.Actor.Clock
	 bool                      eventKUpdateState ( struct FKRigidBodyState* NewState );		// [ FUNC_Event ] Engine.Actor.KUpdateState
	 void                      eventKApplyForce ( struct FVector* Force, struct FVector* Torque );		// [ FUNC_Event ] Engine.Actor.KApplyForce
	 void                      eventKSkelConvulse (  );                          		// [ FUNC_Event ] Engine.Actor.KSkelConvulse
	 void                      eventKVelDropBelow (  );                          		// [ FUNC_Event ] Engine.Actor.KVelDropBelow
	 void                      eventKImpact ( class AActor* Other, struct FVector pos, struct FVector impactVel, struct FVector impactNorm );		// [ FUNC_Event ] Engine.Actor.KImpact
	 bool                      KIsRagdollAvailable (  );                         		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KIsRagdollAvailable
	 void                      KMakeRagdollAvailable (  );                       		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KMakeRagdollAvailable
	 void                      KRemoveAllBoneLifters (  );                       		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KRemoveAllBoneLifters
	 void                      KRemoveLifterFromBone ( struct FName BoneName );  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KRemoveLifterFromBone
	 void                      KAddBoneLifter ( struct FName BoneName, struct FInterpCurve LiftVel, float LateralFriction, struct FInterpCurve Softness );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KAddBoneLifter
	 void                      KScaleJointLimits ( float Scale, float stiffness );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KScaleJointLimits
//	 void                      KFreezeRagdoll (  );                              		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KFreezeRagdoll
	 float                     KGetSkelMass (  );                                		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetSkelMass
	 void                      KSetSkelVel ( struct FVector Velocity, struct FVector AngVelocity, bool AddToCurrent );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetSkelVel
	 void                      KEnableCollision ( class AActor* Other );         		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KEnableCollision
	 void                      KDisableCollision ( class AActor* Other );        		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KDisableCollision
	 float                     KGetActorGravScale (  );                          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetActorGravScale
	 void                      KSetActorGravScale ( float ActorGravScale );      		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetActorGravScale
	 void                      KSetBlockKarma ( bool newBlock );                 		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetBlockKarma
	 void                      KSetStayUprightParams ( float stiffness, float damping );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetStayUprightParams
	 void                      KSetStayUpright ( bool stayUpright, bool allowRotate );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetStayUpright
//	 void                      KAddAngularImpulse ( struct FVector AngImpulse ); 		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KAddAngularImpulse
//	 void                      KAddImpulse ( struct FVector Impulse, struct FVector Position, struct FName BoneName );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KAddImpulse
//	 bool                      KIsAwake (  );                                    		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KIsAwake
//	 void                      KWake (  );                                       		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KWake
	 float                     KGetImpactThreshold (  );                         		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetImpactThreshold
	 void                      KSetImpactThreshold ( float thresh );             		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetImpactThreshold
	 void                      KGetCOMPosition ( struct FVector* pos );          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetCOMPosition
	 void                      KGetCOMOffset ( struct FVector* offset );         		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetCOMOffset
	 void                      KSetCOMOffset ( struct FVector offset );          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetCOMOffset
	 float                     KGetRestitution (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetRestitution
	 void                      KSetRestitution ( float rest );                   		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetRestitution
	 float                     KGetFriction (  );                                		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetFriction
	 void                      KSetFriction ( float friction );                  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetFriction
	 void                      KGetDampingProps ( float* lindamp, float* angdamp );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetDampingProps
	 void                      KSetDampingProps ( float lindamp, float angdamp );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetDampingProps
	 void                      KGetInertiaTensor ( struct FVector* it1, struct FVector* it2 );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetInertiaTensor
	 void                      KSetInertiaTensor ( struct FVector it1, struct FVector it2 );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetInertiaTensor
	 float                     KGetMass (  );                                    		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetMass
	 void                      KSetMass ( float Mass );                          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetMass
	 struct FKRBVec            KRBVecFromVector ( struct FVector V );            		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KRBVecFromVector
	 struct FVector            KRBVecToVector ( struct FKRBVec RBvec );          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KRBVecToVector
	 void                      KDrawRigidBodyState ( struct FKRigidBodyState RBstate, bool AltColour );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KDrawRigidBodyState
	 void                      KGetRigidBodyState ( struct FKRigidBodyState* RBstate );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetRigidBodyState
	 struct FQuat              KGetRBQuaternion (  );                            		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetRBQuaternion
	 void                      KSetSimParams ( struct FKSimParams SimParams );   		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KSetSimParams
	 void                      KGetSimParams ( struct FKSimParams* SimParams );  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.KGetSimParams
	 void                      OnlyAffectPawns ( bool B );                       		// [ FUNC_Final | FUNC_Native ] Engine.Actor.OnlyAffectPawns
	 void                      SetPhysics ( unsigned char newPhysics );          		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0F82 ] Engine.Actor.SetPhysics
	 void                      FinishInterpolation (  );                         		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x012D ] Engine.Actor.FinishInterpolation
	 void                      DebugUnclock (  );                                		// [ FUNC_Final | FUNC_Native ] Engine.Actor.DebugUnclock
	 void                      DebugClock (  );                                  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.DebugClock
	 void                      ClearStayingDebugLines (  );                      		// [ FUNC_Final | FUNC_Native ] Engine.Actor.ClearStayingDebugLines
	 void                      DrawDebugSphere ( struct FVector Base, float Radius, int NumDivisions, unsigned char R, unsigned char G, unsigned char B );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.DrawDebugSphere
	 void                      DrawDebugCircle ( struct FVector Base, struct FVector X, struct FVector Y, float Radius, int NumSides, unsigned char R, unsigned char G, unsigned char B );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.DrawDebugCircle
	 void                      DrawStayingDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.DrawStayingDebugLine
	 void                      DrawDebugLine ( struct FVector LineStart, struct FVector LineEnd, unsigned char R, unsigned char G, unsigned char B );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.DrawDebugLine
	 struct FPlane             GetRenderBoundingSphere (  );                     		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetRenderBoundingSphere
	 struct FString            GetUrlOption ( struct FString Option );           		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetUrlOption
	 void                      UpdateURL ( struct FString NewOption, struct FString NewValue, bool bSaveDefault );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.UpdateURL
	 struct FName              GetClosestBone ( struct FVector loc, struct FVector ray, struct FName BiasBone, float BiasDistance, float* boneDist );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetClosestBone
	 bool                      AnimIsInGroup ( int Channel, struct FName GroupName );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AnimIsInGroup
	 void                      GetAnimParams ( int Channel, struct FName* OutSeqName, float* OutAnimFrame, float* OutAnimRate );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetAnimParams
	 void                      SetBoneRotation ( struct FName BoneName, struct FRotator BoneTurn, int Space, float Alpha );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.SetBoneRotation
	 void                      SetBoneLocation ( struct FName BoneName, struct FVector BoneTrans, float Alpha );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetBoneLocation
	 void                      SetBoneDirection ( struct FName BoneName, struct FRotator BoneTurn, struct FVector BoneTrans, float Alpha, int Space );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetBoneDirection
	 void                      SetBoneScale ( int Slot, float BoneScale, struct FName BoneName );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetBoneScale
	 void                      LockRootMotion ( int Lock );                      		// [ FUNC_Final | FUNC_Native ] Engine.Actor.LockRootMotion
//	 bool                      DetachFromBone ( class AActor* Attachment );      		// [ FUNC_Final | FUNC_Native ] Engine.Actor.DetachFromBone
//	 bool                      AttachToBone ( class AActor* Attachment, struct FName BoneName );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AttachToBone
	 struct FRotator           GetRootRotationDelta (  );                        		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetRootRotationDelta
	 struct FVector            GetRootLocationDelta (  );                        		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetRootLocationDelta
	 struct FRotator           GetRootRotation (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetRootRotation
	 struct FVector            GetRootLocation (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetRootLocation
	 struct FRotator           GetBoneRotation ( struct FName BoneName, int Space );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetBoneRotation
	 struct FCoords            GetBoneCoords ( struct FName BoneName );          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetBoneCoords
	 void                      AnimBlendToAlpha ( int Stage, float TargetAlpha, float TimeInterval );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AnimBlendToAlpha
	 void                      AnimBlendParams ( int Stage, float BlendAlpha, float InTime, float OutTime, struct FName BoneName, bool bGlobalPose );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AnimBlendParams
	 void                      BoneRefresh (  );                                 		// [ FUNC_Final | FUNC_Native ] Engine.Actor.BoneRefresh
	 void                      LinkMesh ( class UMesh* NewMesh, bool bKeepAnim );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.LinkMesh
	 void                      LinkSkelAnim ( class UMeshAnimation* Anim, class UMesh* NewMesh );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Actor.LinkSkelAnim
	 int                       GetNotifyChannel (  );                            		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetNotifyChannel
	 void                      EnableChannelNotify ( int Channel, int Switch );  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.EnableChannelNotify
	 void                      eventAnimEnd ( int Channel );                     		// [ FUNC_Event ] Engine.Actor.AnimEnd
	 void                      eventLIPSincAnimEnd (  );                         		// [ FUNC_Event ] Engine.Actor.LIPSincAnimEnd
	 struct FString            CurrentLIPSincAnim (  );                          		// [ FUNC_Final | FUNC_Native ] Engine.Actor.CurrentLIPSincAnim
	 bool                      IsPlayingLIPSincAnim (  );                        		// [ FUNC_Final | FUNC_Native ] Engine.Actor.IsPlayingLIPSincAnim
	 bool                      HasLIPSincAnim ( struct FName LIPSincAnimName );  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.HasLIPSincAnim
	 void                      StopLIPSincAnim (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.Actor.StopLIPSincAnim
	 void                      PlayLIPSincAnim ( struct FName LIPSincAnimName, float Volume, float Radius, float Pitch );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.PlayLIPSincAnim
	 void                      AnimStopLooping ( int Channel );                  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.AnimStopLooping
	 bool                      IsTweening ( int Channel );                       		// [ FUNC_Final | FUNC_Native ] Engine.Actor.IsTweening
	 void                      SetAnimFrame ( float Time, int Channel, int UnitFlag );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetAnimFrame
	 void                      FreezeAnimAt ( float Time, int Channel );         		// [ FUNC_Final | FUNC_Native ] Engine.Actor.FreezeAnimAt
	 void                      StopAnimating ( bool ClearAllButBase );           		// [ FUNC_Final | FUNC_Native ] Engine.Actor.StopAnimating
	 bool                      HasAnim ( struct FName Sequence );                		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0107 ] Engine.Actor.HasAnim
	 void                      FinishAnim ( int Channel );                       		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x0105 ] Engine.Actor.FinishAnim
	 bool                      IsAnimating ( int Channel );                      		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x011A ] Engine.Actor.IsAnimating
	 bool                      TweenAnim ( struct FName Sequence, float Time, int Channel );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0126 ] Engine.Actor.TweenAnim
	 bool                      LoopAnim ( struct FName Sequence, float Rate, float TweenTime, int Channel );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0104 ] Engine.Actor.LoopAnim
	 bool                      PlayAnim ( struct FName Sequence, float Rate, float TweenTime, int Channel );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0103 ] Engine.Actor.PlayAnim
	 struct FString            GetMeshName (  );                                 		// [ FUNC_Final | FUNC_Native ] Engine.Actor.GetMeshName
	 bool                      IsJoinedTo ( class AActor* Other );               		// [ FUNC_Final | FUNC_Native ] Engine.Actor.IsJoinedTo
//	 void                      SetOwner ( class AActor* NewOwner );              		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0110 ] Engine.Actor.SetOwner
	 void                      SetBase ( class AActor* NewBase, struct FVector NewFloor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x012A ] Engine.Actor.SetBase
	 void                      SetBaseMaterial ( class UMaterial* NewBaseMaterial );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetBaseMaterial
	 void                      AutonomousPhysics ( float DeltaSeconds );         		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0F83 ] Engine.Actor.AutonomousPhysics
	 bool                      MoveSmooth ( struct FVector Delta, bool TestCollide );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0F81 ] Engine.Actor.MoveSmooth
	 bool                      SetRelativeLocation ( struct FVector NewLocation );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetRelativeLocation
	 bool                      SetRelativeRotation ( struct FRotator NewRotation );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetRelativeRotation
	 bool                      SetRotation ( struct FRotator NewRotation );      		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x012B ] Engine.Actor.SetRotation
	 bool                      SetLocation ( struct FVector NewLocation );       		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x010B ] Engine.Actor.SetLocation
	 bool                      Move ( struct FVector Delta );                    		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x010A ] Engine.Actor.Move
	 void                      SetDrawType ( unsigned char NewDrawType );        		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetDrawType
//	 void                      SetStaticMesh ( class UStaticMesh* NewStaticMesh );		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetStaticMesh
//	 void                      SetDrawScale3D ( struct FVector NewScale3D );     		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetDrawScale3D
//	 void                      SetDrawScale ( float NewScale );                  		// [ FUNC_Final | FUNC_Native ] Engine.Actor.SetDrawScale
//	 bool                      SetCollisionSize ( float NewRadius, float NewHeight );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x011B ] Engine.Actor.SetCollisionSize
	 void                      SetCollision ( bool NewColActors, bool NewBlockActors, bool NewBlockPlayers );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0106 ] Engine.Actor.SetCollision
	 void                      Sleep ( float Seconds );                          		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x0100 ] Engine.Actor.Sleep
	 bool                      ShouldBeHidden (  );                              		// [ FUNC_Final | FUNC_Native ] Engine.Actor.ShouldBeHidden
	 void                      Error ( struct FString S );                       		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x00E9 ] Engine.Actor.Error
	 void                      TextToSpeech ( struct FString Text, float Volume );		// [ FUNC_Native ] Engine.Actor.TextToSpeech
	 void                      CopyObjectToClipboard ( class UObject* obj );     		// [ FUNC_Native ] Engine.Actor.CopyObjectToClipboard
	 struct FString            ConsoleCommand ( struct FString Command, bool bWriteToLog );		// [ FUNC_Native ] Engine.Actor.ConsoleCommand

	// Public Imports
	AActor(class AActor const &);
	AActor(void);
	class AActor &  operator=(class AActor const &);
	void  AddAntiportals(void);
	void  AttachProjector(class AProjector *);
	int  AttachToBone(class AActor *,class FName);
	void  BeginTouch(class AActor *);
	void  CheckNoiseHearing(float);
	void  ClearOctreeData(void);
	void  ClearRenderData(void);
	int  DetachFromBone(class AActor *);
	void  DetachProjector(class AProjector *);
	void  EndTouch(class AActor *,int);
	unsigned long  FastTraceImp(class FVector const &,class FVector const &);
	void  FindBase(void);
	class FDynamicActor *  GetActorRenderData(void);
	class AActor *  GetAmbientLightingActor(void);
	class FVector  GetCylinderExtent(void)const ;
	class AActor *  GetHitActor(void);
	class ULevel *  GetLevel(void)const ;
	class FDynamicLight *  GetLightRenderData(void);
	void  GetNetBuoyancy(float &,float &);
	class APawn *  GetPlayerPawn(void)const ;
	class AActor *  GetTopOwner(void);
	class FRotator  GetViewRotation(void);
	static void  InternalConstructor(void *);
	int  IsAnimating(int)const ;
	int  IsBasedOn(class AActor const *)const ;
	int  IsBlockedBy(class AActor const *)const ;
	int  IsBrush(void)const ;
	int  IsEncroacher(void)const ;
	int  IsHiddenEd(void);
	int  IsInOctree(void);
	int  IsInZone(class AZoneInfo const *)const ;
	int  IsMovingBrush(void)const ;
	int  IsOverlapping(class AActor *,struct FCheckResult *);
	int  IsOwnedBy(class AActor const *)const ;
	int  IsPlayer(void)const ;
	int  IsStaticBrush(void)const ;
	int  IsVolumeBrush(void)const ;
	void  KAddAngularImpulse(class FVector);
	void  KAddForces(class FVector,class FVector);
	void  KAddImpulse(class FVector,class FVector,class FName);
	void  KDrawRigidBodyState(struct _FKRigidBodyState *,int);
	void  KFreezeRagdoll(void);
	void  KGetRigidBodyState(struct _FKRigidBodyState *);
	int  KIsAwake(void);
	void  KWake(void);
	float  LifeFraction(void);
	void  MultiTrace(class UBtrTraceResult *,class FVector const &,class FVector const &,int,int,class FVector const &);
	void  PlayReplicatedAnim(void);
	void  ProcessDemoRecFunction(class UFunction *,void *,struct FFrame *);
	void  ReplicateAnim(int,class FName,float,float,float,float,int);
	void  SetCollision(int,int);
	void  SetCollisionSize(float,float);
	void  SetDrawScale3D(class FVector);
	void  SetDrawScale(float);
	void  SetDrawType(enum EDrawType);
	void  SetOwner(class AActor *);
	bool  SetRotationImp2(class FRotator const &);
	void  SetRotationImp(class FRotator const &,void *);
	void  SetStaticMesh(class UStaticMesh *);
	static class UClass *  StaticClass(void);
	class FVector  SuggestFallVelocity(class FVector,class FVector,float,float,float,float);
	int  TestCanSeeMe(class APlayerController *);
	void  TextToSpeech(class FString const &,float);
	void  TraceImp(class FVector *,class FVector *,class FVector const &,class FVector const &,unsigned long,class FVector,class UMaterial * *,int *,void *);
	unsigned long  TraceThisActorImp2(class FVector *,class FVector *,class FVector const &,class FVector const &,class FVector const &);
	void  TraceThisActorImp(class FVector *,class FVector *,class FVector const &,class FVector const &,class FVector const &,unsigned long *);
	void  TwoWallAdjust(class FVector &,class FVector &,class FVector &,class FVector &,float);
	void  UpdateOverlay(float);
	void  UpdateRelativeRotation(void);
	void  UpdateRenderData(void);
	void  UpdateTimers(float);
	int  fixedTurn(int,int,int);
	int  moveSmooth(class FVector);
	void  physKarmaRagDoll(float);
	void  physKarmaRagDoll_internal(float);
	void  physKarma_internal(float);
	void  physProjectile(float,int);
	void  physRootMotion(float);
	void  physTrailer(float);
	void  physicsRotation(float);
	void  postKarmaStep_skeletal(void);
	void  preKarmaStep_skeletal(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x039C

// Class Engine.wAILevelBase
class DLL_IMPORT AwAILevelBase : public AActor
{
public:

	// UScript Functions
	 void                      ClearReferences (  );                             		//  Engine.wAILevelBase.ClearReferences
	 void                      KillBotsTeam ( int Num, int inTeam );             		//  Engine.wAILevelBase.KillBotsTeam
	 void                      KillBots ( int Num );                             		//  Engine.wAILevelBase.KillBots
	 void                      KillBot ( class AAIController* Bot );             		//  Engine.wAILevelBase.KillBot
	 void                      Initialize (  );                                  		//  Engine.wAILevelBase.Initialize

	// Public Imports
	AwAILevelBase(class AwAILevelBase const &);
	class AwAILevelBase &  operator=(class AwAILevelBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.wMatchMaker
class DLL_IMPORT UwMatchMaker : public UObject
{
public:
	struct FTencentLoginInfo                           LoginInfo;                                        		// 0x002C ( 0x0098 ) [ CPF_NeedCtorLink ]
	unsigned char                                      GamePageState;                                    		// 0x00C4 ( 0x0001 ) 
	unsigned char                                      GameEndType;                                      		// 0x00C5 ( 0x0001 ) 
	class TArray< struct FPingTime >                   arrPingTime;                                      		// 0x00C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UInteraction*                                Console;                                          		// 0x00D4 ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      bForceGameOut:1;                                  		// 0x00D8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bKickOut:1;                                       		// 0x00D8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bUsing:1;                                         		// 0x00D8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bIsOwner:1;                                       		// 0x00D8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bListen:1;                                        		// 0x00D8 ( 0x0004 )  [0x00000010]
	unsigned long                                      bServerConnected:1;                               		// 0x00D8 ( 0x0004 )  [0x00000020]
	unsigned long                                      IsRelayServerOff:1;                               		// 0x00D8 ( 0x0004 )  [0x00000040]
	unsigned long                                      bSDRespawn:1;                                     		// 0x00D8 ( 0x0004 )  [0x00000080]
	unsigned long                                      bForceSDRespawn:1;                                		// 0x00D8 ( 0x0004 )  [0x00000100]
	unsigned long                                      bAutoStart:1;                                     		// 0x00D8 ( 0x0004 )  [0x00000200]
	struct FString                                     strLoadingErrorMsg;                               		// 0x00DC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szGameClass;                                      		// 0x00E8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szSeverName;                                      		// 0x00F4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szChannelGroup;                                   		// 0x0100 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szChannelName;                                    		// 0x010C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szMapName;                                        		// 0x0118 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szRoomName;                                       		// 0x0124 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szRoomPassword;                                   		// 0x0130 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iNumTeam;                                         		// 0x013C ( 0x0004 ) 
	int                                                iGoalRound;                                       		// 0x0140 ( 0x0004 ) 
	int                                                iTimeLimit;                                       		// 0x0144 ( 0x0004 ) 
	unsigned long                                      bFriendlyFire:1;                                  		// 0x0148 ( 0x0004 )  [0x00000001]
	unsigned long                                      bAllowSpectate:1;                                 		// 0x0148 ( 0x0004 )  [0x00000002]
	unsigned long                                      bAutobalance:1;                                   		// 0x0148 ( 0x0004 )  [0x00000004]
	unsigned long                                      bAllowJoin:1;                                     		// 0x0148 ( 0x0004 )  [0x00000008]
	unsigned long                                      bAllow3rdPersonView:1;                            		// 0x0148 ( 0x0004 )  [0x00000010]
	unsigned long                                      bChatVictimOnly:1;                                		// 0x0148 ( 0x0004 )  [0x00000020]
	unsigned long                                      bHasChannelTCP:1;                                 		// 0x0148 ( 0x0004 )  [0x00000040]
	int                                                LoadingSleepTime;                                 		// 0x014C ( 0x0004 ) 
	int                                                LoadingSleepTimePrecache;                         		// 0x0150 ( 0x0004 ) 
	unsigned char                                      eWeaponLimit;                                     		// 0x0154 ( 0x0001 ) 
	int                                                iMinutesKickAFK;                                  		// 0x0158 ( 0x0004 ) 
	int                                                iMinPlayers;                                      		// 0x015C ( 0x0004 ) 
	int                                                iMaxPlayers;                                      		// 0x0160 ( 0x0004 ) 
	unsigned long                                      InGamePlaying:1;                                  		// 0x0164 ( 0x0004 )  [0x00000001]
	int                                                InGameOver;                                       		// 0x0168 ( 0x0004 ) 
	unsigned long                                      bIsLoading:1;                                     		// 0x016C ( 0x0004 )  [0x00000001]
	unsigned long                                      TR_bNewRespawn:1;                                 		// 0x016C ( 0x0004 )  [0x00000002]
	unsigned long                                      bFreeView:1;                                      		// 0x016C ( 0x0004 )  [0x00000004]
	struct FString                                     OldHostName;                                      		// 0x0170 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bHardCore:1;                                      		// 0x017C ( 0x0004 )  [0x00000001]
	unsigned long                                      bAdminSpectator:1;                                		// 0x017C ( 0x0004 )  [0x00000002]
	unsigned long                                      bMultiBomb:1;                                     		// 0x017C ( 0x0004 )  [0x00000004]
	int                                                SD_ChangeRound;                                   		// 0x0180 ( 0x0004 ) 
	unsigned long                                      SD_ChangeAttackTeam:1;                            		// 0x0184 ( 0x0004 )  [0x00000001]
	unsigned long                                      IsUsingTenProtect:1;                              		// 0x0184 ( 0x0004 )  [0x00000002]
	class TArray< struct FString >                     BlockUserListForOption;                           		// 0x0188 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kFriendListCount;                                 		// 0x0194 ( 0x0004 ) 
	class TArray< struct FFriendStruct >               kFriendList;                                      		// 0x0198 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kClanListCount;                                   		// 0x01A4 ( 0x0004 ) 
	class TArray< struct FClanStruct >                 kClanList;                                        		// 0x01A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kPCBangListCount;                                 		// 0x01B4 ( 0x0004 ) 
	class TArray< struct FPCBangStruct >               kPCBangList;                                      		// 0x01B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kBlockListCount;                                  		// 0x01C4 ( 0x0004 ) 
	class TArray< struct FBlockStruct >                kBlockList;                                       		// 0x01C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      kConnectAlpha;                                    		// 0x01D4 ( 0x0001 ) 
	unsigned char                                      kChannelingType;                                  		// 0x01D5 ( 0x0001 ) 
	int                                                kServerType;                                      		// 0x01D8 ( 0x0004 ) 
	unsigned long                                      kIsDSHost:1;                                      		// 0x01DC ( 0x0004 )  [0x00000001]
	unsigned long                                      kIsInDSChannel:1;                                 		// 0x01DC ( 0x0004 )  [0x00000002]
	unsigned long                                      kDS_SavedOwnerInfo:1;                             		// 0x01DC ( 0x0004 )  [0x00000004]
	unsigned long                                      kClanMatch_InChannel:1;                           		// 0x01DC ( 0x0004 )  [0x00000008]
	unsigned long                                      kClanMatch_InReadyRoom:1;                         		// 0x01DC ( 0x0004 )  [0x00000010]
	unsigned long                                      kClanMatch_Leader:1;                              		// 0x01DC ( 0x0004 )  [0x00000020]
	int                                                kClanMatch_ReadyRoomID;                           		// 0x01E0 ( 0x0004 ) 
	unsigned long                                      kClanMatch_InMatchRoom:1;                         		// 0x01E4 ( 0x0004 )  [0x00000001]
	int                                                kClanMatch_ChannelID;                             		// 0x01E8 ( 0x0004 ) 
	int                                                kClanMatch_RoomID;                                		// 0x01EC ( 0x0004 ) 
	unsigned long                                      kClanMatch_OpenState:1;                           		// 0x01F0 ( 0x0004 )  [0x00000001]
	int                                                kClanMatch_VersusMode;                            		// 0x01F4 ( 0x0004 ) 
	class TArray< int >                                kClanMatch_Map;                                   		// 0x01F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     kClanMatch_RoomName;                              		// 0x0204 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bNewDailyQuestAvailable:1;                        		// 0x0210 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNoUpdateQuestInfo:1;                             		// 0x0210 ( 0x0004 )  [0x00000002]
	unsigned long                                      bRecvProtocolUpdateQuest:1;                       		// 0x0210 ( 0x0004 )  [0x00000004]
	unsigned long                                      bSortQuestList:1;                                 		// 0x0210 ( 0x0004 )  [0x00000008]
	class UObject*                                     kMainMenu;                                        		// 0x0214 ( 0x0004 ) 
	class UBTTcpLink_Channel*                          kTcpChannel;                                      		// 0x0218 ( 0x0004 ) 
	class UBTTcpLink_Process2Agent*                    kTcpDStoDP;                                       		// 0x021C ( 0x0004 ) 
	int                                                kDediServerID;                                    		// 0x0220 ( 0x0004 ) 
	int                                                kDediChannelNum;                                  		// 0x0224 ( 0x0004 ) 
	int                                                kDediRoomNum;                                     		// 0x0228 ( 0x0004 ) 
	int                                                kPID;                                             		// 0x022C ( 0x0004 ) 
	unsigned long                                      kDediIsConnectedWithServer:1;                     		// 0x0230 ( 0x0004 )  [0x00000001]
	unsigned long                                      kCharacterCreation:1;                             		// 0x0230 ( 0x0004 )  [0x00000002]
	unsigned char                                      kInterfaceGuideStep;                              		// 0x0234 ( 0x0001 ) 
	unsigned long                                      kFirstTutorial:1;                                 		// 0x0238 ( 0x0004 )  [0x00000001]
	unsigned long                                      kFirstIntoInventory:1;                            		// 0x0238 ( 0x0004 )  [0x00000002]
	unsigned long                                      kFirstIntoStore:1;                                		// 0x0238 ( 0x0004 )  [0x00000004]
	unsigned long                                      kNeedUpdateItemList:1;                            		// 0x0238 ( 0x0004 )  [0x00000008]
	unsigned long                                      kNeedUpdateSkillList:1;                           		// 0x0238 ( 0x0004 )  [0x00000010]
	unsigned long                                      kNeedUpdatePoint:1;                               		// 0x0238 ( 0x0004 )  [0x00000020]
	unsigned long                                      kNeedUpdateCash:1;                                		// 0x0238 ( 0x0004 )  [0x00000040]
	unsigned long                                      kRecvPaidPCBangInfo:1;                            		// 0x0238 ( 0x0004 )  [0x00000080]
	int                                                kIsPaidPCBang;                                    		// 0x023C ( 0x0004 ) 
	int                                                kIsRegisteredPCBang;                              		// 0x0240 ( 0x0004 ) 
	int                                                kIsMainPCBang;                                    		// 0x0244 ( 0x0004 ) 
	struct FString                                     kPCBangName;                                      		// 0x0248 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kPCBangType;                                      		// 0x0254 ( 0x0004 ) 
	unsigned long                                      kClanLookingFor:1;                                		// 0x0258 ( 0x0004 )  [0x00000001]
	struct FString                                     kPrevClanName;                                    		// 0x025C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     kClanName;                                        		// 0x0268 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kClanPattern;                                     		// 0x0274 ( 0x0004 ) 
	int                                                kClanBG;                                          		// 0x0278 ( 0x0004 ) 
	int                                                kClanBL;                                          		// 0x027C ( 0x0004 ) 
	int                                                kInClanGrade;                                     		// 0x0280 ( 0x0004 ) 
	unsigned long                                      bInverseWeapon:1;                                 		// 0x0284 ( 0x0004 )  [0x00000001]
	int                                                kClanLevel;                                       		// 0x0288 ( 0x0004 ) 
	int                                                kClanExp;                                         		// 0x028C ( 0x0004 ) 
	struct FString                                     kClanMasterName;                                  		// 0x0290 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kClanWin;                                         		// 0x029C ( 0x0004 ) 
	int                                                kClanLose;                                        		// 0x02A0 ( 0x0004 ) 
	int                                                kClanDraw;                                        		// 0x02A4 ( 0x0004 ) 
	int                                                kClanKill;                                        		// 0x02A8 ( 0x0004 ) 
	int                                                kClanDeath;                                       		// 0x02AC ( 0x0004 ) 
	int                                                kClanAssist;                                      		// 0x02B0 ( 0x0004 ) 
	int                                                kClanPrevRanking;                                 		// 0x02B4 ( 0x0004 ) 
	int                                                kClanRanking;                                     		// 0x02B8 ( 0x0004 ) 
	int                                                kClanMonthlyPrevRanking;                          		// 0x02BC ( 0x0004 ) 
	int                                                kClanMonthlyRanking;                              		// 0x02C0 ( 0x0004 ) 
	unsigned char                                      kClanRegion;                                      		// 0x02C4 ( 0x0001 ) 
	int                                                kClanMemberCount;                                 		// 0x02C8 ( 0x0004 ) 
	int                                                kClanMemberMaximum;                               		// 0x02CC ( 0x0004 ) 
	unsigned char                                      kClanIsRecruit;                                   		// 0x02D0 ( 0x0001 ) 
	struct FString                                     kClanHowOld;                                      		// 0x02D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     kClanKeyword;                                     		// 0x02E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     kClanIntro;                                       		// 0x02EC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     kClanNotice;                                      		// 0x02F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kClanActivity;                                    		// 0x0304 ( 0x0004 ) 
	int                                                kClanActivityRank;                                		// 0x0308 ( 0x0004 ) 
	int                                                kClanActivityRankPrev;                            		// 0x030C ( 0x0004 ) 
	int                                                kClanActivityMRank;                               		// 0x0310 ( 0x0004 ) 
	int                                                kClanActivityMRankPrev;                           		// 0x0314 ( 0x0004 ) 
	struct FString                                     kUserName;                                        		// 0x0318 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kLevel;                                           		// 0x0324 ( 0x0004 ) 
	int                                                kUID;                                             		// 0x0328 ( 0x0004 ) 
	int                                                kExp;                                             		// 0x032C ( 0x0004 ) 
	int                                                kStartExp;                                        		// 0x0330 ( 0x0004 ) 
	int                                                kEndExp;                                          		// 0x0334 ( 0x0004 ) 
	int                                                kLevelMarkID;                                     		// 0x0338 ( 0x0004 ) 
	int                                                kTitleMarkID;                                     		// 0x033C ( 0x0004 ) 
	int                                                kReserved1;                                       		// 0x0340 ( 0x0004 ) 
	int                                                kReserved2;                                       		// 0x0344 ( 0x0004 ) 
	int                                                kReserved3;                                       		// 0x0348 ( 0x0004 ) 
	unsigned long                                      kTest:1;                                          		// 0x034C ( 0x0004 )  [0x00000001]
	unsigned long                                      bExistUseAdvCamShake:1;                           		// 0x034C ( 0x0004 )  [0x00000002]
	unsigned char                                      GMLevelFlag;                                      		// 0x0350 ( 0x0001 ) 
	unsigned long                                      isGMRoom:1;                                       		// 0x0354 ( 0x0004 )  [0x00000001]
	class TArray< int >                                kGMListInGameRoom;                                		// 0x0358 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kPrevRanking;                                     		// 0x0364 ( 0x0004 ) 
	int                                                kRanking;                                         		// 0x0368 ( 0x0004 ) 
	int                                                kPrevHeadShotRanking;                             		// 0x036C ( 0x0004 ) 
	int                                                kHeadShotRanking;                                 		// 0x0370 ( 0x0004 ) 
	int                                                kPrevWomanRanking;                                		// 0x0374 ( 0x0004 ) 
	int                                                kWomanRanking;                                    		// 0x0378 ( 0x0004 ) 
	int                                                kMonthlyPrevRanking;                              		// 0x037C ( 0x0004 ) 
	int                                                kMonthlyRanking;                                  		// 0x0380 ( 0x0004 ) 
	int                                                kMonthlyPrevHeadShotRanking;                      		// 0x0384 ( 0x0004 ) 
	int                                                kMonthlyHeadShotRanking;                          		// 0x0388 ( 0x0004 ) 
	int                                                kMonthlyPrevWomanRanking;                         		// 0x038C ( 0x0004 ) 
	int                                                kMonthlyWomanRanking;                             		// 0x0390 ( 0x0004 ) 
	int                                                kKill;                                            		// 0x0394 ( 0x0004 ) 
	int                                                kDeath;                                           		// 0x0398 ( 0x0004 ) 
	int                                                kWin;                                             		// 0x039C ( 0x0004 ) 
	int                                                kLose;                                            		// 0x03A0 ( 0x0004 ) 
	int                                                kAssist;                                          		// 0x03A4 ( 0x0004 ) 
	int                                                kHeadShot;                                        		// 0x03A8 ( 0x0004 ) 
	int                                                kDisConnectCount;                                 		// 0x03AC ( 0x0004 ) 
	int                                                kTotalPlayTime;                                   		// 0x03B0 ( 0x0004 ) 
	int                                                kUser_ClanContribue;                              		// 0x03B4 ( 0x0004 ) 
	int                                                kUser_ClanWin;                                    		// 0x03B8 ( 0x0004 ) 
	int                                                kUser_ClanLose;                                   		// 0x03BC ( 0x0004 ) 
	int                                                kUser_ClanKill;                                   		// 0x03C0 ( 0x0004 ) 
	int                                                kUser_ClanDeath;                                  		// 0x03C4 ( 0x0004 ) 
	int                                                kUser_ClanAssist;                                 		// 0x03C8 ( 0x0004 ) 
	int                                                kUser_ClanHeadshot;                               		// 0x03CC ( 0x0004 ) 
	int                                                kUser_ClanDiscon;                                 		// 0x03D0 ( 0x0004 ) 
	int                                                kFaceID;                                          		// 0x03D4 ( 0x0004 ) 
	int                                                kHelmetID;                                        		// 0x03D8 ( 0x0004 ) 
	int                                                kFaceAccessoryID;                                 		// 0x03DC ( 0x0004 ) 
	int                                                kAFSpecialID;                                     		// 0x03E0 ( 0x0004 ) 
	int                                                kRSASpecialID;                                    		// 0x03E4 ( 0x0004 ) 
	int                                                kPrimaryID;                                       		// 0x03E8 ( 0x0004 ) 
	int                                                kSecondaryID;                                     		// 0x03EC ( 0x0004 ) 
	int                                                kThrow1ID;                                        		// 0x03F0 ( 0x0004 ) 
	int                                                kThrow2ID;                                        		// 0x03F4 ( 0x0004 ) 
	int                                                kSkill1ID;                                        		// 0x03F8 ( 0x0004 ) 
	int                                                kSkill2ID;                                        		// 0x03FC ( 0x0004 ) 
	int                                                kSkill3ID;                                        		// 0x0400 ( 0x0004 ) 
	int                                                kSkill4ID;                                        		// 0x0404 ( 0x0004 ) 
	int                                                kPoint;                                           		// 0x0408 ( 0x0004 ) 
	int                                                kCash;                                            		// 0x040C ( 0x0004 ) 
	int                                                kCCoinCash;                                       		// 0x0410 ( 0x0004 ) 
	int                                                kCurPos;                                          		// 0x0414 ( 0x0004 ) 
	int                                                kCurSubPos;                                       		// 0x0418 ( 0x0004 ) 
	int                                                kChatStatus;                                      		// 0x041C ( 0x0004 ) 
	int                                                kServerGroupID;                                   		// 0x0420 ( 0x0004 ) 
	struct FString                                     kServerGroupName;                                 		// 0x0424 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kServerID;                                        		// 0x0430 ( 0x0004 ) 
	struct FString                                     kServerName;                                      		// 0x0434 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     kServerShortName;                                 		// 0x0440 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kChannelID;                                       		// 0x044C ( 0x0004 ) 
	struct FString                                     kChannelName;                                     		// 0x0450 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kRoomID;                                          		// 0x045C ( 0x0004 ) 
	int                                                kTeamID;                                          		// 0x0460 ( 0x0004 ) 
	int                                                kServerPing;                                      		// 0x0464 ( 0x0004 ) 
	struct FString                                     kGame_RoomName;                                   		// 0x0468 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      kGame_bOwner:1;                                   		// 0x0474 ( 0x0004 )  [0x00000001]
	struct FString                                     kGame_Password;                                   		// 0x0478 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     kGame_MapName;                                    		// 0x0484 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kGame_MapNum;                                     		// 0x0490 ( 0x0004 ) 
	int                                                kGame_GameMode;                                   		// 0x0494 ( 0x0004 ) 
	int                                                kGame_UserCount;                                  		// 0x0498 ( 0x0004 ) 
	int                                                kGame_GameTime;                                   		// 0x049C ( 0x0004 ) 
	int                                                kGame_GameRound;                                  		// 0x04A0 ( 0x0004 ) 
	int                                                kGame_WeaponLimit;                                		// 0x04A4 ( 0x0004 ) 
	unsigned long                                      kGame_TeamBalance:1;                              		// 0x04A8 ( 0x0004 )  [0x00000001]
	unsigned long                                      kGame_bHardCore:1;                                		// 0x04A8 ( 0x0004 )  [0x00000002]
	class TArray< struct FDisplayMode >                SupportModes;                                     		// 0x04AC ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                DefaultSupportModeIdx;                            		// 0x04B8 ( 0x0004 ) 
	float                                              Quest_LastUpdateTime;                             		// 0x04BC ( 0x0004 ) 
	class TArray< struct FQuestItem >                  QuestList;                                        		// 0x04C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                CompletedQuestList;                               		// 0x04CC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                NewQuestList;                                     		// 0x04D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FMissionItem >                MissionList;                                      		// 0x04E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FMissionItem >                TMissionList;                                     		// 0x04F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                My_iUID;                                          		// 0x04FC ( 0x0004 ) 
	int                                                My_iRoom;                                         		// 0x0500 ( 0x0004 ) 
	int                                                My_iTeam;                                         		// 0x0504 ( 0x0004 ) 
	int                                                My_Level;                                         		// 0x0508 ( 0x0004 ) 
	struct FString                                     My_szName;                                        		// 0x050C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      My_AASLevel;                                      		// 0x0518 ( 0x0001 ) 
	class UGameEngine*                                 gEngine;                                          		// 0x051C ( 0x0004 ) 
	class ALevelInfo*                                  playingLevelInfo;                                 		// 0x0520 ( 0x0004 ) 
	unsigned long                                      bShowFont:1;                                      		// 0x0524 ( 0x0004 )  [0x00000001]
	unsigned long                                      bChangingHost:1;                                  		// 0x0524 ( 0x0004 )  [0x00000002]
	unsigned long                                      IsChangeHost_InLoading:1;                         		// 0x0524 ( 0x0004 )  [0x00000004]
	unsigned long                                      IsChangeNewGuest_InLoading:1;                     		// 0x0524 ( 0x0004 )  [0x00000008]
	unsigned long                                      DrawChangeHost_Host:1;                            		// 0x0524 ( 0x0004 )  [0x00000010]
	unsigned long                                      DrawChangeHost_Guest:1;                           		// 0x0524 ( 0x0004 )  [0x00000020]
	struct FString                                     newHostAddr;                                      		// 0x0528 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bForceGameOver:1;                                 		// 0x0534 ( 0x0004 )  [0x00000001]
	unsigned long                                      bPendingStarted:1;                                		// 0x0534 ( 0x0004 )  [0x00000002]
	unsigned long                                      bSendedLoadingFailed:1;                           		// 0x0534 ( 0x0004 )  [0x00000004]
	int                                                ConnectClientNum;                                 		// 0x0538 ( 0x0004 ) 
	int                                                ConnectedCount;                                   		// 0x053C ( 0x0004 ) 
	int                                                DisConnectedUserID;                               		// 0x0540 ( 0x0004 ) 
	unsigned long                                      IsDisconnected:1;                                 		// 0x0544 ( 0x0004 )  [0x00000001]
	int                                                ReconnectClientNum;                               		// 0x0548 ( 0x0004 ) 
	unsigned long                                      bIntervention:1;                                  		// 0x054C ( 0x0004 )  [0x00000001]
	class UwMapSettings*                               MapSettings;                                      		// 0x0550 ( 0x0004 ) 
	unsigned long                                      bShowWarningHostPoint:1;                          		// 0x0554 ( 0x0004 )  [0x00000001]
	int                                                iHardwarePoint;                                   		// 0x0558 ( 0x0004 ) 
	int                                                iAvgFrameRate;                                    		// 0x055C ( 0x0004 ) 
	int                                                iAvgPing;                                         		// 0x0560 ( 0x0004 ) 
	int                                                iHostPoint;                                       		// 0x0564 ( 0x0004 ) 
	unsigned long                                      bShowMessageHostUnsuitableness:1;                 		// 0x0568 ( 0x0004 )  [0x00000001]
	class TArray< class UwMatchUserInfo* >             UserInfos;                                        		// 0x056C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                GmUserNum;                                        		// 0x0578 ( 0x0004 ) 
	class TArray< struct FResultInfo >                 ResultInfos;                                      		// 0x057C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                ResultTeamScores;                                 		// 0x0588 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                ResultBonusOwnerID;                               		// 0x0594 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                ResultBonusID;                                    		// 0x05A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                ResultMainWeaponIDs;                              		// 0x05AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< unsigned char >                      ResultMainWeaponRanks;                            		// 0x05B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< unsigned char >                      ResultMainWeaponExps;                             		// 0x05C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      PlayWithBots:1;                                   		// 0x05D0 ( 0x0004 )  [0x00000001]
	int                                                BotUserTeam;                                      		// 0x05D4 ( 0x0004 ) 
	int                                                BotNum0;                                          		// 0x05D8 ( 0x0004 ) 
	int                                                BotNum1;                                          		// 0x05DC ( 0x0004 ) 
	int                                                BotDifficulty;                                    		// 0x05E0 ( 0x0004 ) 
	unsigned long                                      bBotModeTeamBalance:1;                            		// 0x05E4 ( 0x0004 )  [0x00000001]
	unsigned long                                      BotTutorial:1;                                    		// 0x05E4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bCompletedBotTutorial:1;                          		// 0x05E4 ( 0x0004 )  [0x00000004]
	unsigned long                                      BeginnerMode:1;                                   		// 0x05E4 ( 0x0004 )  [0x00000008]
	unsigned char                                      ResultIsGiveType;                                 		// 0x05E8 ( 0x0001 ) 
	unsigned long                                      ResultIsBootyGet:1;                               		// 0x05EC ( 0x0004 )  [0x00000001]
	unsigned long                                      ResultIsOverlapWeapon:1;                          		// 0x05EC ( 0x0004 )  [0x00000002]
	class TArray< struct FBootyInfo >                  ResultBootyInfo;                                  		// 0x05F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UBTNetGameData*                              NetGameData;                                      		// 0x05FC ( 0x0004 ) 
	unsigned long                                      IsTestMode:1;                                     		// 0x0600 ( 0x0004 )  [0x00000001]
	class UBTPingCheckerLinker*                        PingChecker;                                      		// 0x0604 ( 0x0004 ) 
	struct FString                                     szChannelIP;                                      		// 0x0608 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                nChannelPort;                                     		// 0x0614 ( 0x0004 ) 
	struct FString                                     szRelayIP;                                        		// 0x0618 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                nRelayPort;                                       		// 0x0624 ( 0x0004 ) 
	int                                                nNatType;                                         		// 0x0628 ( 0x0004 ) 
	unsigned long                                      m_bHostBlocking:1;                                		// 0x062C ( 0x0004 )  [0x00000001]
	unsigned long                                      IsFixedAssistPoint:1;                             		// 0x062C ( 0x0004 )  [0x00000002]
	float                                              FixedAssistTime;                                  		// 0x0630 ( 0x0004 ) 
	struct FString                                     lastBuyItemName;                                  		// 0x0634 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                lastBuyItemType;                                  		// 0x0640 ( 0x0004 ) 
	int                                                lastBuyItemGrade;                                 		// 0x0644 ( 0x0004 ) 
	struct FString                                     ERServerIP;                                       		// 0x0648 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ERServerPort;                                     		// 0x0654 ( 0x0004 ) 
	int                                                MinimapMode;                                      		// 0x0658 ( 0x0004 ) 
	class TArray< int >                                ChannelRestrictionMaps;                           		// 0x065C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                ChannelRestrictionModes;                          		// 0x0668 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __CMDHK__Delegate;                                		// 0x0674 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdatePCBangInfo__Delegate;                     		// 0x067C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateGameRoomInfo__Delegate;                   		// 0x0684 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateCharInfo__Delegate;                       		// 0x068C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateRankingInfo__Delegate;                    		// 0x0694 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateEquipItemInfo__Delegate;                  		// 0x069C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateMoneyInfo__Delegate;                      		// 0x06A4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateClanInfo__Delegate;                       		// 0x06AC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdatePositionInfo__Delegate;                   		// 0x06B4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateRecv_CharInfo__Delegate;                  		// 0x06BC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateQuestList__Delegate;                      		// 0x06C4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __AccomplishMission25Percent__Delegate;           		// 0x06CC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __AccomplishMission50Percent__Delegate;           		// 0x06D4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __AccomplishMission75Percent__Delegate;           		// 0x06DC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __AccomplishMission100Percent__Delegate;          		// 0x06E4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __QuestLog__Delegate;                             		// 0x06EC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnReqSuccessStartGame__Delegate;                		// 0x06F4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnRecivedPing__Delegate;                        		// 0x06FC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateFriendList__Delegate;                     		// 0x0704 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateClanList__Delegate;                       		// 0x070C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdatePCBangList__Delegate;                     		// 0x0714 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateBlockList__Delegate;                      		// 0x071C ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SendUpdateUserPerformenceInfo ( int UserID, int MinFps, int MaxFps, int AvgFps, int MinPing, int MaxPing, int AvgPing );		//  Engine.wMatchMaker.SendUpdateUserPerformenceInfo
	 void                      SetLastBuyItemInfo ( struct FString ItemName, int ItemType, int ItemGrade );		//  Engine.wMatchMaker.SetLastBuyItemInfo
	 bool                      IsPCBangItem ( class UwItemBoxHK* ItemInfo );     		//  Engine.wMatchMaker.IsPCBangItem
	 bool                      CheckUsingItem ( class UwItemBoxHK* ItemInfo );   		//  Engine.wMatchMaker.CheckUsingItem
	 bool                      IsPlayingPCBangPlus (  );                         		//  Engine.wMatchMaker.IsPlayingPCBangPlus
	 bool                      IsPlayingPCBang (  );                             		//  Engine.wMatchMaker.IsPlayingPCBang
	 void                      SetAASLevel ( unsigned char _level );             		//  Engine.wMatchMaker.SetAASLevel
	 unsigned char             GetIsAASLevel (  );                               		//  Engine.wMatchMaker.GetIsAASLevel
	 bool                      IsSDRespawn (  );                                 		//  Engine.wMatchMaker.IsSDRespawn
	 bool                      IsFriendlyUser ( struct FString CharName, struct FString ClanName );		//  Engine.wMatchMaker.IsFriendlyUser
	 bool                      IsBlockUser ( struct FString UserName );          		//  Engine.wMatchMaker.IsBlockUser
	 void                      UpdateBlockList ( class UwMatchMaker* MM );       		//  Engine.wMatchMaker.UpdateBlockList
	 void                      UpdatePCBangList ( class UwMatchMaker* MM );      		//  Engine.wMatchMaker.UpdatePCBangList
	 void                      UpdateClanList ( class UwMatchMaker* MM );        		//  Engine.wMatchMaker.UpdateClanList
	 void                      UpdateFriendList ( class UwMatchMaker* MM );      		//  Engine.wMatchMaker.UpdateFriendList
	 void                      ReplaceBlockNickName ( struct FString old_name, struct FString new_name );		//  Engine.wMatchMaker.ReplaceBlockNickName
	 void                      AddBlockList ( struct FString UserName );         		//  Engine.wMatchMaker.AddBlockList
	 void                      SetBlockListCount ( int cnt );                    		//  Engine.wMatchMaker.SetBlockListCount
	 void                      ClearBlockList (  );                              		//  Engine.wMatchMaker.ClearBlockList
	 void                      AddClanList ( struct FString UserName, unsigned char IsLogOn, int Level, int ClanGrade, int ClanWin, int ClanLose, int LevelMarkID, int TitleMarkID );		//  Engine.wMatchMaker.AddClanList
	 void                      SetClanListCount ( int cnt );                     		//  Engine.wMatchMaker.SetClanListCount
	 void                      ClearClanList (  );                               		//  Engine.wMatchMaker.ClearClanList
	 void                      AddPCBangList2 ( struct FString UserName, unsigned char IsLogOn, int ClanMark, int ClanBG, int ClanBL, struct FString ClanName, int Level, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  Engine.wMatchMaker.AddPCBangList2
	 void                      AddPCBangList ( struct FString UserName, int ClanMark, int ClanBG, int ClanBL, struct FString ClanName, int Level, struct FString ServerName, struct FString ServerShortName, struct FString ServerIP, int serverPort, int CurPos, int ChannelNum, struct FString ChannelNickName, int RoomNum, int ClanGrade, int ClanWin, int ClanLose, int IsLookForClan, int ClanLevel, int LevelMarkID, int TitleMarkID, int Reserved1, int Reserved2, int Reserved3 );		//  Engine.wMatchMaker.AddPCBangList
	 void                      RemovePCBangList ( struct FString UserName );     		//  Engine.wMatchMaker.RemovePCBangList
	 void                      SetPCBangListCount ( int cnt );                   		//  Engine.wMatchMaker.SetPCBangListCount
	 void                      ClearPCBangList (  );                             		//  Engine.wMatchMaker.ClearPCBangList
	 void                      AddFriendList ( struct FString UserName, unsigned char IsLogOn, int ClanMark, int ClanBG, int ClanBL, struct FString ClanName, int Level, unsigned char IsLookForClan, int ClanLevel, int LevelMarkID );		//  Engine.wMatchMaker.AddFriendList
	 void                      SetFriendListCount ( int cnt );                   		//  Engine.wMatchMaker.SetFriendListCount
	 void                      ClearFriendList (  );                             		//  Engine.wMatchMaker.ClearFriendList
	 bool                      IsDisconnectedUser (  );                          		//  Engine.wMatchMaker.IsDisconnectedUser
	 void                      SetDisconnectedUser ( bool bSet, int UserID );    		//  Engine.wMatchMaker.SetDisconnectedUser
	 int                       GetHostPoint (  );                                		//  Engine.wMatchMaker.GetHostPoint
	 int                       CalculateHostPoint ( bool bInGame );              		//  Engine.wMatchMaker.CalculateHostPoint
	 int                       ReceivedPing ( struct FString fromAddr, int msec );		//  Engine.wMatchMaker.ReceivedPing
	 void                      OnRecivedPing ( class UwMatchMaker* MM, struct FString fromAddr, int msec );		//  Engine.wMatchMaker.OnRecivedPing
	 void                      ReceivedPingHK ( struct FString fromAddr, int msec );		//  Engine.wMatchMaker.ReceivedPingHK
	 void                      ClearReceivedPingHK (  );                         		//  Engine.wMatchMaker.ClearReceivedPingHK
	 int                       GetLastestPingValue ( struct FString fromAddr );  		//  Engine.wMatchMaker.GetLastestPingValue
	 void                      SendPingHK ( struct FString fromAddr );           		//  Engine.wMatchMaker.SendPingHK
	 void                      SendPingToClient (  );                            		//  Engine.wMatchMaker.SendPingToClient
	 void                      eventDrawOtherLoadingState ( int UserID, unsigned char bLoadingState );		// [ FUNC_Event ] Engine.wMatchMaker.DrawOtherLoadingState
	 void                      OnReqSuccessStartGame ( int Step );               		//  Engine.wMatchMaker.OnReqSuccessStartGame
	 void                      eventReqSuccessStartGame ( int Step );            		// [ FUNC_Event ] Engine.wMatchMaker.ReqSuccessStartGame
	 void                      GetItemDurabilityInfo ( class TArray< int >* OwnerID, class TArray< int >* PlayedNumber, class TArray< int >* PlayedRound, class TArray< struct FBtrDouble >* UniqueItemID, class TArray< int >* UsingTime, class TArray< int >* PlayedCount );		//  Engine.wMatchMaker.GetItemDurabilityInfo
	 bool                      eventForceGameOver ( class APlayerReplicationInfo* Winner );		// [ FUNC_Event ] Engine.wMatchMaker.ForceGameOver
	 void                      ProcessPendingChangeNewHostOrChangeNewGuest (  ); 		//  Engine.wMatchMaker.ProcessPendingChangeNewHostOrChangeNewGuest
	 void                      PendingChangeNewGuest ( struct FString hostAddress );		//  Engine.wMatchMaker.PendingChangeNewGuest
	 void                      PendingChangeHost ( int ClientNum );              		//  Engine.wMatchMaker.PendingChangeHost
	 void                      SetChangeHostMessageFlag (  );                    		//  Engine.wMatchMaker.SetChangeHostMessageFlag
	 bool                      ChangeNewGuest ( struct FString HostIP );         		//  Engine.wMatchMaker.ChangeNewGuest
	 bool                      ChangeHost ( int ClientNum );                     		//  Engine.wMatchMaker.ChangeHost
	 void                      eventSetChangingHostFlag ( bool flag );           		// [ FUNC_Event ] Engine.wMatchMaker.SetChangingHostFlag
	 bool                      ResetChangingHostGuest (  );                      		//  Engine.wMatchMaker.ResetChangingHostGuest
	 bool                      eventIsLoading (  );                              		// [ FUNC_Event ] Engine.wMatchMaker.IsLoading
	 void                      eventEndLoading (  );                             		// [ FUNC_Event ] Engine.wMatchMaker.EndLoading
	 void                      eventStartLoading (  );                           		// [ FUNC_Event ] Engine.wMatchMaker.StartLoading
	 class UMaterial*          eventGetMiniMapInfoImage (  );                    		// [ FUNC_Event ] Engine.wMatchMaker.GetMiniMapInfoImage
	 class UMaterial*          eventGetLoadingImage (  );                        		// [ FUNC_Event ] Engine.wMatchMaker.GetLoadingImage
	 void                      eventInitializeMapSettings_DS_Server (  );        		// [ FUNC_Event ] Engine.wMatchMaker.InitializeMapSettings_DS_Server
	 void                      InitializeMapSettings (  );                       		//  Engine.wMatchMaker.InitializeMapSettings
	 void                      ClearConsole (  );                                		//  Engine.wMatchMaker.ClearConsole
	 void                      eventEndMatch ( bool bForceEndMatch );            		// [ FUNC_Event ] Engine.wMatchMaker.EndMatch
	 void                      ResetGameFlag (  );                               		//  Engine.wMatchMaker.ResetGameFlag
	 int                       GetTeamCount (  );                                		//  Engine.wMatchMaker.GetTeamCount
	 unsigned char             GetGameModeNum ( struct FString szGameClassName );		//  Engine.wMatchMaker.GetGameModeNum
	 void                      SetCurMatchState ( struct FMatchState kState );   		//  Engine.wMatchMaker.SetCurMatchState
	 bool                      IsHost ( struct FString UserName );               		//  Engine.wMatchMaker.IsHost
	 void                      SetNewHost ( struct FString UserName );           		//  Engine.wMatchMaker.SetNewHost
	 struct FString            GetUserClanNameByUserName ( struct FString UserName );		//  Engine.wMatchMaker.GetUserClanNameByUserName
	 int                       GetUserLevelMarkIDByUserName ( struct FString UserName );		//  Engine.wMatchMaker.GetUserLevelMarkIDByUserName
	 bool                      ReplaceUserName ( struct FString OldName, struct FString NewName );		//  Engine.wMatchMaker.ReplaceUserName
	 int                       GetUserGradeByUserName ( struct FString UserName );		//  Engine.wMatchMaker.GetUserGradeByUserName
	 int                       GetUIDByUserName ( struct FString UserName );     		//  Engine.wMatchMaker.GetUIDByUserName
	 class UwMatchUserInfo*    GetUserInfoByUserName ( struct FString UserName );		//  Engine.wMatchMaker.GetUserInfoByUserName
	 class UwMatchUserInfo*    GetUserInfoByUID ( int UserID );                  		//  Engine.wMatchMaker.GetUserInfoByUID
	 void                      SetMyTeam ( int iTeam );                          		//  Engine.wMatchMaker.SetMyTeam
	 struct FString            GetMyNetworkCheckFailedMsg ( int LoadingStep );   		//  Engine.wMatchMaker.GetMyNetworkCheckFailedMsg
	 struct FString            GetHostNetworkCheckFailedMsg ( int LoadingStep ); 		//  Engine.wMatchMaker.GetHostNetworkCheckFailedMsg
	 bool                      FailedNetworkChecking (  );                       		//  Engine.wMatchMaker.FailedNetworkChecking
	 bool                      StartNetworkChecking ( int ClientsCount, bool bConnectGame );		//  Engine.wMatchMaker.StartNetworkChecking
	 bool                      eventSendPingToChannelServer (  );                		// [ FUNC_Event ] Engine.wMatchMaker.SendPingToChannelServer
	 bool                      eventSendPingToOtherUser ( struct FString toAddr );		// [ FUNC_Event ] Engine.wMatchMaker.SendPingToOtherUser
	 bool                      eventSendText ( struct FString d_ip, int d_port, struct FString dText );		// [ FUNC_Event ] Engine.wMatchMaker.SendText
	 void                      SendErrorReportC ( int Code, int windowtype, struct FString ct );		//  Engine.wMatchMaker.SendErrorReportC
	 void                      SendErrorReportS ( int Code, struct FString ct ); 		//  Engine.wMatchMaker.SendErrorReportS
	 class UBTPingCheckerLinker* eventCreatePingChecker (  );                      		// [ FUNC_Event ] Engine.wMatchMaker.CreatePingChecker
	 bool                      eventGetHostBlocking (  );                        		// [ FUNC_Event ] Engine.wMatchMaker.GetHostBlocking
	 void                      eventSetHostBlocking ( bool Blocking );           		// [ FUNC_Event ] Engine.wMatchMaker.SetHostBlocking
	 void                      MakeHSResponseData ( class TArray< unsigned char > Data, class TArray< unsigned char >* Result );		// [ FUNC_Native ] Engine.wMatchMaker.MakeHSResponseData
	 bool                      TenProtectRelease (  );                           		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectRelease
	 bool                      TenProtectCreate ( int QQUserID );                		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectCreate
	 bool                      TenProtectDProtoEncrypt (  );                     		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectDProtoEncrypt
	 bool                      TenProtectDProtoDecrypt (  );                     		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectDProtoDecrypt
	 bool                      TenProtectUpdate_AntiBot (  );                    		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectUpdate_AntiBot
	 bool                      TenProtectStopLocalCheck (  );                    		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectStopLocalCheck
	 bool                      TenProtectStartLocalOnceCheck (  );               		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectStartLocalOnceCheck
	 bool                      TenProtectSendInitData (  );                      		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectSendInitData
	 bool                      TenProtectSetInitData (  );                       		// [ FUNC_Native ] Engine.wMatchMaker.TenProtectSetInitData
	 int                       GetClientVersion (  );                            		// [ FUNC_Native ] Engine.wMatchMaker.GetClientVersion
	 bool                      ConsoleCmd_DS ( struct FString strCmd );          		// [ FUNC_Native ] Engine.wMatchMaker.ConsoleCmd_DS
	 bool                      ForceSetLoadingStep ( int LoadingStep );          		// [ FUNC_Native ] Engine.wMatchMaker.ForceSetLoadingStep
	 bool                      StartHolePunchingClient ( int GameType, int ReqStartUserID );		// [ FUNC_Native ] Engine.wMatchMaker.StartHolePunchingClient
	 bool                      StartHolePunchingHost ( int GameType, int ReqStartUserID );		// [ FUNC_Native ] Engine.wMatchMaker.StartHolePunchingHost
	 bool                      SetTcpTimeOutInTempReset (  );                    		// [ FUNC_Native ] Engine.wMatchMaker.SetTcpTimeOutInTempReset
	 bool                      SetTcpTimeOutInGame (  );                         		// [ FUNC_Native ] Engine.wMatchMaker.SetTcpTimeOutInGame
	 bool                      SetTcpTimeOutInUI (  );                           		// [ FUNC_Native ] Engine.wMatchMaker.SetTcpTimeOutInUI
	 bool                      ForceDisconnectGameWithErrMessage ( struct FString strErrMsg );		// [ FUNC_Native ] Engine.wMatchMaker.ForceDisconnectGameWithErrMessage
	 bool                      SetUDPConnectionTimeLimit ( float fLimitSec );    		// [ FUNC_Native ] Engine.wMatchMaker.SetUDPConnectionTimeLimit
	 bool                      IsCompletedLoading (  );                          		// [ FUNC_Native ] Engine.wMatchMaker.IsCompletedLoading
	 bool                      CheckHolePunchingResult ( int Result, unsigned char Phrase, int InterventionUserID, unsigned char Intervention, class TArray< int > FailedUserIDs );		// [ FUNC_Native ] Engine.wMatchMaker.CheckHolePunchingResult
	 struct FString            GetStrLoadingState ( unsigned char bState );      		// [ FUNC_Native ] Engine.wMatchMaker.GetStrLoadingState
	 bool                      PrintLoadingMsg ( struct FLoadingMessageItem Item );		// [ FUNC_Native ] Engine.wMatchMaker.PrintLoadingMsg
	 struct FString            MakeMD5 ( struct FString strsrc );                		// [ FUNC_Native ] Engine.wMatchMaker.MakeMD5
	 bool                      DestoryLoadingStater (  );                        		// [ FUNC_Native ] Engine.wMatchMaker.DestoryLoadingStater
	 bool                      CreateLoadingStater ( struct FString LoginName ); 		// [ FUNC_Native ] Engine.wMatchMaker.CreateLoadingStater
	 bool                      LowRelayServerOff (  );                           		// [ FUNC_Native ] Engine.wMatchMaker.LowRelayServerOff
	 bool                      LowRelayServerOn ( struct FString RelayServerIP, int RelayServerPortNum );		// [ FUNC_Native ] Engine.wMatchMaker.LowRelayServerOn
	 bool                      LowChangeClient ( struct FString HostAddr );      		// [ FUNC_Native ] Engine.wMatchMaker.LowChangeClient
	 bool                      LowChangeServer (  );                             		// [ FUNC_Native ] Engine.wMatchMaker.LowChangeServer
	 bool                      ForceDisconnectUDPConnectionClientSide (  );      		// [ FUNC_Native ] Engine.wMatchMaker.ForceDisconnectUDPConnectionClientSide
	 bool                      ForceDisconnectUDPConnectionHostSide ( int UserID );		// [ FUNC_Native ] Engine.wMatchMaker.ForceDisconnectUDPConnectionHostSide
	 bool                      StartTickCheck (  );                              		// [ FUNC_Native ] Engine.wMatchMaker.StartTickCheck
	 bool                      SetNatTypeToEngine ( int NatType );               		// [ FUNC_Native ] Engine.wMatchMaker.SetNatTypeToEngine
	 bool                      ClientInitNatChecker ( int HostUserID, struct FString HostIP, int hostPortNum, unsigned char NatType, unsigned char Intervention, struct FString HostInnerIP, int HostInnerPort );		// [ FUNC_Native ] Engine.wMatchMaker.ClientInitNatChecker
	 bool                      HostInitNatChecker ( int ClientUserID, struct FString ClientIP, int clientPortNum, unsigned char NatType, unsigned char Intervention_Own );		// [ FUNC_Native ] Engine.wMatchMaker.HostInitNatChecker
	 bool                      NatServerAddrStoreToEngine ( struct FString natServerIP1, int natServerPortNum1, struct FString natServerIP2, int natServerPortNum2 );		// [ FUNC_Native ] Engine.wMatchMaker.NatServerAddrStoreToEngine
	 bool                      StartMatch ( int GameRoomNum, bool bHost, struct FString szHostAddr, int hostPortNum );		// [ FUNC_Native ] Engine.wMatchMaker.StartMatch
	 void                      UpdateQuest_WinnerInBotMode ( int Level, int RecodeType );		//  Engine.wMatchMaker.UpdateQuest_WinnerInBotMode
	 void                      UpdateQuest_RoundCompletedInBotMode ( int Level, int CompletedRound );		//  Engine.wMatchMaker.UpdateQuest_RoundCompletedInBotMode
	 void                      UpdateQuest_MatchCompletedInBotMode ( int Level );		//  Engine.wMatchMaker.UpdateQuest_MatchCompletedInBotMode
	 void                      UpdateQuest_SprintTime ( int sec );               		//  Engine.wMatchMaker.UpdateQuest_SprintTime
	 void                      UpdateQuest_AcquireTrophy ( int ItemID );         		//  Engine.wMatchMaker.UpdateQuest_AcquireTrophy
	 void                      UpdateQuest_MatchEndInBotMode ( int difficult, int Map );		//  Engine.wMatchMaker.UpdateQuest_MatchEndInBotMode
	 void                      UpdateQuest_KillInBotMode ( int difficult, int Map );		//  Engine.wMatchMaker.UpdateQuest_KillInBotMode
	 void                      UpdateQuest_MatchEnd ( int Mode, int Map );       		//  Engine.wMatchMaker.UpdateQuest_MatchEnd
	 void                      UpdateQuest_CombatTime ( int Mode, int Map, int Min );		//  Engine.wMatchMaker.UpdateQuest_CombatTime
	 void                      UpdateQuest_ExecTime ( int Mode, int Map, int Min );		//  Engine.wMatchMaker.UpdateQuest_ExecTime
	 void                      UpdateQuest_Death ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_Death
	 void                      UpdateQuest_Assist ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_Assist
	 void                      UpdateQuest_15Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_15Kill
	 void                      UpdateQuest_10Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_10Kill
	 void                      UpdateQuest_9Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_9Kill
	 void                      UpdateQuest_8Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_8Kill
	 void                      UpdateQuest_7Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_7Kill
	 void                      UpdateQuest_6Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_6Kill
	 void                      UpdateQuest_5Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_5Kill
	 void                      UpdateQuest_4Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_4Kill
	 void                      UpdateQuest_3Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_3Kill
	 void                      UpdateQuest_2Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_2Kill
	 void                      UpdateQuest_MeeleAttackKill (  );                 		//  Engine.wMatchMaker.UpdateQuest_MeeleAttackKill
	 void                      UpdateQuest_HeadshotKill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_HeadshotKill
	 void                      UpdateQuest_AimedKill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_AimedKill
	 void                      UpdateQuest_Kill ( int WeaponType, int weaponID );		//  Engine.wMatchMaker.UpdateQuest_Kill
	 void                      QuestLog ( struct FString Msg );                  		//  Engine.wMatchMaker.QuestLog
	 int                       GetNextQuestID (  );                              		//  Engine.wMatchMaker.GetNextQuestID
	 void                      UpdateTutorial ( int QuestID, int AddCount );     		//  Engine.wMatchMaker.UpdateTutorial
	 void                      UpdateQuest ( int MissionType, int MissionOption1, int MissionOption2, int AddCount );		//  Engine.wMatchMaker.UpdateQuest
	 void                      CheckMissionProgress ( int i, int AddCount );     		//  Engine.wMatchMaker.CheckMissionProgress
	 void                      AccomplishMission100Percent ( struct FString MissionDesc, int cur, int Max );		//  Engine.wMatchMaker.AccomplishMission100Percent
	 void                      AccomplishMission75Percent ( struct FString MissionDesc, int cur, int Max );		//  Engine.wMatchMaker.AccomplishMission75Percent
	 void                      AccomplishMission50Percent ( struct FString MissionDesc, int cur, int Max );		//  Engine.wMatchMaker.AccomplishMission50Percent
	 void                      AccomplishMission25Percent ( struct FString MissionDesc, int cur, int Max );		//  Engine.wMatchMaker.AccomplishMission25Percent
	 void                      GenerateMissionList ( class UwGameManager* GameMgr );		//  Engine.wMatchMaker.GenerateMissionList
	 void                      SortQuestList ( class UwGameManager* GameMgr );   		//  Engine.wMatchMaker.SortQuestList
	 int                       FindQuest ( int nQuestID );                       		//  Engine.wMatchMaker.FindQuest
	 void                      RemoveDailyQuestArray ( class TArray< int > QuestID );		//  Engine.wMatchMaker.RemoveDailyQuestArray
	 void                      AddDailyQuestArray ( class TArray< int > QuestID );		//  Engine.wMatchMaker.AddDailyQuestArray
	 void                      RemoveDailyQuest ( int QuestID );                 		//  Engine.wMatchMaker.RemoveDailyQuest
	 void                      AddDailyQuest ( int QuestID );                    		//  Engine.wMatchMaker.AddDailyQuest
	 void                      RemoveQuestArray ( class TArray< int > QuestID ); 		//  Engine.wMatchMaker.RemoveQuestArray
	 void                      AddQuestArray ( class TArray< int > QuestID );    		//  Engine.wMatchMaker.AddQuestArray
	 void                      RemoveQuest ( int QuestID );                      		//  Engine.wMatchMaker.RemoveQuest
	 void                      AddQuest ( int QuestID );                         		//  Engine.wMatchMaker.AddQuest
	 bool                      IsEnableAltTab (  );                              		//  Engine.wMatchMaker.IsEnableAltTab
	 void                      SetCurSubPos ( int CurSubPos );                   		//  Engine.wMatchMaker.SetCurSubPos
	 void                      SetCurpos ( int CurPos, int CurSubPos );          		//  Engine.wMatchMaker.SetCurpos
	 bool                      IsClanGrade ( int Grade );                        		//  Engine.wMatchMaker.IsClanGrade
	 bool                      IsClanMember (  );                                		//  Engine.wMatchMaker.IsClanMember
	 void                      RI_Clear (  );                                    		//  Engine.wMatchMaker.RI_Clear
	 void                      PI_LeavelRoom (  );                               		//  Engine.wMatchMaker.PI_LeavelRoom
	 void                      RemoveGMList ( int GMUID );                       		//  Engine.wMatchMaker.RemoveGMList
	 void                      AddGMList ( int GMUID );                          		//  Engine.wMatchMaker.AddGMList
	 void                      ClearGMList (  );                                 		//  Engine.wMatchMaker.ClearGMList
	 void                      PI_EnterRoom ( int RoomID, int TeamID );          		//  Engine.wMatchMaker.PI_EnterRoom
	 void                      PI_LeaveChannel (  );                             		//  Engine.wMatchMaker.PI_LeaveChannel
	 void                      PI_EnterChannel ( int ServerGroupID, struct FString ServerGroupName, int ServerID, struct FString ServerName, int ChannelID, struct FString ChannelName, bool bClanWarChannel, int ChannelTypeValue, bool IsDedicatedServer );		//  Engine.wMatchMaker.PI_EnterChannel
	 void                      UpdateCharInfoAndReqClanUserList (  );            		//  Engine.wMatchMaker.UpdateCharInfoAndReqClanUserList
	 void                      UpdateQuestList ( class UwMatchMaker* MM );       		//  Engine.wMatchMaker.UpdateQuestList
	 void                      UpdateRecv_CharInfo ( class UwMatchMaker* MM );   		//  Engine.wMatchMaker.UpdateRecv_CharInfo
	 void                      UpdatePositionInfo ( class UwMatchMaker* MM );    		//  Engine.wMatchMaker.UpdatePositionInfo
	 void                      UpdateClanInfo ( class UwMatchMaker* MM );        		//  Engine.wMatchMaker.UpdateClanInfo
	 void                      UpdateMoneyInfo ( class UwMatchMaker* MM );       		//  Engine.wMatchMaker.UpdateMoneyInfo
	 void                      UpdateEquipItemInfo ( class UwMatchMaker* MM );   		//  Engine.wMatchMaker.UpdateEquipItemInfo
	 void                      UpdateRankingInfo ( class UwMatchMaker* MM );     		//  Engine.wMatchMaker.UpdateRankingInfo
	 void                      UpdateCharInfo ( class UwMatchMaker* MM );        		//  Engine.wMatchMaker.UpdateCharInfo
	 void                      UpdateGameRoomInfo ( class UwMatchMaker* MM );    		//  Engine.wMatchMaker.UpdateGameRoomInfo
	 void                      UpdatePCBangInfo ( class UwMatchMaker* MM );      		//  Engine.wMatchMaker.UpdatePCBangInfo
	 void                      CMDHK ( int Index, struct FString Param1, struct FString Param2, struct FString param3 );		//  Engine.wMatchMaker.CMDHK
	 bool                      IsChannelRestrictionMaps ( int MapNum );          		//  Engine.wMatchMaker.IsChannelRestrictionMaps
	 bool                      IsChannelRestrictionModes ( int ModeNum );        		//  Engine.wMatchMaker.IsChannelRestrictionModes

	// Public Imports
	UwMatchMaker(class UwMatchMaker const &);
	UwMatchMaker(void);
	class UwMatchMaker &  operator=(class UwMatchMaker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateAccomplishMission100Percent(class FString const &,int,int);
	void  delegateAccomplishMission25Percent(class FString const &,int,int);
	void  delegateAccomplishMission50Percent(class FString const &,int,int);
	void  delegateAccomplishMission75Percent(class FString const &,int,int);
	void  delegateCMDHK(int,class FString const &,class FString const &,class FString const &);
	void  delegateOnRecivedPing(class UwMatchMaker *,class FString const &,int);
	void  delegateOnReqSuccessStartGame(int);
	void  delegateQuestLog(class FString const &);
	void  delegateUpdateBlockList(class UwMatchMaker *);
	void  delegateUpdateCharInfo(class UwMatchMaker *);
	void  delegateUpdateClanInfo(class UwMatchMaker *);
	void  delegateUpdateClanList(class UwMatchMaker *);
	void  delegateUpdateEquipItemInfo(class UwMatchMaker *);
	void  delegateUpdateFriendList(class UwMatchMaker *);
	void  delegateUpdateGameRoomInfo(class UwMatchMaker *);
	void  delegateUpdateMoneyInfo(class UwMatchMaker *);
	void  delegateUpdatePCBangInfo(class UwMatchMaker *);
	void  delegateUpdatePCBangList(class UwMatchMaker *);
	void  delegateUpdatePositionInfo(class UwMatchMaker *);
	void  delegateUpdateQuestList(class UwMatchMaker *);
	void  delegateUpdateRankingInfo(class UwMatchMaker *);
	void  delegateUpdateRecv_CharInfo(class UwMatchMaker *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x06F8

// Class Engine.wWeaponFire
class DLL_IMPORT UwWeaponFire : public UObject
{
public:
	unsigned long                                      bSplashDamage:1;                                  		// 0x002C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bSplashJump:1;                                    		// 0x002C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bRecommendSplashDamage:1;                         		// 0x002C ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bTossed:1;                                        		// 0x002C ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bLeadTarget:1;                                    		// 0x002C ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bInstantHit:1;                                    		// 0x002C ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bPawnRapidFireAnim:1;                             		// 0x002C ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bReflective:1;                                    		// 0x002C ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bTimerLoop:1;                                     		// 0x002C ( 0x0004 )  [0x00000100]
	unsigned long                                      bFireOnRelease:1;                                 		// 0x002C ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bWaitForRelease:1;                                		// 0x002C ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      bModeExclusive:1;                                 		// 0x002C ( 0x0004 )  [0x00000800][ CPF_Edit ]
	unsigned long                                      bInputFire:1;                                     		// 0x002C ( 0x0004 )  [0x00001000]
	unsigned long                                      bIsFiring:1;                                      		// 0x002C ( 0x0004 )  [0x00002000]
	unsigned long                                      bNowWaiting:1;                                    		// 0x002C ( 0x0004 )  [0x00004000]
	unsigned long                                      bServerDelayStopFire:1;                           		// 0x002C ( 0x0004 )  [0x00008000]
	unsigned long                                      bServerDelayStartFire:1;                          		// 0x002C ( 0x0004 )  [0x00010000]
	unsigned long                                      bInstantStop:1;                                   		// 0x002C ( 0x0004 )  [0x00020000]
	unsigned long                                      bAttachSmokeEmitter:1;                            		// 0x002C ( 0x0004 )  [0x00040000][ CPF_Edit ]
	unsigned long                                      bAttachFlashEmitter:1;                            		// 0x002C ( 0x0004 )  [0x00080000][ CPF_Edit ]
	float                                              TimerInterval;                                    		// 0x0030 ( 0x0004 ) 
	float                                              NextTimerPop;                                     		// 0x0034 ( 0x0004 ) 
	class AwWeapon*                                    Weapon;                                           		// 0x0038 ( 0x0004 ) [ CPF_Edit ]
	class APawn*                                       Instigator;                                       		// 0x003C ( 0x0004 ) 
	class ALevelInfo*                                  Level;                                            		// 0x0040 ( 0x0004 ) 
	class AActor*                                      Owner;                                            		// 0x0044 ( 0x0004 ) 
	float                                              NextFireTime;                                     		// 0x0048 ( 0x0004 ) 
	float                                              PreFireTime;                                      		// 0x004C ( 0x0004 ) [ CPF_Edit ]
	float                                              MaxHoldTime;                                      		// 0x0050 ( 0x0004 ) [ CPF_Edit ]
	float                                              HoldTime;                                         		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	int                                                ThisModeNum;                                      		// 0x0058 ( 0x0004 ) [ CPF_Edit ]
	float                                              TransientSoundVolume;                             		// 0x005C ( 0x0004 ) 
	float                                              TransientSoundRadius;                             		// 0x0060 ( 0x0004 ) 
	struct FName                                       PreFireAnim;                                      		// 0x0064 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       FireAnim;                                         		// 0x0068 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       FireLoopAnim;                                     		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       FireEndAnim;                                      		// 0x0070 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       ReloadAnim;                                       		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	float                                              PreFireAnimRate;                                  		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	float                                              FireAnimRate;                                     		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	float                                              FireLoopAnimRate;                                 		// 0x0080 ( 0x0004 ) [ CPF_Edit ]
	float                                              FireEndAnimRate;                                  		// 0x0084 ( 0x0004 ) [ CPF_Edit ]
	float                                              ReloadAnimRate;                                   		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenTime;                                        		// 0x008C ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      FireSound_Stereo;                                 		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      FireSound;                                        		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      ReloadSound;                                      		// 0x0098 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      NoAmmoSound;                                      		// 0x009C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     FireForce;                                        		// 0x00A0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ReloadForce;                                      		// 0x00AC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NoAmmoForce;                                      		// 0x00B8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              FireRate;                                         		// 0x00C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              ServerStartFireTime;                              		// 0x00C8 ( 0x0004 ) 
	unsigned long                                      bEnableBustMode:1;                                		// 0x00CC ( 0x0004 )  [0x00000001]
	unsigned long                                      IsFiringBustMode:1;                               		// 0x00CC ( 0x0004 )  [0x00000002]
	int                                                iFireRBC;                                         		// 0x00D0 ( 0x0004 ) 
	int                                                iFireCount;                                       		// 0x00D4 ( 0x0004 ) 
	float                                              fFireRBT;                                         		// 0x00D8 ( 0x0004 ) 
	class UClass*                                      AmmoClass;                                        		// 0x00DC ( 0x0004 ) [ CPF_Edit ]
	int                                                AmmoPerFire;                                      		// 0x00E0 ( 0x0004 ) [ CPF_Edit ]
	int                                                AmmoClipSize;                                     		// 0x00E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              Load;                                             		// 0x00E8 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ShakeRotMag;                                      		// 0x00EC ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     ShakeRotRate;                                     		// 0x00F8 ( 0x000C ) [ CPF_Edit ]
	float                                              ShakeRotTime;                                     		// 0x0104 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ShakeOffsetMag;                                   		// 0x0108 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     ShakeOffsetRate;                                  		// 0x0114 ( 0x000C ) [ CPF_Edit ]
	float                                              ShakeOffsetTime;                                  		// 0x0120 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      ProjectileClass;                                  		// 0x0124 ( 0x0004 ) [ CPF_Edit ]
	float                                              BotRefireRate;                                    		// 0x0128 ( 0x0004 ) [ CPF_Edit ]
	float                                              WarnTargetPct;                                    		// 0x012C ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      FlashEmitterClass;                                		// 0x0130 ( 0x0004 ) [ CPF_Edit ]
	class AwEmitter*                                   FlashEmitter;                                     		// 0x0134 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      FlashFirstPersonEmitterClass;                     		// 0x0138 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      SmokeEmitterClass;                                		// 0x013C ( 0x0004 ) [ CPF_Edit ]
	class AwEmitter*                                   SmokeEmitter;                                     		// 0x0140 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      SmokeFirstPersonEmitterClass;                     		// 0x0144 ( 0x0004 ) [ CPF_Edit ]
	float                                              AimError;                                         		// 0x0148 ( 0x0004 ) [ CPF_Edit ]
	float                                              Spread;                                           		// 0x014C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      SpreadStyle;                                      		// 0x0150 ( 0x0001 ) [ CPF_Edit ]
	int                                                FireCount;                                        		// 0x0154 ( 0x0004 ) 
	int                                                iPartsDamage;                                     		// 0x0158 ( 0x0004 ) 
	int                                                iPartsDamage_Outer;                               		// 0x015C ( 0x0004 ) 
	struct FFireProperties                             SavedFireProperties;                              		// 0x0160 ( 0x0014 ) 
	class UwWeaponBaseParams*                          BaseParams;                                       		// 0x0174 ( 0x0004 ) 
	class UClass*                                      ResParams;                                        		// 0x0178 ( 0x0004 ) 
	unsigned long                                      bMakeRadarNoise:1;                                		// 0x017C ( 0x0004 )  [0x00000001]
	unsigned char                                      SpreadStance;                                     		// 0x0180 ( 0x0001 ) 
	int                                                nBulletPerfire;                                   		// 0x0184 ( 0x0004 ) 
	int                                                AutoAimCount;                                     		// 0x0188 ( 0x0004 ) 

	// UScript Functions
	 void                      eventDamageLog ( class APawn* Victim, float fDam, float fDist, unsigned char CParts );		// [ FUNC_Event ] Engine.wWeaponFire.DamageLog
	 void                      MakeFireNoise (  );                               		//  Engine.wWeaponFire.MakeFireNoise
	 void                      SetSpreadStance ( unsigned char ss );             		//  Engine.wWeaponFire.SetSpreadStance
	 void                      wLoadOut (  );                                    		// [ FUNC_Simulated ] Engine.wWeaponFire.wLoadOut
	 class AActor*             Trace ( struct FVector TraceEnd, struct FVector TraceStart, bool bTraceActors, struct FVector Extent, struct FVector* HitLocation, struct FVector* HitNormal, class UMaterial** Material );		//  Engine.wWeaponFire.Trace
	 class AActor*             Spawn ( class UClass* SpawnClass, class AActor* SpawnOwner, struct FName SpawnTag, struct FVector SpawnLocation, struct FRotator SpawnRotation );		//  Engine.wWeaponFire.Spawn
	 float                     MaxRange (  );                                    		//  Engine.wWeaponFire.MaxRange
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.wWeaponFire.DisplayDebug
	 struct FVector            GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z );		// [ FUNC_Simulated ] Engine.wWeaponFire.GetFireStart
	 struct FRotator           AdjustAim ( struct FVector Start, float InAimError );		//  Engine.wWeaponFire.AdjustAim
	 void                      PlayFireEnd (  );                                 		//  Engine.wWeaponFire.PlayFireEnd
	 void                      PlayFiring (  );                                  		//  Engine.wWeaponFire.PlayFiring
	 void                      PlayStartHold (  );                               		//  Engine.wWeaponFire.PlayStartHold
	 void                      PlayPreFire (  );                                 		//  Engine.wWeaponFire.PlayPreFire
	 void                      PlaySoundTeam (  );                               		//  Engine.wWeaponFire.PlaySoundTeam
	 void                      ServerPlayFiring (  );                            		//  Engine.wWeaponFire.ServerPlayFiring
	 bool                      AllowFire (  );                                   		// [ FUNC_Simulated ] Engine.wWeaponFire.AllowFire
	 void                      eventModeHoldFire (  );                           		// [ FUNC_Event ] Engine.wWeaponFire.ModeHoldFire
	 void                      eventModeDoFire (  );                             		// [ FUNC_Event ] Engine.wWeaponFire.ModeDoFire
	 void                      SyncRandSeed (  );                                		// [ FUNC_Simulated ] Engine.wWeaponFire.SyncRandSeed
	 void                      eventModeTick ( float dt );                       		// [ FUNC_Event ] Engine.wWeaponFire.ModeTick
	 bool                      IsFiring (  );                                    		//  Engine.wWeaponFire.IsFiring
	 void                      StopFiring (  );                                  		//  Engine.wWeaponFire.StopFiring
	 void                      StartFiring (  );                                 		//  Engine.wWeaponFire.StartFiring
	 void                      Update ( float dt );                              		//  Engine.wWeaponFire.Update
	 void                      StopForceFeedback ( struct FString EffectName );  		//  Engine.wWeaponFire.StopForceFeedback
	 void                      ClientPlayForceFeedback ( struct FString EffectName );		//  Engine.wWeaponFire.ClientPlayForceFeedback
	 void                      ShakeView (  );                                   		//  Engine.wWeaponFire.ShakeView
	 void                      StartMuzzleSmoke (  );                            		//  Engine.wWeaponFire.StartMuzzleSmoke
	 void                      FlashMuzzleFlash (  );                            		//  Engine.wWeaponFire.FlashMuzzleFlash
	 void                      DrawMuzzleFlash ( class UCanvas* Canvas );        		//  Engine.wWeaponFire.DrawMuzzleFlash
	 void                      DoFireEffectForClient (  );                       		//  Engine.wWeaponFire.DoFireEffectForClient
	 void                      DoFireEffect (  );                                		//  Engine.wWeaponFire.DoFireEffect
	 void                      InitEffects (  );                                 		// [ FUNC_Simulated ] Engine.wWeaponFire.InitEffects
	 void                      DestroyEffects (  );                              		// [ FUNC_Simulated ] Engine.wWeaponFire.DestroyEffects
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wWeaponFire.PostBeginPlay
	 void                      eventSetInitialState (  );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeaponFire.SetInitialState
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] Engine.wWeaponFire.PostNetBeginPlay
	 void                      BeginPlay (  );                                   		// [ FUNC_Simulated ] Engine.wWeaponFire.BeginPlay
	 void                      PreBeginPlay (  );                                		// [ FUNC_Simulated ] Engine.wWeaponFire.PreBeginPlay
	 void                      eventTimer (  );                                  		// [ FUNC_Event ] Engine.wWeaponFire.Timer
	 void                      SetTimer ( float NewTimerRate, bool bLoop );      		// [ FUNC_Simulated ] Engine.wWeaponFire.SetTimer

	// Public Imports
	UwWeaponFire(class UwWeaponFire const &);
	UwWeaponFire(void);
	class UwWeaponFire &  operator=(class UwWeaponFire const &);
	static void  InternalConstructor(void *);
	void  ModeTick(float);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0160

// Class Engine.wInstantFire
class DLL_IMPORT UwInstantFire : public UwWeaponFire
{
public:
	class UClass*                                      DamageType;                                       		// 0x018C ( 0x0004 ) 
	float                                              TraceRange;                                       		// 0x0190 ( 0x0004 ) 
	float                                              Momentum;                                         		// 0x0194 ( 0x0004 ) 
	float                                              Momentum_Pawn;                                    		// 0x0198 ( 0x0004 ) 
	float                                              HeadShotExtent;                                   		// 0x019C ( 0x0004 ) 
	struct FName                                       Aim_FireAnim;                                     		// 0x01A0 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_FireLoopAnim;                                 		// 0x01A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_FireAnimRate;                                 		// 0x01A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_FireLoopAnimRate;                             		// 0x01AC ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      SilencerSmokeEmitterClass;                        		// 0x01B0 ( 0x0004 ) [ CPF_Edit ]
	class AwEmitter*                                   SilencerSmokeEmitter;                             		// 0x01B4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bToggleSlot:1;                                    		// 0x01B8 ( 0x0004 )  [0x00000001]
	float                                              fSpread_Weapon;                                   		// 0x01BC ( 0x0004 ) 
	float                                              fSpread_Char;                                     		// 0x01C0 ( 0x0004 ) 
	float                                              fSpread_Min;                                      		// 0x01C4 ( 0x0004 ) 
	float                                              fSpread_Max;                                      		// 0x01C8 ( 0x0004 ) 
	float                                              fSpreadReduce;                                    		// 0x01CC ( 0x0004 ) 
	float                                              fSpreadReduce_Normal;                             		// 0x01D0 ( 0x0004 ) 
	float                                              fLastRecoilReduceTime;                            		// 0x01D4 ( 0x0004 ) 
	class USound*                                      sound_Fire_Silencer;                              		// 0x01D8 ( 0x0004 ) 
	float                                              fSpread_2nd_Max_Curr;                             		// 0x01DC ( 0x0004 ) 

	// UScript Functions
	 void                      MakeFireNoise (  );                               		//  Engine.wInstantFire.MakeFireNoise
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.wInstantFire.DisplayDebug
	 void                      CalcSpread (  );                                  		//  Engine.wInstantFire.CalcSpread
	 void                      SetSpreadStance ( unsigned char ss );             		//  Engine.wInstantFire.SetSpreadStance
	 void                      StartMuzzleSmoke (  );                            		//  Engine.wInstantFire.StartMuzzleSmoke
	 void                      DrawMuzzleFlash ( class UCanvas* Canvas );        		//  Engine.wInstantFire.DrawMuzzleFlash
	 void                      DestroyEffects (  );                              		// [ FUNC_Simulated ] Engine.wInstantFire.DestroyEffects
	 void                      InitEffects (  );                                 		// [ FUNC_Simulated ] Engine.wInstantFire.InitEffects
	 void                      wLoadOut (  );                                    		// [ FUNC_Simulated ] Engine.wInstantFire.wLoadOut
	 void                      FlashMuzzleFlash (  );                            		//  Engine.wInstantFire.FlashMuzzleFlash
	 void                      DoTrace ( struct FVector Start, struct FRotator Dir );		//  Engine.wInstantFire.DoTrace
	 void                      DoTraceForClient ( struct FVector Start, struct FRotator Dir );		//  Engine.wInstantFire.DoTraceForClient
	 void                      DoFireEffectForClient (  );                       		//  Engine.wInstantFire.DoFireEffectForClient
	 void                      DoTraceNative ( struct FVector Start, struct FRotator Dir );		// [ FUNC_Native ] Engine.wInstantFire.DoTraceNative
	 void                      DoFireEffect (  );                                		//  Engine.wInstantFire.DoFireEffect
	 void                      eventModeTick ( float dt );                       		// [ FUNC_Event ] Engine.wInstantFire.ModeTick
	 float                     MaxRange (  );                                    		//  Engine.wInstantFire.MaxRange
	 void                      ServerPlayFiring (  );                            		//  Engine.wInstantFire.ServerPlayFiring
	 void                      PlayFiring (  );                                  		//  Engine.wInstantFire.PlayFiring
	 bool                      AllowFire (  );                                   		// [ FUNC_Simulated ] Engine.wInstantFire.AllowFire
	 void                      eventModeDoFire (  );                             		// [ FUNC_Event ] Engine.wInstantFire.ModeDoFire

	// Public Imports
	UwInstantFire(class UwInstantFire const &);
	class UwInstantFire &  operator=(class UwInstantFire const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0054

// Class Engine.wWeaponCustomPartsParam
class DLL_IMPORT UwWeaponCustomPartsParam : public UObject
{
public:
	int                                                iItemID;                                          		// 0x002C ( 0x0004 ) 
	unsigned char                                      eType;                                            		// 0x0030 ( 0x0001 ) 
	int                                                iPartID;                                          		// 0x0034 ( 0x0004 ) 
	struct FString                                     strDisplayName;                                   		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strAddPartGroupID;                                		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strPartImageName;                                 		// 0x0050 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              fDurability_Weight;                               		// 0x005C ( 0x0004 ) 
	unsigned long                                      bUsableAR:1;                                      		// 0x0060 ( 0x0004 )  [0x00000001]
	unsigned long                                      bUsableSMG:1;                                     		// 0x0060 ( 0x0004 )  [0x00000002]
	unsigned long                                      bUsableSR:1;                                      		// 0x0060 ( 0x0004 )  [0x00000004]
	unsigned long                                      bUsablePS:1;                                      		// 0x0060 ( 0x0004 )  [0x00000008]
	unsigned long                                      bUsableSG:1;                                      		// 0x0060 ( 0x0004 )  [0x00000010]
	unsigned long                                      bUsableETC:1;                                     		// 0x0060 ( 0x0004 )  [0x00000020]
	struct FVector                                     vAddAimDiff;                                      		// 0x0064 ( 0x000C ) 
	int                                                ui_damage_range;                                  		// 0x0070 ( 0x0004 ) 
	int                                                ui_firesound;                                     		// 0x0074 ( 0x0004 ) 
	struct FString                                     ui_zoom_1;                                        		// 0x0078 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ui_zoom_2;                                        		// 0x0084 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                UI_Durability;                                    		// 0x0090 ( 0x0004 ) 
	int                                                ui_damage;                                        		// 0x0094 ( 0x0004 ) 
	int                                                ui_spread;                                        		// 0x0098 ( 0x0004 ) 
	int                                                ui_view_kick;                                     		// 0x009C ( 0x0004 ) 
	int                                                ui_rate_of_fire;                                  		// 0x00A0 ( 0x0004 ) 
	int                                                ui_move;                                          		// 0x00A4 ( 0x0004 ) 
	int                                                ui_range;                                         		// 0x00A8 ( 0x0004 ) 
	int                                                iSkillID;                                         		// 0x00AC ( 0x0004 ) 

	// Public Imports
	UwWeaponCustomPartsParam(class UwWeaponCustomPartsParam const &);
	UwWeaponCustomPartsParam(void);
	class UwWeaponCustomPartsParam &  operator=(class UwWeaponCustomPartsParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0084

// Class Engine.wWeaponCustomInfoParam
class DLL_IMPORT UwWeaponCustomInfoParam : public UObject
{
public:
	int                                                iItemID;                                          		// 0x002C ( 0x0004 ) 
	struct FString                                     strDisplayName;                                   		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strAddPartSightGroupID;                           		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strAddPartBarrelGroupID;                          		// 0x0048 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strAddPartSilencerGroupID;                        		// 0x0054 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strAddPartGunstockGroupID;                        		// 0x0060 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bCustomSight:1;                                   		// 0x006C ( 0x0004 )  [0x00000001]
	unsigned long                                      bCustomSilencer:1;                                		// 0x006C ( 0x0004 )  [0x00000002]
	unsigned long                                      bCustomBarrel:1;                                  		// 0x006C ( 0x0004 )  [0x00000004]
	unsigned long                                      bCustomGunstock:1;                                		// 0x006C ( 0x0004 )  [0x00000008]
	unsigned long                                      bCustomPainting:1;                                		// 0x006C ( 0x0004 )  [0x00000010]
	int                                                iDefaultSightUniID;                               		// 0x0070 ( 0x0004 ) 
	int                                                iDefaultSilencerUniID;                            		// 0x0074 ( 0x0004 ) 
	int                                                iDefaultBarrelUniID;                              		// 0x0078 ( 0x0004 ) 
	int                                                iDefaultGunstockUniID;                            		// 0x007C ( 0x0004 ) 
	int                                                iDefaultPaintingID;                               		// 0x0080 ( 0x0004 ) 
	int                                                iSightOnAddItemID;                                		// 0x0084 ( 0x0004 ) 
	int                                                iSightOffAddItemID;                               		// 0x0088 ( 0x0004 ) 
	struct FVector                                     vAimDiff;                                         		// 0x008C ( 0x000C ) 
	struct FVector                                     vDisplay_3d;                                      		// 0x0098 ( 0x000C ) 
	float                                              fDisplay_3d_rot_y;                                		// 0x00A4 ( 0x0004 ) 
	struct FVector                                     vBootyitem_3d;                                    		// 0x00A8 ( 0x000C ) 
	float                                              fBootyitem_3d_rot_y;                              		// 0x00B4 ( 0x0004 ) 

	// Public Imports
	UwWeaponCustomInfoParam(class UwWeaponCustomInfoParam const &);
	UwWeaponCustomInfoParam(void);
	class UwWeaponCustomInfoParam &  operator=(class UwWeaponCustomInfoParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x008C

// Class Engine.wModeDOAParam
class DLL_IMPORT UwModeDOAParam : public UObject
{
public:
	int                                                GroupID;                                          		// 0x002C ( 0x0004 ) 
	int                                                WeaponID0;                                        		// 0x0030 ( 0x0004 ) 
	int                                                WeaponID1;                                        		// 0x0034 ( 0x0004 ) 
	int                                                WeaponID2;                                        		// 0x0038 ( 0x0004 ) 
	int                                                WeaponID3;                                        		// 0x003C ( 0x0004 ) 
	int                                                WeaponID4;                                        		// 0x0040 ( 0x0004 ) 

	// Public Imports
	UwModeDOAParam(class UwModeDOAParam const &);
	UwModeDOAParam(void);
	class UwModeDOAParam &  operator=(class UwModeDOAParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.wDefenceGameParam
class DLL_IMPORT UwDefenceGameParam : public UObject
{
public:
	int                                                nMapID;                                           		// 0x002C ( 0x0004 ) 
	int                                                nDelayTime;                                       		// 0x0030 ( 0x0004 ) 
	int                                                nGrade;                                           		// 0x0034 ( 0x0004 ) 
	unsigned char                                      nRound;                                           		// 0x0038 ( 0x0001 ) 
	unsigned char                                      nRegenLoc;                                        		// 0x0039 ( 0x0001 ) 
	unsigned char                                      nUnit;                                            		// 0x003A ( 0x0001 ) 
	unsigned char                                      nLevel;                                           		// 0x003B ( 0x0001 ) 

	// Public Imports
	UwDefenceGameParam(class UwDefenceGameParam const &);
	UwDefenceGameParam(void);
	class UwDefenceGameParam &  operator=(class UwDefenceGameParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.wNPCActionGroupParam
class DLL_IMPORT UwNPCActionGroupParam : public UObject
{
public:
	int                                                ActionGroupID;                                    		// 0x002C ( 0x0004 ) 
	struct FString                                     ActionID;                                         		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UwNPCActionGroupParam(class UwNPCActionGroupParam const &);
	UwNPCActionGroupParam(void);
	class UwNPCActionGroupParam &  operator=(class UwNPCActionGroupParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.wNPCItemGroupParam
class DLL_IMPORT UwNPCItemGroupParam : public UObject
{
public:
	int                                                GroupID;                                          		// 0x002C ( 0x0004 ) 
	int                                                ItemID;                                           		// 0x0030 ( 0x0004 ) 
	int                                                PartsID;                                          		// 0x0034 ( 0x0004 ) 

	// Public Imports
	UwNPCItemGroupParam(class UwNPCItemGroupParam const &);
	UwNPCItemGroupParam(void);
	class UwNPCItemGroupParam &  operator=(class UwNPCItemGroupParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.wNPCNameGroupParam
class DLL_IMPORT UwNPCNameGroupParam : public UObject
{
public:
	int                                                GroupID;                                          		// 0x002C ( 0x0004 ) 
	struct FString                                     NickName;                                         		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UwNPCNameGroupParam(class UwNPCNameGroupParam const &);
	UwNPCNameGroupParam(void);
	class UwNPCNameGroupParam &  operator=(class UwNPCNameGroupParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.wNPCParam
class DLL_IMPORT UwNPCParam : public UObject
{
public:
	int                                                NPCID;                                            		// 0x002C ( 0x0004 ) 
	int                                                NameGroupID;                                      		// 0x0030 ( 0x0004 ) 
	int                                                Lv;                                               		// 0x0034 ( 0x0004 ) 
	struct FString                                     Type;                                             		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                MainWeaponGroupID;                                		// 0x0044 ( 0x0004 ) 
	int                                                PistolGroupID;                                    		// 0x0048 ( 0x0004 ) 
	int                                                Grenade1GroupID;                                  		// 0x004C ( 0x0004 ) 
	int                                                Grenade2GroupID;                                  		// 0x0050 ( 0x0004 ) 
	int                                                SkillActiveGroupID;                               		// 0x0054 ( 0x0004 ) 
	int                                                SkillPassive1GroupID;                             		// 0x0058 ( 0x0004 ) 
	int                                                SkillPassive2GroupID;                             		// 0x005C ( 0x0004 ) 
	int                                                SkillPassive3GroupID;                             		// 0x0060 ( 0x0004 ) 
	int                                                SpCharGroupID_AF;                                 		// 0x0064 ( 0x0004 ) 
	int                                                SpCharGroupID_RSA;                                		// 0x0068 ( 0x0004 ) 
	int                                                HeadGroupID;                                      		// 0x006C ( 0x0004 ) 
	int                                                FaceGroupID;                                      		// 0x0070 ( 0x0004 ) 
	int                                                AccessoryGroupID;                                 		// 0x0074 ( 0x0004 ) 
	int                                                HP;                                               		// 0x0078 ( 0x0004 ) 
	int                                                SprintRate;                                       		// 0x007C ( 0x0004 ) 
	int                                                DefaultRunSpeed;                                  		// 0x0080 ( 0x0004 ) 
	int                                                ActionGroupID;                                    		// 0x0084 ( 0x0004 ) 
	float                                              DamageRate;                                       		// 0x0088 ( 0x0004 ) 
	float                                              ExplosionDmageRate;                               		// 0x008C ( 0x0004 ) 
	float                                              MeleeDamageRate;                                  		// 0x0090 ( 0x0004 ) 
	float                                              ReactionTime;                                     		// 0x0094 ( 0x0004 ) 
	float                                              DetourRate;                                       		// 0x0098 ( 0x0004 ) 
	float                                              DetourWeightMin;                                  		// 0x009C ( 0x0004 ) 
	float                                              DetourWeightMax;                                  		// 0x00A0 ( 0x0004 ) 
	float                                              SafeWeightMin;                                    		// 0x00A4 ( 0x0004 ) 
	float                                              SafeWeightMax;                                    		// 0x00A8 ( 0x0004 ) 
	float                                              HeadshotChance;                                   		// 0x00AC ( 0x0004 ) 
	float                                              HeadshotChanceMG;                                 		// 0x00B0 ( 0x0004 ) 
	float                                              HeadshotSpreadRate;                               		// 0x00B4 ( 0x0004 ) 
	float                                              RotationgSpeed;                                   		// 0x00B8 ( 0x0004 ) 
	float                                              MeleeActionRange;                                 		// 0x00BC ( 0x0004 ) 
	float                                              MeleeRange;                                       		// 0x00C0 ( 0x0004 ) 
	float                                              EffectiveRange;                                   		// 0x00C4 ( 0x0004 ) 
	float                                              CloseRange;                                       		// 0x00C8 ( 0x0004 ) 
	float                                              OuterRangeSpreadMin;                              		// 0x00CC ( 0x0004 ) 
	float                                              OuterRangeSpreadMax;                              		// 0x00D0 ( 0x0004 ) 
	float                                              EffectiveRangeSpreadMin;                          		// 0x00D4 ( 0x0004 ) 
	float                                              EffectiveRangeSpreadMax;                          		// 0x00D8 ( 0x0004 ) 
	float                                              CloseRangeSpreadMin;                              		// 0x00DC ( 0x0004 ) 
	float                                              CloseRangeSpreadMax;                              		// 0x00E0 ( 0x0004 ) 
	float                                              ZeroRangeSpreadMin;                               		// 0x00E4 ( 0x0004 ) 
	float                                              ZeroRangeSpreadMax;                               		// 0x00E8 ( 0x0004 ) 

	// Public Imports
	UwNPCParam(class UwNPCParam const &);
	UwNPCParam(void);
	class UwNPCParam &  operator=(class UwNPCParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00C0

// Class Engine.wNPCSpawnParam
class DLL_IMPORT UwNPCSpawnParam : public UObject
{
public:
	int                                                Grade;                                            		// 0x002C ( 0x0004 ) 
	struct FString                                     Type;                                             		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                NPCID;                                            		// 0x003C ( 0x0004 ) 

	// Public Imports
	UwNPCSpawnParam(class UwNPCSpawnParam const &);
	UwNPCSpawnParam(void);
	class UwNPCSpawnParam &  operator=(class UwNPCSpawnParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.wMapInfo
class DLL_IMPORT UwMapInfo : public UObject
{
public:
	int                                                MapID;                                            		// 0x002C ( 0x0004 ) 
	struct FString                                     File;                                             		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FriendlyName;                                     		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                MapDifficulty;                                    		// 0x0048 ( 0x0004 ) 
	struct FString                                     MapDifficultyDisplay;                             		// 0x004C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              SupplyHealth;                                     		// 0x0058 ( 0x0004 ) 
	float                                              SupplyHelicopter;                                 		// 0x005C ( 0x0004 ) 
	float                                              SupplyBombing;                                    		// 0x0060 ( 0x0004 ) 
	float                                              SupplyUAV;                                        		// 0x0064 ( 0x0004 ) 
	struct FString                                     ResourceLoadingImage;                             		// 0x0068 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ResourceMapImage;                                 		// 0x0074 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ResourceSupplyImages[ 0x03 ];                     		// 0x0080 ( 0x0024 ) [ CPF_NeedCtorLink ]
	struct FString                                     ResourceMiniMapInfoImage[ 0x04 ];                 		// 0x00A4 ( 0x0030 ) [ CPF_NeedCtorLink ]
	struct FString                                     BGM1;                                             		// 0x00D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                BGM1_Times[ 0x04 ];                               		// 0x00E0 ( 0x0010 ) 
	struct FString                                     BGM2;                                             		// 0x00F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                BGM2_Times[ 0x04 ];                               		// 0x00FC ( 0x0010 ) 
	unsigned char                                      ModeFFA;                                          		// 0x010C ( 0x0001 ) 
	unsigned char                                      ModeTDM;                                          		// 0x010D ( 0x0001 ) 
	unsigned char                                      ModeSD;                                           		// 0x010E ( 0x0001 ) 
	unsigned char                                      ModeDOA;                                          		// 0x010F ( 0x0001 ) 
	unsigned char                                      ModeDomination;                                   		// 0x0110 ( 0x0001 ) 
	unsigned char                                      ModeSabotage;                                     		// 0x0111 ( 0x0001 ) 
	unsigned char                                      ModeBotFFA;                                       		// 0x0112 ( 0x0001 ) 
	unsigned char                                      ModeBotTDM;                                       		// 0x0113 ( 0x0001 ) 
	unsigned char                                      ModeBotDomination;                                		// 0x0114 ( 0x0001 ) 
	unsigned char                                      ModeBotBeginner;                                  		// 0x0115 ( 0x0001 ) 
	unsigned char                                      ModeDefence;                                      		// 0x0116 ( 0x0001 ) 
	unsigned char                                      ModeInfection;                                    		// 0x0117 ( 0x0001 ) 
	int                                                ModeFFA_Max;                                      		// 0x0118 ( 0x0004 ) 
	int                                                ModeTDM_Max;                                      		// 0x011C ( 0x0004 ) 
	int                                                ModeSD_Max;                                       		// 0x0120 ( 0x0004 ) 
	int                                                ModeDOA_Max;                                      		// 0x0124 ( 0x0004 ) 
	int                                                ModeDomination_Max;                               		// 0x0128 ( 0x0004 ) 
	int                                                ModeSabotage_Max;                                 		// 0x012C ( 0x0004 ) 
	int                                                ModeBotFFA_Max;                                   		// 0x0130 ( 0x0004 ) 
	int                                                ModeBotTDM_Max;                                   		// 0x0134 ( 0x0004 ) 
	int                                                ModeBotDomination_Max;                            		// 0x0138 ( 0x0004 ) 
	int                                                ModeBotBeginner_Max;                              		// 0x013C ( 0x0004 ) 
	int                                                ModeDefence_Max;                                  		// 0x0140 ( 0x0004 ) 
	int                                                ModeInfection_Max;                                		// 0x0144 ( 0x0004 ) 
	unsigned char                                      SubMode_All;                                      		// 0x0148 ( 0x0001 ) 
	unsigned char                                      SubMode_Knife;                                    		// 0x0149 ( 0x0001 ) 
	unsigned char                                      SubMode_Pistol;                                   		// 0x014A ( 0x0001 ) 
	unsigned char                                      SubMode_Grenade;                                  		// 0x014B ( 0x0001 ) 
	unsigned char                                      SubMode_Rocket;                                   		// 0x014C ( 0x0001 ) 
	unsigned char                                      SubMode_Sniper;                                   		// 0x014D ( 0x0001 ) 
	unsigned char                                      SubMode_SniperX;                                  		// 0x014E ( 0x0001 ) 
	unsigned char                                      SubMode_FlameThower;                              		// 0x014F ( 0x0001 ) 
	unsigned char                                      SubMode_ShotGun;                                  		// 0x0150 ( 0x0001 ) 
	unsigned char                                      SubMode_MG;                                       		// 0x0151 ( 0x0001 ) 
	unsigned char                                      ModeTDM_RandomRespawn;                            		// 0x0152 ( 0x0001 ) 
	unsigned char                                      ModeDOMI_RandomRespawn;                           		// 0x0153 ( 0x0001 ) 
	unsigned char                                      GameLevel;                                        		// 0x0154 ( 0x0001 ) 
	int                                                MapDisplaySort;                                   		// 0x0158 ( 0x0004 ) 
	struct FString                                     NewMapIcon;                                       		// 0x015C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      CopyTo ( class UwMapInfo* Dest );                 		//  Engine.wMapInfo.CopyTo

	// Public Imports
	UwMapInfo(class UwMapInfo const &);
	UwMapInfo(void);
	class UwMapInfo &  operator=(class UwMapInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x013C

// Class Engine.wClanLevelInfoParam
class DLL_IMPORT UwClanLevelInfoParam : public UObject
{
public:
	int                                                nLevel;                                           		// 0x002C ( 0x0004 ) 
	struct FString                                     sLevelName;                                       		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                nAccumExp;                                        		// 0x003C ( 0x0004 ) 

	// Public Imports
	UwClanLevelInfoParam(class UwClanLevelInfoParam const &);
	UwClanLevelInfoParam(void);
	class UwClanLevelInfoParam &  operator=(class UwClanLevelInfoParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.wLevelInfoParam
class DLL_IMPORT UwLevelInfoParam : public UObject
{
public:
	int                                                nLevel;                                           		// 0x002C ( 0x0004 ) 
	struct FString                                     sLevelName;                                       		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                nAccumExp;                                        		// 0x003C ( 0x0004 ) 

	// Public Imports
	UwLevelInfoParam(class UwLevelInfoParam const &);
	UwLevelInfoParam(void);
	class UwLevelInfoParam &  operator=(class UwLevelInfoParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.wItemBoxParam
class DLL_IMPORT UwItemBoxParam : public UObject
{
public:
	int                                                nItemBoxID;                                       		// 0x002C ( 0x0004 ) 
	int                                                nItemCount;                                       		// 0x0030 ( 0x0004 ) 
	int                                                nItemID[ 0x14 ];                                  		// 0x0034 ( 0x0050 ) 
	int                                                nPartID[ 0x14 ];                                  		// 0x0084 ( 0x0050 ) 

	// Public Imports
	UwItemBoxParam(class UwItemBoxParam const &);
	UwItemBoxParam(void);
	class UwItemBoxParam &  operator=(class UwItemBoxParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00A8

// Class Engine.wClanMarkParam
class DLL_IMPORT UwClanMarkParam : public UObject
{
public:
	int                                                nClanMark_ID;                                     		// 0x002C ( 0x0004 ) 
	int                                                nClanMark_Type_1;                                 		// 0x0030 ( 0x0004 ) 
	int                                                nClanMark_Type_2;                                 		// 0x0034 ( 0x0004 ) 
	int                                                nSell_Type;                                       		// 0x0038 ( 0x0004 ) 
	int                                                nDisplay_Order;                                   		// 0x003C ( 0x0004 ) 
	struct FString                                     sClanMark_Resource_32;                            		// 0x0040 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     sClanMark_Resource_128;                           		// 0x004C ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UwClanMarkParam(class UwClanMarkParam const &);
	UwClanMarkParam(void);
	class UwClanMarkParam &  operator=(class UwClanMarkParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class Engine.wRandBoxParam
class DLL_IMPORT UwRandBoxParam : public UObject
{
public:
	int                                                ItemID;                                           		// 0x002C ( 0x0004 ) 
	int                                                RandNum;                                          		// 0x0030 ( 0x0004 ) 
	int                                                RandItemID[ 0x32 ];                               		// 0x0034 ( 0x00C8 ) 
	int                                                RandPartID[ 0x32 ];                               		// 0x00FC ( 0x00C8 ) 

	// Public Imports
	UwRandBoxParam(class UwRandBoxParam const &);
	UwRandBoxParam(void);
	class UwRandBoxParam &  operator=(class UwRandBoxParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0198

// Class Engine.wDailyQuestParam
class DLL_IMPORT UwDailyQuestParam : public UObject
{
public:
	int                                                DailyQuestType;                                   		// 0x002C ( 0x0004 ) 
	int                                                Step;                                             		// 0x0030 ( 0x0004 ) 
	int                                                QuestID;                                          		// 0x0034 ( 0x0004 ) 

	// Public Imports
	UwDailyQuestParam(class UwDailyQuestParam const &);
	UwDailyQuestParam(void);
	class UwDailyQuestParam &  operator=(class UwDailyQuestParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.wQuestParam
class DLL_IMPORT UwQuestParam : public UObject
{
public:
	int                                                QuestType;                                        		// 0x002C ( 0x0004 ) 
	int                                                QuestID;                                          		// 0x0030 ( 0x0004 ) 
	int                                                LinkQuestID;                                      		// 0x0034 ( 0x0004 ) 
	int                                                LinkQuestStep;                                    		// 0x0038 ( 0x0004 ) 
	int                                                LimitArea;                                        		// 0x003C ( 0x0004 ) 
	struct FBtrDouble                                  EventStartTime;                                   		// 0x0040 ( 0x0008 ) 
	struct FBtrDouble                                  EventEndTime;                                     		// 0x0048 ( 0x0008 ) 
	int                                                QuestCreateLv;                                    		// 0x0050 ( 0x0004 ) 
	int                                                DisplayOrder;                                     		// 0x0054 ( 0x0004 ) 
	struct FString                                     LinkQuestName;                                    		// 0x0058 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     QuestMissionDesc;                                 		// 0x0064 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     QuestExtDesc;                                     		// 0x0070 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                MissionType;                                      		// 0x007C ( 0x0004 ) 
	int                                                MissionOption[ 0x02 ];                            		// 0x0080 ( 0x0008 ) 
	int                                                MissionBotMode;                                   		// 0x0088 ( 0x0004 ) 
	int                                                MissionCount;                                     		// 0x008C ( 0x0004 ) 
	int                                                RewardExp;                                        		// 0x0090 ( 0x0004 ) 
	int                                                RewardPoint;                                      		// 0x0094 ( 0x0004 ) 
	int                                                RewardItemID[ 0x02 ];                             		// 0x0098 ( 0x0008 ) 
	int                                                RewardItemPartID[ 0x02 ];                         		// 0x00A0 ( 0x0008 ) 
	int                                                RewardQuestID[ 0x05 ];                            		// 0x00A8 ( 0x0014 ) 
	struct FString                                     HelpResource;                                     		// 0x00BC ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      IsEnabledEventQuest ( struct FBtrDouble CurrentTime );		//  Engine.wQuestParam.IsEnabledEventQuest
	 bool                      IsEventQuest (  );                                		//  Engine.wQuestParam.IsEventQuest

	// Public Imports
	UwQuestParam(class UwQuestParam const &);
	UwQuestParam(void);
	class UwQuestParam &  operator=(class UwQuestParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x009C

// Class Engine.wPromotionParam
class DLL_IMPORT UwPromotionParam : public UObject
{
public:
	int                                                nLevel;                                           		// 0x002C ( 0x0004 ) 
	struct FString                                     sAcquireItem;                                     		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                nPartID;                                          		// 0x003C ( 0x0004 ) 

	// Public Imports
	UwPromotionParam(class UwPromotionParam const &);
	UwPromotionParam(void);
	class UwPromotionParam &  operator=(class UwPromotionParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.wPaintGroupParam
class DLL_IMPORT UwPaintGroupParam : public UObject
{
public:
	int                                                PaintingID;                                       		// 0x002C ( 0x0004 ) 
	struct FString                                     PaintingGroupID;                                  		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                PaintingNum;                                      		// 0x003C ( 0x0004 ) 
	int                                                PaintingItemID;                                   		// 0x0040 ( 0x0004 ) 
	float                                              RepairCost;                                       		// 0x0044 ( 0x0004 ) 
	int                                                UI_Durability;                                    		// 0x0048 ( 0x0004 ) 
	struct FString                                     strUI_Icon;                                       		// 0x004C ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UwPaintGroupParam(class UwPaintGroupParam const &);
	UwPaintGroupParam(void);
	class UwPaintGroupParam &  operator=(class UwPaintGroupParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class Engine.wPartsGroupParam
class DLL_IMPORT UwPartsGroupParam : public UObject
{
public:
	int                                                iAddPartID;                                       		// 0x002C ( 0x0004 ) 
	struct FString                                     strPartsGroupID;                                  		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      byAddpartNum;                                     		// 0x003C ( 0x0001 ) 
	struct FString                                     strName;                                          		// 0x0040 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iPointPrice;                                      		// 0x004C ( 0x0004 ) 
	int                                                iCashPrice;                                       		// 0x0050 ( 0x0004 ) 
	int                                                iSightID;                                         		// 0x0054 ( 0x0004 ) 
	int                                                iSightID_Sub;                                     		// 0x0058 ( 0x0004 ) 
	int                                                iSilencerID;                                      		// 0x005C ( 0x0004 ) 
	int                                                iCamoID;                                          		// 0x0060 ( 0x0004 ) 
	int                                                iPaintingID;                                      		// 0x0064 ( 0x0004 ) 
	int                                                iChar_HeadID;                                     		// 0x0068 ( 0x0004 ) 
	int                                                iChar_FaceID;                                     		// 0x006C ( 0x0004 ) 
	int                                                iChar_AccessoryID;                                		// 0x0070 ( 0x0004 ) 
	int                                                iSkillID;                                         		// 0x0074 ( 0x0004 ) 
	int                                                iAddOption[ 0x02 ];                               		// 0x0078 ( 0x0008 ) 
	int                                                iOptionValue[ 0x02 ];                             		// 0x0080 ( 0x0008 ) 
	struct FString                                     strDescription;                                   		// 0x0088 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              fAimDiffX;                                        		// 0x0094 ( 0x0004 ) 
	float                                              fAimDiffY;                                        		// 0x0098 ( 0x0004 ) 
	float                                              fAimDiffZ;                                        		// 0x009C ( 0x0004 ) 
	struct FString                                     strResource_UI_Icon;                              		// 0x00A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ui_damage_range;                                  		// 0x00AC ( 0x0004 ) 
	int                                                ui_firesound;                                     		// 0x00B0 ( 0x0004 ) 
	struct FString                                     ui_zoom_1;                                        		// 0x00B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ui_zoom_2;                                        		// 0x00C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                UI_Durability;                                    		// 0x00CC ( 0x0004 ) 
	float                                              display_3d_x;                                     		// 0x00D0 ( 0x0004 ) 
	float                                              display_3d_y;                                     		// 0x00D4 ( 0x0004 ) 
	float                                              display_3d_z;                                     		// 0x00D8 ( 0x0004 ) 
	float                                              display_3d_rot_y;                                 		// 0x00DC ( 0x0004 ) 
	float                                              Bootyitem_3d_x;                                   		// 0x00E0 ( 0x0004 ) 
	float                                              Bootyitem_3d_y;                                   		// 0x00E4 ( 0x0004 ) 
	float                                              Bootyitem_3d_z;                                   		// 0x00E8 ( 0x0004 ) 
	float                                              Bootyitem_3d_rot_y;                               		// 0x00EC ( 0x0004 ) 
	class UMaterial*                                   matWeapon_1st;                                    		// 0x00F0 ( 0x0004 ) 
	class UMaterial*                                   matWeapon_3rd;                                    		// 0x00F4 ( 0x0004 ) 
	class UMaterial*                                   matWeapon_1st_Painting;                           		// 0x00F8 ( 0x0004 ) 
	class UMaterial*                                   matWeapon_3rd_Painting;                           		// 0x00FC ( 0x0004 ) 

	// Public Imports
	UwPartsGroupParam(class UwPartsGroupParam const &);
	UwPartsGroupParam(void);
	class UwPartsGroupParam &  operator=(class UwPartsGroupParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00D4

// Class Engine.wSkillBaseParam
class DLL_IMPORT UwSkillBaseParam : public UObject
{
public:
	int                                                iSkillID;                                         		// 0x002C ( 0x0004 ) 
	struct FString                                     strName;                                          		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strClassName;                                     		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iRequirementSkillid;                              		// 0x0048 ( 0x0004 ) 
	int                                                iAttachWeaponID;                                  		// 0x004C ( 0x0004 ) 
	unsigned char                                      ESkillType;                                       		// 0x0050 ( 0x0001 ) 
	unsigned char                                      eActiveType;                                      		// 0x0051 ( 0x0001 ) 
	int                                                iUseKey;                                          		// 0x0054 ( 0x0004 ) 
	struct FString                                     strDescription;                                   		// 0x0058 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UwSkillBaseParam(class UwSkillBaseParam const &);
	UwSkillBaseParam(void);
	class UwSkillBaseParam &  operator=(class UwSkillBaseParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.wItemResourceParam
class DLL_IMPORT UwItemResourceParam : public UObject
{
public:
	int                                                iItemResourceID;                                  		// 0x002C ( 0x0004 ) 
	struct FString                                     strResName;                                       		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_1st;                                       		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd;                                       		// 0x0048 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_Icon;                                      		// 0x0054 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strHaveDotName;                                   		// 0x0060 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd_AF_Backpack;                           		// 0x006C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd_AF_Gore;                               		// 0x0078 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd_AF_Gore_Static;                        		// 0x0084 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_1st_RSA;                                   		// 0x0090 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd_RSA;                                   		// 0x009C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd_RSA_Backpack;                          		// 0x00A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd_RSA_Gore;                              		// 0x00B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strRes_3rd_RSA_Gore_Static;                       		// 0x00C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UMesh*                                       mesh_Base_1st;                                    		// 0x00CC ( 0x0004 ) 
	class UMesh*                                       mesh_Base_3rd;                                    		// 0x00D0 ( 0x0004 ) 
	class UMesh*                                       mesh_Base_1st_RSA;                                		// 0x00D4 ( 0x0004 ) 
	class UMesh*                                       mesh_Base_3rd_RSA;                                		// 0x00D8 ( 0x0004 ) 
	class UMesh*                                       mesh_AF_Backpack;                                 		// 0x00DC ( 0x0004 ) 
	class UMesh*                                       mesh_RSA_Backpack;                                		// 0x00E0 ( 0x0004 ) 
	class UStaticMesh*                                 stmesh_Base_1st;                                  		// 0x00E4 ( 0x0004 ) 
	class UStaticMesh*                                 stmesh_Base_3rd;                                  		// 0x00E8 ( 0x0004 ) 
	class UStaticMesh*                                 stmesh_Base_1st_RSA;                              		// 0x00EC ( 0x0004 ) 
	class UStaticMesh*                                 stmesh_Base_3rd_RSA;                              		// 0x00F0 ( 0x0004 ) 
	struct FString                                     Resource_UI_Weapon_Ani;                           		// 0x00F4 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UwItemResourceParam(class UwItemResourceParam const &);
	UwItemResourceParam(void);
	class UwItemResourceParam &  operator=(class UwItemResourceParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00D4

// Class Engine.wItemBaseParam
class DLL_IMPORT UwItemBaseParam : public UObject
{
public:
	unsigned char                                      eType;                                            		// 0x002C ( 0x0001 ) 
	unsigned char                                      eGrade;                                           		// 0x002D ( 0x0001 ) 
	struct FString                                     strGradeDisplay;                                  		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iItemID;                                          		// 0x003C ( 0x0004 ) 
	struct FString                                     strDisplayName;                                   		// 0x0040 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iResourceID;                                      		// 0x004C ( 0x0004 ) 
	int                                                iShopDisplayOrder;                                		// 0x0050 ( 0x0004 ) 
	int                                                iInvenDisplayOrder;                               		// 0x0054 ( 0x0004 ) 
	int                                                iEquipLevel;                                      		// 0x0058 ( 0x0004 ) 
	int                                                iEquipTeam;                                       		// 0x005C ( 0x0004 ) 
	unsigned char                                      EEquipSlot;                                       		// 0x0060 ( 0x0001 ) 
	unsigned long                                      bOverlap:1;                                       		// 0x0064 ( 0x0004 )  [0x00000001]
	struct FString                                     strAddPartGroupID;                                		// 0x0068 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strPaintingGroupID;                               		// 0x0074 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strAddOption[ 0x02 ];                             		// 0x0080 ( 0x0018 ) [ CPF_NeedCtorLink ]
	struct FString                                     strOptionValue[ 0x02 ];                           		// 0x0098 ( 0x0018 ) [ CPF_NeedCtorLink ]
	unsigned char                                      ECastType;                                        		// 0x00B0 ( 0x0001 ) 
	int                                                iRepairCost;                                      		// 0x00B4 ( 0x0004 ) 
	unsigned char                                      byDurabilityWeight;                               		// 0x00B8 ( 0x0001 ) 
	int                                                iAdType;                                          		// 0x00BC ( 0x0004 ) 
	unsigned long                                      bSell:1;                                          		// 0x00C0 ( 0x0004 )  [0x00000001]
	int                                                iSellingPrice;                                    		// 0x00C4 ( 0x0004 ) 
	int                                                iPeriodNum[ 0x05 ];                               		// 0x00C8 ( 0x0014 ) 
	int                                                iCashPrice[ 0x05 ];                               		// 0x00DC ( 0x0014 ) 
	int                                                iPointPrice[ 0x05 ];                              		// 0x00F0 ( 0x0014 ) 
	int                                                iDBRemainTime;                                    		// 0x0104 ( 0x0004 ) 
	int                                                iDBAddPartID;                                     		// 0x0108 ( 0x0004 ) 
	int                                                iDBDurability;                                    		// 0x010C ( 0x0004 ) 
	int                                                iDBImpair;                                        		// 0x0110 ( 0x0004 ) 
	int                                                iDBEquipUpgrade;                                  		// 0x0114 ( 0x0004 ) 
	unsigned long                                      bAuction:1;                                       		// 0x0118 ( 0x0004 )  [0x00000001]
	int                                                iAuctionMaxPrice;                                 		// 0x011C ( 0x0004 ) 
	int                                                iAuctionMinPrice;                                 		// 0x0120 ( 0x0004 ) 
	struct FString                                     strDescription;                                   		// 0x0124 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                start_ammo;                                       		// 0x0130 ( 0x0004 ) 
	int                                                clip_size;                                        		// 0x0134 ( 0x0004 ) 
	unsigned char                                      ui_damage;                                        		// 0x0138 ( 0x0001 ) 
	unsigned char                                      ui_spread;                                        		// 0x0139 ( 0x0001 ) 
	unsigned char                                      ui_view_kick;                                     		// 0x013A ( 0x0001 ) 
	unsigned char                                      ui_rate_of_fire;                                  		// 0x013B ( 0x0001 ) 
	unsigned char                                      ui_move;                                          		// 0x013C ( 0x0001 ) 
	unsigned char                                      ui_range;                                         		// 0x013D ( 0x0001 ) 
	int                                                StartSellDate_Year;                               		// 0x0140 ( 0x0004 ) 
	unsigned char                                      StartSellDate_Month;                              		// 0x0144 ( 0x0001 ) 
	unsigned char                                      StartSellDate_Day;                                		// 0x0145 ( 0x0001 ) 
	unsigned char                                      StartSellDate_Hour;                               		// 0x0146 ( 0x0001 ) 
	unsigned char                                      StartSellDate_Min;                                		// 0x0147 ( 0x0001 ) 
	unsigned char                                      StartSellDate_Sec;                                		// 0x0148 ( 0x0001 ) 
	int                                                EndSellDate_Year;                                 		// 0x014C ( 0x0004 ) 
	unsigned char                                      EndSellDate_Month;                                		// 0x0150 ( 0x0001 ) 
	unsigned char                                      EndSellDate_Day;                                  		// 0x0151 ( 0x0001 ) 
	unsigned char                                      EndSellDate_Hour;                                 		// 0x0152 ( 0x0001 ) 
	unsigned char                                      EndSellDate_Min;                                  		// 0x0153 ( 0x0001 ) 
	unsigned char                                      EndSellDate_Sec;                                  		// 0x0154 ( 0x0001 ) 
	int                                                iResourceArrayIndex;                              		// 0x0158 ( 0x0004 ) 

	// Public Imports
	UwItemBaseParam(class UwItemBaseParam const &);
	UwItemBaseParam(void);
	class UwItemBaseParam &  operator=(class UwItemBaseParam const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0130

// Class Engine.wGameManager
class DLL_IMPORT UwGameManager : public UObject
{
public:
	class UGameEngine*                                 gEngine;                                          		// 0x002C ( 0x0004 ) 
	class TArray< class UwItemBaseParam* >             ItemParams;                                       		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwItemResourceParam* >         ItemResParams;                                    		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwSkillBaseParam* >            SkillParams;                                      		// 0x0048 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwPartsGroupParam* >           AddPartsGroupParams;                              		// 0x0054 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwPaintGroupParam* >           PaintGroupParams;                                 		// 0x0060 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwPromotionParam* >            PromotionParams;                                  		// 0x006C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwQuestParam* >                QuestParams;                                      		// 0x0078 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwDailyQuestParam* >           DailyQuestParams;                                 		// 0x0084 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwRandBoxParam* >              RandBoxParams;                                    		// 0x0090 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwClanMarkParam* >             ClanMarkParams;                                   		// 0x009C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwItemBoxParam* >              ItemBoxParams;                                    		// 0x00A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwMapInfo* >                   MapInfos;                                         		// 0x00B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwModeDOAParam* >              ModeDOAParams;                                    		// 0x00C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwLevelInfoParam* >            LevelInfoParams;                                  		// 0x00CC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwClanLevelInfoParam* >        ClanLevelInfoParams;                              		// 0x00D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwWeaponCustomInfoParam* >     WeaponCustomInfoParams;                           		// 0x00E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwWeaponCustomPartsParam* >    WeaponCustomPartsParams;                          		// 0x00F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                LevelExps;                                        		// 0x00FC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     LevelImages;                                      		// 0x0108 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UMaterial* >                   LevelTextures;                                    		// 0x0114 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     ClanLevelImages;                                  		// 0x0120 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UMaterial* >                   ClanLevelTextures;                                		// 0x012C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwSkillBoxHK* >                SkillBoxList;                                     		// 0x0138 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwQuickSlotBoxHK* >            QuickSlotBoxList;                                 		// 0x0144 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwItemBoxHK* >                 UIShowItemLists;                                  		// 0x0150 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwItemBoxHK* >                 CandidateLists;                                   		// 0x015C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwItemBoxInstanceHK* >         InstanceItemLists;                                		// 0x0168 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     TotalLevelImages;                                 		// 0x0174 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FIntBox >                     TotalLevelImageCoordinates;                       		// 0x0180 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     BadWords;                                         		// 0x018C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     BadNicks;                                         		// 0x0198 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              SupplyRandomArray;                                		// 0x01A4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwNPCSpawnParam* >             NPCSpawnParams;                                   		// 0x01B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwNPCParam* >                  NPCParams;                                        		// 0x01BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwNPCNameGroupParam* >         NPCNameGroupParams;                               		// 0x01C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwNPCItemGroupParam* >         NPCItemGroupParams;                               		// 0x01D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwNPCActionGroupParam* >       NPCActionGroupParams;                             		// 0x01E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwDefenceGameParam* >          DefenceGameParamsEasy;                            		// 0x01EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwDefenceGameParam* >          DefenceGameParamsNormal;                          		// 0x01F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwDefenceGameParam* >          DefenceGameParamsHard;                            		// 0x0204 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UwDefenceGameParam* >          DefenceGameParamsVeryHard;                        		// 0x0210 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FSEAXEffect >                 EAXEffectList;                                    		// 0x021C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UwGameManagerScriptPart*                     SP;                                               		// 0x0228 ( 0x0004 ) 
	struct FString                                     VoicePackageName;                                 		// 0x022C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                LanguageType;                                     		// 0x0238 ( 0x0004 ) 
	int                                                TeamIndex;                                        		// 0x023C ( 0x0004 ) 
	unsigned long                                      bUseRagdoll:1;                                    		// 0x0240 ( 0x0004 )  [0x00000001]
	unsigned long                                      bUseGore:1;                                       		// 0x0240 ( 0x0004 )  [0x00000002]
	unsigned long                                      bUseMouseRevision:1;                              		// 0x0240 ( 0x0004 )  [0x00000004]
	unsigned long                                      bUseStanceToggle:1;                               		// 0x0240 ( 0x0004 )  [0x00000008]
	unsigned long                                      bUseAdvCamShake:1;                                		// 0x0240 ( 0x0004 )  [0x00000010]
	int                                                ShopItemListCount;                                		// 0x0244 ( 0x0004 ) 
	class TArray< int >                                ShopItemList;                                     		// 0x0248 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                FlagModify;                                       		// 0x0254 ( 0x0004 ) 
	int                                                FlagDurability;                                   		// 0x0258 ( 0x0004 ) 
	int                                                FlagRenew;                                        		// 0x025C ( 0x0004 ) 
	int                                                FlagCash;                                         		// 0x0260 ( 0x0004 ) 
	int                                                FlagPCBang;                                       		// 0x0264 ( 0x0004 ) 
	int                                                FlagSellShop;                                     		// 0x0268 ( 0x0004 ) 
	int                                                FlagBuyShop;                                      		// 0x026C ( 0x0004 ) 
	class UClanMarkManager*                            cmm;                                              		// 0x0270 ( 0x0004 ) 
	class TArray< struct FBtrDouble >                  kBlockedItemIdx;                                  		// 0x0274 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FBtrDouble                                  kServerTime;                                      		// 0x0280 ( 0x0008 ) 
	int                                                kClientMSec;                                      		// 0x0288 ( 0x0004 ) 
	struct FBtrDouble                                  kClientTime;                                      		// 0x028C ( 0x0008 ) 
	struct FBtrDouble                                  kDiffTime;                                        		// 0x0294 ( 0x0008 ) 
	unsigned long                                      bForceUpdateEventTimer:1;                         		// 0x029C ( 0x0004 )  [0x00000001]
	class TArray< struct FEventTimerStruct >           kEventTimerList;                                  		// 0x02A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                kWebzenShopVer_Year;                              		// 0x02AC ( 0x0004 ) 
	int                                                kWebzenShopVer_YearID;                            		// 0x02B0 ( 0x0004 ) 
	int                                                kWebzenShopVer_SalesZoneCode;                     		// 0x02B4 ( 0x0004 ) 
	class TArray< struct FWebzenInven >                kWZInvenList;                                     		// 0x02B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FWebzenShopCategory >         kWZCategoryList;                                  		// 0x02C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FWebzenShopPackage >          kWZPackageList;                                   		// 0x02D0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                GP20ShopVersion;                                  		// 0x02DC ( 0x0004 ) 
	class TArray< struct FGP20Product >                kGP20ProductList;                                 		// 0x02E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateServerTime__Delegate;                     		// 0x02EC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateWebzenShopVerInfo__Delegate;              		// 0x02F4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateWebzenShopItemList__Delegate;             		// 0x02FC ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateItemList__Delegate;                       		// 0x0304 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateWebzenItemList__Delegate;                 		// 0x030C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateSkillBoxList__Delegate;                   		// 0x0314 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __UpdateQuickSlotBoxList__Delegate;               		// 0x031C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __dele_UpdateEventTimer__Delegate;                		// 0x0324 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      CheckSpCharItem ( int iItemType );                		//  Engine.wGameManager.CheckSpCharItem
	 bool                      CheckAccessoryItem ( int iItemType );             		//  Engine.wGameManager.CheckAccessoryItem
	 bool                      CheckFaceItem ( int iItemType );                  		//  Engine.wGameManager.CheckFaceItem
	 bool                      CheckHeadItem ( int iItemType );                  		//  Engine.wGameManager.CheckHeadItem
	 bool                      CheckThrowingWeapon ( int iItemType );            		//  Engine.wGameManager.CheckThrowingWeapon
	 bool                      CheckLvMark ( int iItemType );                    		//  Engine.wGameManager.CheckLvMark
	 bool                      CheckRandBoxItem ( int iItemType );               		//  Engine.wGameManager.CheckRandBoxItem
	 bool                      CheckUseItem ( int iItemType );                   		//  Engine.wGameManager.CheckUseItem
	 bool                      CheckItemBox ( int iItemType );                   		//  Engine.wGameManager.CheckItemBox
	 bool                      CheckSkillItem ( int iItemType );                 		//  Engine.wGameManager.CheckSkillItem
	 bool                      CheckPistolItem ( int iItemType );                		//  Engine.wGameManager.CheckPistolItem
	 bool                      CheckMGItem ( int iItemType );                    		//  Engine.wGameManager.CheckMGItem
	 bool                      CheckSGItem ( int iItemType );                    		//  Engine.wGameManager.CheckSGItem
	 bool                      CheckSRItem ( int iItemType );                    		//  Engine.wGameManager.CheckSRItem
	 bool                      CheckSMGItem ( int iItemType );                   		//  Engine.wGameManager.CheckSMGItem
	 bool                      CheckARItem ( int iItemType );                    		//  Engine.wGameManager.CheckARItem
	 bool                      CheckEquipQuickSlotItem ( int iItemType );        		//  Engine.wGameManager.CheckEquipQuickSlotItem
	 bool                      CheckMainQuickSlotItem ( int iItemType );         		//  Engine.wGameManager.CheckMainQuickSlotItem
	 bool                      CheckQuickSlotItem ( int iItemType );             		//  Engine.wGameManager.CheckQuickSlotItem
	 bool                      CheckSubWeaponItem ( int iItemType );             		//  Engine.wGameManager.CheckSubWeaponItem
	 bool                      CheckMainWeaponItem ( int iItemType );            		//  Engine.wGameManager.CheckMainWeaponItem
	 bool                      CheckWeaponItem ( int iItemType );                		//  Engine.wGameManager.CheckWeaponItem
	 class UI3DL2Listener*     GetEAXEffect ( struct FString strEffectClassName );		// [ FUNC_Simulated ] Engine.wGameManager.GetEAXEffect
	 struct FString            GetLevelImageString ( int Level, int LevelMarkID );		//  Engine.wGameManager.GetLevelImageString
	 struct FFloatBox          GetLevelImageCoordi ( int Level, int LevelMarkID );		//  Engine.wGameManager.GetLevelImageCoordi
	 struct FString            GetClanLevelImages ( int Level );                 		//  Engine.wGameManager.GetClanLevelImages
	 int                       GetLevelByLevelMarkID ( int LevelMarkID );        		//  Engine.wGameManager.GetLevelByLevelMarkID
	 int                       GetLevel ( int Exp );                             		//  Engine.wGameManager.GetLevel
	 void                      LoadSupplyRandomTable (  );                       		//  Engine.wGameManager.LoadSupplyRandomTable
	 void                      LoadMapInfos (  );                                		//  Engine.wGameManager.LoadMapInfos
	 int                       GetPaintingItemIDbyPaintingID ( int PaintingID ); 		//  Engine.wGameManager.GetPaintingItemIDbyPaintingID
	 int                       GetPaintGroupParamsIndex ( int PaintingID );      		//  Engine.wGameManager.GetPaintGroupParamsIndex
	 class UwPaintGroupParam*  GetPaintGroupParam ( int iPaintingID );           		//  Engine.wGameManager.GetPaintGroupParam
	 struct FString            GetPaintingUIIcon ( int iItemID );                		//  Engine.wGameManager.GetPaintingUIIcon
	 void                      AddPaintGroupParam_NullData (  );                 		//  Engine.wGameManager.AddPaintGroupParam_NullData
	 void                      AddPaintGroupParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddPaintGroupParams
	 void                      LoadPaintGroupParameters (  );                    		//  Engine.wGameManager.LoadPaintGroupParameters
	 class UMaterial*          GetPartsGroupPainting ( int iItemID, int iPartsID, bool bThird, int iPainting_Item_ID );		//  Engine.wGameManager.GetPartsGroupPainting
	 class UwPartsGroupParam*  GetDefaultAddPartsGroupParam ( int iItemID );     		//  Engine.wGameManager.GetDefaultAddPartsGroupParam
	 class UwPartsGroupParam*  GetAddPartsGroupParam ( int iPartsGrouplID );     		//  Engine.wGameManager.GetAddPartsGroupParam
	 void                      AddAddPartsGroupParam_NullData (  );              		//  Engine.wGameManager.AddAddPartsGroupParam_NullData
	 void                      AddAddPartsGroupParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddAddPartsGroupParams
	 void                      LoadAddPartsGroupParameters (  );                 		//  Engine.wGameManager.LoadAddPartsGroupParameters
	 void                      AddItemBoxParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddItemBoxParams
	 void                      AddItemBoxParam_NullData (  );                    		//  Engine.wGameManager.AddItemBoxParam_NullData
	 void                      LoadItemBoxParameters (  );                       		//  Engine.wGameManager.LoadItemBoxParameters
	 struct FImage             GetClanMark128 ( int clanmarkid );                		//  Engine.wGameManager.GetClanMark128
	 struct FImage             GetClanMark32 ( int clanmarkid );                 		//  Engine.wGameManager.GetClanMark32
	 struct FImage             GetMyClanBL (  );                                 		//  Engine.wGameManager.GetMyClanBL
	 struct FImage             GetMyClanBG (  );                                 		//  Engine.wGameManager.GetMyClanBG
	 struct FImage             GetMyClanPattern (  );                            		//  Engine.wGameManager.GetMyClanPattern
	 int                       FindClanMarkIndex ( int clanmarkid );             		//  Engine.wGameManager.FindClanMarkIndex
	 class UwClanMarkParam*    FindClanMarkParams ( int clanmarkid );            		//  Engine.wGameManager.FindClanMarkParams
	 void                      AddClanMarkParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddClanMarkParams
	 void                      AddClanMarkParam_NullData (  );                   		//  Engine.wGameManager.AddClanMarkParam_NullData
	 void                      LoadModeDOAParameters (  );                       		//  Engine.wGameManager.LoadModeDOAParameters
	 bool                      GetRandBoxItems ( int ItemID, int RandNum, class TArray< int >* ItemIDs, class TArray< int >* PartIDs );		//  Engine.wGameManager.GetRandBoxItems
	 int                       GetRandBoxItemsCount ( int ItemID );              		//  Engine.wGameManager.GetRandBoxItemsCount
	 void                      AddRandBoxParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddRandBoxParams
	 void                      AddRandBoxParam_NullData (  );                    		//  Engine.wGameManager.AddRandBoxParam_NullData
	 void                      LoadRandBoxParameters (  );                       		//  Engine.wGameManager.LoadRandBoxParameters
	 int                       GetLastDailyQuestID ( int QuestID );              		//  Engine.wGameManager.GetLastDailyQuestID
	 int                       GetPrevDailyQuestID ( int QuestID );              		//  Engine.wGameManager.GetPrevDailyQuestID
	 int                       GetDailyQuestIDFromTypeAndStep ( int ServerTime, int DailyQuestType, int Step );		//  Engine.wGameManager.GetDailyQuestIDFromTypeAndStep
	 int                       GetDailyQuestType ( int QuestID );                		//  Engine.wGameManager.GetDailyQuestType
	 void                      AddDailyQuestParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddDailyQuestParams
	 void                      AddDailyQuestParam_NullData (  );                 		//  Engine.wGameManager.AddDailyQuestParam_NullData
	 void                      LoadDailyQuestParameters (  );                    		//  Engine.wGameManager.LoadDailyQuestParameters
	 struct FBtrTime           TimeStringToBtrTime ( struct FString strInTime ); 		//  Engine.wGameManager.TimeStringToBtrTime
	 bool                      HasEnableEventQuest ( struct FBtrDouble ServerTime, class UwMatchMaker* wMM );		//  Engine.wGameManager.HasEnableEventQuest
	 int                       GetLinkQuestMaxStep ( int LinkQuestID );          		//  Engine.wGameManager.GetLinkQuestMaxStep
	 class UwQuestParam*       GetLinkQuestInfo ( int LinkQuestID, int LinkQuestStep );		//  Engine.wGameManager.GetLinkQuestInfo
	 int                       GetQuestInfoIndex ( int QuestID );                		//  Engine.wGameManager.GetQuestInfoIndex
	 class UwQuestParam*       GetQuestInfoFromIndex ( int Index );              		//  Engine.wGameManager.GetQuestInfoFromIndex
	 class UwQuestParam*       GetQuestInfo ( int QuestID );                     		//  Engine.wGameManager.GetQuestInfo
	 int                       GetItemType ( class UwItemBoxHK* ItemInfo, class UwItemBoxInstanceHK* instanceInfo );		//  Engine.wGameManager.GetItemType
	 bool                      IsEnableWeaponModify ( class UwItemBoxHK* ItemInfo );		//  Engine.wGameManager.IsEnableWeaponModify
	 void                      AddQuestParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddQuestParams
	 void                      AddQuestParam_NullData (  );                      		//  Engine.wGameManager.AddQuestParam_NullData
	 void                      LoadQuestParameters (  );                         		//  Engine.wGameManager.LoadQuestParameters
	 void                      GetPromotionItems ( int Level, class TArray< class UwPromotionParam* >* arrItems );		//  Engine.wGameManager.GetPromotionItems
	 int                       GetPromotionItemsCount ( int Level );             		//  Engine.wGameManager.GetPromotionItemsCount
	 void                      AddPromotionParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddPromotionParams
	 void                      AddPromotionParam_NullData (  );                  		//  Engine.wGameManager.AddPromotionParam_NullData
	 void                      LoadPromotionParameters (  );                     		//  Engine.wGameManager.LoadPromotionParameters
	 void                      AddClanLevelInfoParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddClanLevelInfoParams
	 void                      AddClanLevelInfoParam_NullData (  );              		//  Engine.wGameManager.AddClanLevelInfoParam_NullData
	 void                      LoadClanLevelInfoParams (  );                     		//  Engine.wGameManager.LoadClanLevelInfoParams
	 void                      AddLevelInfoParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddLevelInfoParams
	 void                      AddLevelInfoParam_NullData (  );                  		//  Engine.wGameManager.AddLevelInfoParam_NullData
	 void                      LoadLevelInfoParams (  );                         		//  Engine.wGameManager.LoadLevelInfoParams
	 class UwSkillBaseParam*   GetSkillParam ( int iSkillID );                   		//  Engine.wGameManager.GetSkillParam
	 void                      AddSkillParam_NullData (  );                      		//  Engine.wGameManager.AddSkillParam_NullData
	 void                      AddSkillParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddSkillParams
	 void                      LoadSkillParameters (  );                         		//  Engine.wGameManager.LoadSkillParameters
	 class UStaticMesh*        GetItemResourceStaticMesh ( int iItemID, bool b3rd, unsigned char byTeam, unsigned char byCase );		//  Engine.wGameManager.GetItemResourceStaticMesh
	 class UMesh*              GetItemResourceMesh ( int iItemID, bool b3rd, unsigned char byTeam, unsigned char byCase );		//  Engine.wGameManager.GetItemResourceMesh
	 void                      PrecacheItemResources ( class ALevelInfo* Level );		//  Engine.wGameManager.PrecacheItemResources
	 class UwItemResourceParam* GetItemResourceParam ( int iItemID );             		//  Engine.wGameManager.GetItemResourceParam
	 void                      AddItemResourceParam_NullData (  );               		//  Engine.wGameManager.AddItemResourceParam_NullData
	 void                      AddItemResourceParams ( class UBTNetGameData* GameData );		//  Engine.wGameManager.AddItemResourceParams
	 void                      LoadItemResourceParams (  );                      		//  Engine.wGameManager.LoadItemResourceParams
	 class UwItemBaseParam*    GetItemParam ( int iItemID );                     		//  Engine.wGameManager.GetItemParam
	 void                      AddItemParam_NullData (  );                       		//  Engine.wGameManager.AddItemParam_NullData
	 void                      AddItemParams ( class UBTNetGameData* GameData ); 		//  Engine.wGameManager.AddItemParams
	 void                      LoadItemParameters (  );                          		//  Engine.wGameManager.LoadItemParameters
	 void                      eventDestroyScript (  );                          		// [ FUNC_Event ] Engine.wGameManager.DestroyScript
	 bool                      ContainsBadNicks ( struct FString S, struct FString* badword );		//  Engine.wGameManager.ContainsBadNicks
	 bool                      FilterBadWords ( struct FString* S );             		//  Engine.wGameManager.FilterBadWords
	 bool                      ContainsBadWords ( struct FString S, struct FString* badword );		//  Engine.wGameManager.ContainsBadWords
	 void                      LoadBadwords (  );                                		//  Engine.wGameManager.LoadBadwords
	 void                      LoadAlienGameInfo (  );                           		//  Engine.wGameManager.LoadAlienGameInfo
	 int                       GetDefenceGameRoundCount2 ( int Level, int MapID );		//  Engine.wGameManager.GetDefenceGameRoundCount2
	 void                      GetDefenceGameBotGradeList2 ( int Level, int MapID, int Round, class TArray< int >* GradeList );		//  Engine.wGameManager.GetDefenceGameBotGradeList2
	 void                      GetDefenceGamePrams2 ( int Level, int MapID, int Round, class TArray< int >* DelayTime, class TArray< int >* RegenLoc, class TArray< int >* Grade, class TArray< int >* Unit );		//  Engine.wGameManager.GetDefenceGamePrams2
	 void                      LoadDefenceGameInfo (  );                         		//  Engine.wGameManager.LoadDefenceGameInfo
	 void                      LoadClanMarkParameters (  );                      		//  Engine.wGameManager.LoadClanMarkParameters
	 void                      GetLevelDefenceGameParam ( int iLevel, class TArray< class UwDefenceGameParam* >* params );		//  Engine.wGameManager.GetLevelDefenceGameParam
	 void                      SetLevelDefenceGameParam ( int iLevel, class TArray< class UwDefenceGameParam* > params );		//  Engine.wGameManager.SetLevelDefenceGameParam
	 void                      LoadNPCActionGroup (  );                          		//  Engine.wGameManager.LoadNPCActionGroup
	 void                      LoadNPCItemGroup (  );                            		//  Engine.wGameManager.LoadNPCItemGroup
	 void                      LoadNPCNameGroup (  );                            		//  Engine.wGameManager.LoadNPCNameGroup
	 void                      LoadNPC (  );                                     		//  Engine.wGameManager.LoadNPC
	 void                      LoadNPCSpawn (  );                                		//  Engine.wGameManager.LoadNPCSpawn
	 void                      LoadLevelTextures (  );                           		//  Engine.wGameManager.LoadLevelTextures
	 void                      eventInitPrecacheItems (  );                      		// [ FUNC_Event ] Engine.wGameManager.InitPrecacheItems
	 void                      eventInitHK (  );                                 		// [ FUNC_Event ] Engine.wGameManager.InitHK
	 void                      LoadWeaponCustomPartsParameters (  );             		//  Engine.wGameManager.LoadWeaponCustomPartsParameters
	 void                      LoadWeaponCustomInfoParameters (  );              		//  Engine.wGameManager.LoadWeaponCustomInfoParameters
	 class UwWeaponCustomInfoParam* GetWeaponCustomInfoParam ( int iInItemID );       		//  Engine.wGameManager.GetWeaponCustomInfoParam
	 class UwWeaponCustomPartsParam* GetWeaponCustomPartsParamByUnionedPartID ( int iInUnionedPartID );		//  Engine.wGameManager.GetWeaponCustomPartsParamByUnionedPartID
	 class UwWeaponCustomPartsParam* GetWeaponCustomPartsParamByItemID ( int iInItemID );		//  Engine.wGameManager.GetWeaponCustomPartsParamByItemID
	 void                      eventInitScript (  );                             		// [ FUNC_Event ] Engine.wGameManager.InitScript
	 int                       GetWeaponCustomPartsIndex ( int iUnionedPartID ); 		// [ FUNC_Native ] Engine.wGameManager.GetWeaponCustomPartsIndex
	 void                      SetWeaponCustomPartsIndex ( int iUnionedPartID, int iArrayIndex );		// [ FUNC_Native ] Engine.wGameManager.SetWeaponCustomPartsIndex
	 int                       GetWeaponCustomInfoIndex ( int iItemIndex );      		// [ FUNC_Native ] Engine.wGameManager.GetWeaponCustomInfoIndex
	 void                      SetWeaponCustomInfoIndex ( int iItemIndex, int iArrayIndex );		// [ FUNC_Native ] Engine.wGameManager.SetWeaponCustomInfoIndex
	 int                       GetPartsGroupArrayIndex ( int iPartsGroupIndex ); 		// [ FUNC_Native ] Engine.wGameManager.GetPartsGroupArrayIndex
	 void                      SetPartsGroupIndex ( int iPartsGroupIndex, int iArrayIndex );		// [ FUNC_Native ] Engine.wGameManager.SetPartsGroupIndex
	 int                       GetSkillArrayIndex ( int iSkillIndex );           		// [ FUNC_Native ] Engine.wGameManager.GetSkillArrayIndex
	 void                      SetSkillIndex ( int iSkillIndex, int iArrayIndex );		// [ FUNC_Native ] Engine.wGameManager.SetSkillIndex
	 int                       GetItemArrayIndex ( int iItemIndex );             		// [ FUNC_Native ] Engine.wGameManager.GetItemArrayIndex
	 void                      SetItemIndex ( int iItemIndex, int iArrayIndex ); 		// [ FUNC_Native ] Engine.wGameManager.SetItemIndex
	 struct FBtrDouble         GetSubWeaponUniqueID (  );                        		//  Engine.wGameManager.GetSubWeaponUniqueID
	 struct FBtrDouble         GetMainWeaponUniqueID (  );                       		//  Engine.wGameManager.GetMainWeaponUniqueID
	 int                       GetSubWeaponID (  );                              		//  Engine.wGameManager.GetSubWeaponID
	 int                       GetMainWeaponID (  );                             		//  Engine.wGameManager.GetMainWeaponID
	 void                      ClearInstanceItem (  );                           		//  Engine.wGameManager.ClearInstanceItem
	 int                       FindInstanceItemIDBySlotPos ( int SlotPos );      		//  Engine.wGameManager.FindInstanceItemIDBySlotPos
	 class UwItemBoxInstanceHK* FindInstanceItemBySlotPos ( int SlotPos );        		//  Engine.wGameManager.FindInstanceItemBySlotPos
	 int                       FindInstanceItemReturnIndexByUniqueSkillID ( int UniqueSkillID );		//  Engine.wGameManager.FindInstanceItemReturnIndexByUniqueSkillID
	 int                       FindInstanceItemReturnIndex ( struct FBtrDouble UniqueID );		//  Engine.wGameManager.FindInstanceItemReturnIndex
	 bool                      RemoveInstanceItemByUniqueSkillID ( int UniqueSkillID );		//  Engine.wGameManager.RemoveInstanceItemByUniqueSkillID
	 bool                      RemoveInstanceItem ( struct FBtrDouble UniqueID );		//  Engine.wGameManager.RemoveInstanceItem
	 int                       FindInstanceSkillItemReturnIndex ( int UniqueID );		//  Engine.wGameManager.FindInstanceSkillItemReturnIndex
	 class UwItemBoxInstanceHK* FindFirstInstanceItemByItemID ( int ItemID );     		//  Engine.wGameManager.FindFirstInstanceItemByItemID
	 class UwItemBoxInstanceHK* FindInstanceSkillItem ( int UniqueID );           		//  Engine.wGameManager.FindInstanceSkillItem
	 class UwItemBoxInstanceHK* FindInstanceItemSameWeapon ( int ItemID, int PartID );		//  Engine.wGameManager.FindInstanceItemSameWeapon
	 class UwItemBoxInstanceHK* FindInstanceItem ( struct FBtrDouble UniqueID );  		//  Engine.wGameManager.FindInstanceItem
	 void                      ChangeInstance_SkillSlotPos ( int SkillUniqueID, int SlotPos );		//  Engine.wGameManager.ChangeInstance_SkillSlotPos
	 bool                      ChangeInstance_ItemSlotPos ( struct FBtrDouble UniqueID, int SlotPos );		//  Engine.wGameManager.ChangeInstance_ItemSlotPos
	 bool                      ChangeInstance_StackCount ( struct FBtrDouble UniqueID, int StackCount );		//  Engine.wGameManager.ChangeInstance_StackCount
	 bool                      ChangeInstance_ItemReduceDurability ( struct FBtrDouble UniqueID, int dur );		//  Engine.wGameManager.ChangeInstance_ItemReduceDurability
	 bool                      ChangeInstance_ItemDamageDegree ( struct FBtrDouble UniqueID, int dd );		//  Engine.wGameManager.ChangeInstance_ItemDamageDegree
	 bool                      ChangeInstance_ItemDurability ( struct FBtrDouble UniqueID, int dur );		//  Engine.wGameManager.ChangeInstance_ItemDurability
	 bool                      ChangeInstance_DefaultWeapon ( int SlotPos );     		//  Engine.wGameManager.ChangeInstance_DefaultWeapon
	 void                      ChangeInstance_ItemLeftTime ( struct FBtrDouble CurrentTime );		//  Engine.wGameManager.ChangeInstance_ItemLeftTime
	 bool                      AddInstanceItem ( class UwItemBoxInstanceHK* Item );		//  Engine.wGameManager.AddInstanceItem
	 bool                      AddCashItem ( struct FString strEndDate, class UwItemBoxHK** ItemInfo, class UwItemBoxInstanceHK** instanceInfo );		//  Engine.wGameManager.AddCashItem
	 class UwItemBoxInstanceHK* AddInstanceItemByParameter ( int ItemID, struct FBtrDouble UniqueID, int UniqueSkillID, int SlotPos, int ItemState, int Durability, int PartID, int PaintID, int StackCount, int DamageDegree, struct FBtrDouble UntilTime, bool bStackAdd, int TradeCount );		//  Engine.wGameManager.AddInstanceItemByParameter
	 bool                      AddInstanceSkillItemFromSkillBoxList (  );        		//  Engine.wGameManager.AddInstanceSkillItemFromSkillBoxList
	 int                       FindUIItemReturnIndex ( int ItemID );             		//  Engine.wGameManager.FindUIItemReturnIndex
	 class UwItemBoxHK*        FindUIItem ( int ItemID );                        		//  Engine.wGameManager.FindUIItem
	 bool                      AddUIItem ( class UwItemBoxHK* Item );            		//  Engine.wGameManager.AddUIItem
	 bool                      CompareLE_UIShowItemLists ( class UwItemBoxHK* L, class UwItemBoxHK* R );		//  Engine.wGameManager.CompareLE_UIShowItemLists
	 bool                      SetQuickSlotBox_Skill ( int DispOrder, int SlotPos, int SkillID, int UniqueSkillID );		//  Engine.wGameManager.SetQuickSlotBox_Skill
	 bool                      SetQuickSlotBox_Item ( int DispOrder, int SlotPos, int ItemID, struct FBtrDouble UniqueID );		//  Engine.wGameManager.SetQuickSlotBox_Item
	 void                      RemoveQuickSlotItem ( struct FBtrDouble UniqueID );		//  Engine.wGameManager.RemoveQuickSlotItem
	 bool                      SetQuickSlotBox_ID ( int DispOrder, int QuickSlotID );		//  Engine.wGameManager.SetQuickSlotBox_ID
	 bool                      SetQuickSlotBox_Name ( int DispOrder, struct FString QSName );		//  Engine.wGameManager.SetQuickSlotBox_Name
	 void                      AllocateQuickSlotBoxList ( int Len );             		//  Engine.wGameManager.AllocateQuickSlotBoxList
	 void                      ClearQuickSlotBoxList (  );                       		//  Engine.wGameManager.ClearQuickSlotBoxList
	 void                      ReplaceQuickSkillSlotItem ( int SkillID, int UniqueSkillID );		//  Engine.wGameManager.ReplaceQuickSkillSlotItem
	 bool                      RemoveQuickSlotBoxSkillItem ( int UniqueID );     		//  Engine.wGameManager.RemoveQuickSlotBoxSkillItem
	 class TArray< int >       GetQuickSlotIndexOfBoxSkillItem ( int UniqueSkillID );		//  Engine.wGameManager.GetQuickSlotIndexOfBoxSkillItem
	 bool                      IsQuickSlotBoxSkillItem ( int UniqueSkillID );    		//  Engine.wGameManager.IsQuickSlotBoxSkillItem
	 void                      ReplaceQuickSlotBoxItem ( struct FBtrDouble OldUniqueID, int ItemID, struct FBtrDouble NewUniqueID );		//  Engine.wGameManager.ReplaceQuickSlotBoxItem
	 int                       GetQuickSlotIndexOfBoxItem ( struct FBtrDouble UniqueID );		//  Engine.wGameManager.GetQuickSlotIndexOfBoxItem
	 bool                      IsQuickSlotBoxItem ( struct FBtrDouble UniqueID );		//  Engine.wGameManager.IsQuickSlotBoxItem
	 bool                      RemoveQuickSlotBoxItem ( struct FBtrDouble UniqueID );		//  Engine.wGameManager.RemoveQuickSlotBoxItem
	 bool                      AddUISkillBox ( unsigned char SlotPos, int SkillID, int UniqueSkillID, struct FBtrDouble UntilTime );		//  Engine.wGameManager.AddUISkillBox
	 void                      ChangeSkillBox_SlotPos ( int SkillUniqueID, int SlotPos );		//  Engine.wGameManager.ChangeSkillBox_SlotPos
	 class UwSkillBoxHK*       FindSkillBoxBySlotPos ( int SlotPos );            		//  Engine.wGameManager.FindSkillBoxBySlotPos
	 class UwSkillBoxHK*       FindSkillBox ( int UniqueSkillID );               		//  Engine.wGameManager.FindSkillBox
	 void                      ClearSkillBoxList (  );                           		//  Engine.wGameManager.ClearSkillBoxList
	 void                      LoadUILists (  );                                 		//  Engine.wGameManager.LoadUILists
	 int                       IsEnableRemovePart ( class UwItemBaseParam* Inip, unsigned char InType );		//  Engine.wGameManager.IsEnableRemovePart
	 int                       IsUsablePartItem ( int iItemID, int iPartsArrayIndex );		//  Engine.wGameManager.IsUsablePartItem
	 int                       IsExistShopItemList ( int iItemID );              		//  Engine.wGameManager.IsExistShopItemList
	 bool                      GetClanLevelMarkInfo ( struct FString ClanName, int* ClanPattern, int* ClanBG, int* ClanBL );		//  Engine.wGameManager.GetClanLevelMarkInfo
	 struct FImage             GetClanLevelImage ( int Level );                  		//  Engine.wGameManager.GetClanLevelImage
	 class UTexture*           GetClanLevelTexture ( int Level );                		//  Engine.wGameManager.GetClanLevelTexture
	 struct FString            GetClanLevelName ( int Level );                   		//  Engine.wGameManager.GetClanLevelName
	 int                       GetClanEndExp ( int Level );                      		//  Engine.wGameManager.GetClanEndExp
	 int                       GetClanStartExp ( int Level );                    		//  Engine.wGameManager.GetClanStartExp
	 class UTexture*           GetLevelTexture ( int Level, int LevelMarkID );   		//  Engine.wGameManager.GetLevelTexture
	 void                      GetLevelImage ( int Level, int LevelMarkID, struct FImage* LevelImage );		//  Engine.wGameManager.GetLevelImage
	 struct FString            GetLevelName ( int Level );                       		//  Engine.wGameManager.GetLevelName
	 int                       GetEndExp ( int Level );                          		//  Engine.wGameManager.GetEndExp
	 int                       GetStartExp ( int Level );                        		//  Engine.wGameManager.GetStartExp
	 void                      dele_UpdateEventTimer ( int EventType, struct FBtrDouble EventTime );		//  Engine.wGameManager.dele_UpdateEventTimer
	 struct FBtrDouble         NextEventTime ( struct FBtrDouble t );            		//  Engine.wGameManager.NextEventTime
	 void                      UpdateEventTimer ( struct FBtrDouble st, int msec );		//  Engine.wGameManager.UpdateEventTimer
	 void                      LogEventTimerList ( int AddItemIndex );           		//  Engine.wGameManager.LogEventTimerList
	 int                       GetEventTimerCount ( int EventType );             		//  Engine.wGameManager.GetEventTimerCount
	 struct FBtrDouble         GetLeftEventTime ( int EventType );               		//  Engine.wGameManager.GetLeftEventTime
	 void                      RemoveEventTimer ( int EventType );               		//  Engine.wGameManager.RemoveEventTimer
	 void                      AddEventTimerCount ( int EventType );             		//  Engine.wGameManager.AddEventTimerCount
	 void                      AddEventTimer ( int EventType, struct FBtrDouble EventTime, class UDelegateEventTimer* EventDelegate, int EventMSec );		//  Engine.wGameManager.AddEventTimer
	 bool                      IsBlockedItemIdx ( struct FBtrDouble D );         		//  Engine.wGameManager.IsBlockedItemIdx
	 void                      AddBlockedItem ( struct FBtrDouble D );           		//  Engine.wGameManager.AddBlockedItem
	 void                      ClearBlockedItem (  );                            		//  Engine.wGameManager.ClearBlockedItem
	 void                      AddEventTimerHMS ( int EventType, int Hour, int Min, int sec, class UDelegateEventTimer* EventDelegate, int msec );		//  Engine.wGameManager.AddEventTimerHMS
	 struct FBtrDouble         GetClientTime ( bool bUpdate );                   		//  Engine.wGameManager.GetClientTime
	 void                      UpdateClientTime (  );                            		//  Engine.wGameManager.UpdateClientTime
	 void                      SetServerTime ( struct FBtrDouble S );            		//  Engine.wGameManager.SetServerTime
	 void                      UpdateQuickSlotBoxList ( class UwGameManager* GameMgr );		//  Engine.wGameManager.UpdateQuickSlotBoxList
	 void                      UpdateSkillBoxList ( class UwGameManager* GameMgr );		//  Engine.wGameManager.UpdateSkillBoxList
	 void                      UpdateWebzenItemList ( class UwGameManager* GameMgr );		//  Engine.wGameManager.UpdateWebzenItemList
	 void                      UpdateItemList ( class UwGameManager* GameMgr );  		//  Engine.wGameManager.UpdateItemList
	 void                      UpdateWebzenShopItemList ( class UwGameManager* GameMgr );		//  Engine.wGameManager.UpdateWebzenShopItemList
	 void                      UpdateWebzenShopVerInfo ( class UwGameManager* GameMgr );		//  Engine.wGameManager.UpdateWebzenShopVerInfo
	 void                      UpdateServerTime ( class UwGameManager* GameMgr );		//  Engine.wGameManager.UpdateServerTime
	 void                      DownloadWebzenShopItemList ( int Year, int YearId, int salescode );		// [ FUNC_Native ] Engine.wGameManager.DownloadWebzenShopItemList
	 int                       GetGP20ProductNo ( int ProductCode, int ProductCost, unsigned char SaleType );		//  Engine.wGameManager.GetGP20ProductNo
	 struct FGP20Product       GetGP20ProductFromCode ( int ProductCode, int* iResult );		//  Engine.wGameManager.GetGP20ProductFromCode
	 struct FWebzenShopPackage GetWebzenShopPackage2 ( int ItemID, int* iResult );		//  Engine.wGameManager.GetWebzenShopPackage2
	 struct FWebzenShopProduct GetWebzenShopProduct ( int ProductSeq, int PriceSeq );		//  Engine.wGameManager.GetWebzenShopProduct
	 struct FWebzenShopPackage GetWebzenShopPackage ( int ProductSeq, int PriceSeq );		//  Engine.wGameManager.GetWebzenShopPackage

	// Public Imports
	UwGameManager(class UwGameManager const &);
	UwGameManager(void);
	class UwGameManager &  operator=(class UwGameManager const &);
	void  DestroyNative(void);
	void  Init(class UGameEngine *);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateUpdateItemList(class UwGameManager *);
	void  delegateUpdateQuickSlotBoxList(class UwGameManager *);
	void  delegateUpdateServerTime(class UwGameManager *);
	void  delegateUpdateSkillBoxList(class UwGameManager *);
	void  delegateUpdateWebzenItemList(class UwGameManager *);
	void  delegateUpdateWebzenShopItemList(class UwGameManager *);
	void  delegateUpdateWebzenShopVerInfo(class UwGameManager *);
	void  delegatedele_UpdateEventTimer(int,class FBtrDouble);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0300

// Class Engine.WebzenShopItemListDownloader
class DLL_IMPORT UWebzenShopItemListDownloader : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x04 ];                                  		// 0x002C ( 0x0004 )

	// Public Imports
	UWebzenShopItemListDownloader(class UWebzenShopItemListDownloader const &);
	UWebzenShopItemListDownloader(void);
	class UWebzenShopItemListDownloader &  operator=(class UWebzenShopItemListDownloader const &);
	void  SetGameEngine(class UGameEngine *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.wWeaponParams
class DLL_IMPORT UwWeaponParams : public UObject
{
public:
	float                                              SprintSpeed;                                      		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	float                                              RunSpeed;                                         		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	float                                              CrouchSpeed;                                      		// 0x0034 ( 0x0004 ) [ CPF_Edit ]
	float                                              PronedSpeed;                                      		// 0x0038 ( 0x0004 ) [ CPF_Edit ]
	float                                              AimRunSpeed;                                      		// 0x003C ( 0x0004 ) [ CPF_Edit ]
	float                                              AimCrouchSpeed;                                   		// 0x0040 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDamage;                                          		// 0x0044 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UwWeaponParams(class UwWeaponParams const &);
	UwWeaponParams(void);
	class UwWeaponParams &  operator=(class UwWeaponParams const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.wCharacterManager
class DLL_IMPORT UwCharacterManager : public UObject
{
public:
	int                                                iTest;                                            		// 0x002C ( 0x0004 ) 
	class UwMyPlayerStatus*                            MyPlayer;                                         		// 0x0030 ( 0x0004 ) [ CPF_EditInline ]
	class TArray< struct FPlayerProperty >             BasePlayers;                                      		// 0x0034 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FPlayerPartsInfo >            PartsInfoRecords;                                 		// 0x0040 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      eventRemoveBasePlayers (  );                      		// [ FUNC_Event ] Engine.wCharacterManager.RemoveBasePlayers
	 void                      eventAddBasePlayers (  );                         		// [ FUNC_Event ] Engine.wCharacterManager.AddBasePlayers
	 void                      eventInitMyPlayer (  );                           		// [ FUNC_Event ] Engine.wCharacterManager.InitMyPlayer
	 void                      LoadCacheMoveParam (  );                          		//  Engine.wCharacterManager.LoadCacheMoveParam
	 void                      LoadPartsData (  );                               		//  Engine.wCharacterManager.LoadPartsData
	 struct FPlayerPartsInfo   GetPartsById ( int iID );                         		// [ FUNC_Final ] Engine.wCharacterManager.GetPartsById
	 struct FPlayerSet         GetPlayerSetTest ( struct FString TestName );     		// [ FUNC_Final ] Engine.wCharacterManager.GetPlayerSetTest
	 class UwMyPlayerStatus*   GetMyStatus (  );                                 		// [ FUNC_Final ] Engine.wCharacterManager.GetMyStatus
	 void                      eventDestroyScript (  );                          		// [ FUNC_Event ] Engine.wCharacterManager.DestroyScript
	 void                      eventInitScript (  );                             		// [ FUNC_Event ] Engine.wCharacterManager.InitScript
	 void                      InitNative (  );                                  		// [ FUNC_Final | FUNC_Native ] Engine.wCharacterManager.InitNative
	 void                      Get ( class AActor* P );                          		// [ FUNC_Final | FUNC_Native ] Engine.wCharacterManager.Get

	// Public Imports
	UwCharacterManager(class UwCharacterManager const &);
	UwCharacterManager(void);
	class UwCharacterManager &  operator=(class UwCharacterManager const &);
	void  DestroyNative(void);
	void  Init(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class Engine.wSkills
class DLL_IMPORT UwSkills : public UObject
{
public:

	// Public Imports
	UwSkills(class UwSkills const &);
	class UwSkills &  operator=(class UwSkills const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.wInventory
class DLL_IMPORT UwInventory : public UObject
{
public:
	class TArray< struct FWeaponPart >                 Weapons;                                          		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UwInventory(class UwInventory const &);
	class UwInventory &  operator=(class UwInventory const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.wMyPlayerStatus
class DLL_IMPORT UwMyPlayerStatus : public UObject
{
public:
	struct FBtrDouble                                  CurrentTime;                                      		// 0x002C ( 0x0008 ) 
	int                                                UserID;                                           		// 0x0034 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	struct FString                                     NickName;                                         		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	struct FString                                     ClanName;                                         		// 0x0044 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	int                                                Level;                                            		// 0x0050 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                nExp;                                             		// 0x0054 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Stamina;                                          		// 0x0058 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                HP;                                               		// 0x005C ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Ranking;                                          		// 0x0060 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Kill;                                             		// 0x0064 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Death;                                            		// 0x0068 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Win;                                              		// 0x006C ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Lose;                                             		// 0x0070 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                TeamKill;                                         		// 0x0074 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Assist;                                           		// 0x0078 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Point;                                            		// 0x007C ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                Cash;                                             		// 0x0080 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                HeadShot2;                                        		// 0x0084 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                DisCon;                                           		// 0x0088 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                TotPlayTime;                                      		// 0x008C ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                DispHeadItem;                                     		// 0x0090 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                DispHeadAddItem;                                  		// 0x0094 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                DispFaceItem;                                     		// 0x0098 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                DispBodyItem;                                     		// 0x009C ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                DispUniformItem;                                  		// 0x00A0 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	int                                                DispBackpack;                                     		// 0x00A4 ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	unsigned char                                      Activated;                                        		// 0x00A8 ( 0x0001 ) 
	class TArray< struct FsItem >                      ItemList;                                         		// 0x00AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FsSkill >                     SkillList;                                        		// 0x00B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FsQuickSlot >                 QuickSlotList;                                    		// 0x00C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              SprintSpeed;                                      		// 0x00D0 ( 0x0004 ) [ CPF_Edit ]
	float                                              RunSpeed;                                         		// 0x00D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              CrouchSpeed;                                      		// 0x00D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              PronedSpeed;                                      		// 0x00DC ( 0x0004 ) [ CPF_Edit ]
	float                                              AimRunSpeed;                                      		// 0x00E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              AimCrouchSpeed;                                   		// 0x00E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              F_DiagmoveRatio;                                  		// 0x00E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              SideMoveRatio;                                    		// 0x00EC ( 0x0004 ) [ CPF_Edit ]
	float                                              B_DiagmoveRatio;                                  		// 0x00F0 ( 0x0004 ) [ CPF_Edit ]
	float                                              BackMoveRatio;                                    		// 0x00F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              AccelRate;                                        		// 0x00F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              JumpMaxAcc;                                       		// 0x00FC ( 0x0004 ) [ CPF_Edit ]
	float                                              JumpMinAcc;                                       		// 0x0100 ( 0x0004 ) [ CPF_Edit ]
	float                                              JumpReduceRate;                                   		// 0x0104 ( 0x0004 ) [ CPF_Edit ]
	float                                              JumpRecoverRate;                                  		// 0x0108 ( 0x0004 ) [ CPF_Edit ]
	float                                              Land_Dropspeed_Rate;                              		// 0x010C ( 0x0004 ) [ CPF_Edit ]
	float                                              ProneCam_MaxPicth;                                		// 0x0110 ( 0x0004 ) [ CPF_Edit ]
	float                                              ProneCam_MaxYaw;                                  		// 0x0114 ( 0x0004 ) [ CPF_Edit ]
	float                                              ProneCam_RotSpeed;                                		// 0x0118 ( 0x0004 ) [ CPF_Edit ]
	float                                              Stm_MaxTime;                                      		// 0x011C ( 0x0004 ) [ CPF_Edit ]
	float                                              Stm_Delay_Stand;                                  		// 0x0120 ( 0x0004 ) [ CPF_Edit ]
	float                                              Stm_Delay_Crouch;                                 		// 0x0124 ( 0x0004 ) [ CPF_Edit ]
	float                                              Stm_Delay_Hit;                                    		// 0x0128 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     FL_Rot;                                           		// 0x012C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     FR_Rot;                                           		// 0x0138 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     BL_Rot;                                           		// 0x0144 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     BR_Rot;                                           		// 0x0150 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CFL_Rot;                                          		// 0x015C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CFR_Rot;                                          		// 0x0168 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CBL_Rot;                                          		// 0x0174 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CBR_Rot;                                          		// 0x0180 ( 0x000C ) [ CPF_Edit ]
	float                                              BodyFL_Rot;                                       		// 0x018C ( 0x0004 ) [ CPF_Edit ]
	float                                              BodyFR_Rot;                                       		// 0x0190 ( 0x0004 ) [ CPF_Edit ]
	float                                              BodyBL_Rot;                                       		// 0x0194 ( 0x0004 ) [ CPF_Edit ]
	float                                              BodyBR_Rot;                                       		// 0x0198 ( 0x0004 ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Stand_0;                                   		// 0x019C ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Stand_1;                                   		// 0x01A8 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Stand_2;                                   		// 0x01B4 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Stand_0;                                   		// 0x01C0 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Stand_1;                                   		// 0x01CC ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Stand_2;                                   		// 0x01D8 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Crouch_0;                                  		// 0x01E4 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Crouch_1;                                  		// 0x01F0 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Crouch_2;                                  		// 0x01FC ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Crouch_0;                                  		// 0x0208 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Crouch_1;                                  		// 0x0214 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Crouch_2;                                  		// 0x0220 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Prone_0;                                   		// 0x022C ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Prone_1;                                   		// 0x0238 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_L_Prone_2;                                   		// 0x0244 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Prone_0;                                   		// 0x0250 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Prone_1;                                   		// 0x025C ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    Lean_R_Prone_2;                                   		// 0x0268 ( 0x000C ) [ CPF_Edit ]
	float                                              TweenRate_Proned_Run;                             		// 0x0274 ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_Crouched_Run;                           		// 0x0278 ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_Sprint;                                 		// 0x027C ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_Run;                                    		// 0x0280 ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_Aim_Run;                                		// 0x0284 ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_Idle;                                   		// 0x0288 ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_Proned_Idle;                            		// 0x028C ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_Crouched_Idle;                          		// 0x0290 ( 0x0004 ) [ CPF_Edit ]
	float                                              TweenRate_SideStep;                               		// 0x0294 ( 0x0004 ) [ CPF_Edit ]
	int                                                iCurWeaponId;                                     		// 0x0298 ( 0x0004 ) 
	int                                                iReceivedItemTotalCount;                          		// 0x029C ( 0x0004 ) 
	int                                                iReceivedSkillTotalCount;                         		// 0x02A0 ( 0x0004 ) 

	// UScript Functions
	 void                      SetQSlotList ( class TArray< int > QSlotID, class TArray< struct FString > QSlotName, class TArray< unsigned char > QSlotDispOrder, class TArray< struct FBtrDouble > MWItemID, class TArray< struct FBtrDouble > PistolItemID, class TArray< struct FBtrDouble > TWItemID1, class TArray< struct FBtrDouble > TWItemID2, class TArray< int > Skill1, class TArray< int > Skill2, class TArray< int > Skill3, class TArray< int > Skill4 );		//  Engine.wMyPlayerStatus.SetQSlotList
	 void                      SetSkillListEnd (  );                             		//  Engine.wMyPlayerStatus.SetSkillListEnd
	 void                      SetSkillList ( class TArray< int > UniqueSkillID, class TArray< int > SkillID, class TArray< struct FBtrDouble > UntilTime, class TArray< unsigned char > SlotPosition );		//  Engine.wMyPlayerStatus.SetSkillList
	 void                      SetSkillListStart ( int Count );                  		//  Engine.wMyPlayerStatus.SetSkillListStart
	 void                      SetItemListEnd (  );                              		//  Engine.wMyPlayerStatus.SetItemListEnd
	 void                      SetItemList ( class TArray< struct FBtrDouble > UniqueID, class TArray< int > ItemID, class TArray< int > ItemType, class TArray< int > Durability, class TArray< struct FBtrDouble > UntilTime, class TArray< int > SlotPosition, class TArray< int > AddPartsID, class TArray< int > DamageDegree, class TArray< unsigned char > ItemState, class TArray< int > StackCount, class TArray< int > PaintID );		//  Engine.wMyPlayerStatus.SetItemList
	 void                      SetItemListStart ( int Count );                   		//  Engine.wMyPlayerStatus.SetItemListStart
	 void                      RemoveQuickSlotSkillItem ( int UniqueID );        		//  Engine.wMyPlayerStatus.RemoveQuickSlotSkillItem
	 void                      RemoveQuickSlotItem ( struct FBtrDouble UniqueID );		//  Engine.wMyPlayerStatus.RemoveQuickSlotItem
	 void                      RemoveItem ( struct FBtrDouble UniqueID );        		//  Engine.wMyPlayerStatus.RemoveItem
	 bool                      IsQuickSlotSkillItem ( int UniqueID );            		//  Engine.wMyPlayerStatus.IsQuickSlotSkillItem
	 bool                      IsQuickSlotItem ( struct FBtrDouble UniqueID );   		//  Engine.wMyPlayerStatus.IsQuickSlotItem
	 int                       FindSkillItemIndexByUniqueID ( int UniqueID );    		//  Engine.wMyPlayerStatus.FindSkillItemIndexByUniqueID
	 int                       FindItemIndexByUniqueID ( struct FBtrDouble UniqueID );		//  Engine.wMyPlayerStatus.FindItemIndexByUniqueID
	 int                       FindItemIDBySlotPos ( int SlotPos );              		//  Engine.wMyPlayerStatus.FindItemIDBySlotPos

	// Public Imports
	UwMyPlayerStatus(class UwMyPlayerStatus const &);
	class UwMyPlayerStatus &  operator=(class UwMyPlayerStatus const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0278

// Class Engine.wBtrIni
class DLL_IMPORT UwBtrIni : public UObject
{
public:
	struct FString                                     m_IniSection;                                     		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      eventRegistMap (  );                              		// [ FUNC_Event ] Engine.wBtrIni.RegistMap
	 bool                      AddBoolToMap ( struct FString key, bool Value );  		// [ FUNC_Native ] Engine.wBtrIni.AddBoolToMap
	 bool                      AddFloatToMap ( struct FString key, float Value );		// [ FUNC_Native ] Engine.wBtrIni.AddFloatToMap
	 bool                      AddIntToMap ( struct FString key, int Value );    		// [ FUNC_Native ] Engine.wBtrIni.AddIntToMap
	 bool                      AddStringToMap ( struct FString key, struct FString Value );		// [ FUNC_Native ] Engine.wBtrIni.AddStringToMap

	// Public Imports
	UwBtrIni(class UwBtrIni const &);
	class UwBtrIni &  operator=(class UwBtrIni const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.StreamBase
class DLL_IMPORT UStreamBase : public UObject
{
public:

	// UScript Functions
	 bool                      HandleDebugExec ( struct FString Command, struct FString Param );		//  Engine.StreamBase.HandleDebugExec
	 bool                      CompareNames ( struct FString NameA, struct FString NameB );		//  Engine.StreamBase.CompareNames
	 unsigned char             eventConvertToFileType ( struct FString Extension );		// [ FUNC_Final | FUNC_Event ] Engine.StreamBase.ConvertToFileType
	 struct FString            eventConvertToFileExtension ( unsigned char Type );		// [ FUNC_Final | FUNC_Event ] Engine.StreamBase.ConvertToFileExtension
	 struct FString            FormatTimeDisplay ( float Seconds );              		// [ FUNC_Final ] Engine.StreamBase.FormatTimeDisplay
	 int                       RevInStr ( struct FString Src, struct FString Match );		// [ FUNC_Final ] Engine.StreamBase.RevInStr
	 class TArray< struct FString > eventParseDirectories ( struct FString* InPath ); 		// [ FUNC_Final | FUNC_Event ] Engine.StreamBase.ParseDirectories
	 struct FString            eventParseExtension ( struct FString* FileNameWithExtension );		// [ FUNC_Final | FUNC_Event ] Engine.StreamBase.ParseExtension
	 bool                      eventParsePath ( struct FString InPath, struct FFilePath* ParsedPath );		// [ FUNC_Final | FUNC_Event ] Engine.StreamBase.ParsePath
	 bool                      eventHasExtension ( struct FString Test );        		// [ FUNC_Final | FUNC_Event ] Engine.StreamBase.HasExtension
	 struct FString            eventGetPathRoot ( struct FString* InPath );      		// [ FUNC_Final | FUNC_Event ] Engine.StreamBase.GetPathRoot
	 bool                      IsCaseSensitive (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.StreamBase.IsCaseSensitive
	 struct FString            GetPathSeparator (  );                            		// [ FUNC_Final | FUNC_Native ] Engine.StreamBase.GetPathSeparator
	 struct FString            MultiplyEqual_StrStr ( struct FString B, struct FString* A );		// [ FUNC_Final | FUNC_Native ] Engine.StreamBase.MultiplyEqual_StrStr
	 struct FString            Multiply_StrStr ( struct FString A, struct FString B );		// [ FUNC_Final | FUNC_Native ] Engine.StreamBase.Multiply_StrStr

	// Public Imports
	UStreamBase(class UStreamBase const &);
	class UStreamBase &  operator=(class UStreamBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.StreamTag
class DLL_IMPORT UStreamTag : public UStreamBase
{
public:
	struct FID3Field                                   TagID;                                            		// 0x002C ( 0x0024 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	struct FID3Field                                   TrackNumber;                                      		// 0x0050 ( 0x0024 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	struct FID3Field                                   Title;                                            		// 0x0074 ( 0x0024 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	struct FID3Field                                   Artist;                                           		// 0x0098 ( 0x0024 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	struct FID3Field                                   Album;                                            		// 0x00BC ( 0x0024 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	struct FID3Field                                   Year;                                             		// 0x00E0 ( 0x0024 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	struct FID3Field                                   Genre;                                            		// 0x0104 ( 0x0024 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	struct FID3Field                                   Duration;                                         		// 0x0128 ( 0x0024 ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	class TArray< struct FID3Field >                   Fields;                                           		// 0x014C ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink ]
	void*                                              NativeID3Tag[ 0x02 ];                             		// 0x0158 ( 0x0008 ) [ CPF_Transient ]
	struct FScriptDelegate                             __OnRefresh__Delegate;                            		// 0x0160 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DumpTag (  );                                     		// [ FUNC_Final | FUNC_Native ] Engine.StreamTag.DumpTag
	 void                      DumpScriptTag (  );                               		//  Engine.StreamTag.DumpScriptTag
	 void                      OnRefresh (  );                                   		//  Engine.StreamTag.OnRefresh

	// Public Imports
	UStreamTag(class UStreamTag const &);
	UStreamTag(void);
	class UStreamTag &  operator=(class UStreamTag const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnRefresh(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x013C

// Class Engine.Stream
class DLL_IMPORT UStream : public UStreamBase
{
public:
	int                                                Handle;                                           		// 0x002C ( 0x0004 ) [ CPF_Edit | CPF_EditConst ]
	struct FString                                     DefaultExtension;                                 		// 0x0030 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink ]
	class UStreamTag*                                  IDTag;                                            		// 0x003C ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_EditInline ]
	struct FFilePath                                   PathName;                                         		// 0x0040 ( 0x003C ) [ CPF_Edit | CPF_Const | CPF_EditConst | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned char                                      Type;                                             		// 0x007C ( 0x0001 ) [ CPF_Edit | CPF_Const | CPF_EditConst ]
	unsigned long                                      bReadOnly:1;                                      		// 0x0080 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Const | CPF_EditConst ]

	// UScript Functions
	 void                      DumpTags (  );                                    		//  Engine.Stream.DumpTags
	 void                      DumpScriptTag (  );                               		//  Engine.Stream.DumpScriptTag
	 bool                      eventSetHandle ( int NewHandle );                 		// [ FUNC_Event ] Engine.Stream.SetHandle
	 struct FString            GetSongTitle (  );                                		//  Engine.Stream.GetSongTitle
	 struct FString            GetFullName (  );                                 		//  Engine.Stream.GetFullName
	 struct FString            GetPath (  );                                     		//  Engine.Stream.GetPath
	 struct FString            GetExtension (  );                                		//  Engine.Stream.GetExtension
	 struct FString            GetFileName (  );                                 		//  Engine.Stream.GetFileName
	 struct FString            GetDirectory (  );                                		//  Engine.Stream.GetDirectory
	 unsigned char             GetType (  );                                     		//  Engine.Stream.GetType
	 class UStreamTag*         GetTag (  );                                      		//  Engine.Stream.GetTag
	 int                       GetHandle (  );                                   		//  Engine.Stream.GetHandle
	 bool                      IsReadOnly (  );                                  		//  Engine.Stream.IsReadOnly
//	 bool                      LoadID3Tag (  );                                  		// [ FUNC_Final | FUNC_Native ] Engine.Stream.LoadID3Tag
//	 bool                      SaveID3Tag (  );                                  		// [ FUNC_Final | FUNC_Native ] Engine.Stream.SaveID3Tag

	// Public Imports
	UStream(class UStream const &);
	UStream(void);
	class UStream &  operator=(class UStream const &);
	static void  InternalConstructor(void *);
	int  LoadID3Tag(void);
	int  SaveID3Tag(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0058

// Class Engine.StreamInterface
class DLL_IMPORT UStreamInterface : public UStreamBase
{
public:
	struct FString                                     CurrentDirectory;                                 		// 0x002C ( 0x000C ) [ CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      HandleDebugExec ( struct FString Command, struct FString Param );		//  Engine.StreamInterface.HandleDebugExec
	 void                      ChangeDirectory ( struct FString DirectoryName ); 		//  Engine.StreamInterface.ChangeDirectory
	 struct FString            GetCurrentDirectory (  );                         		//  Engine.StreamInterface.GetCurrentDirectory
	 bool                      LoadPlaylist ( struct FString fileName, bool bStrict, class TArray< struct FString >* Lines );		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.LoadPlaylist
	 bool                      ValidFile ( struct FString fileName );            		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.ValidFile
	 class UStream*            CreateStream ( struct FString fileName, bool bStrict );		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.CreateStream
	 bool                      ValidDirectory ( struct FString DirectoryPath );  		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.ValidDirectory
	 bool                      RemoveDirectory ( struct FString DirectoryName ); 		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.RemoveDirectory
	 struct FString            CreateDirectory ( struct FString DirectoryName ); 		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.CreateDirectory
	 bool                      GetDirectoryContents ( struct FString DirectoryName, unsigned char FileType, class TArray< struct FString >* contents );		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.GetDirectoryContents
	 bool                      GetDriveLetters ( class TArray< struct FString >* Letters );		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.GetDriveLetters
	 struct FString            GetBaseDirectory (  );                            		// [ FUNC_Final | FUNC_Native ] Engine.StreamInterface.GetBaseDirectory

	// Public Imports
	UStreamInterface(class UStreamInterface const &);
	UStreamInterface(void);
	class UStreamInterface &  operator=(class UStreamInterface const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	class UStream *  CreateStream(class FString &,int);
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.Interactions
class DLL_IMPORT UInteractions : public UObject
{
public:

	// UScript Functions
	 bool                      IsMouseKey ( unsigned char key );                 		//  Engine.Interactions.IsMouseKey
	 bool                      IsKeyboardKey ( unsigned char key );              		//  Engine.Interactions.IsKeyboardKey
	 struct FString            GetFriendlyName ( unsigned char iKey );           		//  Engine.Interactions.GetFriendlyName

	// Public Imports
	UInteractions(class UInteractions const &);
	class UInteractions &  operator=(class UInteractions const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.Interaction
class DLL_IMPORT UInteraction : public UInteractions
{
public:
	unsigned long                                      bActive:1;                                        		// 0x002C ( 0x0004 )  [0x00000001]
	unsigned long                                      bVisible:1;                                       		// 0x002C ( 0x0004 )  [0x00000002]
	unsigned long                                      bRequiresTick:1;                                  		// 0x002C ( 0x0004 )  [0x00000004]
	unsigned long                                      bNativeEvents:1;                                  		// 0x002C ( 0x0004 )  [0x00000008]
	unsigned long                                      bDisabledInteraction:1;                           		// 0x002C ( 0x0004 )  [0x00000010]
	unsigned long                                      bOldActive:1;                                     		// 0x002C ( 0x0004 )  [0x00000020]
	unsigned long                                      bOldVisible:1;                                    		// 0x002C ( 0x0004 )  [0x00000040]
	unsigned long                                      bOldRequiresTick:1;                               		// 0x002C ( 0x0004 )  [0x00000080]
	unsigned long                                      bOldNativeEvents:1;                               		// 0x002C ( 0x0004 )  [0x00000100]
	class UPlayer*                                     ViewportOwner;                                    		// 0x0030 ( 0x0004 ) 
	class UInteractionMaster*                          Master;                                           		// 0x0034 ( 0x0004 ) 

	// UScript Functions
	 bool                      eventOnIME_Notify ( int Type, int LangID, struct FString strText, int StartPos, int Size );		// [ FUNC_Event ] Engine.Interaction.OnIME_Notify
	 void                      eventEnableInteraction (  );                      		// [ FUNC_Event ] Engine.Interaction.EnableInteraction
	 void                      eventDisableInteraction (  );                     		// [ FUNC_Event ] Engine.Interaction.DisableInteraction
	 void                      eventNotifyMusicChange (  );                      		// [ FUNC_Event ] Engine.Interaction.NotifyMusicChange
	 void                      StreamFinished ( int Handle, unsigned char Reason );		//  Engine.Interaction.StreamFinished
	 void                      Tick ( float DeltaTime );                         		//  Engine.Interaction.Tick
	 void                      SetFocus (  );                                    		//  Engine.Interaction.SetFocus
	 void                      PostRender ( class UCanvas* Canvas );             		//  Engine.Interaction.PostRender
	 void                      PreRender ( class UCanvas* Canvas );              		//  Engine.Interaction.PreRender
	 bool                      KeyEvent ( float Delta, unsigned char* key, unsigned char* Action );		//  Engine.Interaction.KeyEvent
	 bool                      KeyType ( struct FString Unicode, unsigned char* key );		//  Engine.Interaction.KeyType
	 void                      Message ( struct FString Msg, float MsgLife );    		//  Engine.Interaction.Message
	 void                      eventNotifyLevelChange (  );                      		// [ FUNC_Event ] Engine.Interaction.NotifyLevelChange
	 void                      eventInitialized (  );                            		// [ FUNC_Event ] Engine.Interaction.Initialized
	 struct FVector            ScreenToWorld ( struct FVector Location, struct FVector CameraLocation, struct FRotator CameraRotation );		// [ FUNC_Native ] Engine.Interaction.ScreenToWorld
	 struct FVector            WorldToScreen ( struct FVector Location, struct FVector CameraLocation, struct FRotator CameraRotation );		// [ FUNC_Native ] Engine.Interaction.WorldToScreen
	 bool                      ConsoleCommand ( struct FString S );              		// [ FUNC_Native ] Engine.Interaction.ConsoleCommand
	 void                      Initialize (  );                                  		// [ FUNC_Native ] Engine.Interaction.Initialize

	// Public Imports
	UInteraction(class UInteraction const &);
	UInteraction(void);
	class UInteraction &  operator=(class UInteraction const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.StreamInteraction
class DLL_IMPORT UStreamInteraction : public UInteraction
{
public:
	float                                              FadeInSeconds;                                    		// 0x0038 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	float                                              FadeOutSeconds;                                   		// 0x003C ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	struct FString                                     PlaylistManagerType;                              		// 0x0040 ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	class UStreamPlaylistManager*                      PlaylistManager;                                  		// 0x004C ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport | CPF_EditInline ]
	class UStreamInterface*                            FileManager;                                      		// 0x0050 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport | CPF_EditInline ]
	int                                                CurrentSongHandle;                                		// 0x0054 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	float                                              CurrentSongPosition;                              		// 0x0058 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	float                                              LastPlayTime;                                     		// 0x005C ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	float                                              CurrentSongDuration;                              		// 0x0060 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	struct FString                                     CurrentSong;                                      		// 0x0064 ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport ]
	class UStream*                                     CurrentStreamAttachment;                          		// 0x0070 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport ]
	unsigned long                                      bAutoStart:1;                                     		// 0x0074 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Config ]
	unsigned long                                      bDisplayTrackChanges:1;                           		// 0x0074 ( 0x0004 )  [0x00000002][ CPF_Edit | CPF_Config ]
	unsigned long                                      bRestartTrack:1;                                  		// 0x0074 ( 0x0004 )  [0x00000004][ CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NoExport ]
	unsigned long                                      bTrackWaiting:1;                                  		// 0x0074 ( 0x0004 )  [0x00000008][ CPF_Edit | CPF_Transient | CPF_EditConst | CPF_NoExport ]
	struct FScriptDelegate                             __OnStreamChanged__Delegate;                      		// 0x0078 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnStreamingStopped__Delegate;                   		// 0x0080 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnAdjustVolume__Delegate;                       		// 0x0088 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      execstreamdebug ( struct FString Command, struct FString Param );		// [ FUNC_Exec ] Engine.StreamInteraction.streamdebug
	 class APlayerController*  PC (  );                                          		//  Engine.StreamInteraction.PC
	 void                      KillMusic (  );                                   		//  Engine.StreamInteraction.KillMusic
	 void                      ClearSongInfo (  );                               		//  Engine.StreamInteraction.ClearSongInfo
	 bool                      HasPlayer (  );                                   		//  Engine.StreamInteraction.HasPlayer
	 bool                      IsPlaying (  );                                   		//  Engine.StreamInteraction.IsPlaying
	 float                     GetStreamDuration (  );                           		//  Engine.StreamInteraction.GetStreamDuration
	 float                     GetStreamVolume (  );                             		//  Engine.StreamInteraction.GetStreamVolume
	 float                     GetStreamPosition (  );                           		//  Engine.StreamInteraction.GetStreamPosition
	 void                      PlayStream ( struct FString fileName, int SeekSeconds );		//  Engine.StreamInteraction.PlayStream
	 bool                      Seek ( float SeekSeconds );                       		//  Engine.StreamInteraction.Seek
	 void                      execSeekStream ( float Seconds );                 		// [ FUNC_Exec ] Engine.StreamInteraction.SeekStream
	 void                      execSetMusicVolume ( float NewVolume );           		// [ FUNC_Exec ] Engine.StreamInteraction.SetMusicVolume
	 void                      execStopSong (  );                                		// [ FUNC_Exec ] Engine.StreamInteraction.StopSong
	 void                      execPlaySong ( struct FString SongName, float InitialTime );		// [ FUNC_Exec ] Engine.StreamInteraction.PlaySong
	 void                      execPauseSong (  );                               		// [ FUNC_Exec ] Engine.StreamInteraction.PauseSong
	 void                      execPrevSong ( bool bForce );                     		// [ FUNC_Exec ] Engine.StreamInteraction.PrevSong
	 void                      execNextSong ( bool bForce );                     		// [ FUNC_Exec ] Engine.StreamInteraction.NextSong
	 int                       CurrentHandle (  );                               		//  Engine.StreamInteraction.CurrentHandle
	 struct FString            execGetCurrentStream (  );                        		// [ FUNC_Exec ] Engine.StreamInteraction.GetCurrentStream
	 void                      eventNotifyLevelChange (  );                      		// [ FUNC_Event ] Engine.StreamInteraction.NotifyLevelChange
	 void                      StreamFinished ( int Handle, unsigned char Reason );		//  Engine.StreamInteraction.StreamFinished
	 void                      SetStreamAttachment ( class UStream* StreamObj ); 		//  Engine.StreamInteraction.SetStreamAttachment
	 bool                      IsPaused ( int SongHandle );                      		// [ FUNC_Final | FUNC_Native ] Engine.StreamInteraction.IsPaused
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Event ] Engine.StreamInteraction.Tick
	 void                      QueueNextSong (  );                               		//  Engine.StreamInteraction.QueueNextSong
	 class UStreamPlaylistManager* CreatePlaylistManager (  );                       		//  Engine.StreamInteraction.CreatePlaylistManager
	 class UStreamInterface*   CreateFileManager (  );                           		//  Engine.StreamInteraction.CreateFileManager
	 void                      eventInitialized (  );                            		// [ FUNC_Event ] Engine.StreamInteraction.Initialized
	 void                      OnAdjustVolume ( float NewVolume );               		//  Engine.StreamInteraction.OnAdjustVolume
	 void                      OnStreamingStopped (  );                          		//  Engine.StreamInteraction.OnStreamingStopped
	 void                      OnStreamChanged ( struct FString NewStreamFileName );		//  Engine.StreamInteraction.OnStreamChanged

	// Public Imports
	UStreamInteraction(class UStreamInteraction const &);
	UStreamInteraction(void);
	class UStreamInteraction &  operator=(class UStreamInteraction const &);
	static struct FrameTypeList *  GetFrameTypes(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnAdjustVolume(float);
	void  delegateOnStreamChanged(class FString const &);
	void  delegateOnStreamingStopped(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0058

// Class Engine.Spline
class DLL_IMPORT USpline : public UObject
{
public:
	struct FVector                                     SplineA;                                          		// 0x002C ( 0x000C ) 
	struct FVector                                     SplineB;                                          		// 0x0038 ( 0x000C ) 
	struct FVector                                     SplineC;                                          		// 0x0044 ( 0x000C ) 
	struct FVector                                     SplineD;                                          		// 0x0050 ( 0x000C ) 
	struct FRotator                                    SplineE;                                          		// 0x005C ( 0x000C ) 
	struct FRotator                                    SplineF;                                          		// 0x0068 ( 0x000C ) 
	struct FRotator                                    SplineG;                                          		// 0x0074 ( 0x000C ) 
	struct FRotator                                    SplineH;                                          		// 0x0080 ( 0x000C ) 
	float                                              mStartT;                                          		// 0x008C ( 0x0004 ) 
	float                                              mEndT;                                            		// 0x0090 ( 0x0004 ) 
	unsigned long                                      mbInit:1;                                         		// 0x0094 ( 0x0004 )  [0x00000001]
	float                                              mTime;                                            		// 0x0098 ( 0x0004 ) 
	float                                              maDeltaTimes[ 0x05 ];                             		// 0x009C ( 0x0014 ) 
	int                                                mIndex;                                           		// 0x00B0 ( 0x0004 ) 
	float                                              mTotalTime;                                       		// 0x00B4 ( 0x0004 ) 
	unsigned long                                      mbRotatorSpline:1;                                		// 0x00B8 ( 0x0004 )  [0x00000001]
	int                                                mCnt;                                             		// 0x00BC ( 0x0004 ) 

	// UScript Functions
	 bool                      NextSplineRot ( float dt, bool bSmoothDt, bool bAccumDeltas, struct FRotator* D, struct FRotator* V, struct FRotator* A, float* outdt );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Spline.NextSplineRot
	 bool                      NextSplinePos ( float dt, bool bSmoothDt, bool bAccumDeltas, struct FVector* D, struct FVector* V, struct FVector* A, float* outdt );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Spline.NextSplinePos
	 bool                      InitSplineRot ( float t0, struct FRotator d0, struct FRotator v0, float t1, struct FRotator d1, struct FRotator v1 );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Spline.InitSplineRot
	 bool                      InitSplinePath ( float t0, struct FVector d0, struct FVector v0, float t1, struct FVector d1, struct FVector v1 );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.Spline.InitSplinePath

	// Public Imports
	USpline(class USpline const &);
	USpline(void);
	class USpline &  operator=(class USpline const &);
	int  CalcSplinePos(float,class FVector &,class FVector &,class FVector &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	float  smoothDeltaTime(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0094

// Class Engine.WebLog
class DLL_IMPORT UWebLog : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x10 ];                                  		// 0x002C ( 0x0010 )

	// Public Imports
	UWebLog(class UWebLog const &);
	UWebLog(void);
	class UWebLog &  operator=(class UWebLog const &);
	void  SetVar(class FString,unsigned char);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.wBTLoadingScreenDrawer
class DLL_IMPORT UwBTLoadingScreenDrawer : public UObject
{
public:
	class UMaterial*                                   Mat_img_point_help;                               		// 0x002C ( 0x0004 ) 
	class UMaterial*                                   Mat_gauge_loading;                                		// 0x0030 ( 0x0004 ) 
	class UMaterial*                                   Mat_gauge_loading_back;                           		// 0x0034 ( 0x0004 ) 
	class UMaterial*                                   Mat_img_load_pllist;                              		// 0x0038 ( 0x0004 ) 
	class UMaterial*                                   Mat_img_hud_text;                                 		// 0x003C ( 0x0004 ) 
	class UMaterial*                                   Mat_img_hud_text2;                                		// 0x0040 ( 0x0004 ) 
	class UMaterial*                                   Mat_img_help_all;                                 		// 0x0044 ( 0x0004 ) 
	class UMaterial*                                   Mat_img_help_line;                                		// 0x0048 ( 0x0004 ) 
	class UMaterial*                                   Mat_img_RespawnLevelStar[ 0x05 ];                 		// 0x004C ( 0x0014 ) 
	class UMaterial*                                   LoadingBackGroundImage;                           		// 0x0060 ( 0x0004 ) 
	class UMaterial*                                   MiniMapInfoImage;                                 		// 0x0064 ( 0x0004 ) 
	class UMaterial*                                   Mat_img_SupplyIcon[ 0x03 ];                       		// 0x0068 ( 0x000C ) 
	int                                                TeamCountAF;                                      		// 0x0074 ( 0x0004 ) 
	int                                                TeamCountRSA;                                     		// 0x0078 ( 0x0004 ) 
	struct FString                                     strSupplyIcon[ 0x03 ];                            		// 0x007C ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                SupplyImgNum[ 0x03 ];                             		// 0x00A0 ( 0x000C ) 
	struct FFloatBox                                   ModeHelp[ 0x0B ];                                 		// 0x00AC ( 0x00B0 ) 
	struct FString                                     strModeHelp1[ 0x0B ];                             		// 0x015C ( 0x0084 ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                SelectHelp;                                       		// 0x01E0 ( 0x0004 ) 
	class TArray< struct FFloatBox >                   ModeFB;                                           		// 0x01E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FFloatBox >                   ModeFB2;                                          		// 0x01F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     ModeNames;                                        		// 0x01FC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     ModeDescriptions;                                 		// 0x0208 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameSubMode;                                      		// 0x0214 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameDifficulty;                                   		// 0x0220 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameRespawnType;                                  		// 0x022C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                MapDifficulty;                                    		// 0x0238 ( 0x0004 ) 
	int                                                MapID;                                            		// 0x023C ( 0x0004 ) 
	class UwMatchMaker*                                MM;                                               		// 0x0240 ( 0x0004 ) 
	class TArray< struct FOtherLoadingStateItem >      OtherLoadingState;                                		// 0x0244 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MyLoadingState;                                   		// 0x0250 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              iProgress;                                        		// 0x025C ( 0x0004 ) 
	float                                              iPrevProgress;                                    		// 0x0260 ( 0x0004 ) 
	float                                              Alpha;                                            		// 0x0264 ( 0x0004 ) 
	unsigned long                                      bRefreshRender:1;                                 		// 0x0268 ( 0x0004 )  [0x00000001]
	unsigned long                                      bFirstRender:1;                                   		// 0x0268 ( 0x0004 )  [0x00000002]
	struct FString                                     szTipText[ 0x05 ];                                		// 0x026C ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     szMapInfo[ 0x05 ];                                		// 0x02A8 ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                iTipIndex;                                        		// 0x02E4 ( 0x0004 ) 
	int                                                iRespawnIndex;                                    		// 0x02E8 ( 0x0004 ) 
	struct FString                                     CantUseSupplyLineText1;                           		// 0x02EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CantUseSupplyLineText2;                           		// 0x02F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FFloatBox                                   fbSupplyIcon[ 0x03 ];                             		// 0x0304 ( 0x0030 ) 
	struct FFloatBox                                   fbSupplyStr[ 0x03 ];                              		// 0x0334 ( 0x0030 ) 

	// UScript Functions
	 void                      eventDrawLoadingScreen ( class UCanvas* C );      		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.DrawLoadingScreen
	 void                      eventClearOtherLoadingState (  );                 		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.ClearOtherLoadingState
	 void                      eventUpdateOtherLoadingState ( struct FLoadingMessageItem Item, struct FString strMsg );		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.UpdateOtherLoadingState
	 void                      eventUpdateMyLoadingState ( struct FString LoadingState );		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.UpdateMyLoadingState
	 bool                      eventUpdateProgress ( int CurrenetProgress );     		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.UpdateProgress
	 bool                      eventDestroyBackGroundImage (  );                 		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.DestroyBackGroundImage
	 bool                      eventCreateBackGroundImage ( class UwMatchMaker* MatchMaker );		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.CreateBackGroundImage
	 void                      eventInitialize (  );                             		// [ FUNC_Event ] Engine.wBTLoadingScreenDrawer.Initialize
	 void                      RemoveFromRoot ( class UMaterial* Image );        		// [ FUNC_Native ] Engine.wBTLoadingScreenDrawer.RemoveFromRoot
	 void                      AddToRoot ( class UMaterial* Image );             		// [ FUNC_Native ] Engine.wBTLoadingScreenDrawer.AddToRoot

	// Public Imports
	UwBTLoadingScreenDrawer(class UwBTLoadingScreenDrawer const &);
	class UwBTLoadingScreenDrawer &  operator=(class UwBTLoadingScreenDrawer const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0338

// Class Engine.DecoVolumeObject
class DLL_IMPORT ADecoVolumeObject : public AActor
{
public:

	// Public Imports
	ADecoVolumeObject(class ADecoVolumeObject const &);
	class ADecoVolumeObject &  operator=(class ADecoVolumeObject const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.Keypoint
class DLL_IMPORT AKeypoint : public AActor
{
public:

	// Public Imports
	AKeypoint(class AKeypoint const &);
	class AKeypoint &  operator=(class AKeypoint const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.DecorationList
class DLL_IMPORT ADecorationList : public AKeypoint
{
public:
	class TArray< struct FDecorationType >             Decorations;                                      		// 0x03C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	ADecorationList(class ADecorationList const &);
	class ADecorationList &  operator=(class ADecorationList const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.Info
class DLL_IMPORT AInfo : public AActor
{
public:
	struct FString                                     RulesGroup;                                       		// 0x03C8 ( 0x000C ) [ CPF_Const | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     GameGroup;                                        		// 0x03D4 ( 0x000C ) [ CPF_Const | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ServerGroup;                                      		// 0x03E0 ( 0x000C ) [ CPF_Const | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ChatGroup;                                        		// 0x03EC ( 0x000C ) [ CPF_Const | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BotsGroup;                                        		// 0x03F8 ( 0x000C ) [ CPF_Const | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MapVoteGroup;                                     		// 0x0404 ( 0x000C ) [ CPF_Const | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     KickVoteGroup;                                    		// 0x0410 ( 0x000C ) [ CPF_Const | CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] Engine.Info.GetDescriptionText
	 unsigned char             eventGetSecurityLevel ( struct FString PropName );		// [ FUNC_Event ] Engine.Info.GetSecurityLevel
	 bool                      eventAllowClassRemoval (  );                      		// [ FUNC_Event ] Engine.Info.AllowClassRemoval
	 bool                      eventAcceptPlayInfoProperty ( struct FString PropertyName );		// [ FUNC_Event ] Engine.Info.AcceptPlayInfoProperty
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  Engine.Info.FillPlayInfo

	// Public Imports
	AInfo(class AInfo const &);
	class AInfo &  operator=(class AInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0054

// Class Engine.PlayerChatManager
class DLL_IMPORT APlayerChatManager : public AInfo
{
public:
	class APlayerController*                           PlayerOwner;                                      		// 0x041C ( 0x0004 ) 

	// UScript Functions
	 void                      ChatDebug (  );                                   		// [ FUNC_Simulated ] Engine.PlayerChatManager.ChatDebug
	 int                       Count (  );                                       		// [ FUNC_Simulated ] Engine.PlayerChatManager.Count
	 unsigned char             GetPlayerRestriction ( int PlayerID );            		// [ FUNC_Simulated ] Engine.PlayerChatManager.GetPlayerRestriction
	 bool                      ClientIsBanned ( struct FString PlayerHash );     		// [ FUNC_Simulated ] Engine.PlayerChatManager.ClientIsBanned
	 bool                      IsBanned ( class APlayerReplicationInfo* PRI );   		//  Engine.PlayerChatManager.IsBanned
	 bool                      ClearRestrictionID ( int PlayerID, unsigned char Type );		// [ FUNC_Simulated ] Engine.PlayerChatManager.ClearRestrictionID
	 bool                      ClearRestriction ( struct FString PlayerHash, unsigned char Type );		// [ FUNC_Simulated ] Engine.PlayerChatManager.ClearRestriction
	 bool                      AddRestrictionID ( int PlayerID, unsigned char Type );		// [ FUNC_Simulated ] Engine.PlayerChatManager.AddRestrictionID
	 bool                      AddRestriction ( struct FString PlayerHash, unsigned char Type );		// [ FUNC_Simulated ] Engine.PlayerChatManager.AddRestriction
	 bool                      SetRestrictionID ( int PlayerID, unsigned char Type );		// [ FUNC_Simulated ] Engine.PlayerChatManager.SetRestrictionID
	 bool                      SetRestriction ( struct FString PlayerHash, unsigned char Type );		// [ FUNC_Simulated ] Engine.PlayerChatManager.SetRestriction
	 bool                      eventAcceptVoice ( class APlayerReplicationInfo* Sender );		// [ FUNC_Event ] Engine.PlayerChatManager.AcceptVoice
	 bool                      AcceptSpeech ( class APlayerReplicationInfo* Sender );		//  Engine.PlayerChatManager.AcceptSpeech
	 bool                      AcceptLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj );		//  Engine.PlayerChatManager.AcceptLocalized
	 bool                      AcceptText ( class APlayerReplicationInfo* Sender, struct FName Type, struct FString* Msg );		//  Engine.PlayerChatManager.AcceptText
	 void                      UnTrackPlayer ( int PlayerID );                   		// [ FUNC_Simulated ] Engine.PlayerChatManager.UnTrackPlayer
	 void                      TrackNewPlayer ( int PlayerID, struct FString PlayerHash, struct FString PlayerAddress );		// [ FUNC_Simulated ] Engine.PlayerChatManager.TrackNewPlayer
	 void                      ReceiveBanInfo ( struct FString S );              		// [ FUNC_Simulated ] Engine.PlayerChatManager.ReceiveBanInfo
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.PlayerChatManager.PostBeginPlay

	// Public Imports
	APlayerChatManager(class APlayerChatManager const &);
	class APlayerChatManager &  operator=(class APlayerChatManager const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.VoiceChatRoom
class DLL_IMPORT AVoiceChatRoom : public AInfo
{
public:
	class AGameReplicationInfo*                        GRI;                                              		// 0x041C ( 0x0004 ) 
	class AVoiceChatReplicationInfo*                   VoiceChatManager;                                 		// 0x0420 ( 0x0004 ) 
	class AVoiceChatRoom*                              Parent;                                           		// 0x0424 ( 0x0004 ) 
	class TArray< class AVoiceChatRoom* >              Children;                                         		// 0x0428 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Password;                                         		// 0x0434 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ChannelIndex;                                     		// 0x0440 ( 0x0004 ) 
	unsigned long                                      bLocal:1;                                         		// 0x0444 ( 0x0004 )  [0x00000001]
	int                                                TeamIndex;                                        		// 0x0448 ( 0x0004 ) 

	// UScript Functions
	 bool                      NotifyTeamChange ( class APlayerReplicationInfo* PRI, int NewTeamIndex );		// [ FUNC_Simulated ] Engine.VoiceChatRoom.NotifyTeamChange
	 bool                      RemoveChild ( class AVoiceChatRoom* Child );      		// [ FUNC_Simulated ] Engine.VoiceChatRoom.RemoveChild
	 bool                      AddChild ( class AVoiceChatRoom* NewChild );      		// [ FUNC_Simulated ] Engine.VoiceChatRoom.AddChild
	 void                      SetChannelPassword ( struct FString InPassword ); 		// [ FUNC_Simulated ] Engine.VoiceChatRoom.SetChannelPassword
	 void                      SetMemberMask ( int NewMask );                    		// [ FUNC_Simulated ] Engine.VoiceChatRoom.SetMemberMask
	 void                      SetTeam ( int NewTeam );                          		// [ FUNC_Simulated ] Engine.VoiceChatRoom.SetTeam
	 void                      RemoveMember ( class APlayerReplicationInfo* PRI );		//  Engine.VoiceChatRoom.RemoveMember
	 void                      AddMember ( class APlayerReplicationInfo* PRI );  		//  Engine.VoiceChatRoom.AddMember
	 bool                      LeaveChannel ( class APlayerReplicationInfo* LeavingPRI );		//  Engine.VoiceChatRoom.LeaveChannel
	 unsigned char             JoinChannel ( class APlayerReplicationInfo* NewPRI, struct FString InPassword );		//  Engine.VoiceChatRoom.JoinChannel
	 bool                      eventIsMember ( class APlayerReplicationInfo* PRI, bool bNoCascade );		// [ FUNC_Simulated | FUNC_Event ] Engine.VoiceChatRoom.IsMember
	 bool                      IsFull (  );                                      		// [ FUNC_Simulated ] Engine.VoiceChatRoom.IsFull
	 bool                      CanJoinChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] Engine.VoiceChatRoom.CanJoinChannel
	 bool                      IsPrivateChannel (  );                            		// [ FUNC_Simulated ] Engine.VoiceChatRoom.IsPrivateChannel
	 bool                      IsTeamChannel (  );                               		// [ FUNC_Simulated ] Engine.VoiceChatRoom.IsTeamChannel
	 bool                      IsPublicChannel (  );                             		// [ FUNC_Simulated ] Engine.VoiceChatRoom.IsPublicChannel
	 int                       GetTeam (  );                                     		// [ FUNC_Simulated ] Engine.VoiceChatRoom.GetTeam
	 struct FString            GetTitle (  );                                    		// [ FUNC_Simulated ] Engine.VoiceChatRoom.GetTitle
	 bool                      ValidMask (  );                                   		// [ FUNC_Simulated ] Engine.VoiceChatRoom.ValidMask
	 struct FString            GetPassword (  );                                 		// [ FUNC_Simulated ] Engine.VoiceChatRoom.GetPassword
	 int                       GetMask (  );                                     		// [ FUNC_Simulated ] Engine.VoiceChatRoom.GetMask
	 int                       GetMaxChatters (  );                              		// [ FUNC_Simulated ] Engine.VoiceChatRoom.GetMaxChatters
	 class TArray< class APlayerReplicationInfo* > GetMembers (  );                                  		// [ FUNC_Simulated ] Engine.VoiceChatRoom.GetMembers

	// Public Imports
	AVoiceChatRoom(class AVoiceChatRoom const &);
	class AVoiceChatRoom &  operator=(class AVoiceChatRoom const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0030

// Class Engine.ReplicationInfo
class DLL_IMPORT AReplicationInfo : public AInfo
{
public:

	// Public Imports
	AReplicationInfo(class AReplicationInfo const &);
	AReplicationInfo(void);
	class AReplicationInfo &  operator=(class AReplicationInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.VoiceChatReplicationInfo
class DLL_IMPORT AVoiceChatReplicationInfo : public AReplicationInfo
{
public:
	int                                                PublicMask;                                       		// 0x041C ( 0x0004 ) [ CPF_Net ]
	int                                                LocalMask;                                        		// 0x0420 ( 0x0004 ) [ CPF_Net ]
	class TArray< class AVoiceChatRoom* >              Channels;                                         		// 0x0424 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     PublicChannelNames;                               		// 0x0430 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     VCDisplayText[ 0x06 ];                            		// 0x043C ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     VCDescText[ 0x06 ];                               		// 0x0484 ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class AGameReplicationInfo*                        GRI;                                              		// 0x04CC ( 0x0004 ) 
	class UClass*                                      ChatRoomClass;                                    		// 0x04D0 ( 0x0004 ) 
	class TArray< struct FVoiceChatCodec >             InstalledCodec;                                   		// 0x04D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     VoIPInternetCodecs;                               		// 0x04E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     VoIPLANCodecs;                                    		// 0x04EC ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bEnableVoiceChat:1;                               		// 0x04F8 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bAllowLocalBroadcast:1;                           		// 0x04F8 ( 0x0004 )  [0x00000002]
	int                                                MaxChatters;                                      		// 0x04FC ( 0x0004 ) 
	int                                                DefaultChannel;                                   		// 0x0500 ( 0x0004 ) [ CPF_Net ]
	float                                              LocalBroadcastRange;                              		// 0x0504 ( 0x0004 ) 
	float                                              DefaultBroadcastRadius;                           		// 0x0508 ( 0x0004 ) 
	float                                              BroadcastRadius;                                  		// 0x050C ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bPrivateChat:1;                                   		// 0x0510 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bRefresh:1;                                       		// 0x0510 ( 0x0004 )  [0x00000002]

	// UScript Functions
	 struct FString            GetTitle ( class AVoiceChatRoom* Room );          		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetTitle
	 int                       GetMask ( class AVoiceChatRoom* Room );           		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetMask
	 void                      SetMask ( class AVoiceChatRoom* Room, int NewMask );		//  Engine.VoiceChatReplicationInfo.SetMask
	 bool                      ValidRoom ( class AVoiceChatRoom* Room );         		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.ValidRoom
	 bool                      GetCodecInfo ( struct FString Codec, struct FString* CodecName, struct FString* CodecDescription );		//  Engine.VoiceChatReplicationInfo.GetCodecInfo
	 void                      GetInstalledCodecs ( class TArray< struct FString >* Codecs );		//  Engine.VoiceChatReplicationInfo.GetInstalledCodecs
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] Engine.VoiceChatReplicationInfo.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  Engine.VoiceChatReplicationInfo.FillPlayInfo
	 void                      CheckChannels (  );                               		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.CheckChannels
	 void                      DestroyVoiceChannel ( class AVoiceChatRoom* Channel );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.DestroyVoiceChannel
	 class AVoiceChatRoom*     CreateNewVoiceChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.CreateNewVoiceChannel
	 bool                      IsMember ( class APlayerReplicationInfo* TestPRI, int ChannelIndex, bool bNoCascade );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.IsMember
	 int                       GetPlayerChannelCount (  );                       		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetPlayerChannelCount
	 int                       GetPublicChannelCount ( bool bSingleTeam );       		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetPublicChannelCount
	 class TArray< class AVoiceChatRoom* > GetPlayerChannels (  );                           		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetPlayerChannels
	 class TArray< class AVoiceChatRoom* > GetPublicChannels (  );                           		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetPublicChannels
	 class TArray< class AVoiceChatRoom* > GetChannels (  );                                 		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetChannels
	 struct FString            GetDefaultChannel (  );                           		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetDefaultChannel
	 class TArray< int >       GetMemberChannels ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetMemberChannels
	 class TArray< int >       GetChannelMembersAt ( int Index );                		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetChannelMembersAt
	 class TArray< int >       GetChannelMembers ( struct FString ChatRoomName, int TeamIndex );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetChannelMembers
	 class AVoiceChatRoom*     GetChannelAt ( int Index );                       		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetChannelAt
	 class AVoiceChatRoom*     GetChannel ( struct FString ChatRoomName, int TeamIndex );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.GetChannel
	 int                       eventGetChannelIndex ( struct FString ChannelTitle, int TeamIndex );		// [ FUNC_Simulated | FUNC_Event ] Engine.VoiceChatReplicationInfo.GetChannelIndex
	 int                       eventGetChannelCount (  );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.VoiceChatReplicationInfo.GetChannelCount
	 void                      NotifyTeamChange ( class APlayerReplicationInfo* PRI, int TeamIndex );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.NotifyTeamChange
	 bool                      RemoveVoiceChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.RemoveVoiceChannel
	 class AVoiceChatRoom*     AddVoiceChannel ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.AddVoiceChannel
	 bool                      LeaveChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI );		//  Engine.VoiceChatReplicationInfo.LeaveChannel
	 unsigned char             JoinChannelAt ( int ChannelIndex, class APlayerReplicationInfo* PRI, struct FString Password );		//  Engine.VoiceChatReplicationInfo.JoinChannelAt
	 unsigned char             JoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI, struct FString Password );		//  Engine.VoiceChatReplicationInfo.JoinChannel
	 bool                      CanJoinChannel ( struct FString ChannelTitle, class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.CanJoinChannel
	 void                      RemoveVoiceChatter ( class APlayerReplicationInfo* PRI );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.RemoveVoiceChatter
	 void                      AddVoiceChatter ( class APlayerReplicationInfo* NewPRI );		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.AddVoiceChatter
	 void                      InitChannels (  );                                		// [ FUNC_Simulated ] Engine.VoiceChatReplicationInfo.InitChannels
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] Engine.VoiceChatReplicationInfo.PostNetBeginPlay
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.VoiceChatReplicationInfo.PostBeginPlay
	 void                      eventTimer (  );                                  		// [ FUNC_Event ] Engine.VoiceChatReplicationInfo.Timer

	// Public Imports
	AVoiceChatReplicationInfo(class AVoiceChatReplicationInfo const &);
	AVoiceChatReplicationInfo(void);
	class AVoiceChatReplicationInfo &  operator=(class AVoiceChatReplicationInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00F8

// Class Engine.Primitive
class DLL_IMPORT UPrimitive : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x2C ];                                  		// 0x002C ( 0x002C )

	// Public Imports
	UPrimitive(class UPrimitive const &);
	UPrimitive(void);
	class UPrimitive &  operator=(class UPrimitive const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class Engine.MeshInstance
class DLL_IMPORT UMeshInstance : public UPrimitive
{
public:

	// Public Imports
	UMeshInstance(class UMeshInstance const &);
	UMeshInstance(void);
	class UMeshInstance &  operator=(class UMeshInstance const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.LodMeshInstance
class DLL_IMPORT ULodMeshInstance : public UMeshInstance
{
public:
	unsigned char                                      _0x0058[ 0x28 ];                                  		// 0x0058 ( 0x0028 )

	// Public Imports
	ULodMeshInstance(class ULodMeshInstance const &);
	ULodMeshInstance(void);
	class ULodMeshInstance &  operator=(class ULodMeshInstance const &);
	struct FMeshAnimSeq *  GetAnimSeq(class FName);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class Engine.VertMeshInstance
class DLL_IMPORT UVertMeshInstance : public ULodMeshInstance
{
public:
	unsigned char                                      _0x0080[ 0xA4 ];                                  		// 0x0080 ( 0x00A4 )

	// Public Imports
	UVertMeshInstance(class UVertMeshInstance const &);
	UVertMeshInstance(void);
	class UVertMeshInstance &  operator=(class UVertMeshInstance const &);
	struct FMeshAnimSeq *  GetAnimSeq(class FName);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00A4

// Class Engine.VertMeshActor
class DLL_IMPORT AVertMeshActor : public AActor
{
public:

	// UScript Functions
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.VertMeshActor.PostBeginPlay

	// Public Imports
	AVertMeshActor(class AVertMeshActor const &);
	class AVertMeshActor &  operator=(class AVertMeshActor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.Mesh
class DLL_IMPORT UMesh : public UPrimitive
{
public:
	unsigned char                                      _0x0058[ 0x04 ];                                  		// 0x0058 ( 0x0004 )

	// Public Imports
	UMesh(class UMesh const &);
	UMesh(void);
	class UMesh &  operator=(class UMesh const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.LodMesh
class DLL_IMPORT ULodMesh : public UMesh
{
public:
	unsigned char                                      _0x005C[ 0xE8 ];                                  		// 0x005C ( 0x00E8 )

	// Public Imports
	ULodMesh(class ULodMesh const &);
	ULodMesh(void);
	class ULodMesh &  operator=(class ULodMesh const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00E8

// Class Engine.VertMesh
class DLL_IMPORT UVertMesh : public ULodMesh
{
public:
	unsigned char                                      _0x0144[ 0x12C ];                                 		// 0x0144 ( 0x012C )

	// Public Imports
	UVertMesh(class UVertMesh const &);
	UVertMesh(void);
	class UVertMesh &  operator=(class UVertMesh const &);
	static void  InternalConstructor(void *);
	int  RenderPreProcess(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x012C

// Class Engine.ParticleEmitter
class DLL_IMPORT UParticleEmitter : public UObject
{
public:
	unsigned long                                      UseCollision:1;                                   		// 0x002C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseCollisionPlanes:1;                             		// 0x002C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      UseMaxCollisions:1;                               		// 0x002C ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      UseSpawnedVelocityScale:1;                        		// 0x002C ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      UseColorScale:1;                                  		// 0x002C ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      FadeOut:1;                                        		// 0x002C ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      FadeIn:1;                                         		// 0x002C ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      UseActorForces:1;                                 		// 0x002C ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      ResetAfterChange:1;                               		// 0x002C ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      RespawnDeadParticles:1;                           		// 0x002C ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      AutoDestroy:1;                                    		// 0x002C ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      AutoReset:1;                                      		// 0x002C ( 0x0004 )  [0x00000800][ CPF_Edit ]
	unsigned long                                      Disabled:1;                                       		// 0x002C ( 0x0004 )  [0x00001000][ CPF_Edit ]
	unsigned long                                      Backup_Disabled:1;                                		// 0x002C ( 0x0004 )  [0x00002000]
	unsigned long                                      DisableFogging:1;                                 		// 0x002C ( 0x0004 )  [0x00004000][ CPF_Edit ]
	unsigned long                                      VelocityFromMesh:1;                               		// 0x002C ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      UniformMeshScale:1;                               		// 0x002C ( 0x0004 )  [0x00010000][ CPF_Edit ]
	unsigned long                                      UniformVelocityScale:1;                           		// 0x002C ( 0x0004 )  [0x00020000][ CPF_Edit ]
	unsigned long                                      UseColorFromMesh:1;                               		// 0x002C ( 0x0004 )  [0x00040000][ CPF_Edit ]
	unsigned long                                      SpawnOnlyInDirectionOfNormal:1;                   		// 0x002C ( 0x0004 )  [0x00080000][ CPF_Edit ]
	unsigned long                                      AlphaTest:1;                                      		// 0x002C ( 0x0004 )  [0x00100000][ CPF_Edit ]
	unsigned long                                      AcceptsProjectors:1;                              		// 0x002C ( 0x0004 )  [0x00200000][ CPF_Edit ]
	unsigned long                                      ZTest:1;                                          		// 0x002C ( 0x0004 )  [0x00400000][ CPF_Edit ]
	unsigned long                                      ZWrite:1;                                         		// 0x002C ( 0x0004 )  [0x00800000][ CPF_Edit ]
	unsigned long                                      UseRevolution:1;                                  		// 0x002C ( 0x0004 )  [0x01000000][ CPF_Edit ]
	unsigned long                                      UseRevolutionScale:1;                             		// 0x002C ( 0x0004 )  [0x02000000][ CPF_Edit ]
	unsigned long                                      SpinParticles:1;                                  		// 0x002C ( 0x0004 )  [0x04000000][ CPF_Edit ]
	unsigned long                                      DampRotation:1;                                   		// 0x002C ( 0x0004 )  [0x08000000][ CPF_Edit ]
	unsigned long                                      UseSizeScale:1;                                   		// 0x002C ( 0x0004 )  [0x10000000][ CPF_Edit ]
	unsigned long                                      UseAbsoluteTimeForSizeScale:1;                    		// 0x002C ( 0x0004 )  [0x20000000][ CPF_Edit ]
	unsigned long                                      UseRegularSizeScale:1;                            		// 0x002C ( 0x0004 )  [0x40000000][ CPF_Edit ]
	unsigned long                                      UniformSize:1;                                    		// 0x002C ( 0x0004 )  [0x80000000][ CPF_Edit ]
	unsigned long                                      DetermineVelocityByLocationDifference:1;          		// 0x0030 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      ScaleSizeXByVelocity:1;                           		// 0x0030 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      ScaleSizeYByVelocity:1;                           		// 0x0030 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      ScaleSizeZByVelocity:1;                           		// 0x0030 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      AutomaticInitialSpawning:1;                       		// 0x0030 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      BlendBetweenSubdivisions:1;                       		// 0x0030 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      UseSubdivisionScale:1;                            		// 0x0030 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      UseRandomSubdivision:1;                           		// 0x0030 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      TriggerDisabled:1;                                		// 0x0030 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      ResetOnTrigger:1;                                 		// 0x0030 ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      UseVelocityScale:1;                               		// 0x0030 ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      AddVelocityFromOwner:1;                           		// 0x0030 ( 0x0004 )  [0x00000800][ CPF_Edit ]
	float                                              LowDetailFactor;                                  		// 0x0034 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     Acceleration;                                     		// 0x0038 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     ExtentMultiplier;                                 		// 0x0044 ( 0x000C ) [ CPF_Edit ]
	struct FRangeVector                                DampingFactorRange;                               		// 0x0050 ( 0x0018 ) [ CPF_Edit ]
	class TArray< struct FPlane >                      CollisionPlanes;                                  		// 0x0068 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FRange                                      MaxCollisions;                                    		// 0x0074 ( 0x0008 ) [ CPF_Edit ]
	int                                                SpawnFromOtherEmitter;                            		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	int                                                SpawnAmount;                                      		// 0x0080 ( 0x0004 ) [ CPF_Edit ]
	struct FRangeVector                                SpawnedVelocityScaleRange;                        		// 0x0084 ( 0x0018 ) [ CPF_Edit ]
	class TArray< struct FParticleColorScale >         ColorScale;                                       		// 0x009C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              ColorScaleRepeats;                                		// 0x00A8 ( 0x0004 ) [ CPF_Edit ]
	struct FRangeVector                                ColorMultiplierRange;                             		// 0x00AC ( 0x0018 ) [ CPF_Edit ]
	float                                              Opacity;                                          		// 0x00C4 ( 0x0004 ) [ CPF_Edit ]
	struct FPlane                                      FadeOutFactor;                                    		// 0x00C8 ( 0x0010 ) [ CPF_Edit ]
	float                                              FadeOutStartTime;                                 		// 0x00D8 ( 0x0004 ) [ CPF_Edit ]
	struct FPlane                                      FadeInFactor;                                     		// 0x00DC ( 0x0010 ) [ CPF_Edit ]
	float                                              FadeInEndTime;                                    		// 0x00EC ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      CoordinateSystem;                                 		// 0x00F0 ( 0x0001 ) [ CPF_Edit ]
	int                                                MaxParticles;                                     		// 0x00F4 ( 0x0004 ) [ CPF_Edit | CPF_Const ]
	unsigned char                                      EffectAxis;                                       		// 0x00F8 ( 0x0001 ) [ CPF_Edit ]
	struct FRange                                      AutoResetTimeRange;                               		// 0x00FC ( 0x0008 ) [ CPF_Edit ]
	struct FString                                     Name;                                             		// 0x0104 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      DetailMode;                                       		// 0x0110 ( 0x0001 ) [ CPF_Edit ]
	struct FVector                                     StartLocationOffset;                              		// 0x0114 ( 0x000C ) [ CPF_Edit ]
	struct FRangeVector                                StartLocationRange;                               		// 0x0120 ( 0x0018 ) [ CPF_Edit ]
	int                                                AddLocationFromOtherEmitter;                      		// 0x0138 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      StartLocationShape;                               		// 0x013C ( 0x0001 ) [ CPF_Edit ]
	struct FRange                                      SphereRadiusRange;                                		// 0x0140 ( 0x0008 ) [ CPF_Edit ]
	struct FRangeVector                                StartLocationPolarRange;                          		// 0x0148 ( 0x0018 ) [ CPF_Edit ]
	struct FRange                                      StartMassRange;                                   		// 0x0160 ( 0x0008 ) [ CPF_Edit ]
	class UStaticMesh*                                 MeshSpawningStaticMesh;                           		// 0x0168 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      MeshSpawning;                                     		// 0x016C ( 0x0001 ) [ CPF_Edit ]
	struct FRangeVector                                VelocityScaleRange;                               		// 0x0170 ( 0x0018 ) [ CPF_Edit ]
	struct FRangeVector                                MeshScaleRange;                                   		// 0x0188 ( 0x0018 ) [ CPF_Edit ]
	struct FVector                                     MeshNormal;                                       		// 0x01A0 ( 0x000C ) [ CPF_Edit ]
	struct FRange                                      MeshNormalThresholdRange;                         		// 0x01AC ( 0x0008 ) [ CPF_Edit ]
	int                                                AlphaRef;                                         		// 0x01B4 ( 0x0004 ) [ CPF_Edit ]
	struct FRangeVector                                RevolutionCenterOffsetRange;                      		// 0x01B8 ( 0x0018 ) [ CPF_Edit ]
	struct FRangeVector                                RevolutionsPerSecondRange;                        		// 0x01D0 ( 0x0018 ) [ CPF_Edit ]
	class TArray< struct FParticleRevolutionScale >    RevolutionScale;                                  		// 0x01E8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              RevolutionScaleRepeats;                           		// 0x01F4 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      UseRotationFrom;                                  		// 0x01F8 ( 0x0001 ) [ CPF_Edit ]
	struct FRotator                                    RotationOffset;                                   		// 0x01FC ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     SpinCCWorCW;                                      		// 0x0208 ( 0x000C ) [ CPF_Edit ]
	struct FRangeVector                                SpinsPerSecondRange;                              		// 0x0214 ( 0x0018 ) [ CPF_Edit ]
	struct FRangeVector                                StartSpinRange;                                   		// 0x022C ( 0x0018 ) [ CPF_Edit ]
	struct FRangeVector                                RotationDampingFactorRange;                       		// 0x0244 ( 0x0018 ) [ CPF_Edit ]
	struct FVector                                     RotationNormal;                                   		// 0x025C ( 0x000C ) [ CPF_Edit ]
	class TArray< struct FParticleTimeScale >          SizeScale;                                        		// 0x0268 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              SizeScaleRepeats;                                 		// 0x0274 ( 0x0004 ) [ CPF_Edit ]
	struct FRangeVector                                StartSizeRange;                                   		// 0x0278 ( 0x0018 ) [ CPF_Edit ]
	struct FVector                                     ScaleSizeByVelocityMultiplier;                    		// 0x0290 ( 0x000C ) [ CPF_Edit ]
	float                                              ScaleSizeByVelocityMax;                           		// 0x029C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      UseSkeletalLocationAs;                            		// 0x02A0 ( 0x0001 ) [ CPF_Edit ]
	class AActor*                                      SkeletalMeshActor;                                		// 0x02A4 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     SkeletalScale;                                    		// 0x02A8 ( 0x000C ) [ CPF_Edit ]
	struct FRange                                      RelativeBoneIndexRange;                           		// 0x02B4 ( 0x0008 ) [ CPF_Edit ]
	class TArray< struct FParticleSound >              Sounds;                                           		// 0x02BC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      SpawningSound;                                    		// 0x02C8 ( 0x0001 ) [ CPF_Edit ]
	struct FRange                                      SpawningSoundIndex;                               		// 0x02CC ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      SpawningSoundProbability;                         		// 0x02D4 ( 0x0008 ) [ CPF_Edit ]
	unsigned char                                      CollisionSound;                                   		// 0x02DC ( 0x0001 ) [ CPF_Edit ]
	struct FRange                                      CollisionSoundIndex;                              		// 0x02E0 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      CollisionSoundProbability;                        		// 0x02E8 ( 0x0008 ) [ CPF_Edit ]
	float                                              ParticlesPerSecond;                               		// 0x02F0 ( 0x0004 ) [ CPF_Edit ]
	float                                              InitialParticlesPerSecond;                        		// 0x02F4 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      DrawStyle;                                        		// 0x02F8 ( 0x0001 ) [ CPF_Edit ]
	class UTexture*                                    Texture;                                          		// 0x02FC ( 0x0004 ) [ CPF_Edit ]
	int                                                TextureUSubdivisions;                             		// 0x0300 ( 0x0004 ) [ CPF_Edit ]
	int                                                TextureVSubdivisions;                             		// 0x0304 ( 0x0004 ) [ CPF_Edit ]
	class TArray< float >                              SubdivisionScale;                                 		// 0x0308 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                SubdivisionStart;                                 		// 0x0314 ( 0x0004 ) [ CPF_Edit ]
	int                                                SubdivisionEnd;                                   		// 0x0318 ( 0x0004 ) [ CPF_Edit ]
	float                                              SecondsBeforeInactive;                            		// 0x031C ( 0x0004 ) [ CPF_Edit ]
	float                                              MinSquaredVelocity;                               		// 0x0320 ( 0x0004 ) [ CPF_Edit ]
	struct FRange                                      InitialTimeRange;                                 		// 0x0324 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      LifetimeRange;                                    		// 0x032C ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      InitialDelayRange;                                		// 0x0334 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      SpawnOnTriggerRange;                              		// 0x033C ( 0x0008 ) [ CPF_Edit ]
	float                                              SpawnOnTriggerPPS;                                		// 0x0344 ( 0x0004 ) [ CPF_Edit ]
	struct FRangeVector                                StartVelocityRange;                               		// 0x0348 ( 0x0018 ) [ CPF_Edit ]
	struct FRange                                      StartVelocityRadialRange;                         		// 0x0360 ( 0x0008 ) [ CPF_Edit ]
	struct FVector                                     MaxAbsVelocity;                                   		// 0x0368 ( 0x000C ) [ CPF_Edit ]
	struct FRangeVector                                VelocityLossRange;                                		// 0x0374 ( 0x0018 ) [ CPF_Edit ]
	unsigned long                                      RotateVelocityLossRange:1;                        		// 0x038C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	int                                                AddVelocityFromOtherEmitter;                      		// 0x0390 ( 0x0004 ) [ CPF_Edit ]
	struct FRangeVector                                AddVelocityMultiplierRange;                       		// 0x0394 ( 0x0018 ) [ CPF_Edit ]
	unsigned char                                      GetVelocityDirectionFrom;                         		// 0x03AC ( 0x0001 ) [ CPF_Edit ]
	class TArray< struct FParticleVelocityScale >      VelocityScale;                                    		// 0x03B0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              VelocityScaleRepeats;                             		// 0x03BC ( 0x0004 ) [ CPF_Edit ]
	float                                              WarmupTicksPerSecond;                             		// 0x03C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              RelativeWarmupTime;                               		// 0x03C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              CullDistance;                                     		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      DisableIfCulled:1;                                		// 0x03CC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      ForceCullDistanceOnUseCollision:1;                		// 0x03CC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	class AEmitter*                                    Owner;                                            		// 0x03D0 ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      Initialized:1;                                    		// 0x03D4 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      Inactive:1;                                       		// 0x03D4 ( 0x0004 )  [0x00000002][ CPF_Transient ]
	unsigned long                                      RealDisableFogging:1;                             		// 0x03D4 ( 0x0004 )  [0x00000004][ CPF_Transient ]
	unsigned long                                      AllParticlesDead:1;                               		// 0x03D4 ( 0x0004 )  [0x00000008][ CPF_Transient ]
	unsigned long                                      WarmedUp:1;                                       		// 0x03D4 ( 0x0004 )  [0x00000010][ CPF_Transient ]
	float                                              InactiveTime;                                     		// 0x03D8 ( 0x0004 ) [ CPF_Transient ]
	class TArray< struct FParticle >                   Particles;                                        		// 0x03DC ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	int                                                ParticleIndex;                                    		// 0x03E8 ( 0x0004 ) [ CPF_Transient ]
	int                                                ActiveParticles;                                  		// 0x03EC ( 0x0004 ) [ CPF_Transient ]
	float                                              PPSFraction;                                      		// 0x03F0 ( 0x0004 ) [ CPF_Transient ]
	struct FBox                                        BoundingBox;                                      		// 0x03F4 ( 0x001C ) [ CPF_Transient ]
	struct FVector                                     RealExtentMultiplier;                             		// 0x0410 ( 0x000C ) [ CPF_Transient ]
	int                                                OtherIndex;                                       		// 0x041C ( 0x0004 ) [ CPF_Transient ]
	float                                              InitialDelay;                                     		// 0x0420 ( 0x0004 ) [ CPF_Transient ]
	struct FVector                                     GlobalOffset;                                     		// 0x0424 ( 0x000C ) [ CPF_Transient ]
	float                                              TimeTillReset;                                    		// 0x0430 ( 0x0004 ) [ CPF_Transient ]
	int                                                PS2Data;                                          		// 0x0434 ( 0x0004 ) [ CPF_Transient ]
	int                                                MaxActiveParticles;                               		// 0x0438 ( 0x0004 ) [ CPF_Transient ]
	int                                                CurrentCollisionSoundIndex;                       		// 0x043C ( 0x0004 ) [ CPF_Transient ]
	int                                                CurrentSpawningSoundIndex;                        		// 0x0440 ( 0x0004 ) [ CPF_Transient ]
	int                                                CurrentMeshSpawningIndex;                         		// 0x0444 ( 0x0004 ) [ CPF_Transient ]
	float                                              MaxSizeScale;                                     		// 0x0448 ( 0x0004 ) [ CPF_Transient ]
	int                                                KillPending;                                      		// 0x044C ( 0x0004 ) [ CPF_Transient ]
	int                                                DeferredParticles;                                		// 0x0450 ( 0x0004 ) [ CPF_Transient ]
	struct FVector                                     RealMeshNormal;                                   		// 0x0454 ( 0x000C ) [ CPF_Transient ]
	class TArray< struct FVector >                     MeshVertsAndNormals;                              		// 0x0460 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	int                                                CurrentSpawnOnTrigger;                            		// 0x046C ( 0x0004 ) [ CPF_Transient ]
	int                                                RenderableParticles;                              		// 0x0470 ( 0x0004 ) [ CPF_Transient ]
	struct FRangeVector                                RealVelocityLossRange;                            		// 0x0474 ( 0x0018 ) [ CPF_Transient ]

	// UScript Functions
	 void                      Reset (  );                                       		// [ FUNC_Native ] Engine.ParticleEmitter.Reset
	 void                      Trigger (  );                                     		// [ FUNC_Native ] Engine.ParticleEmitter.Trigger
	 void                      SpawnParticle ( int Amount );                     		// [ FUNC_Native ] Engine.ParticleEmitter.SpawnParticle

	// Public Imports
	UParticleEmitter(class UParticleEmitter const &);
	UParticleEmitter(void);
	class UParticleEmitter &  operator=(class UParticleEmitter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0460

// Class Engine.TrailEmitter
class DLL_IMPORT UTrailEmitter : public UParticleEmitter
{
public:
	unsigned char                                      TrailShadeType;                                   		// 0x048C ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      TrailLocation;                                    		// 0x048D ( 0x0001 ) [ CPF_Edit ]
	int                                                MaxPointsPerTrail;                                		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	float                                              DistanceThreshold;                                		// 0x0494 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      UseCrossedSheets:1;                               		// 0x0498 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	int                                                MaxTrailTwistAngle;                               		// 0x049C ( 0x0004 ) [ CPF_Edit ]
	float                                              PointLifeTime;                                    		// 0x04A0 ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FParticleTrailData >          TrailData;                                        		// 0x04A4 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< struct FParticleTrailInfo >          TrailInfo;                                        		// 0x04B0 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class UVertexBuffer*                               VertexBuffer;                                     		// 0x04BC ( 0x0004 ) [ CPF_Transient ]
	class UIndexBuffer*                                IndexBuffer;                                      		// 0x04C0 ( 0x0004 ) [ CPF_Transient ]
	int                                                VerticesPerParticle;                              		// 0x04C4 ( 0x0004 ) [ CPF_Transient ]
	int                                                IndicesPerParticle;                               		// 0x04C8 ( 0x0004 ) [ CPF_Transient ]
	int                                                PrimitivesPerParticle;                            		// 0x04CC ( 0x0004 ) [ CPF_Transient ]

	// UScript Functions
//	 void                      ResetTrail (  );                                  		// [ FUNC_Final | FUNC_Native ] Engine.TrailEmitter.ResetTrail

	// Public Imports
	UTrailEmitter(class UTrailEmitter const &);
	UTrailEmitter(void);
	class UTrailEmitter &  operator=(class UTrailEmitter const &);
	static void  InternalConstructor(void *);
	void  ResetTrail(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0044

// Class Engine.Material
class DLL_IMPORT UMaterial : public UObject
{
public:
	class UMaterial*                                   FallbackMaterial;                                 		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   DefaultMaterial;                                  		// 0x0030 ( 0x0004 ) 
	unsigned long                                      UseFallback:1;                                    		// 0x0034 ( 0x0004 )  [0x00000001][ CPF_Const | CPF_Transient ]
	unsigned long                                      Validated:1;                                      		// 0x0034 ( 0x0004 )  [0x00000002][ CPF_Const | CPF_Transient ]
	unsigned char                                      SurfaceType;                                      		// 0x0038 ( 0x0001 ) [ CPF_Edit ]
	int                                                MaterialType;                                     		// 0x003C ( 0x0004 ) 

	// UScript Functions
	 int                       MaterialVSize (  );                               		// [ FUNC_Native ] Engine.Material.MaterialVSize
	 int                       MaterialUSize (  );                               		// [ FUNC_Native ] Engine.Material.MaterialUSize
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.Material.Trigger
	 void                      Reset (  );                                       		//  Engine.Material.Reset

	// Public Imports
	UMaterial(class UMaterial const &);
	UMaterial(void);
	class UMaterial &  operator=(class UMaterial const &);
	static void  ClearFallbacks(void);
	class UMaterial *  ConvertPolyFlagsToMaterial(class UMaterial *,unsigned long);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.RenderedMaterial
class DLL_IMPORT URenderedMaterial : public UMaterial
{
public:
	int                                                renderedmaterial_dummy;                           		// 0x0040 ( 0x0004 ) 

	// Public Imports
	URenderedMaterial(class URenderedMaterial const &);
	URenderedMaterial(void);
	class URenderedMaterial &  operator=(class URenderedMaterial const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.BitmapMaterial
class DLL_IMPORT UBitmapMaterial : public URenderedMaterial
{
public:
	unsigned char                                      Format;                                           		// 0x0044 ( 0x0001 ) [ CPF_Edit | CPF_Const | CPF_EditConst ]
	unsigned char                                      UClampMode;                                       		// 0x0045 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      VClampMode;                                       		// 0x0046 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      UBits;                                            		// 0x0047 ( 0x0001 ) [ CPF_Const ]
	unsigned char                                      VBits;                                            		// 0x0048 ( 0x0001 ) [ CPF_Const ]
	int                                                USize;                                            		// 0x004C ( 0x0004 ) [ CPF_Const ]
	int                                                VSize;                                            		// 0x0050 ( 0x0004 ) [ CPF_Const ]
	int                                                UClamp;                                           		// 0x0054 ( 0x0004 ) [ CPF_Edit | CPF_Const ]
	int                                                VClamp;                                           		// 0x0058 ( 0x0004 ) [ CPF_Edit | CPF_Const ]

	// Public Imports
	UBitmapMaterial(class UBitmapMaterial const &);
	UBitmapMaterial(void);
	class UBitmapMaterial &  operator=(class UBitmapMaterial const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.Texture
class DLL_IMPORT UTexture : public UBitmapMaterial
{
public:
	class UPalette*                                    Palette;                                          		// 0x005C ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   Detail;                                           		// 0x0060 ( 0x0004 ) [ CPF_Edit ]
	float                                              DetailScale;                                      		// 0x0064 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       MipZero;                                          		// 0x0068 ( 0x0004 ) [ CPF_Const ]
	class FColor                                       MaxColor;                                         		// 0x006C ( 0x0004 ) [ CPF_Const ]
	int                                                InternalTime[ 0x02 ];                             		// 0x0070 ( 0x0008 ) [ CPF_Const ]
	class UTexture*                                    DetailTexture;                                    		// 0x0078 ( 0x0004 ) [ CPF_Deprecated ]
	class UTexture*                                    EnvironmentMap;                                   		// 0x007C ( 0x0004 ) [ CPF_Deprecated ]
	unsigned char                                      EnvMapTransformType;                              		// 0x0080 ( 0x0001 ) [ CPF_Deprecated ]
	float                                              Specular;                                         		// 0x0084 ( 0x0004 ) [ CPF_Deprecated ]
	unsigned long                                      bMasked:1;                                        		// 0x0088 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bAlphaTexture:1;                                  		// 0x0088 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bTwoSided:1;                                      		// 0x0088 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bHighColorQuality:1;                              		// 0x0088 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bHighTextureQuality:1;                            		// 0x0088 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bRealtime:1;                                      		// 0x0088 ( 0x0004 )  [0x00000020]
	unsigned long                                      bParametric:1;                                    		// 0x0088 ( 0x0004 )  [0x00000040]
	unsigned long                                      bRealtimeChanged:1;                               		// 0x0088 ( 0x0004 )  [0x00000080][ CPF_Transient ]
	unsigned long                                      bHasComp:1;                                       		// 0x0088 ( 0x0004 )  [0x00000100][ CPF_Const | CPF_EditConst ]
	unsigned char                                      LODSet;                                           		// 0x008C ( 0x0001 ) [ CPF_Edit ]
	int                                                NormalLOD;                                        		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	int                                                MinLOD;                                           		// 0x0094 ( 0x0004 ) 
	int                                                MaxLOD;                                           		// 0x0098 ( 0x0004 ) [ CPF_Transient ]
	class UTexture*                                    AnimNext;                                         		// 0x009C ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    AnimCurrent;                                      		// 0x00A0 ( 0x0004 ) [ CPF_Transient ]
	unsigned char                                      PrimeCount;                                       		// 0x00A4 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      PrimeCurrent;                                     		// 0x00A5 ( 0x0001 ) [ CPF_Transient ]
	float                                              MinFrameRate;                                     		// 0x00A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              MaxFrameRate;                                     		// 0x00AC ( 0x0004 ) [ CPF_Edit ]
	float                                              Accumulator;                                      		// 0x00B0 ( 0x0004 ) [ CPF_Transient ]
	class TArray< int >                                Mips;                                             		// 0x00B4 ( 0x000C ) [ CPF_Const | CPF_Native ]
	unsigned char                                      CompFormat;                                       		// 0x00C0 ( 0x0001 ) [ CPF_Const | CPF_EditConst ]
	unsigned char                                      PS2FirstMip;                                      		// 0x00C1 ( 0x0001 ) 
	unsigned char                                      PS2NumMips;                                       		// 0x00C2 ( 0x0001 ) 
	int                                                ResidentMips;                                     		// 0x00C4 ( 0x0004 ) [ CPF_Const ]
	int                                                RequestedMips;                                    		// 0x00C8 ( 0x0004 ) [ CPF_Const ]
	int                                                StreamingIndex;                                   		// 0x00CC ( 0x0004 ) [ CPF_Const ]
	float                                              Priority;                                         		// 0x00D0 ( 0x0004 ) [ CPF_Const ]
	int                                                LastRenderTime[ 0x02 ];                           		// 0x00D4 ( 0x0008 ) [ CPF_Const ]
	unsigned long                                      bIsStreamable:1;                                  		// 0x00DC ( 0x0004 )  [0x00000001][ CPF_Const ]
	void*                                              RenderInterface;                                  		// 0x00E0 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	int                                                __LastUpdateTime[ 0x02 ];                         		// 0x00E4 ( 0x0008 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	UTexture(class UTexture const &);
	UTexture(void);
	class UTexture &  operator=(class UTexture const &);
	int  Compress(enum ETextureFormat,int,struct FDXTCompressionOptions *);
	enum ETextureFormat  ConvertDXT(int,int,int,unsigned char * *);
	enum ETextureFormat  ConvertDXT(void);
	void  CreateColorRange(void);
	void  CreateMips(int,int,int,class FColor);
	int  Decompress(enum ETextureFormat);
	int  DefaultLOD(void);
	void  GaussBlur(int,float,float,int,int,class TArray<class FColor> &,class TArray<class FColor> &);
	class FColor *  GetColors(void);
	unsigned long  GetColorsIndex(void);
	class FString  GetFormatDesc(void);
	double  GetLastUpdateTime(void);
	struct FMipmapBase *  GetMip(int);
	int  GetNumMips(void);
	class FColor  GetTexel(float,float,float,float);
	class FColor *  GetTexelPtr(void);
	static void  InternalConstructor(void *);
	void  PrecacheTextureData(int);
	void  SetLastUpdateTime(double);
	void  SetTexelColor(int,int,class FColor);
	static class UClass *  StaticClass(void);
	static class UClient * __Client;

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0090

// Class Engine.Cubemap
class DLL_IMPORT UCubemap : public UTexture
{
public:
	class UTexture*                                    Faces[ 0x06 ];                                    		// 0x00EC ( 0x0018 ) [ CPF_Edit ]
	void*                                              CubemapRenderInterface;                           		// 0x0104 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UCubemap(class UCubemap const &);
	UCubemap(void);
	class UCubemap &  operator=(class UCubemap const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.Palette
class DLL_IMPORT UPalette : public UObject
{
public:
	class TArray< class FColor >                       Colors;                                           		// 0x002C ( 0x000C ) [ CPF_Const | CPF_Native ]

	// Public Imports
	UPalette(class UPalette const &);
	UPalette(void);
	class UPalette &  operator=(class UPalette const &);
	unsigned char  BestMatch(class FColor,int);
	void  FixPalette(void);
	static void  InternalConstructor(void *);
	class UPalette *  ReplaceWithExisting(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.TerrainMaterial
class DLL_IMPORT UTerrainMaterial : public URenderedMaterial
{
public:
	class TArray< struct FTerrainMaterialLayer >       Layers;                                           		// 0x0044 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	unsigned char                                      RenderMethod;                                     		// 0x0050 ( 0x0001 ) [ CPF_Const ]
	unsigned long                                      FirstPass:1;                                      		// 0x0054 ( 0x0004 )  [0x00000001][ CPF_Const ]
	unsigned long                                      UseDirectionalColors:1;                           		// 0x0054 ( 0x0004 )  [0x00000002][ CPF_Const ]

	// Public Imports
	UTerrainMaterial(class UTerrainMaterial const &);
	UTerrainMaterial(void);
	class UTerrainMaterial &  operator=(class UTerrainMaterial const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.TerrainInfo
class DLL_IMPORT ATerrainInfo : public AInfo
{
public:
	int                                                TerrainSectorSize;                                		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    TerrainMap;                                       		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    VertexLightMap;                                   		// 0x0424 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     TerrainScale;                                     		// 0x0428 ( 0x000C ) [ CPF_Edit ]
	struct FTerrainLayer                               Layers[ 0x20 ];                                   		// 0x0434 ( 0x0F00 ) [ CPF_Edit ]
	class TArray< struct FDecorationLayer >            DecoLayers;                                       		// 0x1334 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              DecoLayerOffset;                                  		// 0x1340 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      Inverted:1;                                       		// 0x1344 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bKCollisionHalfRes:1;                             		// 0x1344 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                JustLoaded;                                       		// 0x1348 ( 0x0004 ) [ CPF_Transient ]
	class TArray< struct FDecorationLayerData >        DecoLayerData;                                    		// 0x134C ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< class UTerrainSector* >              Sectors;                                          		// 0x1358 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< struct FVector >                     Vertices;                                         		// 0x1364 ( 0x000C ) [ CPF_Const | CPF_Native ]
	int                                                HeightmapX;                                       		// 0x1370 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	int                                                HeightmapY;                                       		// 0x1374 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	int                                                SectorsX;                                         		// 0x1378 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	int                                                SectorsY;                                         		// 0x137C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	class UTerrainPrimitive*                           Primitive;                                        		// 0x1380 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	class TArray< struct FNormalPair >                 FaceNormals;                                      		// 0x1384 ( 0x000C ) [ CPF_Const | CPF_Native ]
	struct FVector                                     ToWorld[ 0x04 ];                                  		// 0x1390 ( 0x0030 ) [ CPF_Const | CPF_Native ]
	struct FVector                                     ToHeightmap[ 0x04 ];                              		// 0x13C0 ( 0x0030 ) [ CPF_Const | CPF_Native ]
	class TArray< int >                                SelectedVertices;                                 		// 0x13F0 ( 0x000C ) [ CPF_Const | CPF_Native ]
	int                                                ShowGrid;                                         		// 0x13FC ( 0x0004 ) [ CPF_Const | CPF_Native ]
	class TArray< int >                                QuadVisibilityBitmap;                             		// 0x1400 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< int >                                EdgeTurnBitmap;                                   		// 0x140C ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< class UMaterial* >                   QuadDomMaterialBitmap;                            		// 0x1418 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< int >                                RenderCombinations;                               		// 0x1424 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< int >                                VertexStreams;                                    		// 0x1430 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< class FColor >                       VertexColors;                                     		// 0x143C ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< class FColor >                       PaintedColor;                                     		// 0x1448 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class UTexture*                                    CollapsedLayers;                                  		// 0x1454 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	class UTexture*                                    OldTerrainMap;                                    		// 0x1458 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	class TArray< unsigned char >                      OldHeightmap;                                     		// 0x145C ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< class FColor >                       Emisions;                                         		// 0x1468 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< class FColor >                       Excidents;                                        		// 0x1474 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class FColor                                       AmbientLighting;                                  		// 0x1480 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	class TArray< int >                                DLColors;                                         		// 0x1484 ( 0x000C ) [ CPF_Const | CPF_Native ]
	class TArray< int >                                DLColorStreams;                                   		// 0x1490 ( 0x000C ) [ CPF_Const | CPF_Native ]

	// UScript Functions
	 void                      PokeTerrain ( struct FVector WorldLocation, int Radius, int MaxDepth );		// [ FUNC_Final | FUNC_Native ] Engine.TerrainInfo.PokeTerrain

	// Public Imports
	ATerrainInfo(class ATerrainInfo const &);
	ATerrainInfo(void);
	class ATerrainInfo &  operator=(class ATerrainInfo const &);
	void  CalcCoords(void);
	void  CalcLayerTexCoords(void);
	void  CheckComputeDataOnLoad(void);
	void  CombineLayerWeights(void);
	void  ConvertHeightmapFormat(void);
	int  GetClosestVertex(class FVector &,class FVector *,int *,int *);
	int  GetEdgeTurnBitmap(int,int);
	int  GetGlobalVertex(int,int);
	unsigned short  GetHeightmap(int,int);
	unsigned char  GetLayerAlpha(int,int,int,class UTexture *);
	class UMaterial *  GetQuadDomMaterialBitmap(int,int);
	int  GetQuadVisibilityBitmap(int,int);
	int  GetRenderCombinationNum(class TArray<int> &,enum ETerrainRenderMethod);
	class FBox  GetSelectedVerticesBounds(void);
	class FColor  GetTextureColor(int,int,class UTexture *);
	class FVector  GetVertexNormal(int,int);
	class FVector  HeightmapToWorld(class FVector);
	static void  InternalConstructor(void *);
	int  LineCheck(struct FCheckResult &,class FVector const &,class FVector const &,class FVector const &,unsigned long,int);
	int  LineCheckWithQuad(int,int,struct FCheckResult &,class FVector const &,class FVector const &,class FVector const &,unsigned long,int);
	void  MoveVertices(float);
	int  PointCheck(struct FCheckResult &,class FVector const &,class FVector const &,int);
	void  PrecomputeLayerWeights(void);
	void  Render(class FLevelSceneNode *,class FRenderInterface *,class FVisibilityInterface *,class FDynamicLight * *,int,struct FProjectorRenderInfo * *,int);
	void  RenderDecorations(class FLevelSceneNode *,class FRenderInterface *,class FVisibilityInterface *);
	void  ResetMove(void);
	int  SelectVertex(class FVector);
	int  SelectVertexX(int,int);
	void  SelectVerticesInBox(class FBox &);
	void  SetEdgeTurnBitmap(int,int,int);
	void  SetHeightmap(int,int,unsigned short);
	void  SetLayerAlpha(float,float,int,unsigned char,class UTexture *);
	void  SetQuadVisibilityBitmap(int,int,int);
	void  SetTextureColor(int,int,class UTexture *,class FColor &);
	void  SetupSectors(void);
	void  SmoothColors(void);
	void  SmoothDirectionalColors(void);
	void  SoftDeselect(void);
	void  SoftSelect(float,float);
	static class UClass *  StaticClass(void);
	void  Update(float,int,int,int,int,int);
	void  UpdateDecorations(int);
	void  UpdateFromSelectedVertices(void);
	void  UpdateTriangles(int,int,int,int,int,int);
	void  UpdateVertices(float,int,int,int,int);
	class FVector  WorldToHeightmap(class FVector);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x1080

// Class Engine.TerrainPrimitive
class DLL_IMPORT UTerrainPrimitive : public UPrimitive
{
public:
	unsigned char                                      _0x0058[ 0x04 ];                                  		// 0x0058 ( 0x0004 )

	// Public Imports
	UTerrainPrimitive(class UTerrainPrimitive const &);
	UTerrainPrimitive(class ATerrainInfo *);
	class UTerrainPrimitive &  operator=(class UTerrainPrimitive const &);
	class FColor  CalcIncidentLight(class UViewport *,class AActor *,class FVector,class FVector,class AActor *);
	class FBox  GetRenderBoundingBox(class AActor const *,int);
	static void  InternalConstructor(void *);
	class FColor  RenderView(class UViewport *,class AActor *,class FColor,enum EViewOption);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.TerrainSector
class DLL_IMPORT UTerrainSector : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x98 ];                                  		// 0x002C ( 0x0098 )

	// Public Imports
	UTerrainSector(class UTerrainSector const &);
	UTerrainSector(class ATerrainInfo *,int,int,int,int);
	class UTerrainSector &  operator=(class UTerrainSector const &);
	void  AttachProjector(class AProjector *,struct FProjectorRenderInfo *,int,int,int,int);
	void  CreateDLColorStream(void);
	void  GenerateTriangles(int);
	int  GetGlobalVertex(int,int);
	int  GetLocalVertex(int,int);
	static void  InternalConstructor(void *);
	int  IsSectorAll(int,unsigned char);
	int  IsTriangleAll(int,int,int,int,int,unsigned char);
	int  PassShouldRenderTriangle(int,int,int,int,int);
	static class UClass *  StaticClass(void);
	void  StaticLight(int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0098

// Class Engine.SVehicleWheel
class DLL_IMPORT USVehicleWheel : public UObject
{
public:
	float                                              Steer;                                            		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	float                                              DriveForce;                                       		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	float                                              LongFriction;                                     		// 0x0034 ( 0x0004 ) [ CPF_Edit ]
	float                                              LatFriction;                                      		// 0x0038 ( 0x0004 ) [ CPF_Edit ]
	float                                              LongSlip;                                         		// 0x003C ( 0x0004 ) [ CPF_Edit ]
	float                                              LatSlip;                                          		// 0x0040 ( 0x0004 ) [ CPF_Edit ]
	float                                              ChassisTorque;                                    		// 0x0044 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bPoweredWheel:1;                                  		// 0x0048 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bHandbrakeWheel:1;                                		// 0x0048 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bTrackWheel:1;                                    		// 0x0048 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bLeftTrack:1;                                     		// 0x0048 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned char                                      SteerType;                                        		// 0x004C ( 0x0001 ) [ CPF_Edit ]
	struct FName                                       BoneName;                                         		// 0x0050 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      BoneRollAxis;                                     		// 0x0054 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      BoneSteerAxis;                                    		// 0x0055 ( 0x0001 ) [ CPF_Edit ]
	struct FVector                                     BoneOffset;                                       		// 0x0058 ( 0x000C ) [ CPF_Edit ]
	float                                              WheelRadius;                                      		// 0x0064 ( 0x0004 ) [ CPF_Edit ]
	float                                              Softness;                                         		// 0x0068 ( 0x0004 ) [ CPF_Edit ]
	float                                              PenScale;                                         		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	float                                              PenOffset;                                        		// 0x0070 ( 0x0004 ) [ CPF_Edit ]
	float                                              Restitution;                                      		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	float                                              Adhesion;                                         		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	float                                              WheelInertia;                                     		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	float                                              SuspensionTravel;                                 		// 0x0080 ( 0x0004 ) [ CPF_Edit ]
	float                                              SuspensionOffset;                                 		// 0x0084 ( 0x0004 ) [ CPF_Edit ]
	float                                              HandbrakeSlipFactor;                              		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	float                                              HandbrakeFrictionFactor;                          		// 0x008C ( 0x0004 ) [ CPF_Edit ]
	float                                              SuspensionMaxRenderTravel;                        		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       SupportBoneName;                                  		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      SupportBoneAxis;                                  		// 0x0098 ( 0x0001 ) [ CPF_Edit ]
	struct FInterpCurve                                LongFrictionFunc;                                 		// 0x009C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FInterpCurve                                LatSlipFunc;                                      		// 0x00A8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FVector                                     WheelPosition;                                    		// 0x00B4 ( 0x000C ) 
	float                                              SupportPivotDistance;                             		// 0x00C0 ( 0x0004 ) 
	unsigned long                                      bWheelOnGround:1;                                 		// 0x00C4 ( 0x0004 )  [0x00000001]
	float                                              TireLoad;                                         		// 0x00C8 ( 0x0004 ) 
	struct FVector                                     WheelDir;                                         		// 0x00CC ( 0x000C ) 
	struct FVector                                     WheelAxle;                                        		// 0x00D8 ( 0x000C ) 
	float                                              SpinVel;                                          		// 0x00E4 ( 0x0004 ) 
	float                                              TrackVel;                                         		// 0x00E8 ( 0x0004 ) 
	float                                              SlipAngle;                                        		// 0x00EC ( 0x0004 ) 
	float                                              SlipVel;                                          		// 0x00F0 ( 0x0004 ) 
	float                                              SuspensionPosition;                               		// 0x00F4 ( 0x0004 ) 
	float                                              CurrentRotation;                                  		// 0x00F8 ( 0x0004 ) 
	void*                                              KContact;                                         		// 0x00FC ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	USVehicleWheel(class USVehicleWheel const &);
	class USVehicleWheel &  operator=(class USVehicleWheel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00D4

// Class Engine.Pawn
class DLL_IMPORT APawn : public AActor
{
public:
	class AController*                                 Controller;                                       		// 0x03C8 ( 0x0004 ) [ CPF_Net ]
	float                                              NetRelevancyTime;                                 		// 0x03CC ( 0x0004 ) 
	class APlayerController*                           LastRealViewer;                                   		// 0x03D0 ( 0x0004 ) 
	class AActor*                                      LastViewer;                                       		// 0x03D4 ( 0x0004 ) 
	float                                              LastLocTime;                                      		// 0x03D8 ( 0x0004 ) [ CPF_Const ]
	unsigned long                                      bForceDesiredRotation:1;                          		// 0x03DC ( 0x0004 )  [0x00000001]
	unsigned long                                      CannotFindPath:1;                                 		// 0x03DC ( 0x0004 )  [0x00000002]
	int                                                CannotFindPathCount;                              		// 0x03E0 ( 0x0004 ) 
	float                                              CannotFindPathTime;                               		// 0x03E4 ( 0x0004 ) 
	float                                              CannotFindPathTimeHoldDuration;                   		// 0x03E8 ( 0x0004 ) 
	unsigned long                                      CannotReachPath:1;                                		// 0x03EC ( 0x0004 )  [0x00000001]
	unsigned long                                      bDoNotBackPathFinding:1;                          		// 0x03EC ( 0x0004 )  [0x00000002]
	unsigned long                                      bJustLanded:1;                                    		// 0x03EC ( 0x0004 )  [0x00000004]
	unsigned long                                      bLandRecovery:1;                                  		// 0x03EC ( 0x0004 )  [0x00000008]
	unsigned long                                      bUpAndOut:1;                                      		// 0x03EC ( 0x0004 )  [0x00000010]
	unsigned long                                      bIsSprinting:1;                                   		// 0x03EC ( 0x0004 )  [0x00000020][ CPF_Net ]
	unsigned long                                      bIsAiming:1;                                      		// 0x03EC ( 0x0004 )  [0x00000040][ CPF_Net ]
	unsigned long                                      bWasAimMode:1;                                    		// 0x03EC ( 0x0004 )  [0x00000080]
	unsigned long                                      bWarping:1;                                       		// 0x03EC ( 0x0004 )  [0x00000100]
	unsigned long                                      bAddToLevelPawnList:1;                            		// 0x03EC ( 0x0004 )  [0x00000200]
	unsigned long                                      bWantsToCrouch:1;                                 		// 0x03EC ( 0x0004 )  [0x00000400]
	unsigned long                                      bIsCrouched:1;                                    		// 0x03EC ( 0x0004 )  [0x00000800][ CPF_Const | CPF_Net ]
	unsigned long                                      bTryToUncrouch:1;                                 		// 0x03EC ( 0x0004 )  [0x00001000][ CPF_Const ]
	unsigned long                                      bIsCrouching:1;                                   		// 0x03EC ( 0x0004 )  [0x00002000]
	unsigned long                                      bCanCrouch:1;                                     		// 0x03EC ( 0x0004 )  [0x00004000][ CPF_Edit ]
	unsigned long                                      bWasCrouched:1;                                   		// 0x03EC ( 0x0004 )  [0x00008000]
	unsigned long                                      bDrawNameTag:1;                                   		// 0x03EC ( 0x0004 )  [0x00010000]
	unsigned long                                      NametagVisInFront:1;                              		// 0x03EC ( 0x0004 )  [0x00020000]
	unsigned long                                      NametagVisFastTrace:1;                            		// 0x03EC ( 0x0004 )  [0x00040000]
	unsigned long                                      NametagVisTraceThisActor:1;                       		// 0x03EC ( 0x0004 )  [0x00080000]
	struct FVector                                     NametagPosition;                                  		// 0x03F0 ( 0x000C ) 
	struct FVector                                     NametagScreenPos;                                 		// 0x03FC ( 0x000C ) 
	unsigned long                                      bIsStanding:1;                                    		// 0x0408 ( 0x0004 )  [0x00000001]
	float                                              fWeaponSpread;                                    		// 0x040C ( 0x0004 ) 
	unsigned char                                      byGoToProne;                                      		// 0x0410 ( 0x0001 ) 
	unsigned long                                      bWantsToProne:1;                                  		// 0x0414 ( 0x0004 )  [0x00000001]
	unsigned long                                      bIsProned:1;                                      		// 0x0414 ( 0x0004 )  [0x00000002][ CPF_Const | CPF_Net ]
	unsigned long                                      bIsProning:1;                                     		// 0x0414 ( 0x0004 )  [0x00000004]
	unsigned long                                      bWasProned:1;                                     		// 0x0414 ( 0x0004 )  [0x00000008]
	float                                              ProneHeight;                                      		// 0x0418 ( 0x0004 ) 
	float                                              ProneRadius;                                      		// 0x041C ( 0x0004 ) 
	unsigned char                                      byUseKey;                                         		// 0x0420 ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      bySpecialState;                                   		// 0x0421 ( 0x0001 ) 
	unsigned long                                      bCrawler:1;                                       		// 0x0424 ( 0x0004 )  [0x00000001]
	unsigned long                                      bReducedSpeed:1;                                  		// 0x0424 ( 0x0004 )  [0x00000002][ CPF_Const ]
	unsigned long                                      bJumpCapable:1;                                   		// 0x0424 ( 0x0004 )  [0x00000004]
	unsigned long                                      bCanJump:1;                                       		// 0x0424 ( 0x0004 )  [0x00000008]
	unsigned long                                      bCanWalk:1;                                       		// 0x0424 ( 0x0004 )  [0x00000010]
	unsigned long                                      bCanSwim:1;                                       		// 0x0424 ( 0x0004 )  [0x00000020]
	unsigned long                                      bCanFly:1;                                        		// 0x0424 ( 0x0004 )  [0x00000040]
	unsigned long                                      bCanClimbLadders:1;                               		// 0x0424 ( 0x0004 )  [0x00000080]
	unsigned long                                      bCanStrafe:1;                                     		// 0x0424 ( 0x0004 )  [0x00000100]
	unsigned long                                      bCanDoubleJump:1;                                 		// 0x0424 ( 0x0004 )  [0x00000200]
	unsigned long                                      bCanWallDodge:1;                                  		// 0x0424 ( 0x0004 )  [0x00000400][ CPF_Net ]
	unsigned long                                      bAvoidLedges:1;                                   		// 0x0424 ( 0x0004 )  [0x00000800]
	unsigned long                                      bStopAtLedges:1;                                  		// 0x0424 ( 0x0004 )  [0x00001000]
	unsigned long                                      bNoJumpAdjust:1;                                  		// 0x0424 ( 0x0004 )  [0x00002000]
	unsigned long                                      bCountJumps:1;                                    		// 0x0424 ( 0x0004 )  [0x00004000]
	unsigned long                                      bSimulateGravity:1;                               		// 0x0424 ( 0x0004 )  [0x00008000][ CPF_Const | CPF_Net ]
	unsigned long                                      bUpdateEyeheight:1;                               		// 0x0424 ( 0x0004 )  [0x00010000]
	unsigned long                                      bIgnoreForces:1;                                  		// 0x0424 ( 0x0004 )  [0x00020000]
	unsigned long                                      bNoVelocityUpdate:1;                              		// 0x0424 ( 0x0004 )  [0x00040000][ CPF_Const ]
	unsigned long                                      bCanWalkOffLedges:1;                              		// 0x0424 ( 0x0004 )  [0x00080000]
	unsigned long                                      bSteadyFiring:1;                                  		// 0x0424 ( 0x0004 )  [0x00100000][ CPF_Net ]
	unsigned long                                      bCanBeBaseForPawns:1;                             		// 0x0424 ( 0x0004 )  [0x00200000]
	unsigned long                                      bClientCollision:1;                               		// 0x0424 ( 0x0004 )  [0x00400000]
	unsigned long                                      bSimGravityDisabled:1;                            		// 0x0424 ( 0x0004 )  [0x00800000][ CPF_Const ]
	unsigned long                                      bDirectHitWall:1;                                 		// 0x0424 ( 0x0004 )  [0x01000000]
	unsigned long                                      bServerMoveSetPawnRot:1;                          		// 0x0424 ( 0x0004 )  [0x02000000]
	unsigned long                                      bFlyingKarma:1;                                   		// 0x0424 ( 0x0004 )  [0x04000000]
	unsigned long                                      bDrawCorona:1;                                    		// 0x0424 ( 0x0004 )  [0x08000000]
	unsigned long                                      bNoCoronas:1;                                     		// 0x0424 ( 0x0004 )  [0x10000000]
	unsigned long                                      bThumped:1;                                       		// 0x0424 ( 0x0004 )  [0x20000000]
	unsigned long                                      bInvulnerableBody:1;                              		// 0x0424 ( 0x0004 )  [0x40000000]
	unsigned long                                      bIsFemale:1;                                      		// 0x0424 ( 0x0004 )  [0x80000000]
	unsigned long                                      bAutoActivate:1;                                  		// 0x0428 ( 0x0004 )  [0x00000001]
	unsigned long                                      bCanPickupInventory:1;                            		// 0x0428 ( 0x0004 )  [0x00000002]
	unsigned long                                      bUpdatingDisplay:1;                               		// 0x0428 ( 0x0004 )  [0x00000004]
	unsigned long                                      bAmbientCreature:1;                               		// 0x0428 ( 0x0004 )  [0x00000008]
	unsigned long                                      bLOSHearing:1;                                    		// 0x0428 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bSameZoneHearing:1;                               		// 0x0428 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bAdjacentZoneHearing:1;                           		// 0x0428 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bMuffledHearing:1;                                		// 0x0428 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	float                                              fWallHearingFactor;                               		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bAroundCornerHearing:1;                           		// 0x0430 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bDontPossess:1;                                   		// 0x0430 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bAutoFire:1;                                      		// 0x0430 ( 0x0004 )  [0x00000004]
	unsigned long                                      bRollToDesired:1;                                 		// 0x0430 ( 0x0004 )  [0x00000008]
	unsigned long                                      bIgnorePlayFiring:1;                              		// 0x0430 ( 0x0004 )  [0x00000010]
	unsigned long                                      bStationary:1;                                    		// 0x0430 ( 0x0004 )  [0x00000020]
	unsigned long                                      bCachedRelevant:1;                                		// 0x0430 ( 0x0004 )  [0x00000040]
	unsigned long                                      bUseCompressedPosition:1;                         		// 0x0430 ( 0x0004 )  [0x00000080]
	unsigned long                                      bWeaponBob:1;                                     		// 0x0430 ( 0x0004 )  [0x00000100]
	unsigned long                                      bHideRegularHUD:1;                                		// 0x0430 ( 0x0004 )  [0x00000200]
	unsigned long                                      bSpecialHUD:1;                                    		// 0x0430 ( 0x0004 )  [0x00000400][ CPF_Net ]
	unsigned long                                      bSpecialCrosshair:1;                              		// 0x0430 ( 0x0004 )  [0x00000800]
	unsigned long                                      bSpecialCalcView:1;                               		// 0x0430 ( 0x0004 )  [0x00001000]
	unsigned long                                      bNoTeamBeacon:1;                                  		// 0x0430 ( 0x0004 )  [0x00002000]
	unsigned long                                      bNoWeaponFiring:1;                                		// 0x0430 ( 0x0004 )  [0x00004000]
	unsigned long                                      bIsTyping:1;                                      		// 0x0430 ( 0x0004 )  [0x00008000]
	unsigned long                                      bScriptPostRender:1;                              		// 0x0430 ( 0x0004 )  [0x00010000]
	unsigned long                                      bCanUse:1;                                        		// 0x0430 ( 0x0004 )  [0x00020000]
	unsigned long                                      bSuperSize:1;                                     		// 0x0430 ( 0x0004 )  [0x00040000]
	unsigned long                                      bWaterStepup:1;                                   		// 0x0430 ( 0x0004 )  [0x00080000]
	unsigned char                                      FlashCount;                                       		// 0x0434 ( 0x0001 ) 
	unsigned char                                      Visibility;                                       		// 0x0435 ( 0x0001 ) 
	float                                              DesiredSpeed;                                     		// 0x0438 ( 0x0004 ) 
	float                                              MaxDesiredSpeed;                                  		// 0x043C ( 0x0004 ) 
	struct FName                                       AIScriptTag;                                      		// 0x0440 ( 0x0004 ) [ CPF_Edit ]
	float                                              HearingThreshold;                                 		// 0x0444 ( 0x0004 ) [ CPF_Edit ]
	float                                              Alertness;                                        		// 0x0448 ( 0x0004 ) [ CPF_Edit ]
	float                                              SightRadius;                                      		// 0x044C ( 0x0004 ) [ CPF_Edit ]
	float                                              PeripheralVision;                                 		// 0x0450 ( 0x0004 ) [ CPF_Edit ]
	float                                              SkillModifier;                                    		// 0x0454 ( 0x0004 ) [ CPF_Edit ]
	float                                              AvgPhysicsTime;                                   		// 0x0458 ( 0x0004 ) [ CPF_Const ]
	float                                              MeleeRange;                                       		// 0x045C ( 0x0004 ) 
	float                                              NavigationPointRange;                             		// 0x0460 ( 0x0004 ) 
	class ANavigationPoint*                            Anchor;                                           		// 0x0464 ( 0x0004 ) 
	class ANavigationPoint*                            LastAnchor;                                       		// 0x0468 ( 0x0004 ) [ CPF_Const ]
	float                                              FindAnchorFailedTime;                             		// 0x046C ( 0x0004 ) 
	float                                              LastValidAnchorTime;                              		// 0x0470 ( 0x0004 ) 
	float                                              DestinationOffset;                                		// 0x0474 ( 0x0004 ) 
	float                                              NextPathRadius;                                   		// 0x0478 ( 0x0004 ) 
	struct FVector                                     SerpentineDir;                                    		// 0x047C ( 0x000C ) 
	float                                              SerpentineDist;                                   		// 0x0488 ( 0x0004 ) 
	float                                              SerpentineTime;                                   		// 0x048C ( 0x0004 ) 
	float                                              UncrouchTime;                                     		// 0x0490 ( 0x0004 ) [ CPF_Const ]
	float                                              SpawnTime;                                        		// 0x0494 ( 0x0004 ) 
	float                                              GroundSpeed;                                      		// 0x0498 ( 0x0004 ) [ CPF_Net ]
	float                                              WaterSpeed;                                       		// 0x049C ( 0x0004 ) [ CPF_Net ]
	float                                              AirSpeed;                                         		// 0x04A0 ( 0x0004 ) [ CPF_Net ]
	float                                              LadderSpeed;                                      		// 0x04A4 ( 0x0004 ) 
	float                                              AccelRate;                                        		// 0x04A8 ( 0x0004 ) [ CPF_Net ]
	float                                              JumpZ;                                            		// 0x04AC ( 0x0004 ) [ CPF_Net ]
	float                                              AirControl;                                       		// 0x04B0 ( 0x0004 ) [ CPF_Net ]
	float                                              SprintSpeed;                                      		// 0x04B4 ( 0x0004 ) 
	float                                              CrouchedSpeed;                                    		// 0x04B8 ( 0x0004 ) 
	float                                              PronedSpeed;                                      		// 0x04BC ( 0x0004 ) 
	float                                              AimedGroundSpeed;                                 		// 0x04C0 ( 0x0004 ) 
	float                                              AimedCrouchedSpeed;                               		// 0x04C4 ( 0x0004 ) 
	float                                              F_DiagmoveRatio;                                  		// 0x04C8 ( 0x0004 ) 
	float                                              SideMoveRatio;                                    		// 0x04CC ( 0x0004 ) 
	float                                              B_DiagmoveRatio;                                  		// 0x04D0 ( 0x0004 ) 
	float                                              BackMoveRatio;                                    		// 0x04D4 ( 0x0004 ) 
	float                                              WalkZDamp;                                        		// 0x04D8 ( 0x0004 ) 
	float                                              MaxFallSpeed;                                     		// 0x04DC ( 0x0004 ) 
	struct FVector                                     ConstantAcceleration;                             		// 0x04E0 ( 0x000C ) 
	class AVehicle*                                    DrivenVehicle;                                    		// 0x04EC ( 0x0004 ) [ CPF_Net ]
	class AVehicle*                                    EntryVehicle;                                     		// 0x04F0 ( 0x0004 ) [ CPF_Net ]
	struct FVector                                     ImpactVelocity;                                   		// 0x04F4 ( 0x000C ) 
	int                                                PitchUpLimit;                                     		// 0x0500 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	int                                                PitchDownLimit;                                   		// 0x0504 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	struct FString                                     OwnerName;                                        		// 0x0508 ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]
	class AwWeapon*                                    Weapon;                                           		// 0x0514 ( 0x0004 ) [ CPF_Travel ]
	class AwWeapon*                                    PendingWeapon;                                    		// 0x0518 ( 0x0004 ) 
	class APowerups*                                   SelectedItem;                                     		// 0x051C ( 0x0004 ) [ CPF_Net | CPF_Travel ]
	float                                              BaseEyeHeight;                                    		// 0x0520 ( 0x0004 ) 
	float                                              BaseEyeHeightCroucned;                            		// 0x0524 ( 0x0004 ) 
	float                                              BaseEyeHeightProned;                              		// 0x0528 ( 0x0004 ) 
	float                                              EyeHeight;                                        		// 0x052C ( 0x0004 ) 
	struct FVector                                     Floor;                                            		// 0x0530 ( 0x000C ) 
	float                                              SplashTime;                                       		// 0x053C ( 0x0004 ) 
	float                                              CrouchHeight;                                     		// 0x0540 ( 0x0004 ) 
	float                                              CrouchRadius;                                     		// 0x0544 ( 0x0004 ) 
	float                                              DrivingHeight;                                    		// 0x0548 ( 0x0004 ) [ CPF_Edit ]
	float                                              DrivingRadius;                                    		// 0x054C ( 0x0004 ) [ CPF_Edit ]
	float                                              OldZ;                                             		// 0x0550 ( 0x0004 ) 
	class APhysicsVolume*                              HeadVolume;                                       		// 0x0554 ( 0x0004 ) 
	float                                              HealthMax;                                        		// 0x0558 ( 0x0004 ) [ CPF_Net ]
	float                                              SuperHealthMax;                                   		// 0x055C ( 0x0004 ) 
	int                                                Health;                                           		// 0x0560 ( 0x0004 ) [ CPF_Net | CPF_Travel ]
	float                                              BreathTime;                                       		// 0x0564 ( 0x0004 ) 
	float                                              UnderWaterTime;                                   		// 0x0568 ( 0x0004 ) 
	float                                              LastPainTime;                                     		// 0x056C ( 0x0004 ) 
	class UClass*                                      ReducedDamageType;                                		// 0x0570 ( 0x0004 ) 
	float                                              HeadRadius;                                       		// 0x0574 ( 0x0004 ) 
	float                                              HeadHeight;                                       		// 0x0578 ( 0x0004 ) 
	float                                              HeadScale;                                        		// 0x057C ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bSetPCRotOnPossess:1;                             		// 0x0580 ( 0x0004 )  [0x00000001]
	struct FVector                                     noise1spot;                                       		// 0x0584 ( 0x000C ) [ CPF_Const ]
	float                                              noise1time;                                       		// 0x0590 ( 0x0004 ) [ CPF_Const ]
	class APawn*                                       noise1other;                                      		// 0x0594 ( 0x0004 ) [ CPF_Const ]
	float                                              noise1loudness;                                   		// 0x0598 ( 0x0004 ) [ CPF_Const ]
	struct FVector                                     noise2spot;                                       		// 0x059C ( 0x000C ) [ CPF_Const ]
	float                                              noise2time;                                       		// 0x05A8 ( 0x0004 ) [ CPF_Const ]
	class APawn*                                       noise2other;                                      		// 0x05AC ( 0x0004 ) [ CPF_Const ]
	float                                              noise2loudness;                                   		// 0x05B0 ( 0x0004 ) [ CPF_Const ]
	float                                              LastPainSound;                                    		// 0x05B4 ( 0x0004 ) 
	float                                              Bob;                                              		// 0x05B8 ( 0x0004 ) 
	float                                              BobMagicValue1;                                   		// 0x05BC ( 0x0004 ) 
	float                                              BobMagicValue2;                                   		// 0x05C0 ( 0x0004 ) 
	float                                              BobMagicValue3;                                   		// 0x05C4 ( 0x0004 ) 
	float                                              BobMagicValue4;                                   		// 0x05C8 ( 0x0004 ) 
	float                                              LandBob;                                          		// 0x05CC ( 0x0004 ) 
	float                                              AppliedBob;                                       		// 0x05D0 ( 0x0004 ) 
	float                                              bobtime;                                          		// 0x05D4 ( 0x0004 ) 
	float                                              bobTimeX;                                         		// 0x05D8 ( 0x0004 ) 
	float                                              bobTimeY;                                         		// 0x05DC ( 0x0004 ) 
	float                                              bobTimeZ;                                         		// 0x05E0 ( 0x0004 ) 
	struct FVector                                     WalkBob;                                          		// 0x05E4 ( 0x000C ) 
	struct FVector                                     WalkBobCamera;                                    		// 0x05F0 ( 0x000C ) 
	float                                              SoundDampening;                                   		// 0x05FC ( 0x0004 ) 
	float                                              DamageScaling;                                    		// 0x0600 ( 0x0004 ) 
	float                                              AmbientSoundScaling;                              		// 0x0604 ( 0x0004 ) 
	struct FString                                     MenuName;                                         		// 0x0608 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class AProjector*                                  Shadow;                                           		// 0x0614 ( 0x0004 ) 
	class UClass*                                      BloodEffect;                                      		// 0x0618 ( 0x0004 ) 
	class UClass*                                      LowGoreBlood;                                     		// 0x061C ( 0x0004 ) 
	class UClass*                                      ControllerClass;                                  		// 0x0620 ( 0x0004 ) 
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0624 ( 0x0004 ) [ CPF_Net ]
	class ALadderVolume*                               OnLadder;                                         		// 0x0628 ( 0x0004 ) 
	struct FName                                       LandMovementState;                                		// 0x062C ( 0x0004 ) 
	struct FName                                       WaterMovementState;                               		// 0x0630 ( 0x0004 ) 
	class APlayerStart*                                LastStartSpot;                                    		// 0x0634 ( 0x0004 ) 
	float                                              LastStartTime;                                    		// 0x0638 ( 0x0004 ) 
	struct FName                                       AnimAction;                                       		// 0x063C ( 0x0004 ) [ CPF_Net ]
	struct FVector                                     TakeHitLocation;                                  		// 0x0640 ( 0x000C ) [ CPF_Net ]
	class UClass*                                      HitDamageType;                                    		// 0x064C ( 0x0004 ) [ CPF_Net ]
	int                                                HitCollisionPart;                                 		// 0x0650 ( 0x0004 ) [ CPF_Net ]
	struct FVector                                     TearOffMomentum;                                  		// 0x0654 ( 0x000C ) [ CPF_Net ]
	unsigned char                                      OldPhysics;                                       		// 0x0660 ( 0x0001 ) 
	unsigned long                                      bPhysicsAnimUpdate:1;                             		// 0x0664 ( 0x0004 )  [0x00000001]
	unsigned long                                      bInitializeAnimation:1;                           		// 0x0664 ( 0x0004 )  [0x00000002]
	unsigned long                                      bPlayedDeath:1;                                   		// 0x0664 ( 0x0004 )  [0x00000004]
	unsigned long                                      bIsIdle:1;                                        		// 0x0664 ( 0x0004 )  [0x00000008]
	unsigned long                                      bWaitForAnim:1;                                   		// 0x0664 ( 0x0004 )  [0x00000010]
	unsigned long                                      bReverseRun:1;                                    		// 0x0664 ( 0x0004 )  [0x00000020][ CPF_Const ]
	unsigned long                                      bDoTorsoTwist:1;                                  		// 0x0664 ( 0x0004 )  [0x00000040]
	unsigned long                                      FootTurning:1;                                    		// 0x0664 ( 0x0004 )  [0x00000080][ CPF_Const ]
	unsigned long                                      FootStill:1;                                      		// 0x0664 ( 0x0004 )  [0x00000100][ CPF_Const ]
	unsigned char                                      byRunCase;                                        		// 0x0668 ( 0x0001 ) 
	unsigned char                                      ViewPitch;                                        		// 0x0669 ( 0x0001 ) [ CPF_Const | CPF_Net ]
	int                                                SmoothViewPitch;                                  		// 0x066C ( 0x0004 ) 
	int                                                SmoothViewYaw;                                    		// 0x0670 ( 0x0004 ) 
	float                                              OldRotYaw;                                        		// 0x0674 ( 0x0004 ) 
	struct FVector                                     OldAcceleration;                                  		// 0x0678 ( 0x000C ) 
	float                                              BlendChangeTime;                                  		// 0x0684 ( 0x0004 ) [ CPF_Edit ]
	float                                              MovementBlendStartTime;                           		// 0x0688 ( 0x0004 ) 
	float                                              ForwardStrafeBias;                                		// 0x068C ( 0x0004 ) 
	float                                              BackwardStrafeBias;                               		// 0x0690 ( 0x0004 ) 
	float                                              DodgeSpeedFactor;                                 		// 0x0694 ( 0x0004 ) 
	float                                              DodgeSpeedZ;                                      		// 0x0698 ( 0x0004 ) 
	int                                                OldAnimDir;                                       		// 0x069C ( 0x0004 ) [ CPF_Const ]
	struct FVector                                     OldVelocity;                                      		// 0x06A0 ( 0x000C ) [ CPF_Const ]
	float                                              IdleTime;                                         		// 0x06AC ( 0x0004 ) 
	struct FName                                       SwimAnims[ 0x04 ];                                		// 0x06B0 ( 0x0010 ) 
	struct FName                                       DoubleJumpAnims[ 0x04 ];                          		// 0x06C0 ( 0x0010 ) 
	struct FName                                       DodgeAnims[ 0x04 ];                               		// 0x06D0 ( 0x0010 ) 
	struct FName                                       IdleSwimAnim;                                     		// 0x06E0 ( 0x0004 ) 
	struct FName                                       IdleWeaponAnim;                                   		// 0x06E4 ( 0x0004 ) 
	struct FName                                       IdleChatAnim;                                     		// 0x06E8 ( 0x0004 ) 
	unsigned long                                      bIsNeedUpdateAnim:1;                              		// 0x06EC ( 0x0004 )  [0x00000001]
	struct FName                                       Prone_Anim;                                       		// 0x06F0 ( 0x0004 ) 
	struct FName                                       WeaponSelectAnim;                                 		// 0x06F4 ( 0x0004 ) 
	struct FName                                       WeaponPutDownAnim;                                		// 0x06F8 ( 0x0004 ) 
	struct FName                                       WeaponIdleRestAnim;                               		// 0x06FC ( 0x0004 ) 
	class TArray< struct FPlayerDamageInfo >           DamageInfo;                                       		// 0x0700 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AController* >                 AssistList;                                       		// 0x070C ( 0x000C ) [ CPF_NeedCtorLink ]
	class UI3DL2Listener*                              curEAXEffect;                                     		// 0x0718 ( 0x0004 ) 
	float                                              EAXEffectTime;                                    		// 0x071C ( 0x0004 ) 
	float                                              RepPawnPositionTime;                              		// 0x0720 ( 0x0004 ) 
	struct FVector                                     PrevLocation;                                     		// 0x0724 ( 0x000C ) 
	struct FVector                                     PrevMoveDir;                                      		// 0x0730 ( 0x000C ) 
	struct FVector                                     PrevInterpoLocation;                              		// 0x073C ( 0x000C ) 
	int                                                PrevTime;                                         		// 0x0748 ( 0x0004 ) 
	struct FName                                       IdleRifleAnim;                                    		// 0x074C ( 0x0004 ) 
	struct FName                                       IdleRestAnim[ 0x02 ];                             		// 0x0750 ( 0x0008 ) 
	struct FName                                       MovementAnims[ 0x04 ];                            		// 0x0758 ( 0x0010 ) 
	struct FName                                       FireRifleRapidAnim;                               		// 0x0768 ( 0x0004 ) 
	struct FName                                       FireRifleBurstAnim;                               		// 0x076C ( 0x0004 ) 
	struct FName                                       Rifle_BoltLeverAnim;                              		// 0x0770 ( 0x0004 ) 
	struct FName                                       Reload_Rifle_Anim;                                		// 0x0774 ( 0x0004 ) 
	struct FName                                       Putdown_Rifle_Anim;                               		// 0x0778 ( 0x0004 ) 
	struct FName                                       PutdownQuick_Rifle_Anim;                          		// 0x077C ( 0x0004 ) 
	struct FName                                       Select_Rifle_Anim;                                		// 0x0780 ( 0x0004 ) 
	struct FName                                       SelectNew_Rifle_Anim;                             		// 0x0784 ( 0x0004 ) 
	struct FName                                       SprintAnims[ 0x04 ];                              		// 0x0788 ( 0x0010 ) 
	struct FName                                       IdleAimAnim;                                      		// 0x0798 ( 0x0004 ) 
	struct FName                                       AimAnims[ 0x04 ];                                 		// 0x079C ( 0x0010 ) 
	struct FName                                       FireAimRifleRapidAnim;                            		// 0x07AC ( 0x0004 ) 
	struct FName                                       FireAimRifleSemiAnim;                             		// 0x07B0 ( 0x0004 ) 
	struct FName                                       TakeoffStillAnim;                                 		// 0x07B4 ( 0x0004 ) 
	struct FName                                       AirStillAnim;                                     		// 0x07B8 ( 0x0004 ) 
	struct FName                                       TakeoffAnims[ 0x04 ];                             		// 0x07BC ( 0x0010 ) 
	struct FName                                       AirAnims[ 0x04 ];                                 		// 0x07CC ( 0x0010 ) 
	struct FName                                       LandAnims[ 0x05 ];                                		// 0x07DC ( 0x0014 ) 
	struct FName                                       Pistol_TakeoffStillAnim;                          		// 0x07F0 ( 0x0004 ) 
	struct FName                                       Pistol_AirStillAnim;                              		// 0x07F4 ( 0x0004 ) 
	struct FName                                       Pistol_TakeoffAnims[ 0x04 ];                      		// 0x07F8 ( 0x0010 ) 
	struct FName                                       Pistol_AirAnims[ 0x04 ];                          		// 0x0808 ( 0x0010 ) 
	struct FName                                       Pistol_LandAnims[ 0x05 ];                         		// 0x0818 ( 0x0014 ) 
	struct FName                                       Frag_TakeoffStillAnim;                            		// 0x082C ( 0x0004 ) 
	struct FName                                       Frag_AirStillAnim;                                		// 0x0830 ( 0x0004 ) 
	struct FName                                       Frag_TakeoffAnims[ 0x04 ];                        		// 0x0834 ( 0x0010 ) 
	struct FName                                       Frag_AirAnims[ 0x04 ];                            		// 0x0844 ( 0x0010 ) 
	struct FName                                       Frag_LandAnims[ 0x05 ];                           		// 0x0854 ( 0x0014 ) 
	struct FName                                       Rpg_TakeoffStillAnim;                             		// 0x0868 ( 0x0004 ) 
	struct FName                                       Rpg_AirStillAnim;                                 		// 0x086C ( 0x0004 ) 
	struct FName                                       Rpg_TakeoffAnims[ 0x04 ];                         		// 0x0870 ( 0x0010 ) 
	struct FName                                       Rpg_AirAnims[ 0x04 ];                             		// 0x0880 ( 0x0010 ) 
	struct FName                                       Rpg_LandAnims[ 0x05 ];                            		// 0x0890 ( 0x0014 ) 
	struct FName                                       IdleCrouchAnim;                                   		// 0x08A4 ( 0x0004 ) 
	struct FName                                       IdleCrouchRestAnim[ 0x02 ];                       		// 0x08A8 ( 0x0008 ) 
	struct FName                                       CrouchAnims[ 0x04 ];                              		// 0x08B0 ( 0x0010 ) 
	struct FName                                       FireCrouchRifleRapidAnim;                         		// 0x08C0 ( 0x0004 ) 
	struct FName                                       IdleAimCrouchAnim;                                		// 0x08C4 ( 0x0004 ) 
	struct FName                                       AimCrouchAnims[ 0x04 ];                           		// 0x08C8 ( 0x0010 ) 
	struct FName                                       IdleProneAnim;                                    		// 0x08D8 ( 0x0004 ) 
	struct FName                                       ProneAnims[ 0x04 ];                               		// 0x08DC ( 0x0010 ) 
	struct FName                                       FireProneRifleRapidAnim;                          		// 0x08EC ( 0x0004 ) 
	struct FName                                       Rifle_Prone_BoltLeverAnim;                        		// 0x08F0 ( 0x0004 ) 
	struct FName                                       Reload_Prone_Rifle_Anim;                          		// 0x08F4 ( 0x0004 ) 
	struct FName                                       Putdown_Prone_Rifle_Anim;                         		// 0x08F8 ( 0x0004 ) 
	struct FName                                       PutdownQuick_Prone_Rifle_Anim;                    		// 0x08FC ( 0x0004 ) 
	struct FName                                       Select_Prone_Rifle_Anim;                          		// 0x0900 ( 0x0004 ) 
	struct FName                                       SelectNew_Prone_Rifle_Anim;                       		// 0x0904 ( 0x0004 ) 
	struct FName                                       Prone_Standup_Anim;                               		// 0x0908 ( 0x0004 ) 
	struct FName                                       Meele_Rifle;                                      		// 0x090C ( 0x0004 ) 
	struct FName                                       Meele_Rifle_Cr;                                   		// 0x0910 ( 0x0004 ) 
	struct FName                                       Meele_Rifle_Pr;                                   		// 0x0914 ( 0x0004 ) 
	struct FName                                       Meele_Rifle_F;                                    		// 0x0918 ( 0x0004 ) 
	struct FName                                       Meele_Rifle_Cr_F;                                 		// 0x091C ( 0x0004 ) 
	struct FName                                       Meele_Knife;                                      		// 0x0920 ( 0x0004 ) 
	struct FName                                       Meele_Knife_Cr;                                   		// 0x0924 ( 0x0004 ) 
	struct FName                                       Meele_Knife_Pr;                                   		// 0x0928 ( 0x0004 ) 
	struct FName                                       Meele_Knife_F;                                    		// 0x092C ( 0x0004 ) 
	struct FName                                       Meele_Knife_Cr_F;                                 		// 0x0930 ( 0x0004 ) 
	struct FName                                       Meele_Scharge;                                    		// 0x0934 ( 0x0004 ) 
	struct FName                                       Pistol_IdleRifleAnim;                             		// 0x0938 ( 0x0004 ) 
	struct FName                                       Pistol_IdleRestAnim[ 0x02 ];                      		// 0x093C ( 0x0008 ) 
	struct FName                                       Pistol_MovementAnims[ 0x04 ];                     		// 0x0944 ( 0x0010 ) 
	struct FName                                       Pistol_FireAimRifleRapidAnim;                     		// 0x0954 ( 0x0004 ) 
	struct FName                                       Pistol_Reload_Rifle_Anim;                         		// 0x0958 ( 0x0004 ) 
	struct FName                                       Pistol_Putdown_Rifle_Anim;                        		// 0x095C ( 0x0004 ) 
	struct FName                                       Pistol_PutdownQuick_Rifle_Anim;                   		// 0x0960 ( 0x0004 ) 
	struct FName                                       Pistol_Select_Rifle_Anim;                         		// 0x0964 ( 0x0004 ) 
	struct FName                                       Pistol_SprintAnims[ 0x04 ];                       		// 0x0968 ( 0x0010 ) 
	struct FName                                       Pistol_IdleCrouchAnim;                            		// 0x0978 ( 0x0004 ) 
	struct FName                                       Pistol_IdleCrouchRest[ 0x02 ];                    		// 0x097C ( 0x0008 ) 
	struct FName                                       Pistol_CrouchAnims[ 0x04 ];                       		// 0x0984 ( 0x0010 ) 
	struct FName                                       Pistol_FireCrouchRifleRapidAnim;                  		// 0x0994 ( 0x0004 ) 
	struct FName                                       Pistol_IdleProne;                                 		// 0x0998 ( 0x0004 ) 
	struct FName                                       Pistol_ProneBurst;                                		// 0x099C ( 0x0004 ) 
	struct FName                                       Pistol_ProneReload;                               		// 0x09A0 ( 0x0004 ) 
	struct FName                                       Pistol_PronePutdown;                              		// 0x09A4 ( 0x0004 ) 
	struct FName                                       Pistol_PronePutdownQuick;                         		// 0x09A8 ( 0x0004 ) 
	struct FName                                       Pistol_ProneSelect;                               		// 0x09AC ( 0x0004 ) 
	struct FName                                       Frag_Idle_Anim;                                   		// 0x09B0 ( 0x0004 ) 
	struct FName                                       Frag_Rest_Idle_Anim[ 0x02 ];                      		// 0x09B4 ( 0x0008 ) 
	struct FName                                       Frag_MovementAnims[ 0x04 ];                       		// 0x09BC ( 0x0010 ) 
	struct FName                                       Frag_PutDown_Anim;                                		// 0x09CC ( 0x0004 ) 
	struct FName                                       Frag_PutDownQuick_Anim;                           		// 0x09D0 ( 0x0004 ) 
	struct FName                                       Frag_Select_Anim;                                 		// 0x09D4 ( 0x0004 ) 
	struct FName                                       Frag_Burst_Anim;                                  		// 0x09D8 ( 0x0004 ) 
	struct FName                                       Frag_SprintAnims[ 0x04 ];                         		// 0x09DC ( 0x0010 ) 
	struct FName                                       Frag_IdleCrouchAnim;                              		// 0x09EC ( 0x0004 ) 
	struct FName                                       Frag_CrouchMovementAnims[ 0x04 ];                 		// 0x09F0 ( 0x0010 ) 
	struct FName                                       Frag_IdleProne;                                   		// 0x0A00 ( 0x0004 ) 
	struct FName                                       Frag_ProneBurst;                                  		// 0x0A04 ( 0x0004 ) 
	struct FName                                       Frag_PronePutdown;                                		// 0x0A08 ( 0x0004 ) 
	struct FName                                       Frag_PronePutdownQuick;                           		// 0x0A0C ( 0x0004 ) 
	struct FName                                       Frag_ProneSelect;                                 		// 0x0A10 ( 0x0004 ) 
	struct FName                                       Rpg_Idle_Anim;                                    		// 0x0A14 ( 0x0004 ) 
	struct FName                                       Rpg_Rest_Idle_Anim;                               		// 0x0A18 ( 0x0004 ) 
	struct FName                                       Rpg_MovementAnims[ 0x04 ];                        		// 0x0A1C ( 0x0010 ) 
	struct FName                                       Rpg_Burst_Anim;                                   		// 0x0A2C ( 0x0004 ) 
	struct FName                                       Rpg_Reload_Anim;                                  		// 0x0A30 ( 0x0004 ) 
	struct FName                                       Rpg_PutDown_Anim;                                 		// 0x0A34 ( 0x0004 ) 
	struct FName                                       Rpg_PutDownQuick_Anim;                            		// 0x0A38 ( 0x0004 ) 
	struct FName                                       Rpg_Select_Anim;                                  		// 0x0A3C ( 0x0004 ) 
	struct FName                                       Rpg_SprintAnims[ 0x04 ];                          		// 0x0A40 ( 0x0010 ) 
	struct FName                                       Rpg_Idle_AimAnim;                                 		// 0x0A50 ( 0x0004 ) 
	struct FName                                       Rpg_AimAnims[ 0x04 ];                             		// 0x0A54 ( 0x0010 ) 
	struct FName                                       Rpg_AimAnims_Cr[ 0x04 ];                          		// 0x0A64 ( 0x0010 ) 
	struct FName                                       Rpg_IdleCrouchAnim;                               		// 0x0A74 ( 0x0004 ) 
	struct FName                                       Rpg_IdleCrouchRest;                               		// 0x0A78 ( 0x0004 ) 
	struct FName                                       Rpg_CrouchMovementAnims[ 0x04 ];                  		// 0x0A7C ( 0x0010 ) 
	struct FName                                       Rpg_FireCrouchRifleRapidAnim;                     		// 0x0A8C ( 0x0004 ) 
	struct FName                                       Rpg_IdleProne;                                    		// 0x0A90 ( 0x0004 ) 
	struct FName                                       Rpg_ProneBurst;                                   		// 0x0A94 ( 0x0004 ) 
	struct FName                                       Rpg_ProneReload;                                  		// 0x0A98 ( 0x0004 ) 
	struct FName                                       Rpg_PronePutdown;                                 		// 0x0A9C ( 0x0004 ) 
	struct FName                                       Rpg_PronePutdownQuick;                            		// 0x0AA0 ( 0x0004 ) 
	struct FName                                       Rpg_ProneSelect;                                  		// 0x0AA4 ( 0x0004 ) 
	struct FName                                       Rpg_Prone_Standup_Anim;                           		// 0x0AA8 ( 0x0004 ) 
	struct FName                                       TurretIdle;                                       		// 0x0AAC ( 0x0004 ) 
	struct FName                                       TurretIdleUpDown;                                 		// 0x0AB0 ( 0x0004 ) 
	struct FName                                       TurretBurst;                                      		// 0x0AB4 ( 0x0004 ) 
	struct FName                                       ShotGun_BoltLeverAnim;                            		// 0x0AB8 ( 0x0004 ) 
	struct FName                                       ShotGun_Reload;                                   		// 0x0ABC ( 0x0004 ) 
	struct FName                                       ShotGun_Crouch_Pump;                              		// 0x0AC0 ( 0x0004 ) 
	struct FName                                       ShotGun_Crouch_Reload3;                           		// 0x0AC4 ( 0x0004 ) 
	struct FName                                       ShotGun_Prone_Pump;                               		// 0x0AC8 ( 0x0004 ) 
	struct FName                                       ShotGun_Prone_Reload3;                            		// 0x0ACC ( 0x0004 ) 
	struct FName                                       Hit_AR[ 0x04 ];                                   		// 0x0AD0 ( 0x0010 ) 
	struct FName                                       Hit_Head;                                         		// 0x0AE0 ( 0x0004 ) 
	struct FName                                       Hit_AR_Cr[ 0x04 ];                                		// 0x0AE4 ( 0x0010 ) 
	struct FName                                       Hit_Pr;                                           		// 0x0AF4 ( 0x0004 ) 
	struct FName                                       Death_F[ 0x03 ];                                  		// 0x0AF8 ( 0x000C ) 
	struct FName                                       Death_B[ 0x03 ];                                  		// 0x0B04 ( 0x000C ) 
	struct FName                                       Death_L[ 0x03 ];                                  		// 0x0B10 ( 0x000C ) 
	struct FName                                       Death_R[ 0x03 ];                                  		// 0x0B1C ( 0x000C ) 
	struct FName                                       Death_Head;                                       		// 0x0B28 ( 0x0004 ) 
	struct FName                                       Death_Cr_F[ 0x02 ];                               		// 0x0B2C ( 0x0008 ) 
	struct FName                                       Death_Cr_B[ 0x02 ];                               		// 0x0B34 ( 0x0008 ) 
	struct FName                                       Death_Cr_L[ 0x02 ];                               		// 0x0B3C ( 0x0008 ) 
	struct FName                                       Death_Cr_R[ 0x02 ];                               		// 0x0B44 ( 0x0008 ) 
	struct FName                                       Death_Cr_Head;                                    		// 0x0B4C ( 0x0004 ) 
	struct FName                                       Death_Pr;                                         		// 0x0B50 ( 0x0004 ) 
	struct FName                                       Death_Frag_F;                                     		// 0x0B54 ( 0x0004 ) 
	struct FName                                       Death_Frag_B;                                     		// 0x0B58 ( 0x0004 ) 
	struct FName                                       Death_Frag_L;                                     		// 0x0B5C ( 0x0004 ) 
	struct FName                                       Death_Frag_R;                                     		// 0x0B60 ( 0x0004 ) 
	struct FName                                       Bomb_Plant;                                       		// 0x0B64 ( 0x0004 ) 
	struct FName                                       Bomb_Defuse;                                      		// 0x0B68 ( 0x0004 ) 
	struct FName                                       Crouch_Bomb_Plant;                                		// 0x0B6C ( 0x0004 ) 
	struct FName                                       Crouch_Bomb_Defuse;                               		// 0x0B70 ( 0x0004 ) 
	struct FName                                       Prone_Bomb_Plant;                                 		// 0x0B74 ( 0x0004 ) 
	struct FName                                       Prone_Bomb_Defuse;                                		// 0x0B78 ( 0x0004 ) 
	struct FName                                       Bomb_Throw;                                       		// 0x0B7C ( 0x0004 ) 
	struct FName                                       DemoPack_Plant_PutDown_Anim;                      		// 0x0B80 ( 0x0004 ) 
	struct FName                                       DemoPack_Defuse_PutDown_Anim;                     		// 0x0B84 ( 0x0004 ) 
	struct FName                                       DemoPack_Plant_Crouch_PutDown_Anim;               		// 0x0B88 ( 0x0004 ) 
	struct FName                                       DemoPack_Defuse_Crouch_PutDown_Anim;              		// 0x0B8C ( 0x0004 ) 
	struct FName                                       DemoPack_Plant_Prone_PutDown_Anim;                		// 0x0B90 ( 0x0004 ) 
	struct FName                                       DemoPack_Defuse_Prone_PutDown_Anim;               		// 0x0B94 ( 0x0004 ) 
	struct FName                                       DemoPack_Throw_Anim;                              		// 0x0B98 ( 0x0004 ) 
	struct FName                                       DemoPack_Throw_Crouch_Anim;                       		// 0x0B9C ( 0x0004 ) 
	struct FName                                       DemoPack_Throw_Prone_Anim;                        		// 0x0BA0 ( 0x0004 ) 
	unsigned char                                      byThrowsWeapon;                                   		// 0x0BA4 ( 0x0001 ) 
	class UwMyPlayerStatus*                            wMyParam;                                         		// 0x0BA8 ( 0x0004 ) 
	class TArray< struct FName >                       TauntAnims;                                       		// 0x0BAC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     TauntAnimNames[ 0x10 ];                           		// 0x0BB8 ( 0x00C0 ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                FootRot;                                          		// 0x0C78 ( 0x0004 ) [ CPF_Const ]
	int                                                TurnDir;                                          		// 0x0C7C ( 0x0004 ) [ CPF_Const ]
	struct FName                                       MainRootBone;                                     		// 0x0C80 ( 0x0004 ) 
	struct FName                                       MainRotateBone;                                   		// 0x0C84 ( 0x0004 ) 
	struct FName                                       RootBone;                                         		// 0x0C88 ( 0x0004 ) 
	struct FName                                       HeadBone;                                         		// 0x0C8C ( 0x0004 ) 
	struct FName                                       SpineBone;                                        		// 0x0C90 ( 0x0004 ) 
	struct FName                                       SpineBone1;                                       		// 0x0C94 ( 0x0004 ) 
	struct FName                                       SpineBone2;                                       		// 0x0C98 ( 0x0004 ) 
	struct FName                                       PelvisBone;                                       		// 0x0C9C ( 0x0004 ) 
	struct FVector                                     vDiagonalRot;                                     		// 0x0CA0 ( 0x000C ) 
	float                                              fDiagonalBodyRot;                                 		// 0x0CAC ( 0x0004 ) 
	struct FVector                                     vFL_Rot;                                          		// 0x0CB0 ( 0x000C ) 
	struct FVector                                     vFR_Rot;                                          		// 0x0CBC ( 0x000C ) 
	struct FVector                                     vBL_Rot;                                          		// 0x0CC8 ( 0x000C ) 
	struct FVector                                     vBR_Rot;                                          		// 0x0CD4 ( 0x000C ) 
	struct FVector                                     vCFL_Rot;                                         		// 0x0CE0 ( 0x000C ) 
	struct FVector                                     vCFR_Rot;                                         		// 0x0CEC ( 0x000C ) 
	struct FVector                                     vCBL_Rot;                                         		// 0x0CF8 ( 0x000C ) 
	struct FVector                                     vCBR_Rot;                                         		// 0x0D04 ( 0x000C ) 
	float                                              fBodyFL_Rot;                                      		// 0x0D10 ( 0x0004 ) 
	float                                              fBodyFR_Rot;                                      		// 0x0D14 ( 0x0004 ) 
	float                                              fBodyBL_Rot;                                      		// 0x0D18 ( 0x0004 ) 
	float                                              fBodyBR_Rot;                                      		// 0x0D1C ( 0x0004 ) 
	float                                              ShieldStrength;                                   		// 0x0D20 ( 0x0004 ) [ CPF_Edit | CPF_Net | CPF_Transient ]
	struct FHitFXData                                  HitFx[ 0x08 ];                                    		// 0x0D24 ( 0x0140 ) [ CPF_Edit | CPF_Net ]
	int                                                HitFxTicker;                                      		// 0x0E64 ( 0x0004 ) [ CPF_Net | CPF_Transient ]
	struct FCompressedPosition                         PawnPosition;                                     		// 0x0E68 ( 0x0024 ) [ CPF_Net | CPF_Transient ]
	class AController*                                 DelayedDamageInstigatorController;                		// 0x0E8C ( 0x0004 ) 
	class AController*                                 LastHitBy;                                        		// 0x0E90 ( 0x0004 ) 
	float                                              MinFlySpeed;                                      		// 0x0E94 ( 0x0004 ) 
	float                                              MaxRotation;                                      		// 0x0E98 ( 0x0004 ) 
	unsigned long                                      bReloading:1;                                     		// 0x0E9C ( 0x0004 )  [0x00000001]
	unsigned long                                      bWasReloading:1;                                  		// 0x0E9C ( 0x0004 )  [0x00000002][ CPF_Net ]
	unsigned long                                      bMeleeAttacking:1;                                		// 0x0E9C ( 0x0004 )  [0x00000004]
	unsigned long                                      bWaitingPreAnim:1;                                		// 0x0E9C ( 0x0004 )  [0x00000008][ CPF_Net ]
	unsigned char                                      TypeOfWeapon;                                     		// 0x0EA0 ( 0x0001 ) [ CPF_Net ]
	float                                              DriverCurrentFrame;                               		// 0x0EA4 ( 0x0004 ) [ CPF_Net ]
	float                                              DriverUpDownFrame;                                		// 0x0EA8 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bIsTurreting:1;                                   		// 0x0EAC ( 0x0004 )  [0x00000001][ CPF_Net ]
	struct FString                                     LoginName;                                        		// 0x0EB0 ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]
	int                                                IDNum;                                            		// 0x0EBC ( 0x0004 ) [ CPF_Net ]
	int                                                iSoundChannel_SuffEff;                            		// 0x0EC0 ( 0x0004 ) 
	float                                              fTimer_SuffEff;                                   		// 0x0EC4 ( 0x0004 ) 
	float                                              fLastFireNoiseTime;                               		// 0x0EC8 ( 0x0004 ) 
	struct FVector                                     vFormerFireNoisePos;                              		// 0x0ECC ( 0x000C ) 
	struct FVector                                     vLastFireNoisePos;                                		// 0x0ED8 ( 0x000C ) 
	float                                              FireNoiseDistance;                                		// 0x0EE4 ( 0x0004 ) 
	float                                              fLastRadioMessageTime;                            		// 0x0EE8 ( 0x0004 ) 
	struct FVector                                     vFormerRadioMessagePos;                           		// 0x0EEC ( 0x000C ) 
	struct FVector                                     vLastRadioMessagePos;                             		// 0x0EF8 ( 0x000C ) 
	float                                              RadioMessageDistance;                             		// 0x0F04 ( 0x0004 ) 
	float                                              UAVScannedTime;                                   		// 0x0F08 ( 0x0004 ) 
	struct FVector                                     UAVLastScannedPos;                                		// 0x0F0C ( 0x000C ) 
	struct FVector                                     LastKnownPos;                                     		// 0x0F18 ( 0x000C ) 
	float                                              LastKnownTime;                                    		// 0x0F24 ( 0x0004 ) 
	class AwWeaponPickup*                              kPendingWPick;                                    		// 0x0F28 ( 0x0004 ) [ CPF_Net ]
	float                                              LastDamageDealtTime;                              		// 0x0F2C ( 0x0004 ) [ CPF_Net ]
	int                                                LastDamageCollisionPart;                          		// 0x0F30 ( 0x0004 ) [ CPF_Net ]
	float                                              LastDamageReceiveTime;                            		// 0x0F34 ( 0x0004 ) 
	int                                                TeamIndex;                                        		// 0x0F38 ( 0x0004 ) [ CPF_Net ]
	float                                              DealDamageRatio_Default;                          		// 0x0F3C ( 0x0004 ) 
	float                                              DealDamageRatio_Explosive;                        		// 0x0F40 ( 0x0004 ) 
	float                                              DealDamageRatio_Melee;                            		// 0x0F44 ( 0x0004 ) 
	struct FVector                                     RespawnLocation;                                  		// 0x0F48 ( 0x000C ) 
	unsigned long                                      bInvulnerableOnRespawn:1;                         		// 0x0F54 ( 0x0004 )  [0x00000001]
	float                                              fRespawnInvulnerableTime;                         		// 0x0F58 ( 0x0004 ) 
	float                                              fRespawnInvulnerableTime_SDMode;                  		// 0x0F5C ( 0x0004 ) 
	float                                              fRespawnInvulnerableTimeBeginner;                 		// 0x0F60 ( 0x0004 ) 
	class TArray< struct FsStartWeaponInfo >           arStartWeaponInfo;                                		// 0x0F64 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              fReduceVelRate;                                   		// 0x0F70 ( 0x0004 ) 
	float                                              fSequenceAnimRate;                                		// 0x0F74 ( 0x0004 ) 
	unsigned long                                      bCanQuickReload:1;                                		// 0x0F78 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bCanQuickWeaponChange:1;                          		// 0x0F78 ( 0x0004 )  [0x00000002][ CPF_Net ]
	struct FVector                                     AttackerLoc;                                      		// 0x0F7C ( 0x000C ) [ CPF_Net ]
	float                                              TweenRate_Proned_Run;                             		// 0x0F88 ( 0x0004 ) 
	float                                              TweenRate_Crouched_Run;                           		// 0x0F8C ( 0x0004 ) 
	float                                              TweenRate_Sprint;                                 		// 0x0F90 ( 0x0004 ) 
	float                                              TweenRate_Run;                                    		// 0x0F94 ( 0x0004 ) 
	float                                              TweenRate_Aim_Run;                                		// 0x0F98 ( 0x0004 ) 
	float                                              TweenRate_Idle;                                   		// 0x0F9C ( 0x0004 ) 
	float                                              TweenRate_SideStep;                               		// 0x0FA0 ( 0x0004 ) 
	float                                              TweenRate_Proned_Idle;                            		// 0x0FA4 ( 0x0004 ) 
	float                                              TweenRate_Crouched_Idle;                          		// 0x0FA8 ( 0x0004 ) 
	struct FScriptDelegate                             __OnReachedDestination__Delegate;                 		// 0x0FAC ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 float                     GetBaseStaminaTime (  );                          		//  Engine.Pawn.GetBaseStaminaTime
	 void                      execSet1stFov ( float f );                        		// [ FUNC_Exec ] Engine.Pawn.Set1stFov
	 void                      SetInfiniteAmmoTutorial ( bool bDeleteGranade, int iGranadeCount );		//  Engine.Pawn.SetInfiniteAmmoTutorial
	 bool                      CanQuickWeaponChange (  );                        		//  Engine.Pawn.CanQuickWeaponChange
	 void                      SetRemoveWeaponSkill ( class AwWeapon* W );       		//  Engine.Pawn.SetRemoveWeaponSkill
	 void                      SetWeaponQuickChange ( bool bOn );                		//  Engine.Pawn.SetWeaponQuickChange
	 void                      SetWeaponQuickReload ( bool bOn );                		//  Engine.Pawn.SetWeaponQuickReload
	 void                      SetWeaponQuickAimZoom ( bool bOn );               		//  Engine.Pawn.SetWeaponQuickAimZoom
	 void                      AddWeaponMagazine (  );                           		//  Engine.Pawn.AddWeaponMagazine
	 bool                      IsEnableBombSetting (  );                         		// [ FUNC_Simulated ] Engine.Pawn.IsEnableBombSetting
	 void                      GetWeaponAttachmentInfo ( unsigned char* byFlashCount, unsigned char* byFiringMode );		// [ FUNC_Simulated ] Engine.Pawn.GetWeaponAttachmentInfo
	 void                      QuickTurn (  );                                   		// [ FUNC_Simulated ] Engine.Pawn.QuickTurn
	 void                      SetDesiredRotationCheck ( bool Yaw, bool Pitch, bool Roll );		//  Engine.Pawn.SetDesiredRotationCheck
	 void                      ServerRefreshCollisionHash (  );                  		//  Engine.Pawn.ServerRefreshCollisionHash
	 class AwWeapon*           AddWeapon ( struct FBtrDouble iUniqueID, int iWeaponID, int iAddPartsID, bool bPickupChange, int iPainting_Item_ID );		//  Engine.Pawn.AddWeapon
	 void                      AddWeaponFromSkill ( struct FBtrDouble iUniqueID, int iWeaponID );		//  Engine.Pawn.AddWeaponFromSkill
	 void                      ServerAddWeapon ( struct FBtrDouble iUniqueID, int iWeaponID );		//  Engine.Pawn.ServerAddWeapon
	 void                      UAVScan (  );                                     		// [ FUNC_Simulated ] Engine.Pawn.UAVScan
	 int                       GetCurHealth (  );                                		// [ FUNC_Simulated ] Engine.Pawn.GetCurHealth
	 float                     GetMaxHealth (  );                                		// [ FUNC_Simulated ] Engine.Pawn.GetMaxHealth
	 void                      eventUpdateLastKnownPosAndTime ( struct FVector loc, float Time );		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.UpdateLastKnownPosAndTime
	 void                      CalcRadioMessageTime (  );                        		// [ FUNC_Simulated ] Engine.Pawn.CalcRadioMessageTime
	 void                      MakeRadioMessage (  );                            		// [ FUNC_Simulated ] Engine.Pawn.MakeRadioMessage
	 void                      eventCalcFireNoiseTime (  );                      		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.CalcFireNoiseTime
	 void                      MakeFireNoise (  );                               		// [ FUNC_Simulated ] Engine.Pawn.MakeFireNoise
	 void                      SetEaxEffect ( class UI3DL2Listener* EAXEffect, float fTime );		// [ FUNC_Simulated ] Engine.Pawn.SetEaxEffect
	 void                      eventTick ( float Delta );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.Tick
	 void                      ServerSetTypeOfWeapon ( unsigned char ty );       		// [ FUNC_Simulated ] Engine.Pawn.ServerSetTypeOfWeapon
	 void                      ClientSetWaitingPreAnimMode ( bool bWaiting );    		//  Engine.Pawn.ClientSetWaitingPreAnimMode
	 void                      ServerSetWaitingPreAnimMode ( bool bWaiting );    		// [ FUNC_Simulated ] Engine.Pawn.ServerSetWaitingPreAnimMode
	 void                      ClientSetWasReloadMode ( bool bReload );          		//  Engine.Pawn.ClientSetWasReloadMode
	 void                      ServerSetWasReloadMode ( bool bReload );          		// [ FUNC_Simulated ] Engine.Pawn.ServerSetWasReloadMode
	 void                      ClientSetReloadMode ( bool bReload );             		//  Engine.Pawn.ClientSetReloadMode
	 void                      ServerSetReloadMode ( bool bReload );             		// [ FUNC_Simulated ] Engine.Pawn.ServerSetReloadMode
	 void                      ClientSetTurretingMode ( bool bTurret );          		//  Engine.Pawn.ClientSetTurretingMode
	 void                      ServerSetTurretingMode ( bool bTurret );          		// [ FUNC_Simulated ] Engine.Pawn.ServerSetTurretingMode
	 void                      eventSetTurretIdleAnimFrame ( float frame, float UpDownFrame );		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.SetTurretIdleAnimFrame
	 void                      eventPlayTurretIdleAnim ( bool UpDown );          		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.PlayTurretIdleAnim
	 void                      SetDriverFrame ( float frame, float UpDownFrame );		// [ FUNC_Simulated ] Engine.Pawn.SetDriverFrame
	 void                      SetAimModeValueOnly ( bool bToggle );             		// [ FUNC_Simulated ] Engine.Pawn.SetAimModeValueOnly
	 void                      SetAimMode ( bool bToggle );                      		// [ FUNC_Simulated ] Engine.Pawn.SetAimMode
	 struct FVector            GetTargetLocation (  );                           		// [ FUNC_Simulated ] Engine.Pawn.GetTargetLocation
	 float                     RangedAttackTime (  );                            		//  Engine.Pawn.RangedAttackTime
	 bool                      CheatFly (  );                                    		//  Engine.Pawn.CheatFly
	 bool                      CheatGhost (  );                                  		//  Engine.Pawn.CheatGhost
	 bool                      CheatWalk (  );                                   		//  Engine.Pawn.CheatWalk
	 void                      Suicide (  );                                     		//  Engine.Pawn.Suicide
	 void                      RawInput ( float DeltaTime, float aBaseX, float aBaseY, float aBaseZ, float aMouseX, float aMouseY, float aForward, float aTurn, float aStrafe, float aUp, float aLookUp );		// [ FUNC_Simulated ] Engine.Pawn.RawInput
	 void                      IncrementSpree (  );                              		//  Engine.Pawn.IncrementSpree
	 int                       GetSpree (  );                                    		//  Engine.Pawn.GetSpree
	 class AVehicle*           GetVehicleBase (  );                              		//  Engine.Pawn.GetVehicleBase
	 void                      PlayVictoryAnimation (  );                        		//  Engine.Pawn.PlayVictoryAnimation
	 void                      eventPlayLandingAnimation ( float impactVel );    		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.PlayLandingAnimation
	 void                      PlayLanded ( float impactVel );                   		//  Engine.Pawn.PlayLanded
	 void                      eventCheckProneAni ( bool bGoProne );             		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.CheckProneAni
	 void                      PlayRechamber (  );                               		// [ FUNC_Simulated ] Engine.Pawn.PlayRechamber
	 void                      PlayReload (  );                                  		// [ FUNC_Simulated ] Engine.Pawn.PlayReload
	 void                      PlayWaiting (  );                                 		// [ FUNC_Simulated ] Engine.Pawn.PlayWaiting
	 void                      PlayMoving (  );                                  		// [ FUNC_Simulated ] Engine.Pawn.PlayMoving
	 void                      eventPlayFalling (  );                            		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.PlayFalling
	 void                      eventPlayJump (  );                               		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.PlayJump
	 bool                      CannotJumpNow (  );                               		//  Engine.Pawn.CannotJumpNow
	 void                      eventAnimEnd ( int Channel );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.AnimEnd
	 void                      eventChangeAnimation (  );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.ChangeAnimation
	 void                      PlayTakeHit ( struct FVector HitLoc, int Damage, class UClass* DamageType );		//  Engine.Pawn.PlayTakeHit
	 void                      eventStopPlayFiring (  );                         		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.StopPlayFiring
	 void                      ServerThrowsWeaponAnim ( bool bQuick );           		// [ FUNC_Simulated ] Engine.Pawn.ServerThrowsWeaponAnim
	 void                      ServerPlayPutdownWeaponAnim ( bool bQuick );      		// [ FUNC_Simulated ] Engine.Pawn.ServerPlayPutdownWeaponAnim
	 void                      PlayWeaponSwitch ( class AwWeapon* newWeapon );   		//  Engine.Pawn.PlayWeaponSwitch
	 void                      PlayFiring ( float Rate, struct FName FiringMode );		// [ FUNC_Simulated ] Engine.Pawn.PlayFiring
	 void                      eventPlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart );		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.PlayDying
	 void                      eventSetAnimAction ( struct FName NewAction );    		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.SetAnimAction
	 void                      ServerSetAnimAction ( struct FName NewAction );   		//  Engine.Pawn.ServerSetAnimAction
	 bool                      IsInLoadout ( class UClass* InventoryClass );     		//  Engine.Pawn.IsInLoadout
	 void                      TurnOff (  );                                     		// [ FUNC_Simulated ] Engine.Pawn.TurnOff
	 void                      ChunkUp ( struct FRotator HitRotation, float ChunkPerterbation );		// [ FUNC_Simulated ] Engine.Pawn.ChunkUp
	 void                      PlayHit ( float Damage, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  Engine.Pawn.PlayHit
	 void                      PlayDyingSound (  );                              		//  Engine.Pawn.PlayDyingSound
	 void                      PlayMoverHitSound (  );                           		//  Engine.Pawn.PlayMoverHitSound
	 bool                      DoJump ( bool bUpdating );                        		//  Engine.Pawn.DoJump
	 bool                      Dodge ( unsigned char DoubleClickMove );          		//  Engine.Pawn.Dodge
	 void                      ProcessMove ( float DeltaTime, struct FVector NewAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );		//  Engine.Pawn.ProcessMove
	 void                      UpdateRocketAcceleration ( float DeltaTime, float YawChange, float PitchChange );		//  Engine.Pawn.UpdateRocketAcceleration
	 bool                      CanMultiJump (  );                                		//  Engine.Pawn.CanMultiJump
	 bool                      CanDoubleJump (  );                               		//  Engine.Pawn.CanDoubleJump
	 void                      DoDoubleJump ( bool bUpdating );                  		//  Engine.Pawn.DoDoubleJump
	 bool                      CheckWaterJump ( struct FVector* WallNormal );    		//  Engine.Pawn.CheckWaterJump
	 void                      TakeDrowningDamage (  );                          		//  Engine.Pawn.TakeDrowningDamage
	 void                      eventBreathTimer (  );                            		// [ FUNC_Event ] Engine.Pawn.BreathTimer
	 bool                      IsInPain (  );                                    		//  Engine.Pawn.IsInPain
	 bool                      TouchingWaterVolume (  );                         		//  Engine.Pawn.TouchingWaterVolume
	 void                      eventHeadVolumeChange ( class APhysicsVolume* newHeadVolume );		// [ FUNC_Event ] Engine.Pawn.HeadVolumeChange
	 void                      eventLanded ( struct FVector HitNormal );         		// [ FUNC_Event ] Engine.Pawn.Landed
	 void                      eventPlayLandedSound ( int SurfType );            		// [ FUNC_Event ] Engine.Pawn.PlayLandedSound
	 void                      eventHitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial );		// [ FUNC_Event ] Engine.Pawn.HitWall
	 void                      eventFalling (  );                                		// [ FUNC_Event ] Engine.Pawn.Falling
	 void                      RemovePowerups (  );                              		//  Engine.Pawn.RemovePowerups
	 void                      Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.Pawn.Died
	 void                      CalcItemUsedTime ( class UwMatchUserInfo* kUser );		//  Engine.Pawn.CalcItemUsedTime
	 void                      CalcItemUsedTimeSelf (  );                        		//  Engine.Pawn.CalcItemUsedTimeSelf
	 class AController*        GetKillerController (  );                         		//  Engine.Pawn.GetKillerController
	 class ATeamInfo*          GetTeam (  );                                     		//  Engine.Pawn.GetTeam
	 int                       GetTeamNum (  );                                  		// [ FUNC_Simulated | FUNC_Native ] Engine.Pawn.GetTeamNum
	 void                      SetDelayedDamageInstigatorController ( class AController* C );		//  Engine.Pawn.SetDelayedDamageInstigatorController
	 class TArray< class AController* > GetAssistList ( class APawn* Killer );            		//  Engine.Pawn.GetAssistList
	 int                       GetAssistScore ( int UID );                       		//  Engine.Pawn.GetAssistScore
	 void                      AddDamageInfo ( class APawn* instigatedBy, int Damage, class UClass* DamageType );		//  Engine.Pawn.AddDamageInfo
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.Pawn.TakeDamage
	 class AController*        GetDamagedByKiller ( class UClass* DamageType, class APawn* instigatedBy );		//  Engine.Pawn.GetDamagedByKiller
	 void                      ApplyDealDamageRatio ( class APawn* instigatedBy, class UClass* DamageType, int WeaponType, int* ActualDamage );		//  Engine.Pawn.ApplyDealDamageRatio
	 class AController*        GetDelayedInstigatorController ( class APawn* instigatedBy );		//  Engine.Pawn.GetDelayedInstigatorController
	 void                      TakeDamageSound ( int LeftHealth, int ActualDamage, struct FVector HitLocation, class UClass* DamageType, int CollisionPart, int WeaponType, class AController* Killer );		//  Engine.Pawn.TakeDamageSound
	 void                      TakeHeadRoundBullet ( struct FVector HitLocation, int WeaponType );		//  Engine.Pawn.TakeHeadRoundBullet
	 int                       ShieldAbsorb ( int Damage );                      		//  Engine.Pawn.ShieldAbsorb
	 bool                      HasUDamage (  );                                  		//  Engine.Pawn.HasUDamage
	 bool                      GiveHealth ( int HealAmount, int HealMax );       		//  Engine.Pawn.GiveHealth
	 void                      SetMovementPhysics (  );                          		//  Engine.Pawn.SetMovementPhysics
	 void                      Gasp (  );                                        		//  Engine.Pawn.Gasp
	 void                      SetMesh (  );                                     		// [ FUNC_Simulated ] Engine.Pawn.SetMesh
	 void                      eventSetShadowLight ( struct FVector vLightDir ); 		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.SetShadowLight
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.PostNetBeginPlay
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.Pawn.PostBeginPlay
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.Pawn.PreBeginPlay
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.Destroyed
	 struct FVector            EyePosition (  );                                 		// [ FUNC_Simulated ] Engine.Pawn.EyePosition
	 void                      UpdateEyeHeightScript ( float DeltaTime );        		//  Engine.Pawn.UpdateEyeHeightScript
	 void                      eventUpdateEyeHeight ( float DeltaTime );         		// [ FUNC_Event ] Engine.Pawn.UpdateEyeHeight
	 void                      UpdateEyeHeightNative ( float DeltaTime );        		// [ FUNC_Native ] Engine.Pawn.UpdateEyeHeightNative
	 void                      eventBaseChange (  );                             		// [ FUNC_Event ] Engine.Pawn.BaseChange
	 void                      JumpOffPawn (  );                                 		//  Engine.Pawn.JumpOffPawn
	 void                      gibbedBy ( class AActor* Other );                 		//  Engine.Pawn.gibbedBy
	 void                      eventEncroachedBy ( class AActor* Other );        		// [ FUNC_Event ] Engine.Pawn.EncroachedBy
	 bool                      eventEncroachingOn ( class AActor* Other );       		// [ FUNC_Event ] Engine.Pawn.EncroachingOn
	 bool                      IsHeadShot ( struct FVector loc, struct FVector ray, float AdditionalScale );		//  Engine.Pawn.IsHeadShot
	 void                      ServerChangedWeapon ( class AwWeapon* OldWeapon, class AwWeapon* newWeapon );		//  Engine.Pawn.ServerChangedWeapon
	 struct FName              GetWeaponBoneFor ( class AInventory* i );         		//  Engine.Pawn.GetWeaponBoneFor
	 struct FName              GetOffhandBoneFor ( class AInventory* i );        		//  Engine.Pawn.GetOffhandBoneFor
	 void                      ChangedWeapon (  );                               		// [ FUNC_Simulated ] Engine.Pawn.ChangedWeapon
	 void                      ClientForceChangedWeapon ( class AwWeapon* newWeapon );		// [ FUNC_Simulated ] Engine.Pawn.ClientForceChangedWeapon
	 void                      DeleteInventory ( class AInventory* Item );       		//  Engine.Pawn.DeleteInventory
	 void                      DeleteInventoryFromStorage ( class AInventory* Item );		//  Engine.Pawn.DeleteInventoryFromStorage
	 void                      DeleteInventoriesFromStorage (  );                		//  Engine.Pawn.DeleteInventoriesFromStorage
	 bool                      AddInventory ( class AInventory* NewItem );       		//  Engine.Pawn.AddInventory
	 class AInventory*         FindInventoryType ( class UClass* DesiredClass ); 		//  Engine.Pawn.FindInventoryType
	 void                      execNextItem (  );                                		// [ FUNC_Exec ] Engine.Pawn.NextItem
	 void                      ServerNoTranslocator (  );                        		//  Engine.Pawn.ServerNoTranslocator
	 void                      SwitchWeaponWClass ( struct FName ClassName, struct FString sReason );		// [ FUNC_Simulated ] Engine.Pawn.SwitchWeaponWClass
	 bool                      SwitchWeaponByWeaponItem ( class AwWeapon* wSwitchWeapon, bool bQuickGr );		// [ FUNC_Simulated ] Engine.Pawn.SwitchWeaponByWeaponItem
	 bool                      SwitchWeapon ( unsigned char f, bool bQuickGr );  		// [ FUNC_Simulated ] Engine.Pawn.SwitchWeapon
	 void                      SelectPrevWeapon (  );                            		// [ FUNC_Simulated ] Engine.Pawn.SelectPrevWeapon
	 void                      NextWeapon (  );                                  		// [ FUNC_Simulated ] Engine.Pawn.NextWeapon
	 void                      PrevWeapon (  );                                  		// [ FUNC_Simulated ] Engine.Pawn.PrevWeapon
	 void                      SwitchToLastWeapon_ThrowsWeapon (  );             		// [ FUNC_Simulated ] Engine.Pawn.SwitchToLastWeapon_ThrowsWeapon
	 void                      execSwitchToLastWeapon (  );                      		// [ FUNC_Exec ] Engine.Pawn.SwitchToLastWeapon
	 void                      ClientPickupWeapon (  );                          		// [ FUNC_Simulated ] Engine.Pawn.ClientPickupWeapon
	 void                      ServerPickupWeapon (  );                          		//  Engine.Pawn.ServerPickupWeapon
	 void                      CheckEntryVehicle (  );                           		//  Engine.Pawn.CheckEntryVehicle
	 void                      CheckTouchWeaponPickup (  );                      		//  Engine.Pawn.CheckTouchWeaponPickup
	 void                      TossWeapon ( struct FVector TossVel );            		//  Engine.Pawn.TossWeapon
	 bool                      CanThrowWeapon (  );                              		// [ FUNC_Simulated ] Engine.Pawn.CanThrowWeapon
	 int                       CanUseShield ( int Amount );                      		//  Engine.Pawn.CanUseShield
	 bool                      AddShieldStrength ( int Amount );                 		//  Engine.Pawn.AddShieldStrength
	 float                     GetShieldStrength (  );                           		//  Engine.Pawn.GetShieldStrength
	 float                     GetShieldStrengthMax (  );                        		//  Engine.Pawn.GetShieldStrengthMax
	 void                      DisableUDamage (  );                              		//  Engine.Pawn.DisableUDamage
	 void                      EnableUDamage ( float Amount );                   		//  Engine.Pawn.EnableUDamage
	 bool                      InCurrentCombo (  );                              		//  Engine.Pawn.InCurrentCombo
	 void                      DoComboName ( struct FString ComboClassName );    		//  Engine.Pawn.DoComboName
	 void                      ClientDying ( class UClass* DamageType, struct FVector HitLocation );		//  Engine.Pawn.ClientDying
	 int                       LimitPitch ( int Pitch );                         		//  Engine.Pawn.LimitPitch
	 void                      FaceRotation ( struct FRotator NewRotation, float DeltaTime );		// [ FUNC_Simulated ] Engine.Pawn.FaceRotation
	 void                      ClientSetRotation ( struct FRotator NewRotation );		//  Engine.Pawn.ClientSetRotation
	 void                      ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );		//  Engine.Pawn.ClientSetLocation
	 void                      ClientReStart (  );                               		//  Engine.Pawn.ClientReStart
	 void                      TakeFallingDamage (  );                           		//  Engine.Pawn.TakeFallingDamage
	 void                      KilledBy ( class APawn* EventInstigator );        		//  Engine.Pawn.KilledBy
	 void                      AddVelocity ( struct FVector NewVelocity );       		//  Engine.Pawn.AddVelocity
	 void                      RestartPlayer (  );                               		//  Engine.Pawn.RestartPlayer
	 void                      eventStartProne ( float HeightAdjust );           		// [ FUNC_Event ] Engine.Pawn.StartProne
	 void                      eventEndProne ( float HeightAdjust );             		// [ FUNC_Event ] Engine.Pawn.EndProne
	 void                      eventStartCrouch ( float HeightAdjust );          		// [ FUNC_Event ] Engine.Pawn.StartCrouch
	 void                      eventEndCrouch ( float HeightAdjust );            		// [ FUNC_Event ] Engine.Pawn.EndCrouch
	 void                      ServerSetUseKeyState ( unsigned char byKey );     		// [ FUNC_Simulated ] Engine.Pawn.ServerSetUseKeyState
	 void                      ShouldProne ( bool Prone );                       		//  Engine.Pawn.ShouldProne
	 void                      ShouldCrouch ( bool crouch );                     		//  Engine.Pawn.ShouldCrouch
	 void                      eventFellOutOfWorld ( unsigned char KillType );   		// [ FUNC_Event ] Engine.Pawn.FellOutOfWorld
	 void                      eventModifyVelocity ( float DeltaTime, struct FVector OldVelocity );		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.ModifyVelocity
	 void                      JumpOutOfWater ( struct FVector jumpDir );        		//  Engine.Pawn.JumpOutOfWater
	 void                      FinishedInterpolation (  );                       		//  Engine.Pawn.FinishedInterpolation
	 void                      SetDefaultDisplayProperties (  );                 		//  Engine.Pawn.SetDefaultDisplayProperties
	 void                      SetDisplayProperties ( unsigned char NewStyle, class UMaterial* NewTexture, bool bLighting );		//  Engine.Pawn.SetDisplayProperties
	 void                      GiveWeapon ( struct FString aClassName );         		//  Engine.Pawn.GiveWeapon
	 class AInventory*         CreateInventory ( struct FString InventoryClassName );		//  Engine.Pawn.CreateInventory
	 bool                      CanTrigger ( class ATrigger* t );                 		//  Engine.Pawn.CanTrigger
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.Pawn.Trigger
	 void                      eventClientMessage ( struct FString S, struct FName Type );		// [ FUNC_Event ] Engine.Pawn.ClientMessage
	 void                      ReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.Pawn.ReceiveLocalizedMessage
	 void                      HandlePickup ( class APickup* pick );             		//  Engine.Pawn.HandlePickup
	 float                     AdjustedStrength (  );                            		//  Engine.Pawn.AdjustedStrength
	 class AActor*             ShootSpecial ( class AActor* A );                 		//  Engine.Pawn.ShootSpecial
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		// [ FUNC_Final | FUNC_Simulated ] Engine.Pawn.AdjustAim
	 bool                      LineOfSightTo ( class AActor* Other );            		//  Engine.Pawn.LineOfSightTo
	 void                      SetMoveTarget ( class AActor* NewTarget );        		//  Engine.Pawn.SetMoveTarget
	 class AActor*             GetMoveTarget (  );                               		//  Engine.Pawn.GetMoveTarget
	 bool                      PressingAltFire (  );                             		// [ FUNC_Final | FUNC_Simulated ] Engine.Pawn.PressingAltFire
	 bool                      PressingFire (  );                                		// [ FUNC_Final | FUNC_Simulated ] Engine.Pawn.PressingFire
	 bool                      NearMoveTarget (  );                              		//  Engine.Pawn.NearMoveTarget
	 bool                      InGodMode (  );                                   		// [ FUNC_Final ] Engine.Pawn.InGodMode
	 void                      SetViewRotation ( struct FRotator NewRotation );  		// [ FUNC_Simulated ] Engine.Pawn.SetViewRotation
	 struct FRotator           GetViewRotationForFP (  );                        		// [ FUNC_Simulated ] Engine.Pawn.GetViewRotationForFP
	 struct FRotator           GetViewRotation (  );                             		// [ FUNC_Simulated ] Engine.Pawn.GetViewRotation
	 bool                      IsLocalPlayerViewtarget (  );                     		// [ FUNC_Simulated ] Engine.Pawn.IsLocalPlayerViewtarget
	 bool                      IsFirstPerson (  );                               		// [ FUNC_Simulated ] Engine.Pawn.IsFirstPerson
//	 bool                      IsLocallyControlled (  );                         		// [ FUNC_Simulated ] Engine.Pawn.IsLocallyControlled
//	 bool                      IsHumanControlled (  );                           		// [ FUNC_Simulated ] Engine.Pawn.IsHumanControlled
	 bool                      WasPlayerPawn (  );                               		// [ FUNC_Simulated ] Engine.Pawn.WasPlayerPawn
	 bool                      IsPlayerPawn (  );                                		// [ FUNC_Simulated ] Engine.Pawn.IsPlayerPawn
	 bool                      CheckTauntValid ( struct FName Sequence );        		// [ FUNC_Simulated ] Engine.Pawn.CheckTauntValid
	 bool                      FindValidTaunt ( struct FName* Sequence );        		// [ FUNC_Simulated ] Engine.Pawn.FindValidTaunt
	 void                      eventStopDriving ( class AVehicle* V );           		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.StopDriving
	 void                      eventStartDriving ( class AVehicle* V );          		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.StartDriving
	 void                      ForceStandup (  );                                		// [ FUNC_Simulated | FUNC_Native ] Engine.Pawn.ForceStandup
	 void                      InitialPlayer (  );                               		// [ FUNC_Simulated ] Engine.Pawn.InitialPlayer
	 void                      CheckBob ( float DeltaTime, struct FVector Y );   		//  Engine.Pawn.CheckBob
	 void                      GetBobParam ( float* Bob, float* BobCamera, float* fBobZ, float* fBobCameraZ );		//  Engine.Pawn.GetBobParam
//	 float                     GetMaxSpeed (  );                                 		//  Engine.Pawn.GetMaxSpeed
	 struct FVector            WeaponBob ( float BobDamping );                   		// [ FUNC_Simulated ] Engine.Pawn.WeaponBob
	 struct FVector            ModifiedPlayerViewOffset ( class AInventory* Inv );		// [ FUNC_Simulated ] Engine.Pawn.ModifiedPlayerViewOffset
	 struct FVector            CameraShake (  );                                 		// [ FUNC_Simulated ] Engine.Pawn.CameraShake
	 struct FVector            CalcFPSpectatorDrawOffset ( struct FVector VOffset, struct FRotator rRotation, struct FVector vBobOffset );		// [ FUNC_Simulated ] Engine.Pawn.CalcFPSpectatorDrawOffset
	 struct FVector            CalcDrawOffset ( class AInventory* Inv );         		// [ FUNC_Simulated ] Engine.Pawn.CalcDrawOffset
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.Pawn.DisplayDebug
	 void                      ClimbLadder ( class ALadderVolume* L );           		//  Engine.Pawn.ClimbLadder
	 void                      EndClimbLadder ( class ALadderVolume* OldLadder );		//  Engine.Pawn.EndClimbLadder
	 bool                      CanSplash (  );                                   		// [ FUNC_Simulated ] Engine.Pawn.CanSplash
	 void                      eventSetSprinting ( bool bNewIsSprinting );       		// [ FUNC_Event ] Engine.Pawn.SetSprinting
	 bool                      CanGrabLadder (  );                               		//  Engine.Pawn.CanGrabLadder
	 void                      DropToGround (  );                                		//  Engine.Pawn.DropToGround
	 void                      BecomeViewTarget (  );                            		//  Engine.Pawn.BecomeViewTarget
	 bool                      PointOfView (  );                                 		// [ FUNC_Simulated ] Engine.Pawn.PointOfView
	 void                      UnPossessed (  );                                 		//  Engine.Pawn.UnPossessed
	 void                      PossessedBy ( class AController* C );             		//  Engine.Pawn.PossessedBy
	 void                      ChangeInventoryByQSlot (  );                      		//  Engine.Pawn.ChangeInventoryByQSlot
	 void                      AddDefaultSkills ( bool bQuickslotChange );       		//  Engine.Pawn.AddDefaultSkills
	 void                      NotifyTeamChanged (  );                           		//  Engine.Pawn.NotifyTeamChanged
	 bool                      PerformDodge ( unsigned char DoubleClickMove, struct FVector Dir, struct FVector Cross );		//  Engine.Pawn.PerformDodge
	 void                      DropFlag ( struct FString sReason );              		//  Engine.Pawn.DropFlag
	 void                      HoldFlag ( class AActor* FlagActor );             		//  Engine.Pawn.HoldFlag
	 void                      PlayTeleportEffect ( bool bOut, bool bSound );    		//  Engine.Pawn.PlayTeleportEffect
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] Engine.Pawn.GetHumanReadableName
	 bool                      SpectatorSpecialCalcView ( class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		//  Engine.Pawn.SpectatorSpecialCalcView
	 bool                      SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		//  Engine.Pawn.SpecialCalcView
	 void                      SpecialDrawCrosshair ( class UCanvas* C );        		// [ FUNC_Simulated ] Engine.Pawn.SpecialDrawCrosshair
	 void                      DrawHUD ( class UCanvas* Canvas );                		//  Engine.Pawn.DrawHUD
	 float                     ModifyThreat ( float Current, class APawn* Threat );		//  Engine.Pawn.ModifyThreat
	 bool                      NeedToTurn ( struct FVector targ );               		//  Engine.Pawn.NeedToTurn
	 bool                      FireOnRelease (  );                               		//  Engine.Pawn.FireOnRelease
	 bool                      IsWeaponSingleFire (  );                          		//  Engine.Pawn.IsWeaponSingleFire
	 bool                      IsFiring (  );                                    		//  Engine.Pawn.IsFiring
	 float                     RefireRate (  );                                  		//  Engine.Pawn.RefireRate
	 bool                      TooCloseToAttack ( class AActor* Other );         		//  Engine.Pawn.TooCloseToAttack
	 bool                      CanAttack ( class AActor* Other );                		//  Engine.Pawn.CanAttack
	 bool                      RecommendLongRangedAttack (  );                   		//  Engine.Pawn.RecommendLongRangedAttack
	 void                      AltFire ( float f );                              		// [ FUNC_Simulated ] Engine.Pawn.AltFire
	 void                      Fire ( float f );                                 		// [ FUNC_Simulated ] Engine.Pawn.Fire
	 bool                      StopWeaponFiring (  );                            		//  Engine.Pawn.StopWeaponFiring
	 void                      ChooseFireAt ( class AActor* A );                 		//  Engine.Pawn.ChooseFireAt
	 class AwWeapon*           GetWeaponByInvenGroup ( int nInvenGroupID );      		//  Engine.Pawn.GetWeaponByInvenGroup
	 bool                      HasWeaponByWeaponID ( int weaponID );             		//  Engine.Pawn.HasWeaponByWeaponID
	 bool                      HasWeapon (  );                                   		//  Engine.Pawn.HasWeapon
	 void                      Reset (  );                                       		//  Engine.Pawn.Reset
	 void                      PlayerChangedTeam (  );                           		//  Engine.Pawn.PlayerChangedTeam
	 class AActor*             GetPathTo ( class AActor* Dest );                 		//  Engine.Pawn.GetPathTo
	 void                      DeactivateSpawnProtection (  );                   		//  Engine.Pawn.DeactivateSpawnProtection
	 class APawn*              GetAimTarget (  );                                		//  Engine.Pawn.GetAimTarget
	 bool                      GetIsFiring (  );                                 		// [ FUNC_Simulated ] Engine.Pawn.GetIsFiring
	 void                      SetBaseEyeheight (  );                            		// [ FUNC_Simulated ] Engine.Pawn.SetBaseEyeheight
	 class AwWeapon*           GetDemoRecordingWeapon (  );                      		// [ FUNC_Simulated ] Engine.Pawn.GetDemoRecordingWeapon
	 int                       GetPostureIndex (  );                             		//  Engine.Pawn.GetPostureIndex
	 void                      SpawnMedals (  );                                 		//  Engine.Pawn.SpawnMedals
	 int                       SpawnSupplyItem (  );                             		//  Engine.Pawn.SpawnSupplyItem
	 void                      MakeShellEffect_Rechamber (  );                   		// [ FUNC_Simulated ] Engine.Pawn.MakeShellEffect_Rechamber
	 void                      MakeShellEffect (  );                             		// [ FUNC_Simulated ] Engine.Pawn.MakeShellEffect
	 void                      ForcePlayIdle (  );                               		// [ FUNC_Native ] Engine.Pawn.ForcePlayIdle
	 bool                      CheckProneRotate ( int CurYaw, int NewYaw );      		// [ FUNC_Native ] Engine.Pawn.CheckProneRotate
	 void                      RefreshCollisionHash (  );                        		// [ FUNC_Native ] Engine.Pawn.RefreshCollisionHash
	 void                      ForceCrouch (  );                                 		// [ FUNC_Native ] Engine.Pawn.ForceCrouch
	 bool                      ReachedDestination ( class AActor* Goal );        		// [ FUNC_Native ] Engine.Pawn.ReachedDestination
	 void                      eventPostRender2D ( class UCanvas* C, float ScreenLocX, float ScreenLocY );		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.PostRender2D
	 struct FVector            GetDetailOffset ( struct FVector vLoc, struct FRotator rRot );		// [ FUNC_Simulated | FUNC_Native ] Engine.Pawn.GetDetailOffset
	 void                      AddNoWeaponChangeMessage ( unsigned char bySlot );		// [ FUNC_Simulated ] Engine.Pawn.AddNoWeaponChangeMessage
	 void                      eventSetHeadScale ( float NewScale );             		// [ FUNC_Simulated | FUNC_Event ] Engine.Pawn.SetHeadScale
	 bool                      GetIsEnableProne (  );                            		// [ FUNC_Simulated | FUNC_Native ] Engine.Pawn.GetIsEnableProne
//	 int                       Get4WayDirection (  );                            		// [ FUNC_Simulated | FUNC_Native ] Engine.Pawn.Get4WayDirection
//	 void                      SetTwistLook ( int twist, int look );             		// [ FUNC_Simulated | FUNC_Native ] Engine.Pawn.SetTwistLook
	 void                      SetViewPitch ( int NewPitch );                    		// [ FUNC_Simulated | FUNC_Native ] Engine.Pawn.SetViewPitch
	 void                      StaticPrecache ( class ALevelInfo* L );           		//  Engine.Pawn.StaticPrecache
	 void                      ServerStanceChanged ( unsigned char ss );         		//  Engine.Pawn.ServerStanceChanged
	 void                      eventServerSetPlayerScoreInfo ( int TeamIndex, int Kills, int Assists, int Deaths, int EXPs, int Points, int Scores );		// [ FUNC_Event ] Engine.Pawn.ServerSetPlayerScoreInfo
	 void                      eventClientSetPlayerScoreInfo (  );               		// [ FUNC_Event ] Engine.Pawn.ClientSetPlayerScoreInfo
	 void                      eventStorePlayerScoreInfo (  );                   		// [ FUNC_Event ] Engine.Pawn.StorePlayerScoreInfo
	 void                      eventServerSetWeaponInfo ( int WeaponClassNumber, int WeaponAddPartsID, int WeaponTotalAmmo, int WeaponCurrentAmmo );		// [ FUNC_Event ] Engine.Pawn.ServerSetWeaponInfo
	 void                      eventClientSetWeaponInfo (  );                    		// [ FUNC_Event ] Engine.Pawn.ClientSetWeaponInfo
	 void                      eventStoreWeaponInfo (  );                        		// [ FUNC_Event ] Engine.Pawn.StoreWeaponInfo
	 void                      PlayEquipHitSound (  );                           		// [ FUNC_Simulated ] Engine.Pawn.PlayEquipHitSound
	 void                      PlayBreathSounds (  );                            		// [ FUNC_Simulated ] Engine.Pawn.PlayBreathSounds
	 void                      PlayBreathSound (  );                             		// [ FUNC_Simulated ] Engine.Pawn.PlayBreathSound
	 void                      FootStepping ( int side );                        		// [ FUNC_Simulated ] Engine.Pawn.FootStepping
	 struct FString            CanSee (  );                                      		// [ FUNC_Native ] Engine.Pawn.CanSee
	 struct FString            IsNetReady (  );                                  		// [ FUNC_Native ] Engine.Pawn.IsNetReady
	 struct FString            CheckRelevantTimeOut (  );                        		// [ FUNC_Native ] Engine.Pawn.CheckRelevantTimeOut
	 struct FString            HasChannel (  );                                  		// [ FUNC_Native ] Engine.Pawn.HasChannel
	 void                      ServerStopLoopSoundByActor (  );                  		//  Engine.Pawn.ServerStopLoopSoundByActor
	 void                      ServerStopAllSoundByActor (  );                   		//  Engine.Pawn.ServerStopAllSoundByActor
	 void                      ServerPlaySound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		//  Engine.Pawn.ServerPlaySound
	 bool                      OnReachedDestination ( struct FVector Dir, class AActor* GoalActor );		//  Engine.Pawn.OnReachedDestination

	// Public Imports
	APawn(class APawn const &);
	APawn(void);
	class APawn &  operator=(class APawn const &);
	int  CacheNetRelevancy(int,class APlayerController *,class AActor *);
	int  CanCrouchWalk(class FVector const &,class FVector const &,class AActor *);
	class ANavigationPoint *  CheckDetour(class ANavigationPoint *,class ANavigationPoint *,int);
	class FVector  CheckForLedges(class FVector,class FVector,class FVector,int &,int &);
	int  CheckForProneEnable(void);
	class FVector  CheckForProneMove(class FVector,class FVector,class FVector);
	int  CheckForProneRotate(int,int);
	void  ClearSerpentine(void);
	void  Crouch(int);
	enum ETestMoveResult  FindBestJump(class FVector);
	enum ETestMoveResult  FindJumpUp(class FVector);
	class FVector  GetExpandedCylinderExtent(void)const ;
	float  GetMaxGroundSpeed(void);
	float  GetMaxSpeed(void);
	int  GetTeamNumNativeImp(void);
	enum ETestMoveResult  HitGoal(class AActor *);
	static void  InternalConstructor(void *);
	int  IsHumanControlled(void);
	int  IsLocallyControlled(void);
	int  IsPlayer(void);
	class FVector  NewFallVelocity(class FVector,class FVector,float);
	int  PickWallAdjust(class FVector,class AActor *);
	void  Prone(int);
	int  Reachable(class FVector,class AActor *);
	int  ReachedDestination(class FVector,class AActor *);
	void  SetAnchor(class ANavigationPoint *);
	void  StartNewSerpentine(class FVector,class FVector);
	static class UClass *  StaticClass(void);
	class FVector  SuggestJumpVelocity(class FVector,float,float);
	void  UnCrouch(int);
	void  UnProne(int);
	void  UpdateEyeHeightImp(float);
	void  UpdateMovementAnimation(float);
	int  ValidAnchor(void);
	void  ZeroMovementAlpha(int,int,float);
	class ANavigationPoint *  breadthPathTo(float (__cdecl*)(class ANavigationPoint *,class APawn *,float),class ANavigationPoint *,int,float *,int);
	int  calcMoveFlags(void);
	unsigned long  delegateOnReachedDestination(class FVector,class AActor *);
	float  findPathToward(class AActor *,class FVector,float (__cdecl*)(class ANavigationPoint *,class APawn *,float),float,int);
	enum ETestMoveResult  flyMove(class FVector,class AActor *,float);
	int  flyReachable(class FVector,int,class AActor *);
	enum ETestMoveResult  jumpLanding(class FVector,int);
	int  jumpReachable(class FVector,int,class AActor *);
	int  ladderReachable(class FVector,int,class AActor *);
	void  physHovering(float,int);
	void  physLadder(float,int);
	void  physSpider(float,int);
	void  physSwimming(float,int);
	void  startNewPhysics(float,int);
	void  startSwimming(class FVector,class FVector,float,float,int);
	enum ETestMoveResult  swimMove(class FVector,class AActor *,float);
	int  swimReachable(class FVector,int,class AActor *);
	enum ETestMoveResult  walkMove(class FVector,struct FCheckResult &,class AActor *,float);
	int  walkReachable(class FVector,int,class AActor *);

	// Private Imports
private:
	int  Get4WayDirection(void);
	int  Get5WayDirection(void);
	int  Get8WayDirection(void);
	float  GetRunSpeedAniRatio(unsigned char,unsigned char,int);
	int  Pick3DWallAdjust(class FVector,class AActor *);
	void  PlayIdle(void);
	void  PlayLand(void);
	void  PlayRunning(void);
	static class UClass PrivateStaticClass;
	void  SetDiagonalRoll(int);
	void  SetTwistLook(int,int);
	void  SpiderstepUp(class FVector,class FVector,struct FCheckResult &);
	float  Swim(class FVector,struct FCheckResult &);
	void  UpdateInAir(void);
	void  UpdateOnGround(void);
	void  UpdateSwimming(void);
	void  UpdateTwistLook(float);
	void  calcVelocity(class FVector,float,float,float,int,int,int,float);
	int  checkFloor(class FVector,struct FCheckResult &);
	int  findNewFloor(class FVector,float,float,int);
	class FVector  findWaterLine(class FVector,class FVector);
}; // Size: 0x0BEC

// Class Engine.Vehicle
class DLL_IMPORT AVehicle : public APawn
{
public:
	unsigned long                                      bVehicleShadows:1;                                		// 0x0FB4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDriving:1;                                       		// 0x0FB4 ( 0x0004 )  [0x00000002][ CPF_Net ]
	unsigned long                                      bOldDriving:1;                                    		// 0x0FB4 ( 0x0004 )  [0x00000004]
	unsigned long                                      bDrawVehicleShadow:1;                             		// 0x0FB4 ( 0x0004 )  [0x00000008]
	unsigned long                                      bDrawDriverInTP:1;                                		// 0x0FB4 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bDriverCollideActors:1;                           		// 0x0FB4 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bRelativeExitPos:1;                               		// 0x0FB4 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bDefensive:1;                                     		// 0x0FB4 ( 0x0004 )  [0x00000080]
	unsigned long                                      bAutoTurret:1;                                    		// 0x0FB4 ( 0x0004 )  [0x00000100]
	unsigned long                                      bRemoteControlled:1;                              		// 0x0FB4 ( 0x0004 )  [0x00000200]
	unsigned long                                      bEjectDriver:1;                                   		// 0x0FB4 ( 0x0004 )  [0x00000400]
	unsigned long                                      bTurnInPlace:1;                                   		// 0x0FB4 ( 0x0004 )  [0x00000800]
	unsigned long                                      bFollowLookDir:1;                                 		// 0x0FB4 ( 0x0004 )  [0x00001000]
	unsigned long                                      bNonHumanControl:1;                               		// 0x0FB4 ( 0x0004 )  [0x00002000]
	unsigned long                                      bStalled:1;                                       		// 0x0FB4 ( 0x0004 )  [0x00004000]
	unsigned long                                      bVehicleDestroyed:1;                              		// 0x0FB4 ( 0x0004 )  [0x00008000][ CPF_Net ]
	unsigned long                                      bShowDamageOverlay:1;                             		// 0x0FB4 ( 0x0004 )  [0x00010000]
	unsigned long                                      bDropDetail:1;                                    		// 0x0FB4 ( 0x0004 )  [0x00020000]
	unsigned long                                      bNoFriendlyFire:1;                                		// 0x0FB4 ( 0x0004 )  [0x00040000]
	unsigned long                                      bCanHover:1;                                      		// 0x0FB4 ( 0x0004 )  [0x00080000]
	unsigned long                                      bCanDoTrickJumps:1;                               		// 0x0FB4 ( 0x0004 )  [0x00100000]
	unsigned long                                      bDrawMeshInFP:1;                                  		// 0x0FB4 ( 0x0004 )  [0x00200000][ CPF_Edit ]
	unsigned long                                      bZeroPCRotOnEntry:1;                              		// 0x0FB4 ( 0x0004 )  [0x00400000][ CPF_Edit ]
	unsigned long                                      bPCRelativeFPRotation:1;                          		// 0x0FB4 ( 0x0004 )  [0x00800000]
	unsigned long                                      bWeaponisFiring:1;                                		// 0x0FB4 ( 0x0004 )  [0x01000000]
	unsigned long                                      bWeaponisAltFiring:1;                             		// 0x0FB4 ( 0x0004 )  [0x02000000]
	unsigned long                                      bTeamLocked:1;                                    		// 0x0FB4 ( 0x0004 )  [0x04000000][ CPF_Net ]
	unsigned long                                      bEnterringUnlocks:1;                              		// 0x0FB4 ( 0x0004 )  [0x08000000]
	unsigned long                                      bCanFlip:1;                                       		// 0x0FB4 ( 0x0004 )  [0x10000000]
	unsigned long                                      bAllowViewChange:1;                               		// 0x0FB4 ( 0x0004 )  [0x20000000]
	unsigned long                                      bAllowWeaponToss:1;                               		// 0x0FB4 ( 0x0004 )  [0x40000000]
	unsigned long                                      bHUDTrackVehicle:1;                               		// 0x0FB4 ( 0x0004 )  [0x80000000][ CPF_Edit | CPF_Net ]
	unsigned long                                      bHasRadar:1;                                      		// 0x0FB8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bHasHandbrake:1;                                  		// 0x0FB8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bScriptedRise:1;                                  		// 0x0FB8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bKeyVehicle:1;                                    		// 0x0FB8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bSeparateTurretFocus:1;                           		// 0x0FB8 ( 0x0004 )  [0x00000010]
	unsigned long                                      bHighScoreKill:1;                                 		// 0x0FB8 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bAdjustDriversHead:1;                             		// 0x0FB8 ( 0x0004 )  [0x00000040]
	unsigned long                                      bEnemyLockedOn:1;                                 		// 0x0FB8 ( 0x0004 )  [0x00000080]
	unsigned long                                      bDesiredBehindView:1;                             		// 0x0FB8 ( 0x0004 )  [0x00000100]
	unsigned long                                      bHideRemoteDriver:1;                              		// 0x0FB8 ( 0x0004 )  [0x00000200]
	unsigned long                                      bShowChargingBar:1;                               		// 0x0FB8 ( 0x0004 )  [0x00000400]
	unsigned long                                      bDriverHoldsFlag:1;                               		// 0x0FB8 ( 0x0004 )  [0x00000800]
	unsigned long                                      bCanCarryFlag:1;                                  		// 0x0FB8 ( 0x0004 )  [0x00001000]
	unsigned long                                      bSpawnProtected:1;                                		// 0x0FB8 ( 0x0004 )  [0x00002000]
	unsigned long                                      bFPNoZFromCameraPitch:1;                          		// 0x0FB8 ( 0x0004 )  [0x00004000][ CPF_Edit ]
	unsigned char                                      StuckCount;                                       		// 0x0FBC ( 0x0001 ) 
	unsigned char                                      Team;                                             		// 0x0FBD ( 0x0001 ) [ CPF_Edit | CPF_Net ]
	unsigned char                                      OldTeam;                                          		// 0x0FBE ( 0x0001 ) 
	unsigned char                                      PrevTeam;                                         		// 0x0FBF ( 0x0001 ) 
	struct FRotator                                    PlayerEnterredRotation;                           		// 0x0FC0 ( 0x000C ) 
	float                                              EjectMomentum;                                    		// 0x0FCC ( 0x0004 ) 
	class UClass*                                      AutoTurretControllerClass;                        		// 0x0FD0 ( 0x0004 ) 
	float                                              Steering;                                         		// 0x0FD4 ( 0x0004 ) [ CPF_Edit ]
	float                                              Throttle;                                         		// 0x0FD8 ( 0x0004 ) [ CPF_Edit ]
	float                                              Rise;                                             		// 0x0FDC ( 0x0004 ) [ CPF_Edit ]
	int                                                DriverViewPitch;                                  		// 0x0FE0 ( 0x0004 ) 
	int                                                DriverViewYaw;                                    		// 0x0FE4 ( 0x0004 ) 
	float                                              ThrottleTime;                                     		// 0x0FE8 ( 0x0004 ) 
	float                                              StuckTime;                                        		// 0x0FEC ( 0x0004 ) 
	float                                              VehicleMovingTime;                                		// 0x0FF0 ( 0x0004 ) 
	struct FVector                                     DrivePos;                                         		// 0x0FF4 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    DriveRot;                                         		// 0x1000 ( 0x000C ) [ CPF_Edit ]
	struct FName                                       DriveAnim;                                        		// 0x100C ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FVector >                     ExitPositions;                                    		// 0x1010 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FVector                                     EntryPosition;                                    		// 0x101C ( 0x000C ) [ CPF_Edit ]
	float                                              EntryRadius;                                      		// 0x1028 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     FPCamPos;                                         		// 0x102C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     FPCamViewOffset;                                  		// 0x1038 ( 0x000C ) [ CPF_Edit ]
	float                                              TPCamDistance;                                    		// 0x1044 ( 0x0004 ) 
	struct FString                                     CenterSpringForce;                                		// 0x1048 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                CenterSpringRangePitch;                           		// 0x1054 ( 0x0004 ) 
	int                                                CenterSpringRangeRoll;                            		// 0x1058 ( 0x0004 ) 
	struct FVector                                     TPCamLookat;                                      		// 0x105C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     TPCamWorldOffset;                                 		// 0x1068 ( 0x000C ) [ CPF_Edit ]
	float                                              DesiredTPCamDistance;                             		// 0x1074 ( 0x0004 ) 
	float                                              LastCameraCalcTime;                               		// 0x1078 ( 0x0004 ) 
	float                                              CameraSpeed;                                      		// 0x107C ( 0x0004 ) 
	struct FRange                                      TPCamDistRange;                                   		// 0x1080 ( 0x0008 ) [ CPF_Edit ]
	int                                                MaxViewYaw;                                       		// 0x1088 ( 0x0004 ) [ CPF_Edit ]
	int                                                MaxViewPitch;                                     		// 0x108C ( 0x0004 ) [ CPF_Edit ]
	class APawn*                                       Driver;                                           		// 0x1090 ( 0x0004 ) [ CPF_Net ]
	class ASVehicleFactory*                            ParentFactory;                                    		// 0x1094 ( 0x0004 ) 
	class AwArrangeTurret*                             ParentTurret;                                     		// 0x1098 ( 0x0004 ) 
	struct FString                                     TransEffects[ 0x02 ];                             		// 0x109C ( 0x0018 ) [ CPF_NeedCtorLink ]
	class AShadowProjector*                            VehicleShadow;                                    		// 0x10B4 ( 0x0004 ) 
	float                                              ShadowMaxTraceDist;                               		// 0x10B8 ( 0x0004 ) 
	float                                              ShadowCullDistance;                               		// 0x10BC ( 0x0004 ) 
	float                                              MomentumMult;                                     		// 0x10C0 ( 0x0004 ) 
	float                                              DriverDamageMult;                                 		// 0x10C4 ( 0x0004 ) 
	struct FString                                     LockOnClassString;                                		// 0x10C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              LastLockWarningTime;                              		// 0x10D4 ( 0x0004 ) 
	float                                              LockWarningInterval;                              		// 0x10D8 ( 0x0004 ) 
	class AVehicle*                                    NextVehicle;                                      		// 0x10DC ( 0x0004 ) 
	struct FString                                     VehiclePositionString;                            		// 0x10E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     VehicleNameString;                                		// 0x10EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     VehicleDescription;                               		// 0x10F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UTexture*                                    TeamBeaconTexture;                                		// 0x1104 ( 0x0004 ) 
	class UTexture*                                    NoEntryTexture;                                   		// 0x1108 ( 0x0004 ) 
	class UMaterial*                                   TeamBeaconBorderMaterial;                         		// 0x110C ( 0x0004 ) 
	class AAIMarker*                                   myMarker;                                         		// 0x1110 ( 0x0004 ) 
	float                                              MinRunOverSpeed;                                  		// 0x1114 ( 0x0004 ) 
	class UClass*                                      RanOverDamageType;                                		// 0x1118 ( 0x0004 ) 
	class UClass*                                      CrushedDamageType;                                		// 0x111C ( 0x0004 ) 
	class USound*                                      RanOverSound;                                     		// 0x1120 ( 0x0004 ) 
	struct FName                                       StolenAnnouncement;                               		// 0x1124 ( 0x0004 ) 
	class USound*                                      StolenSound;                                      		// 0x1128 ( 0x0004 ) 
	float                                              LinkHealMult;                                     		// 0x112C ( 0x0004 ) 
	float                                              OldSteering;                                      		// 0x1130 ( 0x0004 ) 
	float                                              VehicleLostTime;                                  		// 0x1134 ( 0x0004 ) 
	float                                              TeamUseTime;                                      		// 0x1138 ( 0x0004 ) 
	float                                              PlayerStartTime;                                  		// 0x113C ( 0x0004 ) 
	float                                              MaxDesireability;                                 		// 0x1140 ( 0x0004 ) 
	float                                              AIMoveCheckTime;                                  		// 0x1144 ( 0x0004 ) [ CPF_Const ]
	float                                              ObjectiveGetOutDist;                              		// 0x1148 ( 0x0004 ) 
	struct FName                                       FlagBone;                                         		// 0x114C ( 0x0004 ) 
	struct FVector                                     FlagOffset;                                       		// 0x1150 ( 0x000C ) 
	struct FRotator                                    FlagRotation;                                     		// 0x115C ( 0x000C ) 
	float                                              WheelsScale;                                      		// 0x1168 ( 0x0004 ) [ CPF_Net ]
	class TArray< class USound* >                      HornSounds;                                       		// 0x116C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              LastHornTime;                                     		// 0x1178 ( 0x0004 ) 
	class TArray< class USound* >                      BulletSounds;                                     		// 0x117C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              WaterDamage;                                      		// 0x1188 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      VehicleDrowningDamType;                           		// 0x118C ( 0x0004 ) 
	class UClass*                                      HUDOverlayClass;                                  		// 0x1190 ( 0x0004 ) 
	class AActor*                                      HudOverlay;                                       		// 0x1194 ( 0x0004 ) 
	struct FVector                                     HUDOverlayOffset;                                 		// 0x1198 ( 0x000C ) [ CPF_Edit ]
	float                                              HUDOverlayFOV;                                    		// 0x11A4 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   SpawnOverlay[ 0x02 ];                             		// 0x11A8 ( 0x0008 ) [ CPF_Edit ]
	struct FSVehicleIcon                               VehicleIcon;                                      		// 0x11B0 ( 0x0018 ) 

	// UScript Functions
	 void                      SetExitViewRotation ( class APawn* Driver );      		//  Engine.Vehicle.SetExitViewRotation
	 void                      SetEntryViewRotation ( struct FRotator R );       		//  Engine.Vehicle.SetEntryViewRotation
	 bool                      IsArtillery (  );                                 		//  Engine.Vehicle.IsArtillery
	 bool                      ImportantVehicle (  );                            		//  Engine.Vehicle.ImportantVehicle
	 void                      ShootMissile ( class AwProjectile* P );           		//  Engine.Vehicle.ShootMissile
	 void                      ShouldTargetMissile ( class AwProjectile* P );    		//  Engine.Vehicle.ShouldTargetMissile
	 class AActor*             AlternateTarget (  );                             		// [ FUNC_Simulated ] Engine.Vehicle.AlternateTarget
	 bool                      eventVerifyLock ( class AActor* Aggressor, class AActor** NewTarget );		// [ FUNC_Event ] Engine.Vehicle.VerifyLock
	 void                      CheckSuperBerserk (  );                           		//  Engine.Vehicle.CheckSuperBerserk
	 class TArray< class AVehicle* > GetTurrets (  );                                  		//  Engine.Vehicle.GetTurrets
	 void                      PlayTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType );		//  Engine.Vehicle.PlayTakeHit
	 void                      POVChanged ( class APlayerController* PC, bool bBehindViewChanged );		// [ FUNC_Simulated ] Engine.Vehicle.POVChanged
	 void                      IncrementSpree (  );                              		//  Engine.Vehicle.IncrementSpree
	 int                       GetSpree (  );                                    		//  Engine.Vehicle.GetSpree
	 void                      StaticPrecache ( class ALevelInfo* L );           		//  Engine.Vehicle.StaticPrecache
	 float                     AdjustedStrength (  );                            		//  Engine.Vehicle.AdjustedStrength
	 bool                      HasOccupiedTurret (  );                           		//  Engine.Vehicle.HasOccupiedTurret
	 bool                      eventIsVehicleEmpty (  );                         		// [ FUNC_Event ] Engine.Vehicle.IsVehicleEmpty
	 class AAIController*      GetBotPassenger (  );                             		//  Engine.Vehicle.GetBotPassenger
	 class APawn*              GetInstigator (  );                               		//  Engine.Vehicle.GetInstigator
	 int                       NumPassengers (  );                               		// [ FUNC_Simulated ] Engine.Vehicle.NumPassengers
	 void                      ServerPlayHorn ( int HornIndex );                 		//  Engine.Vehicle.ServerPlayHorn
	 void                      StopForceFeedback ( struct FString EffectName );  		// [ FUNC_Simulated ] Engine.Vehicle.StopForceFeedback
	 void                      ClientPlayForceFeedback ( struct FString EffectName );		// [ FUNC_Simulated ] Engine.Vehicle.ClientPlayForceFeedback
	 float                     ChargeBar (  );                                   		// [ FUNC_Simulated ] Engine.Vehicle.ChargeBar
	 void                      Flip ( struct FVector HitNormal, float ForceScale );		//  Engine.Vehicle.Flip
	 bool                      eventNeedsFlip (  );                              		// [ FUNC_Event ] Engine.Vehicle.NeedsFlip
	 bool                      TeamLink ( int TeamNum );                         		//  Engine.Vehicle.TeamLink
	 void                      PrevWeapon (  );                                  		// [ FUNC_Simulated ] Engine.Vehicle.PrevWeapon
	 void                      NextWeapon (  );                                  		// [ FUNC_Simulated ] Engine.Vehicle.NextWeapon
	 void                      eventUnStalled (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.UnStalled
	 void                      eventStalled (  );                                		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.Stalled
	 class AActor*             ShootSpecial ( class AActor* A );                 		//  Engine.Vehicle.ShootSpecial
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.Vehicle.DisplayDebug
	 void                      eventTeamChanged (  );                            		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.TeamChanged
	 void                      SetTeamNum ( unsigned char t );                   		//  Engine.Vehicle.SetTeamNum
	 void                      eventNotifyEnemyLostLock (  );                    		// [ FUNC_Event ] Engine.Vehicle.NotifyEnemyLostLock
	 void                      IncomingMissile ( class AwProjectile* P );        		//  Engine.Vehicle.IncomingMissile
	 void                      eventNotifyEnemyLockedOn (  );                    		// [ FUNC_Event ] Engine.Vehicle.NotifyEnemyLockedOn
	 int                       GetTeamNum (  );                                  		// [ FUNC_Simulated ] Engine.Vehicle.GetTeamNum
	 void                      eventPlayDying ( class UClass* DamageType, struct FVector HitLoc, int CollisionPart );		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.PlayDying
	 void                      PlayTeleportEffect ( bool bOut, bool bSound );    		//  Engine.Vehicle.PlayTeleportEffect
	 bool                      PointOfView (  );                                 		// [ FUNC_Simulated ] Engine.Vehicle.PointOfView
	 void                      eventLockOnWarning (  );                          		// [ FUNC_Event ] Engine.Vehicle.LockOnWarning
	 void                      eventTakeWaterDamage ( float DeltaTime );         		// [ FUNC_Event ] Engine.Vehicle.TakeWaterDamage
	 void                      eventDrivingStatusChanged (  );                   		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.DrivingStatusChanged
	 class AVehicle*           GetMoveTargetFor ( class APawn* P );              		//  Engine.Vehicle.GetMoveTargetFor
	 class AActor*             GetBestEntry ( class APawn* P );                  		//  Engine.Vehicle.GetBestEntry
	 bool                      IndependentVehicle (  );                          		// [ FUNC_Simulated ] Engine.Vehicle.IndependentVehicle
	 class AVehicle*           OpenPositionFor ( class APawn* P );               		//  Engine.Vehicle.OpenPositionFor
	 void                      SetReservation ( class AController* C );          		//  Engine.Vehicle.SetReservation
	 bool                      SpokenFor ( class AController* C );               		//  Engine.Vehicle.SpokenFor
	 bool                      ChangedReservation ( class APawn* P );            		//  Engine.Vehicle.ChangedReservation
	 float                     NewReservationCostMultiplier ( class APawn* P );  		//  Engine.Vehicle.NewReservationCostMultiplier
	 float                     ReservationCostMultiplier (  );                   		//  Engine.Vehicle.ReservationCostMultiplier
	 bool                      Occupied (  );                                    		//  Engine.Vehicle.Occupied
	 bool                      CheckTauntValid ( struct FName Sequence );        		// [ FUNC_Simulated ] Engine.Vehicle.CheckTauntValid
	 bool                      FindValidTaunt ( struct FName* Sequence );        		// [ FUNC_Simulated ] Engine.Vehicle.FindValidTaunt
	 bool                      EncroachingOn ( class AActor* Other );            		//  Engine.Vehicle.EncroachingOn
	 void                      eventRanInto ( class AActor* Other );             		// [ FUNC_Event ] Engine.Vehicle.RanInto
	 void                      eventEncroachedBy ( class AActor* Other );        		// [ FUNC_Event ] Engine.Vehicle.EncroachedBy
	 void                      eventSetAnimAction ( struct FName NewAction );    		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.SetAnimAction
	 void                      FaceRotation ( struct FRotator NewRotation, float DeltaTime );		// [ FUNC_Simulated ] Engine.Vehicle.FaceRotation
	 void                      eventUpdateEyeHeight ( float DeltaTime );         		// [ FUNC_Event ] Engine.Vehicle.UpdateEyeHeight
	 bool                      StopWeaponFiring (  );                            		//  Engine.Vehicle.StopWeaponFiring
	 void                      VehicleCeaseFire ( bool bWasAltFire );            		//  Engine.Vehicle.VehicleCeaseFire
	 void                      VehicleFire ( bool bWasAltFire );                 		//  Engine.Vehicle.VehicleFire
	 void                      ClientVehicleCeaseFire ( bool bWasAltFire );      		//  Engine.Vehicle.ClientVehicleCeaseFire
	 void                      AltFire ( float f );                              		//  Engine.Vehicle.AltFire
	 void                      Fire ( float f );                                 		//  Engine.Vehicle.Fire
	 void                      UsedBy ( class APawn* User );                     		//  Engine.Vehicle.UsedBy
	 void                      EjectDriver (  );                                 		//  Engine.Vehicle.EjectDriver
	 void                      AdjustDriverDamage ( class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );		//  Engine.Vehicle.AdjustDriverDamage
	 void                      Died ( class AController* Killer, class UClass* DamageType, struct FVector HitLocation, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.Vehicle.Died
	 void                      DriverDied (  );                                  		//  Engine.Vehicle.DriverDied
	 void                      DriverRadiusDamage ( float DamageAmount, float DamageRadius, class AController* EventInstigator, class UClass* DamageType, float Momentum, struct FVector HitLocation );		//  Engine.Vehicle.DriverRadiusDamage
	 bool                      HealDamage ( int Amount, class AController* Healer, class UClass* DamageType );		//  Engine.Vehicle.HealDamage
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.Vehicle.TakeDamage
	 class APawn*              CheckForHeadShot ( struct FVector loc, struct FVector ray, float AdditionalScale );		//  Engine.Vehicle.CheckForHeadShot
	 bool                      PlaceExitingDriver (  );                          		//  Engine.Vehicle.PlaceExitingDriver
	 void                      DetachDriver ( class APawn* P );                  		// [ FUNC_Simulated ] Engine.Vehicle.DetachDriver
	 void                      AttachDriver ( class APawn* P );                  		// [ FUNC_Simulated ] Engine.Vehicle.AttachDriver
	 void                      FixPCRotation ( class APlayerController* PC );    		// [ FUNC_Simulated ] Engine.Vehicle.FixPCRotation
	 void                      ActivateOverlay ( bool bActive );                 		// [ FUNC_Simulated ] Engine.Vehicle.ActivateOverlay
	 void                      ClientKDriverLeave ( class APlayerController* PC );		// [ FUNC_Simulated ] Engine.Vehicle.ClientKDriverLeave
	 void                      ClientClearController (  );                       		// [ FUNC_Simulated ] Engine.Vehicle.ClientClearController
	 void                      ClientKDriverEnter ( class APlayerController* PC );		// [ FUNC_Simulated ] Engine.Vehicle.ClientKDriverEnter
	 void                      eventUpdateTiltForceFeedback (  );                		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.UpdateTiltForceFeedback
	 void                      DriverLeft (  );                                  		//  Engine.Vehicle.DriverLeft
	 bool                      eventKDriverLeave ( bool bForceLeave );           		// [ FUNC_Event ] Engine.Vehicle.KDriverLeave
	 void                      eventSetWheelsScale ( float NewScale );           		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.SetWheelsScale
	 void                      AttachFlag ( class AActor* FlagActor );           		//  Engine.Vehicle.AttachFlag
	 void                      KDriverEnter ( class APawn* P );                  		//  Engine.Vehicle.KDriverEnter
	 void                      UnPossessed (  );                                 		//  Engine.Vehicle.UnPossessed
	 void                      PossessedBy ( class AController* C );             		//  Engine.Vehicle.PossessedBy
	 void                      eventVehicleLocked ( class APawn* P );            		// [ FUNC_Event ] Engine.Vehicle.VehicleLocked
	 bool                      TryToDrive ( class APawn* P );                    		//  Engine.Vehicle.TryToDrive
	 class AVehicle*           FindEntryVehicle ( class APawn* P );              		//  Engine.Vehicle.FindEntryVehicle
	 bool                      SpectatorSpecialCalcView ( class APlayerController* Viewer, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Simulated ] Engine.Vehicle.SpectatorSpecialCalcView
	 bool                      SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Simulated ] Engine.Vehicle.SpecialCalcView
	 void                      SpecialCalcFirstPersonView ( class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Simulated ] Engine.Vehicle.SpecialCalcFirstPersonView
	 void                      SpecialCalcBehindView ( class APlayerController* PC, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Simulated ] Engine.Vehicle.SpecialCalcBehindView
	 struct FVector            GetCameraLocationStart (  );                      		// [ FUNC_Simulated ] Engine.Vehicle.GetCameraLocationStart
	 void                      Destroyed_HandleDriver (  );                      		// [ FUNC_Simulated ] Engine.Vehicle.Destroyed_HandleDriver
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.Vehicle.Destroyed
	 float                     BotDesireability ( class AActor* S, int TeamIndex, class AActor* Objective );		//  Engine.Vehicle.BotDesireability
	 bool                      StronglyRecommended ( class AActor* S, int TeamIndex, class AActor* Objective );		//  Engine.Vehicle.StronglyRecommended
	 void                      eventSetInitialState (  );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.Vehicle.SetInitialState
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.Vehicle.PostBeginPlay
	 void                      eventRegisterTurret (  );                         		// [ FUNC_Event ] Engine.Vehicle.RegisterTurret
	 bool                      CheatFly (  );                                    		//  Engine.Vehicle.CheatFly
	 bool                      CheatGhost (  );                                  		//  Engine.Vehicle.CheatGhost
	 bool                      CheatWalk (  );                                   		//  Engine.Vehicle.CheatWalk
	 void                      Suicide (  );                                     		//  Engine.Vehicle.Suicide
	 struct FString            GetVehiclePositionString (  );                    		// [ FUNC_Simulated ] Engine.Vehicle.GetVehiclePositionString
	 void                      SetBaseEyeheight (  );                            		// [ FUNC_Simulated ] Engine.Vehicle.SetBaseEyeheight
	 void                      PlayerChangedTeam (  );                           		//  Engine.Vehicle.PlayerChangedTeam
	 void                      PreBeginPlay (  );                                		//  Engine.Vehicle.PreBeginPlay

	// Public Imports
	AVehicle(class AVehicle const &);
	AVehicle(void);
	class AVehicle &  operator=(class AVehicle const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  SteerVehicle(class FVector);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0214

// Class Engine.SVehicle
class DLL_IMPORT ASVehicle : public AVehicle
{
public:
	class TArray< class USVehicleWheel* >              Wheels;                                           		// 0x11C8 ( 0x000C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bVehicleOnGround:1;                               		// 0x11D4 ( 0x0004 )  [0x00000001][ CPF_Const ]
	float                                              VehicleMass;                                      		// 0x11D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              FlipTorque;                                       		// 0x11DC ( 0x0004 ) [ CPF_Edit ]
	float                                              FlipTime;                                         		// 0x11E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              FlipScale;                                        		// 0x11E4 ( 0x0004 ) 
	float                                              FlipTimeLeft;                                     		// 0x11E8 ( 0x0004 ) 
	struct FVector                                     FlipAxis;                                         		// 0x11EC ( 0x000C ) 
	class UClass*                                      DestroyEffectClass;                               		// 0x11F8 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.SVehicle.Destroyed
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] Engine.SVehicle.Tick
	 void                      KApplyForce ( struct FVector* Force, struct FVector* Torque );		// [ FUNC_Simulated ] Engine.SVehicle.KApplyForce
	 void                      Flip ( struct FVector HitNormal, float ForceScale );		//  Engine.SVehicle.Flip
	 void                      eventSVehicleUpdateParams (  );                   		// [ FUNC_Simulated | FUNC_Event ] Engine.SVehicle.SVehicleUpdateParams
	 void                      JumpOffPawn (  );                                 		//  Engine.SVehicle.JumpOffPawn
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] Engine.SVehicle.PostNetBeginPlay
	 void                      eventUpdateVehicle ( float DeltaTime );           		// [ FUNC_Event | FUNC_Native ] Engine.SVehicle.UpdateVehicle
	 void                      eventVehicleStateReceived (  );                   		// [ FUNC_Event ] Engine.SVehicle.VehicleStateReceived
	 void                      GraphData ( struct FString DataName, float DataValue );		// [ FUNC_Final | FUNC_Native ] Engine.SVehicle.GraphData

	// Public Imports
	ASVehicle(class ASVehicle const &);
	ASVehicle(void);
	class ASVehicle &  operator=(class ASVehicle const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0034

// Class Engine.StaticMeshActor
class DLL_IMPORT AStaticMeshActor : public AActor
{
public:
	unsigned long                                      bExactProjectileCollision:1;                      		// 0x03C8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      ShowInSD:1;                                       		// 0x03C8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      ShowInSBT:1;                                      		// 0x03C8 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      ShowInDOM:1;                                      		// 0x03C8 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      ShowInTDM:1;                                      		// 0x03C8 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      ShowInFFA:1;                                      		// 0x03C8 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      _PLEASE_TURN_OFF_STATIC_:1;                       		// 0x03C8 ( 0x0004 )  [0x00000040][ CPF_Edit ]

	// UScript Functions
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] Engine.StaticMeshActor.PreBeginPlay

	// Public Imports
	AStaticMeshActor(class AStaticMeshActor const &);
	class AStaticMeshActor &  operator=(class AStaticMeshActor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.StaticMeshInstance
class DLL_IMPORT UStaticMeshInstance : public UObject
{
public:
	unsigned char                                      _0x002C[ 0xCC ];                                  		// 0x002C ( 0x00CC )

	// Public Imports
	UStaticMeshInstance(class UStaticMeshInstance const &);
	UStaticMeshInstance(void);
	class UStaticMeshInstance &  operator=(class UStaticMeshInstance const &);
	int  GetLastLodIndex(void);
	static void  InternalConstructor(void *);
	int  IsExistDLC(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00CC

// Class Engine.StaticMesh
class DLL_IMPORT UStaticMesh : public UPrimitive
{
public:
	float                                              LODStrength;                                      		// 0x0058 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x005C[ 0x04 ];                                  		// 0x005C ( 0x0004 )
	class TArray< struct FStaticMeshLod >              LodMesh;                                          		// 0x0060 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_NeedCtorLink ]
	unsigned char                                      _0x006C[ 0xDC ];                                  		// 0x006C ( 0x00DC )
	class TArray< struct FStaticMeshMaterial >         Materials;                                        		// 0x0148 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_NeedCtorLink ]
	unsigned char                                      _0x0154[ 0x1C ];                                  		// 0x0154 ( 0x001C )
	unsigned long                                      UseSimpleLineCollision:1;                         		// 0x0170 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseSimpleBoxCollision:1;                          		// 0x0174 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseVertexColor:1;                                 		// 0x0178 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseSimpleKarmaCollision:1;                        		// 0x017C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseHardwareOccluder:1;                            		// 0x0180 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseBoundingBoxOcclusion:1;                        		// 0x0184 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      OnlyOccluder:1;                                   		// 0x0188 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      SkipOcclusionTest:1;                              		// 0x018C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x0190[ 0x64 ];                                  		// 0x0190 ( 0x0064 )
	unsigned long                                      bPenetrate:1;                                     		// 0x01F4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x01F8[ 0x18 ];                                  		// 0x01F8 ( 0x0018 )

	// Public Imports
	UStaticMesh(class UStaticMesh const &);
	UStaticMesh(void);
	class UStaticMesh &  operator=(class UStaticMesh const &);
	void  BlurTexture(class UTexture *);
	void  Build(int,class FVector *,int);
	void  CalcAmbientOcclusionLightMap(class AActor *);
	void  CalcAmbientOcclusionVertexColor(class AActor *);
	void  CalcDirectionalLightcolors(class FString,class AActor *,int,int,int,class UViewport *,int);
	void  CalcDirectionalLightmaps(class FString,class AActor *,int,int,int,class UViewport *);
	class FColor  CalcIncidentLight(class UViewport *,class AActor *,class FVector,class FVector,class AActor *);
	int  CalcLightMapTexelsInfo(int,int);
	void  ClearDirectionalLightMapEdge(class UTexture * *);
	void  ClearLightMapEdge(class UTexture *);
	unsigned long  CreateAuthenticationKey(int);
	void  FillColors(class UTexture * &,class UTexture *,int,int,int,int,int,int);
	int  FindNearestPoint(class FVector *,class FVector);
	void  GaussBlur(int,float,float,int,int,class TArray<class FColor> &,class TArray<class FColor> &);
	int  GetLODMeshNum(void);
	class UMaterial *  GetSkin(class AActor *,int);
	int  InitLightMapTexelsInfo(void);
	static void  InternalConstructor(void *);
	int  IsValidTexel(float &,float &,float,float,unsigned short &,unsigned short &,unsigned short &);
	void  MakeBoundBoxStream(void);
	void  MergeDirectionalLightMap(class UTexture * &,class UTexture * *,class UTexture *);
	int  NeededRebuild(void);
	void  Radiosity1stPass(class UTexture *,class AActor *,class AActor *);
	void  Radiosity2ndPass(class FString,class UTexture *,class AActor *,int,int,int,int,class UViewport *);
	void  Radiosity2ndPass_UseVertexColor(class FString,class AActor *,int,int,int,int,class UViewport *,int);
	class FColor  RenderView(class UViewport *,class AActor *,class FColor,enum EViewOption);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);
	void  TestVisibilitySunLight_UseVertexColor(class AActor *);
	class FVector  TexelTo3DPos(float,float,unsigned short,unsigned short,unsigned short,class FVector &,class FVector &,class FVector &);
	int  TraceBackLighting(class AActor *,class FVector,class FVector,class FVector,float &,int &,int);
	int  ValidateAuthenticationKey(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x01B8

// Class Engine.SpriteEmitter
class DLL_IMPORT USpriteEmitter : public UParticleEmitter
{
public:
	unsigned char                                      UseDirectionAs;                                   		// 0x048C ( 0x0001 ) [ CPF_Edit ]
	struct FVector                                     ProjectionNormal;                                 		// 0x0490 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     RealProjectionNormal;                             		// 0x049C ( 0x000C ) [ CPF_Transient ]

	// Public Imports
	USpriteEmitter(class USpriteEmitter const &);
	USpriteEmitter(void);
	class USpriteEmitter &  operator=(class USpriteEmitter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.SparkEmitter
class DLL_IMPORT USparkEmitter : public UParticleEmitter
{
public:
	struct FRange                                      LineSegmentsRange;                                		// 0x048C ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      TimeBeforeVisibleRange;                           		// 0x0494 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      TimeBetweenSegmentsRange;                         		// 0x049C ( 0x0008 ) [ CPF_Edit ]
	class TArray< struct FParticleSparkData >          SparkData;                                        		// 0x04A4 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class UVertexBuffer*                               VertexBuffer;                                     		// 0x04B0 ( 0x0004 ) [ CPF_Transient ]
	class UIndexBuffer*                                IndexBuffer;                                      		// 0x04B4 ( 0x0004 ) [ CPF_Transient ]
	int                                                NumSegments;                                      		// 0x04B8 ( 0x0004 ) [ CPF_Transient ]
	int                                                VerticesPerParticle;                              		// 0x04BC ( 0x0004 ) [ CPF_Transient ]
	int                                                IndicesPerParticle;                               		// 0x04C0 ( 0x0004 ) [ CPF_Transient ]
	int                                                PrimitivesPerParticle;                            		// 0x04C4 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	USparkEmitter(class USparkEmitter const &);
	USparkEmitter(void);
	class USparkEmitter &  operator=(class USparkEmitter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class Engine.AnimNotify
class DLL_IMPORT UAnimNotify : public UObject
{
public:
	int                                                Revision;                                         		// 0x002C ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UAnimNotify(class UAnimNotify const &);
	UAnimNotify(void);
	class UAnimNotify &  operator=(class UAnimNotify const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.AnimNotify_MatSubAction
class DLL_IMPORT UAnimNotify_MatSubAction : public UAnimNotify
{
public:
	class UMatSubAction*                               SubAction;                                        		// 0x0030 ( 0x0004 ) [ CPF_Edit | CPF_EditInline ]

	// Public Imports
	UAnimNotify_MatSubAction(class UAnimNotify_MatSubAction const &);
	UAnimNotify_MatSubAction(void);
	class UAnimNotify_MatSubAction &  operator=(class UAnimNotify_MatSubAction const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.AnimNotify_Scripted
class DLL_IMPORT UAnimNotify_Scripted : public UAnimNotify
{
public:

	// UScript Functions
	 void                      eventNotify ( class AActor* Owner );              		// [ FUNC_Event ] Engine.AnimNotify_Scripted.Notify

	// Public Imports
	UAnimNotify_Scripted(class UAnimNotify_Scripted const &);
	UAnimNotify_Scripted(void);
	class UAnimNotify_Scripted &  operator=(class UAnimNotify_Scripted const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.AnimNotify_Script
class DLL_IMPORT UAnimNotify_Script : public UAnimNotify
{
public:
	struct FName                                       NotifyName;                                       		// 0x0030 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UAnimNotify_Script(class UAnimNotify_Script const &);
	UAnimNotify_Script(void);
	class UAnimNotify_Script &  operator=(class UAnimNotify_Script const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.AnimNotify_LIPSinc
class DLL_IMPORT UAnimNotify_LIPSinc : public UAnimNotify
{
public:
	struct FName                                       LIPSincAnimName;                                  		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	float                                              Volume;                                           		// 0x0034 ( 0x0004 ) [ CPF_Edit ]
	int                                                Radius;                                           		// 0x0038 ( 0x0004 ) [ CPF_Edit ]
	float                                              Pitch;                                            		// 0x003C ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UAnimNotify_LIPSinc(class UAnimNotify_LIPSinc const &);
	UAnimNotify_LIPSinc(void);
	class UAnimNotify_LIPSinc &  operator=(class UAnimNotify_LIPSinc const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.AnimNotify_Sound
class DLL_IMPORT UAnimNotify_Sound : public UAnimNotify
{
public:
	class USound*                                      Sound;                                            		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	float                                              Volume;                                           		// 0x0034 ( 0x0004 ) [ CPF_Edit ]
	int                                                Radius;                                           		// 0x0038 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UAnimNotify_Sound(class UAnimNotify_Sound const &);
	UAnimNotify_Sound(void);
	class UAnimNotify_Sound &  operator=(class UAnimNotify_Sound const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.AnimNotify_DestroyEffect
class DLL_IMPORT UAnimNotify_DestroyEffect : public UAnimNotify
{
public:
	struct FName                                       DestroyTag;                                       		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bExpireParticles:1;                               		// 0x0034 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// Public Imports
	UAnimNotify_DestroyEffect(class UAnimNotify_DestroyEffect const &);
	UAnimNotify_DestroyEffect(void);
	class UAnimNotify_DestroyEffect &  operator=(class UAnimNotify_DestroyEffect const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.AnimNotify_Effect
class DLL_IMPORT UAnimNotify_Effect : public UAnimNotify
{
public:
	class UClass*                                      EffectClass;                                      		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Bone;                                             		// 0x0034 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     OffsetLocation;                                   		// 0x0038 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    OffsetRotation;                                   		// 0x0044 ( 0x000C ) [ CPF_Edit ]
	unsigned long                                      Attach:1;                                         		// 0x0050 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FName                                       Tag;                                              		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	float                                              DrawScale;                                        		// 0x0058 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     DrawScale3D;                                      		// 0x005C ( 0x000C ) [ CPF_Edit ]
	class AActor*                                      LastSpawnedEffect;                                		// 0x0068 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UAnimNotify_Effect(class UAnimNotify_Effect const &);
	UAnimNotify_Effect(void);
	class UAnimNotify_Effect &  operator=(class UAnimNotify_Effect const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class Engine.SkeletalMeshInstance
class DLL_IMPORT USkeletalMeshInstance : public ULodMeshInstance
{
public:
	unsigned char                                      _0x0080[ 0x32C ];                                 		// 0x0080 ( 0x032C )

	// Public Imports
	USkeletalMeshInstance(class USkeletalMeshInstance const &);
	USkeletalMeshInstance(void);
	class USkeletalMeshInstance &  operator=(class USkeletalMeshInstance const &);
	void  BlendToAlpha(int,float,float);
	void  ClearSkelAnims(void);
	void  CopyAnimation(int,int);
	int  EnableChannelNotify(int,int);
	void  ForceAnimRate(int,float);
	void  ForceGetFrame(void);
	int  GetAnimChannelCount(void);
	float  GetAnimFrame(int);
	float  GetAnimRateOnChannel(int);
	class FName  GetAnimSequence(int);
	float  GetBlendAlpha(int);
	class FCoords  GetBoneCoords(unsigned long);
	class FRotator  GetBoneRotation(unsigned long,int);
	class FRotator  GetBoneRotation(class FName,int);
	int  GetMeshJointsAndNormals(class AActor *,class TArray<class FVector> *,int);
	int  GetMeshVertsAndNormals(class AActor *,class TArray<class FVector> *);
	class FVector  GetRootLocation(void);
	class FVector  GetRootLocationDelta(void);
	class FRotator  GetRootRotation(void);
	class FRotator  GetRootRotationDelta(void);
	class FCoords  GetTagCoords(class FName);
	static void  InternalConstructor(void *);
	int  LockRootMotion(int);
	void  SetAnimRate(int,float);
	void  SetAnimSequence(int,class FName);
	void  SetAnimTweenStartFrame(int,float);
	void  SetBlendAlpha(int,float);
	int  SetBoneDirection(class FName,class FRotator,class FVector,float,int);
	int  SetSkelAnim(class UMeshAnimation *,class USkeletalMesh *);
	static class UClass *  StaticClass(void);
	int  StopAnimating(int);
	void  UpdateBlendAlpha(int,float,float);
	int  ValidateAnimChannel(int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x032C

// Class Engine.SkeletalMesh
class DLL_IMPORT USkeletalMesh : public ULodMesh
{
public:
	unsigned char                                      _0x0144[ 0x214 ];                                 		// 0x0144 ( 0x0214 )

	// Public Imports
	USkeletalMesh(class USkeletalMesh const &);
	USkeletalMesh(void);
	class USkeletalMesh &  operator=(class USkeletalMesh const &);
	void  CalculateNormals(class TArray<class FVector> &,int);
	int  ConformSkeletonTo(class USkeletalMesh *,int);
	void  ExtractRigidParts(int,int,int,int);
	struct FSkelBoneSphere *  FindBoneCollisionSphere(class FName);
	void  FlipFaces(void);
	void  GenerateLodModel(int,float,float,int,int);
	void  InsertLodModel(int,class USkeletalMesh *,float,int);
	static void  InternalConstructor(void *);
	int  LODFootprint(int,int);
	int  LooseLineCheck(struct FCheckResult &,class AActor *,class FVector const &,class FVector const &,class FVector const &,unsigned long,unsigned long);
	int  MatchRefBone(class FName);
	void  NormalizeInfluences(int);
	void  ReconstructRawMesh(void);
	int  RenderPreProcess(void);
	int  SetAttachAlias(class FName,class FName,class FCoords &);
	int  SetAttachmentLocation(class AActor *,class AActor *);
	static class UClass *  StaticClass(void);
	void  TestMakeTBStream(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0214

// Class Engine.Animation
class DLL_IMPORT UAnimation : public UObject
{
public:

	// Public Imports
	UAnimation(class UAnimation const &);
	UAnimation(void);
	class UAnimation &  operator=(class UAnimation const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.MeshAnimation
class DLL_IMPORT UMeshAnimation : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x2C ];                                  		// 0x002C ( 0x002C )

	// Public Imports
	UMeshAnimation(class UMeshAnimation const &);
	UMeshAnimation(void);
	class UMeshAnimation &  operator=(class UMeshAnimation const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class Engine.ShadowBitmapMaterial
class DLL_IMPORT UShadowBitmapMaterial : public UBitmapMaterial
{
public:
	void*                                              TextureInterfaces[ 0x02 ];                        		// 0x005C ( 0x0008 ) [ CPF_Const | CPF_Transient ]
	class AActor*                                      ShadowActor;                                      		// 0x0064 ( 0x0004 ) 
	struct FVector                                     LightDirection;                                   		// 0x0068 ( 0x000C ) 
	float                                              LightDistance;                                    		// 0x0074 ( 0x0004 ) 
	float                                              LightFOV;                                         		// 0x0078 ( 0x0004 ) 
	unsigned long                                      Dirty:1;                                          		// 0x007C ( 0x0004 )  [0x00000001]
	unsigned long                                      Invalid:1;                                        		// 0x007C ( 0x0004 )  [0x00000002]
	unsigned long                                      bBlobShadow:1;                                    		// 0x007C ( 0x0004 )  [0x00000004]
	float                                              CullDistance;                                     		// 0x0080 ( 0x0004 ) 
	unsigned char                                      ShadowDarkness;                                   		// 0x0084 ( 0x0001 ) 
	class UBitmapMaterial*                             BlobShadow;                                       		// 0x0088 ( 0x0004 ) 

	// Public Imports
	UShadowBitmapMaterial(class UShadowBitmapMaterial const &);
	UShadowBitmapMaterial(void);
	class UShadowBitmapMaterial &  operator=(class UShadowBitmapMaterial const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0030

// Class Engine.Security
class DLL_IMPORT ASecurity : public AInfo
{
public:
	int                                                LastType;                                         		// 0x041C ( 0x0004 ) 
	struct FString                                     LastParams[ 0x02 ];                               		// 0x0420 ( 0x0018 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      ClientMessage ( struct FString S );               		// [ FUNC_Simulated ] Engine.Security.ClientMessage
	 void                      BadClient ( int Code, struct FString Data );      		//  Engine.Security.BadClient
	 void                      Perform ( int SecType, struct FString Param1, struct FString Param2, float TimeOut );		//  Engine.Security.Perform
	 void                      eventServerCallback ( int SecType, struct FString Data );		// [ FUNC_Event ] Engine.Security.ServerCallback
	 void                      ClientPerform ( int SecType, struct FString Param1, struct FString Param2 );		// [ FUNC_Simulated ] Engine.Security.ClientPerform
	 void                      LocalPerform ( int SecType, struct FString Param1, struct FString Param2, class TArray< struct FString >* Results );		// [ FUNC_Native ] Engine.Security.LocalPerform
	 void                      NativePerform ( int SecType, struct FString Param1, struct FString Param2 );		// [ FUNC_Native ] Engine.Security.NativePerform

	// Public Imports
	ASecurity(class ASecurity const &);
	ASecurity(void);
	class ASecurity &  operator=(class ASecurity const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.ScriptedTexture
class DLL_IMPORT UScriptedTexture : public UBitmapMaterial
{
public:
	void*                                              RenderTarget;                                     		// 0x005C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UViewport*                                   RenderViewport;                                   		// 0x0060 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class AActor*                                      Client;                                           		// 0x0064 ( 0x0004 ) 
	int                                                Revision;                                         		// 0x0068 ( 0x0004 ) [ CPF_Transient ]
	int                                                OldRevision;                                      		// 0x006C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	int                                                Invalid;                                          		// 0x0070 ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// UScript Functions
	 void                      DrawPortal ( int X, int Y, int width, int Height, class AActor* CamActor, struct FVector CamLocation, struct FRotator CamRotation, int FOV, bool ClearZ );		// [ FUNC_Final | FUNC_Native ] Engine.ScriptedTexture.DrawPortal
	 void                      DrawTile ( float X, float Y, float XL, float YL, float U, float V, float UL, float VL, class UMaterial* Material, class FColor Color );		// [ FUNC_Final | FUNC_Native ] Engine.ScriptedTexture.DrawTile
	 void                      TextSize ( struct FString Text, class UFont* Font, int* width, int* Height );		// [ FUNC_Final | FUNC_Native ] Engine.ScriptedTexture.TextSize
	 void                      DrawText ( int StartX, int StartY, struct FString Text, class UFont* Font, class FColor Color );		// [ FUNC_Final | FUNC_Native ] Engine.ScriptedTexture.DrawText
	 void                      SetSize ( int width, int Height );                		// [ FUNC_Final | FUNC_Native ] Engine.ScriptedTexture.SetSize

	// Public Imports
	UScriptedTexture(class UScriptedTexture const &);
	UScriptedTexture(void);
	class UScriptedTexture &  operator=(class UScriptedTexture const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.BtrTraceResult
class DLL_IMPORT UBtrTraceResult : public UObject
{
public:
	class TArray< struct FResultData >                 TraceResultArray;                                 		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      eventclearResultArray (  );                       		// [ FUNC_Event ] Engine.BtrTraceResult.clearResultArray
	 void                      eventgetResult ( int Index, struct FResultData* Data );		// [ FUNC_Event ] Engine.BtrTraceResult.getResult
	 void                      addResult ( struct FResultData Data );            		// [ FUNC_Native ] Engine.BtrTraceResult.addResult

	// Public Imports
	UBtrTraceResult(class UBtrTraceResult const &);
	UBtrTraceResult(void);
	class UBtrTraceResult &  operator=(class UBtrTraceResult const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  addResult(struct FResultData const &);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.LookTarget
class DLL_IMPORT ALookTarget : public AKeypoint
{
public:

	// Public Imports
	ALookTarget(class ALookTarget const &);
	class ALookTarget &  operator=(class ALookTarget const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.MatObject
class DLL_IMPORT UMatObject : public UObject
{
public:

	// Public Imports
	UMatObject(class UMatObject const &);
	class UMatObject &  operator=(class UMatObject const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.MatSubAction
class DLL_IMPORT UMatSubAction : public UMatObject
{
public:
	float                                              Delay;                                            		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	float                                              Duration;                                         		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    Icon;                                             		// 0x0034 ( 0x0004 ) 
	unsigned char                                      Status;                                           		// 0x0038 ( 0x0001 ) 
	struct FString                                     Desc;                                             		// 0x003C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              PctStarting;                                      		// 0x0048 ( 0x0004 ) [ CPF_Transient ]
	float                                              PctEnding;                                        		// 0x004C ( 0x0004 ) [ CPF_Transient ]
	float                                              PctDuration;                                      		// 0x0050 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UMatSubAction(class UMatSubAction const &);
	UMatSubAction(void);
	class UMatSubAction &  operator=(class UMatSubAction const &);
	class FString  GetStatusDesc(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class Engine.SubActionSubTitle
class DLL_IMPORT USubActionSubTitle : public UMatSubAction
{
public:
	unsigned char                                      SubTitleMode;                                     		// 0x0054 ( 0x0001 ) [ CPF_Edit ]

	// Public Imports
	USubActionSubTitle(class USubActionSubTitle const &);
	USubActionSubTitle(void);
	class USubActionSubTitle &  operator=(class USubActionSubTitle const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.SubActionSceneSpeed
class DLL_IMPORT USubActionSceneSpeed : public UMatSubAction
{
public:
	struct FRange                                      SceneSpeed;                                       		// 0x0054 ( 0x0008 ) [ CPF_Edit ]

	// Public Imports
	USubActionSceneSpeed(class USubActionSceneSpeed const &);
	USubActionSceneSpeed(void);
	class USubActionSceneSpeed &  operator=(class USubActionSceneSpeed const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.SubActionGameSpeed
class DLL_IMPORT USubActionGameSpeed : public UMatSubAction
{
public:
	struct FRange                                      GameSpeed;                                        		// 0x0054 ( 0x0008 ) [ CPF_Edit ]

	// Public Imports
	USubActionGameSpeed(class USubActionGameSpeed const &);
	USubActionGameSpeed(void);
	class USubActionGameSpeed &  operator=(class USubActionGameSpeed const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.SubActionOrientation
class DLL_IMPORT USubActionOrientation : public UMatSubAction
{
public:
	struct FOrientation                                CamOrientation;                                   		// 0x0054 ( 0x0038 ) [ CPF_Edit ]

	// Public Imports
	USubActionOrientation(class USubActionOrientation const &);
	USubActionOrientation(void);
	class USubActionOrientation &  operator=(class USubActionOrientation const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.SubActionCameraShake
class DLL_IMPORT USubActionCameraShake : public UMatSubAction
{
public:
	struct FRangeVector                                Shake;                                            		// 0x0054 ( 0x0018 ) [ CPF_Edit ]

	// Public Imports
	USubActionCameraShake(class USubActionCameraShake const &);
	USubActionCameraShake(void);
	class USubActionCameraShake &  operator=(class USubActionCameraShake const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.SubActionFOV
class DLL_IMPORT USubActionFOV : public UMatSubAction
{
public:
	struct FRange                                      FOV;                                              		// 0x0054 ( 0x0008 ) [ CPF_Edit ]

	// Public Imports
	USubActionFOV(class USubActionFOV const &);
	USubActionFOV(void);
	class USubActionFOV &  operator=(class USubActionFOV const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.SubActionTrigger
class DLL_IMPORT USubActionTrigger : public UMatSubAction
{
public:
	struct FName                                       EventName;                                        		// 0x0054 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	USubActionTrigger(class USubActionTrigger const &);
	USubActionTrigger(void);
	class USubActionTrigger &  operator=(class USubActionTrigger const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.SubActionFade
class DLL_IMPORT USubActionFade : public UMatSubAction
{
public:
	class FColor                                       FadeColor;                                        		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bFadeOut:1;                                       		// 0x0058 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// Public Imports
	USubActionFade(class USubActionFade const &);
	USubActionFade(void);
	class USubActionFade &  operator=(class USubActionFade const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.MatDemoActor
class DLL_IMPORT AMatDemoActor : public AActor
{
public:

	// Public Imports
	AMatDemoActor(class AMatDemoActor const &);
	class AMatDemoActor &  operator=(class AMatDemoActor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.MatAction
class DLL_IMPORT UMatAction : public UMatObject
{
public:
	class AInterpolationPoint*                         IntPoint;                                         		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     Comment;                                          		// 0x0030 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              Duration;                                         		// 0x003C ( 0x0004 ) [ CPF_Edit ]
	class TArray< class UMatSubAction* >               SubActions;                                       		// 0x0040 ( 0x000C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bSmoothCorner:1;                                  		// 0x004C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FVector                                     StartControlPoint;                                		// 0x0050 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     EndControlPoint;                                  		// 0x005C ( 0x000C ) [ CPF_Edit ]
	unsigned long                                      bConstantPathVelocity:1;                          		// 0x0068 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              PathVelocity;                                     		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	float                                              PathLength;                                       		// 0x0070 ( 0x0004 ) 
	class TArray< struct FVector >                     SampleLocations;                                  		// 0x0074 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	float                                              PctStarting;                                      		// 0x0080 ( 0x0004 ) [ CPF_Transient ]
	float                                              PctEnding;                                        		// 0x0084 ( 0x0004 ) [ CPF_Transient ]
	float                                              PctDuration;                                      		// 0x0088 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UMatAction(class UMatAction const &);
	UMatAction(void);
	class UMatAction &  operator=(class UMatAction const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  StraightenBezierHandles(class ASceneManager *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0060

// Class Engine.ActionPause
class DLL_IMPORT UActionPause : public UMatAction
{
public:

	// Public Imports
	UActionPause(class UActionPause const &);
	class UActionPause &  operator=(class UActionPause const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.ActionMoveCamera
class DLL_IMPORT UActionMoveCamera : public UMatAction
{
public:
	unsigned char                                      PathStyle;                                        		// 0x008C ( 0x0001 ) [ CPF_Edit | CPF_Config ]

	// Public Imports
	UActionMoveCamera(class UActionMoveCamera const &);
	class UActionMoveCamera &  operator=(class UActionMoveCamera const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.MeshObject
class DLL_IMPORT UMeshObject : public UObject
{
public:

	// Public Imports
	UMeshObject(class UMeshObject const &);
	class UMeshObject &  operator=(class UMeshObject const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.SceneManager
class DLL_IMPORT ASceneManager : public AInfo
{
public:
	class TArray< class UMatAction* >                  Actions;                                          		// 0x041C ( 0x000C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned char                                      Affect;                                           		// 0x0428 ( 0x0001 ) [ CPF_Edit | CPF_Config ]
	class AActor*                                      AffectedActor;                                    		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bLooping:1;                                       		// 0x0430 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bCinematicView:1;                                 		// 0x0430 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	struct FName                                       PlayerScriptTag;                                  		// 0x0434 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       NextSceneTag;                                     		// 0x0438 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       EventStart;                                       		// 0x043C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       EventEnd;                                         		// 0x0440 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bHideHUD:1;                                       		// 0x0444 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              PctSceneComplete;                                 		// 0x0448 ( 0x0004 ) [ CPF_Transient ]
	class UMatAction*                                  CurrentAction;                                    		// 0x044C ( 0x0004 ) [ CPF_Transient ]
	float                                              SceneSpeed;                                       		// 0x0450 ( 0x0004 ) [ CPF_Transient ]
	float                                              TotalSceneTime;                                   		// 0x0454 ( 0x0004 ) [ CPF_Transient ]
	class AActor*                                      Viewer;                                           		// 0x0458 ( 0x0004 ) [ CPF_Transient ]
	class APawn*                                       OldPawn;                                          		// 0x045C ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      bIsRunning:1;                                     		// 0x0460 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      bIsSceneStarted:1;                                		// 0x0460 ( 0x0004 )  [0x00000002][ CPF_Transient ]
	float                                              CurrentTime;                                      		// 0x0464 ( 0x0004 ) [ CPF_Transient ]
	class TArray< struct FVector >                     SampleLocations;                                  		// 0x0468 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< class UMatSubAction* >               SubActions;                                       		// 0x0474 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	struct FOrientation                                CamOrientation;                                   		// 0x0480 ( 0x0038 ) [ CPF_Transient ]
	struct FOrientation                                PrevOrientation;                                  		// 0x04B8 ( 0x0038 ) [ CPF_Transient ]
	struct FInterpolator                               RotInterpolator;                                  		// 0x04F0 ( 0x0018 ) [ CPF_Transient ]
	struct FVector                                     CameraShake;                                      		// 0x0508 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     DollyOffset;                                      		// 0x0514 ( 0x000C ) [ CPF_Transient ]
	unsigned long                                      bAbortCinematic:1;                                		// 0x0520 ( 0x0004 )  [0x00000001][ CPF_Transient ]

	// UScript Functions
	 void                      eventSceneEnded (  );                             		// [ FUNC_Event ] Engine.SceneManager.SceneEnded
	 void                      eventSceneStarted (  );                           		// [ FUNC_Event ] Engine.SceneManager.SceneStarted
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.SceneManager.Trigger
	 void                      BeginPlay (  );                                   		// [ FUNC_Simulated ] Engine.SceneManager.BeginPlay
	 void                      AbortScene (  );                                  		// [ FUNC_Native ] Engine.SceneManager.AbortScene
//	 float                     GetTotalSceneTime (  );                           		// [ FUNC_Native ] Engine.SceneManager.GetTotalSceneTime

	// Public Imports
	ASceneManager(class ASceneManager const &);
	ASceneManager(void);
	class ASceneManager &  operator=(class ASceneManager const &);
	void  ChangeOrientation(struct FOrientation);
	void  CleanupPreviewActors(void);
	void  DeletePathSamples(void);
	class UMatAction *  GetActionFromPct(float);
	float  GetActionPctFromScenePct(float);
	class FVector  GetLocation(class TArray<class FVector> *,float);
	class FRotator  GetRotation(class TArray<class FVector> *,float,class FVector,class FRotator,class UMatAction *,int);
	float  GetTotalSceneTime(void);
	void  InitializePreviewActors(void);
	static void  InternalConstructor(void *);
	void  PreparePath(void);
	void  RefreshSubActions(float);
	void  SceneEnded(void);
	void  SceneStarted(void);
	void  SetCurrentTime(float);
	void  SetSceneStartTime(void);
	static class UClass *  StaticClass(void);
	void  StraightenBezierHandles(void);
	void  UpdatePreviewActors(float);
	void  UpdateViewerFromPct(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0108

// Class Engine.RenderResource
class DLL_IMPORT URenderResource : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x04 ];                                  		// 0x002C ( 0x0004 )

	// Public Imports
	URenderResource(class URenderResource const &);
	URenderResource(void);
	class URenderResource &  operator=(class URenderResource const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.SkinVertexBuffer
class DLL_IMPORT USkinVertexBuffer : public URenderResource
{
public:
	unsigned char                                      _0x0030[ 0x0C ];                                  		// 0x0030 ( 0x000C )

	// Public Imports
	USkinVertexBuffer(class USkinVertexBuffer const &);
	USkinVertexBuffer(void);
	class USkinVertexBuffer &  operator=(class USkinVertexBuffer const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.IndexBuffer
class DLL_IMPORT UIndexBuffer : public URenderResource
{
public:
	unsigned char                                      _0x0030[ 0x0C ];                                  		// 0x0030 ( 0x000C )

	// Public Imports
	UIndexBuffer(class UIndexBuffer const &);
	UIndexBuffer(void);
	class UIndexBuffer &  operator=(class UIndexBuffer const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.VertexStreamBase
class DLL_IMPORT UVertexStreamBase : public URenderResource
{
public:
	unsigned char                                      _0x0030[ 0x0C ];                                  		// 0x0030 ( 0x000C )

	// Public Imports
	UVertexStreamBase(class UVertexStreamBase const &);
	UVertexStreamBase(int,unsigned long,unsigned long);
	class UVertexStreamBase &  operator=(class UVertexStreamBase const &);
	void  SetPolyFlags(unsigned long);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.VertexBuffer
class DLL_IMPORT UVertexBuffer : public UVertexStreamBase
{
public:
	unsigned char                                      _0x003C[ 0x0C ];                                  		// 0x003C ( 0x000C )

	// Public Imports
	UVertexBuffer(class UVertexBuffer const &);
	UVertexBuffer(unsigned long);
	UVertexBuffer(void);
	class UVertexBuffer &  operator=(class UVertexBuffer const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.VertexStreamPosNormTex
class DLL_IMPORT UVertexStreamPosNormTex : public UVertexStreamBase
{
public:
	unsigned char                                      _0x003C[ 0x0C ];                                  		// 0x003C ( 0x000C )

	// Public Imports
	UVertexStreamPosNormTex(class UVertexStreamPosNormTex const &);
	UVertexStreamPosNormTex(unsigned long);
	UVertexStreamPosNormTex(void);
	class UVertexStreamPosNormTex &  operator=(class UVertexStreamPosNormTex const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.VertexStreamUV
class DLL_IMPORT UVertexStreamUV : public UVertexStreamBase
{
public:
	unsigned char                                      _0x003C[ 0x0C ];                                  		// 0x003C ( 0x000C )

	// Public Imports
	UVertexStreamUV(class UVertexStreamUV const &);
	UVertexStreamUV(unsigned long);
	UVertexStreamUV(void);
	class UVertexStreamUV &  operator=(class UVertexStreamUV const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.VertexStreamCOLOR
class DLL_IMPORT UVertexStreamCOLOR : public UVertexStreamBase
{
public:
	unsigned char                                      _0x003C[ 0x0C ];                                  		// 0x003C ( 0x000C )

	// Public Imports
	UVertexStreamCOLOR(class UVertexStreamCOLOR const &);
	UVertexStreamCOLOR(unsigned long);
	UVertexStreamCOLOR(void);
	class UVertexStreamCOLOR &  operator=(class UVertexStreamCOLOR const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.VertexStreamVECTOR
class DLL_IMPORT UVertexStreamVECTOR : public UVertexStreamBase
{
public:
	unsigned char                                      _0x003C[ 0x0C ];                                  		// 0x003C ( 0x000C )

	// Public Imports
	UVertexStreamVECTOR(class UVertexStreamVECTOR const &);
	UVertexStreamVECTOR(unsigned long);
	UVertexStreamVECTOR(void);
	class UVertexStreamVECTOR &  operator=(class UVertexStreamVECTOR const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.ProjectorMaterial
class DLL_IMPORT UProjectorMaterial : public URenderedMaterial
{
public:
	class UBitmapMaterial*                             Gradient;                                         		// 0x0044 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UMaterial*                                   Projected;                                        		// 0x0048 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UMaterial*                                   BaseMaterial;                                     		// 0x004C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	unsigned char                                      BaseMaterialBlending;                             		// 0x0050 ( 0x0001 ) [ CPF_Const | CPF_Transient ]
	unsigned char                                      FrameBufferBlending;                              		// 0x0051 ( 0x0001 ) [ CPF_Const | CPF_Transient ]
	struct FMatrix                                     Matrix;                                           		// 0x0054 ( 0x0040 ) [ CPF_Const | CPF_Transient ]
	struct FMatrix                                     GradientMatrix;                                   		// 0x0094 ( 0x0040 ) [ CPF_Const | CPF_Transient ]
	unsigned long                                      bProjected:1;                                     		// 0x00D4 ( 0x0004 )  [0x00000001][ CPF_Const | CPF_Transient ]
	unsigned long                                      bProjectOnUnlit:1;                                		// 0x00D4 ( 0x0004 )  [0x00000002][ CPF_Const | CPF_Transient ]
	unsigned long                                      bGradient:1;                                      		// 0x00D4 ( 0x0004 )  [0x00000004][ CPF_Const | CPF_Transient ]
	unsigned long                                      bProjectOnAlpha:1;                                		// 0x00D4 ( 0x0004 )  [0x00000008][ CPF_Const | CPF_Transient ]
	unsigned long                                      bProjectOnBackfaces:1;                            		// 0x00D4 ( 0x0004 )  [0x00000010][ CPF_Const | CPF_Transient ]
	unsigned long                                      bStaticProjector:1;                               		// 0x00D4 ( 0x0004 )  [0x00000020][ CPF_Const | CPF_Transient ]
	unsigned long                                      bTwoSided:1;                                      		// 0x00D4 ( 0x0004 )  [0x00000040][ CPF_Const | CPF_Transient ]

	// Public Imports
	UProjectorMaterial(class UProjectorMaterial const &);
	class UProjectorMaterial &  operator=(class UProjectorMaterial const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0094

// Class Engine.Projector
class DLL_IMPORT AProjector : public AActor
{
public:
	unsigned char                                      MaterialBlendingOp;                               		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      FrameBufferBlendingOp;                            		// 0x03C9 ( 0x0001 ) [ CPF_Edit ]
	class UMaterial*                                   ProjTexture;                                      		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	int                                                FOV;                                              		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
	int                                                MaxTraceDistance;                                 		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bProjectBSP:1;                                    		// 0x03D8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bProjectTerrain:1;                                		// 0x03D8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bProjectStaticMesh:1;                             		// 0x03D8 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bProjectParticles:1;                              		// 0x03D8 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bProjectActor:1;                                  		// 0x03D8 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bLevelStatic:1;                                   		// 0x03D8 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bClipBSP:1;                                       		// 0x03D8 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bClipStaticMesh:1;                                		// 0x03D8 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bProjectOnUnlit:1;                                		// 0x03D8 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bGradient:1;                                      		// 0x03D8 ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bProjectOnBackfaces:1;                            		// 0x03D8 ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      bProjectOnAlpha:1;                                		// 0x03D8 ( 0x0004 )  [0x00000800][ CPF_Edit ]
	unsigned long                                      bProjectOnParallelBSP:1;                          		// 0x03D8 ( 0x0004 )  [0x00001000][ CPF_Edit ]
	struct FName                                       ProjectTag;                                       		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bDynamicAttach:1;                                 		// 0x03E0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bNoProjectOnOwner:1;                              		// 0x03E0 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	float                                              FadeInTime;                                       		// 0x03E4 ( 0x0004 ) 
	struct FPlane                                      FrustumPlanes[ 0x06 ];                            		// 0x03E8 ( 0x0060 ) [ CPF_Const | CPF_Transient ]
	struct FVector                                     FrustumVertices[ 0x08 ];                          		// 0x0448 ( 0x0060 ) [ CPF_Const | CPF_Transient ]
	struct FBox                                        Box;                                              		// 0x04A8 ( 0x001C ) [ CPF_Const | CPF_Transient ]
	struct FProjectorRenderInfoPtr                     RenderInfo;                                       		// 0x04C4 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UTexture*                                    GradientTexture;                                  		// 0x04C8 ( 0x0004 ) 
	struct FMatrix                                     GradientMatrix;                                   		// 0x04CC ( 0x0040 ) [ CPF_Transient ]
	struct FMatrix                                     Matrix;                                           		// 0x050C ( 0x0040 ) [ CPF_Transient ]
	struct FVector                                     OldLocation;                                      		// 0x054C ( 0x000C ) [ CPF_Transient ]

	// UScript Functions
	 void                      eventUpdateSunLight ( struct FVector SunDir );    		// [ FUNC_Event ] Engine.Projector.UpdateSunLight
	 void                      eventLightUpdate ( class TArray< class AActor* > LightSources );		// [ FUNC_Event ] Engine.Projector.LightUpdate
	 void                      eventUnTouch ( class AActor* Other );             		// [ FUNC_Simulated | FUNC_Event ] Engine.Projector.UnTouch
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Simulated | FUNC_Event ] Engine.Projector.Touch
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] Engine.Projector.PostBeginPlay
	 void                      DetachActor ( class AActor* A );                  		// [ FUNC_Native ] Engine.Projector.DetachActor
	 void                      AttachActor ( class AActor* A );                  		// [ FUNC_Native ] Engine.Projector.AttachActor
	 void                      AbandonProjector ( float Lifetime );              		// [ FUNC_Native ] Engine.Projector.AbandonProjector
	 void                      DetachProjector ( bool Force );                   		// [ FUNC_Native ] Engine.Projector.DetachProjector
	 void                      AttachProjector ( float FadeInTime );             		// [ FUNC_Native ] Engine.Projector.AttachProjector

	// Public Imports
	AProjector(class AProjector const &);
	AProjector(void);
	class AProjector &  operator=(class AProjector const &);
	static void  InternalConstructor(void *);
	void  RenderWireframe(class FRenderInterface *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0190

// Class Engine.ProjectorPrimitive
class DLL_IMPORT UProjectorPrimitive : public UPrimitive
{
public:

	// Public Imports
	UProjectorPrimitive(class UProjectorPrimitive const &);
	UProjectorPrimitive(void);
	class UProjectorPrimitive &  operator=(class UProjectorPrimitive const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.PostProcessEffect
class DLL_IMPORT UPostProcessEffect : public UObject
{
public:
	int                                                PriorityEffect;                                   		// 0x002C ( 0x0004 ) 
	unsigned long                                      Active:1;                                         		// 0x0030 ( 0x0004 )  [0x00000001]
	unsigned long                                      NeedFXAA:1;                                       		// 0x0030 ( 0x0004 )  [0x00000002]

	// Public Imports
	UPostProcessEffect(class UPostProcessEffect const &);
	UPostProcessEffect(void);
	class UPostProcessEffect &  operator=(class UPostProcessEffect const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.GlowEffect
class DLL_IMPORT UGlowEffect : public UPostProcessEffect
{
public:
	void*                                              DownSampledTex;                                   		// 0x0034 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              DownSampledTex2;                                  		// 0x0038 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              HorizontalBlur;                                   		// 0x003C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              VerticalBlur;                                     		// 0x0040 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              TempTex0;                                         		// 0x0044 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UTexture*                                    ShaftsMask;                                       		// 0x0048 ( 0x0004 ) 

	// Public Imports
	UGlowEffect(class UGlowEffect const &);
	UGlowEffect(void);
	class UGlowEffect &  operator=(class UGlowEffect const &);
	static void  InternalConstructor(void *);
	void  RenderVolumeticLightRays(class UViewport *,class FRenderInterface *,class FSceneNode *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.SSAOEffect
class DLL_IMPORT USSAOEffect : public UPostProcessEffect
{
public:
	void*                                              NormalDepthTarget;                                		// 0x0034 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              RandomTarget;                                     		// 0x0038 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              HBlurTarget;                                      		// 0x003C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              VBlurTarget;                                      		// 0x0040 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              SourceTarget;                                     		// 0x0044 ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	USSAOEffect(class USSAOEffect const &);
	USSAOEffect(void);
	class USSAOEffect &  operator=(class USSAOEffect const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.FinalEffect
class DLL_IMPORT UFinalEffect : public UPostProcessEffect
{
public:
	class UTexture*                                    NoiseMap;                                         		// 0x0034 ( 0x0004 ) 
	void*                                              FinalTarget;                                      		// 0x0038 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	struct FPlane                                      CurrentBase;                                      		// 0x003C ( 0x0010 ) 
	struct FPlane                                      CurrentBalance;                                   		// 0x004C ( 0x0010 ) 
	struct FPlane                                      CurrentHighlight;                                 		// 0x005C ( 0x0010 ) 
	float                                              CurrentFinalAdd;                                  		// 0x006C ( 0x0004 ) 
	unsigned char                                      PrevIndex;                                        		// 0x0070 ( 0x0001 ) 
	unsigned char                                      CurrentIndex;                                     		// 0x0071 ( 0x0001 ) 
	struct FPlane                                      Base;                                             		// 0x0074 ( 0x0010 ) [ CPF_Edit ]
	struct FPlane                                      Balance;                                          		// 0x0084 ( 0x0010 ) [ CPF_Edit ]
	struct FPlane                                      Highlight;                                        		// 0x0094 ( 0x0010 ) [ CPF_Edit ]
	float                                              FinalAdd;                                         		// 0x00A4 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      bySet;                                            		// 0x00A8 ( 0x0001 ) [ CPF_Edit ]
	struct FString                                     strMapName;                                       		// 0x00AC ( 0x000C ) [ CPF_Edit | CPF_EditConst | CPF_NeedCtorLink ]
	class TArray< struct FColorPreset >                aPresets;                                         		// 0x00B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FLevelColorPreset >           LevelPresets;                                     		// 0x00C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bFadeEnd:1;                                       		// 0x00D0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bToBlackWhite:1;                                  		// 0x00D0 ( 0x0004 )  [0x00000002]
	float                                              fFadeTime;                                        		// 0x00D4 ( 0x0004 ) 

	// UScript Functions
	 void                      FadeToColor ( float inFadeTime );                 		//  Engine.FinalEffect.FadeToColor
	 void                      FadeToBlackWhite ( float inFadeTime );            		//  Engine.FinalEffect.FadeToBlackWhite
	 void                      InitNewPresets (  );                              		//  Engine.FinalEffect.InitNewPresets
	 void                      eventInitPresets (  );                            		// [ FUNC_Event ] Engine.FinalEffect.InitPresets

	// Public Imports
	UFinalEffect(class UFinalEffect const &);
	UFinalEffect(void);
	class UFinalEffect &  operator=(class UFinalEffect const &);
	void  ChangeIndex(unsigned char);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00A4

// Class Engine.DripEffect
class DLL_IMPORT UDripEffect : public UPostProcessEffect
{
public:
	class UTexture*                                    DripNormal;                                       		// 0x0034 ( 0x0004 ) 
	void*                                              DripTarget;                                       		// 0x0038 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class TArray< struct FWaterDrop >                  WaterDrops;                                       		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                WaterDropMaxNum;                                  		// 0x0048 ( 0x0004 ) 

	// Public Imports
	UDripEffect(class UDripEffect const &);
	UDripEffect(void);
	class UDripEffect &  operator=(class UDripEffect const &);
	void  GenerateWaterDrop(class UViewport *);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.MotionBlurEffect
class DLL_IMPORT UMotionBlurEffect : public UPostProcessEffect
{
public:
	void*                                              BlurTargets[ 0x05 ];                              		// 0x0034 ( 0x0014 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	UMotionBlurEffect(class UMotionBlurEffect const &);
	UMotionBlurEffect(void);
	class UMotionBlurEffect &  operator=(class UMotionBlurEffect const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.DOFEffect
class DLL_IMPORT UDOFEffect : public UPostProcessEffect
{
public:
	void*                                              BlurFactor;                                       		// 0x0034 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              BlurFactorDown;                                   		// 0x0038 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              BlurTarget;                                       		// 0x003C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              DownSampledTex;                                   		// 0x0040 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              HorizontalBlur;                                   		// 0x0044 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              VerticalBlur;                                     		// 0x0048 ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	UDOFEffect(class UDOFEffect const &);
	UDOFEffect(void);
	class UDOFEffect &  operator=(class UDOFEffect const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.PlayInfo
class DLL_IMPORT UPlayInfo : public UObject
{
public:
	class TArray< struct FPlayInfoData >               Settings;                                         		// 0x002C ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< class UClass* >                      InfoClasses;                                      		// 0x0038 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< int >                                ClassStack;                                       		// 0x0044 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Groups;                                           		// 0x0050 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	struct FString                                     LastError;                                        		// 0x005C ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SplitStringToArray ( struct FString Source, struct FString Delim, class TArray< struct FString >* Parts );		// [ FUNC_Final ] Engine.PlayInfo.SplitStringToArray
	 class UClass*             GetGameInfo (  );                                 		// [ FUNC_Final ] Engine.PlayInfo.GetGameInfo
	 bool                      Init ( class TArray< class UClass* > Classes, bool bStrict );		// [ FUNC_Final ] Engine.PlayInfo.Init
	 void                      Dump ( struct FString Group );                    		// [ FUNC_Final ] Engine.PlayInfo.Dump
	 void                      Sort ( unsigned char SortingMethod );             		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02C5 ] Engine.PlayInfo.Sort
	 int                       FindIndex ( struct FString SettingName );         		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02C4 ] Engine.PlayInfo.FindIndex
	 bool                      GetSettings ( struct FString GroupName, class TArray< struct FPlayInfoData >* GroupSettings );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02C3 ] Engine.PlayInfo.GetSettings
	 bool                      StoreSetting ( int Index, struct FString NewVal, struct FString RangeData );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02C2 ] Engine.PlayInfo.StoreSetting
	 bool                      SaveSettings (  );                                		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02C1 ] Engine.PlayInfo.SaveSettings
	 bool                      AddSetting ( struct FString Group, struct FString PropertyName, struct FString Description, unsigned char SecLevel, unsigned char Weight, struct FString RenderType, struct FString Extras, struct FString ExtraPrivs, bool bMultiPlayerOnly, bool bAdvanced );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02C0 ] Engine.PlayInfo.AddSetting
	 bool                      PopClass (  );                                    		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02BF ] Engine.PlayInfo.PopClass
	 bool                      RemoveClass ( class UClass* RemovingClass );      		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02BE ] Engine.PlayInfo.RemoveClass
	 bool                      AddClass ( class UClass* AddingClass );           		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02BD ] Engine.PlayInfo.AddClass
	 bool                      Clear (  );                                       		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x02BC ] Engine.PlayInfo.Clear

	// Public Imports
	UPlayInfo(class UPlayInfo const &);
	UPlayInfo(void);
	class UPlayInfo &  operator=(class UPlayInfo const &);
	static void  InternalConstructor(void *);
	int  NeedsValidation(class UProperty const *)const ;
	void  ReturnFilteredSettings(class TArray<struct FPlayInfoData> &,class FString const &);
	static class UClass *  StaticClass(void);
	int  ValidateRange(class UProperty const *,class FString &,class FString &)const ;

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class Engine.Player
class DLL_IMPORT UPlayer : public UObject
{
public:
	void*                                              vfOut;                                            		// 0x002C ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]
	void*                                              vfExec;                                           		// 0x0030 ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]
	class APlayerController*                           Actor;                                            		// 0x0034 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class APlayerController*                           OldActor;                                         		// 0x0038 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UConsole*                                    Console;                                          		// 0x003C ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      bWindowsMouseAvailable:1;                         		// 0x0040 ( 0x0004 )  [0x00000001][ CPF_Const | CPF_Transient ]
	unsigned long                                      bShowWindowsMouse:1;                              		// 0x0040 ( 0x0004 )  [0x00000002]
	float                                              WindowsMouseX;                                    		// 0x0044 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	float                                              WindowsMouseY;                                    		// 0x0048 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	int                                                CurrentVoiceBandwidth;                            		// 0x004C ( 0x0004 ) [ CPF_Transient ]
	int                                                CurrentNetSpeed;                                  		// 0x0050 ( 0x0004 ) [ CPF_Const ]
	int                                                ConfiguredInternetSpeed;                          		// 0x0054 ( 0x0004 ) 
	int                                                ConfiguredLanSpeed;                               		// 0x0058 ( 0x0004 ) 
	unsigned char                                      SelectedCursor;                                   		// 0x005C ( 0x0001 ) 
	class UInteractionMaster*                          InteractionMaster;                                		// 0x0060 ( 0x0004 ) [ CPF_Transient ]
	class TArray< class UInteraction* >                LocalInteractions;                                		// 0x0064 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class UBaseGUIController*                          GUIController;                                    		// 0x0070 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UPlayer(class UPlayer const &);
	UPlayer(void);
	class UPlayer &  operator=(class UPlayer const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0048

// Class Engine.PendingLevel
class DLL_IMPORT UPendingLevel : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x8C ];                                  		// 0x002C ( 0x008C )
}; // Size: 0x008C

// Class Engine.ServerPendingLevel
class DLL_IMPORT UServerPendingLevel : public UPendingLevel
{
public:
	unsigned char                                      _0x00B8[ 0x4C ];                                  		// 0x00B8 ( 0x004C )
}; // Size: 0x004C

// Class Engine.NetPendingLevel
class DLL_IMPORT UNetPendingLevel : public UPendingLevel
{
public:
	unsigned char                                      _0x00B8[ 0x0C ];                                  		// 0x00B8 ( 0x000C )
}; // Size: 0x000C

// Class Engine.ParticleMaterial
class DLL_IMPORT UParticleMaterial : public URenderedMaterial
{
public:
	int                                                ParticleBlending;                                 		// 0x0044 ( 0x0004 ) [ CPF_Const ]
	int                                                BlendBetweenSubdivisions;                         		// 0x0048 ( 0x0004 ) [ CPF_Const ]
	int                                                RenderTwoSided;                                   		// 0x004C ( 0x0004 ) [ CPF_Const ]
	int                                                UseTFactor;                                       		// 0x0050 ( 0x0004 ) [ CPF_Const ]
	class UBitmapMaterial*                             BitmapMaterial;                                   		// 0x0054 ( 0x0004 ) [ CPF_Const ]
	int                                                AlphaTest;                                        		// 0x0058 ( 0x0004 ) [ CPF_Const ]
	int                                                AlphaRef;                                         		// 0x005C ( 0x0004 ) [ CPF_Const ]
	int                                                ZTest;                                            		// 0x0060 ( 0x0004 ) [ CPF_Const ]
	int                                                ZWrite;                                           		// 0x0064 ( 0x0004 ) [ CPF_Const ]
	int                                                Wireframe;                                        		// 0x0068 ( 0x0004 ) [ CPF_Const ]
	unsigned long                                      AcceptsProjectors:1;                              		// 0x006C ( 0x0004 )  [0x00000001][ CPF_Transient ]
	int                                                NumProjectors;                                    		// 0x0070 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	struct FParticleProjectorInfo                      Projectors[ 0x08 ];                               		// 0x0074 ( 0x0260 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	UParticleMaterial(class UParticleMaterial const &);
	class UParticleMaterial &  operator=(class UParticleMaterial const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0290

// Class Engine.Emitter
class DLL_IMPORT AEmitter : public AActor
{
public:
	class TArray< class UParticleEmitter* >            Emitters;                                         		// 0x03C8 ( 0x000C ) [ CPF_Edit | CPF_ExportObject | CPF_NeedCtorLink | CPF_EditInline ]
	struct FRangeVector                                GlobalOffsetRange;                                		// 0x03D4 ( 0x0018 ) [ CPF_Edit ]
	struct FRange                                      TimeTillResetRange;                               		// 0x03EC ( 0x0008 ) [ CPF_Edit ]
	unsigned long                                      AutoDestroy:1;                                    		// 0x03F4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      AutoReset:1;                                      		// 0x03F4 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      DisableFogging:1;                                 		// 0x03F4 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	struct FVector                                     OldLocation;                                      		// 0x03F8 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     GlobalOffset;                                     		// 0x0404 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     AbsoluteVelocity;                                 		// 0x0410 ( 0x000C ) [ CPF_Transient ]
	int                                                Initialized;                                      		// 0x041C ( 0x0004 ) [ CPF_Transient ]
	struct FBox                                        BoundingBox;                                      		// 0x0420 ( 0x001C ) [ CPF_Transient ]
	float                                              EmitterRadius;                                    		// 0x043C ( 0x0004 ) [ CPF_Transient ]
	float                                              EmitterHeight;                                    		// 0x0440 ( 0x0004 ) [ CPF_Transient ]
	float                                              TimeTillReset;                                    		// 0x0444 ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      UseParticleProjectors:1;                          		// 0x0448 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      DeleteParticleEmitters:1;                         		// 0x0448 ( 0x0004 )  [0x00000002][ CPF_Transient ]
	unsigned long                                      ActorForcesEnabled:1;                             		// 0x0448 ( 0x0004 )  [0x00000004][ CPF_Transient ]
	class UParticleMaterial*                           ParticleMaterial;                                 		// 0x044C ( 0x0004 ) [ CPF_Transient ]
	float                                              fFadeOutTime;                                     		// 0x0450 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bChecked:1;                                       		// 0x0454 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      Reset (  );                                       		// [ FUNC_Simulated ] Engine.Emitter.Reset
	 void                      eventSpawnParticle ( int Amount );                		// [ FUNC_Simulated | FUNC_Event ] Engine.Emitter.SpawnParticle
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Simulated | FUNC_Event ] Engine.Emitter.Trigger
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] Engine.Emitter.UpdatePrecacheMaterials
	 void                      SetFadeOutTime ( float fTotal, float fFadeOutGap );		// [ FUNC_Simulated ] Engine.Emitter.SetFadeOutTime
	 void                      Kill (  );                                        		// [ FUNC_Native ] Engine.Emitter.Kill

	// Public Imports
	AEmitter(class AEmitter const &);
	AEmitter(void);
	class AEmitter &  operator=(class AEmitter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0090

// Class Engine.PackageCheckInfo
class DLL_IMPORT UPackageCheckInfo : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x20 ];                                  		// 0x002C ( 0x0020 )

	// Public Imports
	UPackageCheckInfo(class UPackageCheckInfo const &);
	class UPackageCheckInfo &  operator=(class UPackageCheckInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class Engine.NetDriver
class DLL_IMPORT UNetDriver : public USubsystem
{
public:
	unsigned char                                      _0x0030[ 0x1120 ];                                		// 0x0030 ( 0x1120 )
	float                                              ConnectionTimeout;                                		// 0x1150 ( 0x0004 ) [ CPF_Edit ]
	float                                              InitialConnectTimeout;                            		// 0x1154 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x1158[ 0x38 ];                                  		// 0x1158 ( 0x0038 )
	int                                                MaxDownloadSize;                                  		// 0x1190 ( 0x0004 ) [ CPF_Config ]
	class TArray< struct FString >                     DownloadManagers;                                 		// 0x1194 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      DisableKSecFix:1;                                 		// 0x11A0 ( 0x0004 )  [0x00000001][ CPF_Config ]
	class TArray< struct FString >                     ClientRedirectURLs;                               		// 0x11A4 ( 0x000C ) [ CPF_Config | CPF_NeedCtorLink ]
	unsigned char                                      _0x11B0[ 0x5C ];                                  		// 0x11B0 ( 0x005C )

	// Public Imports
	UNetDriver(class UNetDriver const &);
	UNetDriver(void);
	class UNetDriver &  operator=(class UNetDriver const &);
	void  RelayServerOff(void);
	void  RelayServerOn(class FURL &);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x11DC

// Class Engine.TickChecker
class DLL_IMPORT UTickChecker : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x18 ];                                  		// 0x002C ( 0x0018 )

	// Public Imports
	UTickChecker(class UTickChecker const &);
	UTickChecker(void);
	class UTickChecker &  operator=(class UTickChecker const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.PackageMapLevel
class DLL_IMPORT UPackageMapLevel : public UPackageMap
{
public:
	unsigned char                                      _0x0074[ 0x04 ];                                  		// 0x0074 ( 0x0004 )

	// Public Imports
	UPackageMapLevel(class UPackageMapLevel const &);
	UPackageMapLevel(class UNetConnection *);
	UPackageMapLevel(void);
	class UPackageMapLevel &  operator=(class UPackageMapLevel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.Mover
class DLL_IMPORT AMover : public AActor
{
public:
	unsigned char                                      MoverEncroachType;                                		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      MoverGlideType;                                   		// 0x03C9 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      BumpType;                                         		// 0x03CA ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      KeyNum;                                           		// 0x03CB ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      PrevKeyNum;                                       		// 0x03CC ( 0x0001 ) 
	unsigned char                                      NumKeys;                                          		// 0x03CD ( 0x0001 ) [ CPF_Edit | CPF_Const ]
	unsigned char                                      WorldRaytraceKey;                                 		// 0x03CE ( 0x0001 ) [ CPF_Edit | CPF_Const ]
	unsigned char                                      BrushRaytraceKey;                                 		// 0x03CF ( 0x0001 ) [ CPF_Edit | CPF_Const ]
	unsigned char                                      StartKeyNum;                                      		// 0x03D0 ( 0x0001 ) 
	float                                              MoveTime;                                         		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              StayOpenTime;                                     		// 0x03D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              OtherTime;                                        		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	int                                                EncroachDamage;                                   		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bToggleDirection:1;                               		// 0x03E4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bTriggerOnceOnly:1;                               		// 0x03E4 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bSlave:1;                                         		// 0x03E4 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bUseTriggered:1;                                  		// 0x03E4 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bDamageTriggered:1;                               		// 0x03E4 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bDynamicLightMover:1;                             		// 0x03E4 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bUseShortestRotation:1;                           		// 0x03E4 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bIsLeader:1;                                      		// 0x03E4 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	struct FName                                       PlayerBumpEvent;                                  		// 0x03E8 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       BumpEvent;                                        		// 0x03EC ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      SavedTrigger;                                     		// 0x03F0 ( 0x0004 ) 
	float                                              DamageThreshold;                                  		// 0x03F4 ( 0x0004 ) [ CPF_Edit ]
	int                                                numTriggerEvents;                                 		// 0x03F8 ( 0x0004 ) 
	class AMover*                                      Leader;                                           		// 0x03FC ( 0x0004 ) 
	class AMover*                                      Follower;                                         		// 0x0400 ( 0x0004 ) 
	struct FName                                       ReturnGroup;                                      		// 0x0404 ( 0x0004 ) [ CPF_Edit ]
	float                                              DelayTime;                                        		// 0x0408 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      OpeningSound;                                     		// 0x040C ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      OpenedSound;                                      		// 0x0410 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      ClosingSound;                                     		// 0x0414 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      ClosedSound;                                      		// 0x0418 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      MoveAmbientSound;                                 		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      LoopSound;                                        		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       OpeningEvent;                                     		// 0x0424 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       OpenedEvent;                                      		// 0x0428 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       ClosingEvent;                                     		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       ClosedEvent;                                      		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       LoopEvent;                                        		// 0x0434 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     KeyPos[ 0x18 ];                                   		// 0x0438 ( 0x0120 ) 
	struct FRotator                                    KeyRot[ 0x18 ];                                   		// 0x0558 ( 0x0120 ) 
	struct FVector                                     BasePos;                                          		// 0x0678 ( 0x000C ) 
	struct FVector                                     OldPos;                                           		// 0x0684 ( 0x000C ) 
	struct FVector                                     OldPrePivot;                                      		// 0x0690 ( 0x000C ) 
	struct FVector                                     SavedPos;                                         		// 0x069C ( 0x000C ) 
	struct FRotator                                    BaseRot;                                          		// 0x06A8 ( 0x000C ) 
	struct FRotator                                    OldRot;                                           		// 0x06B4 ( 0x000C ) 
	struct FRotator                                    SavedRot;                                         		// 0x06C0 ( 0x000C ) 
	float                                              PhysAlpha;                                        		// 0x06CC ( 0x0004 ) 
	float                                              PhysRate;                                         		// 0x06D0 ( 0x0004 ) 
	class ANavigationPoint*                            myMarker;                                         		// 0x06D4 ( 0x0004 ) 
	unsigned long                                      bOpening:1;                                       		// 0x06D8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDelaying:1;                                      		// 0x06D8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bClientPause:1;                                   		// 0x06D8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bClosed:1;                                        		// 0x06D8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bPlayerOnly:1;                                    		// 0x06D8 ( 0x0004 )  [0x00000010]
	unsigned long                                      bAutoDoor:1;                                      		// 0x06D8 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bNoAIRelevance:1;                                 		// 0x06D8 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bJumpLift:1;                                      		// 0x06D8 ( 0x0004 )  [0x00000080]
	unsigned long                                      bOscillatingLoop:1;                               		// 0x06D8 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned char                                      ClientStop;                                       		// 0x06DC ( 0x0001 ) 
	struct FVector                                     SimOldPos;                                        		// 0x06E0 ( 0x000C ) [ CPF_Net ]
	int                                                SimOldRotPitch;                                   		// 0x06EC ( 0x0004 ) [ CPF_Net ]
	int                                                SimOldRotYaw;                                     		// 0x06F0 ( 0x0004 ) [ CPF_Net ]
	int                                                SimOldRotRoll;                                    		// 0x06F4 ( 0x0004 ) [ CPF_Net ]
	struct FVector                                     SimInterpolate;                                   		// 0x06F8 ( 0x000C ) [ CPF_Net ]
	struct FVector                                     RealPosition;                                     		// 0x0704 ( 0x000C ) [ CPF_Net ]
	struct FRotator                                    RealRotation;                                     		// 0x0710 ( 0x000C ) [ CPF_Net ]
	int                                                ClientUpdate;                                     		// 0x071C ( 0x0004 ) 
	unsigned char                                      StoppedPosition;                                  		// 0x0720 ( 0x0001 ) [ CPF_Net ]
	int                                                StepDirection;                                    		// 0x0724 ( 0x0004 ) 
	class TArray< class AAntiPortalActor* >            AntiPortals;                                      		// 0x0728 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FName                                       AntiPortalTag;                                    		// 0x0734 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bResetting:1;                                     		// 0x0738 ( 0x0004 )  [0x00000001]
	unsigned long                                      BACKUP_bHidden:1;                                 		// 0x0738 ( 0x0004 )  [0x00000002]
	struct FName                                       Backup_InitialState;                              		// 0x073C ( 0x0004 ) 
	unsigned long                                      bDamageOnceOnly:1;                                		// 0x0740 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// UScript Functions
	 void                      UpdatePrecacheStaticMeshes (  );                  		// [ FUNC_Simulated ] Engine.Mover.UpdatePrecacheStaticMeshes
	 void                      BaseFinished (  );                                		//  Engine.Mover.BaseFinished
	 void                      BaseStarted (  );                                 		//  Engine.Mover.BaseStarted
	 void                      MoverLooped (  );                                 		//  Engine.Mover.MoverLooped
	 void                      SetStoppedPosition ( unsigned char NewPos );      		//  Engine.Mover.SetStoppedPosition
	 void                      EnableTrigger (  );                               		//  Engine.Mover.EnableTrigger
	 void                      DisableTrigger (  );                              		//  Engine.Mover.DisableTrigger
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.Mover.TakeDamage
	 void                      Bump ( class AActor* Other );                     		//  Engine.Mover.Bump
	 bool                      EncroachingOn ( class AActor* Other );            		//  Engine.Mover.EncroachingOn
	 void                      MakeGroupReturn (  );                             		//  Engine.Mover.MakeGroupReturn
	 void                      MakeGroupStop (  );                               		//  Engine.Mover.MakeGroupStop
	 void                      Reset (  );                                       		//  Engine.Mover.Reset
	 void                      SetResetStatus ( bool bNewStatus );               		//  Engine.Mover.SetResetStatus
	 void                      PostBeginPlay (  );                               		//  Engine.Mover.PostBeginPlay
	 void                      BeginPlay (  );                                   		// [ FUNC_Simulated ] Engine.Mover.BeginPlay
	 void                      DoClose (  );                                     		//  Engine.Mover.DoClose
	 void                      DoOpen (  );                                      		//  Engine.Mover.DoOpen
	 void                      FinishedOpening (  );                             		//  Engine.Mover.FinishedOpening
	 void                      FinishedClosing (  );                             		//  Engine.Mover.FinishedClosing
	 void                      FinishNotify (  );                                		//  Engine.Mover.FinishNotify
	 void                      eventKeyFrameReached (  );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.Mover.KeyFrameReached
	 void                      SetKeyframe ( unsigned char NewKeyNum, struct FVector NewLocation, struct FRotator NewRotation );		// [ FUNC_Final ] Engine.Mover.SetKeyframe
	 void                      InterpolateTo ( unsigned char NewKeyNum, float Seconds );		// [ FUNC_Final | FUNC_Simulated ] Engine.Mover.InterpolateTo
	 void                      Timer (  );                                       		// [ FUNC_Simulated ] Engine.Mover.Timer
	 void                      StartInterpolation (  );                          		// [ FUNC_Simulated ] Engine.Mover.StartInterpolation
	 class AActor*             SpecialHandling ( class APawn* Other );           		//  Engine.Mover.SpecialHandling
	 bool                      SelfTriggered (  );                               		//  Engine.Mover.SelfTriggered

	// Public Imports
	AMover(class AMover const &);
	AMover(void);
	class AMover &  operator=(class AMover const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  physMovingBrush(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x037C

// Class Engine.Model
class DLL_IMPORT UModel : public UPrimitive
{
public:
	unsigned char                                      _0x0058[ 0x6D8 ];                                 		// 0x0058 ( 0x06D8 )

	// Public Imports
	UModel(class UModel const &);
	UModel(class ABrush *,int);
	UModel(void);
	class UModel &  operator=(class UModel const &);
	void  AttachProjector(int,struct FProjectorRenderInfo *,class FPlane *);
	void  BlurTexelsInPolygon(class FLightMapTexture *,struct FBspVertex *,int,float,float,float,float);
	void  BlurTexture(int,class UTexture *);
	class TArray<int>  BoxLeaves(class FBox);
	void  BuildBound(void);
	void  BuildRenderData(void);
	class FColor  CalcIncidentLight(class UViewport *,class AActor *,class FVector,class FVector,class AActor *);
	class FColor  CalcIncidentLightForDirectionalLightmaps(class UViewport *,class AActor *,class FVector,class FVector);
	void  CalcLightmapTexelPosition(class FLightMapTexture *,struct FBspVertex *,int,int *,int,float,float,float,float,int,struct FBSPTangentBinormal *);
	void  CalcTangentSpaceForTexel(struct FBspVertex *,struct FBSPTangentBinormal *,int *,float,float,class FVector &,class FVector &,class FVector &);
	void  ClearLightMapEdge(int,class UTexture *);
	void  ClearLightMapEdge(void);
	void  ClearRenderData(class URenderDevice *);
	void  CompressLightmaps(int);
	int  ConvexVolumeMultiCheck(class FBox &,class FPlane *,int,class FVector,class TArray<int> &);
	void  EmptyModel(int,int);
	unsigned char  FastLineCheck(class FVector const &,class FVector const &);
	void  FillColors(class UTexture * &,class UTexture *,int,int,int,int,int,int);
	float  FindNearestVertex(class FVector const &,class FVector &,float,int &)const ;
	void  GaussBlur(int,float,float,int,int,class TArray<class FColor> &,class TArray<class FColor> &);
	class FVector  GetSmoothNormal(class FBspNode &,class FVector,class FVector,float);
	int  GetTexel3DInfo(int,float,float,class FVector &,class FVector &);
	int  InitTexelsInfo(int);
	int  InitTexelsInfoTangentSpace(void);
	static void  InternalConstructor(void *);
	int  IsValidTexel(float,float,struct FBspVertex *,int,int &,int &,int &);
	void  Modify(int);
	void  ModifyAllSurfs(int);
	void  ModifySelectedSurfs(int);
	void  ModifySurf(int,int);
	struct FPointRegion  PointRegion(class AZoneInfo *,class FVector)const ;
	int  PotentiallyVisible(int,int);
	void  PreCalculateLightmaps(void);
	void  PrecomputeSphereFilter(class FPlane const &);
	void  Radiosity1stPass(class AActor *);
	void  Radiosity2ndPass(class FString,int,class AActor *,int,int,class UViewport *);
	void  Render(class FDynamicActor *,class FLevelSceneNode *,class FRenderInterface *);
	class FColor  RenderView(class UViewport *,class AActor *,class FColor,enum EViewOption);
	void  ShrinkModel(void);
	static class UClass *  StaticClass(void);
	class FVector  TexelTo3DPos(float,float,struct FBspVertex *,int,int,int);
	void  Transform(class ABrush *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x06D8

// Class Engine.MeshEmitter
class DLL_IMPORT UMeshEmitter : public UParticleEmitter
{
public:
	class UStaticMesh*                                 StaticMesh;                                       		// 0x048C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      UseMeshBlendMode:1;                               		// 0x0490 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      RenderTwoSided:1;                                 		// 0x0490 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      UseParticleColor:1;                               		// 0x0490 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	struct FVector                                     MeshExtent;                                       		// 0x0494 ( 0x000C ) [ CPF_Transient ]

	// Public Imports
	UMeshEmitter(class UMeshEmitter const &);
	UMeshEmitter(void);
	class UMeshEmitter &  operator=(class UMeshEmitter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.HardwareShader
class DLL_IMPORT UHardwareShader : public URenderedMaterial
{
public:
	struct FSConstantsInfo                             VSConstants[ 0xC8 ];                              		// 0x0044 ( 0x0FA0 ) [ CPF_Edit ]
	struct FString                                     VertexShaderText[ 0x04 ];                         		// 0x0FE4 ( 0x0030 ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< int >                                StreamMapping;                                    		// 0x1014 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FSConstantsInfo                             PSConstants[ 0x20 ];                              		// 0x1020 ( 0x0280 ) [ CPF_Edit ]
	struct FString                                     PixelShaderText[ 0x04 ];                          		// 0x12A0 ( 0x0030 ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UTexture*                                    Textures[ 0x20 ];                                 		// 0x12D0 ( 0x0080 ) [ CPF_Edit ]
	int                                                PixelShader[ 0x04 ];                              		// 0x1350 ( 0x0010 ) [ CPF_Const | CPF_Transient ]
	int                                                VertexShader[ 0x04 ];                             		// 0x1360 ( 0x0010 ) [ CPF_Const | CPF_Transient ]
	int                                                NumPasses;                                        		// 0x1370 ( 0x0004 ) [ CPF_Edit ]
	int                                                AlphaBlending[ 0x04 ];                            		// 0x1374 ( 0x0010 ) [ CPF_Edit ]
	int                                                AlphaTest[ 0x04 ];                                		// 0x1384 ( 0x0010 ) [ CPF_Edit ]
	unsigned char                                      AlphaRef[ 0x04 ];                                 		// 0x1394 ( 0x0004 ) [ CPF_Edit ]
	int                                                ZTest[ 0x04 ];                                    		// 0x1398 ( 0x0010 ) [ CPF_Edit ]
	int                                                ZWrite[ 0x04 ];                                   		// 0x13A8 ( 0x0010 ) [ CPF_Edit ]
	unsigned char                                      SrcBlend[ 0x10 ];                                 		// 0x13B8 ( 0x0010 ) [ CPF_Edit ]
	unsigned char                                      DestBlend[ 0x10 ];                                		// 0x13C8 ( 0x0010 ) [ CPF_Edit ]

	// Public Imports
	UHardwareShader(class UHardwareShader const &);
	UHardwareShader(void);
	class UHardwareShader &  operator=(class UHardwareShader const &);
	void  Changed(void);
	void  InitDuplicate(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x1394

// Class Engine.Modifier
class DLL_IMPORT UModifier : public UMaterial
{
public:
	class UMaterial*                                   Material;                                         		// 0x0040 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]

	// UScript Functions
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.Modifier.Trigger
	 void                      Reset (  );                                       		//  Engine.Modifier.Reset

	// Public Imports
	UModifier(class UModifier const &);
	UModifier(void);
	class UModifier &  operator=(class UModifier const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.OpacityModifier
class DLL_IMPORT UOpacityModifier : public UModifier
{
public:
	class UMaterial*                                   Opacity;                                          		// 0x0044 ( 0x0004 ) 
	unsigned long                                      bOverrideTexModifier:1;                           		// 0x0048 ( 0x0004 )  [0x00000001]

	// Public Imports
	UOpacityModifier(class UOpacityModifier const &);
	class UOpacityModifier &  operator=(class UOpacityModifier const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.MaterialSequence
class DLL_IMPORT UMaterialSequence : public UModifier
{
public:
	class TArray< struct FMaterialSequenceItem >       SequenceItems;                                    		// 0x0044 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      TriggerAction;                                    		// 0x0050 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      Loop:1;                                           		// 0x0054 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Paused:1;                                         		// 0x0054 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	float                                              CurrentTime;                                      		// 0x0058 ( 0x0004 ) [ CPF_Transient ]
	float                                              LastTime;                                         		// 0x005C ( 0x0004 ) [ CPF_Transient ]
	float                                              TotalTime;                                        		// 0x0060 ( 0x0004 ) 

	// UScript Functions
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.MaterialSequence.Trigger
	 void                      Reset (  );                                       		//  Engine.MaterialSequence.Reset

	// Public Imports
	UMaterialSequence(class UMaterialSequence const &);
	UMaterialSequence(void);
	class UMaterialSequence &  operator=(class UMaterialSequence const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class Engine.MaterialSwitch
class DLL_IMPORT UMaterialSwitch : public UModifier
{
public:
	int                                                Current;                                          		// 0x0044 ( 0x0004 ) [ CPF_Edit | CPF_Transient ]
	class TArray< class UMaterial* >                   Materials;                                        		// 0x0048 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline | CPF_EditInlineUse ]

	// UScript Functions
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.MaterialSwitch.Trigger
	 void                      Reset (  );                                       		//  Engine.MaterialSwitch.Reset

	// Public Imports
	UMaterialSwitch(class UMaterialSwitch const &);
	UMaterialSwitch(void);
	class UMaterialSwitch &  operator=(class UMaterialSwitch const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.FinalBlend
class DLL_IMPORT UFinalBlend : public UModifier
{
public:
	unsigned char                                      FrameBufferBlending;                              		// 0x0044 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      ZWrite:1;                                         		// 0x0048 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      ZTest:1;                                          		// 0x0048 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      AlphaTest:1;                                      		// 0x0048 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      TwoSided:1;                                       		// 0x0048 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned char                                      AlphaRef;                                         		// 0x004C ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      UseShader:1;                                      		// 0x0050 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// Public Imports
	UFinalBlend(class UFinalBlend const &);
	UFinalBlend(void);
	class UFinalBlend &  operator=(class UFinalBlend const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.VertexColor
class DLL_IMPORT UVertexColor : public URenderedMaterial
{
public:

	// Public Imports
	UVertexColor(class UVertexColor const &);
	class UVertexColor &  operator=(class UVertexColor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.TexModifier
class DLL_IMPORT UTexModifier : public UModifier
{
public:
	unsigned char                                      TexCoordSource;                                   		// 0x0044 ( 0x0001 ) 
	unsigned char                                      TexCoordCount;                                    		// 0x0045 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      TexCoordProjected:1;                              		// 0x0048 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	int                                                texmodifier_dummy;                                		// 0x004C ( 0x0004 ) 

	// Public Imports
	UTexModifier(class UTexModifier const &);
	UTexModifier(void);
	class UTexModifier &  operator=(class UTexModifier const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.TexCoordSource
class DLL_IMPORT UTexCoordSource : public UTexModifier
{
public:
	int                                                SourceChannel;                                    		// 0x0050 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UTexCoordSource(class UTexCoordSource const &);
	UTexCoordSource(void);
	class UTexCoordSource &  operator=(class UTexCoordSource const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.TexMatrix
class DLL_IMPORT UTexMatrix : public UTexModifier
{
public:
	struct FMatrix                                     Matrix;                                           		// 0x0050 ( 0x0040 ) 

	// Public Imports
	UTexMatrix(class UTexMatrix const &);
	UTexMatrix(void);
	class UTexMatrix &  operator=(class UTexMatrix const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class Engine.TexEnvMap
class DLL_IMPORT UTexEnvMap : public UTexModifier
{
public:
	unsigned char                                      EnvMapType;                                       		// 0x0050 ( 0x0001 ) [ CPF_Edit ]

	// Public Imports
	UTexEnvMap(class UTexEnvMap const &);
	UTexEnvMap(void);
	class UTexEnvMap &  operator=(class UTexEnvMap const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.TexOscillator
class DLL_IMPORT UTexOscillator : public UTexModifier
{
public:
	float                                              UOscillationRate;                                 		// 0x0050 ( 0x0004 ) [ CPF_Edit ]
	float                                              VOscillationRate;                                 		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	float                                              UOscillationPhase;                                		// 0x0058 ( 0x0004 ) [ CPF_Edit ]
	float                                              VOscillationPhase;                                		// 0x005C ( 0x0004 ) [ CPF_Edit ]
	float                                              UOscillationAmplitude;                            		// 0x0060 ( 0x0004 ) [ CPF_Edit ]
	float                                              VOscillationAmplitude;                            		// 0x0064 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      UOscillationType;                                 		// 0x0068 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      VOscillationType;                                 		// 0x0069 ( 0x0001 ) [ CPF_Edit ]
	float                                              UOffset;                                          		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	float                                              VOffset;                                          		// 0x0070 ( 0x0004 ) [ CPF_Edit ]
	struct FMatrix                                     M;                                                		// 0x0074 ( 0x0040 ) 
	float                                              LastSu;                                           		// 0x00B4 ( 0x0004 ) 
	float                                              LastSv;                                           		// 0x00B8 ( 0x0004 ) 
	float                                              CurrentUJitter;                                   		// 0x00BC ( 0x0004 ) 
	float                                              CurrentVJitter;                                   		// 0x00C0 ( 0x0004 ) 

	// Public Imports
	UTexOscillator(class UTexOscillator const &);
	UTexOscillator(void);
	class UTexOscillator &  operator=(class UTexOscillator const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0074

// Class Engine.TexOscillatorTriggered
class DLL_IMPORT UTexOscillatorTriggered : public UTexOscillator
{
public:
	unsigned char                                      RetriggerAction;                                  		// 0x00C4 ( 0x0001 ) [ CPF_Edit ]
	float                                              StopAfterPeriod;                                  		// 0x00C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              TriggeredTime;                                    		// 0x00CC ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      Reverse:1;                                        		// 0x00D0 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      Triggered:1;                                      		// 0x00D0 ( 0x0004 )  [0x00000002][ CPF_Transient ]

	// UScript Functions
	 void                      Reset (  );                                       		//  Engine.TexOscillatorTriggered.Reset
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.TexOscillatorTriggered.Trigger

	// Public Imports
	UTexOscillatorTriggered(class UTexOscillatorTriggered const &);
	UTexOscillatorTriggered(void);
	class UTexOscillatorTriggered &  operator=(class UTexOscillatorTriggered const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.TexRotator
class DLL_IMPORT UTexRotator : public UTexModifier
{
public:
	struct FMatrix                                     M;                                                		// 0x0050 ( 0x0040 ) 
	unsigned char                                      TexRotationType;                                  		// 0x0090 ( 0x0001 ) [ CPF_Edit ]
	struct FRotator                                    Rotation;                                         		// 0x0094 ( 0x000C ) [ CPF_Edit ]
	unsigned long                                      ConstantRotation:1;                               		// 0x00A0 ( 0x0004 )  [0x00000001][ CPF_Deprecated ]
	float                                              UOffset;                                          		// 0x00A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              VOffset;                                          		// 0x00A8 ( 0x0004 ) [ CPF_Edit ]
	struct FRotator                                    OscillationRate;                                  		// 0x00AC ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    OscillationAmplitude;                             		// 0x00B8 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    OscillationPhase;                                 		// 0x00C4 ( 0x000C ) [ CPF_Edit ]

	// Public Imports
	UTexRotator(class UTexRotator const &);
	UTexRotator(void);
	class UTexRotator &  operator=(class UTexRotator const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0080

// Class Engine.TexScaler
class DLL_IMPORT UTexScaler : public UTexModifier
{
public:
	struct FMatrix                                     M;                                                		// 0x0050 ( 0x0040 ) 
	float                                              UScale;                                           		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	float                                              VScale;                                           		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	float                                              UOffset;                                          		// 0x0098 ( 0x0004 ) [ CPF_Edit ]
	float                                              VOffset;                                          		// 0x009C ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UTexScaler(class UTexScaler const &);
	UTexScaler(void);
	class UTexScaler &  operator=(class UTexScaler const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0050

// Class Engine.VariableTexPanner
class DLL_IMPORT UVariableTexPanner : public UTexModifier
{
public:
	struct FRotator                                    PanDirection;                                     		// 0x0050 ( 0x000C ) [ CPF_Edit ]
	float                                              PanRate;                                          		// 0x005C ( 0x0004 ) [ CPF_Edit ]
	struct FMatrix                                     M;                                                		// 0x0060 ( 0x0040 ) 
	float                                              LastTime;                                         		// 0x00A0 ( 0x0004 ) 
	float                                              PanOffset;                                        		// 0x00A4 ( 0x0004 ) 

	// Public Imports
	UVariableTexPanner(class UVariableTexPanner const &);
	UVariableTexPanner(void);
	class UVariableTexPanner &  operator=(class UVariableTexPanner const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0058

// Class Engine.TexPanner
class DLL_IMPORT UTexPanner : public UTexModifier
{
public:
	struct FRotator                                    PanDirection;                                     		// 0x0050 ( 0x000C ) [ CPF_Edit ]
	float                                              PanRate;                                          		// 0x005C ( 0x0004 ) [ CPF_Edit ]
	struct FMatrix                                     M;                                                		// 0x0060 ( 0x0040 ) 

	// Public Imports
	UTexPanner(class UTexPanner const &);
	UTexPanner(void);
	class UTexPanner &  operator=(class UTexPanner const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0050

// Class Engine.TexPannerTriggered
class DLL_IMPORT UTexPannerTriggered : public UTexPanner
{
public:
	unsigned char                                      RetriggerAction;                                  		// 0x00A0 ( 0x0001 ) [ CPF_Edit ]
	float                                              StopAfterPeriod;                                  		// 0x00A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              TriggeredTime;                                    		// 0x00A8 ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      Reverse:1;                                        		// 0x00AC ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      Triggered:1;                                      		// 0x00AC ( 0x0004 )  [0x00000002][ CPF_Transient ]

	// UScript Functions
	 void                      Reset (  );                                       		//  Engine.TexPannerTriggered.Reset
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.TexPannerTriggered.Trigger

	// Public Imports
	UTexPannerTriggered(class UTexPannerTriggered const &);
	UTexPannerTriggered(void);
	class UTexPannerTriggered &  operator=(class UTexPannerTriggered const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.ConstantMaterial
class DLL_IMPORT UConstantMaterial : public URenderedMaterial
{
public:

	// Public Imports
	UConstantMaterial(class UConstantMaterial const &);
	UConstantMaterial(void);
	class UConstantMaterial &  operator=(class UConstantMaterial const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.FadeColor
class DLL_IMPORT UFadeColor : public UConstantMaterial
{
public:
	class FColor                                       Color1;                                           		// 0x0044 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       Color2;                                           		// 0x0048 ( 0x0004 ) [ CPF_Edit ]
	float                                              FadePeriod;                                       		// 0x004C ( 0x0004 ) [ CPF_Edit ]
	float                                              FadePhase;                                        		// 0x0050 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      ColorFadeType;                                    		// 0x0054 ( 0x0001 ) [ CPF_Edit ]

	// Public Imports
	UFadeColor(class UFadeColor const &);
	UFadeColor(void);
	class UFadeColor &  operator=(class UFadeColor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.ConstantColor
class DLL_IMPORT UConstantColor : public UConstantMaterial
{
public:
	class FColor                                       Color;                                            		// 0x0044 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UConstantColor(class UConstantColor const &);
	UConstantColor(void);
	class UConstantColor &  operator=(class UConstantColor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.Combiner
class DLL_IMPORT UCombiner : public UMaterial
{
public:
	int                                                combiner_dummy;                                   		// 0x0040 ( 0x0004 ) 
	unsigned char                                      CombineOperation;                                 		// 0x0044 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      AlphaOperation;                                   		// 0x0045 ( 0x0001 ) [ CPF_Edit ]
	class UMaterial*                                   Material1;                                        		// 0x0048 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Material2;                                        		// 0x004C ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Mask;                                             		// 0x0050 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	unsigned long                                      InvertMask:1;                                     		// 0x0054 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Modulate2X:1;                                     		// 0x0054 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      Modulate4X:1;                                     		// 0x0054 ( 0x0004 )  [0x00000004][ CPF_Edit ]

	// Public Imports
	UCombiner(class UCombiner const &);
	UCombiner(void);
	class UCombiner &  operator=(class UCombiner const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.DecalShader
class DLL_IMPORT UDecalShader : public URenderedMaterial
{
public:
	class UMaterial*                                   Diffuse;                                          		// 0x0044 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Opacity;                                          		// 0x0048 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Specular;                                         		// 0x004C ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   SpecularityMask;                                  		// 0x0050 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Normal;                                           		// 0x0054 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   SelfIllumination;                                 		// 0x0058 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   SelfIlluminationMask;                             		// 0x005C ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Detail;                                           		// 0x0060 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Cubemap;                                          		// 0x0064 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   DecalMap;                                         		// 0x0068 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	unsigned char                                      RenderTechnique;                                  		// 0x006C ( 0x0001 ) [ CPF_Edit ]
	float                                              DetailScale;                                      		// 0x0070 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       LocalAmbientColor;                                		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	float                                              SpecularLevel;                                    		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	float                                              Grossiness;                                       		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      OutputBlending;                                   		// 0x0080 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      AlphaRef;                                         		// 0x0081 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      TwoSided:1;                                       		// 0x0084 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Wireframe:1;                                      		// 0x0084 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      ModulateStaticLighting2X:1;                       		// 0x0084 ( 0x0004 )  [0x00000004]
	unsigned long                                      PerformLightingOnSpecularPass:1;                  		// 0x0084 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      ModulateSpecular2X:1;                             		// 0x0084 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	float                                              NormalZScale;                                     		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	float                                              LightScale;                                       		// 0x008C ( 0x0004 ) [ CPF_Edit ]
	float                                              AmbientLightScale;                                		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	float                                              RimLightStrength;                                 		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	float                                              RimLightPow;                                      		// 0x0098 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      UseSpecRGBGlossA:1;                               		// 0x009C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FPlane                                      EnvMapParms;                                      		// 0x00A0 ( 0x0010 ) [ CPF_Edit ]

	// UScript Functions
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.DecalShader.Trigger
	 void                      Reset (  );                                       		//  Engine.DecalShader.Reset

	// Public Imports
	UDecalShader(class UDecalShader const &);
	UDecalShader(void);
	class UDecalShader &  operator=(class UDecalShader const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x006C

// Class Engine.BlendShader
class DLL_IMPORT UBlendShader : public URenderedMaterial
{
public:
	class UMaterial*                                   DiffuseMap1;                                      		// 0x0044 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   DiffuseMap2;                                      		// 0x0048 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   NormalMap1;                                       		// 0x004C ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   NormalMap2;                                       		// 0x0050 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   MaskMap;                                          		// 0x0054 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   BS_CubeMap;                                       		// 0x0058 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	unsigned char                                      BlendTexcoordIndex;                               		// 0x005C ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      AlphaTest:1;                                      		// 0x0060 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      AlphaBlend:1;                                     		// 0x0060 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned char                                      AlphaRef;                                         		// 0x0064 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      TwoSided:1;                                       		// 0x0068 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseDynamicCubeMap:1;                              		// 0x0068 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	struct FPlane                                      EnvMapParms;                                      		// 0x006C ( 0x0010 ) [ CPF_Edit ]
	float                                              SpecularLevel;                                    		// 0x007C ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.BlendShader.Trigger
	 void                      Reset (  );                                       		//  Engine.BlendShader.Reset

	// Public Imports
	UBlendShader(class UBlendShader const &);
	UBlendShader(void);
	class UBlendShader &  operator=(class UBlendShader const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class Engine.Shader
class DLL_IMPORT UShader : public URenderedMaterial
{
public:
	class UMaterial*                                   Diffuse;                                          		// 0x0044 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Opacity;                                          		// 0x0048 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Specular;                                         		// 0x004C ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   SpecularityMask;                                  		// 0x0050 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Normal;                                           		// 0x0054 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   SelfIllumination;                                 		// 0x0058 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   SelfIlluminationMask;                             		// 0x005C ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Detail;                                           		// 0x0060 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	class UMaterial*                                   Cubemap;                                          		// 0x0064 ( 0x0004 ) [ CPF_Edit | CPF_EditInline | CPF_EditInlineUse ]
	unsigned char                                      RenderTechnique;                                  		// 0x0068 ( 0x0001 ) [ CPF_Edit ]
	float                                              DetailScale;                                      		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       LocalAmbientColor;                                		// 0x0070 ( 0x0004 ) [ CPF_Edit ]
	float                                              SpecularLevel;                                    		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	float                                              Grossiness;                                       		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      OutputBlending;                                   		// 0x007C ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      AlphaRef;                                         		// 0x007D ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      TwoSided:1;                                       		// 0x0080 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Wireframe:1;                                      		// 0x0080 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      ModulateStaticLighting2X:1;                       		// 0x0080 ( 0x0004 )  [0x00000004]
	unsigned long                                      PerformLightingOnSpecularPass:1;                  		// 0x0080 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      ModulateSpecular2X:1;                             		// 0x0080 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	float                                              NormalZScale;                                     		// 0x0084 ( 0x0004 ) [ CPF_Edit ]
	float                                              LightScale;                                       		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	float                                              AmbientLightScale;                                		// 0x008C ( 0x0004 ) [ CPF_Edit ]
	float                                              RimLightStrength;                                 		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	float                                              RimLightPow;                                      		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      UseSpecRGBGlossA:1;                               		// 0x0098 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FPlane                                      EnvMapParms;                                      		// 0x009C ( 0x0010 ) [ CPF_Edit ]

	// UScript Functions
	 void                      Trigger ( class AActor* Other, class AActor* EventInstigator );		//  Engine.Shader.Trigger
	 void                      Reset (  );                                       		//  Engine.Shader.Reset

	// Public Imports
	UShader(class UShader const &);
	UShader(void);
	class UShader &  operator=(class UShader const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0068

// Class Engine.ColorModifier
class DLL_IMPORT UColorModifier : public UModifier
{
public:
	class FColor                                       Color;                                            		// 0x0044 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      RenderTwoSided:1;                                 		// 0x0048 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      AlphaBlend:1;                                     		// 0x0048 ( 0x0004 )  [0x00000002][ CPF_Edit ]

	// Public Imports
	UColorModifier(class UColorModifier const &);
	class UColorModifier &  operator=(class UColorModifier const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.TexCoordMaterial
class DLL_IMPORT UTexCoordMaterial : public URenderedMaterial
{
public:
	unsigned char                                      _0x0044[ 0x08 ];                                  		// 0x0044 ( 0x0008 )

	// Public Imports
	UTexCoordMaterial(class UTexCoordMaterial const &);
	UTexCoordMaterial(void);
	class UTexCoordMaterial &  operator=(class UTexCoordMaterial const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.ProxyBitmapMaterial
class DLL_IMPORT UProxyBitmapMaterial : public UBitmapMaterial
{
public:
	unsigned char                                      _0x005C[ 0x04 ];                                  		// 0x005C ( 0x0004 )

	// Public Imports
	UProxyBitmapMaterial(class UProxyBitmapMaterial const &);
	UProxyBitmapMaterial(void);
	class UProxyBitmapMaterial &  operator=(class UProxyBitmapMaterial const &);
	static void  InternalConstructor(void *);
	void  SetTextureInterface(class FBaseTexture *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.ItemIterator
class DLL_IMPORT UItemIterator : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x64 ];                                  		// 0x002C ( 0x0064 )

	// Public Imports
	UItemIterator(class UItemIterator const &);
	UItemIterator(void);
	class UItemIterator &  operator=(class UItemIterator const &);
	void  DestroyNative(void);
	int  GetItemIndex(int);
	int  GetPartGroupIndex(int);
	int  GetSkillIndex(int);
	int  GetWeaponCustomInfoIndex(int);
	int  GetWeaponCustomPartsIndex(int);
	static void  InternalConstructor(void *);
	int  SetItemIndex(int,int);
	int  SetPartGroupIndex(int,int);
	int  SetSkillIndex(int,int);
	int  SetWeaponCustomInfoIndex(int,int);
	int  SetWeaponCustomPartsIndex(int,int);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0064

// Class Engine.LevelBase
class DLL_IMPORT ULevelBase : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x68 ];                                  		// 0x002C ( 0x0068 )

	// Public Imports
	ULevelBase(class ULevelBase const &);
	ULevelBase(class UEngine *,class FURL const &);
	class ULevelBase &  operator=(class ULevelBase const &);
	void  DestroyNetDriver(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0068

// Class Engine.Level
class DLL_IMPORT ULevel : public ULevelBase
{
public:
	unsigned char                                      _0x0094[ 0x11C0 ];                                		// 0x0094 ( 0x11C0 )

	// Public Imports
	ULevel(class ULevel const &);
	ULevel(class UEngine *,int);
	class ULevel &  operator=(class ULevel const &);
	class ABrush *  Brush(void);
	int  ChangeToClient(unsigned short const *);
	int  ChangeToServer(unsigned short const *);
	void  CheckDefaultGameType(unsigned short const *);
	int  CreateGameInfo(class UPackageMap *);
	int  EditorDestroyActor(class AActor *);
	int  GetActorIndex(class AActor *);
	class ALevelInfo *  GetLevelInfo(void);
	class APawn *  GetPawn(class FString);
	class APawn *  GetPawnWithLog(class FString);
	class AZoneInfo *  GetZoneActor(int);
	static void  InternalConstructor(void *);
	void  LoadSounds(void);
	void  NotifyReceivedTextSupportPendingLevel(class UNetDriver *,class UNetConnection *,unsigned short const *);
	int  SetNetDriver(class UNetDriver *,class FString &);
	static class UClass *  StaticClass(void);
	int  ToFloor(class AActor *,int,class AActor *);
	void  UpdateTerrainArrays(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x11C0

// Class Engine.InteractionMaster
class DLL_IMPORT UInteractionMaster : public UInteractions
{
public:
	class UClient*                                     Client;                                           		// 0x002C ( 0x0004 ) [ CPF_Transient ]
	class UInteraction*                                BaseMenu;                                         		// 0x0030 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UInteraction*                                Console;                                          		// 0x0034 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class TArray< class UInteraction* >                GlobalInteractions;                               		// 0x0038 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	unsigned long                                      bRequireRawJoystick:1;                            		// 0x0044 ( 0x0004 )  [0x00000001][ CPF_Transient ]

	// UScript Functions
	 void                      eventEnableInteractions ( class TArray< class UInteraction* > InteractionArray );		// [ FUNC_Event ] Engine.InteractionMaster.EnableInteractions
	 void                      eventDisableInteractions ( class TArray< class UInteraction* > InteractionArray );		// [ FUNC_Event ] Engine.InteractionMaster.DisableInteractions
	 void                      eventNotifyLevelChange ( class TArray< class UInteraction* > InteractionArray );		// [ FUNC_Event ] Engine.InteractionMaster.NotifyLevelChange
	 void                      eventProcess_Message ( struct FString Msg, float MsgLife, class TArray< class UInteraction* > InteractionArray );		// [ FUNC_Event ] Engine.InteractionMaster.Process_Message
	 void                      eventProcess_Tick ( class TArray< class UInteraction* > InteractionArray, float DeltaTime );		// [ FUNC_Event ] Engine.InteractionMaster.Process_Tick
	 void                      eventProcess_PostRender ( class TArray< class UInteraction* > InteractionArray, class UCanvas* Canvas );		// [ FUNC_Event ] Engine.InteractionMaster.Process_PostRender
	 void                      eventProcess_PreRender ( class TArray< class UInteraction* > InteractionArray, class UCanvas* Canvas );		// [ FUNC_Event ] Engine.InteractionMaster.Process_PreRender
	 bool                      eventProcess_KeyEvent ( class TArray< class UInteraction* > InteractionArray, float Delta, unsigned char* key, unsigned char* Action );		// [ FUNC_Event ] Engine.InteractionMaster.Process_KeyEvent
	 bool                      eventProcess_KeyType ( class TArray< class UInteraction* > InteractionArray, struct FString Unicode, unsigned char* key );		// [ FUNC_Event ] Engine.InteractionMaster.Process_KeyType
	 void                      eventSetFocusTo ( class UInteraction* Inter, class UPlayer* ViewportOwner );		// [ FUNC_Event ] Engine.InteractionMaster.SetFocusTo
	 void                      eventRemoveInteraction ( class UInteraction* RemoveMe );		// [ FUNC_Event ] Engine.InteractionMaster.RemoveInteraction
	 class UInteraction*       eventAddInteraction ( struct FString InteractionName, class UPlayer* AttachTo );		// [ FUNC_Event ] Engine.InteractionMaster.AddInteraction
	 void                      Travel ( struct FString URL );                    		// [ FUNC_Native ] Engine.InteractionMaster.Travel

	// Public Imports
	UInteractionMaster(class UInteractionMaster const &);
	UInteractionMaster(void);
	class UInteractionMaster &  operator=(class UInteractionMaster const &);
	void  DisplayCopyright(void);
	int  Exec(unsigned short const *,class FOutputDevice &);
	static void  InternalConstructor(void *);
	void  MasterDisableInteractions(void);
	void  MasterEnableInteractions(void);
	void  MasterIME_Notify(int,unsigned short,class FString,int,int);
	int  MasterProcessKeyEvent(enum EInputKey,enum EInputAction,float);
	int  MasterProcessKeyType(enum EInputKey,unsigned short);
	void  MasterProcessMessage(class FString const &,float);
	void  MasterProcessPostRender(class UCanvas *);
	void  MasterProcessPreRender(class UCanvas *);
	void  MasterProcessTick(float);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.BaseGUIController
class DLL_IMPORT UBaseGUIController : public UInteraction
{
public:
	class UMaterial*                                   DefaultPens[ 0x03 ];                              		// 0x0038 ( 0x000C ) 
	struct FString                                     NetworkMsgMenu;                                   		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     QuestionMenuClass;                                		// 0x0050 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Time;                                             		// 0x005C ( 0x0004 ) 
	int                                                LocalTime;                                        		// 0x0060 ( 0x0004 ) 
	float                                              CumulatedElapsedTime;                             		// 0x0064 ( 0x0004 ) 
	struct FScriptDelegate                             __OnAdminReply__Delegate;                         		// 0x0068 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      SetTime ( int newTime );                          		//  Engine.BaseGUIController.SetTime
	 bool                      eventNeedToOffIME (  );                           		// [ FUNC_Event ] Engine.BaseGUIController.NeedToOffIME
	 void                      eventSetRequiredGameResolution ( struct FString GameRes );		// [ FUNC_Event ] Engine.BaseGUIController.SetRequiredGameResolution
	 bool                      eventNeedsMenuResolution (  );                    		// [ FUNC_Event ] Engine.BaseGUIController.NeedsMenuResolution
	 void                      eventInitializeController (  );                   		// [ FUNC_Event ] Engine.BaseGUIController.InitializeController
	 void                      SetControllerStatus ( bool On );                  		//  Engine.BaseGUIController.SetControllerStatus
	 bool                      eventClickCloseWndBtn (  );                       		// [ FUNC_Event ] Engine.BaseGUIController.ClickCloseWndBtn
	 void                      eventCloseAll ( bool bCancel, bool bForced );     		// [ FUNC_Event ] Engine.BaseGUIController.CloseAll
	 bool                      eventCloseMenu ( bool bCanceled );                		// [ FUNC_Event ] Engine.BaseGUIController.CloseMenu
	 bool                      eventReplaceMenu ( struct FString NewMenuName, struct FString Param1, struct FString Param2, bool bCancelled );		// [ FUNC_Event ] Engine.BaseGUIController.ReplaceMenu
	 void                      eventAutoLoadMenus (  );                          		// [ FUNC_Event ] Engine.BaseGUIController.AutoLoadMenus
	 bool                      eventOpenMenu ( struct FString NewMenuName, struct FString Param1, struct FString Param2 );		// [ FUNC_Event ] Engine.BaseGUIController.OpenMenu
	 void                      OnAdminReply ( struct FString Reply );            		//  Engine.BaseGUIController.OnAdminReply

	// Public Imports
	UBaseGUIController(class UBaseGUIController const &);
	UBaseGUIController(void);
	class UBaseGUIController &  operator=(class UBaseGUIController const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnAdminReply(class FString const &);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.Console
class DLL_IMPORT UConsole : public UInteraction
{
public:
	unsigned char                                      ConsoleHotKey;                                    		// 0x0038 ( 0x0001 ) 
	int                                                HistoryTop;                                       		// 0x003C ( 0x0004 ) 
	int                                                HistoryBot;                                       		// 0x0040 ( 0x0004 ) 
	int                                                HistoryCur;                                       		// 0x0044 ( 0x0004 ) 
	struct FString                                     TypedStr;                                         		// 0x0048 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     History[ 0x10 ];                                  		// 0x0054 ( 0x00C0 ) [ CPF_NeedCtorLink ]
	int                                                TypedStrPos;                                      		// 0x0114 ( 0x0004 ) 
	unsigned long                                      bTyping:1;                                        		// 0x0118 ( 0x0004 )  [0x00000001]
	unsigned long                                      bIgnoreKeys:1;                                    		// 0x0118 ( 0x0004 )  [0x00000002]
	int                                                CheatKeyStringMaxLength;                          		// 0x011C ( 0x0004 ) 
	struct FString                                     cheatKeyString;                                   		// 0x0120 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bRunningDemo:1;                                   		// 0x012C ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Transient ]
	unsigned long                                      bHoldingStart:1;                                  		// 0x012C ( 0x0004 )  [0x00000002][ CPF_Edit | CPF_Transient ]
	unsigned long                                      bHoldingBack:1;                                   		// 0x012C ( 0x0004 )  [0x00000004][ CPF_Edit | CPF_Transient ]
	float                                              TimeIdle;                                         		// 0x0130 ( 0x0004 ) [ CPF_Edit | CPF_Transient ]
	float                                              TimeHoldingReboot;                                		// 0x0134 ( 0x0004 ) [ CPF_Edit | CPF_Transient ]
	float                                              TimePerTitle;                                     		// 0x0138 ( 0x0004 ) [ CPF_Edit ]
	float                                              TimePerDemo;                                      		// 0x013C ( 0x0004 ) [ CPF_Edit ]
	float                                              TimeTooIdle;                                      		// 0x0140 ( 0x0004 ) [ CPF_Edit ]
	float                                              TimeBeforeReboot;                                 		// 0x0144 ( 0x0004 ) [ CPF_Edit ]
	float                                              TimePerSoak;                                      		// 0x0148 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     DemoLevels[ 0x40 ];                               		// 0x014C ( 0x0300 ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FString >                     BufferedConsoleCommands;                          		// 0x044C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bUseConsole:1;                                    		// 0x0458 ( 0x0004 )  [0x00000001]
	unsigned long                                      bUseCheat:1;                                      		// 0x0458 ( 0x0004 )  [0x00000002]

	// UScript Functions
	 bool                      eventNeedToOffIME (  );                           		// [ FUNC_Event ] Engine.Console.NeedToOffIME
	 bool                      IsInputTimeTooIdle (  );                          		//  Engine.Console.IsInputTimeTooIdle
	 bool                      IsBGMPlaying (  );                                		//  Engine.Console.IsBGMPlaying
	 void                      SetTermBetweenBGM ( float val );                  		//  Engine.Console.SetTermBetweenBGM
	 void                      UpdateBGM ( float dt );                           		//  Engine.Console.UpdateBGM
	 void                      NextBGM (  );                                     		//  Engine.Console.NextBGM
	 void                      SetBGMAdvanced ( class TArray< struct FString > List, bool partialPlay, int partialDuration, class TArray< struct FIntArray > initialSeeks );		//  Engine.Console.SetBGMAdvanced
	 void                      SetBGM ( class TArray< struct FString > List );   		//  Engine.Console.SetBGM
	 void                      SetOneBGM ( struct FString List );                		//  Engine.Console.SetOneBGM
	 void                      SetOneChangeIgnore (  );                          		//  Engine.Console.SetOneChangeIgnore
	 void                      StopBGM (  );                                     		//  Engine.Console.StopBGM
	 struct FString            GetCurrentBGM (  );                               		//  Engine.Console.GetCurrentBGM
	 void                      ClearMessageItems (  );                           		//  Engine.Console.ClearMessageItems
	 void                      AddMessageItem ( struct FMessageItem Item );      		//  Engine.Console.AddMessageItem
	 struct FMessageItem       ConstructMessageItem ( struct FString Text, unsigned char MessageType );		//  Engine.Console.ConstructMessageItem
	 struct FString            SetInitialMusic ( struct FString NewSong );       		//  Engine.Console.SetInitialMusic
	 void                      SetMusic ( struct FString NewSong );              		//  Engine.Console.SetMusic
	 void                      eventConnectFailure ( struct FString FailCode, struct FString URL );		// [ FUNC_Event ] Engine.Console.ConnectFailure
	 void                      eventTick ( float Delta );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.Console.Tick
	 void                      TypingClose (  );                                 		//  Engine.Console.TypingClose
	 void                      TypingOpen (  );                                  		//  Engine.Console.TypingOpen
	 bool                      eventKeyEvent ( unsigned char key, unsigned char Action, float Delta );		// [ FUNC_Event ] Engine.Console.KeyEvent
	 void                      ProcessCheat ( unsigned char key, unsigned char Action );		//  Engine.Console.ProcessCheat
	 bool                      HasCheat ( struct FString str );                  		//  Engine.Console.HasCheat
	 void                      eventMessage ( struct FString Msg, float MsgLife );		// [ FUNC_Event ] Engine.Console.Message
	 void                      Chat ( struct FString Msg, float MsgLife, class APlayerReplicationInfo* PRI );		//  Engine.Console.Chat
	 void                      DelayedConsoleCommand ( struct FString Command ); 		//  Engine.Console.DelayedConsoleCommand
	 void                      eventNotifyLevelChange (  );                      		// [ FUNC_Event ] Engine.Console.NotifyLevelChange
	 void                      execStopRollingDemo (  );                         		// [ FUNC_Exec ] Engine.Console.StopRollingDemo
	 void                      execStartRollingDemo (  );                        		// [ FUNC_Exec ] Engine.Console.StartRollingDemo
	 void                      execConsoleToggle (  );                           		// [ FUNC_Exec ] Engine.Console.ConsoleToggle
	 void                      execConsoleClose (  );                            		// [ FUNC_Exec ] Engine.Console.ConsoleClose
	 void                      execConsoleOpen (  );                             		// [ FUNC_Exec ] Engine.Console.ConsoleOpen
	 void                      execTeamTalk (  );                                		// [ FUNC_Exec ] Engine.Console.TeamTalk
	 void                      execTalk (  );                                    		// [ FUNC_Exec ] Engine.Console.Talk
	 void                      execType (  );                                    		// [ FUNC_Exec ] Engine.Console.Type
	 void                      UnPressButtons (  );                              		//  Engine.Console.UnPressButtons
	 void                      eventNativeConsoleOpen (  );                      		// [ FUNC_Event ] Engine.Console.NativeConsoleOpen
	 void                      eventViewportInitialized (  );                    		// [ FUNC_Event ] Engine.Console.ViewportInitialized
	 void                      eventInitialized (  );                            		// [ FUNC_Event ] Engine.Console.Initialized
	 void                      RecordOn_Exception ( int retCode );               		//  Engine.Console.RecordOn_Exception

	// Public Imports
	UConsole(class UConsole const &);
	class UConsole &  operator=(class UConsole const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0424

// Class Engine.Input
class DLL_IMPORT UInput : public USubsystem
{
public:
	struct FAlias                                      Aliases[ 0x28 ];                                  		// 0x0030 ( 0x0280 ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     StrProperty0;                                     		// 0x02B0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     LeftMouse;                                        		// 0x02BC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     RightMouse;                                       		// 0x02C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Cancel;                                           		// 0x02D4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MiddleMouse;                                      		// 0x02E0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown05;                                        		// 0x02EC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown06;                                        		// 0x02F8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown07;                                        		// 0x0304 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Backspace;                                        		// 0x0310 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Tab;                                              		// 0x031C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown0A;                                        		// 0x0328 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown0B;                                        		// 0x0334 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown0C;                                        		// 0x0340 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Enter;                                            		// 0x034C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown0E;                                        		// 0x0358 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown0F;                                        		// 0x0364 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Shift;                                            		// 0x0370 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Ctrl;                                             		// 0x037C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     alt;                                              		// 0x0388 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Pause;                                            		// 0x0394 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     CapsLock;                                         		// 0x03A0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown15;                                        		// 0x03AC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown16;                                        		// 0x03B8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown17;                                        		// 0x03C4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown18;                                        		// 0x03D0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown19;                                        		// 0x03DC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Uwwwwwnknown1A;                                   		// 0x03E8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Escape;                                           		// 0x03F4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown1C;                                        		// 0x0400 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown1D;                                        		// 0x040C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown1E;                                        		// 0x0418 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown1F;                                        		// 0x0424 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Space;                                            		// 0x0430 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     PageUp;                                           		// 0x043C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     PageDown;                                         		// 0x0448 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     End;                                              		// 0x0454 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     home;                                             		// 0x0460 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Left;                                             		// 0x046C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Up;                                               		// 0x0478 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Right;                                            		// 0x0484 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Down;                                             		// 0x0490 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Select;                                           		// 0x049C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Print;                                            		// 0x04A8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Execute;                                          		// 0x04B4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     PrintScrn;                                        		// 0x04C0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Insert;                                           		// 0x04CC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Delete;                                           		// 0x04D8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Help;                                             		// 0x04E4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _0;                                               		// 0x04F0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _1;                                               		// 0x04FC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _2;                                               		// 0x0508 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _3;                                               		// 0x0514 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _4;                                               		// 0x0520 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _5;                                               		// 0x052C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _6;                                               		// 0x0538 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _7;                                               		// 0x0544 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _8;                                               		// 0x0550 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     _9;                                               		// 0x055C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown3A;                                        		// 0x0568 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown3B;                                        		// 0x0574 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown3C;                                        		// 0x0580 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown3D;                                        		// 0x058C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown3E;                                        		// 0x0598 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown3F;                                        		// 0x05A4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown40;                                        		// 0x05B0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     A;                                                		// 0x05BC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     B;                                                		// 0x05C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     C;                                                		// 0x05D4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     D;                                                		// 0x05E0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     E;                                                		// 0x05EC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     f;                                                		// 0x05F8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     G;                                                		// 0x0604 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     H;                                                		// 0x0610 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     i;                                                		// 0x061C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     j;                                                		// 0x0628 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     k;                                                		// 0x0634 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     L;                                                		// 0x0640 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     M;                                                		// 0x064C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     N;                                                		// 0x0658 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     o;                                                		// 0x0664 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     P;                                                		// 0x0670 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     q;                                                		// 0x067C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     R;                                                		// 0x0688 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     S;                                                		// 0x0694 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     t;                                                		// 0x06A0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     U;                                                		// 0x06AC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     V;                                                		// 0x06B8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     W;                                                		// 0x06C4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     X;                                                		// 0x06D0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Y;                                                		// 0x06DC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Z;                                                		// 0x06E8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown5B;                                        		// 0x06F4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown5C;                                        		// 0x0700 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown5D;                                        		// 0x070C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown5E;                                        		// 0x0718 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown5F;                                        		// 0x0724 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad0;                                          		// 0x0730 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad1;                                          		// 0x073C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad2;                                          		// 0x0748 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad3;                                          		// 0x0754 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad4;                                          		// 0x0760 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad5;                                          		// 0x076C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad6;                                          		// 0x0778 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad7;                                          		// 0x0784 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad8;                                          		// 0x0790 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPad9;                                          		// 0x079C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     GreyStar;                                         		// 0x07A8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     GreyPlus;                                         		// 0x07B4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Separator;                                        		// 0x07C0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     GreyMinus;                                        		// 0x07CC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumPadPeriod;                                     		// 0x07D8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     GreySlash;                                        		// 0x07E4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F1;                                               		// 0x07F0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F2;                                               		// 0x07FC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F3;                                               		// 0x0808 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F4;                                               		// 0x0814 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F5;                                               		// 0x0820 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F6;                                               		// 0x082C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F7;                                               		// 0x0838 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F8;                                               		// 0x0844 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F9;                                               		// 0x0850 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F10;                                              		// 0x085C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F11;                                              		// 0x0868 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F12;                                              		// 0x0874 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F13;                                              		// 0x0880 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F14;                                              		// 0x088C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F15;                                              		// 0x0898 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F16;                                              		// 0x08A4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F17;                                              		// 0x08B0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F18;                                              		// 0x08BC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F19;                                              		// 0x08C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F20;                                              		// 0x08D4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F21;                                              		// 0x08E0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F22;                                              		// 0x08EC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F23;                                              		// 0x08F8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     F24;                                              		// 0x0904 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown88;                                        		// 0x0910 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown89;                                        		// 0x091C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown8A;                                        		// 0x0928 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown8B;                                        		// 0x0934 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown8C;                                        		// 0x0940 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown8D;                                        		// 0x094C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown8E;                                        		// 0x0958 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown8F;                                        		// 0x0964 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NumLock;                                          		// 0x0970 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ScrollLock;                                       		// 0x097C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown92;                                        		// 0x0988 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown93;                                        		// 0x0994 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown94;                                        		// 0x09A0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown95;                                        		// 0x09AC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown96;                                        		// 0x09B8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown97;                                        		// 0x09C4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown98;                                        		// 0x09D0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown99;                                        		// 0x09DC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown9A;                                        		// 0x09E8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown9B;                                        		// 0x09F4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown9C;                                        		// 0x0A00 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown9D;                                        		// 0x0A0C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown9E;                                        		// 0x0A18 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown9F;                                        		// 0x0A24 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     LShift;                                           		// 0x0A30 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     RShift;                                           		// 0x0A3C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     LControl;                                         		// 0x0A48 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     RControl;                                         		// 0x0A54 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownA4;                                        		// 0x0A60 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownA5;                                        		// 0x0A6C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownA6;                                        		// 0x0A78 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownA7;                                        		// 0x0A84 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownA8;                                        		// 0x0A90 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownA9;                                        		// 0x0A9C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownAA;                                        		// 0x0AA8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownAB;                                        		// 0x0AB4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownAC;                                        		// 0x0AC0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownAD;                                        		// 0x0ACC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownAE;                                        		// 0x0AD8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownAF;                                        		// 0x0AE4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB0;                                        		// 0x0AF0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB1;                                        		// 0x0AFC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB2;                                        		// 0x0B08 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB3;                                        		// 0x0B14 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB4;                                        		// 0x0B20 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB5;                                        		// 0x0B2C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB6;                                        		// 0x0B38 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB7;                                        		// 0x0B44 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownB8;                                        		// 0x0B50 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unicode;                                          		// 0x0B5C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Semicolon;                                        		// 0x0B68 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Equals;                                           		// 0x0B74 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Comma;                                            		// 0x0B80 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Minus;                                            		// 0x0B8C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Period;                                           		// 0x0B98 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Slash;                                            		// 0x0BA4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Tilde;                                            		// 0x0BB0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Mouse4;                                           		// 0x0BBC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Mouse5;                                           		// 0x0BC8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Mouse6;                                           		// 0x0BD4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Mouse7;                                           		// 0x0BE0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Mouse8;                                           		// 0x0BEC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownC6;                                        		// 0x0BF8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownC7;                                        		// 0x0C04 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy1;                                             		// 0x0C10 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy2;                                             		// 0x0C1C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy3;                                             		// 0x0C28 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy4;                                             		// 0x0C34 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy5;                                             		// 0x0C40 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy6;                                             		// 0x0C4C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy7;                                             		// 0x0C58 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy8;                                             		// 0x0C64 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy9;                                             		// 0x0C70 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy10;                                            		// 0x0C7C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy11;                                            		// 0x0C88 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy12;                                            		// 0x0C94 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy13;                                            		// 0x0CA0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy14;                                            		// 0x0CAC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy15;                                            		// 0x0CB8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Joy16;                                            		// 0x0CC4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownD8;                                        		// 0x0CD0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownD9;                                        		// 0x0CDC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownDA;                                        		// 0x0CE8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     LeftBracket;                                      		// 0x0CF4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Backslash;                                        		// 0x0D00 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     RightBracket;                                     		// 0x0D0C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     SingleQuote;                                      		// 0x0D18 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownDF;                                        		// 0x0D24 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownE0;                                        		// 0x0D30 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownE1;                                        		// 0x0D3C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownE2;                                        		// 0x0D48 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownE3;                                        		// 0x0D54 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MouseX;                                           		// 0x0D60 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MouseY;                                           		// 0x0D6C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MouseZ;                                           		// 0x0D78 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MouseW;                                           		// 0x0D84 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoyU;                                             		// 0x0D90 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoyV;                                             		// 0x0D9C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoySlider1;                                       		// 0x0DA8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoySlider2;                                       		// 0x0DB4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MouseWheelUp;                                     		// 0x0DC0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MouseWheelDown;                                   		// 0x0DCC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown10E;                                       		// 0x0DD8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Unknown10F;                                       		// 0x0DE4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoyX;                                             		// 0x0DF0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoyY;                                             		// 0x0DFC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoyZ;                                             		// 0x0E08 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     JoyR;                                             		// 0x0E14 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownF4;                                        		// 0x0E20 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     UnknownF5;                                        		// 0x0E2C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Attn;                                             		// 0x0E38 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     CrSel;                                            		// 0x0E44 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ExSel;                                            		// 0x0E50 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ErEof;                                            		// 0x0E5C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Play;                                             		// 0x0E68 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Zoom;                                             		// 0x0E74 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     NoName;                                           		// 0x0E80 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     PA1;                                              		// 0x0E8C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     OEMClear;                                         		// 0x0E98 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      _0x0EA4[ 0x120 ];                                 		// 0x0EA4 ( 0x0120 )

	// Public Imports
	UInput(class UInput const &);
	UInput(void);
	class UInput &  operator=(class UInput const &);
	void  GetBindKeyInput(void);
	enum EInputAction  GetInputAction(void);
	float  GetInputDelta(void);
	float  GetKeySleepTime(void);
	static void  InternalConstructor(void *);
	unsigned char  KeyDown(int);
	void  ResetKeySleepTime(void);
	void  SetBaseBtrInputAliases(void);
	void  SetInputAction(enum EInputAction,float);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);
	static void  StaticInitInput(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0F94

// Class Engine.WMFile
class DLL_IMPORT UWMFile : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x0C ];                                  		// 0x002C ( 0x000C )

	// Public Imports
	UWMFile(class UWMFile const &);
	UWMFile(void);
	class UWMFile &  operator=(class UWMFile const &);
	void  GetParams(class UwWeaponManager *);
	static void  InternalConstructor(void *);
	void  SetData(class UwWeaponManager const *);
	static class UClass *  StaticClass(void);
	void  cpy_WeaponBaseParam(class UwWeaponBaseParams *,class FWeaponBaseParam const *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.GMFile
class DLL_IMPORT UGMFile : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x150 ];                                 		// 0x002C ( 0x0150 )

	// Public Imports
	UGMFile(class UGMFile const &);
	UGMFile(void);
	class UGMFile &  operator=(class UGMFile const &);
	void  GetParams(class UwGameManager *);
	static void  InternalConstructor(void *);
	void  SetData(class UwGameManager const *);
	static class UClass *  StaticClass(void);
	void  cpy_ClanLevelInfoParam(class UwClanLevelInfoParam *,class FClanLevelInfoParam const *);
	void  cpy_ClanMarkParam(class UwClanMarkParam *,class FClanMarkParam const *);
	void  cpy_DailyQuestParam(class UwDailyQuestParam *,class FDailyQuestParam const *);
	void  cpy_DefenceGameParam(class UwDefenceGameParam *,class FDefenceGameParam const *);
	void  cpy_ItemBaseParam(class UwItemBaseParam *,class FItemBaseParam const *);
	void  cpy_ItemBoxParam(class UwItemBoxParam *,class FItemBoxParam const *);
	void  cpy_ItemResourceParam(class UwItemResourceParam *,class FItemResourceParam const *);
	void  cpy_LevelInfoParam(class UwLevelInfoParam *,class FLevelInfoParam const *);
	void  cpy_MapInfo(class UwMapInfo *,class FMapInfo const *);
	void  cpy_ModeDOAParam(class UwModeDOAParam *,class FModeDOAParam const *);
	void  cpy_NPCActionGroupParam(class UwNPCActionGroupParam *,class FNPCActionGroupParam const *);
	void  cpy_NPCItemGroupParam(class UwNPCItemGroupParam *,class FNPCItemGroupParam const *);
	void  cpy_NPCNameGroupParam(class UwNPCNameGroupParam *,class FNPCNameGroupParam const *);
	void  cpy_NPCParam(class UwNPCParam *,class FNPCParam const *);
	void  cpy_NPCSPawnParam(class UwNPCSpawnParam *,class FNPCSpawnParam const *);
	void  cpy_PaintGroupParam(class UwPaintGroupParam *,class FPaintGroupParam const *);
	void  cpy_PartsGroupParam(class UwPartsGroupParam *,class FPartsGroupParam const *);
	void  cpy_PromotionParam(class UwPromotionParam *,class FPromotionParam const *);
	void  cpy_QuestParam(class UwQuestParam *,class FQuestParam const *);
	void  cpy_RandBoxParam(class UwRandBoxParam *,class FRandBoxParam const *);
	void  cpy_SkillBaseParam(class UwSkillBaseParam *,class FSkillBaseParam const *);
	void  cpy_WeaponCustomInfoParam(class UwWeaponCustomInfoParam *,class FWeaponCustomInfoParam const *);
	void  cpy_WeaponCustomPartsParam(class UwWeaponCustomPartsParam *,class FWeaponCustomPartsParam const *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0150

// Class Engine.MaplistManagerBase
class DLL_IMPORT AMaplistManagerBase : public AInfo
{
public:

	// UScript Functions
	 class TArray< struct FString > GetCacheMapList ( struct FString Acronym );       		//  Engine.MaplistManagerBase.GetCacheMapList
	 int                       FindCacheGameIndex ( struct FString GameType );   		//  Engine.MaplistManagerBase.FindCacheGameIndex
	 void                      ShiftMap ( int GameIndex, int RecordIndex, struct FString MapName, int Count );		//  Engine.MaplistManagerBase.ShiftMap
	 bool                      SaveMapList ( int GameIndex, int RecordIndex );   		//  Engine.MaplistManagerBase.SaveMapList
	 bool                      SaveGame ( int GameIndex );                       		//  Engine.MaplistManagerBase.SaveGame
	 void                      MapChange ( struct FString NewMapName );          		//  Engine.MaplistManagerBase.MapChange
	 bool                      ApplyMapList ( int GameIndex, int RecordIndex );  		//  Engine.MaplistManagerBase.ApplyMapList
	 int                       GetActiveMap ( int GameIndex, int RecordIndex );  		//  Engine.MaplistManagerBase.GetActiveMap
	 bool                      SetActiveList ( int GameIndex, int NewActive );   		//  Engine.MaplistManagerBase.SetActiveList
	 int                       GetActiveList ( int GameIndex );                  		//  Engine.MaplistManagerBase.GetActiveList
	 class TArray< struct FString > GetMapList ( int GameIndex, int RecordIndex );    		//  Engine.MaplistManagerBase.GetMapList
	 class TArray< struct FString > GetCurrentMapRotation (  );                       		//  Engine.MaplistManagerBase.GetCurrentMapRotation
	 class TArray< struct FString > GetMapListNames ( int GameIndex );                		//  Engine.MaplistManagerBase.GetMapListNames
	 struct FString            GetMapListTitle ( int GameIndex, int RecordIndex );		//  Engine.MaplistManagerBase.GetMapListTitle
	 int                       GetRecordIndex ( int GameIndex, struct FString MapListName );		//  Engine.MaplistManagerBase.GetRecordIndex
	 int                       GetMapIndex ( int GameIndex, int RecordIndex, struct FString MapName );		//  Engine.MaplistManagerBase.GetMapIndex
	 int                       GetGameIndex ( struct FString GameType );         		//  Engine.MaplistManagerBase.GetGameIndex
	 bool                      RemoveMap ( int GameIndex, int MapIndex, struct FString MapName );		//  Engine.MaplistManagerBase.RemoveMap
	 bool                      AddMap ( int GameIndex, int RecordIndex, struct FString MapName );		//  Engine.MaplistManagerBase.AddMap
	 bool                      ClearList ( int GameIndex, int RecordIndex );     		//  Engine.MaplistManagerBase.ClearList
	 int                       RenameList ( int GameIndex, int RecordIndex, struct FString NewName );		//  Engine.MaplistManagerBase.RenameList
	 void                      ResetList ( int GameIndex, int RecordIndex );     		//  Engine.MaplistManagerBase.ResetList
	 void                      ResetGame ( int GameIndex );                      		//  Engine.MaplistManagerBase.ResetGame
	 int                       RemoveList ( int GameIndex, int RecordIndex );    		//  Engine.MaplistManagerBase.RemoveList
	 int                       AddList ( struct FString GameType, struct FString NewName, class TArray< struct FString > Maps );		//  Engine.MaplistManagerBase.AddList
	 bool                      ValidGameIndex ( int i );                         		//  Engine.MaplistManagerBase.ValidGameIndex
	 bool                      ValidCacheGameIndex ( int i );                    		//  Engine.MaplistManagerBase.ValidCacheGameIndex
	 bool                      ValidName ( struct FString S );                   		//  Engine.MaplistManagerBase.ValidName
	 bool                      ValidGameType ( struct FString GameType );        		//  Engine.MaplistManagerBase.ValidGameType

	// Public Imports
	AMaplistManagerBase(class AMaplistManagerBase const &);
	class AMaplistManagerBase &  operator=(class AMaplistManagerBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.PrecacheHack
class DLL_IMPORT APrecacheHack : public AActor
{
public:
	class TArray< class UMaterial* >                   Materials;                                        		// 0x03C8 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	APrecacheHack(class APrecacheHack const &);
	class APrecacheHack &  operator=(class APrecacheHack const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.CrosshairPack
class DLL_IMPORT UCrosshairPack : public UObject
{
public:
	class TArray< struct FCrosshairItem >              Crosshair;                                        		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]

	// Public Imports
	UCrosshairPack(class UCrosshairPack const &);
	class UCrosshairPack &  operator=(class UCrosshairPack const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.Engine
class DLL_IMPORT UEngine : public USubsystem
{
public:
	class UPrimitive*                                  Cylinder;                                         		// 0x0030 ( 0x0004 ) 
	class UClient*                                     Client;                                           		// 0x0034 ( 0x0004 ) [ CPF_Const ]
	class UAudioSubsystem*                             Audio;                                            		// 0x0038 ( 0x0004 ) [ CPF_Const ]
	class URenderDevice*                               GRenDev;                                          		// 0x003C ( 0x0004 ) [ CPF_Const ]
	class UwMatchMaker*                                GMatchMaker;                                      		// 0x0040 ( 0x0004 ) [ CPF_Const ]
	int                                                bShowFrameRate;                                   		// 0x0044 ( 0x0004 ) 
	int                                                bShowRenderStats;                                 		// 0x0048 ( 0x0004 ) 
	int                                                bShowHardwareStats;                               		// 0x004C ( 0x0004 ) 
	int                                                bShowGameStats;                                   		// 0x0050 ( 0x0004 ) 
	int                                                bShowNetStats;                                    		// 0x0054 ( 0x0004 ) 
	int                                                bShowAnimStats;                                   		// 0x0058 ( 0x0004 ) 
	int                                                bShowLIPSincStats;                                		// 0x005C ( 0x0004 ) 
	int                                                bShowHistograph;                                  		// 0x0060 ( 0x0004 ) 
	int                                                bShowXboxMemStats;                                		// 0x0064 ( 0x0004 ) 
	int                                                bShowMatineeStats;                                		// 0x0068 ( 0x0004 ) 
	int                                                bShowAudioStats;                                  		// 0x006C ( 0x0004 ) 
	int                                                bShowLightStats;                                  		// 0x0070 ( 0x0004 ) 
	int                                                TickCycles;                                       		// 0x0074 ( 0x0004 ) 
	int                                                GameCycles;                                       		// 0x0078 ( 0x0004 ) 
	int                                                ClientCycles;                                     		// 0x007C ( 0x0004 ) 
	int                                                CacheSizeMegs;                                    		// 0x0080 ( 0x0004 ) 
	unsigned long                                      UseSound:1;                                       		// 0x0084 ( 0x0004 )  [0x00000001]
	unsigned long                                      UseStaticMeshBatching:1;                          		// 0x0084 ( 0x0004 )  [0x00000002]
	unsigned long                                      ServerReadsStdin:1;                               		// 0x0084 ( 0x0004 )  [0x00000004]
	unsigned long                                      bSlowRefChecking:1;                               		// 0x0084 ( 0x0004 )  [0x00000008][ CPF_Config ]
	float                                              CurrentTickRate;                                  		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	int                                                DetectedVideoMemory;                              		// 0x008C ( 0x0004 ) 
	int                                                ClientFileVersion;                                		// 0x0090 ( 0x0004 ) 
	class FColor                                       C_WorldBox;                                       		// 0x0094 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_GroundPlane;                                    		// 0x0098 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_GroundHighlight;                                		// 0x009C ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_BrushWire;                                      		// 0x00A0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_Pivot;                                          		// 0x00A4 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_Select;                                         		// 0x00A8 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_Current;                                        		// 0x00AC ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_AddWire;                                        		// 0x00B0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_SubtractWire;                                   		// 0x00B4 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_GreyWire;                                       		// 0x00B8 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_BrushVertex;                                    		// 0x00BC ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_BrushSnap;                                      		// 0x00C0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_Invalid;                                        		// 0x00C4 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_ActorWire;                                      		// 0x00C8 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_ActorHiWire;                                    		// 0x00CC ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_Black;                                          		// 0x00D0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_White;                                          		// 0x00D4 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_Mask;                                           		// 0x00D8 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_SemiSolidWire;                                  		// 0x00DC ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_NonSolidWire;                                   		// 0x00E0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_WireBackground;                                 		// 0x00E4 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_WireGridAxis;                                   		// 0x00E8 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_ActorArrow;                                     		// 0x00EC ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_ScaleBox;                                       		// 0x00F0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_ScaleBoxHi;                                     		// 0x00F4 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_ZoneWire;                                       		// 0x00F8 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_Mover;                                          		// 0x00FC ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_OrthoBackground;                                		// 0x0100 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_StaticMesh;                                     		// 0x0104 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_VolumeBrush;                                    		// 0x0108 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_ConstraintLine;                                 		// 0x010C ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_AnimMesh;                                       		// 0x0110 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_TerrainWire;                                    		// 0x0114 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_LinkAntiportalVolume;                           		// 0x0118 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class FColor                                       C_CubemapVolume;                                  		// 0x011C ( 0x0004 ) [ CPF_Edit | CPF_Config ]

	// Public Imports
	UEngine(class UEngine const &);
	UEngine(void);
	class UEngine &  operator=(class UEngine const &);
	class UwMatchMaker *  GetMatchMaker(void);
	void  InitAudio(void);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00F0

// Class Engine.GameEngine
class DLL_IMPORT UGameEngine : public UEngine
{
public:
	class ULevel*                                      GLevel;                                           		// 0x0120 ( 0x0004 ) 
	class ULevel*                                      GEntry;                                           		// 0x0124 ( 0x0004 ) 
	class UPendingLevel*                               GPendingLevel;                                    		// 0x0128 ( 0x0004 ) 
	class UWebLog*                                     GWebLog;                                          		// 0x012C ( 0x0004 ) 
	class UPendingLevel*                               GServerPendingLevel;                              		// 0x0130 ( 0x0004 ) 
	unsigned long                                      IsRelayServer:1;                                  		// 0x0134 ( 0x0004 )  [0x00000001]
	struct FString                                     strRelayServerURL;                                		// 0x0138 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      IsNatCheck:1;                                     		// 0x0144 ( 0x0004 )  [0x00000001]
	int                                                NatType;                                          		// 0x0148 ( 0x0004 ) 
	struct FString                                     HostIP;                                           		// 0x014C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                hostPortNum;                                      		// 0x0158 ( 0x0004 ) 
	struct FString                                     natServerIP1;                                     		// 0x015C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                natServerPortNum1;                                		// 0x0168 ( 0x0004 ) 
	struct FString                                     natServerIP2;                                     		// 0x016C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                natServerPortNum2;                                		// 0x0178 ( 0x0004 ) 
	class UTickChecker*                                GTickChecker;                                     		// 0x017C ( 0x0004 ) 
	class UBTMapLoader*                                GMapLoader;                                       		// 0x0180 ( 0x0004 ) 
	class UBTLoadingAdvancer*                          GLoadingAdvancer;                                 		// 0x0184 ( 0x0004 ) 
	class UBTPingChecker*                              GPingChecker;                                     		// 0x0188 ( 0x0004 ) 
	class UBTTcpLink_Channel_DS*                       GBTTcpLink_Channel_DS;                            		// 0x018C ( 0x0004 ) 
	class UBTTcpLink_DStoDP_DS*                        GBTTcpLink_DStoDP_DS;                             		// 0x0190 ( 0x0004 ) 
	float                                              CurrentTickTime;                                  		// 0x0194 ( 0x0004 ) 
	class UwCharacterManager*                          GCharMgr;                                         		// 0x0198 ( 0x0004 ) 
	class UwWeaponManager*                             GWeaponMgr;                                       		// 0x019C ( 0x0004 ) 
	class UwGameManager*                               GGameMgr;                                         		// 0x01A0 ( 0x0004 ) 
	class UItemIterator*                               GItemIterator;                                    		// 0x01A4 ( 0x0004 ) 
	unsigned long                                      GIsDemoPlayback:1;                                		// 0x01A8 ( 0x0004 )  [0x00000001]
	class APlayerController*                           LevelLoadingController;                           		// 0x01AC ( 0x0004 ) 
	int                                                LevelLoadingTotalActorCount;                      		// 0x01B0 ( 0x0004 ) 
	int                                                LevelLoadingActorCount;                           		// 0x01B4 ( 0x0004 ) 
	unsigned long                                      FramePresentPending:1;                            		// 0x01B8 ( 0x0004 )  [0x00000001]
	struct FURL                                        LastURL;                                          		// 0x01BC ( 0x0044 ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     ServerActors;                                     		// 0x0200 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     ServerPackages;                                   		// 0x020C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UObject* >                     DummyArray;                                       		// 0x0218 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UObject*                                     DummyObject;                                      		// 0x0224 ( 0x0004 ) 
	struct FString                                     DummyString;                                      		// 0x0228 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MainMenuClass;                                    		// 0x0234 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SinglePlayerMenuClass;                            		// 0x0240 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ConnectingMenuClass;                              		// 0x024C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     LoadingBackgroundVignetteClass;                   		// 0x0258 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DisconnectMenuClass;                              		// 0x0264 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     LoadingClass;                                     		// 0x0270 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bCheatProtection:1;                               		// 0x027C ( 0x0004 )  [0x00000001]
	unsigned long                                      ColorHighDetailMeshes:1;                          		// 0x027C ( 0x0004 )  [0x00000002]
	unsigned long                                      ColorSlowCollisionMeshes:1;                       		// 0x027C ( 0x0004 )  [0x00000004]
	unsigned long                                      ColorNoCollisionMeshes:1;                         		// 0x027C ( 0x0004 )  [0x00000008]
	unsigned long                                      ColorWorldTextures:1;                             		// 0x027C ( 0x0004 )  [0x00000010]
	unsigned long                                      ColorPlayerAndWeaponTextures:1;                   		// 0x027C ( 0x0004 )  [0x00000020]
	unsigned long                                      ColorInterfaceTextures:1;                         		// 0x027C ( 0x0004 )  [0x00000040]
	unsigned long                                      VoIPAllowVAD:1;                                   		// 0x027C ( 0x0004 )  [0x00000080][ CPF_Edit ]
	struct FString                                     strMD5Digest;                                     		// 0x0280 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UGameEngine(class UGameEngine const &);
	UGameEngine(void);
	class UGameEngine &  operator=(class UGameEngine const &);
	void  AddMD5(unsigned short const *,unsigned short const *,int);
	void  AdjustNetConnection(class ULevel *);
	void  BuildMasterMap(class UPackageMap *,class ULevel *);
	int  CheckForRogues(void);
	void  DSServerTravel(unsigned short *);
	void  DefaultMD5(void);
	void  FixUpLevel(void);
	void  ForcePrecacheDraw(class UViewport *,int,unsigned char *,int *);
	void  InitBaseValues(void);
	class FString  InitNewNetConnection(class TArray<class FString>,int,int);
	class FString  InitSpecial(unsigned short const *);
	void  InstantPaintProgressEx(class UMaterial *,float,float,float,float);
	void  InstantPaintText(unsigned char,float,float,float,float,class FColor &,int,unsigned short const *);
	static void  InternalConstructor(void *);
	int  PackageRevisionLevel(void);
	void  PaintLoadingScreen(class UwBTLoadingScreenDrawer *,int);
	void  PaintProgressEx(class UMaterial *,float,float,float,float);
	void  PaintText(unsigned char,float,float,float,float,class FColor &,int,unsigned short const *);
	void  PrecacheShaderFiles(void);
	void  SaveMD5Database(void);
	void  ServerUpdateMD5(void);
	void  StartTickCheck(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x016C

// Class Engine.FXFile
class DLL_IMPORT UFXFile : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x18 ];                                  		// 0x002C ( 0x0018 )

	// Public Imports
	UFXFile(class UFXFile const &);
	UFXFile(void);
	class UFXFile &  operator=(class UFXFile const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.Polys
class DLL_IMPORT UPolys : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x10 ];                                  		// 0x002C ( 0x0010 )

	// Public Imports
	UPolys(class UPolys const &);
	UPolys(void);
	class UPolys &  operator=(class UPolys const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.Font
class DLL_IMPORT UFont : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x38 ];                                  		// 0x002C ( 0x0038 )

	// Public Imports
	UFont(class UFont const &);
	UFont(void);
	class UFont &  operator=(class UFont const &);
	static void  InternalConstructor(void *);
	unsigned short  RemapChar(unsigned short);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.FluidSurfaceOscillator
class DLL_IMPORT AFluidSurfaceOscillator : public AActor
{
public:
	class AFluidSurfaceInfo*                           FluidInfo;                                        		// 0x03C8 ( 0x0004 ) [ CPF_Edit | CPF_EdFindable ]
	float                                              Frequency;                                        		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      Phase;                                            		// 0x03D0 ( 0x0001 ) [ CPF_Edit ]
	float                                              Strength;                                         		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              Radius;                                           		// 0x03D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              OscTime;                                          		// 0x03DC ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	AFluidSurfaceOscillator(class AFluidSurfaceOscillator const &);
	AFluidSurfaceOscillator(void);
	class AFluidSurfaceOscillator &  operator=(class AFluidSurfaceOscillator const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  UpdateOscillation(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.FluidSurfacePrimitive
class DLL_IMPORT UFluidSurfacePrimitive : public UPrimitive
{
public:
	unsigned char                                      _0x0058[ 0x04 ];                                  		// 0x0058 ( 0x0004 )

	// Public Imports
	UFluidSurfacePrimitive(class UFluidSurfacePrimitive const &);
	class UFluidSurfacePrimitive &  operator=(class UFluidSurfacePrimitive const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.FluidSurfaceInfo
class DLL_IMPORT AFluidSurfaceInfo : public AInfo
{
public:
	unsigned char                                      FluidGridType;                                    		// 0x041C ( 0x0001 ) [ CPF_Edit ]
	float                                              FluidGridSpacing;                                 		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	int                                                FluidXSize;                                       		// 0x0424 ( 0x0004 ) [ CPF_Edit ]
	int                                                FluidYSize;                                       		// 0x0428 ( 0x0004 ) [ CPF_Edit ]
	float                                              FluidHeightScale;                                 		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	float                                              FluidSpeed;                                       		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	float                                              FluidTimeScale;                                   		// 0x0434 ( 0x0004 ) [ CPF_Edit ]
	float                                              FluidDamping;                                     		// 0x0438 ( 0x0004 ) [ CPF_Edit ]
	float                                              FluidNoiseFrequency;                              		// 0x043C ( 0x0004 ) [ CPF_Edit ]
	struct FRange                                      FluidNoiseStrength;                               		// 0x0440 ( 0x0008 ) [ CPF_Edit ]
	unsigned long                                      TestRipple:1;                                     		// 0x0448 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              TestRippleSpeed;                                  		// 0x044C ( 0x0004 ) [ CPF_Edit ]
	float                                              TestRippleStrength;                               		// 0x0450 ( 0x0004 ) [ CPF_Edit ]
	float                                              TestRippleRadius;                                 		// 0x0454 ( 0x0004 ) [ CPF_Edit ]
	float                                              UTiles;                                           		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	float                                              UOffset;                                          		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	float                                              VTiles;                                           		// 0x0460 ( 0x0004 ) [ CPF_Edit ]
	float                                              VOffset;                                          		// 0x0464 ( 0x0004 ) [ CPF_Edit ]
	float                                              AlphaCurveScale;                                  		// 0x0468 ( 0x0004 ) [ CPF_Edit ]
	float                                              AlphaHeightScale;                                 		// 0x046C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      AlphaMax;                                         		// 0x0470 ( 0x0001 ) [ CPF_Edit ]
	float                                              ShootStrength;                                    		// 0x0474 ( 0x0004 ) [ CPF_Edit ]
	float                                              ShootRadius;                                      		// 0x0478 ( 0x0004 ) [ CPF_Edit ]
	float                                              RippleVelocityFactor;                             		// 0x047C ( 0x0004 ) [ CPF_Edit ]
	float                                              TouchStrength;                                    		// 0x0480 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      ShootEffect;                                      		// 0x0484 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      OrientShootEffect:1;                              		// 0x0488 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class UClass*                                      TouchEffect;                                      		// 0x048C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      OrientTouchEffect:1;                              		// 0x0490 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class TArray< int >                                ClampBitmap;                                      		// 0x0494 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class ATerrainInfo*                                ClampTerrain;                                     		// 0x04A0 ( 0x0004 ) [ CPF_Edit | CPF_EdFindable ]
	unsigned long                                      bShowBoundingBox:1;                               		// 0x04A4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bUseNoRenderZ:1;                                  		// 0x04A4 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	float                                              NoRenderZ;                                        		// 0x04A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              WarmUpTime;                                       		// 0x04AC ( 0x0004 ) [ CPF_Edit ]
	float                                              UpdateRate;                                       		// 0x04B0 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       FluidColor;                                       		// 0x04B4 ( 0x0004 ) [ CPF_Edit ]
	class TArray< float >                              Verts0;                                           		// 0x04B8 ( 0x000C ) [ CPF_Const | CPF_Transient | CPF_NeedCtorLink ]
	class TArray< float >                              Verts1;                                           		// 0x04C4 ( 0x000C ) [ CPF_Const | CPF_Transient | CPF_NeedCtorLink ]
	class TArray< unsigned char >                      VertAlpha;                                        		// 0x04D0 ( 0x000C ) [ CPF_Const | CPF_Transient | CPF_NeedCtorLink ]
	int                                                LatestVerts;                                      		// 0x04DC ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	struct FBox                                        FluidBoundingBox;                                 		// 0x04E0 ( 0x001C ) [ CPF_Const | CPF_Transient ]
	struct FVector                                     FluidOrigin;                                      		// 0x04FC ( 0x000C ) [ CPF_Const | CPF_Transient ]
	float                                              TimeRollover;                                     		// 0x0508 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	float                                              TestRippleAng;                                    		// 0x050C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UFluidSurfacePrimitive*                      Primitive;                                        		// 0x0510 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class TArray< class AFluidSurfaceOscillator* >     Oscillators;                                      		// 0x0514 ( 0x000C ) [ CPF_Const | CPF_Transient | CPF_NeedCtorLink ]
	unsigned long                                      bHasWarmedUp:1;                                   		// 0x0520 ( 0x0004 )  [0x00000001][ CPF_Const | CPF_Transient ]

	// UScript Functions
	 void                      Touch ( class AActor* Other );                    		// [ FUNC_Simulated ] Engine.FluidSurfaceInfo.Touch
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		// [ FUNC_Simulated ] Engine.FluidSurfaceInfo.TakeDamage
	 void                      Pling ( struct FVector Position, float Strength, float Radius );		// [ FUNC_Final | FUNC_Native ] Engine.FluidSurfaceInfo.Pling

	// Public Imports
	AFluidSurfaceInfo(class AFluidSurfaceInfo const &);
	class AFluidSurfaceInfo &  operator=(class AFluidSurfaceInfo const &);
	void  FillIndexBuffer(void *);
	void  FillVertexBuffer(void *);
	int  GetClampedBitmap(int,int);
	void  GetNearestIndex(class FVector const &,int &,int &);
	class FVector  GetVertexPosLocal(int,int);
	class FVector  GetVertexPosWorld(int,int);
	void  Init(void);
	static void  InternalConstructor(void *);
	void  Pling(class FVector const &,float,float);
	void  PlingVertex(int,int,float);
	void  RebuildClampedBitmap(void);
	void  SetClampedBitmap(int,int,int);
	void  SimpleFillIndexBuffer(void *);
	void  SimpleFillVertexBuffer(void *);
	static class UClass *  StaticClass(void);
	void  UpdateOscillatorList(void);
	void  UpdateSimulation(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0108

// Class Engine.GlobalTempObjects
class DLL_IMPORT UGlobalTempObjects : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x0C ];                                  		// 0x002C ( 0x000C )
}; // Size: 0x000C

// Class Engine.EncryptCommandlet
class DLL_IMPORT UEncryptCommandlet : public UCommandlet
{
public:
}; // Size: 0x0000

// Class Engine.VisibilityItemArray
class DLL_IMPORT UVisibilityItemArray : public UObject
{
public:
	class TArray< class UVisibilityItem* >             V;                                                		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UVisibilityItemArray(class UVisibilityItemArray const &);
	class UVisibilityItemArray &  operator=(class UVisibilityItemArray const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.VisibilityItem
class DLL_IMPORT UVisibilityItem : public UObject
{
public:
	class TArray< class UByteArray* >                  V;                                                		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UVisibilityItem(class UVisibilityItem const &);
	class UVisibilityItem &  operator=(class UVisibilityItem const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.ByteArray
class DLL_IMPORT UByteArray : public UObject
{
public:
	class TArray< unsigned char >                      V;                                                		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UByteArray(class UByteArray const &);
	class UByteArray &  operator=(class UByteArray const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.MasterMD5Commandlet
class DLL_IMPORT UMasterMD5Commandlet : public UCommandlet
{
public:
	unsigned char                                      _0x01E0[ 0x10 ];                                  		// 0x01E0 ( 0x0010 )
}; // Size: 0x0010

// Class Engine.UModUnpackCommandlet
class DLL_IMPORT UUModUnpackCommandlet : public UCommandlet
{
public:
}; // Size: 0x0000

// Class Engine.ServerCommandlet
class DLL_IMPORT UServerCommandlet : public UCommandlet
{
public:
}; // Size: 0x0000

// Class Engine.RenderDevice
class DLL_IMPORT URenderDevice : public USubsystem
{
public:
	unsigned char                                      _0x0030[ 0x10 ];                                  		// 0x0030 ( 0x0010 )
	unsigned long                                      HighDetailActors:1;                               		// 0x0040 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      SuperHighDetailActors:1;                          		// 0x0044 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x0048[ 0x7C ];                                  		// 0x0048 ( 0x007C )

	// Public Imports
	URenderDevice(class URenderDevice const &);
	URenderDevice(void);
	class URenderDevice &  operator=(class URenderDevice const &);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0094

// Class Engine.DownloadTexture
class DLL_IMPORT UDownloadTexture : public UBitmapMaterial
{
public:
	struct FString                                     strImageURL;                                      		// 0x005C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     strImageFileName;                                 		// 0x0068 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     strLinkUrl;                                       		// 0x0074 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     strLinkFileName;                                  		// 0x0080 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bIsDownloaded:1;                                  		// 0x008C ( 0x0004 )  [0x00000001][ CPF_Const | CPF_Transient ]
	unsigned long                                      bIsExistLink:1;                                   		// 0x008C ( 0x0004 )  [0x00000002][ CPF_Const | CPF_Transient ]
	void*                                              RenderInterface;                                  		// 0x0090 ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	UDownloadTexture(class UDownloadTexture const &);
	UDownloadTexture(void);
	class UDownloadTexture &  operator=(class UDownloadTexture const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.Download
class DLL_IMPORT UDownload : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x430 ];                                 		// 0x002C ( 0x0430 )

	// Public Imports
	UDownload(class UDownload const &);
	class UDownload &  operator=(class UDownload const &);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0430

// Class Engine.ChannelDownload
class DLL_IMPORT UChannelDownload : public UDownload
{
public:
	unsigned char                                      _0x045C[ 0x04 ];                                  		// 0x045C ( 0x0004 )

	// Public Imports
	UChannelDownload(class UChannelDownload const &);
	class UChannelDownload &  operator=(class UChannelDownload const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.DistortEmitter
class DLL_IMPORT UDistortEmitter : public USpriteEmitter
{
public:

	// Public Imports
	UDistortEmitter(class UDistortEmitter const &);
	UDistortEmitter(void);
	class UDistortEmitter &  operator=(class UDistortEmitter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.DemoRecDriver
class DLL_IMPORT UDemoRecDriver : public UNetDriver
{
public:
	unsigned char                                      _0x120C[ 0x0C ];                                  		// 0x120C ( 0x000C )
	struct FString                                     DemoSpectatorClass;                               		// 0x1218 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      _0x1224[ 0x80 ];                                  		// 0x1224 ( 0x0080 )

	// Public Imports
	UDemoRecDriver(class UDemoRecDriver const &);
	UDemoRecDriver(void);
	class UDemoRecDriver &  operator=(class UDemoRecDriver const &);
	class ULevel *  GetLevel(void);
	int  InitBase(int,class FNetworkNotify *,class FURL &,class FString &);
	static void  InternalConstructor(void *);
	void  SpawnDemoRecSpectator(class UNetConnection *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);
	int  UpdateDemoTime(float *,float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0098

// Class Engine.NetConnection
class DLL_IMPORT UNetConnection : public UPlayer
{
public:
	unsigned char                                      _0x0074[ 0x4F38 ];                                		// 0x0074 ( 0x4F38 )

	// Public Imports
	UNetConnection(class UNetConnection const &);
	UNetConnection(class UNetDriver *,class FURL const &);
	UNetConnection(void);
	class UNetConnection &  operator=(class UNetConnection const &);
	class UChannel *  CreateChannel(enum EChannelType,int,int);
	class UNetDriver *  GetDriver(void);
	void  PostSend(void);
	void  PreSend(int);
	void  PurgeAcks(void);
	void  ReceiveFile(int,int);
	void  ReceivedNak(int);
	void  ReceivedPacket(struct FBitReader &);
	void  ReceivedRawPacket(void *,int);
	void  ReceivedRawPacketOnRelay(struct FBitReader &,int);
	class FString  SecureCDKeyHash(void);
	void  SendPackageMap(class ULevel *);
	int  SendRawBunch(class FOutBunch &,int);
	void  SetActorDirty(class AActor *);
	void  SetBtrAdvanceTick(void);
	void  SetBtrTimeOut(float,int);
	void  SlowAssertValid(void);
	static class UClass *  StaticClass(void);
	static unsigned short const *  StaticConfigName(void);
	void  UpdateBtrTimeOut(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x4F38

// Class Engine.DemoRecConnection
class DLL_IMPORT UDemoRecConnection : public UNetConnection
{
public:

	// Public Imports
	UDemoRecConnection(class UDemoRecConnection const &);
	UDemoRecConnection(class UNetDriver *,class FURL const &);
	class UDemoRecConnection &  operator=(class UDemoRecConnection const &);
	class UDemoRecDriver *  GetDriver(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.DemoPlayPendingLevel
class DLL_IMPORT UDemoPlayPendingLevel : public UPendingLevel
{
public:
}; // Size: 0x0000

// Class Engine.ConvexVolume
class DLL_IMPORT UConvexVolume : public UPrimitive
{
public:
	unsigned char                                      _0x0058[ 0x34 ];                                  		// 0x0058 ( 0x0034 )

	// Public Imports
	UConvexVolume(class UConvexVolume const &);
	UConvexVolume(void);
	class UConvexVolume &  operator=(class UConvexVolume const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0034

// Class Engine.AdminBase
class DLL_IMPORT UAdminBase : public UObject
{
public:
	unsigned long                                      bAdmin:1;                                         		// 0x002C ( 0x0004 )  [0x00000001]
	class AAccessControl*                              Manager;                                          		// 0x0030 ( 0x0004 ) 
	struct FString                                     Msg_PlayerList;                                   		// 0x0034 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_AllGameMaps;                                  		// 0x0040 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_AllMapLists;                                  		// 0x004C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_MapRotationList;                              		// 0x0058 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_NoMapsAdded;                                  		// 0x0064 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_AddedMapToList;                               		// 0x0070 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_NoMapsRemoved;                                		// 0x007C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_RemovedFromList;                              		// 0x0088 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_PlayerBanned;                                 		// 0x0094 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_SessionBanned;                                		// 0x00A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_PlayerKicked;                                 		// 0x00AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_NextMapNotFound;                              		// 0x00B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_ChangingMapTo;                                		// 0x00C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_NoMapInRotation;                              		// 0x00D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_NoMapsFound;                                  		// 0x00DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_MapIsInRotation;                              		// 0x00E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_MapNotInRotation;                             		// 0x00F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_UnknownParam;                                 		// 0x0100 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_NoParamsFound;                                		// 0x010C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_ParamModified;                                		// 0x0118 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_ParamNotModified;                             		// 0x0124 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_MapListAdded;                                 		// 0x0130 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_MapListRemoved;                               		// 0x013C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_MapIsNotInRotation;                           		// 0x0148 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Msg_EditingMapList;                               		// 0x0154 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 class TArray< struct FString > SplitParams ( struct FString params );            		//  Engine.AdminBase.SplitParams
	 bool                      IsNumeric ( struct FString Param, bool bPositiveOnly );		//  Engine.AdminBase.IsNumeric
	 bool                      MaskedCompare ( struct FString SettingName, struct FString Mask );		//  Engine.AdminBase.MaskedCompare
	 void                      SendComplexMsg ( class TArray< struct FString > Arr, struct FString Title );		//  Engine.AdminBase.SendComplexMsg
	 struct FString            FindGameType ( struct FString GameType );         		//  Engine.AdminBase.FindGameType
	 bool                      CanPerform ( struct FString priv );               		//  Engine.AdminBase.CanPerform
	 void                      execSwitch ( struct FString URL );                		// [ FUNC_Exec ] Engine.AdminBase.Switch
	 void                      execMapList ( struct FString Cmd, struct FString Extra );		// [ FUNC_Exec ] Engine.AdminBase.MapList
	 void                      execMap ( struct FString Cmd );                   		// [ FUNC_Exec ] Engine.AdminBase.Map
	 void                      execNextMap (  );                                 		// [ FUNC_Exec ] Engine.AdminBase.NextMap
	 void                      execRestartMap (  );                              		// [ FUNC_Exec ] Engine.AdminBase.RestartMap
	 void                      execKickBan ( struct FString S );                 		// [ FUNC_Exec ] Engine.AdminBase.KickBan
	 void                      execKick ( struct FString Cmd, struct FString Extra );		// [ FUNC_Exec ] Engine.AdminBase.Kick
	 void                      execPlayerList (  );                              		// [ FUNC_Exec ] Engine.AdminBase.PlayerList
	 void                      RestartCurrentMap (  );                           		//  Engine.AdminBase.RestartCurrentMap
	 void                      MaplistCommand ( struct FString Cmd, struct FString Extra );		//  Engine.AdminBase.MaplistCommand
	 class TArray< struct FString > GetMapListNames ( struct FString GameType );      		//  Engine.AdminBase.GetMapListNames
	 void                      ShowCurrentMapList (  );                          		//  Engine.AdminBase.ShowCurrentMapList
	 void                      GoToNextMap (  );                                 		//  Engine.AdminBase.GoToNextMap
	 void                      DoSwitch ( struct FString URL );                  		//  Engine.AdminBase.DoSwitch
	 void                      DoLogout (  );                                    		//  Engine.AdminBase.DoLogout
	 void                      DoLogin ( struct FString UserName, struct FString Password );		//  Engine.AdminBase.DoLogin
	 void                      Created (  );                                     		//  Engine.AdminBase.Created

	// Public Imports
	UAdminBase(class UAdminBase const &);
	class UAdminBase &  operator=(class UAdminBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0134

// Class Engine.PlayerInput
class DLL_IMPORT UPlayerInput : public UObject
{
public:
	unsigned long                                      bInvertMouse:1;                                   		// 0x002C ( 0x0004 )  [0x00000001]
	unsigned long                                      bWasForward:1;                                    		// 0x002C ( 0x0004 )  [0x00000002]
	unsigned long                                      bWasBack:1;                                       		// 0x002C ( 0x0004 )  [0x00000004]
	unsigned long                                      bWasLeft:1;                                       		// 0x002C ( 0x0004 )  [0x00000008]
	unsigned long                                      bWasRight:1;                                      		// 0x002C ( 0x0004 )  [0x00000010]
	unsigned long                                      bEdgeForward:1;                                   		// 0x002C ( 0x0004 )  [0x00000020]
	unsigned long                                      bEdgeBack:1;                                      		// 0x002C ( 0x0004 )  [0x00000040]
	unsigned long                                      bEdgeLeft:1;                                      		// 0x002C ( 0x0004 )  [0x00000080]
	unsigned long                                      bEdgeRight:1;                                     		// 0x002C ( 0x0004 )  [0x00000100]
	unsigned long                                      bAdjustSampling:1;                                		// 0x002C ( 0x0004 )  [0x00000200]
	unsigned char                                      MouseSmoothingMode;                               		// 0x0030 ( 0x0001 ) 
	float                                              MouseSmoothingStrength;                           		// 0x0034 ( 0x0004 ) 
	float                                              MouseSensitivity;                                 		// 0x0038 ( 0x0004 ) 
	float                                              MouseSensitivityActive;                           		// 0x003C ( 0x0004 ) 
	float                                              MouseSensitivityAim;                              		// 0x0040 ( 0x0004 ) 
	float                                              MouseSamplingTime;                                		// 0x0044 ( 0x0004 ) 
	float                                              MouseAccelThreshold;                              		// 0x0048 ( 0x0004 ) 
	float                                              SmoothedMouse[ 0x02 ];                            		// 0x004C ( 0x0008 ) 
	float                                              ZeroTime[ 0x02 ];                                 		// 0x0054 ( 0x0008 ) 
	float                                              SamplingTime[ 0x02 ];                             		// 0x005C ( 0x0008 ) 
	float                                              MaybeTime[ 0x02 ];                                		// 0x0064 ( 0x0008 ) 
	float                                              OldSamples[ 0x04 ];                               		// 0x006C ( 0x0010 ) 
	int                                                MouseSamples[ 0x02 ];                             		// 0x007C ( 0x0008 ) 
	float                                              DoubleClickTimer;                                 		// 0x0084 ( 0x0004 ) 
	float                                              DoubleClickTime;                                  		// 0x0088 ( 0x0004 ) 
	unsigned long                                      bEnableDodging:1;                                 		// 0x008C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 unsigned char             CheckForDoubleClickMove ( float DeltaTime );      		//  Engine.PlayerInput.CheckForDoubleClickMove
	 void                      ChangeSnapView ( bool B );                        		//  Engine.PlayerInput.ChangeSnapView
	 void                      InvertMouse ( struct FString Invert );            		//  Engine.PlayerInput.InvertMouse
	 void                      UpdateSmoothing ( int Mode );                     		//  Engine.PlayerInput.UpdateSmoothing
	 void                      UpdateAccel ( float f );                          		//  Engine.PlayerInput.UpdateAccel
	 void                      UpdateSensitivityForAim ( bool bZoom );           		//  Engine.PlayerInput.UpdateSensitivityForAim
	 void                      UpdateSensitivity ( float f, bool bZooming );     		//  Engine.PlayerInput.UpdateSensitivity
	 float                     SmoothMouse ( float aMouse, float DeltaTime, int Index, unsigned char* SampleCount );		//  Engine.PlayerInput.SmoothMouse
	 float                     AccelerateMouse ( float aMouse );                 		//  Engine.PlayerInput.AccelerateMouse
	 void                      execSetSmoothingStrength ( float f );             		// [ FUNC_Exec ] Engine.PlayerInput.SetSmoothingStrength
	 void                      execSetSmoothingMode ( unsigned char B );         		// [ FUNC_Exec ] Engine.PlayerInput.SetSmoothingMode
	 void                      eventPlayerInput ( float DeltaTime );             		// [ FUNC_Event ] Engine.PlayerInput.PlayerInput
	 bool                      InvertLook (  );                                  		//  Engine.PlayerInput.InvertLook

	// Public Imports
	UPlayerInput(class UPlayerInput const &);
	class UPlayerInput &  operator=(class UPlayerInput const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0064

// Class Engine.CheatManager
class DLL_IMPORT UCheatManager : public UObject
{
public:
	struct FRotator                                    LockedRotation;                                   		// 0x002C ( 0x000C ) 
	unsigned long                                      bCheatsEnabled:1;                                 		// 0x0038 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      execShowAllPlayers (  );                          		// [ FUNC_Exec ] Engine.CheatManager.ShowAllPlayers
	 void                      execruler (  );                                   		// [ FUNC_Exec ] Engine.CheatManager.ruler
	 void                      execDisableNextObjective (  );                    		// [ FUNC_Exec ] Engine.CheatManager.DisableNextObjective
	 void                      execWeakObjectives (  );                          		// [ FUNC_Exec ] Engine.CheatManager.WeakObjectives
	 void                      ReportCheat ( struct FString cheat );             		//  Engine.CheatManager.ReportCheat
	 bool                      areCheatsEnabled (  );                            		//  Engine.CheatManager.areCheatsEnabled
	 void                      execEnableCheats (  );                            		// [ FUNC_Exec ] Engine.CheatManager.EnableCheats
	 void                      execWinMatch (  );                                		// [ FUNC_Exec ] Engine.CheatManager.WinMatch
	 void                      execJumpMatch ( int ladderrung );                 		// [ FUNC_Exec ] Engine.CheatManager.JumpMatch
	 void                      execSkipMatch (  );                               		// [ FUNC_Exec ] Engine.CheatManager.SkipMatch
	 void                      execAllWeapons (  );                              		// [ FUNC_Exec ] Engine.CheatManager.AllWeapons
	 void                      execLoaded (  );                                  		// [ FUNC_Exec ] Engine.CheatManager.Loaded
	 void                      execViewClass ( class UClass* aClass, bool bQuiet, bool bCheat );		// [ FUNC_Exec ] Engine.CheatManager.ViewClass
	 void                      execViewTurret (  );                              		// [ FUNC_Exec ] Engine.CheatManager.ViewTurret
	 void                      ViewNext ( struct FName nameController );         		//  Engine.CheatManager.ViewNext
	 void                      execViewBot (  );                                 		// [ FUNC_Exec ] Engine.CheatManager.ViewBot
	 void                      execVAI (  );                                     		// [ FUNC_Exec ] Engine.CheatManager.VAI
	 void                      execVHD (  );                                     		// [ FUNC_Exec ] Engine.CheatManager.VHD
	 void                      execVH (  );                                      		// [ FUNC_Exec ] Engine.CheatManager.VH
	 void                      execViewFlag (  );                                		// [ FUNC_Exec ] Engine.CheatManager.ViewFlag
	 void                      execViewActor ( struct FName ActorName );         		// [ FUNC_Exec ] Engine.CheatManager.ViewActor
	 void                      execViewPlayer ( struct FString S );              		// [ FUNC_Exec ] Engine.CheatManager.ViewPlayer
	 void                      execViewSelf ( bool bQuiet );                     		// [ FUNC_Exec ] Engine.CheatManager.ViewSelf
	 void                      execRememberSpot (  );                            		// [ FUNC_Exec ] Engine.CheatManager.RememberSpot
	 void                      execCheatView ( class UClass* aClass, bool bQuiet );		// [ FUNC_Exec ] Engine.CheatManager.CheatView
	 void                      execClearAllDebugLines (  );                      		// [ FUNC_Exec ] Engine.CheatManager.ClearAllDebugLines
	 void                      execFreezeAll (  );                               		// [ FUNC_Exec ] Engine.CheatManager.FreezeAll
	 void                      execPlayersOnly (  );                             		// [ FUNC_Exec ] Engine.CheatManager.PlayersOnly
	 void                      execSummon ( struct FString ClassName );          		// [ FUNC_Exec ] Engine.CheatManager.Summon
	 void                      execAvatar ( struct FString ClassName );          		// [ FUNC_Exec ] Engine.CheatManager.Avatar
	 void                      execKillPawns (  );                               		// [ FUNC_Exec ] Engine.CheatManager.KillPawns
	 void                      execSetSpeed ( float f );                         		// [ FUNC_Exec ] Engine.CheatManager.SetSpeed
	 void                      execSetPriction ( float f );                      		// [ FUNC_Exec ] Engine.CheatManager.SetPriction
	 void                      execSetGravity ( float f );                       		// [ FUNC_Exec ] Engine.CheatManager.SetGravity
	 void                      execSetJumpLandDrop ( float f );                  		// [ FUNC_Exec ] Engine.CheatManager.SetJumpLandDrop
	 void                      execSetJumpZ ( float f );                         		// [ FUNC_Exec ] Engine.CheatManager.SetJumpZ
	 void                      doSlomo ( float t );                              		//  Engine.CheatManager.doSlomo
	 void                      execSloMo ( float t );                            		// [ FUNC_Exec ] Engine.CheatManager.SloMo
	 void                      execGod (  );                                     		// [ FUNC_Exec ] Engine.CheatManager.God
	 void                      execPhil (  );                                    		// [ FUNC_Exec ] Engine.CheatManager.Phil
	 void                      execInvisible ( bool B );                         		// [ FUNC_Exec ] Engine.CheatManager.Invisible
	 void                      execAllAmmo (  );                                 		// [ FUNC_Exec ] Engine.CheatManager.AllAmmo
	 void                      execGhost (  );                                   		// [ FUNC_Exec ] Engine.CheatManager.Ghost
	 void                      execWalk (  );                                    		// [ FUNC_Exec ] Engine.CheatManager.Walk
	 void                      execFly (  );                                     		// [ FUNC_Exec ] Engine.CheatManager.Fly
	 void                      execAmphibious (  );                              		// [ FUNC_Exec ] Engine.CheatManager.Amphibious
	 void                      execCauseEvent ( struct FName EventName );        		// [ FUNC_Exec ] Engine.CheatManager.CauseEvent
	 void                      execFreeCamera ( bool B );                        		// [ FUNC_Exec ] Engine.CheatManager.FreeCamera
	 void                      execEndPath (  );                                 		// [ FUNC_Exec ] Engine.CheatManager.EndPath
	 void                      execSetCameraDist ( float f );                    		// [ FUNC_Exec ] Engine.CheatManager.SetCameraDist
	 void                      execLockCamera (  );                              		// [ FUNC_Exec ] Engine.CheatManager.LockCamera
	 void                      execChangeSize ( float f );                       		// [ FUNC_Exec ] Engine.CheatManager.ChangeSize
	 void                      execTeleport (  );                                		// [ FUNC_Exec ] Engine.CheatManager.Teleport
	 void                      execLogScriptedSequences (  );                    		// [ FUNC_Exec ] Engine.CheatManager.LogScriptedSequences
	 void                      execKillViewedActor (  );                         		// [ FUNC_Exec ] Engine.CheatManager.KillViewedActor
	 void                      execSetFogB ( float f );                          		// [ FUNC_Exec ] Engine.CheatManager.SetFogB
	 void                      execSetFogG ( float f );                          		// [ FUNC_Exec ] Engine.CheatManager.SetFogG
	 void                      execSetFogR ( float f );                          		// [ FUNC_Exec ] Engine.CheatManager.SetFogR
	 void                      execSetFlash ( float f );                         		// [ FUNC_Exec ] Engine.CheatManager.SetFlash
	 void                      execWriteToLog ( struct FString Param );          		// [ FUNC_Exec ] Engine.CheatManager.WriteToLog
	 void                      execFreezeFrame ( float Delay );                  		// [ FUNC_Exec ] Engine.CheatManager.FreezeFrame
	 void                      execPause ( bool bPause );                        		// [ FUNC_Exec ] Engine.CheatManager.Pause
	 void                      execListDynamicActors (  );                       		// [ FUNC_Exec ] Engine.CheatManager.ListDynamicActors
	 void                      execReviewJumpSpots ( struct FName TestLabel );   		// [ FUNC_Exec ] Engine.CheatManager.ReviewJumpSpots

	// Public Imports
	UCheatManager(class UCheatManager const &);
	class UCheatManager &  operator=(class UCheatManager const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.Channel
class DLL_IMPORT UChannel : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x3C ];                                  		// 0x002C ( 0x003C )

	// Public Imports
	UChannel(class UChannel const &);
	UChannel(void);
	class UChannel &  operator=(class UChannel const &);
	void  AssertInSequenced(void);
	static class UClass * * ChannelClasses;
	static int  IsKnownChannelType(int);
	int  IsNetReady(int);
	int  MaxSendBytes(void);
	void  ReceivedAcks(void);
	void  ReceivedRawBunch(class FInBunch &);
	int  ReceivedSequencedBunch(class FInBunch &);
	int  RouteDestroy(void);
	int  SendBunch(class FOutBunch *,int);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class Engine.VoiceChannel
class DLL_IMPORT UVoiceChannel : public UChannel
{
public:
	unsigned char                                      _0x0068[ 0x04 ];                                  		// 0x0068 ( 0x0004 )

	// Public Imports
	UVoiceChannel(class UVoiceChannel const &);
	UVoiceChannel(void);
	class UVoiceChannel &  operator=(class UVoiceChannel const &);
	int  AllowVoiceTransmission(class APlayerController *,struct FVoiceInfo &)const ;
	static void  InternalConstructor(void *);
	void  ReceivedStatusPacket(struct FVoiceInfo *,enum EVoicePacketType);
	void  SendStatusPacket(struct FVoiceInfo *,enum EVoicePacketType);
	void  SendVoicePacket(struct FVoiceInfo *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.FileChannel
class DLL_IMPORT UFileChannel : public UChannel
{
public:
	unsigned char                                      _0x0068[ 0x210 ];                                 		// 0x0068 ( 0x0210 )

	// Public Imports
	UFileChannel(class UFileChannel const &);
	UFileChannel(void);
	class UFileChannel &  operator=(class UFileChannel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0210

// Class Engine.ActorChannel
class DLL_IMPORT UActorChannel : public UChannel
{
public:
	unsigned char                                      _0x0068[ 0x64 ];                                  		// 0x0068 ( 0x0064 )

	// Public Imports
	UActorChannel(class UActorChannel const &);
	UActorChannel(void);
	class UActorChannel &  operator=(class UActorChannel const &);
	class AActor *  GetActor(void);
	static void  InternalConstructor(void *);
	void  ReplicateActor(void);
	void  SetChannelActor(class AActor *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0064

// Class Engine.ControlChannel
class DLL_IMPORT UControlChannel : public UChannel
{
public:
	unsigned char                                      _0x0068[ 0x04 ];                                  		// 0x0068 ( 0x0004 )

	// Public Imports
	UControlChannel(class UControlChannel const &);
	UControlChannel(void);
	class UControlChannel &  operator=(class UControlChannel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.CascadedShadowMaps
class DLL_IMPORT UCascadedShadowMaps : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x1C4 ];                                 		// 0x002C ( 0x01C4 )

	// Public Imports
	UCascadedShadowMaps(class UCascadedShadowMaps const &);
	UCascadedShadowMaps(void);
	class UCascadedShadowMaps &  operator=(class UCascadedShadowMaps const &);
	void  CalcShadowMapMatrices(int,class FMatrix &,class FMatrix &,class FMatrix &,class FVector,class FSceneNode *,float,float);
	void  CalcShadowMappingSplitDepths(float *);
	void  CalculateViewProj(class FMatrix &,class FMatrix &,class FLevelSceneNode *,float,float);
	class FRenderTarget *  FillShadowMaps(class FRenderInterface *,class FLevelSceneNode *,class FVector);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x01C4

// Class Engine.Canvas
class DLL_IMPORT UCanvas : public UObject
{
public:
	class UFont*                                       Font;                                             		// 0x002C ( 0x0004 ) 
	float                                              FontScaleX;                                       		// 0x0030 ( 0x0004 ) 
	float                                              FontScaleY;                                       		// 0x0034 ( 0x0004 ) 
	float                                              SpaceX;                                           		// 0x0038 ( 0x0004 ) 
	float                                              SpaceY;                                           		// 0x003C ( 0x0004 ) 
	float                                              OrgX;                                             		// 0x0040 ( 0x0004 ) 
	float                                              OrgY;                                             		// 0x0044 ( 0x0004 ) 
	float                                              ClipX;                                            		// 0x0048 ( 0x0004 ) 
	float                                              ClipY;                                            		// 0x004C ( 0x0004 ) 
	float                                              CurX;                                             		// 0x0050 ( 0x0004 ) 
	float                                              CurY;                                             		// 0x0054 ( 0x0004 ) 
	float                                              Z;                                                		// 0x0058 ( 0x0004 ) 
	unsigned char                                      Style;                                            		// 0x005C ( 0x0001 ) 
	float                                              CurYL;                                            		// 0x0060 ( 0x0004 ) 
	class FColor                                       DrawColor;                                        		// 0x0064 ( 0x0004 ) 
	class FColor                                       DrawBackColor;                                    		// 0x0068 ( 0x0004 ) 
	unsigned long                                      bCenter:1;                                        		// 0x006C ( 0x0004 )  [0x00000001]
	unsigned long                                      bNoSmooth:1;                                      		// 0x006C ( 0x0004 )  [0x00000002]
	int                                                SizeX;                                            		// 0x0070 ( 0x0004 ) [ CPF_Const ]
	int                                                SizeY;                                            		// 0x0074 ( 0x0004 ) [ CPF_Const ]
	struct FPlane                                      ColorModulate;                                    		// 0x0078 ( 0x0010 ) 
	unsigned long                                      bForceAlpha:1;                                    		// 0x0088 ( 0x0004 )  [0x00000001]
	float                                              ForcedAlpha;                                      		// 0x008C ( 0x0004 ) 
	unsigned long                                      bRenderLevel:1;                                   		// 0x0090 ( 0x0004 )  [0x00000001]
	class UFont*                                       TinyFont;                                         		// 0x0094 ( 0x0004 ) 
	class UFont*                                       SmallFont;                                        		// 0x0098 ( 0x0004 ) 
	class UFont*                                       MedFont;                                          		// 0x009C ( 0x0004 ) 
	struct FString                                     TinyFontName;                                     		// 0x00A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SmallFontName;                                    		// 0x00AC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MedFontName;                                      		// 0x00B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UViewport*                                   Viewport;                                         		// 0x00C4 ( 0x0004 ) [ CPF_Const ]
	FCanvasUtil*                                       pCanvasUtil;                                      		// 0x00C8 ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// UScript Functions
	 void                      DrawScreenText ( struct FString Text, float X, float Y, unsigned char Pivot );		// [ FUNC_Simulated ] Engine.Canvas.DrawScreenText
	 void                      DrawBox ( class UCanvas* Canvas, float width, float Height );		// [ FUNC_Final | FUNC_Simulated ] Engine.Canvas.DrawBox
	 void                      DrawBracket ( float width, float Height, float bracket_size );		// [ FUNC_Final | FUNC_Simulated ] Engine.Canvas.DrawBracket
	 void                      DrawLine ( int direction, float Size );           		// [ FUNC_Final ] Engine.Canvas.DrawLine
	 void                      DrawHorizontal ( float Y, float width );          		// [ FUNC_Final ] Engine.Canvas.DrawHorizontal
	 void                      DrawVertical ( float X, float Height );           		// [ FUNC_Final ] Engine.Canvas.DrawVertical
	 class FColor              MakeColorNoEmpty ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );		// [ FUNC_Final ] Engine.Canvas.MakeColorNoEmpty
	 class FColor              MakeColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );		// [ FUNC_Final ] Engine.Canvas.MakeColor
	 void                      SetDrawColor ( unsigned char R, unsigned char G, unsigned char B, unsigned char A );		// [ FUNC_Final ] Engine.Canvas.SetDrawColor
	 void                      DrawRect ( class UTexture* Tex, float RectX, float RectY );		// [ FUNC_Final ] Engine.Canvas.DrawRect
	 void                      DrawIcon ( class UTexture* Tex, float Scale );    		// [ FUNC_Final ] Engine.Canvas.DrawIcon
	 void                      DrawPattern ( class UMaterial* Tex, float XL, float YL, float Scale );		// [ FUNC_Final ] Engine.Canvas.DrawPattern
	 void                      SetClip ( float X, float Y );                     		// [ FUNC_Final ] Engine.Canvas.SetClip
	 void                      SetOrigin ( float X, float Y );                   		// [ FUNC_Final ] Engine.Canvas.SetOrigin
	 void                      SetPos ( float X, float Y );                      		// [ FUNC_Final ] Engine.Canvas.SetPos
	 void                      eventReset (  );                                  		// [ FUNC_Event ] Engine.Canvas.Reset
	 void                      BtrDrawTextJustifiedWithVolumeLineCache ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, class FColor shadowC, int dropSX, int dropSY, int Level );		//  Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineCache
	 void                      BtrDrawTextJustifiedWithVolumeLine ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, class FColor shadowC, int dropSX, int dropSY, int Level, bool bUseD3DFont );		//  Engine.Canvas.BtrDrawTextJustifiedWithVolumeLine
	 void                      BtrDrawTextJustifiedWithVolumeLineNoCache ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int fntSize, class FColor shadowC, int dropSX, int dropSY, int Level );		//  Engine.Canvas.BtrDrawTextJustifiedWithVolumeLineNoCache
	 void                      Flush (  );                                       		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.Flush
	 void                      DrawTileExactWithRotation ( class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL, struct FRotator R );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTileExactWithRotation
	 void                      DrawTileExact ( class UMaterial* mat, float X, float Y, float XL, float YL, float U, float V, float UL, float VL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTileExact
	 void                      BtrDrawTextJustifiedCache ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int FontSize, int Level );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrDrawTextJustifiedCache
	 void                      DrawTileCache ( class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL, int Level );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTileCache
//	 void                      EndCache (  );                                    		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.EndCache
	 void                      BeginCache (  );                                  		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BeginCache
	 void                      BtrTextSizeOLD ( struct FString Text, int FontSize, float* XL, float* YL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrTextSizeOLD
	 void                      BtrTextSizeLH ( struct FString Text, int FontSize, float* XL, float* YL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrTextSizeLH
	 void                      BtrTextSize ( struct FString Text, int FontSize, float* XL, float* YL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrTextSize
	 void                      BtrDrawTextHK_UseModulateColor ( struct FString Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, unsigned char GCLevel, unsigned char PresetIndex, bool bUseModulateColor, struct FPlane mColor );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrDrawTextHK_UseModulateColor
	 void                      BtrDrawTextHK ( struct FString Text, float X1, float Y1, float X2, float Y2, int FontSize, bool bUseD3DFont, unsigned char GCLevel, unsigned char PresetIndex );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrDrawTextHK
	 void                      BtrFontTextureGC (  );                            		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrFontTextureGC
	 void                      BtrFontReset (  );                                		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrFontReset
	 void                      BtrToggleUseD3DFont (  );                         		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrToggleUseD3DFont
	 void                      BtrSaveTexture (  );                              		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrSaveTexture
	 void                      BtrDrawTextJustified ( struct FString Text, unsigned char Justification, float X1, float Y1, float X2, float Y2, int FontSize, bool bCache );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.BtrDrawTextJustified
	 void                      DrawActorClipped ( class AActor* A, bool Wireframe, float Left, float Top, float width, float Height, bool ClearZ, float DisplayFOV );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawActorClipped
	 void                      DrawTextJustified ( struct FString String, unsigned char Justification, float X1, float Y1, float X2, float Y2 );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTextJustified
	 void                      DrawTileScaled ( class UMaterial* mat, float XScale, float YScale );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTileScaled
	 void                      DrawTileJustified ( class UMaterial* mat, unsigned char Justification, float XL, float YL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTileJustified
	 void                      DrawTileCroppedStretched ( class UMaterial* mat, float XL, float YL, float UL, float VL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTileCroppedStretched
	 void                      DrawTileStretched ( class UMaterial* mat, float XL, float YL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTileStretched
	 void                      DrawTilePartialStretched ( class UMaterial* mat, float XL, float YL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTilePartialStretched
	 void                      WrapText ( float dx, class UFont* f, float FontScaleX, struct FString* Text, struct FString* Line );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.WrapText
	 void                      WrapStringToArray ( struct FString Text, float dx, struct FString EOL, class TArray< struct FString >* OutArray );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.WrapStringToArray
	 void                      Clear ( bool ClearRGB, bool ClearZ );             		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.Clear
	 void                      DrawScreenActorWithViewport ( class AActor* A, int X1, int Y1, int X2, int Y2, float AspectRatio, float FOV, bool Wireframe, bool ClearZ );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawScreenActorWithViewport
	 void                      DrawScreenActor ( class AActor* A, float FOV, bool Wireframe, bool ClearZ );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawScreenActor
	 void                      SetScreenProjector ( int Index, struct FVector Position, class FColor Color, float Radius, class UTexture* Tex );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.SetScreenProjector
	 void                      SetScreenLight ( int Index, struct FVector Position, class FColor LightColor, float Radius );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.SetScreenLight
	 void                      SetFontScale ( float fX, float fY );              		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.SetFontScale
//	 void                      Draw2DPoint ( float X, float Y, class FColor PointColor );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.Draw2DPoint
//	 void                      Draw2DLine ( float X1, float Y1, float X2, float Y2, class FColor LineColor );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.Draw2DLine
	 void                      SetCameraRotation ( struct FRotator CameraRotation );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.SetCameraRotation
	 void                      SetCameraLocation ( struct FVector CameraLocation );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.SetCameraLocation
	 void                      GetCameraLocation ( struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.GetCameraLocation
	 struct FVector            WorldToScreen ( struct FVector WorldLoc );        		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.WorldToScreen
	 void                      DrawPortal ( int X, int Y, int width, int Height, class AActor* CamActor, struct FVector CamLocation, struct FRotator CamRotation, int FOV, bool ClearZ );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x01E0 ] Engine.Canvas.DrawPortal
	 void                      TextSize ( struct FString String, float* XL, float* YL );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x01D6 ] Engine.Canvas.TextSize
	 void                      DrawTextClipped ( struct FString Text, bool bCheckHotKey );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x01D5 ] Engine.Canvas.DrawTextClipped
	 void                      DrawTileClipped ( class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x01D4 ] Engine.Canvas.DrawTileClipped
	 void                      DrawActor ( class AActor* A, bool Wireframe, bool ClearZ, float DisplayFOV );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x01D3 ] Engine.Canvas.DrawActor
	 void                      DrawTile ( class UMaterial* mat, float XL, float YL, float U, float V, float UL, float VL );		// [ FUNC_Final | FUNC_Native ] Engine.Canvas.DrawTile
	 void                      DrawText ( struct FString Text, bool cR );        		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x01D1 ] Engine.Canvas.DrawText
	 void                      StrLen ( struct FString String, float* XL, float* YL );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x01D0 ] Engine.Canvas.StrLen

	// Public Imports
	UCanvas(class UCanvas const &);
	class UCanvas &  operator=(class UCanvas const &);
	void  BtrTextSizeImp(class FString const &,int,float *,float *);
	void  BtrTextSizeImpLH(class FString const &,int,float *,float *);
	void  BtrTextSizeImpOLD(class FString const &,int,float *,float *);
	void  Draw2DLine(float,float,float,float,class FColor);
	void  Draw2DPoint(float,float,class FColor);
	void  DrawActor(class AActor *,int,int,float);
	void  DrawScreenActor(class AActor *,int,int,float);
	void  DrawScreenActorWithViewport(class AActor *,int,int,int,int,float,int,int,float);
	void  DrawTextHK(int,int,int,int,int,unsigned short const *,bool,unsigned char,unsigned char);
	void  EndCache(void);
	void  GetCameraLocationImp(class FVector *,class FRotator *);
	static void  InternalConstructor(void *);
	void  SetScreenLight(int,class FVector const &,class FColor,float);
	static class UClass *  StaticClass(void);
	void  WorldToScreenImp(class FVector const &,class FVector *);
	void  btrClippedPrint(class UFont *,float,float,int,int,float,float,float,float,float,float,float,float,bool,unsigned short const *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
	void  WrappedPrint(enum ERenderStyle,int &,int &,class UFont *,float,float,int,unsigned short const *);
}; // Size: 0x00A0

// Class Engine.Client
class DLL_IMPORT UClient : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x10 ];                                  		// 0x002C ( 0x0010 )
	unsigned long                                      CaptureMouse:1;                                   		// 0x003C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      ScreenFlashes:1;                                  		// 0x0040 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      NoLighting:1;                                     		// 0x0044 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Decals:1;                                         		// 0x0048 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      NoDynamicLights:1;                                		// 0x004C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      NoFractalAnim:1;                                  		// 0x0050 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Coronas:1;                                        		// 0x0054 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      DecoLayers:1;                                     		// 0x0058 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Projectors:1;                                     		// 0x005C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      ReportDynamicUploads:1;                           		// 0x0060 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      WeatherEffects:1;                                 		// 0x0064 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x0068[ 0x04 ];                                  		// 0x0068 ( 0x0004 )
	unsigned long                                      DOF:1;                                            		// 0x006C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x0070[ 0x04 ];                                  		// 0x0070 ( 0x0004 )
	unsigned long                                      Shader:1;                                         		// 0x0074 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x0078[ 0x04 ];                                  		// 0x0078 ( 0x0004 )
	unsigned long                                      SpecularMap:1;                                    		// 0x007C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Glow:1;                                           		// 0x0080 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      Shadows:1;                                        		// 0x0084 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x0088[ 0x04 ];                                  		// 0x0088 ( 0x0004 )
	unsigned long                                      UseInverseWeapon:1;                               		// 0x008C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned char                                      _0x0090[ 0x0C ];                                  		// 0x0090 ( 0x000C )
	int                                                GraphicQuality;                                   		// 0x009C ( 0x0004 ) [ CPF_Edit ]
	int                                                GameViewportX;                                    		// 0x00A0 ( 0x0004 ) [ CPF_Edit ]
	int                                                GameViewportY;                                    		// 0x00A4 ( 0x0004 ) [ CPF_Edit ]
	int                                                PostProcessType;                                  		// 0x00A8 ( 0x0004 ) [ CPF_Edit ]
	int                                                Antialiasing;                                     		// 0x00AC ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x00B0[ 0x7C ];                                  		// 0x00B0 ( 0x007C )
	float                                              Brightness;                                       		// 0x012C ( 0x0004 ) [ CPF_Edit ]
	float                                              Contrast;                                         		// 0x0130 ( 0x0004 ) [ CPF_Edit ]
	float                                              Gamma;                                            		// 0x0134 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x0138[ 0x04 ];                                  		// 0x0138 ( 0x0004 )
	unsigned char                                      TextureDetailWorld;                               		// 0x013C ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      _0x013D[ 0x1B ];                                  		// 0x013D ( 0x001B )
	float                                              MinDesiredFrameRate;                              		// 0x0158 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x015C[ 0x04 ];                                  		// 0x015C ( 0x0004 )
	float                                              ScaleHUDX;                                        		// 0x0160 ( 0x0004 ) [ CPF_Edit ]
	float                                              AnimMeshDynamicLOD;                               		// 0x0164 ( 0x0004 ) [ CPF_Edit ]
	float                                              DrawDistanceLOD;                                  		// 0x0168 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x016C[ 0x0C ];                                  		// 0x016C ( 0x000C )

	// Public Imports
	UClient(class UClient const &);
	UClient(void);
	class UClient &  operator=(class UClient const &);
	int  GetTextureLODBias(enum ELODSet);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x014C

// Class Engine.CameraEffect
class DLL_IMPORT UCameraEffect : public UObject
{
public:
	float                                              Alpha;                                            		// 0x002C ( 0x0004 ) 
	unsigned long                                      FinalEffect:1;                                    		// 0x0030 ( 0x0004 )  [0x00000001]
	int                                                cameraeffect_dummy;                               		// 0x0034 ( 0x0004 ) 

	// Public Imports
	UCameraEffect(class UCameraEffect const &);
	UCameraEffect(void);
	class UCameraEffect &  operator=(class UCameraEffect const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.FadeBlackWhite
class DLL_IMPORT UFadeBlackWhite : public UCameraEffect
{
public:
	unsigned char                                      _0x0038[ 0x10 ];                                  		// 0x0038 ( 0x0010 )

	// Public Imports
	UFadeBlackWhite(class UFadeBlackWhite const &);
	UFadeBlackWhite(void);
	class UFadeBlackWhite &  operator=(class UFadeBlackWhite const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.BlackWhite
class DLL_IMPORT UBlackWhite : public UCameraEffect
{
public:

	// Public Imports
	UBlackWhite(class UBlackWhite const &);
	UBlackWhite(void);
	class UBlackWhite &  operator=(class UBlackWhite const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.CameraOverlay
class DLL_IMPORT UCameraOverlay : public UCameraEffect
{
public:
	class FColor                                       OverlayColor;                                     		// 0x0038 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   OverlayMaterial;                                  		// 0x003C ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	UCameraOverlay(class UCameraOverlay const &);
	UCameraOverlay(void);
	class UCameraOverlay &  operator=(class UCameraOverlay const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.MotionBlur
class DLL_IMPORT UMotionBlur : public UCameraEffect
{
public:
	unsigned char                                      BlurAlpha;                                        		// 0x0038 ( 0x0001 ) [ CPF_Edit ]
	void*                                              RenderTargets[ 0x02 ];                            		// 0x003C ( 0x0008 ) [ CPF_Const | CPF_Transient ]
	float                                              LastFrameTime;                                    		// 0x0044 ( 0x0004 ) [ CPF_Const ]

	// Public Imports
	UMotionBlur(class UMotionBlur const &);
	UMotionBlur(void);
	class UMotionBlur &  operator=(class UMotionBlur const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.SubActionCameraEffect
class DLL_IMPORT USubActionCameraEffect : public UMatSubAction
{
public:
	class UCameraEffect*                               CameraEffect;                                     		// 0x0054 ( 0x0004 ) [ CPF_Edit | CPF_EditInline ]
	float                                              StartAlpha;                                       		// 0x0058 ( 0x0004 ) [ CPF_Edit ]
	float                                              EndAlpha;                                         		// 0x005C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      DisableAfterDuration:1;                           		// 0x0060 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// Public Imports
	USubActionCameraEffect(class USubActionCameraEffect const &);
	USubActionCameraEffect(void);
	class USubActionCameraEffect &  operator=(class USubActionCameraEffect const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.Viewport
class DLL_IMPORT UViewport : public UPlayer
{
public:
	unsigned char                                      _0x0074[ 0x14C ];                                 		// 0x0074 ( 0x014C )

	// Public Imports
	UViewport(class UViewport const &);
	UViewport(void);
	class UViewport &  operator=(class UViewport const &);
	void  ExecMacro(unsigned short const *,class FOutputDevice &);
	void  ExecuteHits(struct FHitCause const &,unsigned char *,int,unsigned short *,class FColor *,class AActor * *);
	class UClient *  GetOuterUClient(void)const ;
	int  IsDepthComplexity(void);
	int  IsEditing(void);
	int  IsLit(void);
	int  IsOrtho(void);
	int  IsPerspective(void);
	int  IsRealtime(void);
	int  IsTopView(void);
	int  IsWire(void);
	void  LockOnActor(class AActor *);
	void  PopHit(int);
	void  PushHit(struct HHitProxy const &,int);
	static void  RefreshAll(void);
	static class UClass *  StaticClass(void);
	static unsigned short const *  StaticConfigName(void);
	unsigned char *  _Screen(int,int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x014C

// Class Engine.CacheManager
class DLL_IMPORT UCacheManager : public UObject
{
public:
	class TArray< struct FStandard >                   DefaultContent;                                   		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FMutatorRecord >              CacheMutators;                                    		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FMapRecord >                  CacheMaps;                                        		// 0x0044 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FWeaponRecord >               CacheWeapons;                                     		// 0x0050 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FVehicleRecord >              CacheVehicles;                                    		// 0x005C ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FCrosshairRecord >            CacheCrosshairs;                                  		// 0x0068 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FGameRecord >                 CacheGameTypes;                                   		// 0x0074 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	class TArray< struct FAnnouncerRecord >            CacheAnnouncers;                                  		// 0x0080 ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]
	void*                                              FileManager;                                      		// 0x008C ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]
	void*                                              Tracker;                                          		// 0x0090 ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]

	// UScript Functions
	 struct FAnnouncerRecord   GetAnnouncerRecord ( struct FString ClassName );  		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0373 ] Engine.CacheManager.GetAnnouncerRecord
	 struct FVehicleRecord     GetVehicleRecord ( struct FString ClassName );    		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0372 ] Engine.CacheManager.GetVehicleRecord
	 struct FWeaponRecord      GetWeaponRecord ( struct FString ClassName );     		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0371 ] Engine.CacheManager.GetWeaponRecord
	 struct FMutatorRecord     GetMutatorRecord ( struct FString ClassName );    		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0370 ] Engine.CacheManager.GetMutatorRecord
	 struct FMapRecord         GetMapRecord ( struct FString MapName );          		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0333 ] Engine.CacheManager.GetMapRecord
	 struct FGameRecord        GetGameRecord ( struct FString ClassName );       		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0332 ] Engine.CacheManager.GetGameRecord
	 void                      GetTeamSymbolList ( bool bNoSinglePlayer, class TArray< struct FString >* SymbolNames );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x032B ] Engine.CacheManager.GetTeamSymbolList
	 void                      GetAnnouncerList ( class TArray< struct FAnnouncerRecord >* AnnouncerRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x032A ] Engine.CacheManager.GetAnnouncerList
	 void                      GetMutatorList ( class TArray< struct FMutatorRecord >* MutatorRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0329 ] Engine.CacheManager.GetMutatorList
	 void                      GetCrosshairList ( class TArray< struct FCrosshairRecord >* CrosshairRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0328 ] Engine.CacheManager.GetCrosshairList
	 void                      GetVehicleList ( class TArray< struct FVehicleRecord >* VehicleRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0327 ] Engine.CacheManager.GetVehicleList
	 void                      GetWeaponList ( class TArray< struct FWeaponRecord >* WeaponRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0326 ] Engine.CacheManager.GetWeaponList
	 void                      GetMapList ( struct FString Acronym, class TArray< struct FMapRecord >* MapRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0325 ] Engine.CacheManager.GetMapList
	 void                      GetGameTypeList ( struct FString FilterType, class TArray< struct FGameRecord >* GameRecords );		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0324 ] Engine.CacheManager.GetGameTypeList
	 bool                      IsDefaultContent ( struct FString Item );         		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x033E ] Engine.CacheManager.IsDefaultContent
	 bool                      IsBPContent ( struct FString Item );              		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0323 ] Engine.CacheManager.IsBPContent
	 bool                      Is2004Content ( struct FString Item );            		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0322 ] Engine.CacheManager.Is2004Content
	 bool                      Is2003Content ( struct FString Item );            		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] [ iNative : 0x0321 ] Engine.CacheManager.Is2003Content
	 void                      InitCache (  );                                   		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0320 ] Engine.CacheManager.InitCache

	// Public Imports
	UCacheManager(class UCacheManager const &);
	class UCacheManager &  operator=(class UCacheManager const &);
	class FCacheFileManager *  CreateFileManager(unsigned long)const ;
	class FCacheTracker *  CreateTracker(void)const ;
	int  GetAnnouncerRecord(unsigned short const *,struct FAnnouncerRecord &);
	static class UCacheManager *  GetCache(void);
	class FCacheFileManager const *  GetFileManager(void);
	int  GetGameRecord(unsigned short const *,struct FGameRecord &);
	int  GetMapRecord(unsigned short const *,struct FMapRecord &);
	int  GetMutatorRecord(unsigned short const *,struct FMutatorRecord &);
	void const *  GetRecords(unsigned short const *);
	class FCacheTracker const *  GetTracker(void)const ;
	int  GetVehicleRecord(unsigned short const *,struct FVehicleRecord &);
	int  GetWeaponRecord(unsigned short const *,struct FWeaponRecord &);
	void  InitCache(unsigned short const *);
	void  InitCacheManager(unsigned long);
	int  Initialized(unsigned short const *)const ;
	static void  InternalConstructor(void *);
	static int  IsAnnouncerRecord(unsigned short const *);
	static int  IsCrosshairRecord(unsigned short const *);
	int  IsDefaultMap(unsigned short const *)const ;
	int  IsDefaultPackage(unsigned short const *)const ;
	static int  IsGameRecord(unsigned short const *);
	static int  IsMapRecord(unsigned short const *);
	static int  IsMutatorRecord(unsigned short const *);
	static int  IsVehicleRecord(unsigned short const *);
	static int  IsWeaponRecord(unsigned short const *);
	int  RefreshCache(void);
	int  RemoveCacheEntry(unsigned short const *)const ;
	void  SaveNewPackages(class FCacheTracker *,class FCacheFileManager *,unsigned short const *,class FString const *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	int  CreateMapEntry(class ULevelSummary const *,class FString &)const ;
	int  CreatePackageEntry(class UClass *,class FString &)const ;
	int  CreatePackageEntry(class AAnnouncerVoice const *,class FString &)const ;
	int  CreatePackageEntry(class AGameInfo const *,class FString &)const ;
	int  CreatePackageEntry(class AMutator const *,class FString &)const ;
	int  CreatePackageEntry(class AVehicle const *,class FString &)const ;
	int  CreatePackageEntry(class AwWeapon const *,class FString &)const ;
	int  CreatePackageEntry(class UCrosshairPack const *,class FString &)const ;
	void  IntegrateNewPackages(unsigned short const *);
	int  ParseCacheFiles(unsigned short const *);
	static class UClass PrivateStaticClass;
	void  ScanDirectories(class FCacheTracker * const);
}; // Size: 0x0068

// Class Engine.BTTcpLink_DStoDP_DS
class DLL_IMPORT UBTTcpLink_DStoDP_DS : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x24 ];                                  		// 0x002C ( 0x0024 )

	// Public Imports
	UBTTcpLink_DStoDP_DS(class UBTTcpLink_DStoDP_DS const &);
	UBTTcpLink_DStoDP_DS(void);
	class UBTTcpLink_DStoDP_DS &  operator=(class UBTTcpLink_DStoDP_DS const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.BTTcpLink_Channel_DS
class DLL_IMPORT UBTTcpLink_Channel_DS : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x24 ];                                  		// 0x002C ( 0x0024 )

	// Public Imports
	UBTTcpLink_Channel_DS(class UBTTcpLink_Channel_DS const &);
	UBTTcpLink_Channel_DS(void);
	class UBTTcpLink_Channel_DS &  operator=(class UBTTcpLink_Channel_DS const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.BTPingCheckerLinker
class DLL_IMPORT UBTPingCheckerLinker : public UObject
{
public:
	class UGameEngine*                                 m_GEngine;                                        		// 0x002C ( 0x0004 ) 
	class UwMatchMaker*                                m_MM;                                             		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 void                      eventReceivedPingAck ( class TArray< struct FString > fromAddr, class TArray< int > ElapsedMiliSec );		// [ FUNC_Event ] Engine.BTPingCheckerLinker.ReceivedPingAck
	 bool                      SendText ( struct FString strDest_IP, int nDest_Port, struct FString strTextData );		// [ FUNC_Native ] Engine.BTPingCheckerLinker.SendText
	 bool                      SendPing ( struct FString toAddr );               		// [ FUNC_Native ] Engine.BTPingCheckerLinker.SendPing

	// Public Imports
	UBTPingCheckerLinker(class UBTPingCheckerLinker const &);
	class UBTPingCheckerLinker &  operator=(class UBTPingCheckerLinker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.BTPingChecker
class DLL_IMPORT UBTPingChecker : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x04 ];                                  		// 0x002C ( 0x0004 )

	// Public Imports
	UBTPingChecker(class UBTPingChecker const &);
	UBTPingChecker(void);
	class UBTPingChecker &  operator=(class UBTPingChecker const &);
	static class UClass *  StaticClass(void);
	int  TickCheckPing(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.BTNetInterface
class DLL_IMPORT UBTNetInterface : public UObject
{
public:

	// Public Imports
	UBTNetInterface(class UBTNetInterface const &);
	UBTNetInterface(void);
	class UBTNetInterface &  operator=(class UBTNetInterface const &);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.BTMapLoader
class DLL_IMPORT UBTMapLoader : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x10 ];                                  		// 0x002C ( 0x0010 )

	// Public Imports
	UBTMapLoader(class UBTMapLoader const &);
	UBTMapLoader(void);
	class UBTMapLoader &  operator=(class UBTMapLoader const &);
	void  DestroyClientLocalPackageMap(void);
	int  GetIsLoading(void);
	void  SetGameEngine(class UGameEngine *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.BTLoadingAdvancer
class DLL_IMPORT UBTLoadingAdvancer : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x08 ];                                  		// 0x002C ( 0x0008 )

	// Public Imports
	UBTLoadingAdvancer(class UBTLoadingAdvancer const &);
	UBTLoadingAdvancer(void);
	class UBTLoadingAdvancer &  operator=(class UBTLoadingAdvancer const &);
	int  AddRemoteAddrForSendDummyPacket(int,class FString &,int);
	int  CreateNetDriver(unsigned short *,int);
	int  EndLoading(void);
	int  ErrorHandling(void);
	int  ForceEndLoading(void);
	int  GetCurrentLoadingStep(void);
	int  GetCurrentState(void);
	int  GotoNextStep(int);
	int  InitClientNatChecker(int,class FString,int,unsigned char,unsigned char);
	int  InitHostNatChecker(int,class FString,int,unsigned char,unsigned char);
	int  InitLoading(void);
	static void  InternalConstructor(void *);
	int  IsChangeClientState(void);
	int  IsChangeHostState(void);
	int  IsClientLoadingState(void);
	int  IsHostLoadingState(void);
	int  IsLoading(void);
	int  PassNetDriver(class UNetDriver * *);
	void  PermissionPrintLoadingMsg(void);
	void  SetError(class FString &);
	void  SetGameEngine(class UGameEngine *);
	int  StartChangeClient(void);
	int  StartChangeHost(void);
	int  StartClientLoading(void);
	int  StartHostLoading(void);
	static class UClass *  StaticClass(void);
	int  Tick(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.BTLoadingState
class DLL_IMPORT UBTLoadingState : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x8C ];                                  		// 0x002C ( 0x008C )

	// Public Imports
	UBTLoadingState(class UBTLoadingState const &);
	UBTLoadingState(void);
	class UBTLoadingState &  operator=(class UBTLoadingState const &);
	void  SetErrMsgFromLoadingStep(int,int);
	void  SetGameEngine(class UGameEngine *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x008C

// Class Engine.BeamEmitter
class DLL_IMPORT UBeamEmitter : public UParticleEmitter
{
public:
	struct FRange                                      BeamDistanceRange;                                		// 0x048C ( 0x0008 ) [ CPF_Edit ]
	class TArray< struct FParticleBeamEndPoint >       BeamEndPoints;                                    		// 0x0494 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      DetermineEndPointBy;                              		// 0x04A0 ( 0x0001 ) [ CPF_Edit ]
	float                                              BeamTextureUScale;                                		// 0x04A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              BeamTextureVScale;                                		// 0x04A8 ( 0x0004 ) [ CPF_Edit ]
	int                                                RotatingSheets;                                   		// 0x04AC ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      TriggerEndpoint:1;                                		// 0x04B0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FRangeVector                                LowFrequencyNoiseRange;                           		// 0x04B4 ( 0x0018 ) [ CPF_Edit ]
	int                                                LowFrequencyPoints;                               		// 0x04CC ( 0x0004 ) [ CPF_Edit ]
	struct FRangeVector                                HighFrequencyNoiseRange;                          		// 0x04D0 ( 0x0018 ) [ CPF_Edit ]
	int                                                HighFrequencyPoints;                              		// 0x04E8 ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FParticleBeamScale >          LFScaleFactors;                                   		// 0x04EC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FParticleBeamScale >          HFScaleFactors;                                   		// 0x04F8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              LFScaleRepeats;                                   		// 0x0504 ( 0x0004 ) [ CPF_Edit ]
	float                                              HFScaleRepeats;                                   		// 0x0508 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      UseHighFrequencyScale:1;                          		// 0x050C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      UseLowFrequencyScale:1;                           		// 0x050C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      NoiseDeterminesEndPoint:1;                        		// 0x050C ( 0x0004 )  [0x00000004][ CPF_Edit ]
	struct FRangeVector                                DynamicHFNoiseRange;                              		// 0x0510 ( 0x0018 ) [ CPF_Edit ]
	struct FRange                                      DynamicHFNoisePointsRange;                        		// 0x0528 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      DynamicTimeBetweenNoiseRange;                     		// 0x0530 ( 0x0008 ) [ CPF_Edit ]
	unsigned long                                      UseBranching:1;                                   		// 0x0538 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FRange                                      BranchProbability;                                		// 0x053C ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      BranchHFPointsRange;                              		// 0x0544 ( 0x0008 ) [ CPF_Edit ]
	int                                                BranchEmitter;                                    		// 0x054C ( 0x0004 ) [ CPF_Edit ]
	struct FRange                                      BranchSpawnAmountRange;                           		// 0x0550 ( 0x0008 ) [ CPF_Edit ]
	unsigned long                                      LinkupLifetime:1;                                 		// 0x0558 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	int                                                SheetsUsed;                                       		// 0x055C ( 0x0004 ) [ CPF_Transient ]
	int                                                VerticesPerParticle;                              		// 0x0560 ( 0x0004 ) [ CPF_Transient ]
	int                                                IndicesPerParticle;                               		// 0x0564 ( 0x0004 ) [ CPF_Transient ]
	int                                                PrimitivesPerParticle;                            		// 0x0568 ( 0x0004 ) [ CPF_Transient ]
	float                                              BeamValueSum;                                     		// 0x056C ( 0x0004 ) [ CPF_Transient ]
	class TArray< struct FParticleBeamData >           HFPoints;                                         		// 0x0570 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< struct FVector >                     LFPoints;                                         		// 0x057C ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< class AActor* >                      HitActors;                                        		// 0x0588 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	float                                              TimeSinceLastDynamicNoise;                        		// 0x0594 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UBeamEmitter(class UBeamEmitter const &);
	UBeamEmitter(void);
	class UBeamEmitter &  operator=(class UBeamEmitter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x010C

// Class Engine.I3DL2Listener
class DLL_IMPORT UI3DL2Listener : public UObject
{
public:
	float                                              EnvironmentSize;                                  		// 0x002C ( 0x0004 ) [ CPF_Edit ]
	float                                              EnvironmentDiffusion;                             		// 0x0030 ( 0x0004 ) [ CPF_Edit ]
	int                                                Room;                                             		// 0x0034 ( 0x0004 ) [ CPF_Edit ]
	int                                                RoomHF;                                           		// 0x0038 ( 0x0004 ) [ CPF_Edit ]
	int                                                RoomLF;                                           		// 0x003C ( 0x0004 ) [ CPF_Edit ]
	float                                              DecayTime;                                        		// 0x0040 ( 0x0004 ) [ CPF_Edit ]
	float                                              DecayHFRatio;                                     		// 0x0044 ( 0x0004 ) [ CPF_Edit ]
	float                                              DecayLFRatio;                                     		// 0x0048 ( 0x0004 ) [ CPF_Edit ]
	int                                                Reflections;                                      		// 0x004C ( 0x0004 ) [ CPF_Edit ]
	float                                              ReflectionsDelay;                                 		// 0x0050 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ReflectionsPan;                                   		// 0x0054 ( 0x000C ) [ CPF_Edit ]
	int                                                Reverb;                                           		// 0x0060 ( 0x0004 ) [ CPF_Edit ]
	float                                              ReverbDelay;                                      		// 0x0064 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ReverbPan;                                        		// 0x0068 ( 0x000C ) [ CPF_Edit ]
	float                                              EchoTime;                                         		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	float                                              EchoDepth;                                        		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	float                                              ModulationTime;                                   		// 0x007C ( 0x0004 ) [ CPF_Edit ]
	float                                              ModulationDepth;                                  		// 0x0080 ( 0x0004 ) [ CPF_Edit ]
	float                                              RoomRolloffFactor;                                		// 0x0084 ( 0x0004 ) [ CPF_Edit ]
	float                                              AirAbsorptionHF;                                  		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	float                                              HFReference;                                      		// 0x008C ( 0x0004 ) [ CPF_Edit ]
	float                                              LFReference;                                      		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bDecayTimeScale:1;                                		// 0x0094 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bReflectionsScale:1;                              		// 0x0094 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bReflectionsDelayScale:1;                         		// 0x0094 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bReverbScale:1;                                   		// 0x0094 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bReverbDelayScale:1;                              		// 0x0094 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bEchoTimeScale:1;                                 		// 0x0094 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bModulationTimeScale:1;                           		// 0x0094 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bDecayHFLimit:1;                                  		// 0x0094 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	int                                                Environment;                                      		// 0x0098 ( 0x0004 ) [ CPF_Transient ]
	int                                                Updated;                                          		// 0x009C ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UI3DL2Listener(class UI3DL2Listener const &);
	UI3DL2Listener(void);
	class UI3DL2Listener &  operator=(class UI3DL2Listener const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0074

// Class Engine.AudioSubsystem
class DLL_IMPORT UAudioSubsystem : public USubsystem
{
public:
	unsigned char                                      _0x0030[ 0x3C ];                                  		// 0x0030 ( 0x003C )
	float                                              SoundVolume;                                      		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x0070[ 0x04 ];                                  		// 0x0070 ( 0x0004 )
	float                                              MusicVolume;                                      		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      _0x0078[ 0x28 ];                                  		// 0x0078 ( 0x0028 )

	// Public Imports
	UAudioSubsystem(class UAudioSubsystem const &);
	UAudioSubsystem(void);
	class UAudioSubsystem &  operator=(class UAudioSubsystem const &);
	void  AllowMusicPlayback(int);
	static class FAudioCaptureDevice * CaptureDevice;
	static int * CodecFrameSize;
	static int * CodecFrequency;
	static int * CodecPacketSize;
	static int * CodecPacketTime;
	float  GetDuration(int);
	class FListener *  GetListener(void);
	class UViewport *  GetViewport(void);
	static void  InternalConstructor(void *);
	int  IsPaused(int);
	int  IsQueued(class USound *);
	int  PlayMusic(class FString,float,float);
	void  PlaySound(class AActor *,int,class USound *,class FVector,float,float,float,int,float,int);
	int  PlayStream(class FString,int,float,float,float);
	int  SetVolume(int,float);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);
	void  StopAllMusic(float);
	void  StopAllMusicAndClearQueue(float);
	void  StopAllSounds(void);
	void  StopAllSoundsByActor(class AActor *);
	void  StopAllSoundsByActorIndex(int);
	void  StopLoopSoundsByActor(class AActor *);
	void  StopSound(int);
	void  StopStream(int,float);
	void  fPlaySound(class AActor *,int,class FString,class FVector,int,float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0070

// Class Engine.Sound
class DLL_IMPORT USound : public UObject
{
public:
	float                                              Likelihood;                                       		// 0x002C ( 0x0004 ) [ CPF_Edit | CPF_Native ]
	unsigned char                                      Data[ 0x2C ];                                     		// 0x0030 ( 0x002C ) [ CPF_Const | CPF_Native ]
	struct FName                                       FileType;                                         		// 0x005C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	struct FString                                     fileName;                                         		// 0x0060 ( 0x000C ) [ CPF_Const | CPF_Native ]
	int                                                OriginalSize;                                     		// 0x006C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	float                                              Duration;                                         		// 0x0070 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	void*                                              Handle;                                           		// 0x0074 ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]
	int                                                Flags;                                            		// 0x0078 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	int                                                VoiceCodec;                                       		// 0x007C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	float                                              InitialSeekTime;                                  		// 0x0080 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	float                                              BaseRadius;                                       		// 0x0084 ( 0x0004 ) [ CPF_Edit ]
	float                                              VelocityScale;                                    		// 0x0088 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	USound(class USound const &);
	USound(int);
	USound(unsigned short const *,int);
	USound(void);
	class USound &  operator=(class USound const &);
	static class UAudioSubsystem * Audio;
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0060

// Class Engine.SoundGroup
class DLL_IMPORT USoundGroup : public USound
{
public:
	struct FString                                     Package;                                          		// 0x008C ( 0x000C ) [ CPF_NeedCtorLink | CPF_Deprecated ]
	class TArray< class USound* >                      Sounds;                                           		// 0x0098 ( 0x000C ) [ CPF_Edit | CPF_Native ]
	float                                              TotalLikelihood;                                  		// 0x00A4 ( 0x0004 ) [ CPF_Const | CPF_Native | CPF_Transient ]
	class USound*                                      RenderedSound;                                    		// 0x00A8 ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	USoundGroup(class USoundGroup const &);
	USoundGroup(void);
	class USoundGroup &  operator=(class USoundGroup const &);
	static void  InternalConstructor(void *);
	void  RefreshGroup(class FString const &);
	void  RefreshGroup(int);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class Engine.ProceduralSound
class DLL_IMPORT UProceduralSound : public USound
{
public:
	class USound*                                      BaseSound;                                        		// 0x008C ( 0x0004 ) [ CPF_Edit ]
	float                                              PitchModification;                                		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	float                                              VolumeModification;                               		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	float                                              PitchVariance;                                    		// 0x0098 ( 0x0004 ) [ CPF_Edit ]
	float                                              VolumeVariance;                                   		// 0x009C ( 0x0004 ) [ CPF_Edit ]
	float                                              RenderedPitchModification;                        		// 0x00A0 ( 0x0004 ) [ CPF_Transient ]
	float                                              RenderedVolumeModification;                       		// 0x00A4 ( 0x0004 ) [ CPF_Transient ]

	// Public Imports
	UProceduralSound(class UProceduralSound const &);
	UProceduralSound(void);
	class UProceduralSound &  operator=(class UProceduralSound const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.Brush
class DLL_IMPORT ABrush : public AActor
{
public:
	unsigned char                                      CsgOper;                                          		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	class UObject*                                     UnusedLightMesh;                                  		// 0x03CC ( 0x0004 ) [ CPF_Const ]
	struct FVector                                     PostPivot;                                        		// 0x03D0 ( 0x000C ) 
	struct FScale                                      MainScale;                                        		// 0x03DC ( 0x0014 ) 
	struct FScale                                      PostScale;                                        		// 0x03F0 ( 0x0014 ) 
	struct FScale                                      TempScale;                                        		// 0x0404 ( 0x0014 ) 
	class FColor                                       BrushColor;                                       		// 0x0418 ( 0x0004 ) [ CPF_Edit ]
	int                                                PolyFlags;                                        		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bColored:1;                                       		// 0x0420 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// Public Imports
	ABrush(class ABrush const &);
	ABrush(void);
	class ABrush &  operator=(class ABrush const &);
	float  BuildCoords(class FModelCoords *,class FModelCoords *);
	static void  InternalConstructor(void *);
	float  OldBuildCoords(class FModelCoords *,class FModelCoords *);
	class FCoords  OldToLocal(void)const ;
	class FCoords  OldToWorld(void)const ;
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x005C

// Class Engine.Volume
class DLL_IMPORT AVolume : public ABrush
{
public:
	class AActor*                                      AssociatedActor;                                  		// 0x0424 ( 0x0004 ) 
	struct FName                                       AssociatedActorTag;                               		// 0x0428 ( 0x0004 ) [ CPF_Edit ]
	int                                                LocationPriority;                                 		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     LocationName;                                     		// 0x0430 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class ADecorationList*                             DecoList;                                         		// 0x043C ( 0x0004 ) [ CPF_Edit | CPF_EdFindable ]

	// UScript Functions
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  Engine.Volume.DisplayDebug
	 void                      PostBeginPlay (  );                               		//  Engine.Volume.PostBeginPlay
	 bool                      Encompasses ( class AActor* Other );              		// [ FUNC_Native ] Engine.Volume.Encompasses

	// Public Imports
	AVolume(class AVolume const &);
	AVolume(void);
	class AVolume &  operator=(class AVolume const &);
	int  Encompasses(class FVector);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.AmbientLightVolume
class DLL_IMPORT AAmbientLightVolume : public AVolume
{
public:
	int                                                ALV_Width;                                        		// 0x0440 ( 0x0004 ) [ CPF_Edit ]
	int                                                ALV_Breadth;                                      		// 0x0444 ( 0x0004 ) [ CPF_Edit ]
	int                                                ALV_Height;                                       		// 0x0448 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      ShowAmbientCubes:1;                               		// 0x044C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              AmbientIntensity;                                 		// 0x0450 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       BaseColor;                                        		// 0x0454 ( 0x0004 ) [ CPF_Edit ]
	float                                              ShaderOff_AmbientIntensity;                       		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	float                                              GammaFactor;                                      		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FAmbientCube >                AmbientCubes;                                     		// 0x0460 ( 0x000C ) [ CPF_Const | CPF_Native ]
	struct FBox                                        VolumeBox;                                        		// 0x046C ( 0x001C ) [ CPF_Const | CPF_Native ]
	float                                              WidthGap;                                         		// 0x0488 ( 0x0004 ) [ CPF_Const | CPF_Native ]
	float                                              BreadthGap;                                       		// 0x048C ( 0x0004 ) [ CPF_Const | CPF_Native ]
	float                                              HeightGap;                                        		// 0x0490 ( 0x0004 ) [ CPF_Const | CPF_Native ]

	// Public Imports
	AAmbientLightVolume(class AAmbientLightVolume const &);
	AAmbientLightVolume(void);
	class AAmbientLightVolume &  operator=(class AAmbientLightVolume const &);
	void  BuildAmbientLightVolume(class ULevel *,class FString);
	class FColor  CalcIncidentLight(class UViewport *,class FVector,class FVector,class AActor *);
	struct AmbientCube *  GetAmbientCube(class FVector);
	struct AmbientCube  GetComputedAmbientCube(class FVector,class FRenderInterface *);
	static void  InternalConstructor(void *);
	struct AmbientCube *  NearAmbientCube(class FVector,class FVector,class FVector &);
	void  Render(class FDynamicActor *,class FLevelSceneNode *,class FRenderInterface *);
	void  RenderSelectedCube(struct AmbientCube *,class FRenderInterface *,class FColor);
	class FColor  RenderView(class UViewport *,class FColor);
	static class UClass *  StaticClass(void);
	void  TestSunlightVisibility(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0054

// Class Engine.NavigationPoint
class DLL_IMPORT ANavigationPoint : public AActor
{
public:
	unsigned long                                      bEndPoint:1;                                      		// 0x03C8 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      bTransientEndPoint:1;                             		// 0x03C8 ( 0x0004 )  [0x00000002][ CPF_Transient ]
	unsigned long                                      bHideEditorPaths:1;                               		// 0x03C8 ( 0x0004 )  [0x00000004][ CPF_Transient ]
	unsigned long                                      bCanReach:1;                                      		// 0x03C8 ( 0x0004 )  [0x00000008][ CPF_Transient ]
	unsigned long                                      taken:1;                                          		// 0x03C8 ( 0x0004 )  [0x00000010]
	unsigned long                                      bBlocked:1;                                       		// 0x03C8 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bPropagatesSound:1;                               		// 0x03C8 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bOneWayPath:1;                                    		// 0x03C8 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bNeverUseStrafing:1;                              		// 0x03C8 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bAlwaysUseStrafing:1;                             		// 0x03C8 ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bForceNoStrafing:1;                               		// 0x03C8 ( 0x0004 )  [0x00000400][ CPF_Const ]
	unsigned long                                      bAutoBuilt:1;                                     		// 0x03C8 ( 0x0004 )  [0x00000800][ CPF_Const ]
	unsigned long                                      bSpecialMove:1;                                   		// 0x03C8 ( 0x0004 )  [0x00001000]
	unsigned long                                      bNoAutoConnect:1;                                 		// 0x03C8 ( 0x0004 )  [0x00002000]
	unsigned long                                      bNotBased:1;                                      		// 0x03C8 ( 0x0004 )  [0x00004000][ CPF_Const ]
	unsigned long                                      bPathsChanged:1;                                  		// 0x03C8 ( 0x0004 )  [0x00008000][ CPF_Const ]
	unsigned long                                      bDestinationOnly:1;                               		// 0x03C8 ( 0x0004 )  [0x00010000]
	unsigned long                                      bSourceOnly:1;                                    		// 0x03C8 ( 0x0004 )  [0x00020000]
	unsigned long                                      bSpecialForced:1;                                 		// 0x03C8 ( 0x0004 )  [0x00040000]
	unsigned long                                      bMustBeReachable:1;                               		// 0x03C8 ( 0x0004 )  [0x00080000]
	unsigned long                                      bBlockable:1;                                     		// 0x03C8 ( 0x0004 )  [0x00100000]
	unsigned long                                      bFlyingPreferred:1;                               		// 0x03C8 ( 0x0004 )  [0x00200000]
	unsigned long                                      bMayCausePain:1;                                  		// 0x03C8 ( 0x0004 )  [0x00400000]
	unsigned long                                      bReceivePlayerToucherDiedNotify:1;                		// 0x03C8 ( 0x0004 )  [0x00800000]
	unsigned long                                      bAlreadyVisited:1;                                		// 0x03C8 ( 0x0004 )  [0x01000000]
	unsigned long                                      bVehicleDestination:1;                            		// 0x03C8 ( 0x0004 )  [0x02000000][ CPF_Edit ]
	unsigned long                                      bMakeSourceOnly:1;                                		// 0x03C8 ( 0x0004 )  [0x04000000][ CPF_Edit ]
	unsigned long                                      bNoSuperSize:1;                                   		// 0x03C8 ( 0x0004 )  [0x08000000][ CPF_Edit ]
	unsigned long                                      bForcedOnly:1;                                    		// 0x03C8 ( 0x0004 )  [0x10000000]
	class TArray< class UReachSpec* >                  PathList;                                         		// 0x03CC ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	struct FName                                       ProscribedPaths[ 0x04 ];                          		// 0x03D8 ( 0x0010 ) [ CPF_Edit ]
	struct FName                                       ForcedPaths[ 0x04 ];                              		// 0x03E8 ( 0x0010 ) [ CPF_Edit ]
	int                                                visitedWeight;                                    		// 0x03F8 ( 0x0004 ) 
	int                                                bestPathWeight;                                   		// 0x03FC ( 0x0004 ) [ CPF_Const ]
	class ANavigationPoint*                            nextNavigationPoint;                              		// 0x0400 ( 0x0004 ) [ CPF_Const ]
	class ANavigationPoint*                            nextOrdered;                                      		// 0x0404 ( 0x0004 ) [ CPF_Const ]
	class ANavigationPoint*                            prevOrdered;                                      		// 0x0408 ( 0x0004 ) [ CPF_Const ]
	class ANavigationPoint*                            previousPath;                                     		// 0x040C ( 0x0004 ) [ CPF_Const ]
	int                                                cost;                                             		// 0x0410 ( 0x0004 ) 
	int                                                ExtraCost;                                        		// 0x0414 ( 0x0004 ) [ CPF_Edit ]
	int                                                TransientCost;                                    		// 0x0418 ( 0x0004 ) [ CPF_Transient ]
	int                                                FearCost;                                         		// 0x041C ( 0x0004 ) [ CPF_Transient ]
	class APickup*                                     InventoryCache;                                   		// 0x0420 ( 0x0004 ) 
	float                                              InventoryDist;                                    		// 0x0424 ( 0x0004 ) 
	float                                              LastDetourWeight;                                 		// 0x0428 ( 0x0004 ) [ CPF_Const ]
	unsigned char                                      BaseVisible[ 0x02 ];                              		// 0x042C ( 0x0002 ) 
	float                                              BaseDist[ 0x02 ];                                 		// 0x0430 ( 0x0008 ) 
	float                                              Influence;                                        		// 0x0438 ( 0x0004 ) 
	struct FVector                                     MaxPathSize;                                      		// 0x043C ( 0x000C ) 
	int                                                VisID;                                            		// 0x0448 ( 0x0004 ) [ CPF_Edit ]
	int                                                VisCount;                                         		// 0x044C ( 0x0004 ) [ CPF_Edit ]
	class TArray< class ANavigationPoint* >            VisPoints;                                        		// 0x0450 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      HasGroundedLocation:1;                            		// 0x045C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FVector                                     GroundedLocation;                                 		// 0x0460 ( 0x000C ) [ CPF_Edit ]
	class TArray< float >                              MaxCoverAngle;                                    		// 0x046C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              AcquireTime;                                      		// 0x0478 ( 0x0004 ) [ CPF_Edit ]
	int                                                AcquireTeam;                                      		// 0x047C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      HasVisEnemyAcquiredPoints:1;                      		// 0x0480 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class TArray< class ANavigationPoint* >            VisEnemyAcquiredPoints;                           		// 0x0484 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      PlayerToucherDied ( class APawn* P );             		//  Engine.NavigationPoint.PlayerToucherDied
	 void                      MoverClosed (  );                                 		//  Engine.NavigationPoint.MoverClosed
	 void                      MoverOpened (  );                                 		//  Engine.NavigationPoint.MoverOpened
	 bool                      ProceedWithMove ( class APawn* Other );           		//  Engine.NavigationPoint.ProceedWithMove
	 bool                      eventSuggestMovePreparation ( class APawn* Other );		// [ FUNC_Event ] Engine.NavigationPoint.SuggestMovePreparation
	 float                     eventDetourWeight ( class APawn* Other, float PathWeight );		// [ FUNC_Event ] Engine.NavigationPoint.DetourWeight
	 bool                      eventAccept ( class AActor* Incoming, class AActor* Source );		// [ FUNC_Event ] Engine.NavigationPoint.Accept
	 int                       eventSpecialCost ( class APawn* Seeker, class UReachSpec* Path );		// [ FUNC_Event ] Engine.NavigationPoint.SpecialCost
	 void                      SetBaseVisibility ( int BaseNum );                		//  Engine.NavigationPoint.SetBaseVisibility
	 void                      SetBaseDistance ( int BaseNum );                  		// [ FUNC_Final | FUNC_Native ] Engine.NavigationPoint.SetBaseDistance
	 void                      PostBeginPlay (  );                               		//  Engine.NavigationPoint.PostBeginPlay

	// Public Imports
	ANavigationPoint(class ANavigationPoint const &);
	ANavigationPoint(void);
	class ANavigationPoint &  operator=(class ANavigationPoint const &);
	int  CanReach(class ANavigationPoint *,float,int);
	void  CleanUpPruned(void);
	int  FindAlternatePath(class UReachSpec *,int);
	class UReachSpec *  GetReachSpecTo(class ANavigationPoint *);
	static void  InternalConstructor(void *);
	int  PrunePaths(void);
	void  SetBaseDistance(int,float);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00C8

// Class Engine.SmallNavigationPoint
class DLL_IMPORT ASmallNavigationPoint : public ANavigationPoint
{
public:

	// Public Imports
	ASmallNavigationPoint(class ASmallNavigationPoint const &);
	class ASmallNavigationPoint &  operator=(class ASmallNavigationPoint const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.LevelLoadingView
class DLL_IMPORT ALevelLoadingView : public ASmallNavigationPoint
{
public:

	// Public Imports
	ALevelLoadingView(class ALevelLoadingView const &);
	class ALevelLoadingView &  operator=(class ALevelLoadingView const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.wArrangeTurret
class DLL_IMPORT AwArrangeTurret : public AActor
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	int                                                MaxVehicleCount;                                  		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	int                                                VehicleCount;                                     		// 0x03D0 ( 0x0004 ) 
	class ANavigationPoint*                            myMarker;                                         		// 0x03D4 ( 0x0004 ) 

	// UScript Functions
	 void                      ForceSpawnVehicle (  );                           		//  Engine.wArrangeTurret.ForceSpawnVehicle
	 void                      ForceDestroyVehicle (  );                         		//  Engine.wArrangeTurret.ForceDestroyVehicle
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] Engine.wArrangeTurret.Trigger
	 void                      eventVehicleUnPossessed ( class AVehicle* V );    		// [ FUNC_Event ] Engine.wArrangeTurret.VehicleUnPossessed
	 void                      eventVehiclePossessed ( class AVehicle* V );      		// [ FUNC_Event ] Engine.wArrangeTurret.VehiclePossessed
	 void                      eventVehicleDestroyed ( class AVehicle* V );      		// [ FUNC_Event ] Engine.wArrangeTurret.VehicleDestroyed
	 void                      PreBeginPlay (  );                                		//  Engine.wArrangeTurret.PreBeginPlay

	// Public Imports
	AwArrangeTurret(class AwArrangeTurret const &);
	class AwArrangeTurret &  operator=(class AwArrangeTurret const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.AnnouncerVoice
class DLL_IMPORT AAnnouncerVoice : public AInfo
{
public:
	struct FString                                     SoundPackage;                                     		// 0x041C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FallbackSoundPackage;                             		// 0x0428 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AlternateFallbackSoundPackage;                    		// 0x0434 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnouncerName;                                    		// 0x0440 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FCachedSound >                CachedSounds;                                     		// 0x044C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bPrecachedBaseSounds:1;                           		// 0x0458 ( 0x0004 )  [0x00000001]
	unsigned long                                      bPrecachedGameSounds:1;                           		// 0x0458 ( 0x0004 )  [0x00000002]
	unsigned long                                      bEnglishOnly:1;                                   		// 0x0458 ( 0x0004 )  [0x00000004][ CPF_Const ]

	// UScript Functions
	 void                      PrecacheList (  );                                		//  Engine.AnnouncerVoice.PrecacheList
	 void                      PrecacheAnnouncements ( bool bRewardSounds );     		//  Engine.AnnouncerVoice.PrecacheAnnouncements
	 class USound*             PrecacheFallbackPackage ( struct FString Package, struct FString AName, struct FString strFullName );		//  Engine.AnnouncerVoice.PrecacheFallbackPackage
	 void                      ResetPrecacheSound (  );                          		//  Engine.AnnouncerVoice.ResetPrecacheSound
	 class USound*             PrecacheSound ( struct FString AName, struct FString strFullName );		//  Engine.AnnouncerVoice.PrecacheSound
	 class USound*             eventGetSound ( struct FString AName );           		// [ FUNC_Event ] Engine.AnnouncerVoice.GetSound

	// Public Imports
	AAnnouncerVoice(class AAnnouncerVoice const &);
	class AAnnouncerVoice &  operator=(class AAnnouncerVoice const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class Engine.PathNode
class DLL_IMPORT APathNode : public ANavigationPoint
{
public:

	// Public Imports
	APathNode(class APathNode const &);
	APathNode(void);
	class APathNode &  operator=(class APathNode const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.RoadPathNode
class DLL_IMPORT ARoadPathNode : public APathNode
{
public:
	float                                              MaxRoadDist;                                      		// 0x0490 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	ARoadPathNode(class ARoadPathNode const &);
	ARoadPathNode(void);
	class ARoadPathNode &  operator=(class ARoadPathNode const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.HoverPathNode
class DLL_IMPORT AHoverPathNode : public ARoadPathNode
{
public:

	// UScript Functions
	 int                       eventSpecialCost ( class APawn* Other, class UReachSpec* Path );		// [ FUNC_Event ] Engine.HoverPathNode.SpecialCost

	// Public Imports
	AHoverPathNode(class AHoverPathNode const &);
	AHoverPathNode(void);
	class AHoverPathNode &  operator=(class AHoverPathNode const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.FlyingPathNode
class DLL_IMPORT AFlyingPathNode : public APathNode
{
public:
	int                                                iPathPoint;                                       		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	int                                                RegenLoc;                                         		// 0x0494 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	AFlyingPathNode(class AFlyingPathNode const &);
	AFlyingPathNode(void);
	class AFlyingPathNode &  operator=(class AFlyingPathNode const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.GameProfile
class DLL_IMPORT UGameProfile : public UObject
{
public:
	struct FString                                     PackageName;                                      		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                ManifestIndex;                                    		// 0x0038 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     PositionName[ 0x05 ];                             		// 0x003C ( 0x003C ) [ CPF_Localized | CPF_NeedCtorLink ]
	unsigned char                                      PlayerPositions[ 0x07 ];                          		// 0x0078 ( 0x0007 ) 
	class TArray< struct FString >                     PlayerTeam;                                       		// 0x0080 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                PlayerLineup[ 0x04 ];                             		// 0x008C ( 0x0010 ) 
	struct FString                                     EnemyTeam;                                        		// 0x009C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     TeamName;                                         		// 0x00A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     TeamSymbolName;                                   		// 0x00B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              BaseDifficulty;                                   		// 0x00C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              Difficulty;                                       		// 0x00C4 ( 0x0004 ) [ CPF_Edit ]
	int                                                SalaryCap;                                        		// 0x00C8 ( 0x0004 ) 
	struct FString                                     PlayerName;                                       		// 0x00CC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PlayerCharacter;                                  		// 0x00D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Kills;                                            		// 0x00E4 ( 0x0004 ) [ CPF_Edit ]
	int                                                Assists;                                          		// 0x00E8 ( 0x0004 ) [ CPF_Edit ]
	int                                                Goals;                                            		// 0x00EC ( 0x0004 ) [ CPF_Edit ]
	int                                                Deaths;                                           		// 0x00F0 ( 0x0004 ) [ CPF_Edit ]
	int                                                Wins;                                             		// 0x00F4 ( 0x0004 ) [ CPF_Edit ]
	int                                                Matches;                                          		// 0x00F8 ( 0x0004 ) [ CPF_Edit ]
	int                                                ladderrung[ 0x06 ];                               		// 0x00FC ( 0x0018 ) 
	struct FString                                     SpecialEvent;                                     		// 0x0114 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameLadderName;                                   		// 0x0120 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UClass*                                      GameLadder;                                       		// 0x012C ( 0x0004 ) 
	int                                                CurrentLadder;                                    		// 0x0130 ( 0x0004 ) 
	int                                                CurrentMenuRung;                                  		// 0x0134 ( 0x0004 ) [ CPF_Transient ]
	class UObject*                                     NextMatchObject;                                  		// 0x0138 ( 0x0004 ) [ CPF_Transient ]
	class UObject*                                     ChampBorderObject;                                		// 0x013C ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      bInLadderGame:1;                                  		// 0x0140 ( 0x0004 )  [0x00000001]
	unsigned long                                      bWonMatch:1;                                      		// 0x0140 ( 0x0004 )  [0x00000002]

	// UScript Functions
	 bool                      CanChangeTeam ( class AController* Other, int NewTeam );		//  Engine.GameProfile.CanChangeTeam
	 void                      ReportCheat ( class APlayerController* Cheater, struct FString cheat );		//  Engine.GameProfile.ReportCheat
	 void                      ClearTeammates (  );                              		//  Engine.GameProfile.ClearTeammates
	 bool                      ReleaseTeammate ( struct FString botname );       		//  Engine.GameProfile.ReleaseTeammate
	 bool                      AddTeammate ( struct FString botname );           		//  Engine.GameProfile.AddTeammate
	 void                      SetLineup ( int lineuppos, int teampos );         		//  Engine.GameProfile.SetLineup
	 void                      SetPosition ( int lineupnum, struct FString posn );		//  Engine.GameProfile.SetPosition
	 struct FString            GetPositionDescription ( int PlayerNum );         		//  Engine.GameProfile.GetPositionDescription
	 unsigned char             EnumPositionDescription ( struct FString posnval );		//  Engine.GameProfile.EnumPositionDescription
	 struct FString            TextPositionDescription ( int posnval );          		//  Engine.GameProfile.TextPositionDescription
	 int                       GetNumTeammatesForMatch (  );                     		//  Engine.GameProfile.GetNumTeammatesForMatch
	 int                       GetNumPositions (  );                             		//  Engine.GameProfile.GetNumPositions
	 struct FString            GetMatchDescription (  );                         		//  Engine.GameProfile.GetMatchDescription
	 void                      ContinueSinglePlayerGame ( class ALevelInfo* Level, bool bReplace );		//  Engine.GameProfile.ContinueSinglePlayerGame
	 int                       FindFirstUnfinishedLadder (  );                   		//  Engine.GameProfile.FindFirstUnfinishedLadder
	 void                      StartNewMatch ( int PickedLadder, class ALevelInfo* CurrentLevel );		//  Engine.GameProfile.StartNewMatch
	 void                      RegisterGame ( class AGameInfo* currentGame, class APlayerReplicationInfo* PRI );		//  Engine.GameProfile.RegisterGame
	 class UMatchInfo*         GetMatchInfo ( int Ladder, int rung );            		//  Engine.GameProfile.GetMatchInfo
	 void                      CheatJumpMatch ( class AGameInfo* currentGame, int Param );		//  Engine.GameProfile.CheatJumpMatch
	 void                      CheatSkipMatch ( class AGameInfo* currentGame );  		//  Engine.GameProfile.CheatSkipMatch
	 void                      Initialize ( class AGameInfo* currentGame, struct FString pn );		//  Engine.GameProfile.Initialize

	// Public Imports
	UGameProfile(class UGameProfile const &);
	class UGameProfile &  operator=(class UGameProfile const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0118

// Class Engine.Mutator
class DLL_IMPORT AMutator : public AInfo
{
public:
	class AMutator*                                    NextMutator;                                      		// 0x041C ( 0x0004 ) 
	class UClass*                                      DefaultWeapon;                                    		// 0x0420 ( 0x0004 ) 
	struct FString                                     DefaultWeaponName;                                		// 0x0424 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bUserAdded:1;                                     		// 0x0430 ( 0x0004 )  [0x00000001]
	unsigned long                                      bAddToServerPackages:1;                           		// 0x0430 ( 0x0004 )  [0x00000002]
	struct FString                                     IconMaterialName;                                 		// 0x0434 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ConfigMenuClassName;                              		// 0x0440 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     GroupName;                                        		// 0x044C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     FriendlyName;                                     		// 0x0458 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Description;                                      		// 0x0464 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DriverLeftVehicle ( class AVehicle* V, class APawn* P );		//  Engine.Mutator.DriverLeftVehicle
	 bool                      CanLeaveVehicle ( class AVehicle* V, class APawn* P );		//  Engine.Mutator.CanLeaveVehicle
	 void                      DriverEnteredVehicle ( class AVehicle* V, class APawn* P );		//  Engine.Mutator.DriverEnteredVehicle
	 bool                      CanEnterVehicle ( class AVehicle* V, class APawn* P );		//  Engine.Mutator.CanEnterVehicle
	 void                      ServerTraveling ( struct FString URL, bool bItems );		//  Engine.Mutator.ServerTraveling
	 bool                      eventOverrideDownload ( struct FString PlayerIP, struct FString PlayerID, struct FString PlayerURL, struct FString* RedirectURL );		// [ FUNC_Event ] Engine.Mutator.OverrideDownload
	 void                      MutatorFillPlayInfo ( class UPlayInfo* PlayInfo );		//  Engine.Mutator.MutatorFillPlayInfo
	 struct FString            ParseChatPercVar ( class AController* Who, struct FString Cmd );		//  Engine.Mutator.ParseChatPercVar
	 void                      GetServerPlayers ( struct FServerResponseLine* ServerState );		//  Engine.Mutator.GetServerPlayers
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  Engine.Mutator.GetServerDetails
	 void                      PlayerChangedClass ( class AController* aPlayer );		//  Engine.Mutator.PlayerChangedClass
	 bool                      CheckReplacement ( class AActor* Other, unsigned char* bSuperRelevant );		//  Engine.Mutator.CheckReplacement
	 bool                      CheckRelevance ( class AActor* Other );           		//  Engine.Mutator.CheckRelevance
	 bool                      IsRelevant ( class AActor* Other, unsigned char* bSuperRelevant );		//  Engine.Mutator.IsRelevant
	 bool                      AlwaysKeep ( class AActor* Other );               		//  Engine.Mutator.AlwaysKeep
	 bool                      ReplaceWith ( class AActor* Other, struct FString aClassName );		//  Engine.Mutator.ReplaceWith
	 struct FString            NewRecommendCombo ( struct FString ComboName, class AAIController* C );		//  Engine.Mutator.NewRecommendCombo
	 struct FString            RecommendCombo ( struct FString ComboName );      		//  Engine.Mutator.RecommendCombo
	 void                      AddMutator ( class AMutator* M );                 		//  Engine.Mutator.AddMutator
	 class UClass*             MyDefaultWeapon (  );                             		//  Engine.Mutator.MyDefaultWeapon
	 struct FString            GetInventoryClassOverride ( struct FString InventoryClassName );		//  Engine.Mutator.GetInventoryClassOverride
	 class UClass*             GetInventoryClass ( struct FString InventoryClassName );		//  Engine.Mutator.GetInventoryClass
	 class UClass*             GetDefaultWeapon (  );                            		//  Engine.Mutator.GetDefaultWeapon
	 void                      ModifyPlayer ( class APawn* Other );              		//  Engine.Mutator.ModifyPlayer
	 void                      NotifyLogout ( class AController* Exiting );      		//  Engine.Mutator.NotifyLogout
	 void                      ModifyLogin ( struct FString* Portal, struct FString* Options );		//  Engine.Mutator.ModifyLogin
	 void                      Mutate ( struct FString MutateString, class APlayerController* Sender );		//  Engine.Mutator.Mutate
	 void                      Destroyed (  );                                   		//  Engine.Mutator.Destroyed
	 bool                      MutatorIsAllowed (  );                            		//  Engine.Mutator.MutatorIsAllowed
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.Mutator.PreBeginPlay

	// Public Imports
	AMutator(class AMutator const &);
	class AMutator &  operator=(class AMutator const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0054

// Class Engine.Triggers
class DLL_IMPORT ATriggers : public AActor
{
public:

	// Public Imports
	ATriggers(class ATriggers const &);
	ATriggers(void);
	class ATriggers &  operator=(class ATriggers const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.AvoidMarker
class DLL_IMPORT AAvoidMarker : public ATriggers
{
public:
	unsigned char                                      TeamNum;                                          		// 0x03C8 ( 0x0001 ) 

	// UScript Functions
	 void                      StartleBots (  );                                 		//  Engine.AvoidMarker.StartleBots
	 bool                      RelevantTo ( class APawn* P );                    		//  Engine.AvoidMarker.RelevantTo
	 void                      Touch ( class AActor* Other );                    		//  Engine.AvoidMarker.Touch

	// Public Imports
	AAvoidMarker(class AAvoidMarker const &);
	class AAvoidMarker &  operator=(class AAvoidMarker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.Manifest
class DLL_IMPORT UManifest : public UObject
{
public:
	class TArray< struct FString >                     ManifestEntries;                                  		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_Const | CPF_NeedCtorLink ]

	// Public Imports
	UManifest(class UManifest const &);
	UManifest(void);
	class UManifest &  operator=(class UManifest const &);
	void  AddEntry(class FString const &);
	int  FindEntry(class FString const &);
	static void  InternalConstructor(void *);
	void  RemoveEntry(int);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.JumpDest
class DLL_IMPORT AJumpDest : public ANavigationPoint
{
public:
	unsigned long                                      bOptionalJumpDest:1;                              		// 0x0490 ( 0x0004 )  [0x00000001]
	unsigned long                                      bForceDoubleJump:1;                               		// 0x0490 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                NumUpstreamPaths;                                 		// 0x0494 ( 0x0004 ) 
	class UReachSpec*                                  UpstreamPaths[ 0x08 ];                            		// 0x0498 ( 0x0020 ) 
	struct FVector                                     NeededJump[ 0x08 ];                               		// 0x04B8 ( 0x0060 ) 
	float                                              CalculatedGravityZ[ 0x08 ];                       		// 0x0518 ( 0x0020 ) 

	// UScript Functions
	 bool                      eventSuggestMovePreparation ( class APawn* Other );		// [ FUNC_Event ] Engine.JumpDest.SuggestMovePreparation
	 void                      DoJump ( class APawn* Other );                    		//  Engine.JumpDest.DoJump
	 int                       eventSpecialCost ( class APawn* Other, class UReachSpec* Path );		// [ FUNC_Event ] Engine.JumpDest.SpecialCost
	 int                       GetPathIndex ( class UReachSpec* Path );          		//  Engine.JumpDest.GetPathIndex

	// Public Imports
	AJumpDest(class AJumpDest const &);
	AJumpDest(void);
	class AJumpDest &  operator=(class AJumpDest const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00A8

// Class Engine.JumpPad
class DLL_IMPORT AJumpPad : public ANavigationPoint
{
public:
	struct FVector                                     JumpVelocity;                                     		// 0x0490 ( 0x000C ) 
	struct FVector                                     BACKUP_JumpVelocity;                              		// 0x049C ( 0x000C ) 
	class AActor*                                      JumpTarget;                                       		// 0x04A8 ( 0x0004 ) 
	float                                              JumpZModifier;                                    		// 0x04AC ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      JumpSound;                                        		// 0x04B0 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      eventPostTouch ( class AActor* Other );           		// [ FUNC_Event ] Engine.JumpPad.PostTouch
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Event ] Engine.JumpPad.Touch
	 void                      Reset (  );                                       		//  Engine.JumpPad.Reset
	 void                      PostBeginPlay (  );                               		//  Engine.JumpPad.PostBeginPlay

	// Public Imports
	AJumpPad(class AJumpPad const &);
	AJumpPad(void);
	class AJumpPad &  operator=(class AJumpPad const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.AntiPortalActor
class DLL_IMPORT AAntiPortalActor : public AActor
{
public:
	unsigned char                                      AntiPortalMode;                                   		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]

	// Public Imports
	AAntiPortalActor(class AAntiPortalActor const &);
	class AAntiPortalActor &  operator=(class AAntiPortalActor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.InventoryAttachment
class DLL_IMPORT AInventoryAttachment : public AActor
{
public:
	unsigned long                                      bFastAttachmentReplication:1;                     		// 0x03C8 ( 0x0004 )  [0x00000001]
	int                                                inventoryattachment_dummy;                        		// 0x03CC ( 0x0004 ) 

	// UScript Functions
	 void                      InitFor ( class AInventory* i );                  		//  Engine.InventoryAttachment.InitFor

	// Public Imports
	AInventoryAttachment(class AInventoryAttachment const &);
	AInventoryAttachment(void);
	class AInventoryAttachment &  operator=(class AInventoryAttachment const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.WeaponAttachment
class DLL_IMPORT AWeaponAttachment : public AInventoryAttachment
{
public:
	class AActor*                                      HitActor[ 0x06 ];                                 		// 0x03D0 ( 0x0018 ) 
	struct FVector                                     HitNormal[ 0x06 ];                                		// 0x03E8 ( 0x0048 ) 
	unsigned char                                      CollisionPart[ 0x06 ];                            		// 0x0430 ( 0x0006 ) 
	class UMaterial*                                   HitMaterial[ 0x06 ];                              		// 0x0438 ( 0x0018 ) 
	struct FVector                                     vEffLocation[ 0x06 ];                             		// 0x0450 ( 0x0048 ) 
	struct FstMultiBulletPerFire                       stMBPF[ 0x0A ];                                   		// 0x0498 ( 0x07F8 ) 
	int                                                RepLastHitIdx[ 0x0A ];                            		// 0x0C90 ( 0x0028 ) [ CPF_Net ]
	struct FVector                                     RepEffectLocation[ 0x3C ];                        		// 0x0CB8 ( 0x02D0 ) [ CPF_Net ]
	int                                                nIndexEffect[ 0x3C ];                             		// 0x0F88 ( 0x00F0 ) [ CPF_Net ]
	int                                                nRepOffset;                                       		// 0x1078 ( 0x0004 ) 
	int                                                nBulletCntPerFire;                                		// 0x107C ( 0x0004 ) [ CPF_Net ]
	int                                                LastHitIdx;                                       		// 0x1080 ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      FlashCount;                                       		// 0x1084 ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      FiringMode;                                       		// 0x1085 ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      SpawnHitCount;                                    		// 0x1086 ( 0x0001 ) [ CPF_Net ]
	unsigned long                                      bAutoFire:1;                                      		// 0x1088 ( 0x0004 )  [0x00000001][ CPF_Net ]
	float                                              FiringSpeed;                                      		// 0x108C ( 0x0004 ) 
	unsigned long                                      bMatchWeapons:1;                                  		// 0x1090 ( 0x0004 )  [0x00000001]
	class FColor                                       BeaconColor;                                      		// 0x1094 ( 0x0004 ) 
	class AwWeapon*                                    Weapon;                                           		// 0x1098 ( 0x0004 ) 
	class UClass*                                      SplashEffect;                                     		// 0x109C ( 0x0004 ) 
	int                                                iLocalWeaponID;                                   		// 0x10A0 ( 0x0004 ) 
	int                                                iLocalAddPartsID;                                 		// 0x10A4 ( 0x0004 ) 
	int                                                iRepWeaponID;                                     		// 0x10A8 ( 0x0004 ) [ CPF_Net ]
	int                                                iRepAddPartsID;                                   		// 0x10AC ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bMeleeKnifeOrButt:1;                              		// 0x10B0 ( 0x0004 )  [0x00000001][ CPF_Net ]
	class UwWeaponBaseParams*                          BaseParams;                                       		// 0x10B4 ( 0x0004 ) 
	class UClass*                                      ResParams;                                        		// 0x10B8 ( 0x0004 ) 
	int                                                iPainting_Item_ID;                                		// 0x10BC ( 0x0004 ) [ CPF_Net ]

	// UScript Functions
	 struct FCoords            GetBoneTipLocation1st (  );                       		// [ FUNC_Simulated ] Engine.WeaponAttachment.GetBoneTipLocation1st
	 struct FCoords            GetBoneTipLocation3rd (  );                       		// [ FUNC_Simulated ] Engine.WeaponAttachment.GetBoneTipLocation3rd
	 struct FName              GetBoneNameRotation (  );                         		// [ FUNC_Simulated ] Engine.WeaponAttachment.GetBoneNameRotation
	 struct FName              GetBoneNameTip (  );                              		// [ FUNC_Simulated ] Engine.WeaponAttachment.GetBoneNameTip
	 void                      eventwLoadOut ( int iID, int iAddPartsID );       		// [ FUNC_Simulated | FUNC_Event ] Engine.WeaponAttachment.wLoadOut
	 void                      eventUpdatePenetrateHit ( class AActor** mHitActor, struct FVector* mHitLocation, struct FVector* mHitNormal, class UMaterial** mHitMaterial, int mLastHitIdx );		// [ FUNC_Event ] Engine.WeaponAttachment.UpdatePenetrateHit
	 void                      eventUpdateHit ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial );		// [ FUNC_Event ] Engine.WeaponAttachment.UpdateHit
	 void                      CheckForSplash ( int nIndex, int i );             		// [ FUNC_Simulated ] Engine.WeaponAttachment.CheckForSplash
	 void                      eventThirdPersonEffects (  );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.WeaponAttachment.ThirdPersonEffects
	 void                      FakeThirdPersonEffects ( class AActor* HitActor, struct FVector HitLocation, struct FVector HitNormal, class UMaterial* HitMaterial );		// [ FUNC_Simulated ] Engine.WeaponAttachment.FakeThirdPersonEffects
	 void                      FakeUpdateTracer ( struct FVector LastHitLocation );		// [ FUNC_Simulated ] Engine.WeaponAttachment.FakeUpdateTracer
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.WeaponAttachment.Destroyed
	 void                      ClearArray (  );                                  		// [ FUNC_Simulated ] Engine.WeaponAttachment.ClearArray

	// Public Imports
	AWeaponAttachment(class AWeaponAttachment const &);
	AWeaponAttachment(void);
	class AWeaponAttachment &  operator=(class AWeaponAttachment const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0CF0

// Class Engine.TeamInfo
class DLL_IMPORT ATeamInfo : public AReplicationInfo
{
public:
	struct FString                                     TeamName;                                         		// 0x041C ( 0x000C ) [ CPF_Net | CPF_Localized | CPF_NeedCtorLink ]
	int                                                Size;                                             		// 0x0428 ( 0x0004 ) 
	float                                              Score;                                            		// 0x042C ( 0x0004 ) [ CPF_Net ]
	float                                              Score2;                                           		// 0x0430 ( 0x0004 ) [ CPF_Net ]
	int                                                TeamIndex;                                        		// 0x0434 ( 0x0004 ) [ CPF_Net ]
	class FColor                                       TeamColor;                                        		// 0x0438 ( 0x0004 ) [ CPF_Net ]
	class FColor                                       AltTeamColor;                                     		// 0x043C ( 0x0004 ) [ CPF_Net ]
	class AActor*                                      HomeBase;                                         		// 0x0440 ( 0x0004 ) [ CPF_Net ]
	class UClass*                                      DefaultPlayerClass;                               		// 0x0444 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     ColorNames[ 0x04 ];                               		// 0x0448 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                ElapsedTime_UAVBegin;                             		// 0x0478 ( 0x0004 ) [ CPF_Net ]
	int                                                ElapsedTime_UAVEnd;                               		// 0x047C ( 0x0004 ) [ CPF_Net ]

	// UScript Functions
	 void                      GetAllCharacters ( class TArray< struct FString >* Chars );		//  Engine.TeamInfo.GetAllCharacters
	 void                      SetCharacters ( class TArray< struct FString > Chars );		//  Engine.TeamInfo.SetCharacters
	 void                      RemoveFromTeam ( class AController* Other );      		//  Engine.TeamInfo.RemoveFromTeam
	 bool                      AddToTeam ( class AController* Other );           		//  Engine.TeamInfo.AddToTeam
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] Engine.TeamInfo.GetHumanReadableName
	 bool                      BelongsOnTeam ( class UClass* PawnClass );        		//  Engine.TeamInfo.BelongsOnTeam
	 int                       GetUAVTime (  );                                  		// [ FUNC_Simulated ] Engine.TeamInfo.GetUAVTime
	 bool                      IsUAVOn (  );                                     		// [ FUNC_Simulated ] Engine.TeamInfo.IsUAVOn
	 void                      SetUAV (  );                                      		//  Engine.TeamInfo.SetUAV

	// Public Imports
	ATeamInfo(class ATeamInfo const &);
	ATeamInfo(void);
	class ATeamInfo &  operator=(class ATeamInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0064

// Class Engine.Door
class DLL_IMPORT ADoor : public ANavigationPoint
{
public:
	struct FName                                       DoorTag;                                          		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	class AMover*                                      MyDoor;                                           		// 0x0494 ( 0x0004 ) 
	struct FName                                       DoorTrigger;                                      		// 0x0498 ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      RecommendedTrigger;                               		// 0x049C ( 0x0004 ) 
	unsigned long                                      bInitiallyClosed:1;                               		// 0x04A0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bBlockedWhenClosed:1;                             		// 0x04A0 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bDoorOpen:1;                                      		// 0x04A0 ( 0x0004 )  [0x00000004]
	unsigned long                                      bTempNoCollide:1;                                 		// 0x04A0 ( 0x0004 )  [0x00000008]

	// UScript Functions
	 bool                      eventSuggestMovePreparation ( class APawn* Other );		// [ FUNC_Event ] Engine.Door.SuggestMovePreparation
	 bool                      ProceedWithMove ( class APawn* Other );           		//  Engine.Door.ProceedWithMove
	 class AActor*             SpecialHandling ( class APawn* Other );           		//  Engine.Door.SpecialHandling
	 void                      MoverClosed (  );                                 		//  Engine.Door.MoverClosed
	 void                      MoverOpened (  );                                 		//  Engine.Door.MoverOpened
	 void                      PostBeginPlay (  );                               		//  Engine.Door.PostBeginPlay

	// Public Imports
	ADoor(class ADoor const &);
	ADoor(void);
	class ADoor &  operator=(class ADoor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.AutoDoor
class DLL_IMPORT AAutoDoor : public ADoor
{
public:

	// Public Imports
	AAutoDoor(class AAutoDoor const &);
	class AAutoDoor &  operator=(class AAutoDoor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.Ladder
class DLL_IMPORT ALadder : public ASmallNavigationPoint
{
public:
	class ALadderVolume*                               MyLadder;                                         		// 0x0490 ( 0x0004 ) 
	class ALadder*                                     LadderList;                                       		// 0x0494 ( 0x0004 ) 

	// UScript Functions
	 bool                      eventSuggestMovePreparation ( class APawn* Other );		// [ FUNC_Event ] Engine.Ladder.SuggestMovePreparation

	// Public Imports
	ALadder(class ALadder const &);
	ALadder(void);
	class ALadder &  operator=(class ALadder const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.AutoLadder
class DLL_IMPORT AAutoLadder : public ALadder
{
public:

	// Public Imports
	AAutoLadder(class AAutoLadder const &);
	AAutoLadder(void);
	class AAutoLadder &  operator=(class AAutoLadder const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.UserzoneInfo
class DLL_IMPORT UUserzoneInfo : public UObject
{
public:
	float                                              fMinimapWidth;                                    		// 0x002C ( 0x0004 ) 
	float                                              fMinimapHeight;                                   		// 0x0030 ( 0x0004 ) 
	int                                                nRowCount;                                        		// 0x0034 ( 0x0004 ) 
	int                                                nColcount;                                        		// 0x0038 ( 0x0004 ) 
	float                                              fCellSize;                                        		// 0x003C ( 0x0004 ) 
	class AHUD*                                        wScoreBoardHud;                                   		// 0x0040 ( 0x0004 ) 
	class TArray< struct FSUserGroupInfo >             UserGroupInfos;                                   		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UTexture*                                    kUserzoneTexture;                                 		// 0x0050 ( 0x0004 ) 

	// UScript Functions
	 int                       eventGetMaxCalcTime (  );                         		// [ FUNC_Event ] Engine.UserzoneInfo.GetMaxCalcTime
	 void                      SetScoreboardHud ( class AHUD* _hud );            		//  Engine.UserzoneInfo.SetScoreboardHud
	 void                      eventGetScreenPos ( int nGroupIndex, int* nPosX, int* nPosY );		// [ FUNC_Event ] Engine.UserzoneInfo.GetScreenPos
	 int                       GetCellIndex ( struct FVector kPos );             		//  Engine.UserzoneInfo.GetCellIndex
	 struct FVector            GetInterpolationPos ( struct FVector kStartPos, struct FVector kEndPos, float A );		//  Engine.UserzoneInfo.GetInterpolationPos
	 void                      eventAddCalcTime ( struct FVector kStartPos, struct FVector kEndPos, float fTime );		// [ FUNC_Event ] Engine.UserzoneInfo.AddCalcTime
	 void                      ResetCalcTime (  );                               		//  Engine.UserzoneInfo.ResetCalcTime
	 void                      Destroy (  );                                     		//  Engine.UserzoneInfo.Destroy
	 void                      CalcMapSize ( float _fCellSize );                 		//  Engine.UserzoneInfo.CalcMapSize

	// Public Imports
	UUserzoneInfo(class UUserzoneInfo const &);
	class UUserzoneInfo &  operator=(class UUserzoneInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class Engine.TonemappingVolume
class DLL_IMPORT ATonemappingVolume : public AVolume
{
public:
	unsigned char                                      TonemappingIndex;                                 		// 0x0440 ( 0x0001 ) [ CPF_Edit ]

	// Public Imports
	ATonemappingVolume(class ATonemappingVolume const &);
	class ATonemappingVolume &  operator=(class ATonemappingVolume const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.CubemapVolume
class DLL_IMPORT ACubemapVolume : public AVolume
{
public:
	class UMaterial*                                   Cubemap;                                          		// 0x0440 ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	ACubemapVolume(class ACubemapVolume const &);
	class ACubemapVolume &  operator=(class ACubemapVolume const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.LinkAntiportalVolume
class DLL_IMPORT ALinkAntiportalVolume : public AVolume
{
public:
	class TArray< class AAntiPortalActor* >            AntiPortals;                                      		// 0x0440 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	ALinkAntiportalVolume(class ALinkAntiportalVolume const &);
	class ALinkAntiportalVolume &  operator=(class ALinkAntiportalVolume const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.BlockingVolume
class DLL_IMPORT ABlockingVolume : public AVolume
{
public:
	unsigned long                                      bClampFluid:1;                                    		// 0x0440 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bClassBlocker:1;                                  		// 0x0440 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	class TArray< class UClass* >                      BlockedClasses;                                   		// 0x0444 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	ABlockingVolume(class ABlockingVolume const &);
	ABlockingVolume(void);
	class ABlockingVolume &  operator=(class ABlockingVolume const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.PotentialClimbWatcher
class DLL_IMPORT APotentialClimbWatcher : public AInfo
{
public:

	// UScript Functions
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] Engine.PotentialClimbWatcher.Tick

	// Public Imports
	APotentialClimbWatcher(class APotentialClimbWatcher const &);
	class APotentialClimbWatcher &  operator=(class APotentialClimbWatcher const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.PhysicsVolume
class DLL_IMPORT APhysicsVolume : public AVolume
{
public:
	struct FVector                                     ZoneVelocity;                                     		// 0x0440 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     Gravity;                                          		// 0x044C ( 0x000C ) [ CPF_Edit | CPF_Net ]
	struct FVector                                     BACKUP_Gravity;                                   		// 0x0458 ( 0x000C ) 
	float                                              GroundFriction;                                   		// 0x0464 ( 0x0004 ) [ CPF_Edit ]
	float                                              TerminalVelocity;                                 		// 0x0468 ( 0x0004 ) [ CPF_Edit ]
	float                                              DamagePerSec;                                     		// 0x046C ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      DamageType;                                       		// 0x0470 ( 0x0004 ) [ CPF_Edit ]
	int                                                Priority;                                         		// 0x0474 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      EntrySound;                                       		// 0x0478 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      ExitSound;                                        		// 0x047C ( 0x0004 ) [ CPF_Edit ]
	class UI3DL2Listener*                              VolumeEffect;                                     		// 0x0480 ( 0x0004 ) [ CPF_Edit | CPF_EditInline ]
	class UClass*                                      EntryActor;                                       		// 0x0484 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      ExitActor;                                        		// 0x0488 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      PawnEntryActor;                                   		// 0x048C ( 0x0004 ) [ CPF_Edit ]
	float                                              FluidFriction;                                    		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ViewFlash;                                        		// 0x0494 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     ViewFog;                                          		// 0x04A0 ( 0x000C ) [ CPF_Edit ]
	unsigned long                                      bPainCausing:1;                                   		// 0x04AC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      BACKUP_bPainCausing:1;                            		// 0x04AC ( 0x0004 )  [0x00000002]
	unsigned long                                      bDestructive:1;                                   		// 0x04AC ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bNoInventory:1;                                   		// 0x04AC ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bMoveProjectiles:1;                               		// 0x04AC ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bBounceVelocity:1;                                		// 0x04AC ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bNeutralZone:1;                                   		// 0x04AC ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bWaterVolume:1;                                   		// 0x04AC ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bNoDecals:1;                                      		// 0x04AC ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bDamagesVehicles:1;                               		// 0x04AC ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bDistanceFog:1;                                   		// 0x04AC ( 0x0004 )  [0x00000400][ CPF_Edit ]
	class FColor                                       DistanceFogColor;                                 		// 0x04B0 ( 0x0004 ) [ CPF_Edit ]
	float                                              DistanceFogStart;                                 		// 0x04B4 ( 0x0004 ) [ CPF_Edit ]
	float                                              DistanceFogEnd;                                   		// 0x04B8 ( 0x0004 ) [ CPF_Edit ]
	float                                              KExtraLinearDamping;                              		// 0x04BC ( 0x0004 ) [ CPF_Edit ]
	float                                              KExtraAngularDamping;                             		// 0x04C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              KBuoyancy;                                        		// 0x04C4 ( 0x0004 ) [ CPF_Edit ]
	class AInfo*                                       PainTimer;                                        		// 0x04C8 ( 0x0004 ) 
	class APhysicsVolume*                              NextPhysicsVolume;                                		// 0x04CC ( 0x0004 ) 

	// UScript Functions
	 void                      CausePainTo ( class AActor* Other );              		//  Engine.PhysicsVolume.CausePainTo
	 void                      PlayExitSplash ( class AActor* Other );           		// [ FUNC_Simulated ] Engine.PhysicsVolume.PlayExitSplash
	 void                      eventUnTouch ( class AActor* Other );             		// [ FUNC_Simulated | FUNC_Event ] Engine.PhysicsVolume.UnTouch
	 void                      PlayEntrySplash ( class AActor* Other );          		// [ FUNC_Simulated ] Engine.PhysicsVolume.PlayEntrySplash
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Simulated | FUNC_Event ] Engine.PhysicsVolume.Touch
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.PhysicsVolume.Trigger
	 void                      TimerPop ( class AVolumeTimer* t );               		//  Engine.PhysicsVolume.TimerPop
	 void                      eventBaseChange (  );                             		// [ FUNC_Event ] Engine.PhysicsVolume.BaseChange
	 void                      PlayerPawnDiedInVolume ( class APawn* Other );    		//  Engine.PhysicsVolume.PlayerPawnDiedInVolume
	 void                      eventPawnLeavingVolume ( class APawn* Other );    		// [ FUNC_Event ] Engine.PhysicsVolume.PawnLeavingVolume
	 void                      eventPawnEnteredVolume ( class APawn* Other );    		// [ FUNC_Simulated | FUNC_Event ] Engine.PhysicsVolume.PawnEnteredVolume
	 void                      eventActorLeavingVolume ( class AActor* Other );  		// [ FUNC_Event ] Engine.PhysicsVolume.ActorLeavingVolume
	 void                      eventActorEnteredVolume ( class AActor* Other );  		// [ FUNC_Event ] Engine.PhysicsVolume.ActorEnteredVolume
	 void                      eventPhysicsChangedFor ( class AActor* Other );   		// [ FUNC_Event ] Engine.PhysicsVolume.PhysicsChangedFor
	 void                      Reset (  );                                       		//  Engine.PhysicsVolume.Reset
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.PhysicsVolume.PostBeginPlay
	 void                      PreBeginPlay (  );                                		// [ FUNC_Simulated ] Engine.PhysicsVolume.PreBeginPlay

	// Public Imports
	APhysicsVolume(class APhysicsVolume const &);
	APhysicsVolume(void);
	class APhysicsVolume &  operator=(class APhysicsVolume const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0090

// Class Engine.LadderVolume
class DLL_IMPORT ALadderVolume : public APhysicsVolume
{
public:
	struct FName                                       ClimbingAnimation;                                		// 0x04D0 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       TopAnimation;                                     		// 0x04D4 ( 0x0004 ) [ CPF_Edit ]
	struct FRotator                                    WallDir;                                          		// 0x04D8 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     LookDir;                                          		// 0x04E4 ( 0x000C ) 
	struct FVector                                     ClimbDir;                                         		// 0x04F0 ( 0x000C ) 
	class ALadder*                                     LadderList;                                       		// 0x04FC ( 0x0004 ) [ CPF_Const ]
	unsigned long                                      bNoPhysicalLadder:1;                              		// 0x0500 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bAutoPath:1;                                      		// 0x0500 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bAllowLadderStrafing:1;                           		// 0x0500 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	class APawn*                                       PendingClimber;                                   		// 0x0504 ( 0x0004 ) 

	// UScript Functions
	 void                      eventPhysicsChangedFor ( class AActor* Other );   		// [ FUNC_Simulated | FUNC_Event ] Engine.LadderVolume.PhysicsChangedFor
	 void                      eventPawnLeavingVolume ( class APawn* P );        		// [ FUNC_Simulated | FUNC_Event ] Engine.LadderVolume.PawnLeavingVolume
	 void                      eventPawnEnteredVolume ( class APawn* P );        		// [ FUNC_Simulated | FUNC_Event ] Engine.LadderVolume.PawnEnteredVolume
	 bool                      InUse ( class APawn* Ignored );                   		//  Engine.LadderVolume.InUse
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.LadderVolume.PostBeginPlay

	// Public Imports
	ALadderVolume(class ALadderVolume const &);
	ALadderVolume(void);
	class ALadderVolume &  operator=(class ALadderVolume const &);
	class FVector  FindCenter(void);
	class FVector  FindTop(class FVector);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.DefaultPhysicsVolume
class DLL_IMPORT ADefaultPhysicsVolume : public APhysicsVolume
{
public:

	// UScript Functions
	 void                      Destroyed (  );                                   		//  Engine.DefaultPhysicsVolume.Destroyed

	// Public Imports
	ADefaultPhysicsVolume(class ADefaultPhysicsVolume const &);
	class ADefaultPhysicsVolume &  operator=(class ADefaultPhysicsVolume const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.LineOfSightTrigger
class DLL_IMPORT ALineOfSightTrigger : public ATriggers
{
public:
	float                                              MaxViewDist;                                      		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              OldTickTime;                                      		// 0x03CC ( 0x0004 ) 
	unsigned long                                      bEnabled:1;                                       		// 0x03D0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bTriggered:1;                                     		// 0x03D0 ( 0x0004 )  [0x00000002]
	struct FName                                       SeenActorTag;                                     		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      SeenActor;                                        		// 0x03D8 ( 0x0004 ) 
	int                                                MaxViewAngle;                                     		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	float                                              RequiredViewDir;                                  		// 0x03E0 ( 0x0004 ) 

	// UScript Functions
	 void                      Timer (  );                                       		//  Engine.LineOfSightTrigger.Timer
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.LineOfSightTrigger.Trigger
	 void                      eventPlayerSeesMe ( class APlayerController* P ); 		// [ FUNC_Event ] Engine.LineOfSightTrigger.PlayerSeesMe
	 void                      PostBeginPlay (  );                               		//  Engine.LineOfSightTrigger.PostBeginPlay

	// Public Imports
	ALineOfSightTrigger(class ALineOfSightTrigger const &);
	ALineOfSightTrigger(void);
	class ALineOfSightTrigger &  operator=(class ALineOfSightTrigger const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.AIScript
class DLL_IMPORT AAIScript : public AKeypoint
{
public:
	class UClass*                                      ControllerClass;                                  		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bNavigate:1;                                      		// 0x03CC ( 0x0004 )  [0x00000001]
	unsigned long                                      bLoggingEnabled:1;                                		// 0x03CC ( 0x0004 )  [0x00000002]
	class AAIMarker*                                   myMarker;                                         		// 0x03D0 ( 0x0004 ) 

	// UScript Functions
	 void                      TakeOver ( class APawn* P );                      		//  Engine.AIScript.TakeOver
	 class AActor*             GetMoveTarget (  );                               		//  Engine.AIScript.GetMoveTarget
	 void                      SpawnControllerFor ( class APawn* P );            		//  Engine.AIScript.SpawnControllerFor

	// Public Imports
	AAIScript(class AAIScript const &);
	AAIScript(void);
	class AAIScript &  operator=(class AAIScript const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.DamageType
class DLL_IMPORT ADamageType : public AActor
{
public:
	struct FString                                     DeathString;                                      		// 0x03C8 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FemaleSuicide;                                    		// 0x03D4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MaleSuicide;                                      		// 0x03E0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	float                                              ViewFlash;                                        		// 0x03EC ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ViewFog;                                          		// 0x03F0 ( 0x000C ) [ CPF_Edit ]
	class UClass*                                      DamageEffect;                                     		// 0x03FC ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     DamageWeaponName;                                 		// 0x0400 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bArmorStops:1;                                    		// 0x040C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bInstantHit:1;                                    		// 0x040C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bFastInstantHit:1;                                		// 0x040C ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bAlwaysGibs:1;                                    		// 0x040C ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bLocationalHit:1;                                 		// 0x040C ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bAlwaysSevers:1;                                  		// 0x040C ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bSpecial:1;                                       		// 0x040C ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bDetonatesGoop:1;                                 		// 0x040C ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bSkeletize:1;                                     		// 0x040C ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bCauseConvulsions:1;                              		// 0x040C ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bSuperWeapon:1;                                   		// 0x040C ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      bCausesBlood:1;                                   		// 0x040C ( 0x0004 )  [0x00000800][ CPF_Edit ]
	unsigned long                                      bKUseOwnDeathVel:1;                               		// 0x040C ( 0x0004 )  [0x00001000][ CPF_Edit ]
	unsigned long                                      bKUseTearOffMomentum:1;                           		// 0x040C ( 0x0004 )  [0x00002000][ CPF_Edit ]
	unsigned long                                      bDelayedDamage:1;                                 		// 0x040C ( 0x0004 )  [0x00004000]
	unsigned long                                      bNeverSevers:1;                                   		// 0x040C ( 0x0004 )  [0x00008000]
	unsigned long                                      bThrowRagdoll:1;                                  		// 0x040C ( 0x0004 )  [0x00010000]
	unsigned long                                      bRagdollBullet:1;                                 		// 0x040C ( 0x0004 )  [0x00020000]
	unsigned long                                      bLeaveBodyEffect:1;                               		// 0x040C ( 0x0004 )  [0x00040000]
	unsigned long                                      bExtraMomentumZ:1;                                		// 0x040C ( 0x0004 )  [0x00080000]
	unsigned long                                      bFlaming:1;                                       		// 0x040C ( 0x0004 )  [0x00100000]
	unsigned long                                      bRubbery:1;                                       		// 0x040C ( 0x0004 )  [0x00200000]
	unsigned long                                      bCausedByWorld:1;                                 		// 0x040C ( 0x0004 )  [0x00400000]
	unsigned long                                      bDirectDamage:1;                                  		// 0x040C ( 0x0004 )  [0x00800000]
	unsigned long                                      bBulletHit:1;                                     		// 0x040C ( 0x0004 )  [0x01000000]
	unsigned long                                      bVehicleHit:1;                                    		// 0x040C ( 0x0004 )  [0x02000000]
	unsigned long                                      SkipDeathIncrement:1;                             		// 0x040C ( 0x0004 )  [0x04000000]
	float                                              GibModifier;                                      		// 0x0410 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      UseHitStunAni:1;                                  		// 0x0414 ( 0x0004 )  [0x00000001]
	unsigned long                                      Use2ndAni:1;                                      		// 0x0414 ( 0x0004 )  [0x00000002]
	class UClass*                                      PawnDamageEffect;                                 		// 0x0418 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      PawnDamageEmitter;                                		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	class TArray< class USound* >                      PawnDamageSounds;                                 		// 0x0420 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UClass*                                      LowGoreDamageEffect;                              		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      LowGoreDamageEmitter;                             		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class USound* >                      LowGoreDamageSounds;                              		// 0x0434 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UClass*                                      LowDetailEffect;                                  		// 0x0440 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      LowDetailEmitter;                                 		// 0x0444 ( 0x0004 ) [ CPF_Edit ]
	float                                              FlashScale;                                       		// 0x0448 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     FlashFog;                                         		// 0x044C ( 0x000C ) [ CPF_Edit ]
	int                                                DamageDesc;                                       		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	int                                                DamageThreshold;                                  		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     DamageKick;                                       		// 0x0460 ( 0x000C ) [ CPF_Edit ]
	class UMaterial*                                   DamageOverlayMaterial;                            		// 0x046C ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   DeathOverlayMaterial;                             		// 0x0470 ( 0x0004 ) [ CPF_Edit ]
	float                                              DamageOverlayTime;                                		// 0x0474 ( 0x0004 ) [ CPF_Edit ]
	float                                              DeathOverlayTime;                                 		// 0x0478 ( 0x0004 ) [ CPF_Edit ]
	float                                              GibPerterbation;                                  		// 0x047C ( 0x0004 ) [ CPF_Edit ]
	float                                              KDamageImpulse;                                   		// 0x0480 ( 0x0004 ) [ CPF_Edit ]
	float                                              KDeathVel;                                        		// 0x0484 ( 0x0004 ) [ CPF_Edit ]
	float                                              KDeathUpKick;                                     		// 0x0488 ( 0x0004 ) [ CPF_Edit ]
	float                                              VehicleDamageScaling;                             		// 0x048C ( 0x0004 ) 
	float                                              VehicleMomentumScaling;                           		// 0x0490 ( 0x0004 ) 

	// UScript Functions
	 struct FString            GetWeaponClass (  );                              		//  Engine.DamageType.GetWeaponClass
	 void                      GetHitEffects ( int VictemHealth, class UClass** HitEffects );		//  Engine.DamageType.GetHitEffects
	 bool                      IsOfType ( int Description );                     		//  Engine.DamageType.IsOfType
	 class USound*             GetPawnDamageSound (  );                          		//  Engine.DamageType.GetPawnDamageSound
	 class UClass*             GetPawnDamageEmitter ( struct FVector HitLocation, float Damage, struct FVector Momentum, class APawn* Victim, bool bLowDetail );		//  Engine.DamageType.GetPawnDamageEmitter
	 class UClass*             GetPawnDamageEffect ( struct FVector HitLocation, float Damage, struct FVector Momentum, class APawn* Victim, bool bLowDetail );		//  Engine.DamageType.GetPawnDamageEffect
	 struct FString            SuicideMessage ( class APlayerReplicationInfo* Victim );		//  Engine.DamageType.SuicideMessage
	 struct FString            DeathMessage ( class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim );		//  Engine.DamageType.DeathMessage
	 void                      ScoreKill ( class AController* Killer, class AController* Killed );		//  Engine.DamageType.ScoreKill
	 void                      IncrementKills ( class AController* Killer );     		//  Engine.DamageType.IncrementKills

	// Public Imports
	ADamageType(class ADamageType const &);
	class ADamageType &  operator=(class ADamageType const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00CC

// Class Engine.SVehicleTrigger
class DLL_IMPORT ASVehicleTrigger : public ATriggers
{
public:
	unsigned long                                      bEnabled:1;                                       		// 0x03C8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      BACKUP_bEnabled:1;                                		// 0x03C8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bMarkWithPath:1;                                  		// 0x03C8 ( 0x0004 )  [0x00000004]
	class ANavigationPoint*                            myMarker;                                         		// 0x03CC ( 0x0004 ) 

	// UScript Functions
	 void                      Reset (  );                                       		//  Engine.SVehicleTrigger.Reset
	 void                      UsedBy ( class APawn* User );                     		//  Engine.SVehicleTrigger.UsedBy
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] Engine.SVehicleTrigger.Trigger
	 void                      PostBeginPlay (  );                               		//  Engine.SVehicleTrigger.PostBeginPlay

	// Public Imports
	ASVehicleTrigger(class ASVehicleTrigger const &);
	ASVehicleTrigger(void);
	class ASVehicleTrigger &  operator=(class ASVehicleTrigger const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0008

// Class Engine.SVehicleFactory
class DLL_IMPORT ASVehicleFactory : public AActor
{
public:
	class UClass*                                      VehicleClass;                                     		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	int                                                MaxVehicleCount;                                  		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	int                                                VehicleCount;                                     		// 0x03D0 ( 0x0004 ) 
	class ANavigationPoint*                            myMarker;                                         		// 0x03D4 ( 0x0004 ) 

	// UScript Functions
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] Engine.SVehicleFactory.Trigger
	 void                      eventVehicleUnPossessed ( class AVehicle* V );    		// [ FUNC_Event ] Engine.SVehicleFactory.VehicleUnPossessed
	 void                      eventVehiclePossessed ( class AVehicle* V );      		// [ FUNC_Event ] Engine.SVehicleFactory.VehiclePossessed
	 void                      eventVehicleDestroyed ( class AVehicle* V );      		// [ FUNC_Event ] Engine.SVehicleFactory.VehicleDestroyed
	 void                      PreBeginPlay (  );                                		//  Engine.SVehicleFactory.PreBeginPlay

	// Public Imports
	ASVehicleFactory(class ASVehicleFactory const &);
	ASVehicleFactory(void);
	class ASVehicleFactory &  operator=(class ASVehicleFactory const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.VehiclePart
class DLL_IMPORT AVehiclePart : public AActor
{
public:
	unsigned long                                      bUpdating:1;                                      		// 0x03C8 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      Activate ( bool bActive );                        		//  Engine.VehiclePart.Activate
	 void                      Update ( float DeltaTime );                       		//  Engine.VehiclePart.Update

	// Public Imports
	AVehiclePart(class AVehiclePart const &);
	class AVehiclePart &  operator=(class AVehiclePart const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.Controller
class DLL_IMPORT AController : public AActor
{
public:
	class APawn*                                       Pawn;                                             		// 0x03C8 ( 0x0004 ) [ CPF_Net ]
	float                                              BtrUpdateFrequency;                               		// 0x03CC ( 0x0004 ) [ CPF_Localized ]
	int                                                PlayerNum;                                        		// 0x03D0 ( 0x0004 ) [ CPF_Const ]
	float                                              SightCounter;                                     		// 0x03D4 ( 0x0004 ) 
	float                                              FovAngle;                                         		// 0x03D8 ( 0x0004 ) 
	float                                              Handedness;                                       		// 0x03DC ( 0x0004 ) 
	unsigned long                                      bIsPlayer:1;                                      		// 0x03E0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bGodMode:1;                                       		// 0x03E0 ( 0x0004 )  [0x00000002]
	unsigned long                                      bLOSflag:1;                                       		// 0x03E0 ( 0x0004 )  [0x00000004][ CPF_Const ]
	unsigned long                                      bAdvancedTactics:1;                               		// 0x03E0 ( 0x0004 )  [0x00000008]
	unsigned long                                      bCanOpenDoors:1;                                  		// 0x03E0 ( 0x0004 )  [0x00000010]
	unsigned long                                      bCanDoSpecial:1;                                  		// 0x03E0 ( 0x0004 )  [0x00000020]
	unsigned long                                      bAdjusting:1;                                     		// 0x03E0 ( 0x0004 )  [0x00000040]
	unsigned long                                      bPreparingMove:1;                                 		// 0x03E0 ( 0x0004 )  [0x00000080]
	unsigned long                                      bControlAnimations:1;                             		// 0x03E0 ( 0x0004 )  [0x00000100]
	unsigned long                                      bEnemyInfoValid:1;                                		// 0x03E0 ( 0x0004 )  [0x00000200]
	unsigned long                                      bNotifyApex:1;                                    		// 0x03E0 ( 0x0004 )  [0x00000400]
	unsigned long                                      bUsePlayerHearing:1;                              		// 0x03E0 ( 0x0004 )  [0x00000800]
	unsigned long                                      bJumpOverWall:1;                                  		// 0x03E0 ( 0x0004 )  [0x00001000]
	unsigned long                                      bEnemyAcquired:1;                                 		// 0x03E0 ( 0x0004 )  [0x00002000]
	unsigned long                                      bSoaking:1;                                       		// 0x03E0 ( 0x0004 )  [0x00004000]
	unsigned long                                      bHuntPlayer:1;                                    		// 0x03E0 ( 0x0004 )  [0x00008000]
	unsigned long                                      bAllowedToTranslocate:1;                          		// 0x03E0 ( 0x0004 )  [0x00010000]
	unsigned long                                      bAllowedToImpactJump:1;                           		// 0x03E0 ( 0x0004 )  [0x00020000]
	unsigned long                                      bAdrenalineEnabled:1;                             		// 0x03E0 ( 0x0004 )  [0x00040000][ CPF_Net ]
	unsigned long                                      bNotifyFallingHitWall:1;                          		// 0x03E0 ( 0x0004 )  [0x00080000]
	unsigned long                                      bSlowerZAcquire:1;                                		// 0x03E0 ( 0x0004 )  [0x00100000]
	unsigned long                                      bInDodgeMove:1;                                   		// 0x03E0 ( 0x0004 )  [0x00200000]
	unsigned long                                      bVehicleTransition:1;                             		// 0x03E0 ( 0x0004 )  [0x00400000]
	unsigned long                                      bForceStrafe:1;                                   		// 0x03E0 ( 0x0004 )  [0x00800000]
	unsigned long                                      bNotifyPostLanded:1;                              		// 0x03E0 ( 0x0004 )  [0x01000000]
	unsigned char                                      bRun;                                             		// 0x03E4 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bDuck;                                            		// 0x03E5 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bProne;                                           		// 0x03E6 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bFire;                                            		// 0x03E7 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bAltFire;                                         		// 0x03E8 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bMeleeFire;                                       		// 0x03E9 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bUseKey;                                          		// 0x03EA ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bVoiceTalk;                                       		// 0x03EB ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bOldRun;                                          		// 0x03EC ( 0x0001 ) 
	unsigned char                                      bHitRun;                                          		// 0x03ED ( 0x0001 ) 
	float                                              fHitAccel;                                        		// 0x03F0 ( 0x0004 ) 
	struct FVector                                     OldVel;                                           		// 0x03F4 ( 0x000C ) 
	unsigned char                                      bInputCrouch;                                     		// 0x0400 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bInputProne;                                      		// 0x0401 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      byInputPosture;                                   		// 0x0402 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bOldInputCrouch;                                  		// 0x0403 ( 0x0001 ) 
	unsigned char                                      bOldInputProne;                                   		// 0x0404 ( 0x0001 ) 
	float                                              fStandingTimeCount;                               		// 0x0408 ( 0x0004 ) 
	float                                              fCrouchingTimeCount;                              		// 0x040C ( 0x0004 ) 
	float                                              fCrouchingTimeLimit;                              		// 0x0410 ( 0x0004 ) 
	float                                              fProningTimeCount;                                		// 0x0414 ( 0x0004 ) 
	float                                              fProningTimeLimit;                                		// 0x0418 ( 0x0004 ) 
	unsigned char                                      byGoCrouch;                                       		// 0x041C ( 0x0001 ) 
	unsigned char                                      byGoProne;                                        		// 0x041D ( 0x0001 ) 
	unsigned char                                      bGotoProne;                                       		// 0x041E ( 0x0001 ) 
	float                                              fSprintTime;                                      		// 0x0420 ( 0x0004 ) 
	float                                              fSprintPassTime;                                  		// 0x0424 ( 0x0004 ) 
	unsigned long                                      bSprint:1;                                        		// 0x0428 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDClickMove:1;                                    		// 0x0428 ( 0x0004 )  [0x00000002]
	unsigned long                                      bOldDClickMove:1;                                 		// 0x0428 ( 0x0004 )  [0x00000004]
	float                                              fSprintDelayTime;                                 		// 0x042C ( 0x0004 ) 
	float                                              fSprintStopTime;                                  		// 0x0430 ( 0x0004 ) 
	unsigned char                                      bySaveFireState;                                  		// 0x0434 ( 0x0001 ) 
	unsigned char                                      bySprintState;                                    		// 0x0435 ( 0x0001 ) 
	struct FVector                                     AdjustLoc;                                        		// 0x0438 ( 0x000C ) 
	class AController*                                 nextController;                                   		// 0x0444 ( 0x0004 ) [ CPF_Const ]
	class AController*                                 preController;                                    		// 0x0448 ( 0x0004 ) [ CPF_Const ]
	float                                              Stimulus;                                         		// 0x044C ( 0x0004 ) 
	float                                              wFlashRemainTime;                                 		// 0x0450 ( 0x0004 ) 
	float                                              wFlashForce;                                      		// 0x0454 ( 0x0004 ) 
	float                                              wFreezeTime;                                      		// 0x0458 ( 0x0004 ) 
	float                                              MoveTimer;                                        		// 0x045C ( 0x0004 ) 
	class AActor*                                      MoveTarget;                                       		// 0x0460 ( 0x0004 ) 
	struct FVector                                     Destination;                                      		// 0x0464 ( 0x000C ) 
	struct FVector                                     FocalPoint;                                       		// 0x0470 ( 0x000C ) 
	class AActor*                                      Focus;                                            		// 0x047C ( 0x0004 ) 
	float                                              FocusLead;                                        		// 0x0480 ( 0x0004 ) 
	class AMover*                                      PendingMover;                                     		// 0x0484 ( 0x0004 ) 
	class AActor*                                      GoalList[ 0x04 ];                                 		// 0x0488 ( 0x0010 ) 
	class ANavigationPoint*                            home;                                             		// 0x0498 ( 0x0004 ) 
	float                                              MinHitWall;                                       		// 0x049C ( 0x0004 ) 
	float                                              RespawnPredictionTime;                            		// 0x04A0 ( 0x0004 ) 
	float                                              DodgeToGoalPct;                                   		// 0x04A4 ( 0x0004 ) 
	int                                                AcquisitionYawRate;                               		// 0x04A8 ( 0x0004 ) 
	float                                              DodgeLandZ;                                       		// 0x04AC ( 0x0004 ) 
	class AVehicle*                                    LastBlockingVehicle;                              		// 0x04B0 ( 0x0004 ) 
	class APawn*                                       Enemy;                                            		// 0x04B4 ( 0x0004 ) 
	class AActor*                                      Target;                                           		// 0x04B8 ( 0x0004 ) 
	struct FVector                                     LastSeenPos;                                      		// 0x04BC ( 0x000C ) 
	struct FVector                                     LastSeeingPos;                                    		// 0x04C8 ( 0x000C ) 
	float                                              LastSeenTime;                                     		// 0x04D4 ( 0x0004 ) 
	struct FString                                     VoiceType;                                        		// 0x04D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              OldMessageTime;                                   		// 0x04E4 ( 0x0004 ) 
	class AActor*                                      RouteCache[ 0x10 ];                               		// 0x04E8 ( 0x0040 ) 
	class UReachSpec*                                  CurrentPath;                                      		// 0x0528 ( 0x0004 ) 
	class UReachSpec*                                  NextRoutePath;                                    		// 0x052C ( 0x0004 ) 
	struct FVector                                     CurrentPathDir;                                   		// 0x0530 ( 0x000C ) 
	class AActor*                                      RouteGoal;                                        		// 0x053C ( 0x0004 ) 
	float                                              RouteDist;                                        		// 0x0540 ( 0x0004 ) 
	float                                              LastRouteFind;                                    		// 0x0544 ( 0x0004 ) 
	struct FVector                                     DirectionHint;                                    		// 0x0548 ( 0x000C ) 
	class UClass*                                      PlayerReplicationInfoClass;                       		// 0x0554 ( 0x0004 ) [ CPF_Edit ]
	class APlayerReplicationInfo*                      PlayerReplicationInfo;                            		// 0x0558 ( 0x0004 ) [ CPF_Net ]
	class UClass*                                      PawnClass;                                        		// 0x055C ( 0x0004 ) [ CPF_Net ]
	class UClass*                                      PreviousPawnClass;                                		// 0x0560 ( 0x0004 ) 
	float                                              GroundPitchTime;                                  		// 0x0564 ( 0x0004 ) 
	struct FVector                                     ViewX;                                            		// 0x0568 ( 0x000C ) 
	struct FVector                                     ViewY;                                            		// 0x0574 ( 0x000C ) 
	struct FVector                                     ViewZ;                                            		// 0x0580 ( 0x000C ) 
	class ANavigationPoint*                            StartSpot;                                        		// 0x058C ( 0x0004 ) 
	struct FVector                                     MonitorStartLoc;                                  		// 0x0590 ( 0x000C ) 
	class APawn*                                       MonitoredPawn;                                    		// 0x059C ( 0x0004 ) 
	float                                              MonitorMaxDistSq;                                 		// 0x05A0 ( 0x0004 ) 
	class AController*                                 Caller;                                           		// 0x05A4 ( 0x0004 ) 
	class AAvoidMarker*                                FearSpots[ 0x02 ];                                		// 0x05A8 ( 0x0008 ) 
	float                                              WarningDelay;                                     		// 0x05B0 ( 0x0004 ) 
	class AProjectile*                                 WarningProjectile;                                		// 0x05B4 ( 0x0004 ) 
	class APawn*                                       ShotTarget;                                       		// 0x05B8 ( 0x0004 ) 
	class AActor*                                      LastFailedReach;                                  		// 0x05BC ( 0x0004 ) [ CPF_Const ]
	float                                              FailedReachTime;                                  		// 0x05C0 ( 0x0004 ) [ CPF_Const ]
	struct FVector                                     FailedReachLocation;                              		// 0x05C4 ( 0x000C ) [ CPF_Const ]
	float                                              Adrenaline;                                       		// 0x05D0 ( 0x0004 ) [ CPF_Net ]
	float                                              AdrenalineMax;                                    		// 0x05D4 ( 0x0004 ) 
	class UClass*                                      LastPawnWeapon;                                   		// 0x05D8 ( 0x0004 ) 
	float                                              UAVQueue;                                         		// 0x05DC ( 0x0004 ) 
	int                                                RegenLoc;                                         		// 0x05E0 ( 0x0004 ) 
	class UwSkillBase*                                 SkillBase;                                        		// 0x05E4 ( 0x0004 ) 
	unsigned long                                      bHit:1;                                           		// 0x05E8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bSet:1;                                           		// 0x05E8 ( 0x0004 )  [0x00000002]
	float                                              hit_gun_move_speed;                               		// 0x05EC ( 0x0004 ) 
	float                                              hit_gun_move_time;                                		// 0x05F0 ( 0x0004 ) 
	float                                              hit_gun_move_delay;                               		// 0x05F4 ( 0x0004 ) 
	float                                              hit_gun_delta_Time;                               		// 0x05F8 ( 0x0004 ) 

	// UScript Functions
	 bool                      IsSpecialMode_Pistol ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_Pistol
	 bool                      IsSpecialMode_Grenade ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_Grenade
	 bool                      IsSpecialMode_MG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_MG
	 bool                      IsSpecialMode_FlameThrower ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_FlameThrower
	 bool                      IsSpecialMode_SG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_SG
	 bool                      IsSpecialMode_Hold_Weapon ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_Hold_Weapon
	 bool                      IsSpecialMode_SR ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_SR
	 bool                      IsSpecialMode_RPG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_RPG
	 bool                      IsSpecialMode_Knife ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.Controller.IsSpecialMode_Knife
	 bool                      IsPermitSpecialMode ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType, int KeyF );		//  Engine.Controller.IsPermitSpecialMode
	 void                      NotifyVehicle ( class AVehicle* V );              		//  Engine.Controller.NotifyVehicle
	 void                      ClientUAV ( int UAVDuration );                    		// [ FUNC_Simulated ] Engine.Controller.ClientUAV
	 bool                      AllowFire (  );                                   		// [ FUNC_Simulated ] Engine.Controller.AllowFire
	 void                      eventReceiveMessage_QuestType4 ( class UClass* Message, int Switch, int iRDifficult, int iRRound );		// [ FUNC_Simulated | FUNC_Event ] Engine.Controller.ReceiveMessage_QuestType4
	 void                      eventReceiveMessage_QuestType3 ( class UClass* Message, int Switch, int iRDifficult, int iRMap );		// [ FUNC_Simulated | FUNC_Event ] Engine.Controller.ReceiveMessage_QuestType3
	 void                      eventReceiveMessage_QuestType2 ( class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec );		// [ FUNC_Simulated | FUNC_Event ] Engine.Controller.ReceiveMessage_QuestType2
	 void                      eventReceiveMessage_QuestType1 ( class UClass* Message, int Switch, int iRWeaponType, int iRweaponId );		// [ FUNC_Simulated | FUNC_Event ] Engine.Controller.ReceiveMessage_QuestType1
	 void                      ServerUAV (  );                                   		//  Engine.Controller.ServerUAV
	 bool                      IsActiveUAV (  );                                 		//  Engine.Controller.IsActiveUAV
	 bool                      IsActiveHelicopter (  );                          		//  Engine.Controller.IsActiveHelicopter
	 bool                      IsActiveAirFire (  );                             		//  Engine.Controller.IsActiveAirFire
	 bool                      CallUAV (  );                                     		//  Engine.Controller.CallUAV
	 bool                      CallHelicopter ( bool ignoreSupply );             		//  Engine.Controller.CallHelicopter
	 bool                      CallAirFire (  );                                 		//  Engine.Controller.CallAirFire
	 void                      ZoomFOV ( float fFOV, bool bInstant );            		//  Engine.Controller.ZoomFOV
	 void                      ClientOnEndIntervented (  );                      		// [ FUNC_Simulated ] Engine.Controller.ClientOnEndIntervented
	 void                      ClientOnBeginIntervented (  );                    		// [ FUNC_Simulated ] Engine.Controller.ClientOnBeginIntervented
	 void                      ClientOnBeginRound (  );                          		// [ FUNC_Simulated ] Engine.Controller.ClientOnBeginRound
	 void                      ClientOnEndWaitingForStart (  );                  		// [ FUNC_Simulated ] Engine.Controller.ClientOnEndWaitingForStart
	 void                      ClientOnBeginWaitingForStart (  );                		// [ FUNC_Simulated ] Engine.Controller.ClientOnBeginWaitingForStart
	 void                      ClientStopAllSound ( class AActor* aactor );      		//  Engine.Controller.ClientStopAllSound
	 void                      StopAllSoundHK ( class AActor* aactor );          		//  Engine.Controller.StopAllSoundHK
	 void                      execSetMoveAtt ( struct FString gmv, struct FString gmt, struct FString gmd, bool isSet );		// [ FUNC_Exec ] Engine.Controller.SetMoveAtt
	 void                      execWeaponReload (  );                            		// [ FUNC_Exec ] Engine.Controller.WeaponReload
	 struct FString            ParseChatPercVar ( struct FString Cmd );          		//  Engine.Controller.ParseChatPercVar
	 bool                      DontReuseTaunt ( int t );                         		//  Engine.Controller.DontReuseTaunt
	 bool                      AutoTaunt (  );                                   		//  Engine.Controller.AutoTaunt
	 void                      StartMonitoring ( class APawn* P, float MaxDist );		//  Engine.Controller.StartMonitoring
	 void                      eventMonitoredPawnAlert (  );                     		// [ FUNC_Event ] Engine.Controller.MonitoredPawnAlert
	 void                      ServerGivePawn (  );                              		//  Engine.Controller.ServerGivePawn
	 void                      ServerReStartPlayer (  );                         		//  Engine.Controller.ServerReStartPlayer
	 void                      ChangedWeapon (  );                               		//  Engine.Controller.ChangedWeapon
	 class APlayerReplicationInfo* GetPRI (  );                                      		//  Engine.Controller.GetPRI
	 bool                      CheckFutureSight ( float DeltaTime );             		//  Engine.Controller.CheckFutureSight
	 void                      SetPawnFemale (  );                               		//  Engine.Controller.SetPawnFemale
	 void                      SetPawnClass ( struct FString inClass, struct FString InCharacter );		//  Engine.Controller.SetPawnClass
	 void                      ClientSetWeapon ( class UClass* WeaponClass );    		//  Engine.Controller.ClientSetWeapon
	 void                      ClientSwitchToBestWeapon (  );                    		//  Engine.Controller.ClientSwitchToBestWeapon
	 void                      execSwitchToBestWeapon (  );                      		// [ FUNC_Exec ] Engine.Controller.SwitchToBestWeapon
	 void                      eventDelayedWarning (  );                         		// [ FUNC_Event ] Engine.Controller.DelayedWarning
	 void                      ReceiveProjectileWarning ( class AProjectile* proj );		//  Engine.Controller.ReceiveProjectileWarning
	 void                      eventReceiveWarning ( class APawn* shooter, float projSpeed, struct FVector FireDir );		// [ FUNC_Event ] Engine.Controller.ReceiveWarning
	 void                      InstantWarnTarget ( class AActor* Target, struct FFireProperties FiredAmmunition, struct FVector FireDir );		//  Engine.Controller.InstantWarnTarget
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  Engine.Controller.AdjustAim
	 float                     WeaponPreference ( class AwWeapon* W );           		//  Engine.Controller.WeaponPreference
	 float                     RateWeapon ( class AwWeapon* W );                 		// [ FUNC_Simulated ] Engine.Controller.RateWeapon
	 void                      StopFiring (  );                                  		//  Engine.Controller.StopFiring
	 bool                      FireWeaponAt ( class AActor* A );                 		//  Engine.Controller.FireWeaponAt
	 float                     AdjustDesireFor ( class APickup* P );             		//  Engine.Controller.AdjustDesireFor
	 void                      damageAttitudeTo ( class APawn* Other, float Damage );		//  Engine.Controller.damageAttitudeTo
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* Other );		//  Engine.Controller.NotifyKilled
	 void                      ShakeView ( struct FVector shRotMag, struct FVector shRotRate, float shRotTime, struct FVector shOffsetMag, struct FVector shOffsetRate, float shOffsetTime );		//  Engine.Controller.ShakeView
	 void                      DamageShake ( int Damage );                       		//  Engine.Controller.DamageShake
	 void                      eventEnemyNotVisible (  );                        		// [ FUNC_Event ] Engine.Controller.EnemyNotVisible
	 void                      eventSeeMonster ( class APawn* Seen );            		// [ FUNC_Event ] Engine.Controller.SeeMonster
	 void                      eventSeePlayer ( class APawn* Seen );             		// [ FUNC_Event ] Engine.Controller.SeePlayer
	 void                      eventHearNoise ( float Loudness, class AActor* NoiseMaker );		// [ FUNC_Event ] Engine.Controller.HearNoise
	 void                      eventSetupSpecialPathAbilities (  );              		// [ FUNC_Event ] Engine.Controller.SetupSpecialPathAbilities
	 float                     eventSuperDesireability ( class APickup* P );     		// [ FUNC_Event ] Engine.Controller.SuperDesireability
	 float                     eventDesireability ( class APickup* P );          		// [ FUNC_Event ] Engine.Controller.Desireability
	 void                      FearThisSpot ( class AAvoidMarker* aSpot );       		//  Engine.Controller.FearThisSpot
	 void                      UnderLift ( class AMover* M );                    		//  Engine.Controller.UnderLift
	 void                      MoverFinished (  );                               		//  Engine.Controller.MoverFinished
	 void                      WaitForMover ( class AMover* M );                 		//  Engine.Controller.WaitForMover
	 void                      eventPrepareForMove ( class ANavigationPoint* Goal, class UReachSpec* Path );		// [ FUNC_Event ] Engine.Controller.PrepareForMove
	 struct FVector            AdjustToss ( float TSpeed, struct FVector Start, struct FVector End, bool bNormalize );		//  Engine.Controller.AdjustToss
	 bool                      WouldReactToSeeing ( class APawn* Seen );         		//  Engine.Controller.WouldReactToSeeing
	 bool                      WouldReactToNoise ( float Loudness, class AActor* NoiseMaker );		//  Engine.Controller.WouldReactToNoise
	 void                      BotVoiceMessage ( struct FName MessageType, unsigned char MessageID, class AController* Sender );		//  Engine.Controller.BotVoiceMessage
	 void                      ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID );		//  Engine.Controller.ClientVoiceMessage
	 void                      SendVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID, struct FName BroadcastType );		//  Engine.Controller.SendVoiceMessage
	 bool                      AllowVoiceMessage ( struct FName MessageType );   		//  Engine.Controller.AllowVoiceMessage
	 void                      SendMessage ( class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID, float wait, struct FName BroadcastType );		//  Engine.Controller.SendMessage
	 unsigned char             GetMessageIndex ( struct FName PhraseName );      		//  Engine.Controller.GetMessageIndex
	 int                       GetFacingDirection (  );                          		//  Engine.Controller.GetFacingDirection
	 void                      RenderSpectatorFPWeapon ( class UCanvas* Canvas, bool bClearedZBuffer );		// [ FUNC_Simulated ] Engine.Controller.RenderSpectatorFPWeapon
	 void                      eventRenderOverlays ( class UCanvas* Canvas );    		// [ FUNC_Simulated | FUNC_Event ] Engine.Controller.RenderOverlays
	 void                      StopPawnsAndControllers (  );                     		// [ FUNC_Simulated ] Engine.Controller.StopPawnsAndControllers
	 void                      ClientRoundEnded (  );                            		//  Engine.Controller.ClientRoundEnded
	 void                      RoundHasEnded (  );                               		//  Engine.Controller.RoundHasEnded
	 void                      ClientGameEnded (  );                             		//  Engine.Controller.ClientGameEnded
	 void                      GameHasEnded (  );                                		//  Engine.Controller.GameHasEnded
	 bool                      WantsSmoothedViewNative (  );                     		// [ FUNC_Native ] Engine.Controller.WantsSmoothedViewNative
	 bool                      WantsSmoothedView (  );                           		//  Engine.Controller.WantsSmoothedView
	 void                      eventAdjustView ( float DeltaTime );              		// [ FUNC_Event ] Engine.Controller.AdjustView
	 bool                      eventAllowDetourTo ( class ANavigationPoint* N ); 		// [ FUNC_Event ] Engine.Controller.AllowDetourTo
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.Controller.Destroyed
	 void                      eventDestroyPlayerReplicationInfo (  );           		// [ FUNC_Event ] Engine.Controller.DestroyPlayerReplicationInfo
	 void                      HandlePickup ( class APickup* pick );             		//  Engine.Controller.HandlePickup
	 bool                      SameTeamAs ( class AController* C );              		//  Engine.Controller.SameTeamAs
	 int                       GetTeamNum (  );                                  		// [ FUNC_Simulated | FUNC_Native ] Engine.Controller.GetTeamNum
	 void                      InitPlayerReplicationInfo (  );                   		//  Engine.Controller.InitPlayerReplicationInfo
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.Controller.PostBeginPlay
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.Controller.PreBeginPlay
	 void                      HandleWalking (  );                               		//  Engine.Controller.HandleWalking
	 void                      execJump ( float f );                             		// [ FUNC_Exec ] Engine.Controller.Jump
	 void                      TickStance ( float DeltaTime );                   		//  Engine.Controller.TickStance
	 void                      SendMessageSprintTime (  );                       		//  Engine.Controller.SendMessageSprintTime
	 void                      TickSprint ( float DeltaTime );                   		//  Engine.Controller.TickSprint
	 void                      ServerSetVel ( struct FVector Vel );              		//  Engine.Controller.ServerSetVel
	 void                      ServerSetOldRun ( unsigned char bSetVal, unsigned char bHitVal );		//  Engine.Controller.ServerSetOldRun
	 bool                      IsBehindView (  );                                		//  Engine.Controller.IsBehindView
	 void                      PawnIsInPain ( class APhysicsVolume* PainVolume );		//  Engine.Controller.PawnIsInPain
	 void                      SetFall (  );                                     		//  Engine.Controller.SetFall
	 void                      NotifyTakeHit ( class APawn* instigatedBy, struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  Engine.Controller.NotifyTakeHit
	 void                      NotifyAddInventory ( class AInventory* NewItem ); 		//  Engine.Controller.NotifyAddInventory
	 void                      SetDoubleJump (  );                               		//  Engine.Controller.SetDoubleJump
	 void                      eventNotifyMissedJump (  );                       		// [ FUNC_Event ] Engine.Controller.NotifyMissedJump
	 void                      eventNotifyJumpApex (  );                         		// [ FUNC_Event ] Engine.Controller.NotifyJumpApex
	 void                      eventNotifyHitMover ( struct FVector HitNormal, class AMover* Wall );		// [ FUNC_Event ] Engine.Controller.NotifyHitMover
	 bool                      eventNotifyBump ( class AActor* Other );          		// [ FUNC_Event ] Engine.Controller.NotifyBump
	 void                      eventNotifyFallingHitWall ( struct FVector HitNormal, class AActor* Wall );		// [ FUNC_Event ] Engine.Controller.NotifyFallingHitWall
	 bool                      eventNotifyHitWall ( struct FVector HitNormal, class AActor* Wall );		// [ FUNC_Event ] Engine.Controller.NotifyHitWall
	 void                      eventNotifyPostLanded (  );                       		// [ FUNC_Event ] Engine.Controller.NotifyPostLanded
	 bool                      eventNotifyLanded ( struct FVector HitNormal );   		// [ FUNC_Event ] Engine.Controller.NotifyLanded
	 bool                      eventNotifyHeadVolumeChange ( class APhysicsVolume* NewVolume );		// [ FUNC_Event ] Engine.Controller.NotifyHeadVolumeChange
	 bool                      eventNotifyPhysicsVolumeChange ( class APhysicsVolume* NewVolume );		// [ FUNC_Event ] Engine.Controller.NotifyPhysicsVolumeChange
	 void                      eventLongFall (  );                               		// [ FUNC_Event ] Engine.Controller.LongFall
	 void                      Restart (  );                                     		//  Engine.Controller.Restart
	 void                      PawnDied ( class APawn* P );                      		//  Engine.Controller.PawnDied
	 class UClass*             GetLastWeapon (  );                               		//  Engine.Controller.GetLastWeapon
	 void                      WasKilledBy ( class AController* Other );         		//  Engine.Controller.WasKilledBy
	 void                      UnPossess (  );                                   		//  Engine.Controller.UnPossess
	 void                      Possess ( class APawn* aPawn );                   		//  Engine.Controller.Possess
	 void                      eventSoakStop ( struct FString problem );         		// [ FUNC_Event ] Engine.Controller.SoakStop
	 void                      eventAIHearSound ( class AActor* Actor, int id, class USound* S, struct FVector SoundLocation, struct FVector Parameters, bool Attenuate );		// [ FUNC_Event ] Engine.Controller.AIHearSound
	 void                      ClientDying ( class UClass* DamageType, struct FVector HitLocation );		//  Engine.Controller.ClientDying
	 void                      ClientSetRotation ( struct FRotator NewRotation );		//  Engine.Controller.ClientSetRotation
	 void                      ClientSetLocation ( struct FVector NewLocation, struct FRotator NewRotation );		//  Engine.Controller.ClientSetLocation
	 bool                      AvoidCertainDeath (  );                           		//  Engine.Controller.AvoidCertainDeath
	 void                      Reset (  );                                       		//  Engine.Controller.Reset
	 struct FRotator           GetViewRotation (  );                             		// [ FUNC_Simulated ] Engine.Controller.GetViewRotation
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] Engine.Controller.GetHumanReadableName
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  Engine.Controller.DisplayDebug
	 void                      ClientTestAllWeapons (  );                        		//  Engine.Controller.ClientTestAllWeapons
	 void                      ClientTestWeapon ( class AwWeapon* W, int iaWeaponID );		//  Engine.Controller.ClientTestWeapon
	 bool                      NeedsAdrenaline (  );                             		//  Engine.Controller.NeedsAdrenaline
	 void                      AwardAdrenaline ( float Amount );                 		//  Engine.Controller.AwardAdrenaline
	 void                      wClientFreeze ( float fTime );                    		//  Engine.Controller.wClientFreeze
	 void                      wViewFlash ( float fDeltaTime );                  		//  Engine.Controller.wViewFlash
	 void                      wClientFlash ( float fTime );                     		//  Engine.Controller.wClientFlash
	 void                      PendingStasis (  );                               		//  Engine.Controller.PendingStasis
	 void                      execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 );		// [ FUNC_Exec ] Engine.Controller.Cmd
	 void                      eventMissedDodge (  );                            		// [ FUNC_Event ] Engine.Controller.MissedDodge
	 void                      eventMayDodgeToMoveTarget (  );                   		// [ FUNC_Event ] Engine.Controller.MayDodgeToMoveTarget
	 void                      eventMayFall (  );                                		// [ FUNC_Event ] Engine.Controller.MayFall
	 bool                      CanMakePathTo ( class AActor* A );                		// [ FUNC_Final | FUNC_Native ] Engine.Controller.CanMakePathTo
	 void                      EndClimbLadder (  );                              		// [ FUNC_Native ] Engine.Controller.EndClimbLadder
	 void                      StopWaiting (  );                                 		// [ FUNC_Native ] Engine.Controller.StopWaiting
	 bool                      InLatentExecution ( int LatentActionNumber );     		// [ FUNC_Final | FUNC_Native ] Engine.Controller.InLatentExecution
	 class AActor*             PickAnyTarget ( struct FVector FireDir, struct FVector projStart, float* bestAim, float* BestDist );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0216 ] Engine.Controller.PickAnyTarget
	 class APawn*              PickTarget ( struct FVector FireDir, struct FVector projStart, float MaxRange, float* bestAim, float* BestDist );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0213 ] Engine.Controller.PickTarget
	 void                      RemoveController (  );                            		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0212 ] Engine.Controller.RemoveController
	 void                      AddController (  );                               		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0211 ] Engine.Controller.AddController
	 class AActor*             FindBestSuperPickup ( float MaxDist );            		// [ FUNC_Final | FUNC_Native ] Engine.Controller.FindBestSuperPickup
	 class AActor*             FindBestInventoryPath ( float* MinWeight );       		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x021C ] Engine.Controller.FindBestInventoryPath
	 void                      WaitForLanding (  );                              		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x020F ] Engine.Controller.WaitForLanding
	 bool                      PickWallAdjust ( struct FVector HitNormal );      		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x020E ] Engine.Controller.PickWallAdjust
	 bool                      actorReachable ( class AActor* anActor );         		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0208 ] Engine.Controller.actorReachable
	 bool                      pointReachable ( struct FVector aPoint );         		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0209 ] Engine.Controller.pointReachable
	 struct FVector            EAdjustJump ( float BaseZ, float XYSpeed );       		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x020B ] Engine.Controller.EAdjustJump
	 class ANavigationPoint*   FindRandomDest (  );                              		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x020D ] Engine.Controller.FindRandomDest
	 class AActor*             FindPathTowardNearest ( class UClass* GoalClass, bool bWeightDetours );		// [ FUNC_Final | FUNC_Native ] Engine.Controller.FindPathTowardNearest
	 class AActor*             FindPathToIntercept ( class APawn* P, class AActor* RouteGoal, bool bWeightDetours );		// [ FUNC_Final | FUNC_Native ] Engine.Controller.FindPathToIntercept
	 class AActor*             FindPathToward ( class AActor* anActor, bool bWeightDetours );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0205 ] Engine.Controller.FindPathToward
	 class AActor*             FindPathTo ( struct FVector aPoint );             		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0206 ] Engine.Controller.FindPathTo
	 bool                      CanSee ( class APawn* Other );                    		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0215 ] Engine.Controller.CanSee
	 bool                      LineOfSightTo ( class AActor* Other );            		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0202 ] Engine.Controller.LineOfSightTo
	 void                      FinishRotation (  );                              		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x01FC ] Engine.Controller.FinishRotation
	 void                      MoveToward ( class AActor* NewTarget, class AActor* ViewFocus, float DestinationOffset, bool bUseStrafing, bool bShouldSprint );		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x01F6 ] Engine.Controller.MoveToward
	 void                      MoveTo ( struct FVector NewDestination, class AActor* ViewFocus, bool bShouldSprint, struct FVector FocalPoint );		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x01F4 ] Engine.Controller.MoveTo

	// Public Imports
	AController(class AController const &);
	AController(void);
	class AController &  operator=(class AController const &);
	int  CanHear(class FVector,float,class AActor *);
	int  CanHearSound(class FVector,class AActor *,float,float *);
	void  CheckEnemyVisible(void);
	void  CheckFears(void);
	class AActor *  FindPath(class FVector,class AActor *,int);
	int  GetTeamNumNativeImp(void);
	class AActor *  HandleSpecial(class AActor *);
	static void  InternalConstructor(void *);
	unsigned long  LineOfSightTo(class AActor *,int);
	unsigned long  SeePawn(class APawn *,int);
	class AActor *  SetPath(int);
	void  SetRouteCache(class ANavigationPoint *,float,float);
	void  ShowSelf(void);
	static class UClass *  StaticClass(void);
	bool  WantsSmoothedViewNativeImp(void);
	unsigned long  actorReachableNativeImp(class AActor *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0234

// Class Engine.PlayerController
class DLL_IMPORT APlayerController : public AController
{
public:
	class UPlayer*                                     Player;                                           		// 0x05FC ( 0x0004 ) [ CPF_Const ]
	unsigned long                                      bLookUpStairs:1;                                  		// 0x0600 ( 0x0004 )  [0x00000001]
	unsigned long                                      bSnapToLevel:1;                                   		// 0x0600 ( 0x0004 )  [0x00000002]
	unsigned long                                      bAlwaysMouseLook:1;                               		// 0x0600 ( 0x0004 )  [0x00000004]
	unsigned long                                      bKeyboardLook:1;                                  		// 0x0600 ( 0x0004 )  [0x00000008]
	unsigned long                                      bCenterView:1;                                    		// 0x0600 ( 0x0004 )  [0x00000010]
	unsigned long                                      bCanProcessTimer:1;                               		// 0x0600 ( 0x0004 )  [0x00000020]
	unsigned long                                      DoServerViewNextPlayer:1;                         		// 0x0600 ( 0x0004 )  [0x00000040][ CPF_NoExport ]
	unsigned long                                      bBehindView:1;                                    		// 0x0600 ( 0x0004 )  [0x00000080]
	unsigned long                                      bFrozen:1;                                        		// 0x0600 ( 0x0004 )  [0x00000100]
	unsigned long                                      bPressedJump:1;                                   		// 0x0600 ( 0x0004 )  [0x00000200]
	unsigned long                                      bDoubleJump:1;                                    		// 0x0600 ( 0x0004 )  [0x00000400]
	unsigned long                                      bUpdatePosition:1;                                		// 0x0600 ( 0x0004 )  [0x00000800]
	unsigned long                                      bIsTyping:1;                                      		// 0x0600 ( 0x0004 )  [0x00001000]
	unsigned long                                      bFixedCamera:1;                                   		// 0x0600 ( 0x0004 )  [0x00002000]
	unsigned long                                      bJumpStatus:1;                                    		// 0x0600 ( 0x0004 )  [0x00004000]
	unsigned long                                      bUpdating:1;                                      		// 0x0600 ( 0x0004 )  [0x00008000]
	unsigned long                                      bNeverSwitchOnPickup:1;                           		// 0x0600 ( 0x0004 )  [0x00010000]
	unsigned long                                      bHideSpectatorBeacons:1;                          		// 0x0600 ( 0x0004 )  [0x00020000]
	unsigned long                                      bZooming:1;                                       		// 0x0600 ( 0x0004 )  [0x00040000]
	unsigned long                                      bHideVehicleNoEntryIndicator:1;                   		// 0x0600 ( 0x0004 )  [0x00080000]
	unsigned long                                      bAlwaysLevel:1;                                   		// 0x0600 ( 0x0004 )  [0x00100000]
	unsigned long                                      bSetTurnRot:1;                                    		// 0x0600 ( 0x0004 )  [0x00200000]
	unsigned long                                      bCheatFlying:1;                                   		// 0x0600 ( 0x0004 )  [0x00400000]
	unsigned long                                      bFreeCamera:1;                                    		// 0x0600 ( 0x0004 )  [0x00800000]
	unsigned long                                      bZeroRoll:1;                                      		// 0x0600 ( 0x0004 )  [0x01000000]
	unsigned long                                      bCameraPositionLocked:1;                          		// 0x0600 ( 0x0004 )  [0x02000000]
	unsigned long                                      bViewBot:1;                                       		// 0x0600 ( 0x0004 )  [0x04000000]
	unsigned long                                      UseFixedVisibility:1;                             		// 0x0600 ( 0x0004 )  [0x08000000]
	unsigned long                                      bFreeCam:1;                                       		// 0x0600 ( 0x0004 )  [0x10000000]
	unsigned long                                      bFreeCamZoom:1;                                   		// 0x0600 ( 0x0004 )  [0x20000000]
	unsigned long                                      bFreeCamSwivel:1;                                 		// 0x0600 ( 0x0004 )  [0x40000000]
	unsigned long                                      bBlockCloseCamera:1;                              		// 0x0600 ( 0x0004 )  [0x80000000]
	unsigned long                                      bValidBehindCamera:1;                             		// 0x0604 ( 0x0004 )  [0x00000001]
	unsigned long                                      bForcePrecache:1;                                 		// 0x0604 ( 0x0004 )  [0x00000002]
	unsigned long                                      bClientDemo:1;                                    		// 0x0604 ( 0x0004 )  [0x00000004]
	unsigned long                                      bAllActorsRelevant:1;                             		// 0x0604 ( 0x0004 )  [0x00000008][ CPF_Const ]
	unsigned long                                      bShortConnectTimeOut:1;                           		// 0x0604 ( 0x0004 )  [0x00000010]
	unsigned long                                      bPendingDestroy:1;                                		// 0x0604 ( 0x0004 )  [0x00000020]
	unsigned long                                      bEnableAmbientShake:1;                            		// 0x0604 ( 0x0004 )  [0x00000040]
	unsigned long                                      bPlayFromStart:1;                                 		// 0x0604 ( 0x0004 )  [0x00000080]
	unsigned long                                      bFreeView:1;                                      		// 0x0604 ( 0x0004 )  [0x00000100][ CPF_Net ]
	unsigned long                                      bNoVoiceMessages:1;                               		// 0x0604 ( 0x0004 )  [0x00000200]
	unsigned long                                      bNoTextToSpeechVoiceMessages:1;                   		// 0x0604 ( 0x0004 )  [0x00000400]
	unsigned long                                      bNoVoiceTaunts:1;                                 		// 0x0604 ( 0x0004 )  [0x00000800]
	unsigned long                                      bNoAutoTaunts:1;                                  		// 0x0604 ( 0x0004 )  [0x00001000]
	unsigned long                                      bAutoTaunt:1;                                     		// 0x0604 ( 0x0004 )  [0x00002000]
	unsigned long                                      bNoMatureLanguage:1;                              		// 0x0604 ( 0x0004 )  [0x00004000]
	unsigned long                                      bDynamicNetSpeed:1;                               		// 0x0604 ( 0x0004 )  [0x00008000]
	unsigned long                                      bSmallWeapons:1;                                  		// 0x0604 ( 0x0004 )  [0x00010000]
	float                                              fDeltaFOVAngle;                                   		// 0x0608 ( 0x0004 ) 
	float                                              fAnimRate_AdsOn;                                  		// 0x060C ( 0x0004 ) 
	float                                              fAnimRate_AdsOff;                                 		// 0x0610 ( 0x0004 ) 
	unsigned long                                      bWeaponViewShake:1;                               		// 0x0614 ( 0x0004 )  [0x00000001]
	unsigned long                                      bLandingShake:1;                                  		// 0x0614 ( 0x0004 )  [0x00000002]
	unsigned long                                      bAimingHelp:1;                                    		// 0x0614 ( 0x0004 )  [0x00000004]
	int                                                BGMLastInitialSeekIdx;                            		// 0x0618 ( 0x0004 ) 
	unsigned long                                      bEnablePickupForceFeedback:1;                     		// 0x061C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bEnableWeaponForceFeedback:1;                     		// 0x061C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bEnableDamageForceFeedback:1;                     		// 0x061C ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bEnableGUIForceFeedback:1;                        		// 0x061C ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bForceFeedbackSupported:1;                        		// 0x061C ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bVoiceChatEnabled:1;                              		// 0x061C ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bEnableInitialChatRoom:1;                         		// 0x061C ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bViewingMatineeCinematic:1;                       		// 0x061C ( 0x0004 )  [0x00000080]
	unsigned long                                      bCustomListener:1;                                		// 0x061C ( 0x0004 )  [0x00000100]
	unsigned long                                      bAcuteHearing:1;                                  		// 0x061C ( 0x0004 )  [0x00000200]
	unsigned long                                      bMenuBeforeRespawn:1;                             		// 0x061C ( 0x0004 )  [0x00000400]
	unsigned long                                      bSkippedLastUpdate:1;                             		// 0x061C ( 0x0004 )  [0x00000800]
	unsigned long                                      bLastPressedJump:1;                               		// 0x061C ( 0x0004 )  [0x00001000]
	unsigned long                                      bEnableStatsTracking:1;                           		// 0x061C ( 0x0004 )  [0x00002000]
	unsigned long                                      bOnlySpeakTeamText:1;                             		// 0x061C ( 0x0004 )  [0x00004000]
	unsigned long                                      bWasSpeedHack:1;                                  		// 0x061C ( 0x0004 )  [0x00008000]
	unsigned long                                      bIsSpaceFighter:1;                                		// 0x061C ( 0x0004 )  [0x00010000]
	unsigned long                                      bWasSaturated:1;                                  		// 0x061C ( 0x0004 )  [0x00020000][ CPF_Const ]
	float                                              FOVBias;                                          		// 0x0620 ( 0x0004 ) 
	unsigned char                                      AutoJoinMask;                                     		// 0x0624 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      bStrafe;                                          		// 0x0625 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bSnapLevel;                                       		// 0x0626 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bLook;                                            		// 0x0627 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bFreeLook;                                        		// 0x0628 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bTurn180;                                         		// 0x0629 ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bTurnToNearest;                                   		// 0x062A ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bXAxis;                                           		// 0x062B ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bYAxis;                                           		// 0x062C ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bQuickGrenade;                                    		// 0x062D ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      bQuickSubGrenade;                                 		// 0x062E ( 0x0001 ) [ CPF_Input ]
	unsigned char                                      DoubleClickDir;                                   		// 0x062F ( 0x0001 ) 
	unsigned char                                      AnnouncerLevel;                                   		// 0x0630 ( 0x0001 ) 
	unsigned char                                      AnnouncerVolume;                                  		// 0x0631 ( 0x0001 ) 
	float                                              AnnouncerVolumeForce;                             		// 0x0634 ( 0x0004 ) [ CPF_Config | CPF_GlobalConfig ]
	float                                              TextToSpeechVoiceVolume;                          		// 0x0638 ( 0x0004 ) 
	float                                              MaxResponseTime;                                  		// 0x063C ( 0x0004 ) 
	float                                              WaitDelay;                                        		// 0x0640 ( 0x0004 ) 
	class APawn*                                       AcknowledgedPawn;                                 		// 0x0644 ( 0x0004 ) 
	float                                              aBaseX;                                           		// 0x0648 ( 0x0004 ) [ CPF_Input ]
	float                                              aBaseY;                                           		// 0x064C ( 0x0004 ) [ CPF_Input ]
	float                                              aBaseZ;                                           		// 0x0650 ( 0x0004 ) [ CPF_Input ]
	float                                              aMouseX;                                          		// 0x0654 ( 0x0004 ) [ CPF_Input ]
	float                                              aMouseY;                                          		// 0x0658 ( 0x0004 ) [ CPF_Input ]
	float                                              aForward;                                         		// 0x065C ( 0x0004 ) [ CPF_Input ]
	float                                              aTurn;                                            		// 0x0660 ( 0x0004 ) [ CPF_Input ]
	float                                              aStrafe;                                          		// 0x0664 ( 0x0004 ) [ CPF_Input ]
	float                                              aUp;                                              		// 0x0668 ( 0x0004 ) [ CPF_Input ]
	float                                              aLookUp;                                          		// 0x066C ( 0x0004 ) [ CPF_Input ]
	float                                              aLastForward;                                     		// 0x0670 ( 0x0004 ) 
	float                                              aLastStrafe;                                      		// 0x0674 ( 0x0004 ) 
	float                                              aLastUp;                                          		// 0x0678 ( 0x0004 ) 
	float                                              NumServerDrives;                                  		// 0x067C ( 0x0004 ) 
	float                                              NumSkips;                                         		// 0x0680 ( 0x0004 ) 
	float                                              VehicleCheckRadius;                               		// 0x0684 ( 0x0004 ) 
	unsigned long                                      bSuccessfulUse:1;                                 		// 0x0688 ( 0x0004 )  [0x00000001]
	int                                                ShowFlags;                                        		// 0x068C ( 0x0004 ) 
	int                                                Misc1;                                            		// 0x0690 ( 0x0004 ) 
	int                                                Misc2;                                            		// 0x0694 ( 0x0004 ) 
	int                                                RendMap;                                          		// 0x0698 ( 0x0004 ) 
	float                                              OrthoZoom;                                        		// 0x069C ( 0x0004 ) 
	class AActor*                                      ViewTarget;                                       		// 0x06A0 ( 0x0004 ) [ CPF_Const ]
	class AController*                                 RealViewTarget;                                   		// 0x06A4 ( 0x0004 ) [ CPF_Const ]
	class APlayerController*                           DemoViewer;                                       		// 0x06A8 ( 0x0004 ) 
	float                                              CameraDist;                                       		// 0x06AC ( 0x0004 ) 
	struct FRange                                      CameraDistRange;                                  		// 0x06B0 ( 0x0008 ) 
	struct FVector                                     OldCameraLoc;                                     		// 0x06B8 ( 0x000C ) 
	struct FRotator                                    OldCameraRot;                                     		// 0x06C4 ( 0x000C ) 
	class TArray< class UCameraEffect* >               CameraEffects;                                    		// 0x06D0 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< class UPostProcessEffect* >          PostProcessEffects;                               		// 0x06DC ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	unsigned long                                      bPPE_Fade_FirstStarted:1;                         		// 0x06E8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNeedFadeClientRestart:1;                         		// 0x06E8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bForceFadeScreen:1;                               		// 0x06E8 ( 0x0004 )  [0x00000004]
	float                                              DesiredFOV;                                       		// 0x06EC ( 0x0004 ) 
	float                                              DefaultFOV;                                       		// 0x06F0 ( 0x0004 ) 
	unsigned long                                      bInstantZoom:1;                                   		// 0x06F4 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	struct FVector                                     ListenerLocation;                                 		// 0x06F8 ( 0x000C ) 
	struct FRotator                                    ListenerRotation;                                 		// 0x0704 ( 0x000C ) 
	struct FVector                                     FixedLocation;                                    		// 0x0710 ( 0x000C ) 
	struct FRotator                                    FixedRotation;                                    		// 0x071C ( 0x000C ) 
	struct FMatrix                                     RenderWorldToCamera;                              		// 0x0728 ( 0x0040 ) 
	struct FVector                                     FlashScale;                                       		// 0x0768 ( 0x000C ) 
	struct FVector                                     FlashFog;                                         		// 0x0774 ( 0x000C ) 
	float                                              ConstantGlowScale;                                		// 0x0780 ( 0x0004 ) 
	struct FVector                                     ConstantGlowFog;                                  		// 0x0784 ( 0x000C ) 
	float                                              ScreenFlashScaling;                               		// 0x0790 ( 0x0004 ) 
	float                                              FlashStep;                                        		// 0x0794 ( 0x0004 ) 
	class FColor                                       LastDistanceFogColor;                             		// 0x0798 ( 0x0004 ) 
	float                                              LastDistanceFogStart;                             		// 0x079C ( 0x0004 ) 
	float                                              LastDistanceFogEnd;                               		// 0x07A0 ( 0x0004 ) 
	float                                              CurrentDistanceFogEnd;                            		// 0x07A4 ( 0x0004 ) 
	float                                              TimeSinceLastFogChange;                           		// 0x07A8 ( 0x0004 ) 
	int                                                LastZone;                                         		// 0x07AC ( 0x0004 ) 
	struct FRotator                                    TargetViewRotation;                               		// 0x07B0 ( 0x000C ) [ CPF_Net ]
	struct FRotator                                    BlendedTargetViewRotation;                        		// 0x07BC ( 0x000C ) 
	float                                              TargetEyeHeight;                                  		// 0x07C8 ( 0x0004 ) [ CPF_Net ]
	struct FVector                                     TargetWeaponViewOffset;                           		// 0x07CC ( 0x000C ) 
	class AHUD*                                        myHUD;                                            		// 0x07D8 ( 0x0004 ) 
	float                                              LastPlaySound;                                    		// 0x07DC ( 0x0004 ) 
	float                                              LastPlaySpeech;                                   		// 0x07E0 ( 0x0004 ) 
	struct FString                                     Song;                                             		// 0x07E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      Transition;                                       		// 0x07F0 ( 0x0001 ) 
	class ASavedMove*                                  SavedMoves;                                       		// 0x07F4 ( 0x0004 ) 
	class ASavedMove*                                  FreeMoves;                                        		// 0x07F8 ( 0x0004 ) 
	class ASavedMove*                                  PendingMove;                                      		// 0x07FC ( 0x0004 ) 
	float                                              CurrentTimeStamp;                                 		// 0x0800 ( 0x0004 ) 
	float                                              LastUpdateTime;                                   		// 0x0804 ( 0x0004 ) 
	float                                              ServerTimeStamp;                                  		// 0x0808 ( 0x0004 ) 
	float                                              TimeMargin;                                       		// 0x080C ( 0x0004 ) 
	float                                              ClientUpdateTime;                                 		// 0x0810 ( 0x0004 ) 
	float                                              MaxTimeMargin;                                    		// 0x0814 ( 0x0004 ) 
	float                                              TimeMarginSlack;                                  		// 0x0818 ( 0x0004 ) 
	class AwWeapon*                                    OldClientWeapon;                                  		// 0x081C ( 0x0004 ) 
	int                                                WeaponUpdate;                                     		// 0x0820 ( 0x0004 ) 
	struct FString                                     ProgressMessage[ 0x04 ];                          		// 0x0824 ( 0x0030 ) [ CPF_NeedCtorLink ]
	class FColor                                       ProgressColor[ 0x04 ];                            		// 0x0854 ( 0x0010 ) 
	float                                              ProgressTimeOut;                                  		// 0x0864 ( 0x0004 ) 
	struct FString                                     QuickSaveString;                                  		// 0x0868 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NoPauseMessage;                                   		// 0x0874 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ViewingFrom;                                      		// 0x0880 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     OwnCamera;                                        		// 0x088C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x0898 ( 0x0004 ) [ CPF_Net ]
	class AVoiceChatReplicationInfo*                   VoiceReplicationInfo;                             		// 0x089C ( 0x0004 ) [ CPF_Net ]
	class AVotingReplicationInfoBase*                  VoteReplicationInfo;                              		// 0x08A0 ( 0x0004 ) 
	struct FString                                     StatsUsername;                                    		// 0x08A4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     StatsPassword;                                    		// 0x08B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UClass*                                      LocalMessageClass;                                		// 0x08BC ( 0x0004 ) 
	class UClass*                                      ChatRoomMessageClass;                             		// 0x08C0 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ShakeOffsetRate;                                  		// 0x08C4 ( 0x000C ) 
	struct FVector                                     ShakeOffset;                                      		// 0x08D0 ( 0x000C ) 
	struct FVector                                     ShakeOffsetTime;                                  		// 0x08DC ( 0x000C ) 
	struct FVector                                     ShakeOffsetMax;                                   		// 0x08E8 ( 0x000C ) 
	struct FVector                                     ShakeRotRate;                                     		// 0x08F4 ( 0x000C ) 
	struct FVector                                     ShakeRotMax;                                      		// 0x0900 ( 0x000C ) 
	struct FRotator                                    ShakeRot;                                         		// 0x090C ( 0x000C ) 
	struct FVector                                     ShakeRotTime;                                     		// 0x0918 ( 0x000C ) 
	unsigned char                                      wShakeState;                                      		// 0x0924 ( 0x0001 ) 
	struct FRotator                                    wShakeDest;                                       		// 0x0928 ( 0x000C ) 
	float                                              wShakeStayingTime;                                		// 0x0934 ( 0x0004 ) 
	struct FVector                                     wShakeVelocity;                                   		// 0x0938 ( 0x000C ) 
	float                                              wShakeDist;                                       		// 0x0944 ( 0x0004 ) 
	float                                              wShakeDecayStartDist;                             		// 0x0948 ( 0x0004 ) 
	float                                              wShakeSpeed;                                      		// 0x094C ( 0x0004 ) 
	float                                              wShakeDecel;                                      		// 0x0950 ( 0x0004 ) 
	float                                              wShakeDecay;                                      		// 0x0954 ( 0x0004 ) 
	float                                              wShakeDecayAcc;                                   		// 0x0958 ( 0x0004 ) 
	struct FRotator                                    wShakeRot;                                        		// 0x095C ( 0x000C ) 
	struct FRotator                                    wShakeKickedRot;                                  		// 0x0968 ( 0x000C ) 
	float                                              wShakeDeltaTime;                                  		// 0x0974 ( 0x0004 ) 
	float                                              wShakeFixedTime;                                  		// 0x0978 ( 0x0004 ) 
	float                                              wShakeDecayBeginTime;                             		// 0x097C ( 0x0004 ) 
	float                                              wShakeDecayFastTime;                              		// 0x0980 ( 0x0004 ) 
	float                                              wDecayRemainTime;                                 		// 0x0984 ( 0x0004 ) 
	float                                              wShakeDecayDist_Per_wt_index;                     		// 0x0988 ( 0x0004 ) 
	struct FRotator                                    wShakeDecayed;                                    		// 0x098C ( 0x000C ) 
	unsigned char                                      wShockState;                                      		// 0x0998 ( 0x0001 ) 
	float                                              wShockForce;                                      		// 0x099C ( 0x0004 ) 
	float                                              wShockStayingTime;                                		// 0x09A0 ( 0x0004 ) 
	struct FRotator                                    wShockRot;                                        		// 0x09A4 ( 0x000C ) 
	float                                              wShockStayTime;                                   		// 0x09B0 ( 0x0004 ) 
	float                                              wShockDecayMul;                                   		// 0x09B4 ( 0x0004 ) 
	struct FRotator                                    wBreathRot;                                       		// 0x09B8 ( 0x000C ) 
	float                                              AmbientShakeFalloffStartTime;                     		// 0x09C4 ( 0x0004 ) 
	float                                              AmbientShakeFalloffTime;                          		// 0x09C8 ( 0x0004 ) 
	struct FVector                                     AmbientShakeOffsetMag;                            		// 0x09CC ( 0x000C ) 
	float                                              AmbientShakeOffsetFreq;                           		// 0x09D8 ( 0x0004 ) 
	struct FRotator                                    AmbientShakeRotMag;                               		// 0x09DC ( 0x000C ) 
	float                                              AmbientShakeRotFreq;                              		// 0x09E8 ( 0x0004 ) 
	class APawn*                                       TurnTarget;                                       		// 0x09EC ( 0x0004 ) 
	int                                                EnemyTurnSpeed;                                   		// 0x09F0 ( 0x0004 ) 
	int                                                GroundPitch;                                      		// 0x09F4 ( 0x0004 ) 
	struct FRotator                                    TurnRot180;                                       		// 0x09F8 ( 0x000C ) 
	struct FVector                                     OldFloor;                                         		// 0x0A04 ( 0x000C ) 
	float                                              wAttackedDeltaTime;                               		// 0x0A10 ( 0x0004 ) 
	float                                              wAttackedStayingTime;                             		// 0x0A14 ( 0x0004 ) 
	float                                              wAttackedStayTime;                                		// 0x0A18 ( 0x0004 ) 
	float                                              wAttackedForce;                                   		// 0x0A1C ( 0x0004 ) 
	float                                              wAttackedSpeed;                                   		// 0x0A20 ( 0x0004 ) 
	float                                              wAttackedDecel;                                   		// 0x0A24 ( 0x0004 ) 
	float                                              wAttackedDecay;                                   		// 0x0A28 ( 0x0004 ) 
	float                                              wAttackedDecayAcc;                                		// 0x0A2C ( 0x0004 ) 
	float                                              wAttackedDist;                                    		// 0x0A30 ( 0x0004 ) 
	float                                              wAttackedAimRatio;                                		// 0x0A34 ( 0x0004 ) 
	float                                              wAttackedCameraRatioF;                            		// 0x0A38 ( 0x0004 ) 
	float                                              wAttackedCameraRatioS;                            		// 0x0A3C ( 0x0004 ) 
	struct FVector                                     wAttackedVelocity;                                		// 0x0A40 ( 0x000C ) 
	struct FVector                                     wApplyFront;                                      		// 0x0A4C ( 0x000C ) 
	struct FVector                                     wApplyBack;                                       		// 0x0A58 ( 0x000C ) 
	struct FVector                                     wApplyRight;                                      		// 0x0A64 ( 0x000C ) 
	struct FVector                                     wApplyLeft;                                       		// 0x0A70 ( 0x000C ) 
	struct FRotator                                    wAttackedDest;                                    		// 0x0A7C ( 0x000C ) 
	struct FRotator                                    wAttackedRot;                                     		// 0x0A88 ( 0x000C ) 
	struct FRotator                                    wPostAttackedRot;                                 		// 0x0A94 ( 0x000C ) 
	unsigned char                                      wAttackedState;                                   		// 0x0AA0 ( 0x0001 ) 
	unsigned char                                      wADirState;                                       		// 0x0AA1 ( 0x0001 ) 
	class UCheatManager*                               CheatManager;                                     		// 0x0AA4 ( 0x0004 ) [ CPF_Transient ]
	class UClass*                                      CheatClass;                                       		// 0x0AA8 ( 0x0004 ) 
	class UPlayerInput*                                PlayerInput;                                      		// 0x0AAC ( 0x0004 ) [ CPF_Transient ]
	class UClass*                                      InputClass;                                       		// 0x0AB0 ( 0x0004 ) 
	class UAdminBase*                                  AdminManager;                                     		// 0x0AB4 ( 0x0004 ) [ CPF_Transient ]
	class AMaplistManagerBase*                         MapHandler;                                       		// 0x0AB8 ( 0x0004 ) [ CPF_Transient ]
	struct FString                                     PlayerChatType;                                   		// 0x0ABC ( 0x000C ) [ CPF_NeedCtorLink ]
	class APlayerChatManager*                          ChatManager;                                      		// 0x0AC8 ( 0x0004 ) [ CPF_Net ]
	struct FVector                                     FailedPathStart;                                  		// 0x0ACC ( 0x000C ) [ CPF_Const ]
	struct FRotator                                    CameraDeltaRotation;                              		// 0x0AD8 ( 0x000C ) 
	float                                              CameraDeltaRad;                                   		// 0x0AE4 ( 0x0004 ) 
	struct FRotator                                    CameraSwivel;                                     		// 0x0AE8 ( 0x000C ) 
	float                                              TeamBeaconMaxDist;                                		// 0x0AF4 ( 0x0004 ) [ CPF_Edit ]
	float                                              TeamBeaconPlayerInfoMaxDist;                      		// 0x0AF8 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    TeamBeaconTexture;                                		// 0x0AFC ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    LinkBeaconTexture;                                		// 0x0B00 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    SpeakingBeaconTexture;                            		// 0x0B04 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       TeamBeaconTeamColors[ 0x02 ];                     		// 0x0B08 ( 0x0008 ) [ CPF_Edit ]
	class FColor                                       TeamBeaconCustomColor;                            		// 0x0B10 ( 0x0004 ) [ CPF_Edit ]
	class TArray< struct FPlayerNameInfo >             PlayerNameArray;                                  		// 0x0B14 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	int                                                DemoViewPitch;                                    		// 0x0B20 ( 0x0004 ) [ CPF_Net ]
	int                                                DemoViewYaw;                                      		// 0x0B24 ( 0x0004 ) [ CPF_Net ]
	class ASecurity*                                   PlayerSecurity;                                   		// 0x0B28 ( 0x0004 ) 
	float                                              LoginDelay;                                       		// 0x0B2C ( 0x0004 ) [ CPF_Net ]
	float                                              NextLoginTime;                                    		// 0x0B30 ( 0x0004 ) 
	float                                              ForcePrecacheTime;                                		// 0x0B34 ( 0x0004 ) 
	float                                              LastPingUpdate;                                   		// 0x0B38 ( 0x0004 ) 
	float                                              ExactPing;                                        		// 0x0B3C ( 0x0004 ) 
	float                                              OldPing;                                          		// 0x0B40 ( 0x0004 ) 
	float                                              SpectateSpeed;                                    		// 0x0B44 ( 0x0004 ) 
	float                                              DynamicPingThreshold;                             		// 0x0B48 ( 0x0004 ) 
	float                                              NextSpeedChange;                                  		// 0x0B4C ( 0x0004 ) 
	float                                              VoiceChangeLimit;                                 		// 0x0B50 ( 0x0004 ) 
	int                                                ClientCap;                                        		// 0x0B54 ( 0x0004 ) 
	struct FString                                     MidGameMenuClass;                                 		// 0x0B58 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     DemoMenuClass;                                    		// 0x0B64 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     AdminMenuClass;                                   		// 0x0B70 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ChatPasswordMenuClass;                            		// 0x0B7C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FStoredChatPassword >         StoredChatPasswords;                              		// 0x0B88 ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink ]
	class AVoiceChatRoom*                              ActiveRoom;                                       		// 0x0B94 ( 0x0004 ) 
	struct FString                                     LastActiveChannel;                                		// 0x0B98 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     VoiceChatCodec;                                   		// 0x0BA4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     VoiceChatLANCodec;                                		// 0x0BB0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ChatPassword;                                     		// 0x0BBC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     DefaultActiveChannel;                             		// 0x0BC8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FClientAdjustment                           PendingAdjustment;                                		// 0x0BD4 ( 0x0034 ) 
	class AAnnouncerQueueManager*                      AnnouncerQueueManager;                            		// 0x0C08 ( 0x0004 ) 
	class AAnnouncerVoice*                             StatusAnnouncer;                                  		// 0x0C0C ( 0x0004 ) 
	class AAnnouncerVoice*                             RewardAnnouncer;                                  		// 0x0C10 ( 0x0004 ) 
	float                                              LastActiveTime;                                   		// 0x0C14 ( 0x0004 ) 
	class AActor*                                      CalcViewActor;                                    		// 0x0C18 ( 0x0004 ) 
	struct FVector                                     CalcViewActorLocation;                            		// 0x0C1C ( 0x000C ) 
	struct FVector                                     CalcViewLocation;                                 		// 0x0C28 ( 0x000C ) 
	struct FRotator                                    CalcViewRotation;                                 		// 0x0C34 ( 0x000C ) 
	float                                              LastPlayerCalcView;                               		// 0x0C40 ( 0x0004 ) 
	float                                              LastBroadcastTime;                                		// 0x0C44 ( 0x0004 ) 
	struct FString                                     LastBroadcastString[ 0x04 ];                      		// 0x0C48 ( 0x0030 ) [ CPF_NeedCtorLink ]
	float                                              LastSpeedHackLog;                                 		// 0x0C78 ( 0x0004 ) 
	struct FString                                     PlayerOwnerName;                                  		// 0x0C7C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bAimMode:1;                                       		// 0x0C88 ( 0x0004 )  [0x00000001][ CPF_Net ]
	float                                              fTest00;                                          		// 0x0C8C ( 0x0004 ) 
	float                                              fTest01;                                          		// 0x0C90 ( 0x0004 ) 
	unsigned long                                      bReloadMode:1;                                    		// 0x0C94 ( 0x0004 )  [0x00000001]
	unsigned long                                      bMeleeAttackMode:1;                               		// 0x0C94 ( 0x0004 )  [0x00000002]
	int                                                IDNum;                                            		// 0x0C98 ( 0x0004 ) 
	struct FString                                     LoginName;                                        		// 0x0C9C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bShowAllPlayers:1;                                		// 0x0CA8 ( 0x0004 )  [0x00000001]
	unsigned char                                      byOldUseKey;                                      		// 0x0CAC ( 0x0001 ) 
	int                                                MultiKillLevel;                                   		// 0x0CB0 ( 0x0004 ) 
	int                                                iDebug;                                           		// 0x0CB4 ( 0x0004 ) 
	unsigned long                                      bDamageLog:1;                                     		// 0x0CB8 ( 0x0004 )  [0x00000001]
	struct FString                                     PreviousStateName;                                		// 0x0CBC ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              fRespawnTime;                                     		// 0x0CC8 ( 0x0004 ) [ CPF_Edit ]
	float                                              fDiedTime;                                        		// 0x0CCC ( 0x0004 ) 
	float                                              fMinTimeLookAt;                                   		// 0x0CD0 ( 0x0004 ) [ CPF_Edit ]
	class APawn*                                       KillerPawn;                                       		// 0x0CD4 ( 0x0004 ) 
	struct FVector                                     KillerLocation;                                   		// 0x0CD8 ( 0x000C ) 
	unsigned long                                      bDiedByCallWeapon:1;                              		// 0x0CE4 ( 0x0004 )  [0x00000001]
	int                                                iSelectedQSlotIndex;                              		// 0x0CE8 ( 0x0004 ) 
	int                                                iPrevSelectedQSlotIndex;                          		// 0x0CEC ( 0x0004 ) 
	int                                                iBupQSlotIndex;                                   		// 0x0CF0 ( 0x0004 ) 
	unsigned long                                      bCanChangeQS:1;                                   		// 0x0CF4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bToggleQuickSlotWindow:1;                         		// 0x0CF4 ( 0x0004 )  [0x00000002]
	unsigned long                                      bToggleRadioMessage:1;                            		// 0x0CF4 ( 0x0004 )  [0x00000004]
	int                                                iRadioMessageType;                                		// 0x0CF8 ( 0x0004 ) 
	float                                              fRadioMessageSendTime;                            		// 0x0CFC ( 0x0004 ) 
	int                                                RemainTimeBeforeSpectating;                       		// 0x0D00 ( 0x0004 ) 
	class AwGameStateStorageSender*                    GSSS;                                             		// 0x0D04 ( 0x0004 ) [ CPF_Net ]
	float                                              fLastViewNextPlayerTime;                          		// 0x0D08 ( 0x0004 ) 
	float                                              fSendPingTime;                                    		// 0x0D0C ( 0x0004 ) 
	float                                              fLastSendPingTime;                                		// 0x0D10 ( 0x0004 ) 
	int                                                iRepShake;                                        		// 0x0D14 ( 0x0004 ) 
	int                                                iRepShock;                                        		// 0x0D18 ( 0x0004 ) 
	int                                                iRepBreath;                                       		// 0x0D1C ( 0x0004 ) 
	unsigned long                                      bEnableRotate:1;                                  		// 0x0D20 ( 0x0004 )  [0x00000001]
	unsigned long                                      bPlayerWalkingFromChangeHost:1;                   		// 0x0D20 ( 0x0004 )  [0x00000002]
	unsigned char                                      AASLevel;                                         		// 0x0D24 ( 0x0001 ) 
	float                                              fAirStrikeCenterX;                                		// 0x0D28 ( 0x0004 ) [ CPF_Net ]
	float                                              fAirStrikeCenterY;                                		// 0x0D2C ( 0x0004 ) [ CPF_Net ]
	float                                              fAirStrikeRadius;                                 		// 0x0D30 ( 0x0004 ) [ CPF_Net ]
	int                                                iGMCamMode;                                       		// 0x0D34 ( 0x0004 ) 
	int                                                changeCamViewIdx;                                 		// 0x0D38 ( 0x0004 ) 
	float                                              GmAccUp;                                          		// 0x0D3C ( 0x0004 ) [ CPF_Input ]
	float                                              GmAccDown;                                        		// 0x0D40 ( 0x0004 ) [ CPF_Input ]
	struct FVector                                     CamPreLocation;                                   		// 0x0D44 ( 0x000C ) 
	struct FRotator                                    CamPreRotation;                                   		// 0x0D50 ( 0x000C ) 
	float                                              fPostBeginTime;                                   		// 0x0D5C ( 0x0004 ) 
	float                                              fLastCalcTime;                                    		// 0x0D60 ( 0x0004 ) 
	unsigned long                                      bSentPerfInfo:1;                                  		// 0x0D64 ( 0x0004 )  [0x00000001]
	int                                                iCalcCount;                                       		// 0x0D68 ( 0x0004 ) 
	int                                                iMaxFPS;                                          		// 0x0D6C ( 0x0004 ) 
	int                                                iMinFPS;                                          		// 0x0D70 ( 0x0004 ) 
	int                                                iSumFPS;                                          		// 0x0D74 ( 0x0004 ) 
	int                                                iMaxPing;                                         		// 0x0D78 ( 0x0004 ) 
	int                                                iMinPing;                                         		// 0x0D7C ( 0x0004 ) 
	int                                                iSumPing;                                         		// 0x0D80 ( 0x0004 ) 

	// UScript Functions
	 void                      ServerSendCheatMsg ( struct FString Msg );        		//  Engine.PlayerController.ServerSendCheatMsg
	 void                      execSendCheatMsg ( struct FString Msg );          		// [ FUNC_Exec ] Engine.PlayerController.SendCheatMsg
	 void                      DisplayDebugPHJ ( class UCanvas* Canvas );        		//  Engine.PlayerController.DisplayDebugPHJ
	 void                      DisplayDebugChan1 ( class UCanvas* Canvas );      		//  Engine.PlayerController.DisplayDebugChan1
	 void                      execinput_weapon ( struct FString S );            		// [ FUNC_Exec ] Engine.PlayerController.input_weapon
	 void                      execinput_weaponex ( struct FString S );          		// [ FUNC_Exec ] Engine.PlayerController.input_weaponex
	 void                      execSetWeaponTraceAim ( struct FString S );       		// [ FUNC_Exec ] Engine.PlayerController.SetWeaponTraceAim
	 void                      execSetWeaponTrace ( struct FString S );          		// [ FUNC_Exec ] Engine.PlayerController.SetWeaponTrace
	 void                      execResetWeaponTrace (  );                        		// [ FUNC_Exec ] Engine.PlayerController.ResetWeaponTrace
	 void                      execResetWeaponTraceIndex (  );                   		// [ FUNC_Exec ] Engine.PlayerController.ResetWeaponTraceIndex
	 void                      execUnsetTestAim (  );                            		// [ FUNC_Exec ] Engine.PlayerController.UnsetTestAim
	 void                      execSetTestAim (  );                              		// [ FUNC_Exec ] Engine.PlayerController.SetTestAim
	 void                      execPlusCollisionHeight ( float A );              		// [ FUNC_Exec ] Engine.PlayerController.PlusCollisionHeight
	 void                      execShowWebzenShop (  );                          		// [ FUNC_Exec ] Engine.PlayerController.ShowWebzenShop
	 void                      ClientChangeTcpTimeLimit (  );                    		//  Engine.PlayerController.ClientChangeTcpTimeLimit
	 void                      execsetsdrespawn (  );                            		// [ FUNC_Exec ] Engine.PlayerController.setsdrespawn
	 void                      execsetautostart (  );                            		// [ FUNC_Exec ] Engine.PlayerController.setautostart
	 void                      ClientUseSupplyItem ( unsigned char byType );     		//  Engine.PlayerController.ClientUseSupplyItem
	 void                      ServerUseSupplyItem ( unsigned char byType );     		//  Engine.PlayerController.ServerUseSupplyItem
	 void                      execSMWL ( struct FString swmode, struct FString Value );		// [ FUNC_Exec ] Engine.PlayerController.SMWL
	 void                      execTest3 ( float fActive );                      		// [ FUNC_Exec ] Engine.PlayerController.Test3
	 void                      execTest2 ( float fAniFrame );                    		// [ FUNC_Exec ] Engine.PlayerController.Test2
	 void                      execTest1 ( float fAniFrame );                    		// [ FUNC_Exec ] Engine.PlayerController.Test1
	 bool                      CheckChangeHostShowQS (  );                       		// [ FUNC_Simulated ] Engine.PlayerController.CheckChangeHostShowQS
	 void                      execBob ( int idvalue, float Value );             		// [ FUNC_Exec ] Engine.PlayerController.Bob
	 void                      execMark (  );                                    		// [ FUNC_Exec ] Engine.PlayerController.Mark
	 void                      execLODBias ( float fBias );                      		// [ FUNC_Exec ] Engine.PlayerController.LODBias
	 void                      execEverySetPktLoss ( int ms );                   		// [ FUNC_Exec ] Engine.PlayerController.EverySetPktLoss
	 void                      execClientSetPktLoss ( int ms );                  		// [ FUNC_Exec ] Engine.PlayerController.ClientSetPktLoss
	 void                      execEverySetPktLag ( int ms );                    		// [ FUNC_Exec ] Engine.PlayerController.EverySetPktLag
	 void                      execClientSetPktLag ( int ms );                   		// [ FUNC_Exec ] Engine.PlayerController.ClientSetPktLag
	 void                      execEverySos (  );                                		// [ FUNC_Exec ] Engine.PlayerController.EverySos
	 void                      execClientSos (  );                               		// [ FUNC_Exec ] Engine.PlayerController.ClientSos
	 void                      execSos (  );                                     		// [ FUNC_Exec ] Engine.PlayerController.Sos
	 void                      execeverysmall (  );                              		// [ FUNC_Exec ] Engine.PlayerController.everysmall
	 void                      execClientSmall (  );                             		// [ FUNC_Exec ] Engine.PlayerController.ClientSmall
	 void                      execsmall (  );                                   		// [ FUNC_Exec ] Engine.PlayerController.small
	 void                      execShowE (  );                                   		// [ FUNC_Exec ] Engine.PlayerController.ShowE
	 void                      ClientHoldFlag (  );                              		// [ FUNC_Simulated ] Engine.PlayerController.ClientHoldFlag
	 class AwWeapon*           GetDemoPackToMyInven (  );                        		// [ FUNC_Simulated ] Engine.PlayerController.GetDemoPackToMyInven
	 void                      DestroyEmitter (  );                              		// [ FUNC_Simulated ] Engine.PlayerController.DestroyEmitter
	 void                      PushAASNotice ( struct FString sNotice, float beginTime, unsigned char byLevel );		// [ FUNC_Simulated ] Engine.PlayerController.PushAASNotice
	 void                      PushGameNotice ( struct FString sNotice );        		// [ FUNC_Simulated ] Engine.PlayerController.PushGameNotice
	 void                      AllClientDeleteSuppliesPositions (  );            		// [ FUNC_Simulated ] Engine.PlayerController.AllClientDeleteSuppliesPositions
	 void                      ClientDeleteSuppliesPositions ( class AActor* act );		// [ FUNC_Simulated ] Engine.PlayerController.ClientDeleteSuppliesPositions
	 void                      ChangeVoiceObjectLanguage ( struct FString* voiceObjectName );		//  Engine.PlayerController.ChangeVoiceObjectLanguage
	 void                      VoiceObjectNameSetting (  );                      		//  Engine.PlayerController.VoiceObjectNameSetting
	 void                      SetVoiceLanguage ( int iTeamIndex );              		//  Engine.PlayerController.SetVoiceLanguage
	 void                      ClientSpawnInLogin ( int iTeamIndex );            		// [ FUNC_Simulated ] Engine.PlayerController.ClientSpawnInLogin
	 void                      SpawnInLogin ( int iTeamIndex );                  		// [ FUNC_Simulated ] Engine.PlayerController.SpawnInLogin
	 void                      ClientIncHealthPack ( bool bAdd );                		// [ FUNC_Simulated ] Engine.PlayerController.ClientIncHealthPack
	 void                      ServerIncHealthPack ( bool bAdd );                		//  Engine.PlayerController.ServerIncHealthPack
	 void                      ClientBombDetection ( bool bAdd );                		// [ FUNC_Simulated ] Engine.PlayerController.ClientBombDetection
	 void                      ServerBombDetection ( bool bAdd );                		//  Engine.PlayerController.ServerBombDetection
	 void                      ClientQuickDemolition ( bool bAdd );              		// [ FUNC_Simulated ] Engine.PlayerController.ClientQuickDemolition
	 void                      ServerQuickDemolition ( bool bAdd );              		//  Engine.PlayerController.ServerQuickDemolition
	 void                      ClientQuickRespawn ( bool bAdd );                 		// [ FUNC_Simulated ] Engine.PlayerController.ClientQuickRespawn
	 void                      ServerQuickRespawn ( bool bAdd );                 		//  Engine.PlayerController.ServerQuickRespawn
	 void                      ClientIncExplosion ( bool bAdd );                 		// [ FUNC_Simulated ] Engine.PlayerController.ClientIncExplosion
	 void                      ServerIncExplosion ( bool bAdd );                 		//  Engine.PlayerController.ServerIncExplosion
	 void                      ClientAddStamina ( bool bAdd );                   		// [ FUNC_Simulated ] Engine.PlayerController.ClientAddStamina
	 void                      ServerAddStamina ( bool bAdd );                   		//  Engine.PlayerController.ServerAddStamina
	 void                      ClientCheckSkill (  );                            		//  Engine.PlayerController.ClientCheckSkill
	 bool                      IsBombDetection (  );                             		//  Engine.PlayerController.IsBombDetection
	 void                      ClientTestAllWeapons (  );                        		//  Engine.PlayerController.ClientTestAllWeapons
	 void                      ServerRequestWeapon ( int iaWeaponID );           		//  Engine.PlayerController.ServerRequestWeapon
	 void                      ClientTestWeapon ( class AwWeapon* W, int iaWeaponID );		//  Engine.PlayerController.ClientTestWeapon
	 void                      ClientSetHidden (  );                             		//  Engine.PlayerController.ClientSetHidden
	 void                      execSelectPrevWeapon (  );                        		// [ FUNC_Exec ] Engine.PlayerController.SelectPrevWeapon
	 void                      UpdateOption (  );                                		//  Engine.PlayerController.UpdateOption
	 void                      PlaySoundRadioMessage ( int iKey, int iType );    		//  Engine.PlayerController.PlaySoundRadioMessage
	 void                      SelectRadioMessage ( int iKey );                  		//  Engine.PlayerController.SelectRadioMessage
	 void                      PlaySoundKilled ( struct FString strSound, bool bExceptOwner );		//  Engine.PlayerController.PlaySoundKilled
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* Other );		//  Engine.PlayerController.NotifyKilled
	 void                      ClientSetViewTargetDied ( class AActor* Killer, class UObject* OptionalObject );		//  Engine.PlayerController.ClientSetViewTargetDied
	 void                      execHCheck (  );                                  		// [ FUNC_Exec ] Engine.PlayerController.HCheck
	 void                      execAir (  );                                     		// [ FUNC_Exec ] Engine.PlayerController.Air
	 void                      execDLog ( bool bEnable );                        		// [ FUNC_Exec ] Engine.PlayerController.DLog
	 void                      SelectQSlot ( int iIndex );                       		// [ FUNC_Simulated ] Engine.PlayerController.SelectQSlot
	 void                      ClientSetGRITimes ( int RemainingTime, int ElapsedTime, int RemainingMinute );		//  Engine.PlayerController.ClientSetGRITimes
	 void                      ClientSelectQSlot ( int iIndex );                 		//  Engine.PlayerController.ClientSelectQSlot
	 void                      ForceChangeQSlotIndex ( int iIndex );             		//  Engine.PlayerController.ForceChangeQSlotIndex
	 void                      ServerSelectQSlot ( int iIndex );                 		//  Engine.PlayerController.ServerSelectQSlot
	 void                      ServerWarp (  );                                  		//  Engine.PlayerController.ServerWarp
	 void                      execgggb (  );                                    		// [ FUNC_Exec ] Engine.PlayerController.gggb
	 void                      execggga (  );                                    		// [ FUNC_Exec ] Engine.PlayerController.ggga
	 void                      ServerCallAirStrike ( class AController* Caller );		//  Engine.PlayerController.ServerCallAirStrike
	 void                      ServerCallHelicopter ( class APawn* lastHeliPawn, class AController* Caller );		//  Engine.PlayerController.ServerCallHelicopter
	 void                      ShowResultMenu (  );                              		// [ FUNC_Simulated ] Engine.PlayerController.ShowResultMenu
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  Engine.PlayerController.DisplayDebug
	 void                      execShowVoteMenu (  );                            		// [ FUNC_Exec ] Engine.PlayerController.ShowVoteMenu
	 void                      eventLostChild ( class AActor* Other );           		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.LostChild
	 void                      eventGainedChild ( class AActor* Other );         		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.GainedChild
	 void                      ServerChatRestriction ( int PlayerID, unsigned char Type );		//  Engine.PlayerController.ServerChatRestriction
	 void                      ServerRequestBanInfo ( int PlayerID );            		//  Engine.PlayerController.ServerRequestBanInfo
	 void                      ServerChatDebug (  );                             		//  Engine.PlayerController.ServerChatDebug
	 void                      execChatDebug (  );                               		// [ FUNC_Exec ] Engine.PlayerController.ChatDebug
	 void                      ClientSetActiveRoom ( int ChannelIndex );         		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetActiveRoom
	 void                      ServerChangeVoiceChatMode ( bool bEnable );       		//  Engine.PlayerController.ServerChangeVoiceChatMode
	 void                      ServerSetChatPassword ( struct FString NewPassword );		//  Engine.PlayerController.ServerSetChatPassword
	 void                      ServerSpeak ( int ChannelIndex, struct FString ChannelPassword );		//  Engine.PlayerController.ServerSpeak
	 void                      ServerLeaveVoiceChannel ( int ChannelIndex );     		//  Engine.PlayerController.ServerLeaveVoiceChannel
	 unsigned char             ServerJoinVoiceChannel ( int ChannelIndex, struct FString ChannelPassword );		//  Engine.PlayerController.ServerJoinVoiceChannel
	 struct FString            FindChannelPassword ( struct FString ChannelName );		// [ FUNC_Simulated ] Engine.PlayerController.FindChannelPassword
	 void                      SetChannelPassword ( struct FString ChannelName, struct FString ChannelPassword );		// [ FUNC_Simulated ] Engine.PlayerController.SetChannelPassword
	 bool                      ChatBan ( int PlayerID, unsigned char Type );     		// [ FUNC_Simulated ] Engine.PlayerController.ChatBan
	 void                      ChangeVoiceChatMode ( bool bEnable );             		// [ FUNC_Simulated ] Engine.PlayerController.ChangeVoiceChatMode
	 void                      AutoJoinVoiceChat (  );                           		// [ FUNC_Simulated ] Engine.PlayerController.AutoJoinVoiceChat
	 struct FString            GetDefaultActiveChannel (  );                     		// [ FUNC_Simulated ] Engine.PlayerController.GetDefaultActiveChannel
	 void                      InitPrivateChatRoom (  );                         		//  Engine.PlayerController.InitPrivateChatRoom
	 void                      InitializeVoiceChat (  );                         		// [ FUNC_Simulated ] Engine.PlayerController.InitializeVoiceChat
	 void                      execDisableVoiceChat (  );                        		// [ FUNC_Exec ] Engine.PlayerController.DisableVoiceChat
	 void                      execEnableVoiceChat (  );                         		// [ FUNC_Exec ] Engine.PlayerController.EnableVoiceChat
	 void                      execSetChatPassword ( struct FString NewPassword );		// [ FUNC_Exec ] Engine.PlayerController.SetChatPassword
	 void                      execSpeakLast (  );                               		// [ FUNC_Exec ] Engine.PlayerController.SpeakLast
	 void                      execSpeakDefault (  );                            		// [ FUNC_Exec ] Engine.PlayerController.SpeakDefault
	 void                      execSpeak ( struct FString ChannelTitle );        		// [ FUNC_Exec ] Engine.PlayerController.Speak
	 void                      execLeave ( struct FString ChannelTitle );        		// [ FUNC_Exec ] Engine.PlayerController.Leave
	 void                      execJoin ( struct FString ChanName, struct FString ChanPwd );		// [ FUNC_Exec ] Engine.PlayerController.Join
	 void                      ServerVoiceCommand ( struct FString RecognizedString );		//  Engine.PlayerController.ServerVoiceCommand
	 void                      execCommand ( struct FString RecognizedString );  		// [ FUNC_Exec ] Engine.PlayerController.Command
	 void                      eventVoiceCommand ( struct FString RecognizedString, struct FString RawString );		// [ FUNC_Event ] Engine.PlayerController.VoiceCommand
	 bool                      NeedNetNotify (  );                               		// [ FUNC_Simulated ] Engine.PlayerController.NeedNetNotify
	 void                      SetCustomRewardAnnouncerClass ( struct FString NewAnnouncerClass );		// [ FUNC_Simulated ] Engine.PlayerController.SetCustomRewardAnnouncerClass
	 void                      SetCustomStatusAnnouncerClass ( struct FString NewAnnouncerClass );		// [ FUNC_Simulated ] Engine.PlayerController.SetCustomStatusAnnouncerClass
	 struct FString            GetCustomRewardAnnouncerClass (  );               		// [ FUNC_Simulated ] Engine.PlayerController.GetCustomRewardAnnouncerClass
	 struct FString            GetCustomStatusAnnouncerClass (  );               		// [ FUNC_Simulated ] Engine.PlayerController.GetCustomStatusAnnouncerClass
	 void                      DemoClientSetHUD ( class UClass* newHUDClass, class UClass* newScoringClass );		// [ FUNC_Simulated ] Engine.PlayerController.DemoClientSetHUD
	 void                      ServerSetClientDemo (  );                         		//  Engine.PlayerController.ServerSetClientDemo
	 void                      eventStartClientDemoRec (  );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.StartClientDemoRec
	 void                      execAdminGUI (  );                                		// [ FUNC_Exec ] Engine.PlayerController.AdminGUI
	 void                      execAdminLogout (  );                             		// [ FUNC_Exec ] Engine.PlayerController.AdminLogout
	 void                      AdminReply ( struct FString Reply );              		//  Engine.PlayerController.AdminReply
	 void                      ReportAdmin ( struct FString ReportText );        		//  Engine.PlayerController.ReportAdmin
	 void                      AdminCommand ( struct FString CommandLine );      		//  Engine.PlayerController.AdminCommand
	 void                      ServerAdminLogin ( struct FString CmdLine );      		//  Engine.PlayerController.ServerAdminLogin
	 void                      execAdminLogin ( struct FString CmdLine );        		// [ FUNC_Exec ] Engine.PlayerController.AdminLogin
	 void                      execAdminDebug ( struct FString CommandLine );    		// [ FUNC_Exec ] Engine.PlayerController.AdminDebug
	 void                      execAdmin ( struct FString CommandLine );         		// [ FUNC_Exec ] Engine.PlayerController.Admin
	 bool                      CanRestartPlayer (  );                            		//  Engine.PlayerController.CanRestartPlayer
	 void                      execInvertLook (  );                              		// [ FUNC_Exec ] Engine.PlayerController.InvertLook
	 void                      UseAdvCamShake ( bool bUse );                     		// [ FUNC_Simulated ] Engine.PlayerController.UseAdvCamShake
	 void                      UseStanceToggle ( bool bUse );                    		// [ FUNC_Simulated ] Engine.PlayerController.UseStanceToggle
	 void                      UseMouseRevision ( bool bUse );                   		// [ FUNC_Simulated ] Engine.PlayerController.UseMouseRevision
	 void                      execInvertMouse ( struct FString Invert );        		// [ FUNC_Exec ] Engine.PlayerController.InvertMouse
	 bool                      IsMouseInverted (  );                             		// [ FUNC_Simulated ] Engine.PlayerController.IsMouseInverted
	 void                      eventClientNetworkMessage ( struct FString ParamA, struct FString ParamB );		// [ FUNC_Event ] Engine.PlayerController.ClientNetworkMessage
	 void                      eventClientCloseMenu ( bool bCloseAll, bool bCancel );		// [ FUNC_Event ] Engine.PlayerController.ClientCloseMenu
	 void                      eventClientReplaceMenu ( struct FString Menu, bool bDisconnect, struct FString Msg1, struct FString Msg2 );		// [ FUNC_Event ] Engine.PlayerController.ClientReplaceMenu
	 void                      eventClientOpenMenu ( struct FString Menu, bool bDisconnect, struct FString Msg1, struct FString Msg2 );		// [ FUNC_Event ] Engine.PlayerController.ClientOpenMenu
	 void                      eventUnPressButtons (  );                         		// [ FUNC_Event ] Engine.PlayerController.UnPressButtons
	 void                      ChangeAlwaysMouseLook ( bool B );                 		//  Engine.PlayerController.ChangeAlwaysMouseLook
	 void                      ChangeStairLook ( bool B );                       		//  Engine.PlayerController.ChangeStairLook
	 void                      StopPawnsAndControllers (  );                     		// [ FUNC_Simulated ] Engine.PlayerController.StopPawnsAndControllers
	 void                      ClientFadeToColor (  );                           		//  Engine.PlayerController.ClientFadeToColor
	 void                      ClientFadeToBlackWhite2 (  );                     		//  Engine.PlayerController.ClientFadeToBlackWhite2
	 void                      ClientFadeToBlackWhite (  );                      		//  Engine.PlayerController.ClientFadeToBlackWhite
	 void                      ClientOnEndIntervented (  );                      		// [ FUNC_Simulated ] Engine.PlayerController.ClientOnEndIntervented
	 void                      ClientOnBeginIntervented (  );                    		// [ FUNC_Simulated ] Engine.PlayerController.ClientOnBeginIntervented
	 void                      ClientOnBeginRound (  );                          		// [ FUNC_Simulated ] Engine.PlayerController.ClientOnBeginRound
	 void                      ClientOnEndWaitingForStart (  );                  		// [ FUNC_Simulated ] Engine.PlayerController.ClientOnEndWaitingForStart
	 void                      ClientOnBeginWaitingForStart (  );                		// [ FUNC_Simulated ] Engine.PlayerController.ClientOnBeginWaitingForStart
	 void                      eventGotoDefaultState (  );                       		// [ FUNC_Event ] Engine.PlayerController.GotoDefaultState
	 void                      TryServerViewNextPlayer ( bool cannotPickSelf, bool IsBack, int ViewStyle );		//  Engine.PlayerController.TryServerViewNextPlayer
	 bool                      IsSpecialMode_Grenade ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_Grenade
	 bool                      IsSpecialMode_Pistol ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_Pistol
	 bool                      IsSpecialMode_MG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_MG
	 bool                      IsSpecialMode_SG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_SG
	 bool                      IsSpecialMode_FlameThrower ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_FlameThrower
	 bool                      IsSpecialMode_TEST ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_TEST
	 bool                      IsSpecialMode_Hold_Weapon ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_Hold_Weapon
	 bool                      IsSpecialMode_Knife ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_Knife
	 bool                      IsSpecialMode_SR ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_SR
	 bool                      IsSpecialMode_RPG ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType );		//  Engine.PlayerController.IsSpecialMode_RPG
	 bool                      IsPermitSpecialMode ( bool bLimitInvenGroup, int InvenGroup, unsigned char QWeaponType, int KeyF );		//  Engine.PlayerController.IsPermitSpecialMode
	 void                      ProcessSelectQuickSlot ( int iIndex );            		//  Engine.PlayerController.ProcessSelectQuickSlot
	 void                      SelectQuickSlot ( int iIndex );                   		//  Engine.PlayerController.SelectQuickSlot
	 void                      ClientBecameActivePlayer (  );                    		//  Engine.PlayerController.ClientBecameActivePlayer
	 void                      BecomeActivePlayer (  );                          		//  Engine.PlayerController.BecomeActivePlayer
	 void                      ClientBecameSpectator (  );                       		//  Engine.PlayerController.ClientBecameSpectator
	 void                      BecomeSpectator (  );                             		//  Engine.PlayerController.BecomeSpectator
	 void                      ServerSpectate ( bool cannotPickSelf );           		//  Engine.PlayerController.ServerSpectate
	 void                      LoadPlayers (  );                                 		//  Engine.PlayerController.LoadPlayers
	 void                      ServerViewSelf (  );                              		//  Engine.PlayerController.ServerViewSelf
	 void                      FindLostSpectators (  );                          		//  Engine.PlayerController.FindLostSpectators
	 void                      ServerViewNextPlayer ( bool cannotPickSelf, bool IsPrevious, int ViewStyle );		//  Engine.PlayerController.ServerViewNextPlayer
	 bool                      IsSpectating (  );                                		//  Engine.PlayerController.IsSpectating
	 void                      FixedVelocity ( float DeltaTime );                		//  Engine.PlayerController.FixedVelocity
	 void                      FixedSprintState (  );                            		//  Engine.PlayerController.FixedSprintState
	 void                      SetDodging ( bool Enabled );                      		// [ FUNC_Simulated ] Engine.PlayerController.SetDodging
	 bool                      DodgingIsEnabled (  );                            		// [ FUNC_Simulated ] Engine.PlayerController.DodgingIsEnabled
	 void                      ClearDoubleClick (  );                            		//  Engine.PlayerController.ClearDoubleClick
	 void                      UpdateRotation ( float DeltaTime, float maxPitch );		//  Engine.PlayerController.UpdateRotation
	 void                      TurnAround (  );                                  		//  Engine.PlayerController.TurnAround
	 bool                      TurnTowardNearestEnemy (  );                      		//  Engine.PlayerController.TurnTowardNearestEnemy
	 void                      SetViewValue (  );                                		//  Engine.PlayerController.SetViewValue
	 void                      ServerSetViewValue ( int iShake, int iShock, int iBreath );		//  Engine.PlayerController.ServerSetViewValue
	 void                      wViewBreath (  );                                 		//  Engine.PlayerController.wViewBreath
	 void                      ServerSetwBreathRotation ( int iBreath );         		//  Engine.PlayerController.ServerSetwBreathRotation
	 void                      wViewShock ( float fDeltaTime );                  		//  Engine.PlayerController.wViewShock
	 void                      ServerSetwShockRotation ( int iShock );           		//  Engine.PlayerController.ServerSetwShockRotation
	 void                      SetShakeState ( unsigned char EShakeState );      		//  Engine.PlayerController.SetShakeState
	 void                      wViewShake ( float DeltaTime );                   		//  Engine.PlayerController.wViewShake
	 struct FVector            ReCalDecayVelocity (  );                          		//  Engine.PlayerController.ReCalDecayVelocity
	 void                      wViewAttacked ( float DeltaTime );                		//  Engine.PlayerController.wViewAttacked
	 float                     GetFovSpeed (  );                                 		//  Engine.PlayerController.GetFovSpeed
	 void                      ServerSetwShakeRotation ( int iShake );           		//  Engine.PlayerController.ServerSetwShakeRotation
	 void                      ViewShake ( float DeltaTime );                    		//  Engine.PlayerController.ViewShake
	 void                      ServerSetShakeRotation ( struct FRotator OrgShakeRot );		// [ FUNC_Simulated ] Engine.PlayerController.ServerSetShakeRotation
	 void                      UpdateShakeRotComponent ( float dt, bool bHigher, float* Max, int* Current, float* Rate, float* Time );		//  Engine.PlayerController.UpdateShakeRotComponent
	 void                      CheckShake ( float dt, bool bHigher, float* MaxOffset, float* offset, float* Rate, float* Time );		//  Engine.PlayerController.CheckShake
	 int                       BlendRot ( float DeltaTime, int BlendC, int NewC );		//  Engine.PlayerController.BlendRot
	 void                      eventPlayerCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Event ] Engine.PlayerController.PlayerCalcView
	 void                      DummyRotation ( struct FRotator NewRotation );    		//  Engine.PlayerController.DummyRotation
	 void                      CacheCalcView ( class AActor* ViewActor, struct FVector CameraLocation, struct FRotator CameraRotation );		//  Engine.PlayerController.CacheCalcView
	 struct FRotator           GetViewRotation (  );                             		// [ FUNC_Simulated ] Engine.PlayerController.GetViewRotation
	 void                      execRemoveAllPostProcessEffects (  );             		// [ FUNC_Exec ] Engine.PlayerController.RemoveAllPostProcessEffects
	 void                      AdditionalPPEffectsOff (  );                      		//  Engine.PlayerController.AdditionalPPEffectsOff
	 void                      execSSAO ( bool B );                              		// [ FUNC_Exec ] Engine.PlayerController.SSAO
	 bool                      execFadeToBlackWhite ( float f_Fade_Time );       		// [ FUNC_Exec ] Engine.PlayerController.FadeToBlackWhite
	 bool                      execFadeToColor ( float f_Fade_Time );            		// [ FUNC_Exec ] Engine.PlayerController.FadeToColor
	 void                      execPPEffectOff ( struct FName PP_EffectClass );  		// [ FUNC_Exec ] Engine.PlayerController.PPEffectOff
	 void                      execPPEffectOn ( struct FName PP_EffectClass );   		// [ FUNC_Exec ] Engine.PlayerController.PPEffectOn
	 void                      execCP ( class UClass* PP_EffectClass );          		// [ FUNC_Exec ] Engine.PlayerController.CP
	 void                      execCreatePostProcessEffect ( class UClass* PP_EffectClass );		// [ FUNC_Exec ] Engine.PlayerController.CreatePostProcessEffect
	 void                      eventRemovePostProcessEffect ( class UPostProcessEffect* PP_ExEffect );		// [ FUNC_Event ] Engine.PlayerController.RemovePostProcessEffect
	 void                      eventAddPostProcessEffect ( class UPostProcessEffect* PP_NewEffect, bool PP_RemoveExisting );		// [ FUNC_Event ] Engine.PlayerController.AddPostProcessEffect
	 void                      execRemoveAllCameraEffects (  );                  		// [ FUNC_Exec ] Engine.PlayerController.RemoveAllCameraEffects
	 void                      execCreateCameraEffect ( class UClass* EffectClass );		// [ FUNC_Exec ] Engine.PlayerController.CreateCameraEffect
	 void                      eventRemoveCameraEffect ( class UCameraEffect* ExEffect );		// [ FUNC_Event ] Engine.PlayerController.RemoveCameraEffect
	 void                      eventAddCameraEffect ( class UCameraEffect* NewEffect, bool RemoveExisting );		// [ FUNC_Event ] Engine.PlayerController.AddCameraEffect
	 void                      RotateByAttacked ( struct FVector* CameraLocation, struct FRotator* CameraRotation );		//  Engine.PlayerController.RotateByAttacked
	 void                      CalcFirstPersonView ( struct FVector* CameraLocation, struct FRotator* CameraRotation );		//  Engine.PlayerController.CalcFirstPersonView
	 void                      CalcBehindView ( float dist, bool bDiedSelf, struct FRotator killerRot, struct FVector* CameraLocation, struct FRotator* CameraRotation );		//  Engine.PlayerController.CalcBehindView
	 void                      eventAdjustView ( float DeltaTime );              		// [ FUNC_Event ] Engine.PlayerController.AdjustView
	 bool                      NotifyLanded ( struct FVector HitNormal );        		//  Engine.PlayerController.NotifyLanded
	 struct FRotator           AdjustAim ( struct FFireProperties FiredAmmunition, struct FVector projStart, int AimError );		//  Engine.PlayerController.AdjustAim
	 void                      TestMeleeAttackMode ( bool bMelee );              		//  Engine.PlayerController.TestMeleeAttackMode
	 void                      SetAimMode ( bool bAim );                         		//  Engine.PlayerController.SetAimMode
	 void                      ServerToggleAimMode ( bool bToggle );             		// [ FUNC_Simulated ] Engine.PlayerController.ServerToggleAimMode
	 void                      ClientToggleAimMode ( bool bToggle );             		// [ FUNC_Simulated ] Engine.PlayerController.ClientToggleAimMode
	 void                      PlayerMove ( float DeltaTime );                   		//  Engine.PlayerController.PlayerMove
	 bool                      IsBehindView (  );                                		//  Engine.PlayerController.IsBehindView
	 void                      SendPingInGame ( float DeltaTime );               		// [ FUNC_Simulated ] Engine.PlayerController.SendPingInGame
	 void                      ServerSetDClickMove (  );                         		//  Engine.PlayerController.ServerSetDClickMove
	 void                      DoPosture_CHINA (  );                             		//  Engine.PlayerController.DoPosture_CHINA
	 void                      DoPosture_KR (  );                                		//  Engine.PlayerController.DoPosture_KR
	 void                      DoPosture (  );                                   		//  Engine.PlayerController.DoPosture
	 void                      TickInput ( float DeltaTime );                    		// [ FUNC_Simulated ] Engine.PlayerController.TickInput
	 void                      CheckPerformence ( float DeltaTime );             		// [ FUNC_Simulated ] Engine.PlayerController.CheckPerformence
	 void                      eventPlayerTick ( float DeltaTime );              		// [ FUNC_Event ] Engine.PlayerController.PlayerTick
	 void                      eventTravelPostAccept (  );                       		// [ FUNC_Event ] Engine.PlayerController.TravelPostAccept
	 void                      ChangedWeapon (  );                               		//  Engine.PlayerController.ChangedWeapon
	 void                      ServerToggleBehindView (  );                      		//  Engine.PlayerController.ServerToggleBehindView
	 void                      execToggleBehindView (  );                        		// [ FUNC_Exec ] Engine.PlayerController.ToggleBehindView
	 void                      execBehindView ( bool B );                        		// [ FUNC_Exec ] Engine.PlayerController.BehindView
	 void                      ClientReStart ( class APawn* NewPawn );           		//  Engine.PlayerController.ClientReStart
	 void                      EnterStartState (  );                             		//  Engine.PlayerController.EnterStartState
	 void                      Restart (  );                                     		//  Engine.PlayerController.Restart
	 void                      eventSetProgressTime ( float t );                 		// [ FUNC_Exec | FUNC_Event ] Engine.PlayerController.SetProgressTime
	 void                      eventSetProgressMessage ( int Index, struct FString S, class FColor C );		// [ FUNC_Exec | FUNC_Event ] Engine.PlayerController.SetProgressMessage
	 void                      execClearProgressMessages (  );                   		// [ FUNC_Exec ] Engine.PlayerController.ClearProgressMessages
	 void                      eventProgressCommand ( struct FString Cmd, struct FString Msg1, struct FString Msg2 );		// [ FUNC_Event ] Engine.PlayerController.ProgressCommand
	 void                      execSwitchLevel ( struct FString URL );           		// [ FUNC_Exec ] Engine.PlayerController.SwitchLevel
	 void                      ServerChangeTeam3 ( int N );                      		//  Engine.PlayerController.ServerChangeTeam3
	 void                      ServerChangeTeam ( int N );                       		//  Engine.PlayerController.ServerChangeTeam
	 void                      execChangeTeam ( int N );                         		// [ FUNC_Exec ] Engine.PlayerController.ChangeTeam
	 void                      execSwitchTeam3 (  );                             		// [ FUNC_Exec ] Engine.PlayerController.SwitchTeam3
	 void                      execSwitchTeam (  );                              		// [ FUNC_Exec ] Engine.PlayerController.SwitchTeam
	 void                      ChangeName ( struct FString S );                  		//  Engine.PlayerController.ChangeName
	 void                      ChangeVoiceType ( struct FString NewVoiceType );  		//  Engine.PlayerController.ChangeVoiceType
	 void                      execSetVoice ( struct FString S );                		// [ FUNC_Exec ] Engine.PlayerController.SetVoice
	 void                      execSetName ( struct FString S );                 		// [ FUNC_Exec ] Engine.PlayerController.SetName
	 void                      execSuicide (  );                                 		// [ FUNC_Exec ] Engine.PlayerController.Suicide
	 bool                      ServerUse (  );                                   		//  Engine.PlayerController.ServerUse
	 void                      execUse (  );                                     		// [ FUNC_Exec ] Engine.PlayerController.Use
	 void                      execAltFire ( float f );                          		// [ FUNC_Exec ] Engine.PlayerController.AltFire
	 void                      execFire ( float f );                             		// [ FUNC_Exec ] Engine.PlayerController.Fire
	 void                      execActivateItem (  );                            		// [ FUNC_Exec ] Engine.PlayerController.ActivateItem
	 void                      execPrevItem (  );                                		// [ FUNC_Exec ] Engine.PlayerController.PrevItem
	 bool                      IsSpecialGrenade ( class AwWeapon* kWeapon );     		//  Engine.PlayerController.IsSpecialGrenade
	 bool                      IsFragGrenade ( class AwWeapon* kWeapon );        		//  Engine.PlayerController.IsFragGrenade
	 class AwWeapon*           GetWeaponByWeaponType ( unsigned char nWeaponType, class AInventory* SkipWeapon );		// [ FUNC_Simulated ] Engine.PlayerController.GetWeaponByWeaponType
	 class AwWeapon*           GetWeaponByInventoryGroup ( unsigned char f, class AInventory* SkipWeapon );		// [ FUNC_Simulated ] Engine.PlayerController.GetWeaponByInventoryGroup
	 class AwWeapon*           GetWeaponByID ( int iWeaponID, class AInventory* SkipWeapon );		// [ FUNC_Simulated ] Engine.PlayerController.GetWeaponByID
	 void                      execGetWeapon ( class UClass* NewWeaponClass );   		// [ FUNC_Exec ] Engine.PlayerController.GetWeapon
	 void                      execThrowsTheWeapon (  );                         		// [ FUNC_Exec ] Engine.PlayerController.ThrowsTheWeapon
	 void                      execSwitchWeapon ( unsigned char f, bool bQuickGr );		// [ FUNC_Exec ] Engine.PlayerController.SwitchWeapon
	 void                      execPipedSwitchWeapon ( unsigned char f );        		// [ FUNC_Exec ] Engine.PlayerController.PipedSwitchWeapon
	 void                      execNextWeapon (  );                              		// [ FUNC_Exec ] Engine.PlayerController.NextWeapon
	 void                      execPrevWeapon (  );                              		// [ FUNC_Exec ] Engine.PlayerController.PrevWeapon
	 void                      ServerThrowWeapon (  );                           		//  Engine.PlayerController.ServerThrowWeapon
	 void                      execThrowWeapon (  );                             		// [ FUNC_Exec ] Engine.PlayerController.ThrowWeapon
	 void                      execActivateInventoryItem ( class UClass* InvItem );		// [ FUNC_Exec ] Engine.PlayerController.ActivateInventoryItem
	 void                      ShowMidGameMenu ( bool bPause );                  		//  Engine.PlayerController.ShowMidGameMenu
	 void                      execShowMenu (  );                                		// [ FUNC_Exec ] Engine.PlayerController.ShowMenu
	 void                      ServerPause (  );                                 		//  Engine.PlayerController.ServerPause
	 void                      execPause (  );                                   		// [ FUNC_Exec ] Engine.PlayerController.Pause
	 bool                      SetPause ( bool bPause );                         		//  Engine.PlayerController.SetPause
	 void                      execQuickLoad (  );                               		// [ FUNC_Exec ] Engine.PlayerController.QuickLoad
	 void                      execQuickSave (  );                               		// [ FUNC_Exec ] Engine.PlayerController.QuickSave
	 void                      execLocalTravel ( struct FString URL );           		// [ FUNC_Exec ] Engine.PlayerController.LocalTravel
	 void                      execRestartLevel (  );                            		// [ FUNC_Exec ] Engine.PlayerController.RestartLevel
	 void                      ServerSpeech ( struct FName Type, int Index, struct FString Callsign );		//  Engine.PlayerController.ServerSpeech
	 void                      execSpeech ( struct FName Type, int Index, struct FString Callsign );		// [ FUNC_Exec ] Engine.PlayerController.Speech
	 void                      DoProneBtn ( unsigned char byDown );              		//  Engine.PlayerController.DoProneBtn
	 void                      DoDuckBtn ( unsigned char byDown );               		//  Engine.PlayerController.DoDuckBtn
	 void                      DoDuckBtn_New ( unsigned char byDown );           		//  Engine.PlayerController.DoDuckBtn_New
	 void                      DoProne (  );                                     		//  Engine.PlayerController.DoProne
	 void                      DoDuck (  );                                      		//  Engine.PlayerController.DoDuck
	 void                      execJump ( float f );                             		// [ FUNC_Exec ] Engine.PlayerController.Jump
	 void                      Typing ( bool bTyping );                          		//  Engine.PlayerController.Typing
	 void                      damageAttitudeTo ( class APawn* Other, float Damage );		//  Engine.PlayerController.damageAttitudeTo
	 void                      eventShakeViewEvent ( struct FVector shRotMag, struct FVector shRotRate, float shRotTime, struct FVector shOffsetMag, struct FVector shOffsetRate, float shOffsetTime );		// [ FUNC_Event ] Engine.PlayerController.ShakeViewEvent
	 void                      eventSetAmbientShake ( float FalloffStartTime, float FalloffTime, struct FVector OffsetMag, float OffsetFreq, struct FRotator RotMag, float RotFreq );		// [ FUNC_Event ] Engine.PlayerController.SetAmbientShake
	 void                      StopViewShaking (  );                             		//  Engine.PlayerController.StopViewShaking
	 void                      wShakeView ( int iPitch, int iYaw, float fSpeed, float fDecel, float fStayTime, float fDecay, float fDecayFastTime );		//  Engine.PlayerController.wShakeView
	 void                      wShockView ( float fForce );                      		//  Engine.PlayerController.wShockView
	 void                      wBreathView ( struct FRotator rBreath );          		//  Engine.PlayerController.wBreathView
	 void                      ShakeView ( struct FVector shRotMag, struct FVector shRotRate, float shRotTime, struct FVector shOffsetMag, struct FVector shOffsetRate, float shOffsetTime );		//  Engine.PlayerController.ShakeView
	 void                      ClientDamageShake ( int Damage );                 		//  Engine.PlayerController.ClientDamageShake
	 void                      CientSetHitSprintDelay (  );                      		//  Engine.PlayerController.CientSetHitSprintDelay
	 void                      DamageShake ( int Damage );                       		//  Engine.PlayerController.DamageShake
	 void                      ClientAdjustGlow ( float Scale, struct FVector fog );		//  Engine.PlayerController.ClientAdjustGlow
	 void                      ClientFlash ( float Scale, struct FVector fog );  		//  Engine.PlayerController.ClientFlash
	 void                      execSetFlashScaling ( float f );                  		// [ FUNC_Exec ] Engine.PlayerController.SetFlashScaling
	 void                      SetFOVAngle ( float NewFOV );                     		//  Engine.PlayerController.SetFOVAngle
	 void                      ServerRestartGame (  );                           		//  Engine.PlayerController.ServerRestartGame
	 void                      CallServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPendingJumpStatus, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel );		//  Engine.PlayerController.CallServerMove
	 void                      ReplicateMove ( float DeltaTime, struct FVector NewAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );		//  Engine.PlayerController.ReplicateMove
	 int                       CompressAccel ( int C );                          		//  Engine.PlayerController.CompressAccel
	 class ASavedMove*         GetFreeMove (  );                                 		// [ FUNC_Final ] Engine.PlayerController.GetFreeMove
	 void                      ClientUpdatePosition (  );                        		//  Engine.PlayerController.ClientUpdatePosition
	 void                      ServerUpdatePing ( int NewPing );                 		//  Engine.PlayerController.ServerUpdatePing
	 void                      LongClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase, float NewFloorX, float NewFloorY, float NewFloorZ );		//  Engine.PlayerController.LongClientAdjustPosition
	 void                      ClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, float NewVelX, float NewVelY, float NewVelZ, class AActor* NewBase );		//  Engine.PlayerController.ClientAdjustPosition
	 void                      ShortClientAdjustPosition ( float TimeStamp, struct FName NewState, unsigned char newPhysics, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );		//  Engine.PlayerController.ShortClientAdjustPosition
	 void                      VeryShortClientAdjustPosition ( float TimeStamp, float NewLocX, float NewLocY, float NewLocZ, class AActor* NewBase );		//  Engine.PlayerController.VeryShortClientAdjustPosition
	 void                      eventMoveAutonomous ( float DeltaTime, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbPressedJump, bool NewbDoubleJump, unsigned char DoubleClickMove, struct FVector NewAccel, struct FRotator DeltaRot );		// [ FUNC_Final | FUNC_Event ] Engine.PlayerController.MoveAutonomous
	 void                      ProcessMove ( float DeltaTime, struct FVector NewAccel, unsigned char DoubleClickMove, struct FRotator DeltaRot );		//  Engine.PlayerController.ProcessMove
	 void                      ProcessDrive ( float InForward, float InStrafe, float InUp, bool InJump );		//  Engine.PlayerController.ProcessDrive
	 void                      ServerDrive ( float InForward, float InStrafe, float aUp, bool InJump, int View );		//  Engine.PlayerController.ServerDrive
	 void                      eventSendClientAdjustment (  );                   		// [ FUNC_Event ] Engine.PlayerController.SendClientAdjustment
	 void                      ServerMoveScript ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel );		//  Engine.PlayerController.ServerMoveScript
	 void                      ServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel );		//  Engine.PlayerController.ServerMove
	 void                      ServerMoveNative ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, bool NewbDoubleJump, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel );		// [ FUNC_Native ] Engine.PlayerController.ServerMoveNative
	 void                      DualServerMove ( float TimeStamp0, struct FVector InAccel0, unsigned char PendingCompress, unsigned char DoubleClickMove0, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, unsigned char DoubleClickMove, unsigned char ClientRoll, int View, unsigned char OldTimeDelta, int OldAccel );		//  Engine.PlayerController.DualServerMove
	 void                      ShortServerMove ( float TimeStamp, struct FVector ClientLoc, bool NewbRun, bool NewbDuck, bool NewbProne, bool NewbJumpStatus, unsigned char ClientRoll, int View );		//  Engine.PlayerController.ShortServerMove
	 void                      DualTurretServerMove ( float TimeStamp0, bool NewbDuck0, bool NewbProne0, unsigned char ClientRoll0, int View0, float TimeStamp, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View );		//  Engine.PlayerController.DualTurretServerMove
	 void                      TurretServerMove ( float TimeStamp, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View );		//  Engine.PlayerController.TurretServerMove
	 void                      DualSpaceFighterServerMove ( float TimeStamp0, struct FVector InAccel0, bool NewbDuck0, bool NewbProne0, int ViewPitch0, int ViewYaw0, int ViewRoll0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll );		//  Engine.PlayerController.DualSpaceFighterServerMove
	 void                      SpaceFighterServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, int ViewPitch, int ViewYaw, int ViewRoll );		//  Engine.PlayerController.SpaceFighterServerMove
	 void                      DualRocketServerMove ( float TimeStamp0, struct FVector InAccel0, bool NewbDuck0, bool NewbProne0, unsigned char ClientRoll0, int View0, float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View );		//  Engine.PlayerController.DualRocketServerMove
	 void                      RocketServerMove ( float TimeStamp, struct FVector InAccel, struct FVector ClientLoc, bool NewbDuck, bool NewbProne, unsigned char ClientRoll, int View );		//  Engine.PlayerController.RocketServerMove
	 void                      ForceDeathUpdate (  );                            		//  Engine.PlayerController.ForceDeathUpdate
	 void                      ClientVoiceMessage ( class APlayerReplicationInfo* Sender, class APlayerReplicationInfo* Recipient, struct FName MessageType, unsigned char MessageID );		//  Engine.PlayerController.ClientVoiceMessage
	 void                      ClientSetBehindView ( bool B );                   		//  Engine.PlayerController.ClientSetBehindView
	 void                      ClientSetFixedCamera ( bool B );                  		//  Engine.PlayerController.ClientSetFixedCamera
	 void                      eventPreClientTravel (  );                        		// [ FUNC_Event ] Engine.PlayerController.PreClientTravel
	 void                      execShowGun (  );                                 		// [ FUNC_Exec ] Engine.PlayerController.ShowGun
	 bool                      IsDead (  );                                      		//  Engine.PlayerController.IsDead
	 void                      execSetWeaponHand ( struct FString S );           		// [ FUNC_Exec ] Engine.PlayerController.SetWeaponHand
	 void                      SetHand ( int IntValue );                         		//  Engine.PlayerController.SetHand
	 void                      ServerSetHandedness ( float Hand );               		//  Engine.PlayerController.ServerSetHandedness
	 void                      execSetAutoTaunt ( bool Value );                  		// [ FUNC_Exec ] Engine.PlayerController.SetAutoTaunt
	 void                      ServerSetAutoTaunt ( bool Value );                		//  Engine.PlayerController.ServerSetAutoTaunt
	 void                      ServerTeamSay ( struct FString Msg, struct FName Type );		//  Engine.PlayerController.ServerTeamSay
	 void                      execTeamSay ( struct FString Msg, struct FName Type );		// [ FUNC_Exec ] Engine.PlayerController.TeamSay
	 void                      PopMessage ( struct FString Msg, bool sameTeamOnly );		//  Engine.PlayerController.PopMessage
	 void                      ClientPopMessage ( struct FString UserName, struct FString Msg );		//  Engine.PlayerController.ClientPopMessage
	 void                      ServerPopMessage ( struct FString Msg, bool sameTeamOnly );		//  Engine.PlayerController.ServerPopMessage
	 void                      ServerSay ( struct FString Msg, struct FName Type );		//  Engine.PlayerController.ServerSay
	 void                      execSay ( struct FString Msg, struct FName Type );		// [ FUNC_Exec ] Engine.PlayerController.Say
	 bool                      AllowTextMessage ( struct FString Msg );          		//  Engine.PlayerController.AllowTextMessage
	 void                      execForceReload (  );                             		// [ FUNC_Exec ] Engine.PlayerController.ForceReload
	 void                      execSetMouseAccel ( float f );                    		// [ FUNC_Exec ] Engine.PlayerController.SetMouseAccel
	 void                      execSetMouseSmoothing ( int Mode );               		// [ FUNC_Exec ] Engine.PlayerController.SetMouseSmoothing
	 float                     GetSensitivityAim (  );                           		//  Engine.PlayerController.GetSensitivityAim
	 float                     GetSensitivity (  );                              		//  Engine.PlayerController.GetSensitivity
	 float                     GetSensitivityActive (  );                        		//  Engine.PlayerController.GetSensitivityActive
	 void                      execSetSensitivity ( float f, bool bZooming );    		// [ FUNC_Exec ] Engine.PlayerController.SetSensitivity
	 void                      ServerMutate ( struct FString MutateString );     		//  Engine.PlayerController.ServerMutate
	 void                      execMutate ( struct FString MutateString );       		// [ FUNC_Exec ] Engine.PlayerController.Mutate
	 void                      execFOV ( float f );                              		// [ FUNC_Exec ] Engine.PlayerController.FOV
	 void                      execSetAimDiff ( struct FString S );              		// [ FUNC_Exec ] Engine.PlayerController.SetAimDiff
	 void                      ClientResetAim (  );                              		// [ FUNC_Simulated ] Engine.PlayerController.ClientResetAim
	 void                      ResetFOV (  );                                    		//  Engine.PlayerController.ResetFOV
	 void                      SetFOV ( float NewFOV );                          		//  Engine.PlayerController.SetFOV
	 void                      FixFOV (  );                                      		// [ FUNC_Simulated ] Engine.PlayerController.FixFOV
	 void                      EndZoom (  );                                     		//  Engine.PlayerController.EndZoom
	 void                      ZoomFOV ( float fFOV, bool bInstant );            		//  Engine.PlayerController.ZoomFOV
	 void                      ClientSetInitialMusic ( struct FString NewSong, unsigned char NewTransition );		//  Engine.PlayerController.ClientSetInitialMusic
	 void                      ClientSetMusic ( struct FString NewSong, unsigned char NewTransition );		//  Engine.PlayerController.ClientSetMusic
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.Destroyed
	 void                      ClientReliablePlaySound ( class USound* ASound, bool bVolumeControl );		// [ FUNC_Simulated ] Engine.PlayerController.ClientReliablePlaySound
	 void                      ClientQueueAnnouncement ( struct FName ASoundName, unsigned char AnnouncementLevel, unsigned char Priority, unsigned char Switch );		// [ FUNC_Simulated ] Engine.PlayerController.ClientQueueAnnouncement
	 void                      ClientPlaySoundHK ( class USound* ASound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner, struct FVector SoundLocation );		// [ FUNC_Simulated ] Engine.PlayerController.ClientPlaySoundHK
	 bool                      ClientStopLoopSoundByActor ( class AActor* Target );		// [ FUNC_Simulated ] Engine.PlayerController.ClientStopLoopSoundByActor
	 bool                      ClientStopAllSoundByActor ( class AActor* Target );		// [ FUNC_Simulated ] Engine.PlayerController.ClientStopAllSoundByActor
	 void                      ClientPlayVoiceSound ( struct FString strSoundName, bool bVolumeControl, float inAtten, unsigned char Slot );		// [ FUNC_Simulated ] Engine.PlayerController.ClientPlayVoiceSound
	 void                      ClientPlaySound ( class USound* ASound, bool bVolumeControl, float inAtten, unsigned char Slot );		// [ FUNC_Simulated ] Engine.PlayerController.ClientPlaySound
	 void                      ClientChangeSlot6 ( class AwWeapon* W );          		// [ FUNC_Simulated ] Engine.PlayerController.ClientChangeSlot6
	 void                      ClientChangeSlot5 ( class AwWeapon* W, bool bAddSkill );		// [ FUNC_Simulated ] Engine.PlayerController.ClientChangeSlot5
	 bool                      AllowVoiceMessage ( struct FName MessageType );   		//  Engine.PlayerController.AllowVoiceMessage
	 void                      QueueAnnouncement ( struct FString ASoundName, unsigned char AnnouncementLevel, unsigned char Priority, unsigned char Switch );		// [ FUNC_Simulated ] Engine.PlayerController.QueueAnnouncement
	 class USound*             CustomizeAnnouncer ( class USound* AnnouncementSound );		//  Engine.PlayerController.CustomizeAnnouncer
	 void                      PlayAnnouncement ( class USound* ASound, unsigned char AnnouncementLevel, bool bForce );		// [ FUNC_Simulated ] Engine.PlayerController.PlayAnnouncement
	 void                      PlayRewardAnnouncement ( struct FName AName, unsigned char AnnouncementLevel, bool bForce, unsigned char Slot );		// [ FUNC_Simulated ] Engine.PlayerController.PlayRewardAnnouncement
	 void                      PlayStatusAnnouncement ( struct FString AName, unsigned char AnnouncementLevel, bool bForce );		// [ FUNC_Simulated ] Engine.PlayerController.PlayStatusAnnouncement
	 void                      PrecacheAnnouncements (  );                       		// [ FUNC_Simulated ] Engine.PlayerController.PrecacheAnnouncements
	 void                      PlayBeepSound (  );                               		// [ FUNC_Simulated ] Engine.PlayerController.PlayBeepSound
	 void                      eventTeamMessage ( class APlayerReplicationInfo* PRI, struct FString S, struct FName Type );		// [ FUNC_Event ] Engine.PlayerController.TeamMessage
	 bool                      AllowTextToSpeech ( class APlayerReplicationInfo* PRI, struct FName Type );		//  Engine.PlayerController.AllowTextToSpeech
	 void                      eventClientMessage ( struct FString S, struct FName Type );		// [ FUNC_Event ] Engine.PlayerController.ClientMessage
	 void                      eventChatRoomMessage ( int Result, int ChannelIndex, class APlayerReplicationInfo* RelatedPRI );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ChatRoomMessage
	 void                      eventReceiveMessage_QuestType3 ( class UClass* Message, int Switch, int iRDifficult, int iRMap );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ReceiveMessage_QuestType3
	 void                      eventReceiveMessage_QuestType2 ( class UClass* Message, int Switch, int iRMode, int iRMap, int iRMin, int iRSec );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ReceiveMessage_QuestType2
	 void                      eventReceiveMessage_QuestType1 ( class UClass* Message, int Switch, int iRWeaponType, int iRweaponId );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ReceiveMessage_QuestType1
	 void                      eventReceiveLocalizedMessageWithKillerInfo ( class UClass* Message, class AController* Killer, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ReceiveLocalizedMessageWithKillerInfo
	 void                      eventReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ReceiveLocalizedMessage
	 void                      ReceiveLocalizedMessage2 ( class UClass* Message, int Switch, int Reserved1, int Reserved2 );		// [ FUNC_Simulated ] Engine.PlayerController.ReceiveLocalizedMessage2
	 void                      EndFlash (  );                                    		//  Engine.PlayerController.EndFlash
	 void                      ViewFlash ( float DeltaTime );                    		//  Engine.PlayerController.ViewFlash
	 float                     UpdateFlashComponent ( float Current, float Step, float Goal );		// [ FUNC_Final ] Engine.PlayerController.UpdateFlashComponent
	 void                      ClientStopForceFeedback ( struct FString EffectName );		//  Engine.PlayerController.ClientStopForceFeedback
	 void                      StopForceFeedback ( struct FString EffectName );  		// [ FUNC_Simulated ] Engine.PlayerController.StopForceFeedback
	 void                      ClientPlayForceFeedback ( struct FString EffectName );		// [ FUNC_Simulated ] Engine.PlayerController.ClientPlayForceFeedback
	 void                      ClientSetHUD ( class UClass* newHUDClass, class UClass* newScoringClass, class UClass* newResultClass, class UClass* newResultBootyClass );		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetHUD
	 void                      ClientUpdateFlagHolder ( class APlayerReplicationInfo* PRI, int i );		// [ FUNC_Simulated ] Engine.PlayerController.ClientUpdateFlagHolder
	 void                      PawnDied ( class APawn* P );                      		//  Engine.PlayerController.PawnDied
	 void                      ViewNextBot (  );                                 		//  Engine.PlayerController.ViewNextBot
	 void                      UnPossess (  );                                   		//  Engine.PlayerController.UnPossess
	 void                      ServerAcknowledgePossession ( class APawn* P, float NewHand, bool bNewAutoTaunt );		//  Engine.PlayerController.ServerAcknowledgePossession
	 void                      AcknowledgePossession ( class APawn* P );         		//  Engine.PlayerController.AcknowledgePossession
	 void                      Possess ( class APawn* aPawn );                   		//  Engine.PlayerController.Possess
	 int                       GetFacingDirection (  );                          		//  Engine.PlayerController.GetFacingDirection
	 void                      ClientLogPawns (  );                              		//  Engine.PlayerController.ClientLogPawns
	 void                      DoLogPawns (  );                                  		//  Engine.PlayerController.DoLogPawns
	 void                      execEveryLogPawns (  );                           		// [ FUNC_Exec ] Engine.PlayerController.EveryLogPawns
	 void                      execLogPawns (  );                                		// [ FUNC_Exec ] Engine.PlayerController.LogPawns
	 void                      eventGivePawn ( class APawn* NewPawn );           		// [ FUNC_Event ] Engine.PlayerController.GivePawn
	 void                      AskForPawn (  );                                  		//  Engine.PlayerController.AskForPawn
	 void                      ClientGotoState ( struct FName NewState, struct FName NewLabel );		//  Engine.PlayerController.ClientGotoState
	 void                      eventInitInputSystem (  );                        		// [ FUNC_Event ] Engine.PlayerController.InitInputSystem
	 void                      execpreB (  );                                    		// [ FUNC_Exec ] Engine.PlayerController.preB
	 void                      execpreA (  );                                    		// [ FUNC_Exec ] Engine.PlayerController.preA
	 void                      exectests (  );                                   		// [ FUNC_Exec ] Engine.PlayerController.tests
	 void                      CleanOutSavedMoves (  );                          		//  Engine.PlayerController.CleanOutSavedMoves
	 void                      ChatResetInput (  );                              		//  Engine.PlayerController.ChatResetInput
	 void                      ScriptResetInput (  );                            		//  Engine.PlayerController.ScriptResetInput
	 void                      eventClientReset (  );                            		// [ FUNC_Event ] Engine.PlayerController.ClientReset
	 void                      Reset (  );                                       		//  Engine.PlayerController.Reset
	 void                      SpawnDefaultHUD (  );                             		//  Engine.PlayerController.SpawnDefaultHUD
	 void                      ServerVerifyViewTarget (  );                      		//  Engine.PlayerController.ServerVerifyViewTarget
	 void                      eventClientSetViewTargetZZ ( class AActor* A );   		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ClientSetViewTargetZZ
	 void                      eventClientSetViewTarget_NATIVE ( class AActor* A );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.ClientSetViewTarget_NATIVE
	 void                      ClientSetViewTarget_S ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_S
	 void                      ClientSetViewTarget_R ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_R
	 void                      ClientSetViewTarget_Q ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_Q
	 void                      ClientSetViewTarget_P ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_P
	 void                      ClientSetViewTarget_O ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_O
	 void                      ClientSetViewTarget_N ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_N
	 void                      ClientSetViewTarget_M ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_M
	 void                      ClientSetViewTarget_L ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_L
	 void                      ClientSetViewTarget_K ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_K
	 void                      ClientSetViewTarget_J ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_J
	 void                      ClientSetViewTarget_I ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_I
	 void                      ClientSetViewTarget_H ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_H
	 void                      ClientSetViewTarget_G ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_G
	 void                      ClientSetViewTarget_F ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_F
	 void                      ClientSetViewTarget_E ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_E
	 void                      ClientSetViewTarget_D ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_D
	 void                      ClientSetViewTarget_C ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_C
	 void                      ClientSetViewTarget_B ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_B
	 void                      ClientSetViewTarget_A ( class AActor* A );        		// [ FUNC_Simulated ] Engine.PlayerController.ClientSetViewTarget_A
	 void                      HandlePickup ( class APickup* pick );             		//  Engine.PlayerController.HandlePickup
	 void                      MakeAdmin (  );                                   		//  Engine.PlayerController.MakeAdmin
	 void                      AddCheats (  );                                   		//  Engine.PlayerController.AddCheats
	 void                      PendingStasis (  );                               		//  Engine.PlayerController.PendingStasis
	 void                      ClientCapBandwidth ( int Cap );                   		//  Engine.PlayerController.ClientCapBandwidth
	 void                      ServerGivePawn (  );                              		//  Engine.PlayerController.ServerGivePawn
	 void                      ServerSpectateSpeed ( float f );                  		//  Engine.PlayerController.ServerSpectateSpeed
	 void                      ClientSetClassicView (  );                        		//  Engine.PlayerController.ClientSetClassicView
	 void                      ClientSetWeaponViewShake ( bool B );              		//  Engine.PlayerController.ClientSetWeaponViewShake
	 void                      execSetSpectateSpeed ( float f );                 		// [ FUNC_Exec ] Engine.PlayerController.SetSpectateSpeed
	 void                      execss ( struct FString t );                      		// [ FUNC_Exec ] Engine.PlayerController.ss
	 void                      execToggleScreenShotMode (  );                    		// [ FUNC_Exec ] Engine.PlayerController.ToggleScreenShotMode
	 void                      KillAllPawns ( class UClass* aClass );            		//  Engine.PlayerController.KillAllPawns
	 void                      execKillAll ( class UClass* aClass );             		// [ FUNC_Exec ] Engine.PlayerController.KillAll
	 void                      eventStreamFinished ( int StreamHandle, unsigned char Reason );		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.StreamFinished
	 class AActor*             GetPathTo ( class AActor* Dest );                 		//  Engine.PlayerController.GetPathTo
	 void                      ServerShortTimeout (  );                          		//  Engine.PlayerController.ServerShortTimeout
	 void                      ResetTimeMarginNative (  );                       		// [ FUNC_Native ] Engine.PlayerController.ResetTimeMarginNative
	 void                      ResetTimeMargin (  );                             		//  Engine.PlayerController.ResetTimeMargin
	 void                      eventKickWarning (  );                            		// [ FUNC_Event ] Engine.PlayerController.KickWarning
	 bool                      BeyondViewDistance ( struct FVector OtherLocation, float CullDistance );		// [ FUNC_Simulated ] Engine.PlayerController.BeyondViewDistance
	 void                      ClientEndChangeHost (  );                         		// [ FUNC_Simulated ] Engine.PlayerController.ClientEndChangeHost
	 void                      EndChangeHost (  );                               		// [ FUNC_Simulated ] Engine.PlayerController.EndChangeHost
	 void                      eventSendAllUserGameStateDataToInterventionUser (  );		// [ FUNC_Event ] Engine.PlayerController.SendAllUserGameStateDataToInterventionUser
	 void                      eventDestroyGameStateStorageSender (  );          		// [ FUNC_Event ] Engine.PlayerController.DestroyGameStateStorageSender
	 void                      eventCreateGameStateStorageSender (  );           		// [ FUNC_Event ] Engine.PlayerController.CreateGameStateStorageSender
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerController.PostBeginPlay
	 void                      ServerGetWeaponStats ( class AwWeapon* W );       		//  Engine.PlayerController.ServerGetWeaponStats
	 void                      exectestRS (  );                                  		// [ FUNC_Exec ] Engine.PlayerController.testRS
	 void                      execGetWeaponStats (  );                          		// [ FUNC_Exec ] Engine.PlayerController.GetWeaponStats
	 void                      eventNotifyEndLoading (  );                       		// [ FUNC_Event ] Engine.PlayerController.NotifyEndLoading
	 void                      eventNotifyRecordException ( int retCode );       		// [ FUNC_Event ] Engine.PlayerController.NotifyRecordException
	 class UPlayerInput*       GetPlayerInput (  );                              		//  Engine.PlayerController.GetPlayerInput
	 void                      ServerNotifyEndLoading (  );                      		//  Engine.PlayerController.ServerNotifyEndLoading
	 void                      LocalNotifyEndLoading (  );                       		//  Engine.PlayerController.LocalNotifyEndLoading
	 void                      ServerSetPrecached (  );                          		//  Engine.PlayerController.ServerSetPrecached
	 void                      eventSetPrecached (  );                           		// [ FUNC_Event ] Engine.PlayerController.SetPrecached
	 void                      LocalSetPrecached (  );                           		//  Engine.PlayerController.LocalSetPrecached
	 void                      ShowPathToActor ( class AActor* A );              		// [ FUNC_Simulated ] Engine.PlayerController.ShowPathToActor
	 struct FName              GetStateStrName ( struct FString strName );       		//  Engine.PlayerController.GetStateStrName
	 void                      SetTimeOutInPlaying (  );                         		// [ FUNC_Native ] Engine.PlayerController.SetTimeOutInPlaying
	 void                      execCmd ( struct FString P1, struct FString P2, struct FString p3, struct FString p4, struct FString p5 );		// [ FUNC_Exec ] Engine.PlayerController.Cmd
	 void                      execSaveParams (  );                              		// [ FUNC_Exec | FUNC_Native ] Engine.PlayerController.SaveParams
	 void                      SplitForInputWeapon ( struct FString Src, class TArray< struct FString >* Parts );		// [ FUNC_Native ] Engine.PlayerController.SplitForInputWeapon
	 void                      eventClientHearSound ( class AActor* Actor, int id, class USound* S, struct FVector SoundLocation, struct FVector Parameters, bool Attenuate, bool Loop );		// [ FUNC_Event | FUNC_Native ] Engine.PlayerController.ClientHearSound
	 void                      eventfClientHearSound ( class AActor* Actor, int id, struct FString soundName, struct FVector SoundLocation, bool Attenuate, bool Loop );		// [ FUNC_Event | FUNC_Native ] Engine.PlayerController.fClientHearSound
	 int                       FindStairRotation ( float DeltaTime );            		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x020C ] Engine.PlayerController.FindStairRotation
	 void                      SendWebLog ( int sectionID, int FailCode );       		// [ FUNC_Native ] Engine.PlayerController.SendWebLog
	 void                      ResetKeySleepTime (  );                           		// [ FUNC_Native ] Engine.PlayerController.ResetKeySleepTime
	 float                     GetKeySleepTime (  );                             		// [ FUNC_Native ] Engine.PlayerController.GetKeySleepTime
	 void                      CloseWeb ( struct FString C );                    		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.CloseWeb
	 void                      OpenWeb ( struct FString C, int X, int Y, int width, int Height );		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.OpenWeb
	 bool                      CheckSpeedHack ( float DeltaTime );               		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.CheckSpeedHack
	 void                      eventServerValidationResponse ( struct FString R );		// [ FUNC_Event | FUNC_Native ] Engine.PlayerController.ServerValidationResponse
	 void                      eventClientValidate ( struct FString C );         		// [ FUNC_Event | FUNC_Native ] Engine.PlayerController.ClientValidate
	 struct FString            PasteFromClipboard (  );                          		// [ FUNC_Native ] Engine.PlayerController.PasteFromClipboard
	 void                      CopyToClipboard ( struct FString Text );          		// [ FUNC_Native ] Engine.PlayerController.CopyToClipboard
	 struct FString            GetDefaultURL ( struct FString Option );          		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.GetDefaultURL
	 struct FString            GetURLProtocol (  );                              		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.GetURLProtocol
	 void                      eventClientTravel ( struct FString URL, unsigned char TravelType, bool bItems );		// [ FUNC_Event | FUNC_Native ] Engine.PlayerController.ClientTravel
	 void                      SetViewTarget ( class AActor* NewViewTarget );    		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.SetViewTarget
	 void                      ResetInput (  );                                  		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.ResetInput
	 void                      ResetKeyboard (  );                               		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0220 ] Engine.PlayerController.ResetKeyboard
	 class ALevelInfo*         GetEntryLevel (  );                               		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.GetEntryLevel
	 struct FString            ConsoleCommand ( struct FString Command, bool bWriteToLog );		// [ FUNC_Native ] Engine.PlayerController.ConsoleCommand
	 struct FString            GetServerNetworkAddress (  );                     		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.GetServerNetworkAddress
	 struct FString            GetPlayerNetworkAddress (  );                     		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.GetPlayerNetworkAddress
	 struct FString            GetPlayerIDHash (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.GetPlayerIDHash
	 void                      SetNetSpeed ( int NewSpeed );                     		// [ FUNC_Final | FUNC_Native ] Engine.PlayerController.SetNetSpeed

	// Public Imports
	APlayerController(class APlayerController const &);
	APlayerController(void);
	class APlayerController &  operator=(class APlayerController const &);
	bool  CheckSpeedHackImp2(float);
	void  CheckSpeedHackImp(float,void *);
	static void  InternalConstructor(void *);
	void  ResetTimeMarginNativeImp(void);
	void  SetPlayer(class UPlayer *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0788

// Class Engine.AIController
class DLL_IMPORT AAIController : public AController
{
public:
	unsigned long                                      bHunting:1;                                       		// 0x05FC ( 0x0004 )  [0x00000001]
	unsigned long                                      bAdjustFromWalls:1;                               		// 0x05FC ( 0x0004 )  [0x00000002]
	unsigned long                                      bPlannedJump:1;                                   		// 0x05FC ( 0x0004 )  [0x00000004]
	class AAIScript*                                   MyScript;                                         		// 0x0600 ( 0x0004 ) 
	float                                              Skill;                                            		// 0x0604 ( 0x0004 ) 

	// UScript Functions
	 void                      Startle ( class AActor* A );                      		//  Engine.AIController.Startle
	 bool                      PriorityObjective (  );                           		//  Engine.AIController.PriorityObjective
	 void                      UnderLift ( class AMover* M );                    		//  Engine.AIController.UnderLift
	 void                      MoverFinished (  );                               		//  Engine.AIController.MoverFinished
	 void                      WaitForMover ( class AMover* M );                 		//  Engine.AIController.WaitForMover
	 void                      eventPrepareForMove ( class ANavigationPoint* Goal, class UReachSpec* Path );		// [ FUNC_Event ] Engine.AIController.PrepareForMove
	 struct FName              GetOrders (  );                                   		//  Engine.AIController.GetOrders
	 class AActor*             GetOrderObject (  );                              		//  Engine.AIController.GetOrderObject
	 void                      SetOrders ( struct FName NewOrders, class AController* OrderGiver );		//  Engine.AIController.SetOrders
	 void                      eventAdjustView ( float DeltaTime );              		// [ FUNC_Event ] Engine.AIController.AdjustView
	 int                       GetFacingDirection (  );                          		//  Engine.AIController.GetFacingDirection
	 float                     AdjustDesireFor ( class APickup* P );             		//  Engine.AIController.AdjustDesireFor
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  Engine.AIController.DisplayDebug
	 bool                      TriggerScript ( class AActor* Other, class APawn* EventInstigator );		//  Engine.AIController.TriggerScript
	 bool                      WeaponFireAgain ( float RefireRate, bool bFinishedFire );		//  Engine.AIController.WeaponFireAgain
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.AIController.Trigger
	 float                     RateWeapon ( class AwWeapon* W );                 		// [ FUNC_Simulated ] Engine.AIController.RateWeapon
	 void                      Reset (  );                                       		//  Engine.AIController.Reset
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.AIController.PreBeginPlay
	 void                      WaitToSeeEnemy (  );                              		// [ FUNC_Final | FUNC_Latent | FUNC_Native ] [ iNative : 0x01FE ] Engine.AIController.WaitToSeeEnemy

	// Public Imports
	AAIController(class AAIController const &);
	AAIController(void);
	class AAIController &  operator=(class AAIController const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.Inventory
class DLL_IMPORT AInventory : public AActor
{
public:
	unsigned char                                      InventoryGroup;                                   		// 0x03C8 ( 0x0001 ) 
	unsigned char                                      GroupOffset;                                      		// 0x03C9 ( 0x0001 ) 
	unsigned long                                      bDisplayableInv:1;                                		// 0x03CC ( 0x0004 )  [0x00000001]
	unsigned long                                      bTossedOut:1;                                     		// 0x03CC ( 0x0004 )  [0x00000002]
	class UClass*                                      PickupClass;                                      		// 0x03D0 ( 0x0004 ) 
	int                                                Charge;                                           		// 0x03D4 ( 0x0004 ) [ CPF_Edit | CPF_Net | CPF_Travel ]
	struct FVector                                     PlayerViewOffset;                                 		// 0x03D8 ( 0x000C ) 
	struct FRotator                                    PlayerViewPivot;                                  		// 0x03E4 ( 0x000C ) [ CPF_Edit ]
	unsigned long                                      bDrawingFirstPerson:1;                            		// 0x03F0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              BobDamping;                                       		// 0x03F4 ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      ThirdPersonActor;                                 		// 0x03F8 ( 0x0004 ) [ CPF_Net ]
	class UClass*                                      AttachmentClass;                                  		// 0x03FC ( 0x0004 ) 
	class UMaterial*                                   IconMaterial;                                     		// 0x0400 ( 0x0004 ) [ CPF_Edit ]
	struct FIntBox                                     IconCoords;                                       		// 0x0404 ( 0x0010 ) [ CPF_Edit ]
	struct FString                                     ItemName;                                         		// 0x0414 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     InventoryClassName;                               		// 0x0420 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                InventoryClassNumber;                             		// 0x042C ( 0x0004 ) [ CPF_Net ]
	struct FBtrDouble                                  InventoryUniqueNumber;                            		// 0x0430 ( 0x0008 ) [ CPF_Net ]
	int                                                InventoryClassAddPartsID;                         		// 0x0438 ( 0x0004 ) [ CPF_Net ]

	// UScript Functions
	 struct FString            StaticItemName (  );                              		//  Engine.Inventory.StaticItemName
	 void                      SetOwnerDisplay (  );                             		//  Engine.Inventory.SetOwnerDisplay
	 void                      OwnerEvent ( struct FName EventName );            		//  Engine.Inventory.OwnerEvent
	 class AArmor*             PrioritizeArmor ( int Damage, class UClass* DamageType, struct FVector HitLocation );		//  Engine.Inventory.PrioritizeArmor
	 class AwWeapon*           NextWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon );		// [ FUNC_Simulated ] Engine.Inventory.NextWeapon
	 class AwWeapon*           PrevWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon );		// [ FUNC_Simulated ] Engine.Inventory.PrevWeapon
	 class AwWeapon*           WeaponChangeWID ( int iWeaponID );                		// [ FUNC_Simulated ] Engine.Inventory.WeaponChangeWID
	 class AwWeapon*           WeaponChangeWClass ( struct FName wClass );       		// [ FUNC_Simulated ] Engine.Inventory.WeaponChangeWClass
	 class AwWeapon*           WeaponChange ( unsigned char f, bool bSilent );   		// [ FUNC_Simulated ] Engine.Inventory.WeaponChange
	 void                      Use ( float Value );                              		//  Engine.Inventory.Use
	 void                      DropFrom ( struct FVector StartLocation, struct FRotator StartRotation );		//  Engine.Inventory.DropFrom
	 class APowerups*          SelectNext (  );                                  		//  Engine.Inventory.SelectNext
	 bool                      HandlePickupQuery ( class APickup* Item );        		//  Engine.Inventory.HandlePickupQuery
	 void                      GiveTo ( class APawn* Other, class APickup* Pickup );		//  Engine.Inventory.GiveTo
	 void                      Destroyed (  );                                   		//  Engine.Inventory.Destroyed
	 void                      TravelPostAccept (  );                            		//  Engine.Inventory.TravelPostAccept
	 void                      eventTravelPreAccept (  );                        		// [ FUNC_Event ] Engine.Inventory.TravelPreAccept
	 class AwWeapon*           RecommendWeapon ( float* rating );                		// [ FUNC_Simulated ] Engine.Inventory.RecommendWeapon
	 void                      PickupFunction ( class APawn* Other );            		//  Engine.Inventory.PickupFunction
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] Engine.Inventory.GetHumanReadableName
	 void                      eventRenderOverlays ( class UCanvas* Canvas );    		// [ FUNC_Simulated | FUNC_Event ] Engine.Inventory.RenderOverlays
	 void                      DetachFromPawn ( class APawn* P );                		//  Engine.Inventory.DetachFromPawn
	 void                      execupdaterelative ( int Pitch, int Yaw, int Roll );		// [ FUNC_Exec ] Engine.Inventory.updaterelative
	 void                      AttachToPawn ( class APawn* P );                  		//  Engine.Inventory.AttachToPawn

	// Public Imports
	AInventory(class AInventory const &);
	AInventory(void);
	class AInventory &  operator=(class AInventory const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0074

// Class Engine.wAmmunition
class DLL_IMPORT AwAmmunition : public AInventory
{
public:
	int                                                MaxAmmo;                                          		// 0x043C ( 0x0004 ) [ CPF_Travel ]
	int                                                AmmoAmount;                                       		// 0x0440 ( 0x0004 ) [ CPF_Net | CPF_Travel ]
	int                                                InitialAmount;                                    		// 0x0444 ( 0x0004 ) 
	int                                                PickupAmmo;                                       		// 0x0448 ( 0x0004 ) [ CPF_Travel ]
	unsigned long                                      bRecommendSplashDamage:1;                         		// 0x044C ( 0x0004 )  [0x00000001]
	unsigned long                                      bTossed:1;                                        		// 0x044C ( 0x0004 )  [0x00000002]
	unsigned long                                      bTrySplash:1;                                     		// 0x044C ( 0x0004 )  [0x00000004]
	unsigned long                                      bLeadTarget:1;                                    		// 0x044C ( 0x0004 )  [0x00000008]
	unsigned long                                      bInstantHit:1;                                    		// 0x044C ( 0x0004 )  [0x00000010]
	unsigned long                                      bSplashDamage:1;                                  		// 0x044C ( 0x0004 )  [0x00000020]
	unsigned long                                      bTryHeadShot:1;                                   		// 0x044C ( 0x0004 )  [0x00000040]
	class UClass*                                      ProjectileClass;                                  		// 0x0450 ( 0x0004 ) 
	class UClass*                                      MyDamageType;                                     		// 0x0454 ( 0x0004 ) 
	float                                              WarnTargetPct;                                    		// 0x0458 ( 0x0004 ) 
	float                                              RefireRate;                                       		// 0x045C ( 0x0004 ) 
	class USound*                                      FireSound;                                        		// 0x0460 ( 0x0004 ) 
	float                                              MaxRange;                                         		// 0x0464 ( 0x0004 ) 
	class UMaterial*                                   IconFlashMaterial;                                		// 0x0468 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 bool                      AddAmmo ( int AmmoToAdd );                        		// [ FUNC_Simulated ] Engine.wAmmunition.AddAmmo
	 bool                      HandlePickupQuery ( class APickup* Item );        		//  Engine.wAmmunition.HandlePickupQuery
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.wAmmunition.DisplayDebug
	 bool                      HasAmmo (  );                                     		// [ FUNC_Simulated ] Engine.wAmmunition.HasAmmo
	 bool                      UseAmmo ( int AmountNeeded, bool bAmountNeededIsMax );		// [ FUNC_Simulated ] Engine.wAmmunition.UseAmmo
	 void                      CheckOutOfAmmo (  );                              		// [ FUNC_Simulated ] Engine.wAmmunition.CheckOutOfAmmo

	// Public Imports
	AwAmmunition(class AwAmmunition const &);
	AwAmmunition(void);
	class AwAmmunition &  operator=(class AwAmmunition const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0030

// Class Engine.Powerups
class DLL_IMPORT APowerups : public AInventory
{
public:
	int                                                NumCopies;                                        		// 0x043C ( 0x0004 ) [ CPF_Net | CPF_Travel ]
	unsigned long                                      bCanHaveMultipleCopies:1;                         		// 0x0440 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bAutoActivate:1;                                  		// 0x0440 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bActivatable:1;                                   		// 0x0440 ( 0x0004 )  [0x00000004][ CPF_Edit | CPF_Net ]
	unsigned long                                      bActive:1;                                        		// 0x0440 ( 0x0004 )  [0x00000008][ CPF_Net | CPF_Travel ]
	struct FString                                     ExpireMessage;                                    		// 0x0444 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class USound*                                      ActivateSound;                                    		// 0x0450 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      DeActivateSound;                                  		// 0x0454 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 struct FString            GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 );		//  Engine.Powerups.GetLocalString
	 void                      UsedUp (  );                                      		//  Engine.Powerups.UsedUp
	 void                      FireEffect (  );                                  		//  Engine.Powerups.FireEffect
	 float                     UseCharge ( float Amount );                       		//  Engine.Powerups.UseCharge
	 bool                      HandlePickupQuery ( class APickup* Item );        		//  Engine.Powerups.HandlePickupQuery
	 void                      Activate (  );                                    		//  Engine.Powerups.Activate
	 class APowerups*          SelectNext (  );                                  		//  Engine.Powerups.SelectNext
	 void                      PickupFunction ( class APawn* Other );            		//  Engine.Powerups.PickupFunction
	 void                      eventTravelPreAccept (  );                        		// [ FUNC_Event ] Engine.Powerups.TravelPreAccept

	// Public Imports
	APowerups(class APowerups const &);
	APowerups(void);
	class APowerups &  operator=(class APowerups const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.Pickup
class DLL_IMPORT APickup : public AActor
{
public:
	float                                              MaxDesireability;                                 		// 0x03C8 ( 0x0004 ) 
	class AInventorySpot*                              myMarker;                                         		// 0x03CC ( 0x0004 ) 
	class ANavigationPoint*                            PickupCache;                                      		// 0x03D0 ( 0x0004 ) 
	class UClass*                                      InventoryType;                                    		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bInstantRespawn:1;                                		// 0x03D8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bOnlyReplicateHidden:1;                           		// 0x03D8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bAmbientGlow:1;                                   		// 0x03D8 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bDropped:1;                                       		// 0x03D8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bPredictRespawns:1;                               		// 0x03D8 ( 0x0004 )  [0x00000010]
	float                                              RespawnTime;                                      		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	float                                              RespawnEffectTime;                                		// 0x03E0 ( 0x0004 ) 
	struct FString                                     PickupMessage;                                    		// 0x03E4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class USound*                                      PickupSound;                                      		// 0x03F0 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     PickupForce;                                      		// 0x03F4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class AwPickUpBase*                                PickUpBase;                                       		// 0x0400 ( 0x0004 ) [ CPF_Edit ]
	class AController*                                 TeamOwner[ 0x04 ];                                		// 0x0404 ( 0x0010 ) 
	unsigned long                                      bPostLandingCollision:1;                          		// 0x0414 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              PostLandingCollisionRadius;                       		// 0x0418 ( 0x0004 ) [ CPF_Edit ]
	float                                              PostLandingCollisionHeight;                       		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	float                                              CollisionHeightBuffer;                            		// 0x0420 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 float                     GetRespawnTime (  );                              		//  Engine.Pickup.GetRespawnTime
	 void                      eventLanded ( struct FVector HitNormal );         		// [ FUNC_Event ] Engine.Pickup.Landed
	 bool                      ReadyToPickup ( float MaxWait );                  		//  Engine.Pickup.ReadyToPickup
	 void                      InitDroppedPack (  );                             		//  Engine.Pickup.InitDroppedPack
	 void                      InitDroppedPickupFor ( class AInventory* Inv );   		//  Engine.Pickup.InitDroppedPickupFor
	 struct FString            GetLocalString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 );		//  Engine.Pickup.GetLocalString
	 void                      SetRespawn (  );                                  		//  Engine.Pickup.SetRespawn
	 void                      AnnouncePickup ( class APawn* Receiver );         		//  Engine.Pickup.AnnouncePickup
	 void                      StartSleeping (  );                               		//  Engine.Pickup.StartSleeping
	 class AInventory*         SpawnCopy ( class APawn* Other );                 		//  Engine.Pickup.SpawnCopy
	 float                     BotDesireability ( class APawn* Bot );            		//  Engine.Pickup.BotDesireability
	 float                     DetourWeight ( class APawn* Other, float PathWeight );		//  Engine.Pickup.DetourWeight
	 class APickup*            Transmogrify ( class UClass* NewClass );          		//  Engine.Pickup.Transmogrify
	 void                      RespawnEffect (  );                               		//  Engine.Pickup.RespawnEffect
	 void                      Reset (  );                                       		//  Engine.Pickup.Reset
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] Engine.Pickup.UpdateHUD
	 bool                      IsSuperItem (  );                                 		//  Engine.Pickup.IsSuperItem
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] Engine.Pickup.GetHumanReadableName
	 void                      Destroyed (  );                                   		//  Engine.Pickup.Destroyed
	 void                      StaticPrecache ( class ALevelInfo* L );           		//  Engine.Pickup.StaticPrecache
	 void                      RemoveFromNavigation (  );                        		// [ FUNC_Final | FUNC_Native ] Engine.Pickup.RemoveFromNavigation
	 void                      AddToNavigation (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.Pickup.AddToNavigation

	// Public Imports
	APickup(class APickup const &);
	APickup(void);
	class APickup &  operator=(class APickup const &);
	int  BlockedByVehicle(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x005C

// Class Engine.wWeaponPickup
class DLL_IMPORT AwWeaponPickup : public APickup
{
public:
	unsigned long                                      bWeaponStay:1;                                    		// 0x0424 ( 0x0004 )  [0x00000001]
	unsigned long                                      bThrown:1;                                        		// 0x0424 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bSleeping:1;                                      		// 0x0424 ( 0x0004 )  [0x00000004][ CPF_Net ]
	int                                                AmmoAmount[ 0x02 ];                               		// 0x0428 ( 0x0008 ) [ CPF_Edit | CPF_Net ]
	int                                                AmmoAmount_Loaded;                                		// 0x0430 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	int                                                iLocalWeaponID;                                   		// 0x0434 ( 0x0004 ) 
	int                                                iLocalAddPartsID;                                 		// 0x0438 ( 0x0004 ) 
	int                                                iRepWeaponID;                                     		// 0x043C ( 0x0004 ) [ CPF_Net ]
	int                                                iRepAddPartsID;                                   		// 0x0440 ( 0x0004 ) [ CPF_Net ]
	int                                                iPainting_Item_ID;                                		// 0x0444 ( 0x0004 ) [ CPF_Net ]
	class UwWeaponBaseParams*                          BaseParams;                                       		// 0x0448 ( 0x0004 ) 
	class UClass*                                      ResParams;                                        		// 0x044C ( 0x0004 ) 
	class TArray< class APawn* >                       TouchingPawns;                                    		// 0x0450 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bUsed:1;                                          		// 0x045C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      Tick ( float dt );                                		// [ FUNC_Simulated ] Engine.wWeaponPickup.Tick
	 void                      InitDroppedPickupFor ( class AInventory* Inv );   		//  Engine.wWeaponPickup.InitDroppedPickupFor
	 void                      UnTouch ( class AActor* Other );                  		//  Engine.wWeaponPickup.UnTouch
	 bool                      CheckIsTouchingPawn ( class APawn* P );           		//  Engine.wWeaponPickup.CheckIsTouchingPawn
	 class APawn*              AddTouchingPawn ( class APawn* P );               		//  Engine.wWeaponPickup.AddTouchingPawn
	 void                      Destroyed (  );                                   		//  Engine.wWeaponPickup.Destroyed
	 void                      PickWeapon ( class AActor* Other );               		//  Engine.wWeaponPickup.PickWeapon
	 bool                      ValidTouch ( class AActor* Other );               		//  Engine.wWeaponPickup.ValidTouch
	 void                      SetSkin ( int iWeaponID, int iAddPartsID );       		// [ FUNC_Simulated ] Engine.wWeaponPickup.SetSkin
	 void                      eventwLoadOut ( int iID, int iAddPartsID );       		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeaponPickup.wLoadOut
	 void                      Reset (  );                                       		//  Engine.wWeaponPickup.Reset
	 float                     GetRespawnTime (  );                              		//  Engine.wWeaponPickup.GetRespawnTime
	 float                     BotDesireability ( class APawn* Bot );            		//  Engine.wWeaponPickup.BotDesireability
	 float                     DetourWeight ( class APawn* Other, float PathWeight );		//  Engine.wWeaponPickup.DetourWeight
	 void                      ForceBegin (  );                                  		//  Engine.wWeaponPickup.ForceBegin
	 bool                      AllowRepeatPickup (  );                           		//  Engine.wWeaponPickup.AllowRepeatPickup
	 void                      StartSleeping (  );                               		//  Engine.wWeaponPickup.StartSleeping
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] Engine.wWeaponPickup.UpdateHUD
	 void                      SetWeaponStay (  );                               		//  Engine.wWeaponPickup.SetWeaponStay
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Event ] Engine.wWeaponPickup.PostNetBeginPlay
	 void                      PostBeginPlay (  );                               		//  Engine.wWeaponPickup.PostBeginPlay

	// Public Imports
	AwWeaponPickup(class AwWeaponPickup const &);
	AwWeaponPickup(void);
	class AwWeaponPickup &  operator=(class AwWeaponPickup const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x003C

// Class Engine.Ammo
class DLL_IMPORT AAmmo : public APickup
{
public:
	int                                                AmmoAmount;                                       		// 0x0424 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 class AInventory*         SpawnCopy ( class APawn* Other );                 		//  Engine.Ammo.SpawnCopy
	 float                     BotDesireability ( class APawn* Bot );            		//  Engine.Ammo.BotDesireability
	 float                     DetourWeight ( class APawn* Other, float PathWeight );		//  Engine.Ammo.DetourWeight
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] Engine.Ammo.UpdateHUD

	// Public Imports
	AAmmo(class AAmmo const &);
	class AAmmo &  operator=(class AAmmo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.LogEntry
class DLL_IMPORT ULogEntry : public UObject
{
public:
	struct FString                                     DateTime;                                         		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	struct FString                                     Entry;                                            		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	class ULogEntry*                                   Next;                                             		// 0x0044 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 int                       Count (  );                                       		// [ FUNC_Simulated ] Engine.LogEntry.Count
	 class ULogEntry*          Delete ( class ULogEntry* delLE );                		// [ FUNC_Simulated ] Engine.LogEntry.Delete
	 void                      Insert ( class ULogEntry* newLE );                		// [ FUNC_Simulated ] Engine.LogEntry.Insert

	// Public Imports
	ULogEntry(class ULogEntry const &);
	class ULogEntry &  operator=(class ULogEntry const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.LevelSummary
class DLL_IMPORT ULevelSummary : public UObject
{
public:
	struct FString                                     Title;                                            		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Description;                                      		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LevelEnterText;                                   		// 0x0044 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Author;                                           		// 0x0050 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     DecoTextName;                                     		// 0x005C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                IdealPlayerCountMin;                              		// 0x0068 ( 0x0004 ) [ CPF_Edit ]
	int                                                IdealPlayerCountMax;                              		// 0x006C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      HideFromMenus:1;                                  		// 0x0070 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	int                                                SinglePlayerTeamSize;                             		// 0x0074 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   Screenshot;                                       		// 0x0078 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     ExtraInfo;                                        		// 0x007C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	ULevelSummary(class ULevelSummary const &);
	ULevelSummary(void);
	class ULevelSummary &  operator=(class ULevelSummary const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x005C

// Class Engine.GameReplicationInfo
class DLL_IMPORT AGameReplicationInfo : public AReplicationInfo
{
public:
	struct FString                                     GameName;                                         		// 0x041C ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]
	struct FString                                     GameClass;                                        		// 0x0428 ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]
	unsigned long                                      bTeamGame:1;                                      		// 0x0434 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bStopCountDown:1;                                 		// 0x0434 ( 0x0004 )  [0x00000002][ CPF_Net ]
	unsigned long                                      bMatchHasBegun:1;                                 		// 0x0434 ( 0x0004 )  [0x00000004][ CPF_Net ]
	unsigned long                                      bTeamSymbolsUpdated:1;                            		// 0x0434 ( 0x0004 )  [0x00000008]
	unsigned long                                      bNoTeamSkins:1;                                   		// 0x0434 ( 0x0004 )  [0x00000010][ CPF_Net ]
	unsigned long                                      bForceTeamSkins:1;                                		// 0x0434 ( 0x0004 )  [0x00000020][ CPF_Net ]
	unsigned long                                      bForceNoPlayerLights:1;                           		// 0x0434 ( 0x0004 )  [0x00000040][ CPF_Net ]
	unsigned long                                      bAllowPlayerLights:1;                             		// 0x0434 ( 0x0004 )  [0x00000080][ CPF_Net ]
	unsigned long                                      bFastWeaponSwitching:1;                           		// 0x0434 ( 0x0004 )  [0x00000100][ CPF_Net ]
	unsigned long                                      bNoTeamChanges:1;                                 		// 0x0434 ( 0x0004 )  [0x00000200][ CPF_Net ]
	float                                              RespawnTime;                                      		// 0x0438 ( 0x0004 ) [ CPF_Net ]
	int                                                RemainingTime;                                    		// 0x043C ( 0x0004 ) [ CPF_Net ]
	int                                                ElapsedTime;                                      		// 0x0440 ( 0x0004 ) [ CPF_Net ]
	int                                                RemainingMinute;                                  		// 0x0444 ( 0x0004 ) [ CPF_Net ]
	int                                                PostElapsedTime;                                  		// 0x0448 ( 0x0004 ) [ CPF_Net ]
	int                                                PostElapsedTimeClient;                            		// 0x044C ( 0x0004 ) 
	int                                                PostRemaiingTime;                                 		// 0x0450 ( 0x0004 ) [ CPF_Net ]
	int                                                PostRemaiingTimeClient;                           		// 0x0454 ( 0x0004 ) 
	float                                              SecondCount;                                      		// 0x0458 ( 0x0004 ) 
	int                                                GoalScore;                                        		// 0x045C ( 0x0004 ) [ CPF_Net ]
	int                                                TimeLimit;                                        		// 0x0460 ( 0x0004 ) [ CPF_Net ]
	int                                                MaxLives;                                         		// 0x0464 ( 0x0004 ) [ CPF_Net ]
	int                                                MinNetPlayers;                                    		// 0x0468 ( 0x0004 ) [ CPF_Net ]
	float                                              WeaponBerserk;                                    		// 0x046C ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bStartedMatch:1;                                  		// 0x0470 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bMatchOver:1;                                     		// 0x0470 ( 0x0004 )  [0x00000002][ CPF_Net ]
	unsigned long                                      WaitingForStart:1;                                		// 0x0470 ( 0x0004 )  [0x00000004][ CPF_Net ]
	int                                                WaitingForStartCountDown;                         		// 0x0474 ( 0x0004 ) [ CPF_Net ]
	class ATeamInfo*                                   Teams[ 0x03 ];                                    		// 0x0478 ( 0x000C ) [ CPF_Net ]
	struct FString                                     ServerName;                                       		// 0x0484 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     ShortName;                                        		// 0x0490 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     AdminName;                                        		// 0x049C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     AdminEmail;                                       		// 0x04A8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                ServerRegion;                                     		// 0x04B4 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     MessageOfTheDay;                                  		// 0x04B8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     MOTDLine1;                                        		// 0x04C4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_Deprecated ]
	struct FString                                     MOTDLine2;                                        		// 0x04D0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_Deprecated ]
	struct FString                                     MOTDLine3;                                        		// 0x04DC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_Deprecated ]
	struct FString                                     MOTDLine4;                                        		// 0x04E8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_Deprecated ]
	class AActor*                                      Winner;                                           		// 0x04F4 ( 0x0004 ) [ CPF_Net ]
	class AVoiceChatReplicationInfo*                   VoiceReplicationInfo;                             		// 0x04F8 ( 0x0004 ) [ CPF_Net ]
	class TArray< class APlayerReplicationInfo* >      PRIArray;                                         		// 0x04FC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     GRIPropsDisplayText[ 0x04 ];                      		// 0x0508 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     GRIPropDescText[ 0x04 ];                          		// 0x0538 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FVector                                     FlagPos;                                          		// 0x0568 ( 0x000C ) [ CPF_Net ]
	unsigned char                                      FlagState[ 0x02 ];                                		// 0x0574 ( 0x0002 ) [ CPF_Net ]
	class APlayerReplicationInfo*                      FlagHolder[ 0x02 ];                               		// 0x0578 ( 0x0008 ) 
	class APlayerReplicationInfo*                      FlagTarget;                                       		// 0x0580 ( 0x0004 ) [ CPF_Net ]
	int                                                MatchID;                                          		// 0x0584 ( 0x0004 ) [ CPF_Net ]
	int                                                BotDifficulty;                                    		// 0x0588 ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      RoundState;                                       		// 0x058C ( 0x0001 ) [ CPF_Net ]
	unsigned long                                      bObjectivePlanted:1;                              		// 0x0590 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bMultiBomb:1;                                     		// 0x0590 ( 0x0004 )  [0x00000002][ CPF_Net ]
	int                                                MaxPlayersDuringGame;                             		// 0x0594 ( 0x0004 ) [ CPF_Net ]
	int                                                CurrentAttackingTeam;                             		// 0x0598 ( 0x0004 ) [ CPF_Net ]

	// UScript Functions
	 void                      SetMaxLives ( int iMaxLives );                    		// [ FUNC_Simulated ] Engine.GameReplicationInfo.SetMaxLives
	 int                       GetMaxLives (  );                                 		// [ FUNC_Simulated ] Engine.GameReplicationInfo.GetMaxLives
	 bool                      IsGhostChatting ( class AActor* Sender );         		// [ FUNC_Simulated ] Engine.GameReplicationInfo.IsGhostChatting
	 bool                      IsDefender ( unsigned char Team );                		// [ FUNC_Simulated ] Engine.GameReplicationInfo.IsDefender
	 void                      SyncRemainingTime (  );                           		//  Engine.GameReplicationInfo.SyncRemainingTime
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] Engine.GameReplicationInfo.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  Engine.GameReplicationInfo.FillPlayInfo
	 void                      GetPRIArray ( class TArray< class APlayerReplicationInfo* >* pris );		// [ FUNC_Simulated ] Engine.GameReplicationInfo.GetPRIArray
	 void                      RemovePRI ( class APlayerReplicationInfo* PRI );  		// [ FUNC_Simulated ] Engine.GameReplicationInfo.RemovePRI
	 void                      AddPRI ( class APlayerReplicationInfo* PRI );     		// [ FUNC_Simulated ] Engine.GameReplicationInfo.AddPRI
	 void                      eventForcedRemovePRI ( class APlayerReplicationInfo* PRI );		// [ FUNC_Event ] Engine.GameReplicationInfo.ForcedRemovePRI
	 void                      eventForcedAddPRI ( class APlayerReplicationInfo* PRI );		// [ FUNC_Event ] Engine.GameReplicationInfo.ForcedAddPRI
	 class APlayerReplicationInfo* FindPlayerByID ( int PlayerID );                  		// [ FUNC_Simulated ] Engine.GameReplicationInfo.FindPlayerByID
	 int                       GetWinTeamIndex (  );                             		// [ FUNC_Simulated ] Engine.GameReplicationInfo.GetWinTeamIndex
	 class TArray< int >       GetTeamScores (  );                               		// [ FUNC_Simulated ] Engine.GameReplicationInfo.GetTeamScores
	 int                       GetRemainingTime (  );                            		// [ FUNC_Simulated ] Engine.GameReplicationInfo.GetRemainingTime
	 void                      PlayTimerSound (  );                              		// [ FUNC_Simulated ] Engine.GameReplicationInfo.PlayTimerSound
	 void                      Timer (  );                                       		// [ FUNC_Simulated ] Engine.GameReplicationInfo.Timer
	 void                      Reset (  );                                       		//  Engine.GameReplicationInfo.Reset
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.GameReplicationInfo.PostBeginPlay
	 void                      eventEventForceBegin (  );                        		// [ FUNC_Event ] Engine.GameReplicationInfo.EventForceBegin
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] Engine.GameReplicationInfo.UpdatePrecacheMaterials
	 void                      TeamSymbolNotify (  );                            		// [ FUNC_Simulated ] Engine.GameReplicationInfo.TeamSymbolNotify
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] Engine.GameReplicationInfo.PostNetBeginPlay

	// Public Imports
	AGameReplicationInfo(class AGameReplicationInfo const &);
	AGameReplicationInfo(void);
	class AGameReplicationInfo &  operator=(class AGameReplicationInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0180

// Class Engine.InternetInfo
class DLL_IMPORT AInternetInfo : public AInfo
{
public:

	// UScript Functions
	 struct FString            GetBeaconText ( int i );                          		//  Engine.InternetInfo.GetBeaconText
	 struct FString            GetBeaconAddress ( int i );                       		//  Engine.InternetInfo.GetBeaconAddress
	 int                       GetBeaconCount (  );                              		//  Engine.InternetInfo.GetBeaconCount

	// Public Imports
	AInternetInfo(class AInternetInfo const &);
	class AInternetInfo &  operator=(class AInternetInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.LinkedReplicationInfo
class DLL_IMPORT ALinkedReplicationInfo : public AReplicationInfo
{
public:
	class ALinkedReplicationInfo*                      NextReplicationInfo;                              		// 0x041C ( 0x0004 ) [ CPF_Net ]

	// Public Imports
	ALinkedReplicationInfo(class ALinkedReplicationInfo const &);
	class ALinkedReplicationInfo &  operator=(class ALinkedReplicationInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.PlayerReplicationInfo
class DLL_IMPORT APlayerReplicationInfo : public AReplicationInfo
{
public:
	float                                              Score;                                            		// 0x041C ( 0x0004 ) [ CPF_Net ]
	float                                              fExp;                                             		// 0x0420 ( 0x0004 ) [ CPF_Net ]
	float                                              Point;                                            		// 0x0424 ( 0x0004 ) [ CPF_Net ]
	int                                                iBodyItemID_0;                                    		// 0x0428 ( 0x0004 ) [ CPF_Net ]
	int                                                iBodyItemID_1;                                    		// 0x042C ( 0x0004 ) [ CPF_Net ]
	int                                                iHeadItemID;                                      		// 0x0430 ( 0x0004 ) [ CPF_Net ]
	int                                                iHelmetItemID;                                    		// 0x0434 ( 0x0004 ) [ CPF_Net ]
	int                                                iAccessoryItemID;                                 		// 0x0438 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bPickupWeaponDOA:1;                               		// 0x043C ( 0x0004 )  [0x00000001]
	unsigned long                                      bCanSeeEnemiesOnMinimap:1;                        		// 0x043C ( 0x0004 )  [0x00000002][ CPF_Net ]
	float                                              Deaths;                                           		// 0x0440 ( 0x0004 ) [ CPF_Net ]
	class ADecoration*                                 HasFlag;                                          		// 0x0444 ( 0x0004 ) [ CPF_Net ]
	int                                                Ping;                                             		// 0x0448 ( 0x0004 ) [ CPF_Net ]
	class AVolume*                                     PlayerVolume;                                     		// 0x044C ( 0x0004 ) [ CPF_Net ]
	class AZoneInfo*                                   PlayerZone;                                       		// 0x0450 ( 0x0004 ) [ CPF_Net ]
	int                                                NumLives;                                         		// 0x0454 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bCannotChangeQS:1;                                		// 0x0458 ( 0x0004 )  [0x00000001][ CPF_Net ]
	struct FString                                     PlayerName;                                       		// 0x045C ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]
	struct FString                                     CharacterName;                                    		// 0x0468 ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]
	struct FString                                     OldCharacterName;                                 		// 0x0474 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     OldName;                                          		// 0x0480 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PreviousName;                                     		// 0x048C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                PlayerID;                                         		// 0x0498 ( 0x0004 ) [ CPF_Net ]
	int                                                NPCID;                                            		// 0x049C ( 0x0004 ) 
	int                                                UID;                                              		// 0x04A0 ( 0x0004 ) 
	class ATeamInfo*                                   Team;                                             		// 0x04A4 ( 0x0004 ) [ CPF_Net ]
	int                                                TeamID;                                           		// 0x04A8 ( 0x0004 ) [ CPF_Net ]
	int                                                SideID;                                           		// 0x04AC ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bAdmin:1;                                         		// 0x04B0 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bIsFemale:1;                                      		// 0x04B0 ( 0x0004 )  [0x00000002][ CPF_Net ]
	unsigned long                                      bIsSpectator:1;                                   		// 0x04B0 ( 0x0004 )  [0x00000004][ CPF_Net ]
	unsigned long                                      bOnlySpectator:1;                                 		// 0x04B0 ( 0x0004 )  [0x00000008][ CPF_Net ]
	unsigned long                                      bWaitingPlayer:1;                                 		// 0x04B0 ( 0x0004 )  [0x00000010][ CPF_Net ]
	unsigned long                                      bReadyToPlay:1;                                   		// 0x04B0 ( 0x0004 )  [0x00000020][ CPF_Net ]
	unsigned long                                      bOutOfLives:1;                                    		// 0x04B0 ( 0x0004 )  [0x00000040][ CPF_Net ]
	unsigned long                                      bBot:1;                                           		// 0x04B0 ( 0x0004 )  [0x00000080][ CPF_Net ]
	unsigned long                                      bWelcomed:1;                                      		// 0x04B0 ( 0x0004 )  [0x00000100]
	unsigned long                                      bReceivedPing:1;                                  		// 0x04B0 ( 0x0004 )  [0x00000200]
	unsigned long                                      bNoTeam:1;                                        		// 0x04B0 ( 0x0004 )  [0x00000400][ CPF_Net ]
	unsigned long                                      bTeamNotified:1;                                  		// 0x04B0 ( 0x0004 )  [0x00000800]
	unsigned char                                      PacketLoss;                                       		// 0x04B4 ( 0x0001 ) [ CPF_Net ]
	unsigned long                                      IsDead:1;                                         		// 0x04B8 ( 0x0004 )  [0x00000001][ CPF_Net ]
	int                                                StartTime;                                        		// 0x04BC ( 0x0004 ) [ CPF_Net ]
	struct FString                                     StringDead;                                       		// 0x04C0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     StringSpectating;                                 		// 0x04CC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     StringUnknown;                                    		// 0x04D8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                GoalsScored;                                      		// 0x04E4 ( 0x0004 ) 
	int                                                Kills;                                            		// 0x04E8 ( 0x0004 ) [ CPF_Net ]
	int                                                Assists;                                          		// 0x04EC ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      AssistType;                                       		// 0x04F0 ( 0x0001 ) 
	class AVehicle*                                    CurrentVehicle;                                   		// 0x04F4 ( 0x0004 ) 
	class ALinkedReplicationInfo*                      CustomReplicationInfo;                            		// 0x04F8 ( 0x0004 ) [ CPF_Net ]
	class AVoiceChatReplicationInfo*                   VoiceInfo;                                        		// 0x04FC ( 0x0004 ) 
	unsigned long                                      bRegisteredChatRoom:1;                            		// 0x0500 ( 0x0004 )  [0x00000001]
	class AVoiceChatRoom*                              PrivateChatRoom;                                  		// 0x0504 ( 0x0004 ) 
	int                                                ActiveChannel;                                    		// 0x0508 ( 0x0004 ) [ CPF_Net ]
	int                                                VoiceMemberMask;                                  		// 0x050C ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      VoiceID;                                          		// 0x0510 ( 0x0001 ) [ CPF_Net ]
	float                                              UAVScanBeginTime;                                 		// 0x0514 ( 0x0004 ) [ CPF_Net ]
	float                                              UAVScanEndTime;                                   		// 0x0518 ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      bySupply_Helipack;                                		// 0x051C ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      bySupply_UAV;                                     		// 0x051D ( 0x0001 ) [ CPF_Net ]
	unsigned char                                      bySupply_AirStrike;                               		// 0x051E ( 0x0001 ) [ CPF_Net ]
	unsigned long                                      EndPCBang:1;                                      		// 0x0520 ( 0x0004 )  [0x00000001]
	class UMaterial*                                   ClassMark;                                        		// 0x0524 ( 0x0004 ) 
	int                                                ClassLevel;                                       		// 0x0528 ( 0x0004 ) [ CPF_Net ]
	int                                                ClassLevelMark;                                   		// 0x052C ( 0x0004 ) [ CPF_Net ]
	struct FFloatBox                                   ClassMarkBox;                                     		// 0x0530 ( 0x0010 ) 
	class UMaterial*                                   ClanMark;                                         		// 0x0540 ( 0x0004 ) 
	int                                                ClanID;                                           		// 0x0544 ( 0x0004 ) [ CPF_Net ]
	struct FIntBox                                     ClanMarkBox;                                      		// 0x0548 ( 0x0010 ) 
	int                                                iCurrentWeaponID;                                 		// 0x0558 ( 0x0004 ) [ CPF_Net ]
	int                                                NumMedals;                                        		// 0x055C ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      IsIntervented:1;                                  		// 0x0560 ( 0x0004 )  [0x00000001][ CPF_Net ]
	int                                                ElapsedTimeWhenIntervented;                       		// 0x0564 ( 0x0004 ) [ CPF_Net ]
	int                                                TimePlayed;                                       		// 0x0568 ( 0x0004 ) 
	int                                                RoundWhenIntervented;                             		// 0x056C ( 0x0004 ) [ CPF_Net ]
	int                                                RoundPlayed;                                      		// 0x0570 ( 0x0004 ) 
	unsigned long                                      bPrecached:1;                                     		// 0x0574 ( 0x0004 )  [0x00000001][ CPF_Net ]
	int                                                KillSuccession;                                   		// 0x0578 ( 0x0004 ) [ CPF_Net ]
	float                                              fSpawnedTime;                                     		// 0x057C ( 0x0004 ) [ CPF_Net ]
	struct FString                                     PopMessage;                                       		// 0x0580 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              PopMessageEnd;                                    		// 0x058C ( 0x0004 ) 
	unsigned long                                      IsSendGameStartTime:1;                            		// 0x0590 ( 0x0004 )  [0x00000001]
	unsigned long                                      IsSendRoundStartTime:1;                           		// 0x0590 ( 0x0004 )  [0x00000002]
	unsigned long                                      IsInvulnerable:1;                                 		// 0x0590 ( 0x0004 )  [0x00000004][ CPF_Net ]
	int                                                nQuickSlotIdx;                                    		// 0x0594 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      IsConnected:1;                                    		// 0x0598 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bAdminSpecator:1;                                 		// 0x0598 ( 0x0004 )  [0x00000002][ CPF_Net ]
	int                                                IsFriendOrClanMember;                             		// 0x059C ( 0x0004 ) 
	unsigned long                                      IsWaitingForStart:1;                              		// 0x05A0 ( 0x0004 )  [0x00000001][ CPF_Net ]
	int                                                iWaitingForStartCountDown;                        		// 0x05A4 ( 0x0004 ) [ CPF_Net ]
	int                                                PlayerHealth;                                     		// 0x05A8 ( 0x0004 ) 

	// UScript Functions
	 int                       GetCheckFriendOrClanMember (  );                  		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.GetCheckFriendOrClanMember
	 void                      SetQuickSlotIdx ( int nIdx );                     		//  Engine.PlayerReplicationInfo.SetQuickSlotIdx
	 int                       GetUID (  );                                      		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.GetUID
	 bool                      GetIsSendGameStartTime (  );                      		//  Engine.PlayerReplicationInfo.GetIsSendGameStartTime
	 void                      SetIsSendGameStartTime ( bool bSend );            		//  Engine.PlayerReplicationInfo.SetIsSendGameStartTime
	 struct FString            eventGetNameCallSign (  );                        		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerReplicationInfo.GetNameCallSign
	 struct FString            GetCallSign (  );                                 		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.GetCallSign
	 void                      SetVoiceMemberMask ( int NewMask );               		//  Engine.PlayerReplicationInfo.SetVoiceMemberMask
	 void                      SetChatPassword ( struct FString InPassword );    		//  Engine.PlayerReplicationInfo.SetChatPassword
	 void                      SetWaitingPlayer ( bool B );                      		//  Engine.PlayerReplicationInfo.SetWaitingPlayer
	 void                      SetPlayerName ( struct FString S );               		//  Engine.PlayerReplicationInfo.SetPlayerName
	 void                      Timer (  );                                       		//  Engine.PlayerReplicationInfo.Timer
	 void                      eventClientNameChange (  );                       		// [ FUNC_Event ] Engine.PlayerReplicationInfo.ClientNameChange
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.DisplayDebug
	 void                      UpdatePlayerLocation (  );                        		//  Engine.PlayerReplicationInfo.UpdatePlayerLocation
	 void                      UpdatePlayerState (  );                           		//  Engine.PlayerReplicationInfo.UpdatePlayerState
	 void                      eventUpdateCharacter (  );                        		// [ FUNC_Event ] Engine.PlayerReplicationInfo.UpdateCharacter
	 class UMaterial*          GetPortrait (  );                                 		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.GetPortrait
	 struct FString            GetLocationName (  );                             		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.GetLocationName
	 struct FString            GetHumanReadableName (  );                        		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.GetHumanReadableName
	 void                      Reset (  );                                       		//  Engine.PlayerReplicationInfo.Reset
	 void                      SetCharacterEquipItem ( int iBodyID_AF, int iBodyID_RSA, int iHeadID, int iHelmetID, int iAccessoryID );		//  Engine.PlayerReplicationInfo.SetCharacterEquipItem
	 void                      SetCharacterName ( struct FString S );            		//  Engine.PlayerReplicationInfo.SetCharacterName
	 void                      SetCharacterVoice ( struct FString S );           		//  Engine.PlayerReplicationInfo.SetCharacterVoice
	 void                      eventLoadLevelMark (  );                          		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerReplicationInfo.LoadLevelMark
	 void                      ServerSetUAV ( float Begin, float End );          		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.ServerSetUAV
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.Destroyed
	 void                      eventPostNetReceive (  );                         		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerReplicationInfo.PostNetReceive
	 bool                      NeedNetNotify (  );                               		// [ FUNC_Simulated ] Engine.PlayerReplicationInfo.NeedNetNotify
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Simulated | FUNC_Event ] Engine.PlayerReplicationInfo.PostNetBeginPlay
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.PlayerReplicationInfo.PostBeginPlay

	// Public Imports
	APlayerReplicationInfo(class APlayerReplicationInfo const &);
	APlayerReplicationInfo(void);
	class APlayerReplicationInfo &  operator=(class APlayerReplicationInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0190

// Class Engine.LiftExit
class DLL_IMPORT ALiftExit : public ANavigationPoint
{
public:
	struct FName                                       LiftTag;                                          		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	class AMover*                                      MyLift;                                           		// 0x0494 ( 0x0004 ) 
	unsigned char                                      SuggestedKeyFrame;                                		// 0x0498 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      KeyFrame;                                         		// 0x0499 ( 0x0001 ) 
	unsigned long                                      bLiftJumpExit:1;                                  		// 0x049C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bNoDoubleJump:1;                                  		// 0x049C ( 0x0004 )  [0x00000002][ CPF_Edit ]

	// UScript Functions
	 bool                      eventSuggestMovePreparation ( class APawn* Other );		// [ FUNC_Event ] Engine.LiftExit.SuggestMovePreparation
	 bool                      CanBeReachedFromLiftBy ( class APawn* Other );    		//  Engine.LiftExit.CanBeReachedFromLiftBy
	 void                      PostBeginPlay (  );                               		//  Engine.LiftExit.PostBeginPlay

	// Public Imports
	ALiftExit(class ALiftExit const &);
	class ALiftExit &  operator=(class ALiftExit const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.LiftCenter
class DLL_IMPORT ALiftCenter : public ANavigationPoint
{
public:
	struct FName                                       LiftTag;                                          		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	class AMover*                                      MyLift;                                           		// 0x0494 ( 0x0004 ) 
	struct FName                                       LiftTrigger;                                      		// 0x0498 ( 0x0004 ) [ CPF_Edit ]
	class ATrigger*                                    RecommendedTrigger;                               		// 0x049C ( 0x0004 ) 
	float                                              MaxDist2D;                                        		// 0x04A0 ( 0x0004 ) 
	struct FVector                                     LiftOffset;                                       		// 0x04A4 ( 0x000C ) 

	// UScript Functions
	 bool                      ProceedWithMove ( class APawn* Other );           		//  Engine.LiftCenter.ProceedWithMove
	 bool                      SuggestMovePreparation ( class APawn* Other );    		//  Engine.LiftCenter.SuggestMovePreparation
	 class AActor*             SpecialHandling ( class APawn* Other );           		//  Engine.LiftCenter.SpecialHandling
	 void                      PostBeginPlay (  );                               		//  Engine.LiftCenter.PostBeginPlay

	// Public Imports
	ALiftCenter(class ALiftCenter const &);
	ALiftCenter(void);
	class ALiftCenter &  operator=(class ALiftCenter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class Engine.SavedMove
class DLL_IMPORT ASavedMove : public AInfo
{
public:
	class ASavedMove*                                  NextMove;                                         		// 0x041C ( 0x0004 ) 
	float                                              TimeStamp;                                        		// 0x0420 ( 0x0004 ) 
	float                                              Delta;                                            		// 0x0424 ( 0x0004 ) 
	unsigned long                                      bRun:1;                                           		// 0x0428 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDuck:1;                                          		// 0x0428 ( 0x0004 )  [0x00000002]
	unsigned long                                      bProne:1;                                         		// 0x0428 ( 0x0004 )  [0x00000004]
	unsigned long                                      bPressedJump:1;                                   		// 0x0428 ( 0x0004 )  [0x00000008]
	unsigned long                                      bDoubleJump:1;                                    		// 0x0428 ( 0x0004 )  [0x00000010]
	unsigned char                                      DoubleClickMove;                                  		// 0x042C ( 0x0001 ) 
	unsigned char                                      SavedPhysics;                                     		// 0x042D ( 0x0001 ) 
	struct FVector                                     StartLocation;                                    		// 0x0430 ( 0x000C ) 
	struct FVector                                     StartRelativeLocation;                            		// 0x043C ( 0x000C ) 
	struct FVector                                     StartVelocity;                                    		// 0x0448 ( 0x000C ) 
	struct FVector                                     StartFloor;                                       		// 0x0454 ( 0x000C ) 
	struct FVector                                     SavedLocation;                                    		// 0x0460 ( 0x000C ) 
	struct FVector                                     SavedVelocity;                                    		// 0x046C ( 0x000C ) 
	struct FVector                                     SavedRelativeLocation;                            		// 0x0478 ( 0x000C ) 
	class AActor*                                      StartBase;                                        		// 0x0484 ( 0x0004 ) 
	class AActor*                                      EndBase;                                          		// 0x0488 ( 0x0004 ) 

	// UScript Functions
	 void                      SetMoveFor ( class APlayerController* P, float DeltaTime, struct FVector NewAccel, unsigned char InDoubleClick );		// [ FUNC_Final ] Engine.SavedMove.SetMoveFor
	 void                      SetInitialPosition ( class APawn* P );            		// [ FUNC_Final ] Engine.SavedMove.SetInitialPosition
	 struct FVector            GetStartLocation (  );                            		//  Engine.SavedMove.GetStartLocation
	 bool                      IsJumpMove (  );                                  		// [ FUNC_Final ] Engine.SavedMove.IsJumpMove
	 void                      PostUpdate ( class APlayerController* P );        		// [ FUNC_Final ] Engine.SavedMove.PostUpdate
	 void                      Clear (  );                                       		// [ FUNC_Final ] Engine.SavedMove.Clear

	// Public Imports
	ASavedMove(class ASavedMove const &);
	class ASavedMove &  operator=(class ASavedMove const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0070

// Class Engine.HUD
class DLL_IMPORT AHUD : public AActor
{
public:
	class APlayerController*                           PlayerOwner;                                      		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	class APawn*                                       PawnOwner;                                        		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	class APlayerReplicationInfo*                      PawnOwnerPRI;                                     		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
	class UConsole*                                    PlayerConsole;                                    		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	class AScoreBoard*                                 ScoreBoard;                                       		// 0x03D8 ( 0x0004 ) [ CPF_Edit ]
	class AScoreBoard*                                 ResultBoard;                                      		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	class AScoreBoard*                                 ResultBoardBooty;                                 		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	class AScoreBoard*                                 LocalStatsScreen;                                 		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      VoteMenu;                                         		// 0x03E8 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       WhiteColor;                                       		// 0x03EC ( 0x0004 ) 
	class FColor                                       DefaultShadow;                                    		// 0x03F0 ( 0x0004 ) 
	class FColor                                       RedColor;                                         		// 0x03F4 ( 0x0004 ) 
	class FColor                                       GreenColor;                                       		// 0x03F8 ( 0x0004 ) 
	class FColor                                       CyanColor;                                        		// 0x03FC ( 0x0004 ) 
	class FColor                                       BlueColor;                                        		// 0x0400 ( 0x0004 ) 
	class FColor                                       GoldColor;                                        		// 0x0404 ( 0x0004 ) 
	class FColor                                       PurpleColor;                                      		// 0x0408 ( 0x0004 ) 
	class FColor                                       TurqColor;                                        		// 0x040C ( 0x0004 ) 
	class FColor                                       GrayColor;                                        		// 0x0410 ( 0x0004 ) 
	class FColor                                       BlackColor;                                       		// 0x0414 ( 0x0004 ) 
	unsigned long                                      bShowVoteMenu:1;                                  		// 0x0418 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bHideHUD:1;                                       		// 0x0418 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bShowScoreBoard:1;                                		// 0x0418 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bShowDebugInfo:1;                                 		// 0x0418 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bDrawDebug:1;                                     		// 0x0418 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bDrawDebug2:1;                                    		// 0x0418 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bDrawDebug3:1;                                    		// 0x0418 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bDrawDebug4:1;                                    		// 0x0418 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	unsigned long                                      bShowBadConnectionAlert:1;                        		// 0x0418 ( 0x0004 )  [0x00000100][ CPF_Edit ]
	unsigned long                                      bShowChanDebug:1;                                 		// 0x0418 ( 0x0004 )  [0x00000200][ CPF_Edit ]
	unsigned long                                      bShowMapInfo:1;                                   		// 0x0418 ( 0x0004 )  [0x00000400][ CPF_Edit ]
	unsigned long                                      bMessageBeep:1;                                   		// 0x0418 ( 0x0004 )  [0x00000800][ CPF_Edit ]
	unsigned long                                      bShowWeaponInfo:1;                                		// 0x0418 ( 0x0004 )  [0x00001000][ CPF_Edit ]
	unsigned long                                      bShowPersonalInfo:1;                              		// 0x0418 ( 0x0004 )  [0x00002000][ CPF_Edit ]
	unsigned long                                      bShowPoints:1;                                    		// 0x0418 ( 0x0004 )  [0x00004000][ CPF_Edit ]
	unsigned long                                      bShowWeaponBar:1;                                 		// 0x0418 ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      bCrosshairShow:1;                                 		// 0x0418 ( 0x0004 )  [0x00010000][ CPF_Edit ]
	unsigned long                                      bShowPortrait:1;                                  		// 0x0418 ( 0x0004 )  [0x00020000][ CPF_Edit ]
	unsigned long                                      bShowPortraitVC:1;                                		// 0x0418 ( 0x0004 )  [0x00040000][ CPF_Edit ]
	unsigned long                                      bNoEnemyNames:1;                                  		// 0x0418 ( 0x0004 )  [0x00080000]
	unsigned long                                      bSmallWeaponBar:1;                                		// 0x0418 ( 0x0004 )  [0x00100000]
	unsigned long                                      bBuiltMOTD:1;                                     		// 0x0418 ( 0x0004 )  [0x00200000]
	unsigned long                                      bShowLocalStats:1;                                		// 0x0418 ( 0x0004 )  [0x00400000]
	class FColor                                       ConsoleColor;                                     		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	class APlayerReplicationInfo*                      PortraitPRI;                                      		// 0x0420 ( 0x0004 ) 
	struct FString                                     ProgressFontName;                                 		// 0x0424 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UFont*                                       ProgressFontFont;                                 		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     OverrideConsoleFontName;                          		// 0x0434 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class UFont*                                       OverrideConsoleFont;                              		// 0x0440 ( 0x0004 ) [ CPF_Edit ]
	float                                              ProgressFadeTime;                                 		// 0x0444 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       MOTDColor;                                        		// 0x0448 ( 0x0004 ) [ CPF_Edit ]
	float                                              HudScale;                                         		// 0x044C ( 0x0004 ) [ CPF_Edit ]
	float                                              HudOpacity;                                       		// 0x0450 ( 0x0004 ) [ CPF_Edit ]
	float                                              HudCanvasScale;                                   		// 0x0454 ( 0x0004 ) [ CPF_Edit ]
	int                                                CrosshairStyle;                                   		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	float                                              CrosshairScale;                                   		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	float                                              CrosshairOpacity;                                 		// 0x0460 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       CrossHairColor;                                   		// 0x0464 ( 0x0004 ) [ CPF_Edit ]
	float                                              ResScaleX;                                        		// 0x0468 ( 0x0004 ) [ CPF_Transient ]
	float                                              ResScaleY;                                        		// 0x046C ( 0x0004 ) [ CPF_Transient ]
	int                                                ConsoleMessageCount;                              		// 0x0470 ( 0x0004 ) 
	int                                                ConsoleFontSize;                                  		// 0x0474 ( 0x0004 ) 
	int                                                MessageFontOffset;                                		// 0x0478 ( 0x0004 ) 
	struct FConsoleMessage                             TextMessages[ 0x08 ];                             		// 0x047C ( 0x00C0 ) [ CPF_NeedCtorLink ]
	float                                              ConsoleMessagePosX;                               		// 0x053C ( 0x0004 ) [ CPF_Edit ]
	float                                              ConsoleMessagePosY;                               		// 0x0540 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     FontArrayNames[ 0x09 ];                           		// 0x0544 ( 0x006C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UFont*                                       FontArrayFonts[ 0x09 ];                           		// 0x05B0 ( 0x0024 ) 
	int                                                FontScreenWidthMedium[ 0x09 ];                    		// 0x05D4 ( 0x0024 ) 
	int                                                FontScreenWidthSmall[ 0x09 ];                     		// 0x05F8 ( 0x0024 ) 
	struct FString                                     MOTD[ 0x04 ];                                     		// 0x061C ( 0x0030 ) [ CPF_NeedCtorLink ]
	int                                                MOTDState;                                        		// 0x064C ( 0x0004 ) 
	float                                              LastPickupTime;                                   		// 0x0650 ( 0x0004 ) 
	float                                              LastAmmoPickupTime;                               		// 0x0654 ( 0x0004 ) 
	float                                              LastWeaponPickupTime;                             		// 0x0658 ( 0x0004 ) 
	float                                              LastHealthPickupTime;                             		// 0x065C ( 0x0004 ) 
	float                                              LastArmorPickupTime;                              		// 0x0660 ( 0x0004 ) 
	float                                              LastHeliPickupTime;                               		// 0x0664 ( 0x0004 ) 
	float                                              LastUAVPickupTime;                                		// 0x0668 ( 0x0004 ) 
	float                                              LastAirStirkePickupTime;                          		// 0x066C ( 0x0004 ) 
	float                                              DiedTime;                                         		// 0x0670 ( 0x0004 ) 
	float                                              GoWalkingBeginTime;                               		// 0x0674 ( 0x0004 ) 
	float                                              LastVoiceGain;                                    		// 0x0678 ( 0x0004 ) [ CPF_Const ]
	float                                              LastVoiceGainTime;                                		// 0x067C ( 0x0004 ) [ CPF_Const ]
	int                                                LastPlayerIDTalking;                              		// 0x0680 ( 0x0004 ) 
	float                                              LastPlayerIDTalkingTime;                          		// 0x0684 ( 0x0004 ) [ CPF_Const ]
	class ASceneSubtitles*                             SubTitles;                                        		// 0x0688 ( 0x0004 ) 
	class TArray< class AHudOverlay* >                 Overlays;                                         		// 0x068C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SpecPlayerName;                                   		// 0x0698 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnPostRender__Delegate;                         		// 0x06A4 ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnBuildMOTD__Delegate;                          		// 0x06AC ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      InsertUsingSkillList ( int SkillID, int SubSkillID );		// [ FUNC_Simulated ] Engine.HUD.InsertUsingSkillList
	 int                       GetCurGameTime (  );                              		//  Engine.HUD.GetCurGameTime
	 void                      CacheSpecialPositions (  );                       		// [ FUNC_Simulated ] Engine.HUD.CacheSpecialPositions
	 float                     GetUAVScanLineTexturePos (  );                    		// [ FUNC_Simulated ] Engine.HUD.GetUAVScanLineTexturePos
	 void                      UpdateUAV (  );                                   		// [ FUNC_Simulated ] Engine.HUD.UpdateUAV
	 bool                      IsUAVOn (  );                                     		// [ FUNC_Simulated ] Engine.HUD.IsUAVOn
	 bool                      IsUAVScanning (  );                               		// [ FUNC_Simulated ] Engine.HUD.IsUAVScanning
	 float                     GetUAVScanProgress (  );                          		// [ FUNC_Simulated ] Engine.HUD.GetUAVScanProgress
	 void                      OnClientReceiveDeathMessage ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.HUD.OnClientReceiveDeathMessage
	 void                      OnClientReceiveFlyingDefenceBotDeathMessage ( class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject );		//  Engine.HUD.OnClientReceiveFlyingDefenceBotDeathMessage
	 void                      OnClientReceiveHeliDeathMessage ( class APlayerController* P, class APlayerReplicationInfo* attackerPRI, class APlayerReplicationInfo* victimPRI, class UObject* OptionalObject );		//  Engine.HUD.OnClientReceiveHeliDeathMessage
	 void                      NotifyTakeHit ( struct FVector HitLocation, int Damage, class UClass* DamageType, struct FVector Momentum, int CollisionPart );		//  Engine.HUD.NotifyTakeHit
	 void                      NotifyDeath ( class APawn* P );                   		//  Engine.HUD.NotifyDeath
	 void                      OnEndChangedHost (  );                            		//  Engine.HUD.OnEndChangedHost
	 void                      RemoveHudOverlay ( class AHudOverlay* Overlay );  		// [ FUNC_Simulated ] Engine.HUD.RemoveHudOverlay
	 void                      AddHudOverlay ( class AHudOverlay* Overlay );     		// [ FUNC_Simulated ] Engine.HUD.AddHudOverlay
	 void                      DisplayHit ( struct FVector HitDir, int Damage, class UClass* DamageType );		//  Engine.HUD.DisplayHit
	 void                      DrawTargeting ( class UCanvas* C );               		// [ FUNC_Simulated ] Engine.HUD.DrawTargeting
	 void                      eventAnnouncementPlayed ( struct FString AnnouncerSound, unsigned char Switch );		// [ FUNC_Event ] Engine.HUD.AnnouncementPlayed
	 class UFont*              LoadProgressFont (  );                            		// [ FUNC_Simulated ] Engine.HUD.LoadProgressFont
	 class UFont*              LargerFontThan ( class UFont* aFont );            		//  Engine.HUD.LargerFontThan
	 class UFont*              GetMediumFont ( float Size );                     		//  Engine.HUD.GetMediumFont
	 class UFont*              GetMediumFontFor ( class UCanvas* Canvas );       		//  Engine.HUD.GetMediumFontFor
	 class UFont*              GetFontSizeIndex ( class UCanvas* C, int FontSize );		//  Engine.HUD.GetFontSizeIndex
	 class UFont*              GetConsoleFont ( class UCanvas* C );              		//  Engine.HUD.GetConsoleFont
	 class UFont*              LoadFont ( int i );                               		// [ FUNC_Simulated ] Engine.HUD.LoadFont
	 class UFont*              LoadFontStatic ( int i );                         		//  Engine.HUD.LoadFontStatic
	 void                      SetCropping ( bool Active );                      		// [ FUNC_Simulated ] Engine.HUD.SetCropping
	 void                      DrawCrosshair ( class UCanvas* C );               		// [ FUNC_Simulated ] Engine.HUD.DrawCrosshair
	 void                      SetTargeting ( bool bShow, struct FVector TargetLocation, float Size );		// [ FUNC_Simulated ] Engine.HUD.SetTargeting
	 void                      FadeZoom (  );                                    		//  Engine.HUD.FadeZoom
	 void                      execShrinkHUD (  );                               		// [ FUNC_Exec ] Engine.HUD.ShrinkHUD
	 void                      execGrowHUD (  );                                 		// [ FUNC_Exec ] Engine.HUD.GrowHUD
	 void                      AddTextMessage ( struct FString M, class UClass* MessageClass, class APlayerReplicationInfo* PRI );		//  Engine.HUD.AddTextMessage
	 void                      DisplayMessages ( class UCanvas* C );             		//  Engine.HUD.DisplayMessages
	 void                      DisplayPortrait ( class APlayerReplicationInfo* PRI );		//  Engine.HUD.DisplayPortrait
	 void                      Message ( class APlayerReplicationInfo* PRI, struct FString Msg, struct FName MsgType );		// [ FUNC_Simulated ] Engine.HUD.Message
	 void                      LinkActors (  );                                  		// [ FUNC_Simulated ] Engine.HUD.LinkActors
	 void                      execShowFont (  );                                		// [ FUNC_Exec ] Engine.HUD.ShowFont
	 void                      execShowHud (  );                                 		// [ FUNC_Exec ] Engine.HUD.ShowHud
	 void                      SetScoreBoardClass ( class UClass* ScoreboardClass, class UClass* ResultBoardClass, class UClass* ResultBoardBootyClass );		// [ FUNC_Simulated ] Engine.HUD.SetScoreBoardClass
	 void                      DrawTypingPrompt ( class UCanvas* C, struct FString Text, int pos );		// [ FUNC_Simulated ] Engine.HUD.DrawTypingPrompt
	 void                      LocalizedMessage2 ( class UClass* Message, int Switch, struct FString CriticalString );		// [ FUNC_Simulated ] Engine.HUD.LocalizedMessage2
	 void                      LocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, struct FString CriticalString );		// [ FUNC_Simulated ] Engine.HUD.LocalizedMessage
	 bool                      IsInCinematic (  );                               		//  Engine.HUD.IsInCinematic
	 void                      DisplayBadConnectionAlert ( class UCanvas* C );   		//  Engine.HUD.DisplayBadConnectionAlert
	 void                      TutorialEvent ( struct FString S, struct FName Type, struct FName reserv );		//  Engine.HUD.TutorialEvent
	 void                      CallRadioMessage ( int iKey, int iReservation1, int iReservation2 );		//  Engine.HUD.CallRadioMessage
	 void                      CallEvent ( bool ItemCheck, int iReservation1, int iReservation2 );		//  Engine.HUD.CallEvent
	 void                      CallSkill ( int iKey, bool bRequire, bool iSucess );		//  Engine.HUD.CallSkill
	 bool                      DrawLevelAction ( class UCanvas* C );             		//  Engine.HUD.DrawLevelAction
	 void                      DrawGMSpectatingHud ( class UCanvas* C );         		//  Engine.HUD.DrawGMSpectatingHud
	 void                      DrawSpectatingHud ( class UCanvas* C );           		//  Engine.HUD.DrawSpectatingHud
	 void                      DrawHUD ( class UCanvas* C );                     		//  Engine.HUD.DrawHUD
	 void                      ResetHud (  );                                    		//  Engine.HUD.ResetHud
	 void                      DisplayProgressMessages ( class UCanvas* C );     		// [ FUNC_Simulated ] Engine.HUD.DisplayProgressMessages
	 void                      DrawRoute (  );                                   		// [ FUNC_Simulated ] Engine.HUD.DrawRoute
	 void                      CanvasDrawActors ( class UCanvas* C, bool bClearedZBuffer );		//  Engine.HUD.CanvasDrawActors
	 void                      SetInstructionKeyText ( struct FString Text );    		// [ FUNC_Simulated ] Engine.HUD.SetInstructionKeyText
	 void                      SetInstructionText ( struct FString Text );       		// [ FUNC_Simulated ] Engine.HUD.SetInstructionText
	 void                      DrawInstructionGfx ( class UCanvas* C );          		// [ FUNC_Simulated ] Engine.HUD.DrawInstructionGfx
	 void                      DrawCinematicHUD ( class UCanvas* C );            		// [ FUNC_Simulated ] Engine.HUD.DrawCinematicHUD
	 void                      DrawDebugStates ( class UCanvas* C );             		//  Engine.HUD.DrawDebugStates
	 void                      DrawChangeHostGuest ( class UCanvas* C );         		//  Engine.HUD.DrawChangeHostGuest
	 void                      eventPostRender ( class UCanvas* Canvas );        		// [ FUNC_Simulated | FUNC_Event ] Engine.HUD.PostRender
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		//  Engine.HUD.DisplayDebug
	 bool                      NeedToDrawSpectatingHud (  );                     		// [ FUNC_Simulated ] Engine.HUD.NeedToDrawSpectatingHud
	 void                      ResetKillMessageTexture (  );                     		// [ FUNC_Simulated ] Engine.HUD.ResetKillMessageTexture
	 void                      DrawDebug3 ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug3
	 void                      DrawDebug_HostPoint ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_HostPoint
	 void                      DrawDebug2 ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug2
	 void                      DrawDebug_AllPlayerStates2 ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_AllPlayerStates2
	 void                      DrawDebug ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug
	 void                      DrawDebug_AllPawnNetStates ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_AllPawnNetStates
	 void                      DrawDebug_AllPlayerStates ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_AllPlayerStates
	 void                      DrawDebug_Helicopter ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_Helicopter
	 void                      DrawDebug_Time ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_Time
	 void                      DrawDebug_Spectating ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_Spectating
	 void                      DrawDebug_SpectatingAllPlayers ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_SpectatingAllPlayers
	 void                      DrawDebug_GSSS ( class UCanvas* C, int X, int dy, int* Y );		//  Engine.HUD.DrawDebug_GSSS
	 void                      eventPostRenderActors ( class UCanvas* Canvas );  		// [ FUNC_Simulated | FUNC_Event ] Engine.HUD.PostRenderActors
	 void                      GetLocalStatsScreen (  );                         		//  Engine.HUD.GetLocalStatsScreen
	 void                      eventConnectFailure ( struct FString FailCode, struct FString URL );		// [ FUNC_Event ] Engine.HUD.ConnectFailure
	 void                      CheckCountdown ( class AGameReplicationInfo* GRI );		//  Engine.HUD.CheckCountdown
	 void                      eventWorldSpaceOverlays (  );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.HUD.WorldSpaceOverlays
	 void                      execShowDebug3 (  );                              		// [ FUNC_Exec ] Engine.HUD.ShowDebug3
	 void                      execShowDebug2 (  );                              		// [ FUNC_Exec ] Engine.HUD.ShowDebug2
	 void                      execShowDebug1 (  );                              		// [ FUNC_Exec ] Engine.HUD.ShowDebug1
	 void                      execShowDebugChan (  );                           		// [ FUNC_Exec ] Engine.HUD.ShowDebugChan
	 void                      execShowDebug (  );                               		// [ FUNC_Exec ] Engine.HUD.ShowDebug
	 void                      execNextStats (  );                               		// [ FUNC_Exec ] Engine.HUD.NextStats
	 void                      execShowStats (  );                               		// [ FUNC_Exec ] Engine.HUD.ShowStats
	 void                      execHideMapInfo (  );                             		// [ FUNC_Exec ] Engine.HUD.HideMapInfo
	 void                      execShowMapInfo (  );                             		// [ FUNC_Exec ] Engine.HUD.ShowMapInfo
	 void                      execHideScores (  );                              		// [ FUNC_Exec ] Engine.HUD.HideScores
	 void                      execShowScores (  );                              		// [ FUNC_Exec ] Engine.HUD.ShowScores
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.HUD.Destroyed
	 void                      CreateKeyMenus (  );                              		// [ FUNC_Simulated ] Engine.HUD.CreateKeyMenus
	 void                      Reset (  );                                       		//  Engine.HUD.Reset
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] Engine.HUD.PostBeginPlay
	 void                      BuildMOTD (  );                                   		// [ FUNC_Simulated ] Engine.HUD.BuildMOTD
	 void                      DrawCustomBeacon ( class UCanvas* C, class APawn* P, float ScreenLocX, float ScreenLocY );		//  Engine.HUD.DrawCustomBeacon
	 void                      AllDeleteAASNotice (  );                          		// [ FUNC_Simulated ] Engine.HUD.AllDeleteAASNotice
	 void                      PushAASNotice ( struct FString sNotice, float beginTime, unsigned char byLevel );		// [ FUNC_Simulated ] Engine.HUD.PushAASNotice
	 void                      AllDeleteGameNotice (  );                         		// [ FUNC_Simulated ] Engine.HUD.AllDeleteGameNotice
	 void                      PushGameNotice ( struct FString sGameNotice );    		// [ FUNC_Simulated ] Engine.HUD.PushGameNotice
	 void                      AllDeleteSuppliesPositions (  );                  		// [ FUNC_Simulated ] Engine.HUD.AllDeleteSuppliesPositions
	 void                      DeleteSuppliesPositions ( class AActor* act );    		// [ FUNC_Simulated ] Engine.HUD.DeleteSuppliesPositions
	 void                      CacheSuppliesPositions ( class AActor* act );     		// [ FUNC_Simulated ] Engine.HUD.CacheSuppliesPositions
	 void                      ChangeWeaponSlot5Hud ( class AwWeapon* newWeapon, bool bAddSkill );		//  Engine.HUD.ChangeWeaponSlot5Hud
	 void                      ChangeWeaponSlot6Hud ( class AwWeapon* newWeapon );		//  Engine.HUD.ChangeWeaponSlot6Hud
	 void                      OnBuildMOTD ( class AHUD* Sender );               		//  Engine.HUD.OnBuildMOTD
	 void                      OnPostRender ( class AHUD* Sender, class UCanvas* C );		//  Engine.HUD.OnPostRender
	 void                      CalculateMinimapSize ( float* fWidth, float* fHeight );		//  Engine.HUD.CalculateMinimapSize
	 void                      CalculateWorldPostionToMinimapPosition ( struct FVector Location, float* mx, float* my );		//  Engine.HUD.CalculateWorldPostionToMinimapPosition
	 void                      StaticDrawCanvasLine ( class UCanvas* C, float X1, float Y1, float X2, float Y2, class FColor LineColor );		// [ FUNC_Final | FUNC_Native ] Engine.HUD.StaticDrawCanvasLine
	 void                      DrawCanvasLine ( float X1, float Y1, float X2, float Y2, class FColor LineColor );		// [ FUNC_Final | FUNC_Native ] Engine.HUD.DrawCanvasLine
	 void                      DrawDirectionalArrow ( struct FVector InLocation, struct FRotator InRotation, class FColor InColor, float InDrawScale );		// [ FUNC_Final | FUNC_Native ] Engine.HUD.DrawDirectionalArrow
	 void                      DrawSphere ( struct FVector Base, class FColor Color, float Radius, int NumDivisions );		// [ FUNC_Final | FUNC_Native ] Engine.HUD.DrawSphere
	 void                      DrawCircle ( struct FVector Base, struct FVector X, struct FVector Y, class FColor Color, float Radius, int NumSides );		// [ FUNC_Final | FUNC_Native ] Engine.HUD.DrawCircle
	 void                      DrawBox ( struct FVector Min, struct FVector Max, class FColor Color );		// [ FUNC_Final | FUNC_Native ] Engine.HUD.DrawBox
	 void                      Draw3DLine ( struct FVector Start, struct FVector End, class FColor LineColor );		// [ FUNC_Final | FUNC_Native ] Engine.HUD.Draw3DLine

	// Public Imports
	AHUD(class AHUD const &);
	class AHUD &  operator=(class AHUD const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  delegateOnBuildMOTD(class AHUD *);
	void  delegateOnPostRender(class AHUD *,class UCanvas *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x02EC

// Class Engine.WarpZoneMarker
class DLL_IMPORT AWarpZoneMarker : public ASmallNavigationPoint
{
public:
	class AWarpZoneInfo*                               markedWarpZone;                                   		// 0x0490 ( 0x0004 ) 
	class AActor*                                      TriggerActor;                                     		// 0x0494 ( 0x0004 ) 
	class AActor*                                      TriggerActor2;                                    		// 0x0498 ( 0x0004 ) 

	// UScript Functions
	 class AActor*             SpecialHandling ( class APawn* Other );           		//  Engine.WarpZoneMarker.SpecialHandling
	 void                      FindTriggerActor (  );                            		//  Engine.WarpZoneMarker.FindTriggerActor
	 void                      PostBeginPlay (  );                               		//  Engine.WarpZoneMarker.PostBeginPlay

	// Public Imports
	AWarpZoneMarker(class AWarpZoneMarker const &);
	AWarpZoneMarker(void);
	class AWarpZoneMarker &  operator=(class AWarpZoneMarker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.Trigger
class DLL_IMPORT ATrigger : public ATriggers
{
public:
	unsigned char                                      TriggerType;                                      		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	struct FString                                     Message;                                          		// 0x03CC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	int                                                UniqueID;                                         		// 0x03D8 ( 0x0004 ) [ CPF_Edit | CPF_Localized ]
	unsigned long                                      bTriggerOnceOnly:1;                               		// 0x03DC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bInitiallyActive:1;                               		// 0x03DC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	class UClass*                                      ClassProximityType;                               		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              RepeatTriggerTime;                                		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              ReTriggerDelay;                                   		// 0x03E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              TriggerTime;                                      		// 0x03EC ( 0x0004 ) 
	float                                              DamageThreshold;                                  		// 0x03F0 ( 0x0004 ) [ CPF_Edit ]
	class AActor*                                      TriggerActor;                                     		// 0x03F4 ( 0x0004 ) 
	class AActor*                                      TriggerActor2;                                    		// 0x03F8 ( 0x0004 ) 
	unsigned long                                      bSavedInitialCollision:1;                         		// 0x03FC ( 0x0004 )  [0x00000001]
	unsigned long                                      bSavedInitialActive:1;                            		// 0x03FC ( 0x0004 )  [0x00000002]

	// UScript Functions
	 void                      UnTouch ( class AActor* Other );                  		//  Engine.Trigger.UnTouch
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.Trigger.TakeDamage
	 void                      Timer (  );                                       		//  Engine.Trigger.Timer
	 void                      Touch ( class AActor* Other );                    		//  Engine.Trigger.Touch
	 class AActor*             FindInstigator ( class AActor* Other );           		//  Engine.Trigger.FindInstigator
	 bool                      IsRelevant ( class AActor* Other );               		//  Engine.Trigger.IsRelevant
	 void                      CheckTouchList (  );                              		//  Engine.Trigger.CheckTouchList
	 class AActor*             SpecialHandling ( class APawn* Other );           		//  Engine.Trigger.SpecialHandling
	 void                      FindTriggerActor (  );                            		//  Engine.Trigger.FindTriggerActor
	 void                      Reset (  );                                       		//  Engine.Trigger.Reset
	 void                      PostBeginPlay (  );                               		//  Engine.Trigger.PostBeginPlay
	 void                      PreBeginPlay (  );                                		//  Engine.Trigger.PreBeginPlay
	 bool                      SelfTriggered (  );                               		//  Engine.Trigger.SelfTriggered
	 void                      PlayerToucherDied ( class APawn* P );             		//  Engine.Trigger.PlayerToucherDied

	// Public Imports
	ATrigger(class ATrigger const &);
	class ATrigger &  operator=(class ATrigger const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.AIMarker
class DLL_IMPORT AAIMarker : public ASmallNavigationPoint
{
public:
	class AAIScript*                                   markedScript;                                     		// 0x0490 ( 0x0004 ) 

	// Public Imports
	AAIMarker(class AAIMarker const &);
	AAIMarker(void);
	class AAIMarker &  operator=(class AAIMarker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.InventorySpot
class DLL_IMPORT AInventorySpot : public ASmallNavigationPoint
{
public:
	class APickup*                                     markedItem;                                       		// 0x0490 ( 0x0004 ) 
	class AwPickUpBase*                                myPickupBase;                                     		// 0x0494 ( 0x0004 ) 
	unsigned long                                      bSuperPickup:1;                                   		// 0x0498 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 float                     eventDetourWeight ( class APawn* Other, float PathWeight );		// [ FUNC_Event ] Engine.InventorySpot.DetourWeight
	 class AActor*             GetMoveTargetFor ( class AAIController* B, float MaxWait );		//  Engine.InventorySpot.GetMoveTargetFor

	// Public Imports
	AInventorySpot(class AInventorySpot const &);
	AInventorySpot(void);
	class AInventorySpot &  operator=(class AInventorySpot const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.PlayerStart
class DLL_IMPORT APlayerStart : public ASmallNavigationPoint
{
public:
	unsigned char                                      TeamNumber;                                       		// 0x0490 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bSinglePlayerStart:1;                             		// 0x0494 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bCoopStart:1;                                     		// 0x0494 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bEnabled:1;                                       		// 0x0494 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bPrimaryStart:1;                                  		// 0x0494 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	struct FString                                     ApplyGameInfo;                                    		// 0x0498 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              LastSpawnFailTime;                                		// 0x04A4 ( 0x0004 ) 
	class TArray< class ASatellite* >                  Satellites;                                       		// 0x04A8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	APlayerStart(class APlayerStart const &);
	APlayerStart(void);
	class APlayerStart &  operator=(class APlayerStart const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.PlayerStart_SD
class DLL_IMPORT APlayerStart_SD : public APlayerStart
{
public:
	unsigned char                                      eTeamType;                                        		// 0x04B4 ( 0x0001 ) [ CPF_Edit ]

	// Public Imports
	APlayerStart_SD(class APlayerStart_SD const &);
	class APlayerStart_SD &  operator=(class APlayerStart_SD const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.Teleporter
class DLL_IMPORT ATeleporter : public ASmallNavigationPoint
{
public:
	struct FString                                     URL;                                              		// 0x0490 ( 0x000C ) [ CPF_Edit | CPF_Net | CPF_NeedCtorLink ]
	struct FName                                       ProductRequired;                                  		// 0x049C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bChangesVelocity:1;                               		// 0x04A0 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Net ]
	unsigned long                                      bChangesYaw:1;                                    		// 0x04A0 ( 0x0004 )  [0x00000002][ CPF_Edit | CPF_Net ]
	unsigned long                                      bReversesX:1;                                     		// 0x04A0 ( 0x0004 )  [0x00000004][ CPF_Edit | CPF_Net ]
	unsigned long                                      bReversesY:1;                                     		// 0x04A0 ( 0x0004 )  [0x00000008][ CPF_Edit | CPF_Net ]
	unsigned long                                      bReversesZ:1;                                     		// 0x04A0 ( 0x0004 )  [0x00000010][ CPF_Edit | CPF_Net ]
	unsigned long                                      bEnabled:1;                                       		// 0x04A0 ( 0x0004 )  [0x00000020][ CPF_Edit | CPF_Net ]
	struct FVector                                     TargetVelocity;                                   		// 0x04A4 ( 0x000C ) [ CPF_Edit | CPF_Net ]
	class AActor*                                      TriggerActor;                                     		// 0x04B0 ( 0x0004 ) 
	class AActor*                                      TriggerActor2;                                    		// 0x04B4 ( 0x0004 ) 
	float                                              LastFired;                                        		// 0x04B8 ( 0x0004 ) 

	// UScript Functions
	 int                       eventSpecialCost ( class APawn* Other, class UReachSpec* Path );		// [ FUNC_Event ] Engine.Teleporter.SpecialCost
	 class AActor*             SpecialHandling ( class APawn* Other );           		//  Engine.Teleporter.SpecialHandling
	 void                      PostTouch ( class AActor* Other );                		// [ FUNC_Simulated ] Engine.Teleporter.PostTouch
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Event ] Engine.Teleporter.Touch
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.Teleporter.Trigger
	 bool                      Accept ( class AActor* Incoming, class AActor* Source );		// [ FUNC_Simulated ] Engine.Teleporter.Accept
	 void                      FindTriggerActor (  );                            		//  Engine.Teleporter.FindTriggerActor
	 void                      PostBeginPlay (  );                               		//  Engine.Teleporter.PostBeginPlay

	// Public Imports
	ATeleporter(class ATeleporter const &);
	ATeleporter(void);
	class ATeleporter &  operator=(class ATeleporter const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x002C

// Class Engine.ZoneInfo
class DLL_IMPORT AZoneInfo : public AInfo
{
public:
	class ASkyZoneInfo*                                SkyZone;                                          		// 0x041C ( 0x0004 ) 
	struct FName                                       ZoneTag;                                          		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     LocationName;                                     		// 0x0424 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	float                                              KillZ;                                            		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      KillZType;                                        		// 0x0434 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bSoftKillZ:1;                                     		// 0x0438 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bTerrainZone:1;                                   		// 0x0438 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bDistanceFog:1;                                   		// 0x0438 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bClearToFogColor:1;                               		// 0x0438 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	class TArray< class ATerrainInfo* >                Terrains;                                         		// 0x043C ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	struct FVector                                     AmbientVectorShaderOff;                           		// 0x0448 ( 0x000C ) 
	struct FVector                                     AmbientVector;                                    		// 0x0454 ( 0x000C ) 
	float                                              GammaFactor;                                      		// 0x0460 ( 0x0004 ) [ CPF_Edit ]
	int                                                AmbientBrightness;                                		// 0x0464 ( 0x0004 ) [ CPF_Edit ]
	int                                                AmbientBrightnessShaderOff;                       		// 0x0468 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      AmbientHue;                                       		// 0x046C ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      AmbientSaturation;                                		// 0x046D ( 0x0001 ) [ CPF_Edit ]
	class FColor                                       GroundColor;                                      		// 0x0470 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       SkyColor;                                         		// 0x0474 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       DistanceFogColor;                                 		// 0x0478 ( 0x0004 ) [ CPF_Edit ]
	float                                              DistanceFogStart;                                 		// 0x047C ( 0x0004 ) [ CPF_Edit ]
	float                                              DistanceFogEnd;                                   		// 0x0480 ( 0x0004 ) [ CPF_Edit ]
	float                                              RealDistanceFogEnd;                               		// 0x0484 ( 0x0004 ) [ CPF_Transient ]
	float                                              DistanceFogEndMin;                                		// 0x0488 ( 0x0004 ) [ CPF_Edit ]
	float                                              DistanceFogBlendTime;                             		// 0x048C ( 0x0004 ) [ CPF_Edit ]
	float                                              TexUPanSpeed;                                     		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	float                                              TexVPanSpeed;                                     		// 0x0494 ( 0x0004 ) [ CPF_Edit ]
	float                                              DramaticLightingScale;                            		// 0x0498 ( 0x0004 ) [ CPF_Edit ]
	class UI3DL2Listener*                              ZoneEffect;                                       		// 0x049C ( 0x0004 ) [ CPF_Edit | CPF_EditInline ]
	unsigned long                                      bLonelyZone:1;                                    		// 0x04A0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class TArray< class AZoneInfo* >                   ManualExcludes;                                   		// 0x04A4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline ]

	// UScript Functions
	 void                      eventActorLeaving ( class AActor* Other );        		// [ FUNC_Event ] Engine.ZoneInfo.ActorLeaving
	 void                      eventActorEntered ( class AActor* Other );        		// [ FUNC_Event ] Engine.ZoneInfo.ActorEntered
	 void                      PreBeginPlay (  );                                		// [ FUNC_Simulated ] Engine.ZoneInfo.PreBeginPlay
	 void                      LinkToSkybox (  );                                		// [ FUNC_Simulated ] Engine.ZoneInfo.LinkToSkybox
	 void                      ZoneActors ( class UClass* baseClass, class AActor** Actor );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x0134 ] Engine.ZoneInfo.ZoneActors

	// Public Imports
	AZoneInfo(class AZoneInfo const &);
	AZoneInfo(void);
	class AZoneInfo &  operator=(class AZoneInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0094

// Class Engine.WarpZoneInfo
class DLL_IMPORT AWarpZoneInfo : public AZoneInfo
{
public:
	struct FString                                     OtherSideURL;                                     		// 0x04B0 ( 0x000C ) [ CPF_Edit | CPF_Net | CPF_NeedCtorLink ]
	struct FName                                       ThisTag;                                          		// 0x04BC ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	unsigned long                                      bNoTeleFrag:1;                                    		// 0x04C0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	int                                                iWarpZone;                                        		// 0x04C4 ( 0x0004 ) [ CPF_Const ]
	struct FCoords                                     WarpCoords;                                       		// 0x04C8 ( 0x0030 ) [ CPF_Const ]
	class AWarpZoneInfo*                               OtherSideActor;                                   		// 0x04F8 ( 0x0004 ) [ CPF_Net | CPF_Transient ]
	class UObject*                                     OtherSideLevel;                                   		// 0x04FC ( 0x0004 ) [ CPF_Transient ]
	struct FString                                     Destinations[ 0x08 ];                             		// 0x0500 ( 0x0060 ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                numDestinations;                                  		// 0x0560 ( 0x0004 ) 

	// UScript Functions
	 void                      eventActorLeaving ( class AActor* Other );        		// [ FUNC_Event ] Engine.WarpZoneInfo.ActorLeaving
	 void                      ActorEntered ( class AActor* Other );             		// [ FUNC_Simulated ] Engine.WarpZoneInfo.ActorEntered
	 void                      eventForceGenerate (  );                          		// [ FUNC_Simulated | FUNC_Event ] Engine.WarpZoneInfo.ForceGenerate
	 void                      eventGenerate (  );                               		// [ FUNC_Simulated | FUNC_Event ] Engine.WarpZoneInfo.Generate
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.WarpZoneInfo.Trigger
	 void                      PreBeginPlay (  );                                		//  Engine.WarpZoneInfo.PreBeginPlay
	 void                      UnWarp ( struct FVector* loc, struct FVector* Vel, struct FRotator* R );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x013B ] Engine.WarpZoneInfo.UnWarp
	 void                      Warp ( struct FVector* loc, struct FVector* Vel, struct FRotator* R );		// [ FUNC_Final | FUNC_Native ] [ iNative : 0x013A ] Engine.WarpZoneInfo.Warp

	// Public Imports
	AWarpZoneInfo(class AWarpZoneInfo const &);
	AWarpZoneInfo(void);
	class AWarpZoneInfo &  operator=(class AWarpZoneInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00B4

// Class Engine.Projectile
class DLL_IMPORT AProjectile : public AActor
{
public:
	float                                              Speed;                                            		// 0x03C8 ( 0x0004 ) 
	float                                              MaxSpeed;                                         		// 0x03CC ( 0x0004 ) 
	float                                              TossZ;                                            		// 0x03D0 ( 0x0004 ) 
	class AActor*                                      ZeroCollider;                                     		// 0x03D4 ( 0x0004 ) 
	unsigned long                                      bSwitchToZeroCollision:1;                         		// 0x03D8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNoFX:1;                                          		// 0x03D8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bReadyToSplash:1;                                 		// 0x03D8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bSpecialCalcView:1;                               		// 0x03D8 ( 0x0004 )  [0x00000008]
	float                                              Damage;                                           		// 0x03DC ( 0x0004 ) 
	float                                              DamageRadius;                                     		// 0x03E0 ( 0x0004 ) 
	float                                              MomentumTransfer;                                 		// 0x03E4 ( 0x0004 ) 
	float                                              Momentum_Pawn;                                    		// 0x03E8 ( 0x0004 ) 
	class UClass*                                      MyDamageType;                                     		// 0x03EC ( 0x0004 ) 
	unsigned char                                      MyWeaponType;                                     		// 0x03F0 ( 0x0001 ) 
	class USound*                                      SpawnSound;                                       		// 0x03F4 ( 0x0004 ) 
	class USound*                                      ImpactSound;                                      		// 0x03F8 ( 0x0004 ) 
	class UClass*                                      ExplosionDecal;                                   		// 0x03FC ( 0x0004 ) 
	float                                              ExploWallOut;                                     		// 0x0400 ( 0x0004 ) 
	class AController*                                 InstigatorController;                             		// 0x0404 ( 0x0004 ) 
	class AActor*                                      LastTouched;                                      		// 0x0408 ( 0x0004 ) 
	class AActor*                                      HurtWall;                                         		// 0x040C ( 0x0004 ) 
	float                                              MaxEffectDistance;                                		// 0x0410 ( 0x0004 ) 
	unsigned long                                      bScriptPostRender:1;                              		// 0x0414 ( 0x0004 )  [0x00000001]
	float                                              fGravMass;                                        		// 0x0418 ( 0x0004 ) 

	// UScript Functions
	 void                      SufferEffect ( class APawn* Victim, float fDist, float fReduceRate );		// [ FUNC_Simulated ] Engine.Projectile.SufferEffect
	 void                      eventPostRender2D ( class UCanvas* C, float ScreenLocX, float ScreenLocY );		// [ FUNC_Simulated | FUNC_Event ] Engine.Projectile.PostRender2D
	 bool                      IsStationary (  );                                		//  Engine.Projectile.IsStationary
	 float                     GetRange (  );                                    		// [ FUNC_Simulated ] Engine.Projectile.GetRange
	 void                      RandSpin ( float spinRate );                      		// [ FUNC_Final | FUNC_Simulated ] Engine.Projectile.RandSpin
	 void                      Explode ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] Engine.Projectile.Explode
	 void                      BlowUp ( struct FVector HitLocation );            		// [ FUNC_Simulated ] Engine.Projectile.BlowUp
	 void                      HitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial );		// [ FUNC_Simulated ] Engine.Projectile.HitWall
	 void                      ProcessTouch ( class AActor* Other, struct FVector HitLocation );		// [ FUNC_Simulated ] Engine.Projectile.ProcessTouch
	 void                      ClientSideTouch ( class AActor* Other, struct FVector HitLocation );		// [ FUNC_Simulated ] Engine.Projectile.ClientSideTouch
	 void                      Touch ( class AActor* Other );                    		// [ FUNC_Simulated ] Engine.Projectile.Touch
	 bool                      EncroachingOn ( class AActor* Other );            		//  Engine.Projectile.EncroachingOn
	 void                      HurtRadius ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation );		// [ FUNC_Simulated ] Engine.Projectile.HurtRadius
	 bool                      CheckMaxEffectDistance ( class APlayerController* P, struct FVector SpawnLocation );		// [ FUNC_Simulated ] Engine.Projectile.CheckMaxEffectDistance
	 void                      Reset (  );                                       		//  Engine.Projectile.Reset
	 void                      OnEndRound (  );                                  		//  Engine.Projectile.OnEndRound
	 bool                      CanSplash (  );                                   		// [ FUNC_Simulated ] Engine.Projectile.CanSplash
	 bool                      SpecialCalcView ( bool bBehindView, class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		//  Engine.Projectile.SpecialCalcView
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.Projectile.PostBeginPlay
	 float                     GetInstigatorsDirectionbyDot ( struct FRotator pawnRotation, struct FVector pawnVelocity );		// [ FUNC_Native ] Engine.Projectile.GetInstigatorsDirectionbyDot

	// Public Imports
	AProjectile(class AProjectile const &);
	AProjectile(void);
	class AProjectile &  operator=(class AProjectile const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0054

// Class Engine.Decoration
class DLL_IMPORT ADecoration : public AActor
{
public:
	class UClass*                                      EffectWhenDestroyed;                              		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bPushable:1;                                      		// 0x03CC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bDamageable:1;                                    		// 0x03CC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bPushSoundPlaying:1;                              		// 0x03CC ( 0x0004 )  [0x00000004]
	unsigned long                                      bSplash:1;                                        		// 0x03CC ( 0x0004 )  [0x00000008]
	class USound*                                      PushSound;                                        		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      EndPushSound;                                     		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	int                                                numLandings;                                      		// 0x03D8 ( 0x0004 ) [ CPF_Const ]
	class UClass*                                      contents;                                         		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	int                                                NumFrags;                                         		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    FragSkin;                                         		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      FragType;                                         		// 0x03E8 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     FragMomentum;                                     		// 0x03EC ( 0x000C ) 
	int                                                Health;                                           		// 0x03F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              SplashTime;                                       		// 0x03FC ( 0x0004 ) [ CPF_Edit ]
	class ANavigationPoint*                            LastAnchor;                                       		// 0x0400 ( 0x0004 ) [ CPF_Const ]
	float                                              LastValidAnchorTime;                              		// 0x0404 ( 0x0004 ) 

	// UScript Functions
	 void                      Bump ( class AActor* Other );                     		//  Engine.Decoration.Bump
	 void                      Timer (  );                                       		//  Engine.Decoration.Timer
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.Decoration.Destroyed
	 void                      BaseChange (  );                                  		//  Engine.Decoration.BaseChange
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.Decoration.Trigger
	 void                      PhysicsVolumeChange ( class APhysicsVolume* NewVolume );		//  Engine.Decoration.PhysicsVolumeChange
	 void                      TakeDamage ( int NDamage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.Decoration.TakeDamage
	 void                      HitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial );		//  Engine.Decoration.HitWall
	 void                      Landed ( struct FVector HitNormal );              		//  Engine.Decoration.Landed
	 void                      Drop ( struct FVector NewVel, struct FString sReason );		//  Engine.Decoration.Drop
	 bool                      CanSplash (  );                                   		//  Engine.Decoration.CanSplash
	 void                      eventNotReachableBy ( class APawn* P );           		// [ FUNC_Event ] Engine.Decoration.NotReachableBy

	// Public Imports
	ADecoration(class ADecoration const &);
	ADecoration(void);
	class ADecoration &  operator=(class ADecoration const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0040

// Class Engine.InterpolationPoint
class DLL_IMPORT AInterpolationPoint : public AKeypoint
{
public:

	// Public Imports
	AInterpolationPoint(class AInterpolationPoint const &);
	AInterpolationPoint(void);
	class AInterpolationPoint &  operator=(class AInterpolationPoint const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.Scout
class DLL_IMPORT AScout : public APawn
{
public:
	float                                              MaxLandingVelocity;                               		// 0x0FB4 ( 0x0004 ) [ CPF_Const ]

	// UScript Functions
	 void                      PreBeginPlay (  );                                		// [ FUNC_Simulated ] Engine.Scout.PreBeginPlay

	// Public Imports
	AScout(class AScout const &);
	AScout(void);
	class AScout &  operator=(class AScout const &);
	void  InitForPathing(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	int  findStart(class FVector);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0004

// Class Engine.ReachSpec
class DLL_IMPORT UReachSpec : public UObject
{
public:
	int                                                Distance;                                         		// 0x002C ( 0x0004 ) 
	class ANavigationPoint*                            Start;                                            		// 0x0030 ( 0x0004 ) [ CPF_Const ]
	class ANavigationPoint*                            End;                                              		// 0x0034 ( 0x0004 ) [ CPF_Const ]
	int                                                CollisionRadius;                                  		// 0x0038 ( 0x0004 ) 
	int                                                CollisionHeight;                                  		// 0x003C ( 0x0004 ) 
	int                                                reachFlags;                                       		// 0x0040 ( 0x0004 ) 
	int                                                MaxLandingVelocity;                               		// 0x0044 ( 0x0004 ) 
	unsigned char                                      bPruned;                                          		// 0x0048 ( 0x0001 ) 
	unsigned long                                      bForced:1;                                        		// 0x004C ( 0x0004 )  [0x00000001]

	// Public Imports
	UReachSpec(class UReachSpec const &);
	UReachSpec(void);
	class UReachSpec &  operator=(class UReachSpec const &);
	int  operator==(class UReachSpec const &);
	class UReachSpec *  operator+(class UReachSpec const &)const ;
	int  operator<=(class UReachSpec const &);
	int  BotOnlyPath(void);
	void  Init(void);
	static void  InternalConstructor(void *);
	class FPlane  PathColor(void);
	int  PlaceScout(class AScout *);
	static class UClass *  StaticClass(void);
	int  defineFor(class ANavigationPoint *,class ANavigationPoint *,class APawn *);
	int  findBestReachable(class AScout *);
	int  supports(int,int,int,int);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.SkyZoneInfo
class DLL_IMPORT ASkyZoneInfo : public AZoneInfo
{
public:

	// Public Imports
	ASkyZoneInfo(class ASkyZoneInfo const &);
	class ASkyZoneInfo &  operator=(class ASkyZoneInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.Camera
class DLL_IMPORT ACamera : public APlayerController
{
public:

	// Public Imports
	ACamera(class ACamera const &);
	ACamera(void);
	class ACamera &  operator=(class ACamera const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.GameInfo
class DLL_IMPORT AGameInfo : public AInfo
{
public:
	int                                                SimpleLoginedClientNum;                           		// 0x041C ( 0x0004 ) 
	float                                              fSendPingTime;                                    		// 0x0420 ( 0x0004 ) 
	float                                              fCurrentPingTime;                                 		// 0x0424 ( 0x0004 ) 
	unsigned long                                      bManuallyBeginWaitingForStart:1;                  		// 0x0428 ( 0x0004 )  [0x00000001]
	unsigned long                                      bRestartLevel:1;                                  		// 0x0428 ( 0x0004 )  [0x00000002]
	unsigned long                                      bPauseable:1;                                     		// 0x0428 ( 0x0004 )  [0x00000004]
	unsigned long                                      bWeaponStay:1;                                    		// 0x0428 ( 0x0004 )  [0x00000008]
	unsigned long                                      bCanChangeSkin:1;                                 		// 0x0428 ( 0x0004 )  [0x00000010]
	unsigned long                                      bTeamGame:1;                                      		// 0x0428 ( 0x0004 )  [0x00000020]
	unsigned long                                      bGameEnded:1;                                     		// 0x0428 ( 0x0004 )  [0x00000040]
	unsigned long                                      bOverTime:1;                                      		// 0x0428 ( 0x0004 )  [0x00000080]
	unsigned long                                      bAlternateMode:1;                                 		// 0x0428 ( 0x0004 )  [0x00000100][ CPF_Localized ]
	unsigned long                                      bCanViewOthers:1;                                 		// 0x0428 ( 0x0004 )  [0x00000200]
	unsigned long                                      bDelayedStart:1;                                  		// 0x0428 ( 0x0004 )  [0x00000400]
	unsigned long                                      bWaitingToStartMatch:1;                           		// 0x0428 ( 0x0004 )  [0x00000800]
	unsigned long                                      bChangeLevels:1;                                  		// 0x0428 ( 0x0004 )  [0x00001000]
	unsigned long                                      bAlreadyChanged:1;                                		// 0x0428 ( 0x0004 )  [0x00002000]
	unsigned long                                      bLoggingGame:1;                                   		// 0x0428 ( 0x0004 )  [0x00004000]
	unsigned long                                      bEnableStatLogging:1;                             		// 0x0428 ( 0x0004 )  [0x00008000]
	unsigned long                                      bAllowWeaponThrowing:1;                           		// 0x0428 ( 0x0004 )  [0x00010000]
	unsigned long                                      bAllowBehindView:1;                               		// 0x0428 ( 0x0004 )  [0x00020000]
	unsigned long                                      bAdminCanPause:1;                                 		// 0x0428 ( 0x0004 )  [0x00040000]
	unsigned long                                      bGameRestarted:1;                                 		// 0x0428 ( 0x0004 )  [0x00080000]
	unsigned long                                      bWeaponShouldViewShake:1;                         		// 0x0428 ( 0x0004 )  [0x00100000]
	unsigned long                                      bModViewShake:1;                                  		// 0x0428 ( 0x0004 )  [0x00200000]
	unsigned long                                      bForceClassicView:1;                              		// 0x0428 ( 0x0004 )  [0x00400000]
	unsigned long                                      bLowGore:1;                                       		// 0x0428 ( 0x0004 )  [0x00800000]
	unsigned long                                      bWelcomePending:1;                                		// 0x0428 ( 0x0004 )  [0x01000000]
	unsigned long                                      bAttractCam:1;                                    		// 0x0428 ( 0x0004 )  [0x02000000]
	unsigned long                                      bMustJoinBeforeStart:1;                           		// 0x0428 ( 0x0004 )  [0x04000000]
	unsigned long                                      bTestMode:1;                                      		// 0x0428 ( 0x0004 )  [0x08000000]
	unsigned long                                      bAllowVehicles:1;                                 		// 0x0428 ( 0x0004 )  [0x10000000]
	unsigned long                                      bAllowMPGameSpeed:1;                              		// 0x0428 ( 0x0004 )  [0x20000000]
	unsigned long                                      bIsSaveGame:1;                                    		// 0x0428 ( 0x0004 )  [0x40000000]
	unsigned long                                      bLiberalVehiclePaths:1;                           		// 0x0428 ( 0x0004 )  [0x80000000]
	unsigned long                                      bLargeGameVOIP:1;                                 		// 0x042C ( 0x0004 )  [0x00000001]
	int                                                GoreLevel;                                        		// 0x0430 ( 0x0004 ) 
	float                                              GameDifficulty;                                   		// 0x0434 ( 0x0004 ) 
	float                                              AutoAim;                                          		// 0x0438 ( 0x0004 ) 
	float                                              GameSpeed;                                        		// 0x043C ( 0x0004 ) 
	float                                              StartTime;                                        		// 0x0440 ( 0x0004 ) 
	struct FString                                     DefaultPlayerClassName;                           		// 0x0444 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bSendBot:1;                                       		// 0x0450 ( 0x0004 )  [0x00000001]
	struct FString                                     ScoreBoardType;                                   		// 0x0454 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ResultScoreBoardType;                             		// 0x0460 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ResultScoreBoardBootyType;                        		// 0x046C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     BotMenuType;                                      		// 0x0478 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     RulesMenuType;                                    		// 0x0484 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SettingsMenuType;                                 		// 0x0490 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameUMenuType;                                    		// 0x049C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MultiplayerUMenuType;                             		// 0x04A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameOptionsMenuType;                              		// 0x04B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     HUDSettingsMenu;                                  		// 0x04C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     HUDType;                                          		// 0x04CC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MapListType;                                      		// 0x04D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MapPrefix;                                        		// 0x04E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     BeaconName;                                       		// 0x04F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GoreLevelText[ 0x03 ];                            		// 0x04FC ( 0x0024 ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                ResetCountDown;                                   		// 0x0520 ( 0x0004 ) [ CPF_Edit ]
	int                                                ResetTimeDelay;                                   		// 0x0524 ( 0x0004 ) [ CPF_Edit ]
	int                                                MaxSpectators;                                    		// 0x0528 ( 0x0004 ) 
	int                                                NumSpectators;                                    		// 0x052C ( 0x0004 ) 
	int                                                MaxPlayers;                                       		// 0x0530 ( 0x0004 ) 
	int                                                NumPlayers;                                       		// 0x0534 ( 0x0004 ) 
	int                                                NumPlayersFromStart;                              		// 0x0538 ( 0x0004 ) 
	int                                                NumBots;                                          		// 0x053C ( 0x0004 ) 
	int                                                CurrentID;                                        		// 0x0540 ( 0x0004 ) 
	struct FString                                     DefaultPlayerName;                                		// 0x0544 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	float                                              FearCostFallOff;                                  		// 0x0550 ( 0x0004 ) 
	int                                                GoalScore;                                        		// 0x0554 ( 0x0004 ) 
	int                                                MaxLives;                                         		// 0x0558 ( 0x0004 ) 
	int                                                TimeLimit;                                        		// 0x055C ( 0x0004 ) 
	class UClass*                                      DeathMessageClass;                                		// 0x0560 ( 0x0004 ) 
	class UClass*                                      GameMessageClass;                                 		// 0x0564 ( 0x0004 ) 
	struct FName                                       OtherMesgGroup;                                   		// 0x0568 ( 0x0004 ) 
	struct FString                                     MutatorClass;                                     		// 0x056C ( 0x000C ) [ CPF_NeedCtorLink ]
	class AMutator*                                    BaseMutator;                                      		// 0x0578 ( 0x0004 ) 
	struct FString                                     AccessControlClass;                               		// 0x057C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class AAccessControl*                              AccessControl;                                    		// 0x0588 ( 0x0004 ) 
	class AGameRules*                                  GameRulesModifiers;                               		// 0x058C ( 0x0004 ) 
	struct FString                                     BroadcastHandlerClass;                            		// 0x0590 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UClass*                                      BroadcastClass;                                   		// 0x059C ( 0x0004 ) [ CPF_Edit ]
	class ABroadcastHandler*                           BroadcastHandler;                                 		// 0x05A0 ( 0x0004 ) 
	class UClass*                                      PlayerControllerClass;                            		// 0x05A4 ( 0x0004 ) 
	struct FString                                     PlayerControllerClassName;                        		// 0x05A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UClass*                                      GameReplicationInfoClass;                         		// 0x05B4 ( 0x0004 ) [ CPF_Edit ]
	class AGameReplicationInfo*                        GameReplicationInfo;                              		// 0x05B8 ( 0x0004 ) 
	class UClass*                                      VoiceReplicationInfoClass;                        		// 0x05BC ( 0x0004 ) [ CPF_Edit ]
	class AVoiceChatReplicationInfo*                   VoiceReplicationInfo;                             		// 0x05C0 ( 0x0004 ) 
	struct FString                                     MaplistHandlerType;                               		// 0x05C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UClass*                                      MaplistHandlerClass;                              		// 0x05D0 ( 0x0004 ) 
	class AMaplistManagerBase*                         MaplistHandler;                                   		// 0x05D4 ( 0x0004 ) [ CPF_Transient ]
	class AGameStats*                                  GameStats;                                        		// 0x05D8 ( 0x0004 ) 
	struct FString                                     GameStatsClass;                                   		// 0x05DC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DemoCommand;                                      		// 0x05E8 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	float                                              RespawnTime;                                      		// 0x05F4 ( 0x0004 ) 
	struct FString                                     SecurityClass;                                    		// 0x05F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameName;                                         		// 0x0604 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Description;                                      		// 0x0610 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ScreenShotName;                                   		// 0x061C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     DecoTextName;                                     		// 0x0628 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Acronym;                                          		// 0x0634 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     VotingHandlerType;                                		// 0x0640 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UClass*                                      VotingHandlerClass;                               		// 0x064C ( 0x0004 ) 
	class AVotingHandler*                              VotingHandler;                                    		// 0x0650 ( 0x0004 ) [ CPF_Transient ]
	class UGameProfile*                                CurrentGameProfile;                               		// 0x0654 ( 0x0004 ) [ CPF_Edit | CPF_Transient ]
	class UManifest*                                   SaveGameManifest;                                 		// 0x0658 ( 0x0004 ) [ CPF_Edit | CPF_Const | CPF_Transient ]
	struct FString                                     GIPropsDisplayText[ 0x0F ];                       		// 0x065C ( 0x00B4 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     GIPropDescText[ 0x0F ];                           		// 0x0710 ( 0x00B4 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     GIPropsExtras[ 0x02 ];                            		// 0x07C4 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	class AVehicle*                                    VehicleList;                                      		// 0x07DC ( 0x0004 ) 
	struct FString                                     CallSigns[ 0x0F ];                                		// 0x07E0 ( 0x00B4 ) [ CPF_NeedCtorLink ]
	struct FString                                     ServerSkillLevel;                                 		// 0x0894 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              MaxIdleTime;                                      		// 0x08A0 ( 0x0004 ) 
	struct FString                                     NoBindString;                                     		// 0x08A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class FColor                                       BindColor;                                        		// 0x08B0 ( 0x0004 ) 
	class UBTTcpLink_Channel*                          BTSend;                                           		// 0x08B4 ( 0x0004 ) 
	class UwMatchMaker*                                kMM;                                              		// 0x08B8 ( 0x0004 ) 
	float                                              GameAddScore;                                     		// 0x08BC ( 0x0004 ) 
	float                                              GameAddScore_KillHeli;                            		// 0x08C0 ( 0x0004 ) 
	float                                              GameAssistScore;                                  		// 0x08C4 ( 0x0004 ) 
	float                                              GameDecScore;                                     		// 0x08C8 ( 0x0004 ) 
	float                                              GameAddExp;                                       		// 0x08CC ( 0x0004 ) 
	float                                              GameAssistExp;                                    		// 0x08D0 ( 0x0004 ) 
	float                                              GameDecExp;                                       		// 0x08D4 ( 0x0004 ) 
	float                                              GamePenaltyExp;                                   		// 0x08D8 ( 0x0004 ) 
	float                                              GameAddPoint;                                     		// 0x08DC ( 0x0004 ) 
	float                                              GameAssistPoint;                                  		// 0x08E0 ( 0x0004 ) 
	float                                              GameDecPoint;                                     		// 0x08E4 ( 0x0004 ) 
	float                                              GamePenaltyPoint;                                 		// 0x08E8 ( 0x0004 ) 
	float                                              GameAddHeliExp;                                   		// 0x08EC ( 0x0004 ) 
	float                                              GameAddHeliPoint;                                 		// 0x08F0 ( 0x0004 ) 
	class TArray< float >                              GameAddMultiKillExp;                              		// 0x08F4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              GameAddMultiKillPoint;                            		// 0x0900 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      SpawnWeaponPickupLocations:1;                     		// 0x090C ( 0x0004 )  [0x00000001]
	unsigned long                                      bChangedHost:1;                                   		// 0x090C ( 0x0004 )  [0x00000002]
	int                                                ElapsedTimeInChangeHost;                          		// 0x0910 ( 0x0004 ) 
	int                                                UAVDuration;                                      		// 0x0914 ( 0x0004 ) 
	int                                                UAVScanInterval;                                  		// 0x0918 ( 0x0004 ) 
	unsigned long                                      bLeaveRespawnLogInChat:1;                         		// 0x091C ( 0x0004 )  [0x00000001]
	unsigned long                                      bLeaveRespawnLogInChatReal:1;                     		// 0x091C ( 0x0004 )  [0x00000002]
	class TArray< class APlayerStart* >                EveryPlayerStarts;                                		// 0x0920 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APlayerStart_SD* >             EverySDPlayerStarts;                              		// 0x092C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APlayerStart_Defence* >        EveryDFPlayerStarts;                              		// 0x0938 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              SDRespawnTime;                                    		// 0x0944 ( 0x0004 ) 
	class TArray< class ANavigationPoint* >            recentlySpawnedPoints;                            		// 0x0948 ( 0x000C ) [ CPF_NeedCtorLink | CPF_NoExport ]
	class TArray< class ANavigationPoint* >            recentlySpawnedPointsTeamAF;                      		// 0x0954 ( 0x000C ) [ CPF_NeedCtorLink | CPF_NoExport ]
	class TArray< class ANavigationPoint* >            recentlySpawnedPointsTeamRSA;                     		// 0x0960 ( 0x000C ) [ CPF_NeedCtorLink | CPF_NoExport ]
	unsigned char                                      TeamQueue;                                        		// 0x096C ( 0x0001 ) 
	int                                                ChangedHostCompleteCountDown;                     		// 0x0970 ( 0x0004 ) 
	int                                                ChangedHostCompleteCountDown_Initial;             		// 0x0974 ( 0x0004 ) 
	int                                                SupplyRandIndex;                                  		// 0x0978 ( 0x0004 ) 
	unsigned long                                      bHasRespawnRestriction:1;                         		// 0x097C ( 0x0004 )  [0x00000001]
	int                                                RespawnRestrictionTime;                           		// 0x0980 ( 0x0004 ) 
	class TArray< class AWaitView* >                   WaitViews;                                        		// 0x0984 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UGameInfoScriptPart*                         SC;                                               		// 0x0990 ( 0x0004 ) 
	class UwMatchMaker*                                myTeamMM;                                         		// 0x0994 ( 0x0004 ) 
	class TArray< struct FVector >                     DeathPos;                                         		// 0x0998 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                nCurIndex;                                        		// 0x09A4 ( 0x0004 ) 

	// UScript Functions
	 void                      PermitWeaponChangeInSpecialMode (  );             		//  Engine.GameInfo.PermitWeaponChangeInSpecialMode
	 bool                      rfAckGetBotID ( int Result, unsigned char RequestedAFCount, unsigned char RequestedRSACount, class TArray< int > AFBotID, class TArray< int > RSABotID );		//  Engine.GameInfo.rfAckGetBotID
	 class AActor*             eventGetNearFlag ( class AActor* A );             		// [ FUNC_Event ] Engine.GameInfo.GetNearFlag
	 void                      GetGameSpecificPurposes ( class AController* Owner, class TArray< class UObject* >* purposes );		//  Engine.GameInfo.GetGameSpecificPurposes
	 void                      GetGameSpecificActions ( class AController* C, class UwNPCActions* npcActions, class TArray< class UObject* >* Actions );		//  Engine.GameInfo.GetGameSpecificActions
	 class TArray< struct FVector > GetDeathPosArray (  );                            		//  Engine.GameInfo.GetDeathPosArray
	 void                      PushDeathPos ( struct FVector vPos );             		//  Engine.GameInfo.PushDeathPos
	 void                      Kill ( class AController* C );                    		//  Engine.GameInfo.Kill
	 void                      GetFlagsInfo ( int* outNumFlags, int* outNumCapturedFlagsByTeam1, int* outNumCapturedFlagsByTeam2 );		//  Engine.GameInfo.GetFlagsInfo
	 float                     GetSupplyRandom (  );                             		//  Engine.GameInfo.GetSupplyRandom
	 bool                      CanPawnTakeDamage (  );                           		//  Engine.GameInfo.CanPawnTakeDamage
	 void                      SendRoundStartTime ( class TArray< int > aPlayerIDs );		//  Engine.GameInfo.SendRoundStartTime
	 void                      SendGameStartTime ( class TArray< int > aPlayerIDs );		//  Engine.GameInfo.SendGameStartTime
	 void                      SendReqChangeWeaponSet ( int PlayerID, int SlotIndex );		//  Engine.GameInfo.SendReqChangeWeaponSet
	 void                      SendReqUpdateMyHostPriorityPoint ( int Point );   		//  Engine.GameInfo.SendReqUpdateMyHostPriorityPoint
	 bool                      IsWarpPossible (  );                              		//  Engine.GameInfo.IsWarpPossible
	 bool                      IsRightTimeForRespawn ( class AController* C );   		//  Engine.GameInfo.IsRightTimeForRespawn
	 void                      SendMatchOverEnd (  );                            		//  Engine.GameInfo.SendMatchOverEnd
	 void                      SendMatchOver (  );                               		//  Engine.GameInfo.SendMatchOver
	 int                       GetTotalPlayedTime (  );                          		//  Engine.GameInfo.GetTotalPlayedTime
	 int                       CountPlayers (  );                                		//  Engine.GameInfo.CountPlayers
	 void                      SendMatchResult (  );                             		//  Engine.GameInfo.SendMatchResult
	 void                      SendRawMatchResult (  );                          		//  Engine.GameInfo.SendRawMatchResult
	 class TArray< int >       GetTeamScores (  );                               		//  Engine.GameInfo.GetTeamScores
	 float                     GetResultPointRatio_Intervention ( class APlayerReplicationInfo* PRI );		//  Engine.GameInfo.GetResultPointRatio_Intervention
	 void                      CalcResultPoints (  );                            		//  Engine.GameInfo.CalcResultPoints
	 void                      DeadUse ( class APlayerController* PC );          		//  Engine.GameInfo.DeadUse
	 bool                      IsPawnAlive ( class AController* C );             		//  Engine.GameInfo.IsPawnAlive
	 bool                      IsRespawnRestrictionTime (  );                    		// [ FUNC_Simulated ] Engine.GameInfo.IsRespawnRestrictionTime
	 void                      DisableNextObjective (  );                        		//  Engine.GameInfo.DisableNextObjective
	 void                      WeakObjectives (  );                              		//  Engine.GameInfo.WeakObjectives
	 int                       MultiMinPlayers (  );                             		//  Engine.GameInfo.MultiMinPlayers
	 bool                      JustStarted ( float t );                          		//  Engine.GameInfo.JustStarted
	 struct FString            StripColor ( struct FString S );                  		//  Engine.GameInfo.StripColor
	 void                      AddServerDetail ( struct FString RuleName, struct FString RuleValue, struct FServerResponseLine* ServerState );		//  Engine.GameInfo.AddServerDetail
	 bool                      AllowMutator ( struct FString MutatorClassName ); 		//  Engine.GameInfo.AllowMutator
	 bool                      IsVehicleMutator ( struct FString MutatorClassName );		//  Engine.GameInfo.IsVehicleMutator
	 int                       GetBindWeight ( unsigned char KeyNumber );        		//  Engine.GameInfo.GetBindWeight
	 struct FString            MakeColorCode ( class FColor NewColor );          		//  Engine.GameInfo.MakeColorCode
	 struct FString            GetNextLoadHint ( struct FString MapName );       		//  Engine.GameInfo.GetNextLoadHint
	 struct FString            GetKeyBindName ( struct FString Cmd, class APlayerController* Ref );		//  Engine.GameInfo.GetKeyBindName
	 struct FString            ParseLoadingHint ( struct FString Hint, class APlayerController* Ref, class FColor HintColor );		//  Engine.GameInfo.ParseLoadingHint
	 struct FString            GetLoadingHint ( class APlayerController* Ref, struct FString MapName, class FColor HintColor );		//  Engine.GameInfo.GetLoadingHint
	 class TArray< struct FString > GetAllLoadHints ( bool bThisClassOnly );          		//  Engine.GameInfo.GetAllLoadHints
	 void                      eventNoTranslocatorKeyPressed ( class APlayerController* PC );		// [ FUNC_Event ] Engine.GameInfo.NoTranslocatorKeyPressed
	 void                      eventSceneAbort (  );                             		// [ FUNC_Event ] Engine.GameInfo.SceneAbort
	 void                      eventSceneEnded ( class ASceneManager* SM, class AActor* Other );		// [ FUNC_Event ] Engine.GameInfo.SceneEnded
	 void                      eventSceneStarted ( class ASceneManager* SM, class AActor* Other );		// [ FUNC_Event ] Engine.GameInfo.SceneStarted
	 void                      AdjustBotInterface ( bool bSinglePlayer );        		//  Engine.GameInfo.AdjustBotInterface
	 void                      ParseVoiceCommand ( class APlayerController* Sender, struct FString RecognizedString );		//  Engine.GameInfo.ParseVoiceCommand
	 void                      GetPlayerControllerList ( class TArray< class APlayerController* >* ControllerArray );		//  Engine.GameInfo.GetPlayerControllerList
	 void                      LoadSRGrammar ( struct FString Grammar );         		// [ FUNC_Native ] Engine.GameInfo.LoadSRGrammar
	 void                      eventSetGrammar (  );                             		// [ FUNC_Event ] Engine.GameInfo.SetGrammar
	 int                       GetDefenderNum (  );                              		//  Engine.GameInfo.GetDefenderNum
	 class AActor*             FindSpecGoalFor ( class APlayerReplicationInfo* PRI, int TeamIndex );		//  Engine.GameInfo.FindSpecGoalFor
	 void                      RegisterVehicle ( class AVehicle* V );            		//  Engine.GameInfo.RegisterVehicle
	 void                      execAdminSay ( struct FString Msg );              		// [ FUNC_Exec ] Engine.GameInfo.AdminSay
	 void                      execKillBots ( int Num );                         		// [ FUNC_Exec ] Engine.GameInfo.KillBots
	 class ATeamInfo*          OtherTeam ( class ATeamInfo* Requester );         		//  Engine.GameInfo.OtherTeam
	 void                      DriverLeftVehicle ( class AVehicle* V, class APawn* P );		//  Engine.GameInfo.DriverLeftVehicle
	 bool                      CanLeaveVehicle ( class AVehicle* V, class APawn* P );		//  Engine.GameInfo.CanLeaveVehicle
	 void                      DriverEnteredVehicle ( class AVehicle* V, class APawn* P );		//  Engine.GameInfo.DriverEnteredVehicle
	 bool                      CanEnterVehicle ( class AVehicle* V, class APawn* P );		//  Engine.GameInfo.CanEnterVehicle
	 struct FString            NewRecommendCombo ( struct FString ComboName, class AAIController* C );		//  Engine.GameInfo.NewRecommendCombo
	 struct FString            RecommendCombo ( struct FString ComboName );      		//  Engine.GameInfo.RecommendCombo
	 void                      ReviewJumpSpots ( struct FName TestLabel );       		//  Engine.GameInfo.ReviewJumpSpots
	 int                       OrderToIndex ( int Order );                       		//  Engine.GameInfo.OrderToIndex
	 bool                      eventAcceptPlayInfoProperty ( struct FString PropName );		// [ FUNC_Event ] Engine.GameInfo.AcceptPlayInfoProperty
	 struct FString            GetDescriptionText ( struct FString PropName );   		//  Engine.GameInfo.GetDescriptionText
	 struct FString            GetDisplayText ( struct FString PropName );       		//  Engine.GameInfo.GetDisplayText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  Engine.GameInfo.FillPlayInfo
	 struct FString            ParseMessageString ( class AMutator* BaseMutator, class AController* Who, struct FString Message );		//  Engine.GameInfo.ParseMessageString
	 struct FString            ParseChatPercVar ( class AMutator* BaseMutator, class AController* Who, struct FString Cmd );		//  Engine.GameInfo.ParseChatPercVar
	 struct FString            FindTeamDesignation ( class AGameReplicationInfo* GRI, class AActor* A );		//  Engine.GameInfo.FindTeamDesignation
	 class UTexture*           GetRandomTeamSymbol ( int Base );                 		//  Engine.GameInfo.GetRandomTeamSymbol
	 bool                      TooManyBots ( class AController* botToRemove );   		//  Engine.GameInfo.TooManyBots
	 float                     GetMultykillBonusPoint ( class AController* C, int* AddExp, int* AddPoint );		//  Engine.GameInfo.GetMultykillBonusPoint
	 void                      SendMessageAddScore ( class AController* ReceiveController, class AController* Killer, class AController* Other, int KillWeapon, int iConKillorHeadShot );		//  Engine.GameInfo.SendMessageAddScore
	 void                      SetAssistPoint ( class AController* Killer, class AController* Other );		//  Engine.GameInfo.SetAssistPoint
	 int                       GetAssistScore ( int iMessageCode, unsigned char* byAssistType );		//  Engine.GameInfo.GetAssistScore
	 void                      SendSeverScoreAndAssist ( class AController* Killer, class AController* Other );		//  Engine.GameInfo.SendSeverScoreAndAssist
	 void                      ScoreKill ( class AController* Killer, class AController* Other );		//  Engine.GameInfo.ScoreKill
	 float                     GetAddScore ( class AController* Killer, class AController* Other );		//  Engine.GameInfo.GetAddScore
	 void                      ScoreObjective ( class APlayerReplicationInfo* Scorer, float Score );		//  Engine.GameInfo.ScoreObjective
	 void                      TeamScoreEvent ( int Team, float Points, struct FString Desc );		//  Engine.GameInfo.TeamScoreEvent
	 void                      ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc );		//  Engine.GameInfo.ScoreEvent
	 void                      CheckScore ( class APlayerReplicationInfo* Scorer );		//  Engine.GameInfo.CheckScore
	 float                     RatePlayerStart ( class ANavigationPoint* N, unsigned char Team, class AController* Player );		//  Engine.GameInfo.RatePlayerStart
	 class ANavigationPoint*   FindPlayerStart_TU ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  Engine.GameInfo.FindPlayerStart_TU
	 class ANavigationPoint*   FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  Engine.GameInfo.FindPlayerStart
	 bool                      eventIsSDRespawnTime (  );                        		// [ FUNC_Event ] Engine.GameInfo.IsSDRespawnTime
	 void                      LogNavigationPoints ( class TArray< class ANavigationPoint* > ns );		//  Engine.GameInfo.LogNavigationPoints
	 class ANavigationPoint*   FindPlayerStart_SD ( unsigned char Team );        		//  Engine.GameInfo.FindPlayerStart_SD
	 void                      LogFinalRespawnPoint ( class ANavigationPoint* respawnPoint, unsigned char Team );		//  Engine.GameInfo.LogFinalRespawnPoint
	 class ANavigationPoint*   GetRespawnPointRatingEnemy ( bool giveNearnessScore, class TArray< class ANavigationPoint* > respawnCandidates, unsigned char Team );		//  Engine.GameInfo.GetRespawnPointRatingEnemy
	 class TArray< class ANavigationPoint* > GetRespawnPointsSortedByClosenessTo ( class AActor* A, unsigned char Team, int Count );		//  Engine.GameInfo.GetRespawnPointsSortedByClosenessTo
	 void                      SortNavigationPoints2 ( struct FVector centerLoc, class TArray< class ANavigationPoint* >* candidates, class TArray< float >* candidateDists );		//  Engine.GameInfo.SortNavigationPoints2
	 void                      SortNavigationPoints ( class AActor* center, class TArray< class ANavigationPoint* >* candidates, class TArray< float >* candidateDists );		//  Engine.GameInfo.SortNavigationPoints
	 bool                      IsSafeFromEnemySight ( class ANavigationPoint* N, unsigned char Team );		//  Engine.GameInfo.IsSafeFromEnemySight
	 class APawn*              PickAlly ( unsigned char Team );                  		//  Engine.GameInfo.PickAlly
	 class TArray< class AActor* > GetPersonalEnemyList ( class APawn* myPawn );     		//  Engine.GameInfo.GetPersonalEnemyList
	 class TArray< class AActor* > GetEveryEnemyList2 ( unsigned char myTeam );      		//  Engine.GameInfo.GetEveryEnemyList2
	 class TArray< class AActor* > GetEveryEnemyList ( unsigned char myTeam );       		//  Engine.GameInfo.GetEveryEnemyList
	 void                      UpdatePositionLog (  );                           		//  Engine.GameInfo.UpdatePositionLog
	 class TArray< class APawn* > GetEveryAllyList ( unsigned char Team );          		//  Engine.GameInfo.GetEveryAllyList
	 bool                      IsAnyAllyAlive ( unsigned char Team );            		//  Engine.GameInfo.IsAnyAllyAlive
	 class TArray< class APawn* > GetSafeAllyList ( unsigned char Team );           		//  Engine.GameInfo.GetSafeAllyList
	 class TArray< class APawn* > GetRecentlySpawnedAllyList (  );                  		//  Engine.GameInfo.GetRecentlySpawnedAllyList
	 class ANavigationPoint*   GetSafetestRespawnPoint ( unsigned char Team, class TArray< class ANavigationPoint* > starts, bool skipAppropriateCheck );		//  Engine.GameInfo.GetSafetestRespawnPoint
	 bool                      IsAppropriateRespawnPoint ( class ANavigationPoint* N, unsigned char Team );		//  Engine.GameInfo.IsAppropriateRespawnPoint
	 bool                      IsRespawnPointFailedRecently ( class ANavigationPoint* S );		//  Engine.GameInfo.IsRespawnPointFailedRecently
	 bool                      IsAnyPawnWithinRadius ( class ANavigationPoint* N );		//  Engine.GameInfo.IsAnyPawnWithinRadius
	 bool                      IsRespawnSpecialCase (  );                        		//  Engine.GameInfo.IsRespawnSpecialCase
	 void                      EndLogging ( struct FString Reason );             		//  Engine.GameInfo.EndLogging
	 void                      TieOnTimeOver (  );                               		//  Engine.GameInfo.TieOnTimeOver
	 void                      EndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  Engine.GameInfo.EndGame
	 bool                      eventCheckEndGameCondition (  );                  		// [ FUNC_Event ] Engine.GameInfo.CheckEndGameCondition
	 bool                      CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  Engine.GameInfo.CheckEndGame
	 void                      eventBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Event ] Engine.GameInfo.BroadcastLocalized
	 void                      BroadcastTeam ( class AController* Sender, struct FString Msg, struct FName Type );		//  Engine.GameInfo.BroadcastTeam
	 void                      eventBroadcast ( class AActor* Sender, struct FString Msg, struct FName Type );		// [ FUNC_Event ] Engine.GameInfo.Broadcast
	 void                      ChangeVoiceChannel ( class APlayerReplicationInfo* PRI, int NewChannelIndex, int OldChannelIndex );		//  Engine.GameInfo.ChangeVoiceChannel
	 class AMapList*           GetMapList ( struct FString MapListClassType );   		//  Engine.GameInfo.GetMapList
	 class TArray< struct FString > GetMapRotation (  );                              		//  Engine.GameInfo.GetMapRotation
	 void                      RestartGame (  );                                 		//  Engine.GameInfo.RestartGame
	 void                      SendPlayer ( class APlayerController* aPlayer, struct FString URL );		//  Engine.GameInfo.SendPlayer
	 unsigned char             PickTeam ( unsigned char Current, class AController* C );		//  Engine.GameInfo.PickTeam
	 bool                      ChangeTeam ( class AController* Other, int N, bool bNewTeam );		//  Engine.GameInfo.ChangeTeam
	 bool                      eventForcedChangeTeam ( class AController* Other, int N, bool bNewTeam );		// [ FUNC_Event ] Engine.GameInfo.ForcedChangeTeam
	 void                      ChangeName ( class AController* Other, struct FString S, bool bNameChange );		//  Engine.GameInfo.ChangeName
	 void                      DiscardInventory ( class APawn* Other );          		//  Engine.GameInfo.DiscardInventory
	 bool                      PickupQuery ( class APawn* Other, class APickup* Item );		//  Engine.GameInfo.PickupQuery
	 bool                      ShouldRespawn ( class APickup* Other );           		//  Engine.GameInfo.ShouldRespawn
	 int                       ReduceDamage ( int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int iWeaponType, struct FVector* Momentum );		//  Engine.GameInfo.ReduceDamage
	 bool                      CanSpectate ( class APlayerController* Viewer, bool bOnlySpectator, class AActor* ViewTarget );		//  Engine.GameInfo.CanSpectate
	 bool                      IsOnTeam ( class AController* Other, int TeamNum );		//  Engine.GameInfo.IsOnTeam
	 bool                      SameTeam ( class AController* A, class AController* B );		//  Engine.GameInfo.SameTeam
	 void                      KickBan ( struct FString S );                     		//  Engine.GameInfo.KickBan
	 void                      SessionKickBan ( struct FString S );              		//  Engine.GameInfo.SessionKickBan
	 void                      Kick ( struct FString S );                        		//  Engine.GameInfo.Kick
	 struct FString            ParseKillMessage ( struct FString KillerName, struct FString VictimName, struct FString DeathMessage );		// [ FUNC_Native ] Engine.GameInfo.ParseKillMessage
	 void                      BroadcastDeathMessage ( class AController* Killer, class AController* Other, class UClass* DamageType, int CollisionPart, int WeaponType );		//  Engine.GameInfo.BroadcastDeathMessage
	 class UClass*             GetWDamageType ( class UClass* DamageType, int CollisionPart, int WeaponType, int* IsHeadShot, int* IsEnableAim );		//  Engine.GameInfo.GetWDamageType
	 bool                      PreventSever ( class APawn* Killed, struct FName BoneName, int Damage, class UClass* DamageType );		//  Engine.GameInfo.PreventSever
	 bool                      PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );		//  Engine.GameInfo.PreventDeath
	 void                      Killed ( class AController* Killer, class AController* Killed, class APawn* KilledPawn, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.GameInfo.Killed
	 int                       ExceptionKillWeapon ( int iKillWeaponID, class UClass* DamageType, int WeaponType );		//  Engine.GameInfo.ExceptionKillWeapon
	 void                      KDLOG_Finalize_HeliCopter ( int KillerUID, class AController* Killer, class AController* HeliCopter );		//  Engine.GameInfo.KDLOG_Finalize_HeliCopter
	 void                      KDLOG_Finalize (  );                              		//  Engine.GameInfo.KDLOG_Finalize
	 void                      KDLOG_Initialize (  );                            		//  Engine.GameInfo.KDLOG_Initialize
	 bool                      DoProcessKillMessage ( class UClass* DamageType );		//  Engine.GameInfo.DoProcessKillMessage
	 void                      SendQuest_KillSuccession ( class AController* Killer, unsigned char byKillSuccession );		//  Engine.GameInfo.SendQuest_KillSuccession
	 int                       SendMessageKillSuccssion ( class AController* Killer, class APlayerController* PC, unsigned char byKillSuccession );		//  Engine.GameInfo.SendMessageKillSuccssion
	 void                      ProcessKillMessage ( class AController* Killer, class AController* Killed, int CollisionPart, int WeaponType, bool bWallShot, int* iConKillorHeadShot );		//  Engine.GameInfo.ProcessKillMessage
	 void                      KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage );		//  Engine.GameInfo.KillEvent
	 void                      NotifyKilled ( class AController* Killer, class AController* Killed, class APawn* KilledPawn );		//  Engine.GameInfo.NotifyKilled
	 void                      SetPlayerDefaults ( class APawn* PlayerPawn );    		//  Engine.GameInfo.SetPlayerDefaults
	 void                      AddDefaultInventory ( class APawn* PlayerPawn );  		//  Engine.GameInfo.AddDefaultInventory
	 void                      AddGameSpecificInventory ( class APawn* P );      		//  Engine.GameInfo.AddGameSpecificInventory
	 void                      eventAcceptInventory ( class APawn* PlayerPawn ); 		// [ FUNC_Event ] Engine.GameInfo.AcceptInventory
	 void                      NotifyLogout ( class AController* Exiting );      		//  Engine.GameInfo.NotifyLogout
	 void                      NotifyLogin ( int NewPlayerID );                  		//  Engine.GameInfo.NotifyLogin
	 void                      Logout ( class AController* Exiting );            		//  Engine.GameInfo.Logout
	 void                      SetWeaponViewShake ( class APlayerController* P );		//  Engine.GameInfo.SetWeaponViewShake
	 void                      eventPostLogin ( class APlayerController* NewPlayer );		// [ FUNC_Event ] Engine.GameInfo.PostLogin
	 class UClass*             GetDefaultPlayerClass ( class AController* C );   		//  Engine.GameInfo.GetDefaultPlayerClass
	 void                      EndWaitingForStart (  );                          		//  Engine.GameInfo.EndWaitingForStart
	 void                      BeginWaitingForStart (  );                        		//  Engine.GameInfo.BeginWaitingForStart
	 void                      RestartPlayer ( class AController* aPlayer );     		//  Engine.GameInfo.RestartPlayer
	 void                      RefreshMaxPlayersDuringGame (  );                 		//  Engine.GameInfo.RefreshMaxPlayersDuringGame
	 void                      execlogrep (  );                                  		// [ FUNC_Exec ] Engine.GameInfo.logrep
	 void                      GameAddDefaultInventory ( class APawn* P );       		//  Engine.GameInfo.GameAddDefaultInventory
	 bool                      PlayerCanRestartGame ( class APlayerController* aPlayer );		//  Engine.GameInfo.PlayerCanRestartGame
	 bool                      PlayerCanRestart ( class APlayerController* aPlayer );		//  Engine.GameInfo.PlayerCanRestart
	 void                      StartAIPlayers (  );                              		//  Engine.GameInfo.StartAIPlayers
	 void                      StartHumanPlayers (  );                           		//  Engine.GameInfo.StartHumanPlayers
	 void                      StartMatch (  );                                  		//  Engine.GameInfo.StartMatch
	 void                      TestLevel (  );                                   		//  Engine.GameInfo.TestLevel
	 void                      ContinueMatch (  );                               		//  Engine.GameInfo.ContinueMatch
	 void                      GotoNextGameState (  );                           		//  Engine.GameInfo.GotoNextGameState
	 bool                      eventSimpleLogin ( class APlayerController* NewPlayer, class APawn* NewPawn );		// [ FUNC_Event ] Engine.GameInfo.SimpleLogin
	 bool                      eventSetPlayerID ( class APlayerController* P );  		// [ FUNC_Event ] Engine.GameInfo.SetPlayerID
	 void                      eventForcedStartMatch (  );                       		// [ FUNC_Event ] Engine.GameInfo.ForcedStartMatch
	 void                      SetPRI4Intervention ( class APlayerReplicationInfo* PRI );		//  Engine.GameInfo.SetPRI4Intervention
	 bool                      IsNewPlayerGotoSpectating (  );                   		//  Engine.GameInfo.IsNewPlayerGotoSpectating
	 class APlayerController*  eventLogin ( struct FString Portal, struct FString Options, struct FString* Error );		// [ FUNC_Event ] Engine.GameInfo.Login
	 class AWaitView*          GetWaitView ( class UClass* classWaitView );      		//  Engine.GameInfo.GetWaitView
	 class UClass*             GetWaitViewClass ( unsigned char Team );          		//  Engine.GameInfo.GetWaitViewClass
	 bool                      CheckOverlapUserName ( struct FString LoginedUserName, struct FString* ErrMsg );		//  Engine.GameInfo.CheckOverlapUserName
	 unsigned char             PopNextTeam (  );                                 		//  Engine.GameInfo.PopNextTeam
	 class APawn*              GetPawn4ChangeHost ( struct FString nn );         		//  Engine.GameInfo.GetPawn4ChangeHost
	 void                      InitSavedLevel (  );                              		//  Engine.GameInfo.InitSavedLevel
	 bool                      AtCapacity ( bool bSpectator );                   		//  Engine.GameInfo.AtCapacity
	 bool                      AllowBecomeActivePlayer ( class APlayerController* P );		//  Engine.GameInfo.AllowBecomeActivePlayer
	 bool                      BecomeSpectator ( class APlayerController* P );   		//  Engine.GameInfo.BecomeSpectator
	 int                       GetIntOption ( struct FString Options, struct FString ParseString, int CurrentValue );		//  Engine.GameInfo.GetIntOption
	 void                      eventPreLogin ( struct FString Options, struct FString Address, struct FString PlayerID, struct FString* Error, struct FString* FailCode );		// [ FUNC_Event ] Engine.GameInfo.PreLogin
	 void                      ProcessServerTravel ( struct FString URL, bool bItems );		//  Engine.GameInfo.ProcessServerTravel
	 struct FString            eventGetBeaconText (  );                          		// [ FUNC_Event ] Engine.GameInfo.GetBeaconText
	 void                      AddGameModifier ( class AGameRules* NewRule );    		//  Engine.GameInfo.AddGameModifier
	 void                      AddMutator ( struct FString mutname, bool bUserAdded );		//  Engine.GameInfo.AddMutator
	 void                      eventInitGame ( struct FString Options, struct FString* Error );		// [ FUNC_Event ] Engine.GameInfo.InitGame
	 bool                      HasOption ( struct FString Options, struct FString InKey );		//  Engine.GameInfo.HasOption
	 struct FString            ParseOption ( struct FString Options, struct FString InKey );		//  Engine.GameInfo.ParseOption
	 void                      GetKeyValue ( struct FString Pair, struct FString* key, struct FString* Value );		//  Engine.GameInfo.GetKeyValue
	 bool                      GrabOption ( struct FString* Options, struct FString* Result );		//  Engine.GameInfo.GrabOption
	 void                      eventDetailChange (  );                           		// [ FUNC_Event ] Engine.GameInfo.DetailChange
	 void                      execSetRPPFPS ( float fps );                      		// [ FUNC_Exec ] Engine.GameInfo.SetRPPFPS
	 void                      execSetRPPTime ( float limit );                   		// [ FUNC_Exec ] Engine.GameInfo.SetRPPTime
	 void                      execgamego (  );                                  		// [ FUNC_Exec ] Engine.GameInfo.gamego
	 void                      execgamestop (  );                                		// [ FUNC_Exec ] Engine.GameInfo.gamestop
	 void                      execgamesetspeed ( float t );                     		// [ FUNC_Exec ] Engine.GameInfo.gamesetspeed
	 void                      execshowrespawn (  );                             		// [ FUNC_Exec ] Engine.GameInfo.showrespawn
	 void                      SetSpeed ( float t );                             		//  Engine.GameInfo.SetSpeed
	 void                      SetGameSpeed ( float t );                         		//  Engine.GameInfo.SetGameSpeed
	 bool                      AllowGameSpeedChange (  );                        		//  Engine.GameInfo.AllowGameSpeedChange
	 bool                      SetPause ( bool bPause, class APlayerController* P );		//  Engine.GameInfo.SetPause
	 int                       GetServerPort (  );                               		//  Engine.GameInfo.GetServerPort
	 void                      GetServerPlayers ( struct FServerResponseLine* ServerState );		//  Engine.GameInfo.GetServerPlayers
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  Engine.GameInfo.GetServerDetails
	 int                       GetNumPlayers (  );                               		//  Engine.GameInfo.GetNumPlayers
	 void                      GetServerInfo ( struct FServerResponseLine* ServerState );		//  Engine.GameInfo.GetServerInfo
	 struct FString            GetNetworkNumber (  );                            		// [ FUNC_Native ] Engine.GameInfo.GetNetworkNumber
	 void                      InitMaplistHandler (  );                          		//  Engine.GameInfo.InitMaplistHandler
	 void                      InitVoiceReplicationInfo (  );                    		//  Engine.GameInfo.InitVoiceReplicationInfo
	 void                      InitGameReplicationInfo (  );                     		//  Engine.GameInfo.InitGameReplicationInfo
	 void                      eventKickIdler ( class APlayerController* PC );   		// [ FUNC_Event ] Engine.GameInfo.KickIdler
	 void                      eventGameEnding (  );                             		// [ FUNC_Event ] Engine.GameInfo.GameEnding
	 void                      Timer (  );                                       		//  Engine.GameInfo.Timer
	 void                      InitLogging (  );                                 		//  Engine.GameInfo.InitLogging
	 void                      Reset (  );                                       		//  Engine.GameInfo.Reset
	 void                      LogRespawnStatistics (  );                        		//  Engine.GameInfo.LogRespawnStatistics
	 void                      InitializeEveryPlayerStarts (  );                 		//  Engine.GameInfo.InitializeEveryPlayerStarts
	 void                      PostBeginPlay (  );                               		//  Engine.GameInfo.PostBeginPlay
	 bool                      NoBlood (  );                                     		//  Engine.GameInfo.NoBlood
	 bool                      UseLowGore (  );                                  		//  Engine.GameInfo.UseLowGore
	 void                      ChangeMap ( int ContextID );                      		//  Engine.GameInfo.ChangeMap
	 void                      TeamQueueAnnouncement ( unsigned char Team, struct FString ASoundName, unsigned char AnnouncementLevel, unsigned char Priority, unsigned char Switch );		//  Engine.GameInfo.TeamQueueAnnouncement
	 void                      TeamReceiveLocalizedMessageEx ( unsigned char Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, struct FVector vLocation, float fMaxDist, bool bExceptOwner );		//  Engine.GameInfo.TeamReceiveLocalizedMessageEx
	 void                      TeamReceiveLocalizedMessage ( unsigned char Team, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.GameInfo.TeamReceiveLocalizedMessage
	 void                      AllReceiveLocalizedMessage ( class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.GameInfo.AllReceiveLocalizedMessage
	 struct FString            FindPlayerByID ( int PlayerID );                  		//  Engine.GameInfo.FindPlayerByID
	 void                      PrecacheGore (  );                                		//  Engine.GameInfo.PrecacheGore
	 void                      PrecacheGameAnnouncements ( class AAnnouncerVoice* V, bool bRewardSounds );		//  Engine.GameInfo.PrecacheGameAnnouncements
	 void                      PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel );		//  Engine.GameInfo.PrecacheGameSkeletalMeshes
	 void                      PrecacheGameStaticMeshes ( class ALevelInfo* myLevel );		//  Engine.GameInfo.PrecacheGameStaticMeshes
	 void                      PrecacheGameTextures ( class ALevelInfo* myLevel );		//  Engine.GameInfo.PrecacheGameTextures
	 void                      Precache ( class ALevelInfo* Level );             		//  Engine.GameInfo.Precache
	 void                      UpdatePrecacheSkeletalMeshes (  );                		//  Engine.GameInfo.UpdatePrecacheSkeletalMeshes
	 void                      UpdatePrecacheStaticMeshes (  );                  		//  Engine.GameInfo.UpdatePrecacheStaticMeshes
	 void                      UpdatePrecacheMaterials (  );                     		//  Engine.GameInfo.UpdatePrecacheMaterials
	 void                      Destroyed (  );                                   		//  Engine.GameInfo.Destroyed
	 void                      eventSetOldTeamInfo ( class AGameReplicationInfo* OldGRI );		// [ FUNC_Event ] Engine.GameInfo.SetOldTeamInfo
	 int                       GetBootySeedValue (  );                           		//  Engine.GameInfo.GetBootySeedValue
	 void                      eventForceSetGRIInitialState (  );                		// [ FUNC_Event ] Engine.GameInfo.ForceSetGRIInitialState
	 void                      eventForceSetInitialState (  );                   		// [ FUNC_Event ] Engine.GameInfo.ForceSetInitialState
	 void                      eventForcePostNetBeginPlay (  );                  		// [ FUNC_Event ] Engine.GameInfo.ForcePostNetBeginPlay
	 void                      eventForcePostBeginPlay (  );                     		// [ FUNC_Event ] Engine.GameInfo.ForcePostBeginPlay
	 void                      eventForceBeginPlay (  );                         		// [ FUNC_Event ] Engine.GameInfo.ForceBeginPlay
	 void                      eventForcePreBeginPlay (  );                      		// [ FUNC_Event ] Engine.GameInfo.ForcePreBeginPlay
	 void                      PreBeginPlay (  );                                		//  Engine.GameInfo.PreBeginPlay
	 void                      AnnounceUAV ( class AController* Caller );        		//  Engine.GameInfo.AnnounceUAV
	 void                      AnnounceHelicopter ( class AController* Caller ); 		//  Engine.GameInfo.AnnounceHelicopter
	 void                      AnnounceArtillery ( class AController* Caller );  		//  Engine.GameInfo.AnnounceArtillery
	 void                      NativeSettingAfterChangedHost (  );               		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.NativeSettingAfterChangedHost
	 void                      LoadMapList ( struct FString MapPrefix, class TArray< struct FString >* Maps );		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.LoadMapList
	 bool                      DeletePackage ( struct FString PackageName );     		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.DeletePackage
	 bool                      SavePackage ( struct FString PackageName );       		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.SavePackage
	 void                      AllDataObjects ( class UClass* objClass, struct FString PackageName, class UObject** obj );		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.AllDataObjects
	 class UObject*            LoadDataObject ( class UClass* objClass, struct FString objName, struct FString PackageName );		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.LoadDataObject
	 bool                      DeleteDataObject ( class UClass* objClass, struct FString objName, struct FString PackageName );		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.DeleteDataObject
	 class UObject*            CreateDataObject ( class UClass* objClass, struct FString objName, struct FString PackageName );		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.CreateDataObject
	 class UManifest*          GetSavedGames (  );                               		// [ FUNC_Final | FUNC_Native ] Engine.GameInfo.GetSavedGames

	// Public Imports
	AGameInfo(class AGameInfo const &);
	class AGameInfo &  operator=(class AGameInfo const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x058C

// Class Engine.LevelInfo
class DLL_IMPORT ALevelInfo : public AZoneInfo
{
public:
	class TArray< struct FCombatSituationPoint >       CSReviewPoints;                                   		// 0x04B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FCombatSituationLine >        CSReviewLines;                                    		// 0x04BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FCombatSituationNameTag >     CSReviewNameTags;                                 		// 0x04C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FCombatSituationArrow >       CSReviewArrows;                                   		// 0x04D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FCombatSituationSphere >      CSReviewSpheres;                                  		// 0x04E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iQueuedSendBytes;                                 		// 0x04EC ( 0x0004 ) 
	int                                                iQueuedRecvBytes;                                 		// 0x04F0 ( 0x0004 ) 
	float                                              TimeDilation;                                     		// 0x04F4 ( 0x0004 ) [ CPF_Net ]
	float                                              AppDeltaTime;                                     		// 0x04F8 ( 0x0004 ) 
	float                                              TimeSeconds;                                      		// 0x04FC ( 0x0004 ) 
	float                                              PlayTimeSeconds;                                  		// 0x0500 ( 0x0004 ) 
	int                                                Year;                                             		// 0x0504 ( 0x0004 ) [ CPF_Transient ]
	int                                                Month;                                            		// 0x0508 ( 0x0004 ) [ CPF_Transient ]
	int                                                Day;                                              		// 0x050C ( 0x0004 ) [ CPF_Transient ]
	int                                                DayOfWeek;                                        		// 0x0510 ( 0x0004 ) [ CPF_Transient ]
	int                                                Hour;                                             		// 0x0514 ( 0x0004 ) [ CPF_Transient ]
	int                                                Minute;                                           		// 0x0518 ( 0x0004 ) [ CPF_Transient ]
	int                                                Second;                                           		// 0x051C ( 0x0004 ) [ CPF_Transient ]
	int                                                Millisecond;                                      		// 0x0520 ( 0x0004 ) [ CPF_Transient ]
	float                                              PauseDelay;                                       		// 0x0524 ( 0x0004 ) 
	struct FString                                     Title;                                            		// 0x0528 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Author;                                           		// 0x0534 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     Description;                                      		// 0x0540 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UMaterial*                                   Screenshot;                                       		// 0x054C ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     DecoTextName;                                     		// 0x0550 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                IdealPlayerCountMin;                              		// 0x055C ( 0x0004 ) [ CPF_Edit ]
	int                                                IdealPlayerCountMax;                              		// 0x0560 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     ExtraInfo;                                        		// 0x0564 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                SinglePlayerTeamSize;                             		// 0x0570 ( 0x0004 ) [ CPF_Edit ]
	class UMaterial*                                   RadarMapImage;                                    		// 0x0574 ( 0x0004 ) [ CPF_Edit ]
	float                                              CustomRadarRange;                                 		// 0x0578 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bDoTraceNativeInstant:1;                          		// 0x057C ( 0x0004 )  [0x00000001]
	unsigned long                                      bServiceBuildHK:1;                                		// 0x057C ( 0x0004 )  [0x00000002]
	class UClass*                                      PCI;                                              		// 0x0580 ( 0x0004 ) 
	unsigned long                                      bServiceBuild:1;                                  		// 0x0584 ( 0x0004 )  [0x00000001]
	unsigned long                                      bServiceTestBuild:1;                              		// 0x0584 ( 0x0004 )  [0x00000002]
	unsigned long                                      bTeenVersion:1;                                   		// 0x0584 ( 0x0004 )  [0x00000004]
	unsigned long                                      bConnectDMZ:1;                                    		// 0x0584 ( 0x0004 )  [0x00000008]
	unsigned char                                      PhysicsDetailLevel;                               		// 0x0588 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      MeshLODDetailLevel;                               		// 0x0589 ( 0x0001 ) [ CPF_Edit ]
	float                                              KarmaTimeScale;                                   		// 0x058C ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	float                                              RagdollTimeScale;                                 		// 0x0590 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	int                                                MaxRagdolls;                                      		// 0x0594 ( 0x0004 ) [ CPF_Edit ]
	float                                              KarmaGravScale;                                   		// 0x0598 ( 0x0004 ) [ CPF_Edit | CPF_Net ]
	unsigned long                                      bKStaticFriction:1;                               		// 0x059C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bKNoInit:1;                                       		// 0x059C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                LastTaunt[ 0x02 ];                                		// 0x05A0 ( 0x0008 ) 
	float                                              DecalStayScale;                                   		// 0x05A8 ( 0x0004 ) 
	struct FString                                     LevelEnterText;                                   		// 0x05AC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LocalizedPkg;                                     		// 0x05B8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class APlayerReplicationInfo*                      Pauser;                                           		// 0x05C4 ( 0x0004 ) [ CPF_Net ]
	class ULevelSummary*                               Summary;                                          		// 0x05C8 ( 0x0004 ) 
	struct FString                                     VisibleGroups;                                    		// 0x05CC ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      HideFromMenus:1;                                  		// 0x05D8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bLonePlayer:1;                                    		// 0x05D8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bBegunPlay:1;                                     		// 0x05D8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bPlayersOnly:1;                                   		// 0x05D8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bFreezeKarma:1;                                   		// 0x05D8 ( 0x0004 )  [0x00000010]
	unsigned char                                      DetailMode;                                       		// 0x05DC ( 0x0001 ) [ CPF_Const ]
	unsigned long                                      bDropDetail:1;                                    		// 0x05E0 ( 0x0004 )  [0x00000001]
	unsigned long                                      bAggressiveLOD:1;                                 		// 0x05E0 ( 0x0004 )  [0x00000002]
	unsigned long                                      bStartup:1;                                       		// 0x05E0 ( 0x0004 )  [0x00000004]
	unsigned long                                      bLowSoundDetail:1;                                		// 0x05E0 ( 0x0004 )  [0x00000008]
	unsigned long                                      bPathsRebuilt:1;                                  		// 0x05E0 ( 0x0004 )  [0x00000010]
	unsigned long                                      bHasPathNodes:1;                                  		// 0x05E0 ( 0x0004 )  [0x00000020]
	unsigned long                                      bLevelChange:1;                                   		// 0x05E0 ( 0x0004 )  [0x00000040]
	unsigned long                                      bShouldPreload:1;                                 		// 0x05E0 ( 0x0004 )  [0x00000080]
	unsigned long                                      bDesireSkinPreload:1;                             		// 0x05E0 ( 0x0004 )  [0x00000100]
	unsigned long                                      bKickLiveIdlers:1;                                		// 0x05E0 ( 0x0004 )  [0x00000200]
	unsigned long                                      bSkinsPreloaded:1;                                		// 0x05E0 ( 0x0004 )  [0x00000400]
	unsigned long                                      bClassicView:1;                                   		// 0x05E0 ( 0x0004 )  [0x00000800]
	unsigned long                                      bShowRadarMap:1;                                  		// 0x05E0 ( 0x0004 )  [0x00001000][ CPF_Edit ]
	unsigned long                                      bUseTerrainForRadarRange:1;                       		// 0x05E0 ( 0x0004 )  [0x00002000][ CPF_Edit ]
	unsigned long                                      bIsSaveGame:1;                                    		// 0x05E0 ( 0x0004 )  [0x00004000]
	unsigned long                                      bSupportSaveGames:1;                              		// 0x05E0 ( 0x0004 )  [0x00008000][ CPF_Edit ]
	unsigned long                                      bNeverPrecache:1;                                 		// 0x05E0 ( 0x0004 )  [0x00010000]
	int                                                LevelTextureLODBias;                              		// 0x05E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              AnimMeshGlobalLOD;                                		// 0x05E8 ( 0x0004 ) 
	struct FVector                                     CameraLocationDynamic;                            		// 0x05EC ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CameraLocationTop;                                		// 0x05F8 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CameraLocationFront;                              		// 0x0604 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     CameraLocationSide;                               		// 0x0610 ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    CameraRotationDynamic;                            		// 0x061C ( 0x000C ) [ CPF_Edit ]
	struct FString                                     Song;                                             		// 0x0628 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              PlayerDoppler;                                    		// 0x0634 ( 0x0004 ) [ CPF_Edit ]
	float                                              MusicVolumeOverride;                              		// 0x0638 ( 0x0004 ) [ CPF_Edit ]
	class UTexRotator*                                 BG;                                               		// 0x063C ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     TextureCoord1;                                    		// 0x0640 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     WorldCoord1;                                      		// 0x064C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     TextureCoord2;                                    		// 0x0658 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     WorldCoord2;                                      		// 0x0664 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     AirStrikeLocation;                                		// 0x0670 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     MinimapCropCoords1;                               		// 0x067C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     MinimapCropCoords2;                               		// 0x0688 ( 0x000C ) [ CPF_Edit ]
	class UMaterial*                                   BigmapBG;                                         		// 0x0694 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     BigmapTextureCoord1;                              		// 0x0698 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     BigmapTextureCoord2;                              		// 0x06A4 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     BigmapMinimapCropCoords1;                         		// 0x06B0 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     BigmapMinimapCropCoords2;                         		// 0x06BC ( 0x000C ) [ CPF_Edit ]
	unsigned long                                      IsAirStriking:1;                                  		// 0x06C8 ( 0x0004 )  [0x00000001][ CPF_Net ]
	float                                              fAirStrikeFadeTime;                               		// 0x06CC ( 0x0004 ) 
	int                                                AirStrikeTeamIndex;                               		// 0x06D0 ( 0x0004 ) [ CPF_Net ]
	unsigned long                                      bLevelPrecached:1;                                		// 0x06D4 ( 0x0004 )  [0x00000001]
	float                                              Brightness;                                       		// 0x06D8 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    DefaultTexture;                                   		// 0x06DC ( 0x0004 ) 
	class UTexture*                                    WireframeTexture;                                 		// 0x06E0 ( 0x0004 ) 
	class UTexture*                                    WhiteSquareTexture;                               		// 0x06E4 ( 0x0004 ) 
	class UTexture*                                    LargeVertex;                                      		// 0x06E8 ( 0x0004 ) 
	int                                                HubStackLevel;                                    		// 0x06EC ( 0x0004 ) 
	unsigned char                                      LevelAction;                                      		// 0x06F0 ( 0x0001 ) [ CPF_Transient ]
	class AGameReplicationInfo*                        GRI;                                              		// 0x06F4 ( 0x0004 ) [ CPF_Transient ]
	unsigned char                                      NetMode;                                          		// 0x06F8 ( 0x0001 ) 
	struct FString                                     ComputerName;                                     		// 0x06FC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     EngineVersion;                                    		// 0x0708 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MinNetVersion;                                    		// 0x0714 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AuthLogin_AccountID;                              		// 0x0720 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AuthLogin_GUID;                                   		// 0x072C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                AuthLogin_ChannelingType;                         		// 0x0738 ( 0x0004 ) 
	struct FString                                     AuthLogin_AuthKey;                                		// 0x073C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AuthLogin_RegionKey;                              		// 0x0748 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              DeltaTime;                                        		// 0x0754 ( 0x0004 ) 
	struct FString                                     DefaultGameType;                                  		// 0x0758 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	struct FString                                     PreCacheGame;                                     		// 0x0764 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class AGameInfo*                                   Game;                                             		// 0x0770 ( 0x0004 ) 
	float                                              DefaultGravity;                                   		// 0x0774 ( 0x0004 ) [ CPF_Net ]
	float                                              LastVehicleCheck;                                 		// 0x0778 ( 0x0004 ) 
	float                                              StallZ;                                           		// 0x077C ( 0x0004 ) [ CPF_Edit ]
	class ANavigationPoint*                            NavigationPointList;                              		// 0x0780 ( 0x0004 ) [ CPF_Const ]
	class AController*                                 ControllerList;                                   		// 0x0784 ( 0x0004 ) [ CPF_Const ]
	class APlayerController*                           LocalPlayerController;                            		// 0x0788 ( 0x0004 ) 
	class AwGameStateStorageSender*                    GSSSList;                                         		// 0x078C ( 0x0004 ) [ CPF_Const ]
	unsigned long                                      bUseHeadlights:1;                                 		// 0x0790 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              HeadlightScaling;                                 		// 0x0794 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     NextURL;                                          		// 0x0798 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bNextItems:1;                                     		// 0x07A4 ( 0x0004 )  [0x00000001]
	float                                              NextSwitchCountdown;                              		// 0x07A8 ( 0x0004 ) 
	class UObjectPool*                                 ObjectPool;                                       		// 0x07AC ( 0x0004 ) [ CPF_Transient ]
	class TArray< class UMaterial* >                   PrecacheMaterials;                                		// 0x07B0 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< class UStaticMesh* >                 PrecacheStaticMeshes;                             		// 0x07BC ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< class UMesh* >                       PrecacheSkeletalMeshes;                           		// 0x07C8 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class UStaticMesh*                                 IndoorCamouflageMesh;                             		// 0x07D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              IndoorMeshDrawscale;                              		// 0x07D8 ( 0x0004 ) [ CPF_Edit ]
	class UStaticMesh*                                 OutdoorCamouflageMesh;                            		// 0x07DC ( 0x0004 ) [ CPF_Edit ]
	float                                              OutdoorMeshDrawscale;                             		// 0x07E0 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       DustColor;                                        		// 0x07E4 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       WaterDustColor;                                   		// 0x07E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              MoveRepSize;                                      		// 0x07EC ( 0x0004 ) 
	float                                              MaxClientFrameRate;                               		// 0x07F0 ( 0x0004 ) 
	float                                              MaxTimeMargin;                                    		// 0x07F4 ( 0x0004 ) 
	float                                              TimeMarginSlack;                                  		// 0x07F8 ( 0x0004 ) 
	float                                              MinTimeMargin;                                    		// 0x07FC ( 0x0004 ) 
	class APlayerController*                           ReplicationViewer;                                		// 0x0800 ( 0x0004 ) [ CPF_Const ]
	class AActor*                                      ReplicationViewTarget;                            		// 0x0804 ( 0x0004 ) [ CPF_Const ]
	class UwCharacterManager*                          CharMgr;                                          		// 0x0808 ( 0x0004 ) [ CPF_Const ]
	class UwWeaponManager*                             WeaponMgr;                                        		// 0x080C ( 0x0004 ) [ CPF_Const ]
	class UwGameManager*                               GameMgr;                                          		// 0x0810 ( 0x0004 ) [ CPF_Const ]
	class UItemIterator*                               ItemItr;                                          		// 0x0814 ( 0x0004 ) [ CPF_Const ]
	class TArray< int >                                WeaponTotalAmmos;                                 		// 0x0818 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                WeaponCurrentAmmos;                               		// 0x0824 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                WeaponClassNumbers;                               		// 0x0830 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                WeaponAddPartsID;                                 		// 0x083C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                TeamIndex;                                        		// 0x0848 ( 0x0004 ) 
	int                                                Kills;                                            		// 0x084C ( 0x0004 ) 
	int                                                Assists;                                          		// 0x0850 ( 0x0004 ) 
	int                                                Deaths;                                           		// 0x0854 ( 0x0004 ) 
	int                                                EXPs;                                             		// 0x0858 ( 0x0004 ) 
	int                                                Points;                                           		// 0x085C ( 0x0004 ) 
	int                                                Scores;                                           		// 0x0860 ( 0x0004 ) 
	class TArray< int >                                MainWeaponIDs;                                    		// 0x0864 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                MainWeaponUsingSeconds;                           		// 0x0870 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APawn* >                       Helicopters;                                      		// 0x087C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AVehicle* >                    Vehicles;                                         		// 0x0888 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APawn* >                       PawnList;                                         		// 0x0894 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APickup* >                     SupplyList_Health;                                		// 0x08A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APickup* >                     SupplyList_Artillery;                             		// 0x08AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APickup* >                     SupplyList_Helicopter;                            		// 0x08B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APickup* >                     SupplyList_UAV;                                   		// 0x08C4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class APickup* >                     Medals;                                           		// 0x08D0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AwProjectile* >                Grenades;                                         		// 0x08DC ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      PPE_ElementIndex;                                 		// 0x08E8 ( 0x0001 ) [ CPF_Edit ]
	class TArray< struct FToneElement >                SOn_PostEffects;                                  		// 0x08EC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class TArray< struct FToneElement >                SOff_PostEffects;                                 		// 0x08F8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned char                                      PPE_a_Mode;                                       		// 0x0904 ( 0x0001 ) [ CPF_Edit ]
	float                                              Glow_SkyScale;                                    		// 0x0908 ( 0x0004 ) [ CPF_Edit ]
	float                                              Glow_GaussMultiplier;                             		// 0x090C ( 0x0004 ) [ CPF_Edit ]
	float                                              Glow_GaussMean;                                   		// 0x0910 ( 0x0004 ) [ CPF_Edit ]
	float                                              Glow_GaussStdDev;                                 		// 0x0914 ( 0x0004 ) [ CPF_Edit ]
	float                                              SunShafts_Decay;                                  		// 0x0918 ( 0x0004 ) [ CPF_Edit ]
	float                                              SunShafts_Weight;                                 		// 0x091C ( 0x0004 ) [ CPF_Edit ]
	float                                              SunShafts_Density;                                		// 0x0920 ( 0x0004 ) [ CPF_Edit ]
	float                                              SunShafts_Exposure;                               		// 0x0924 ( 0x0004 ) [ CPF_Edit ]
	float                                              SunShafts_HeightScale;                            		// 0x0928 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       SunShafts_Color;                                  		// 0x092C ( 0x0004 ) [ CPF_Edit ]
	float                                              MaxOcclusionDistance;                             		// 0x0930 ( 0x0004 ) [ CPF_Edit ]
	float                                              OcclusionExponent;                                		// 0x0934 ( 0x0004 ) [ CPF_Edit ]
	float                                              FullyOccludedSamplesFraction;                     		// 0x0938 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bUseSDRespawnInTeamGame:1;                        		// 0x093C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              fLowDetailBias;                                   		// 0x0940 ( 0x0004 ) 
	float                                              fMediumDetailBias;                                		// 0x0944 ( 0x0004 ) 
	float                                              fHighDetailBias;                                  		// 0x0948 ( 0x0004 ) 
	float                                              fUltraDetailBias;                                 		// 0x094C ( 0x0004 ) 
	unsigned long                                      bTestFlag1:1;                                     		// 0x0950 ( 0x0004 )  [0x00000001]
	unsigned long                                      bTestFlag2:1;                                     		// 0x0950 ( 0x0004 )  [0x00000002]
	unsigned long                                      bTestFlag3:1;                                     		// 0x0950 ( 0x0004 )  [0x00000004]
	float                                              fTestValue1;                                      		// 0x0954 ( 0x0004 ) 
	float                                              fTestValue2;                                      		// 0x0958 ( 0x0004 ) 
	float                                              fTestValue3;                                      		// 0x095C ( 0x0004 ) 
	class TArray< class UVisibilityItemArray* >        Visibility;                                       		// 0x0960 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                VisibilityOneRowCount;                            		// 0x096C ( 0x0004 ) 
	class TArray< int >                                VisibilityNew;                                    		// 0x0970 ( 0x000C ) [ CPF_NeedCtorLink ]
	class ANavigationPoint*                            InfluenceCurNav;                                  		// 0x097C ( 0x0004 ) 
	int                                                InfluenceStepSize;                                		// 0x0980 ( 0x0004 ) 
	float                                              InfluenceDistFactor;                              		// 0x0984 ( 0x0004 ) 
	class AwAILevelBase*                               AILevel;                                          		// 0x0988 ( 0x0004 ) 
	float                                              fMoveLogTimer;                                    		// 0x098C ( 0x0004 ) 
	class UUserzoneInfo*                               kUserzoneInfo;                                    		// 0x0990 ( 0x0004 ) 
	struct FVector                                     SkyViewLocation;                                  		// 0x0994 ( 0x000C ) 

	// UScript Functions
	 void                      eventOnDisconnect (  );                           		// [ FUNC_Event ] Engine.LevelInfo.OnDisconnect
	 bool                      GetIsConnectDMZ (  );                             		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsConnectDMZ
	 bool                      GetIsForceServiceBuild (  );                      		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsForceServiceBuild
	 bool                      GetIsServiceBuild (  );                           		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsServiceBuild
	 bool                      GetIsUseAdvCamShake (  );                         		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsUseAdvCamShake
	 bool                      GetIsUseStanceToggle (  );                        		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsUseStanceToggle
	 bool                      GetIsUseMouseRevision (  );                       		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsUseMouseRevision
	 bool                      GetIsUseRagdoll (  );                             		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsUseRagdoll
	 bool                      GetIsNoGore (  );                                 		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsNoGore
	 bool                      GetIsTeenVersion (  );                            		// [ FUNC_Simulated ] Engine.LevelInfo.GetIsTeenVersion
	 void                      ClearInvalidCache (  );                           		// [ FUNC_Simulated ] Engine.LevelInfo.ClearInvalidCache
	 void                      eventSetNoUpdateAllGSSS (  );                     		// [ FUNC_Event ] Engine.LevelInfo.SetNoUpdateAllGSSS
//	 class APlayerController*  GetLocalPlayerController (  );                    		// [ FUNC_Simulated ] Engine.LevelInfo.GetLocalPlayerController
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Simulated | FUNC_Event ] Engine.LevelInfo.PreBeginPlay
	 void                      Reset (  );                                       		//  Engine.LevelInfo.Reset
	 void                      ThisIsNeverExecuted (  );                         		//  Engine.LevelInfo.ThisIsNeverExecuted
	 void                      eventServerTravel ( struct FString URL, bool bItems );		// [ FUNC_Event ] Engine.LevelInfo.ServerTravel
	 bool                      IsPendingConnection (  );                         		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.IsPendingConnection
	 struct FString            GetAddressURL (  );                               		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.GetAddressURL
	 bool                      IsSoftwareRendering (  );                         		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.IsSoftwareRendering
	 bool                      IsDemoBuild (  );                                 		// [ FUNC_Final | FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.IsDemoBuild
	 struct FString            GetLocalURL (  );                                 		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.GetLocalURL
	 void                      ResetPrecacheSkeletalMeshes (  );                 		// [ FUNC_Simulated ] Engine.LevelInfo.ResetPrecacheSkeletalMeshes
	 void                      AddPrecacheSkeletalMesh ( class UMesh* mes );     		// [ FUNC_Simulated ] Engine.LevelInfo.AddPrecacheSkeletalMesh
	 void                      ResetPrecacheStaticMesh (  );                     		// [ FUNC_Simulated ] Engine.LevelInfo.ResetPrecacheStaticMesh
	 void                      AddPrecacheStaticMesh ( class UStaticMesh* stat );		// [ FUNC_Simulated ] Engine.LevelInfo.AddPrecacheStaticMesh
	 void                      ResetPrecacheMaterials (  );                      		// [ FUNC_Simulated ] Engine.LevelInfo.ResetPrecacheMaterials
	 void                      AddPrecacheMaterial ( class UMaterial* mat );     		// [ FUNC_Simulated ] Engine.LevelInfo.AddPrecacheMaterial
	 void                      eventFillPrecacheSkeletalMeshesArray ( bool FullPrecache );		// [ FUNC_Simulated | FUNC_Event ] Engine.LevelInfo.FillPrecacheSkeletalMeshesArray
	 void                      eventFillPrecacheStaticMeshesArray ( bool FullPrecache );		// [ FUNC_Simulated | FUNC_Event ] Engine.LevelInfo.FillPrecacheStaticMeshesArray
	 void                      PrecacheAnnouncements (  );                       		// [ FUNC_Simulated ] Engine.LevelInfo.PrecacheAnnouncements
	 void                      eventFillPrecacheMaterialsArray ( bool FullPrecache );		// [ FUNC_Simulated | FUNC_Event ] Engine.LevelInfo.FillPrecacheMaterialsArray
	 void                      eventPrecacheInit (  );                           		// [ FUNC_Simulated | FUNC_Event ] Engine.LevelInfo.PrecacheInit
	 class UClass*             GetGameClass (  );                                		// [ FUNC_Simulated ] Engine.LevelInfo.GetGameClass
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.LevelInfo.PostBeginPlay
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Event ] Engine.LevelInfo.Tick
	 class ANavigationPoint*   GetRandomNavigationPointAround ( struct FVector V );		//  Engine.LevelInfo.GetRandomNavigationPointAround
	 class ANavigationPoint*   GetClosestNavigationPoint ( struct FVector V );   		// [ FUNC_Native ] Engine.LevelInfo.GetClosestNavigationPoint
	 bool                      IsVisibleByVisID ( int sVisID, int eVisID, int sStance, int eStance );		//  Engine.LevelInfo.IsVisibleByVisID
	 bool                      IsVisible ( class ANavigationPoint* S, class ANavigationPoint* E, int sStance, int eStance );		//  Engine.LevelInfo.IsVisible
	 void                      UpdateInfluence (  );                             		// [ FUNC_Native ] Engine.LevelInfo.UpdateInfluence
	 class AwAILevelBase*      GetAILevel (  );                                  		//  Engine.LevelInfo.GetAILevel
	 class APhysicsVolume*     GetPhysicsVolume ( struct FVector loc );          		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.GetPhysicsVolume
	 void                      ForceLoadTexture ( class UTexture* Texture );     		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.ForceLoadTexture
//	 void                      UpdateDistanceFogLOD ( float LOD );               		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.UpdateDistanceFogLOD
	 bool                      IsEntry (  );                                     		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.IsEntry
	 void                      DetailChange ( unsigned char NewDetailMode );     		// [ FUNC_Simulated | FUNC_Native ] Engine.LevelInfo.DetailChange
	 bool                      IsUseGraphicOption ( struct FString OptionName ); 		// [ FUNC_Native ] Engine.LevelInfo.IsUseGraphicOption
	 class UwMatchMaker*       GetMatchMaker (  );                               		// [ FUNC_Native ] Engine.LevelInfo.GetMatchMaker
	 void                      SetCaptureQuality ( int iValue );                 		// [ FUNC_Native ] Engine.LevelInfo.SetCaptureQuality
	 void                      SetCaptureResoultion ( int iValue );              		// [ FUNC_Native ] Engine.LevelInfo.SetCaptureResoultion
	 bool                      IsCapturing (  );                                 		// [ FUNC_Native ] Engine.LevelInfo.IsCapturing
	 void                      SetCapture ( bool bCapture );                     		// [ FUNC_Native ] Engine.LevelInfo.SetCapture
	 void                      ResetCombationSituationReview (  );               		// [ FUNC_Native ] Engine.LevelInfo.ResetCombationSituationReview
	 bool                      LoadUsermove ( struct FString szPath, int nCommand, int nCombatNum, struct FString szUserName );		// [ FUNC_Native ] Engine.LevelInfo.LoadUsermove
	 bool                      LoadUserzone ( struct FString szPath, int nCommand, struct FString szUserName );		// [ FUNC_Native ] Engine.LevelInfo.LoadUserzone
	 bool                      LoadKilllog ( struct FString szPath, int nCommand, int nOption );		// [ FUNC_Native ] Engine.LevelInfo.LoadKilllog

	// Public Imports
	ALevelInfo(class ALevelInfo const &);
	ALevelInfo(void);
	class ALevelInfo &  operator=(class ALevelInfo const &);
	float  CalcInfluence(class AActor *,int,float,class ANavigationPoint *);
	class APhysicsVolume *  GetDefaultPhysicsVolume(void);
	class APlayerController *  GetLocalPlayerController(void);
	class APhysicsVolume *  GetPhysicsVolume(class FVector,class AActor *,int);
	void  InitDistanceFogLOD(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  UpdateDistanceFogLOD(float);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x04F0

// Class Engine.TextToSpeechAlias
class DLL_IMPORT UTextToSpeechAlias : public UObject
{
public:
	class TArray< struct FSpeechReplacement >          Aliases;                                          		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     RemoveCharacters;                                 		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]

	// Public Imports
	UTextToSpeechAlias(class UTextToSpeechAlias const &);
	class UTextToSpeechAlias &  operator=(class UTextToSpeechAlias const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0018

// Class Engine.AmbientSound
class DLL_IMPORT AAmbientSound : public AKeypoint
{
public:
	class TArray< struct FSoundEmitter >               SoundEmitters;                                    		// 0x03C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              AmbientVolume;                                    		// 0x03D4 ( 0x0004 ) 

	// Public Imports
	AAmbientSound(class AAmbientSound const &);
	AAmbientSound(void);
	class AAmbientSound &  operator=(class AAmbientSound const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.Vignette
class DLL_IMPORT AVignette : public AActor
{
public:
	struct FString                                     MapName;                                          		// 0x03C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class UClass*                                      GameClass;                                        		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      eventDrawVignette ( class UCanvas* C, float Progress );		// [ FUNC_Simulated | FUNC_Event ] Engine.Vignette.DrawVignette
	 void                      eventInit (  );                                   		// [ FUNC_Simulated | FUNC_Event ] Engine.Vignette.Init

	// Public Imports
	AVignette(class AVignette const &);
	class AVignette &  operator=(class AVignette const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.Note
class DLL_IMPORT ANote : public AActor
{
public:
	struct FString                                     Text;                                             		// 0x03C8 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	ANote(class ANote const &);
	ANote(void);
	class ANote &  operator=(class ANote const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.wWeapon
class DLL_IMPORT AwWeapon : public AInventory
{
public:
	unsigned char                                      WeaponType;                                       		// 0x043C ( 0x0001 ) [ CPF_Edit ]
	class UwWeaponBaseParams*                          BaseParams;                                       		// 0x0440 ( 0x0004 ) 
	class UClass*                                      ResParams;                                        		// 0x0444 ( 0x0004 ) 
	struct FString                                     BaseName;                                         		// 0x0448 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bHoldFire:1;                                      		// 0x0454 ( 0x0004 )  [0x00000001][ CPF_Net ]
	float                                              fAccumulationOverHeat;                            		// 0x0458 ( 0x0004 ) [ CPF_Net ]
	class UClass*                                      FireModeClass[ 0x03 ];                            		// 0x045C ( 0x000C ) [ CPF_Edit ]
	class UwWeaponFire*                                FireMode[ 0x03 ];                                 		// 0x0468 ( 0x000C ) [ CPF_Edit ]
	class AwAmmunition*                                Ammo[ 0x03 ];                                     		// 0x0474 ( 0x000C ) [ CPF_Edit | CPF_Net ]
	struct FName                                       IdleAnim;                                         		// 0x0480 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       RestAnim;                                         		// 0x0484 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       RunAnim;                                          		// 0x0488 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       SprintAnim;                                       		// 0x048C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       SelectAnim;                                       		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       SelectNewAnim;                                    		// 0x0494 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       PutDownAnim;                                      		// 0x0498 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       PutdownQuickAnim;                                 		// 0x049C ( 0x0004 ) 
	struct FName                                       ProneMoveAnim;                                    		// 0x04A0 ( 0x0004 ) 
	struct FName                                       SprintUpAnim;                                     		// 0x04A4 ( 0x0004 ) 
	float                                              IdleAnimRate;                                     		// 0x04A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              RestAnimRate;                                     		// 0x04AC ( 0x0004 ) [ CPF_Edit ]
	float                                              RunAnimRate;                                      		// 0x04B0 ( 0x0004 ) [ CPF_Edit ]
	float                                              SprintAnimRate;                                   		// 0x04B4 ( 0x0004 ) [ CPF_Edit ]
	float                                              SelectAnimRate;                                   		// 0x04B8 ( 0x0004 ) [ CPF_Edit ]
	float                                              SelectNewAnimRate;                                		// 0x04BC ( 0x0004 ) [ CPF_Edit ]
	float                                              PutDownAnimRate;                                  		// 0x04C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              PutDownQuickAnimRate;                             		// 0x04C4 ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      SelectSound;                                      		// 0x04C8 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     SelectForce;                                      		// 0x04CC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	class USound*                                      NullSound;                                        		// 0x04D8 ( 0x0004 ) 
	int                                                BotMode;                                          		// 0x04DC ( 0x0004 ) [ CPF_Edit ]
	float                                              AIRating;                                         		// 0x04E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              CurrentRating;                                    		// 0x04E4 ( 0x0004 ) 
	unsigned long                                      bMeleeWeapon:1;                                   		// 0x04E8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bSniping:1;                                       		// 0x04E8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bShowChargingBar:1;                               		// 0x04E8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bMatchWeapons:1;                                  		// 0x04E8 ( 0x0004 )  [0x00000008]
	unsigned long                                      bCanThrow:1;                                      		// 0x04E8 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bForceSwitch:1;                                   		// 0x04E8 ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bNotInPriorityList:1;                             		// 0x04E8 ( 0x0004 )  [0x00000040][ CPF_Edit | CPF_Deprecated ]
	unsigned long                                      bNotInDemo:1;                                     		// 0x04E8 ( 0x0004 )  [0x00000080]
	unsigned long                                      bNoVoluntarySwitch:1;                             		// 0x04E8 ( 0x0004 )  [0x00000100]
	unsigned long                                      bSpectated:1;                                     		// 0x04E8 ( 0x0004 )  [0x00000200]
	unsigned long                                      bDebugging:1;                                     		// 0x04E8 ( 0x0004 )  [0x00000400]
	unsigned long                                      bNoInstagibReplace:1;                             		// 0x04E8 ( 0x0004 )  [0x00000800]
	unsigned long                                      bInitOldMesh:1;                                   		// 0x04E8 ( 0x0004 )  [0x00001000]
	unsigned long                                      bUseOldWeaponMesh:1;                              		// 0x04E8 ( 0x0004 )  [0x00002000]
	unsigned long                                      bEndOfRound:1;                                    		// 0x04E8 ( 0x0004 )  [0x00004000]
	unsigned long                                      bNoAmmoInstances:1;                               		// 0x04E8 ( 0x0004 )  [0x00008000]
	unsigned long                                      bBerserk:1;                                       		// 0x04E8 ( 0x0004 )  [0x00010000]
	unsigned long                                      bQuickDropAnim:1;                                 		// 0x04E8 ( 0x0004 )  [0x00020000]
	unsigned long                                      bQuickThrow:1;                                    		// 0x04E8 ( 0x0004 )  [0x00040000]
	unsigned long                                      bCanSelectNew:1;                                  		// 0x04E8 ( 0x0004 )  [0x00080000]
	int                                                AmmoCharge[ 0x03 ];                               		// 0x04EC ( 0x000C ) [ CPF_Net ]
	class UMesh*                                       OldMesh;                                          		// 0x04F8 ( 0x0004 ) 
	struct FString                                     OldPickup;                                        		// 0x04FC ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              OldDrawScale;                                     		// 0x0508 ( 0x0004 ) [ CPF_Edit ]
	float                                              OldCenteredOffsetY;                               		// 0x050C ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     OldPlayerViewOffset;                              		// 0x0510 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     OldSmallViewOffset;                               		// 0x051C ( 0x000C ) [ CPF_Edit ]
	struct FRotator                                    OldPlayerViewPivot;                               		// 0x0528 ( 0x000C ) [ CPF_Edit ]
	int                                                OldCenteredRoll;                                  		// 0x0534 ( 0x0004 ) [ CPF_Edit ]
	int                                                OldCenteredYaw;                                   		// 0x0538 ( 0x0004 ) [ CPF_Edit ]
	struct FString                                     Description;                                      		// 0x053C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bPendingSwitch:1;                                 		// 0x0548 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	struct FVector                                     EffectOffset;                                     		// 0x054C ( 0x000C ) [ CPF_Edit ]
	struct FString                                     MessageNoAmmo;                                    		// 0x0558 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	float                                              DisplayFOV;                                       		// 0x0564 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      ClientState;                                      		// 0x0568 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      ExchangeFireModes;                                		// 0x0569 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      Priority;                                         		// 0x056A ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      DefaultPriority;                                  		// 0x056B ( 0x0001 ) [ CPF_Edit | CPF_Deprecated ]
	float                                              Hand;                                             		// 0x056C ( 0x0004 ) 
	float                                              RenderedHand;                                     		// 0x0570 ( 0x0004 ) 
	class FColor                                       HudColor;                                         		// 0x0574 ( 0x0004 ) 
	class AwWeapon*                                    OldWeapon;                                        		// 0x0578 ( 0x0004 ) 
	struct FVector                                     SmallViewOffset;                                  		// 0x057C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     SmallEffectOffset;                                		// 0x0588 ( 0x000C ) [ CPF_Edit ]
	float                                              CenteredOffsetY;                                  		// 0x0594 ( 0x0004 ) [ CPF_Edit ]
	int                                                CenteredRoll;                                     		// 0x0598 ( 0x0004 ) [ CPF_Edit ]
	int                                                CenteredYaw;                                      		// 0x059C ( 0x0004 ) [ CPF_Edit ]
	int                                                CustomCrosshair;                                  		// 0x05A0 ( 0x0004 ) 
	class FColor                                       CustomCrossHairColor;                             		// 0x05A4 ( 0x0004 ) 
	float                                              CustomCrossHairScale;                             		// 0x05A8 ( 0x0004 ) 
	struct FString                                     CustomCrossHairTextureName;                       		// 0x05AC ( 0x000C ) [ CPF_NeedCtorLink ]
	class UTexture*                                    CustomCrossHairTexture;                           		// 0x05B8 ( 0x0004 ) 
	float                                              DownDelay;                                        		// 0x05BC ( 0x0004 ) 
	float                                              MinReloadPct;                                     		// 0x05C0 ( 0x0004 ) 
	class AwSkinShell*                                 wHands;                                           		// 0x05C4 ( 0x0004 ) 
	struct FString                                     szWeaponAttachmentName;                           		// 0x05C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class AwWeaponAcce* >                Parts;                                            		// 0x05D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bSprint:1;                                        		// 0x05E0 ( 0x0004 )  [0x00000001]
	struct FString                                     szFireModeClass;                                  		// 0x05E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FVector                                     vStanceOffset;                                    		// 0x05F0 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     vPartsOffset;                                     		// 0x05FC ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     vBreathOffset;                                    		// 0x0608 ( 0x000C ) [ CPF_Transient ]
	unsigned long                                      bBreathOffsetXLeft:1;                             		// 0x0614 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      bBreathOffsetYUp:1;                               		// 0x0614 ( 0x0004 )  [0x00000002][ CPF_Transient ]
	float                                              fBreathOffsetReflecTime_X;                        		// 0x0618 ( 0x0004 ) [ CPF_Transient ]
	float                                              fBreathOffsetReflecTime_Y;                        		// 0x061C ( 0x0004 ) [ CPF_Transient ]
	float                                              fBreathSeconds;                                   		// 0x0620 ( 0x0004 ) [ CPF_Transient ]
	float                                              fBreathRatio;                                     		// 0x0624 ( 0x0004 ) 
	struct FVector                                     vAttackedOffset;                                  		// 0x0628 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rAttackedRot;                                     		// 0x0634 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rWalkingSwayRot;                                  		// 0x0640 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rSwayDestRot;                                     		// 0x064C ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rSwayRot;                                         		// 0x0658 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rSway_LastCameraRot;                              		// 0x0664 ( 0x000C ) [ CPF_Transient ]
	float                                              fSwayAccumTime_Pitch;                             		// 0x0670 ( 0x0004 ) [ CPF_Transient ]
	float                                              fSwayAccumTime_Yaw;                               		// 0x0674 ( 0x0004 ) [ CPF_Transient ]
	struct FRotator                                    rFiringSwayDestRot;                               		// 0x0678 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rFiringSwayRot;                                   		// 0x0684 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rFiringSway_LastCameraRot;                        		// 0x0690 ( 0x000C ) [ CPF_Transient ]
	float                                              fFiringSwayAccumTime_Pitch;                       		// 0x069C ( 0x0004 ) [ CPF_Transient ]
	float                                              fFiringSwayAccumTime_Yaw;                         		// 0x06A0 ( 0x0004 ) [ CPF_Transient ]
	float                                              wFiringSwayDeltaTime;                             		// 0x06A4 ( 0x0004 ) 
	struct FRotator                                    rFiringSwayDestRot_Aim;                           		// 0x06A8 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rFiringSwayRot_Aim;                               		// 0x06B4 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rFiringSway_LastCameraRot_Aim;                    		// 0x06C0 ( 0x000C ) [ CPF_Transient ]
	float                                              fFiringSwayAccumTime_Pitch_Aim;                   		// 0x06CC ( 0x0004 ) [ CPF_Transient ]
	float                                              fFiringSwayAccumTime_Yaw_Aim;                     		// 0x06D0 ( 0x0004 ) [ CPF_Transient ]
	float                                              fMeleeDelay;                                      		// 0x06D4 ( 0x0004 ) 
	float                                              fFireDelay;                                       		// 0x06D8 ( 0x0004 ) 
	unsigned long                                      bActiveMelee:1;                                   		// 0x06DC ( 0x0004 )  [0x00000001]
	unsigned long                                      bActiveFire:1;                                    		// 0x06DC ( 0x0004 )  [0x00000002]
	int                                                iPainting_Item_ID;                                		// 0x06E0 ( 0x0004 ) [ CPF_Net ]
	unsigned char                                      byActionThrowsWeapon;                             		// 0x06E4 ( 0x0001 ) 
	unsigned char                                      MeleeState;                                       		// 0x06E5 ( 0x0001 ) 
	float                                              fStancePivot;                                     		// 0x06E8 ( 0x0004 ) 
	unsigned long                                      bLanding:1;                                       		// 0x06EC ( 0x0004 )  [0x00000001]
	unsigned long                                      bQuickAimZoom:1;                                  		// 0x06EC ( 0x0004 )  [0x00000002]
	unsigned long                                      bQuickReload:1;                                   		// 0x06EC ( 0x0004 )  [0x00000004]
	unsigned long                                      bPickupChange:1;                                  		// 0x06EC ( 0x0004 )  [0x00000008][ CPF_Net ]
	unsigned long                                      wt_TestAim:1;                                     		// 0x06EC ( 0x0004 )  [0x00000010]
	int                                                wt_index;                                         		// 0x06F0 ( 0x0004 ) 
	float                                              wt_RandomMul;                                     		// 0x06F4 ( 0x0004 ) 
	int                                                wt_BoundingMax;                                   		// 0x06F8 ( 0x0004 ) 
	class TArray< float >                              wt_x;                                             		// 0x06FC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wt_y;                                             		// 0x0708 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wt_RandomWeight;                                  		// 0x0714 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              wtAim_RandomMul;                                  		// 0x0720 ( 0x0004 ) 
	int                                                wtAim_BoundingMax;                                		// 0x0724 ( 0x0004 ) 
	class TArray< float >                              wtAim_x;                                          		// 0x0728 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wtAim_y;                                          		// 0x0734 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< float >                              wtAim_RandomWeight;                               		// 0x0740 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bBlendSprint_AdsIdle:1;                           		// 0x074C ( 0x0004 )  [0x00000001][ CPF_Transient ]
	int                                                SRand_FireCount;                                  		// 0x0750 ( 0x0004 ) 
	int                                                SRand_ReloadCount;                                		// 0x0754 ( 0x0004 ) 

	// UScript Functions
	 void                      ServerMeleeFire (  );                             		//  Engine.wWeapon.ServerMeleeFire
	 void                      ClientMeleeFire (  );                             		// [ FUNC_Simulated ] Engine.wWeapon.ClientMeleeFire
	 void                      ServerThrowingWeapon (  );                        		//  Engine.wWeapon.ServerThrowingWeapon
	 void                      ClientThrowingWeapon (  );                        		// [ FUNC_Simulated ] Engine.wWeapon.ClientThrowingWeapon
	 void                      ActiveMeleeDelay (  );                            		// [ FUNC_Simulated ] Engine.wWeapon.ActiveMeleeDelay
	 void                      ActiveFireDelay (  );                             		// [ FUNC_Simulated ] Engine.wWeapon.ActiveFireDelay
	 int                       GetCurMagazineAmmoCount (  );                     		// [ FUNC_Simulated ] Engine.wWeapon.GetCurMagazineAmmoCount
	 int                       GetCurTotalAmmoCount (  );                        		// [ FUNC_Simulated ] Engine.wWeapon.GetCurTotalAmmoCount
	 void                      ClientQuickReload ( bool bOn );                   		// [ FUNC_Simulated ] Engine.wWeapon.ClientQuickReload
	 void                      ServerQuickReload ( bool bOn );                   		//  Engine.wWeapon.ServerQuickReload
	 void                      ClientQuickAimZoom ( bool bOn );                  		// [ FUNC_Simulated ] Engine.wWeapon.ClientQuickAimZoom
	 void                      ServerQuickAimZoom ( bool bOn );                  		//  Engine.wWeapon.ServerQuickAimZoom
	 void                      ClientAddMagazine (  );                           		// [ FUNC_Simulated ] Engine.wWeapon.ClientAddMagazine
	 void                      ServerAddMagazine (  );                           		//  Engine.wWeapon.ServerAddMagazine
	 void                      SetWalkingSwayRot ( struct FRotator rRot );       		// [ FUNC_Simulated ] Engine.wWeapon.SetWalkingSwayRot
	 void                      SetAttackedRot ( struct FRotator rRot );          		// [ FUNC_Simulated ] Engine.wWeapon.SetAttackedRot
	 void                      SetAttackedOffset ( struct FVector VOffset );     		// [ FUNC_Simulated ] Engine.wWeapon.SetAttackedOffset
	 void                      SetAmmoAmount ( int Mode, int CurrentAmmo );      		//  Engine.wWeapon.SetAmmoAmount
	 void                      SetAmmoTotal ( int Mode, int TotalAmmo );         		//  Engine.wWeapon.SetAmmoTotal
	 bool                      IsCanUseWeapon (  );                              		// [ FUNC_Simulated ] Engine.wWeapon.IsCanUseWeapon
	 void                      DelFireMode ( int iMode );                        		// [ FUNC_Native ] Engine.wWeapon.DelFireMode
	 void                      CalcSwayRot ( float fDeltaTime );                 		// [ FUNC_Simulated ] Engine.wWeapon.CalcSwayRot
	 void                      CalcFiringSwayRot ( float fDeltaTime );           		// [ FUNC_Simulated ] Engine.wWeapon.CalcFiringSwayRot
	 void                      SetRandFiringSwayRot (  );                        		// [ FUNC_Simulated ] Engine.wWeapon.SetRandFiringSwayRot
	 void                      CalcBreathOffset (  );                            		// [ FUNC_Simulated ] Engine.wWeapon.CalcBreathOffset
	 void                      CalcStanceOffset ( float fDelta );                		// [ FUNC_Simulated ] Engine.wWeapon.CalcStanceOffset
	 float                     CalcDestPivot (  );                               		// [ FUNC_Simulated ] Engine.wWeapon.CalcDestPivot
	 bool                      IsExistParts ( unsigned char Type );              		//  Engine.wWeapon.IsExistParts
	 bool                      IsMeleeAttacking (  );                            		// [ FUNC_Simulated ] Engine.wWeapon.IsMeleeAttacking
	 bool                      IsPutdowning (  );                                		// [ FUNC_Simulated ] Engine.wWeapon.IsPutdowning
	 bool                      IsWeaponChanging (  );                            		// [ FUNC_Simulated ] Engine.wWeapon.IsWeaponChanging
	 bool                      IsReloading (  );                                 		// [ FUNC_Simulated ] Engine.wWeapon.IsReloading
	 bool                      GetSprint (  );                                   		// [ FUNC_Simulated ] Engine.wWeapon.GetSprint
	 void                      SetSprint ( bool bValue );                        		// [ FUNC_Simulated ] Engine.wWeapon.SetSprint
	 void                      AddParts ( unsigned char Type, struct FString szName, struct FString szSkinName, struct FString strHaveDotName, struct FVector AimDiff, int iItemID, int iPartsGroupID, bool bSightSub );		// [ FUNC_Simulated ] Engine.wWeapon.AddParts
	 void                      FireOne ( int iFireMode );                        		// [ FUNC_Simulated ] Engine.wWeapon.FireOne
	 void                      AttachToPawn ( class APawn* P );                  		//  Engine.wWeapon.AttachToPawn
	 void                      AddPartsGroup ( int iWeaponID, int iAddPartsID ); 		// [ FUNC_Simulated ] Engine.wWeapon.AddPartsGroup
	 void                      SetAddPartsParams (  );                           		// [ FUNC_Simulated ] Engine.wWeapon.SetAddPartsParams
	 void                      wLoadOut ( int iID, int iAddPartsID );            		// [ FUNC_Simulated ] Engine.wWeapon.wLoadOut
	 void                      wLoadOut_Client ( int iID, int iAddPartsID );     		// [ FUNC_Simulated ] Engine.wWeapon.wLoadOut_Client
	 void                      wLoadOut_Server ( int iID, int iAddPartsID, bool bInGamePlaying );		//  Engine.wWeapon.wLoadOut_Server
	 void                      SetHands (  );                                    		// [ FUNC_Simulated ] Engine.wWeapon.SetHands
	 void                      SetResParams ( class UClass* wRes );              		// [ FUNC_Simulated ] Engine.wWeapon.SetResParams
	 void                      SetBaseParams ( class UwWeaponBaseParams* wBase );		// [ FUNC_Simulated ] Engine.wWeapon.SetBaseParams
	 class UwWeaponFire*       GetFireMode ( unsigned char Mode );               		// [ FUNC_Simulated ] Engine.wWeapon.GetFireMode
	 void                      PawnUnpossessed (  );                             		// [ FUNC_Simulated ] Engine.wWeapon.PawnUnpossessed
	 bool                      ShootHoop ( class AController* B, struct FVector ShootLoc );		//  Engine.wWeapon.ShootHoop
	 bool                      ShouldFireWithoutTarget (  );                     		//  Engine.wWeapon.ShouldFireWithoutTarget
	 bool                      CanHeal ( class AActor* Other );                  		//  Engine.wWeapon.CanHeal
	 bool                      WantsZoomFade (  );                               		// [ FUNC_Simulated ] Engine.wWeapon.WantsZoomFade
	 bool                      HandlePickupQuery ( class APickup* Item );        		//  Engine.wWeapon.HandlePickupQuery
	 void                      DoReflectEffect ( int Drain );                    		//  Engine.wWeapon.DoReflectEffect
	 bool                      CheckTryToDrive (  );                             		// [ FUNC_Simulated ] Engine.wWeapon.CheckTryToDrive
	 bool                      CheckReflect ( struct FVector HitLocation, int AmmoDrain, struct FVector* RefNormal );		//  Engine.wWeapon.CheckReflect
	 void                      PlayIdle (  );                                    		// [ FUNC_Simulated ] Engine.wWeapon.PlayIdle
	 void                      AnimEnd ( int Channel );                          		// [ FUNC_Simulated ] Engine.wWeapon.AnimEnd
	 void                      CheckSuperBerserk (  );                           		// [ FUNC_Simulated ] Engine.wWeapon.CheckSuperBerserk
	 void                      AdjustPlayerDamage ( class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, int* Damage, struct FVector* Momentum );		//  Engine.wWeapon.AdjustPlayerDamage
	 bool                      IsRapidFire (  );                                 		//  Engine.wWeapon.IsRapidFire
	 bool                      IsSingleFire (  );                                		// [ FUNC_Simulated ] Engine.wWeapon.IsSingleFire
	 bool                      IsFiring (  );                                    		// [ FUNC_Simulated ] Engine.wWeapon.IsFiring
	 void                      Timer (  );                                       		// [ FUNC_Simulated ] Engine.wWeapon.Timer
	 void                      ImmediateStopFire (  );                           		// [ FUNC_Simulated ] Engine.wWeapon.ImmediateStopFire
	 void                      StoreAmmo (  );                                   		//  Engine.wWeapon.StoreAmmo
	 void                      CancelFire ( int Mode );                          		// [ FUNC_Simulated ] Engine.wWeapon.CancelFire
	 void                      eventStopFire ( int Mode );                       		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.StopFire
	 bool                      StartFire ( int Mode );                           		// [ FUNC_Simulated ] Engine.wWeapon.StartFire
	 bool                      eventReadyToFire ( int Mode );                    		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.ReadyToFire
	 void                      ServerCancelFire ( unsigned char Mode );          		//  Engine.wWeapon.ServerCancelFire
	 void                      ServerStopFire ( unsigned char Mode );            		//  Engine.wWeapon.ServerStopFire
	 void                      SynchronizeWeapon ( class AwWeapon* ClientWeapon );		//  Engine.wWeapon.SynchronizeWeapon
	 void                      ClientForceAmmoUpdate ( int Mode, int NewAmount );		// [ FUNC_Simulated ] Engine.wWeapon.ClientForceAmmoUpdate
	 void                      eventServerStartFire ( unsigned char Mode );      		// [ FUNC_Event ] Engine.wWeapon.ServerStartFire
	 void                      ClientCancelFire ( int Mode );                    		// [ FUNC_Simulated ] Engine.wWeapon.ClientCancelFire
	 void                      eventClientStopFire ( int Mode );                 		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.ClientStopFire
	 void                      eventNotifyReloaded (  );                         		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.NotifyReloaded
	 void                      eventClientStartFire ( int Mode );                		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.ClientStartFire
	 void                      DoAutoSwitch (  );                                		// [ FUNC_Simulated ] Engine.wWeapon.DoAutoSwitch
	 void                      OutOfAmmo (  );                                   		// [ FUNC_Simulated ] Engine.wWeapon.OutOfAmmo
	 void                      ProcessMoveAni (  );                              		// [ FUNC_Simulated ] Engine.wWeapon.ProcessMoveAni
	 void                      eventWeaponTick ( float dt );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.WeaponTick
	 void                      AltFire ( float f );                              		// [ FUNC_Simulated ] Engine.wWeapon.AltFire
	 void                      Fire ( float f );                                 		// [ FUNC_Simulated ] Engine.wWeapon.Fire
	 bool                      PutDown (  );                                     		// [ FUNC_Simulated ] Engine.wWeapon.PutDown
	 void                      ServerPlayOwnedSound ( class USound* Sound, unsigned char Slot, float Volume, bool bNoOverride, float Radius, float Pitch, bool Attenuate, bool Loop, int SellectTeam, bool bExceptOwner );		//  Engine.wWeapon.ServerPlayOwnedSound
	 void                      BringUp ( class AwWeapon* PrevWeapon );           		// [ FUNC_Simulated ] Engine.wWeapon.BringUp
	 void                      ClientWeaponSet ( bool bPossiblySwitch );         		// [ FUNC_Simulated ] Engine.wWeapon.ClientWeaponSet
	 void                      CheckPartsSet (  );                               		// [ FUNC_Simulated ] Engine.wWeapon.CheckPartsSet
	 void                      GiveAmmo ( int M, class AWeaponPickup* WP, bool bJustSpawned );		//  Engine.wWeapon.GiveAmmo
	 void                      GiveTo ( class APawn* Other, class APickup* Pickup );		//  Engine.wWeapon.GiveTo
	 void                      ClientWeaponThrown (  );                          		// [ FUNC_Simulated ] Engine.wWeapon.ClientWeaponThrown
	 void                      DetachFromPawn ( class APawn* P );                		// [ FUNC_Simulated ] Engine.wWeapon.DetachFromPawn
	 void                      DropFrom ( struct FVector StartLocation, struct FRotator StartRotation );		//  Engine.wWeapon.DropFrom
	 void                      RemoveWeapon (  );                                		//  Engine.wWeapon.RemoveWeapon
	 bool                      CanThrow (  );                                    		// [ FUNC_Simulated ] Engine.wWeapon.CanThrow
	 void                      HolderDied (  );                                  		//  Engine.wWeapon.HolderDied
	 class AwWeapon*           NextWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon );		// [ FUNC_Simulated ] Engine.wWeapon.NextWeapon
	 class AwWeapon*           PrevWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon );		// [ FUNC_Simulated ] Engine.wWeapon.PrevWeapon
	 class AwWeapon*           WeaponChangeWID ( int iWeaponID );                		// [ FUNC_Simulated ] Engine.wWeapon.WeaponChangeWID
	 class AwWeapon*           WeaponChangeWClass ( struct FName wClass );       		// [ FUNC_Simulated ] Engine.wWeapon.WeaponChangeWClass
	 class AwWeapon*           WeaponChange ( unsigned char f, bool bSilent );   		// [ FUNC_Simulated ] Engine.wWeapon.WeaponChange
	 void                      ZeroFlashCount ( int Mode );                      		// [ FUNC_Simulated ] Engine.wWeapon.ZeroFlashCount
	 void                      IncrementFlashCount ( int Mode );                 		// [ FUNC_Simulated ] Engine.wWeapon.IncrementFlashCount
	 struct FVector            GetEffectStart (  );                              		// [ FUNC_Simulated ] Engine.wWeapon.GetEffectStart
	 struct FVector            CenteredEffectStart (  );                         		// [ FUNC_Simulated ] Engine.wWeapon.CenteredEffectStart
	 void                      GetViewAxes ( struct FVector* XAxis, struct FVector* YAxis, struct FVector* ZAxis );		// [ FUNC_Simulated ] Engine.wWeapon.GetViewAxes
	 void                      SetHand ( float InHand );                         		// [ FUNC_Simulated ] Engine.wWeapon.SetHand
	 void                      PreDrawFPWeapon (  );                             		// [ FUNC_Simulated ] Engine.wWeapon.PreDrawFPWeapon
	 void                      ApplyOffset (  );                                 		// [ FUNC_Simulated ] Engine.wWeapon.ApplyOffset
	 void                      ApplyOffset_Rot (  );                             		// [ FUNC_Simulated ] Engine.wWeapon.ApplyOffset_Rot
	 void                      ApplyOffset_Trans (  );                           		// [ FUNC_Simulated ] Engine.wWeapon.ApplyOffset_Trans
	 void                      eventRenderOverlays ( class UCanvas* Canvas );    		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.RenderOverlays
	 void                      RenderScope ( class UCanvas* Canv );              		//  Engine.wWeapon.RenderScope
	 bool                      WeaponCentered (  );                              		// [ FUNC_Simulated ] Engine.wWeapon.WeaponCentered
	 void                      Reselect (  );                                    		// [ FUNC_Simulated ] Engine.wWeapon.Reselect
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.wWeapon.Destroyed
	 void                      SetGRI ( class AGameReplicationInfo* G );         		// [ FUNC_Simulated ] Engine.wWeapon.SetGRI
	 bool                      CanAttack ( class AActor* Other );                		//  Engine.wWeapon.CanAttack
	 bool                      SplashJump (  );                                  		//  Engine.wWeapon.SplashJump
	 float                     SuggestDefenseStyle (  );                         		//  Engine.wWeapon.SuggestDefenseStyle
	 float                     SuggestAttackStyle (  );                          		//  Engine.wWeapon.SuggestAttackStyle
	 float                     GetAIRating (  );                                 		//  Engine.wWeapon.GetAIRating
	 float                     RateSelf (  );                                    		// [ FUNC_Simulated ] Engine.wWeapon.RateSelf
	 struct FVector            GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z );		// [ FUNC_Simulated ] Engine.wWeapon.GetFireStart
	 bool                      BotFire ( bool bFinished, struct FName FiringMode );		//  Engine.wWeapon.BotFire
	 unsigned char             BestMode (  );                                    		//  Engine.wWeapon.BestMode
	 void                      SetAITarget ( class AActor* t );                  		//  Engine.wWeapon.SetAITarget
	 class AwWeapon*           RecommendWeapon ( float* rating );                		// [ FUNC_Simulated ] Engine.wWeapon.RecommendWeapon
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.wWeapon.DisplayDebug
	 void                      Loaded (  );                                      		// [ FUNC_Simulated ] Engine.wWeapon.Loaded
	 bool                      FireOnRelease (  );                               		//  Engine.wWeapon.FireOnRelease
	 float                     RefireRate (  );                                  		//  Engine.wWeapon.RefireRate
	 float                     GetDamageRadius (  );                             		//  Engine.wWeapon.GetDamageRadius
	 bool                      RecommendSplashDamage (  );                       		//  Engine.wWeapon.RecommendSplashDamage
	 bool                      SplashDamage (  );                                		//  Engine.wWeapon.SplashDamage
	 void                      FireHack ( unsigned char Mode );                  		//  Engine.wWeapon.FireHack
	 bool                      FocusOnLeader ( bool bLeaderFiring );             		//  Engine.wWeapon.FocusOnLeader
	 bool                      RecommendLongRangedAttack (  );                   		//  Engine.wWeapon.RecommendLongRangedAttack
	 bool                      RecommendRangedAttack (  );                       		//  Engine.wWeapon.RecommendRangedAttack
	 float                     RangedAttackTime (  );                            		//  Engine.wWeapon.RangedAttackTime
	 void                      HackPlayFireSound (  );                           		//  Engine.wWeapon.HackPlayFireSound
	 class UClass*             GetDamageType (  );                               		//  Engine.wWeapon.GetDamageType
	 void                      ClientWriteStats ( unsigned char Mode, bool bMatch, bool bAllowFire, bool bDelay, bool bAlt, float wait );		// [ FUNC_Simulated ] Engine.wWeapon.ClientWriteStats
	 void                      StartDebugging (  );                              		//  Engine.wWeapon.StartDebugging
	 void                      NewDrawWeaponInfo ( class UCanvas* C, float YPos );		// [ FUNC_Simulated ] Engine.wWeapon.NewDrawWeaponInfo
	 void                      DrawWeaponInfo ( class UCanvas* C );              		// [ FUNC_Simulated ] Engine.wWeapon.DrawWeaponInfo
	 void                      PostNetReceive (  );                              		// [ FUNC_Simulated ] Engine.wWeapon.PostNetReceive
	 bool                      CheckOutOfAmmo (  );                              		// [ FUNC_Simulated ] Engine.wWeapon.CheckOutOfAmmo
	 float                     DesireAmmo ( class UClass* NewAmmoClass, bool bDetour );		// [ FUNC_Simulated ] Engine.wWeapon.DesireAmmo
	 bool                      NeedAmmo ( int Mode );                            		// [ FUNC_Simulated ] Engine.wWeapon.NeedAmmo
	 bool                      HasAmmo (  );                                     		// [ FUNC_Simulated ] Engine.wWeapon.HasAmmo
	 bool                      AddAmmo ( int AmmoToAdd, int Mode );              		//  Engine.wWeapon.AddAmmo
	 bool                      SeverConsumeAmmo ( int Mode, float Load, bool bAmountNeededIsMax );		//  Engine.wWeapon.SeverConsumeAmmo
	 float                     AmmoStatus ( int Mode );                          		// [ FUNC_Simulated ] Engine.wWeapon.AmmoStatus
	 void                      eventGetAmmoCount ( float* MaxAmmoPrimary, float* CurAmmoPrimary );		// [ FUNC_Simulated | FUNC_Event ] Engine.wWeapon.GetAmmoCount
	 bool                      AmmoMaxed ( int Mode );                           		// [ FUNC_Simulated ] Engine.wWeapon.AmmoMaxed
	 class UClass*             AmmoPickupClass ( int Mode );                     		// [ FUNC_Simulated ] Engine.wWeapon.AmmoPickupClass
	 int                       AmmoAmount ( int Mode );                          		// [ FUNC_Simulated ] Engine.wWeapon.AmmoAmount
	 void                      FillToDefaultAmmo (  );                           		// [ FUNC_Simulated ] Engine.wWeapon.FillToDefaultAmmo
	 void                      FillToInitialAmmo (  );                           		// [ FUNC_Simulated ] Engine.wWeapon.FillToInitialAmmo
	 int                       MaxAmmo ( int Mode );                             		// [ FUNC_Simulated ] Engine.wWeapon.MaxAmmo
	 void                      SuperMaxOutAmmo (  );                             		// [ FUNC_Simulated ] Engine.wWeapon.SuperMaxOutAmmo
	 void                      MaxOutAmmo (  );                                  		// [ FUNC_Simulated ] Engine.wWeapon.MaxOutAmmo
	 class UClass*             GetAmmoClass ( int Mode );                        		// [ FUNC_Simulated ] Engine.wWeapon.GetAmmoClass
	 float                     ChargeBar (  );                                   		// [ FUNC_Simulated ] Engine.wWeapon.ChargeBar
	 void                      InitWeaponFires (  );                             		// [ FUNC_Final | FUNC_Native ] Engine.wWeapon.InitWeaponFires

	// Public Imports
	AwWeapon(class AwWeapon const &);
	AwWeapon(void);
	class AwWeapon &  operator=(class AwWeapon const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x031C

// Class Engine.PolyMarker
class DLL_IMPORT APolyMarker : public AKeypoint
{
public:

	// Public Imports
	APolyMarker(class APolyMarker const &);
	class APolyMarker &  operator=(class APolyMarker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.ClipMarker
class DLL_IMPORT AClipMarker : public AKeypoint
{
public:

	// Public Imports
	AClipMarker(class AClipMarker const &);
	class AClipMarker &  operator=(class AClipMarker const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.Light
class DLL_IMPORT ALight : public AActor
{
public:
	float                                              MinCoronaSize;                                    		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              MaxCoronaSize;                                    		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	float                                              CoronaRotation;                                   		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
	float                                              CoronaRotationOffset;                             		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      UseOwnFinalBlend:1;                               		// 0x03D8 ( 0x0004 )  [0x00000001][ CPF_Edit ]

	// Public Imports
	ALight(class ALight const &);
	ALight(void);
	class ALight &  operator=(class ALight const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0014

// Class Engine.ExportCacheCommandlet
class DLL_IMPORT UExportCacheCommandlet : public UCommandlet
{
public:
}; // Size: 0x0000

// Class Engine.NullRenderDevice
class DLL_IMPORT UNullRenderDevice : public URenderDevice
{
public:
	unsigned char                                      _0x00C4[ 0x24 ];                                  		// 0x00C4 ( 0x0024 )

	// Public Imports
	UNullRenderDevice(class UNullRenderDevice const &);
	UNullRenderDevice(void);
	class UNullRenderDevice &  operator=(class UNullRenderDevice const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);
	void  StaticConstructor(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.KRepulsor
class DLL_IMPORT AKRepulsor : public AActor
{
public:
	unsigned long                                      bEnableRepulsion:1;                               		// 0x03C8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bRepulseWater:1;                                  		// 0x03C8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bRepulsorInContact:1;                             		// 0x03C8 ( 0x0004 )  [0x00000004]
	unsigned long                                      bRepulsorOnWater:1;                               		// 0x03C8 ( 0x0004 )  [0x00000008]
	struct FVector                                     CheckDir;                                         		// 0x03CC ( 0x000C ) [ CPF_Edit ]
	float                                              CheckDist;                                        		// 0x03D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              Softness;                                         		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	float                                              PenScale;                                         		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              PenOffset;                                        		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	void*                                              KContact;                                         		// 0x03E8 ( 0x0004 ) [ CPF_Const | CPF_Transient ]

	// Public Imports
	AKRepulsor(class AKRepulsor const &);
	AKRepulsor(void);
	class AKRepulsor &  operator=(class AKRepulsor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.KVehicle
class DLL_IMPORT AKVehicle : public AVehicle
{
public:
	class UClass*                                      DestroyEffectClass;                               		// 0x11C8 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bAutoDrive:1;                                     		// 0x11CC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bVehicleIsFiring:1;                               		// 0x11CC ( 0x0004 )  [0x00000002]
	unsigned long                                      bVehicleIsAltFiring:1;                            		// 0x11CC ( 0x0004 )  [0x00000004]
	struct FVector                                     CameraHistory[ 0x05 ];                            		// 0x11D0 ( 0x003C ) 
	int                                                NextHistorySlot;                                  		// 0x120C ( 0x0004 ) 
	unsigned long                                      bHistoryWarmup:1;                                 		// 0x1210 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      eventTick ( float DeltaSeconds );                 		// [ FUNC_Simulated | FUNC_Event ] Engine.KVehicle.Tick
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.KVehicle.Destroyed
	 bool                      SpecialCalcView ( class AActor** ViewActor, struct FVector* CameraLocation, struct FRotator* CameraRotation );		// [ FUNC_Simulated ] Engine.KVehicle.SpecialCalcView
	 bool                      KDriverLeave ( bool bForceLeave );                		//  Engine.KVehicle.KDriverLeave
	 void                      ClientKDriverLeave ( class APlayerController* PC );		// [ FUNC_Simulated ] Engine.KVehicle.ClientKDriverLeave
	 void                      KDriverEnter ( class APawn* P );                  		//  Engine.KVehicle.KDriverEnter
	 void                      ClientKDriverEnter ( class APlayerController* PC );		// [ FUNC_Simulated ] Engine.KVehicle.ClientKDriverEnter
	 bool                      TryToDrive ( class APawn* P );                    		//  Engine.KVehicle.TryToDrive
	 void                      eventKVehicleUpdateParams (  );                   		// [ FUNC_Simulated | FUNC_Event ] Engine.KVehicle.KVehicleUpdateParams
	 void                      eventVehicleStateReceived (  );                   		// [ FUNC_Event ] Engine.KVehicle.VehicleStateReceived
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.KVehicle.TakeDamage
	 void                      GraphData ( struct FString DataName, float DataValue );		// [ FUNC_Final | FUNC_Native ] Engine.KVehicle.GraphData

	// Public Imports
	AKVehicle(class AKVehicle const &);
	AKVehicle(void);
	class AKVehicle &  operator=(class AKVehicle const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x004C

// Class Engine.KActor
class DLL_IMPORT AKActor : public AActor
{
public:
	unsigned long                                      bKTakeShot:1;                                     		// 0x03C8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class TArray< class USound* >                      ImpactSounds;                                     		// 0x03CC ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	float                                              ImpactVolume;                                     		// 0x03D8 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      ImpactEffect;                                     		// 0x03DC ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bOrientImpactEffect:1;                            		// 0x03E0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              ImpactInterval;                                   		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              LastImpactTime;                                   		// 0x03E8 ( 0x0004 ) [ CPF_Transient ]

	// UScript Functions
	 void                      eventKImpact ( class AActor* Other, struct FVector pos, struct FVector impactVel, struct FVector impactNorm );		// [ FUNC_Event ] Engine.KActor.KImpact
	 void                      Trigger ( class AActor* Other, class APawn* EventInstigator );		//  Engine.KActor.Trigger
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.KActor.TakeDamage

	// Public Imports
	AKActor(class AKActor const &);
	AKActor(void);
	class AKActor &  operator=(class AKActor const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.KTire
class DLL_IMPORT AKTire : public AKActor
{
public:
	class AKCarWheelJoint*                             WheelJoint;                                       		// 0x03EC ( 0x0004 ) 
	float                                              RollFriction;                                     		// 0x03F0 ( 0x0004 ) 
	float                                              LateralFriction;                                  		// 0x03F4 ( 0x0004 ) 
	float                                              RollSlip;                                         		// 0x03F8 ( 0x0004 ) 
	float                                              LateralSlip;                                      		// 0x03FC ( 0x0004 ) 
	float                                              MinSlip;                                          		// 0x0400 ( 0x0004 ) 
	float                                              SlipRate;                                         		// 0x0404 ( 0x0004 ) 
	float                                              Softness;                                         		// 0x0408 ( 0x0004 ) 
	float                                              Adhesion;                                         		// 0x040C ( 0x0004 ) 
	float                                              Restitution;                                      		// 0x0410 ( 0x0004 ) 
	unsigned long                                      bTireOnGround:1;                                  		// 0x0414 ( 0x0004 )  [0x00000001][ CPF_Const ]
	float                                              GroundSlipVel;                                    		// 0x0418 ( 0x0004 ) [ CPF_Const ]
	struct FVector                                     GroundSlipVec;                                    		// 0x041C ( 0x000C ) [ CPF_Const ]
	float                                              SpinSpeed;                                        		// 0x0428 ( 0x0004 ) [ CPF_Const ]
	class UMaterial*                                   GroundMaterial;                                   		// 0x042C ( 0x0004 ) [ CPF_Const ]
	unsigned char                                      GroundSurfaceType;                                		// 0x0430 ( 0x0001 ) [ CPF_Const ]
	struct FKRigidBodyState                            ReceiveState;                                     		// 0x0434 ( 0x0034 ) 
	unsigned long                                      bReceiveStateNew:1;                               		// 0x0468 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		//  Engine.KTire.TakeDamage
	 bool                      eventKUpdateState ( struct FKRigidBodyState* NewState );		// [ FUNC_Event ] Engine.KTire.KUpdateState

	// Public Imports
	AKTire(class AKTire const &);
	AKTire(void);
	class AKTire &  operator=(class AKTire const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0080

// Class Engine.KarmaParamsCollision
class DLL_IMPORT UKarmaParamsCollision : public UObject
{
public:
	void*                                              KarmaData;                                        		// 0x002C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	float                                              KScale;                                           		// 0x0030 ( 0x0004 ) [ CPF_Const ]
	struct FVector                                     KScale3D;                                         		// 0x0034 ( 0x000C ) [ CPF_Const ]
	struct FVector                                     KAcceleration;                                    		// 0x0040 ( 0x000C ) 
	float                                              KFriction;                                        		// 0x004C ( 0x0004 ) [ CPF_Edit ]
	float                                              KRestitution;                                     		// 0x0050 ( 0x0004 ) [ CPF_Edit ]
	float                                              KImpactThreshold;                                 		// 0x0054 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bContactingLevel:1;                               		// 0x0058 ( 0x0004 )  [0x00000001][ CPF_Const ]
	struct FVector                                     ContactRegionCenter;                              		// 0x005C ( 0x000C ) [ CPF_Const ]
	struct FVector                                     ContactRegionNormal;                              		// 0x0068 ( 0x000C ) [ CPF_Const ]
	float                                              ContactRegionRadius;                              		// 0x0074 ( 0x0004 ) [ CPF_Const ]
	float                                              ContactRegionNormalForce;                         		// 0x0078 ( 0x0004 ) [ CPF_Const ]

	// UScript Functions
//	 void                      CalcContactRegion (  );                           		// [ FUNC_Native ] Engine.KarmaParamsCollision.CalcContactRegion

	// Public Imports
	UKarmaParamsCollision(class UKarmaParamsCollision const &);
	UKarmaParamsCollision(void);
	class UKarmaParamsCollision &  operator=(class UKarmaParamsCollision const &);
	void  CalcContactRegion(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0050

// Class Engine.KarmaParams
class DLL_IMPORT UKarmaParams : public UKarmaParamsCollision
{
public:
	void*                                              KAng3;                                            		// 0x007C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	void*                                              KTriList;                                         		// 0x0080 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	float                                              KLastVel;                                         		// 0x0084 ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	float                                              KMass;                                            		// 0x0088 ( 0x0004 ) [ CPF_Edit ]
	float                                              KLinearDamping;                                   		// 0x008C ( 0x0004 ) [ CPF_Edit ]
	float                                              KAngularDamping;                                  		// 0x0090 ( 0x0004 ) [ CPF_Edit ]
	float                                              KBuoyancy;                                        		// 0x0094 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      KStartEnabled:1;                                  		// 0x0098 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FVector                                     KStartLinVel;                                     		// 0x009C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     KStartAngVel;                                     		// 0x00A8 ( 0x000C ) [ CPF_Edit ]
	unsigned long                                      bKNonSphericalInertia:1;                          		// 0x00B4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              KActorGravScale;                                  		// 0x00B8 ( 0x0004 ) [ CPF_Edit ]
	float                                              KVelDropBelowThreshold;                           		// 0x00BC ( 0x0004 ) [ CPF_Edit ]
	float                                              KMaxSpeed;                                        		// 0x00C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              KMaxAngularSpeed;                                 		// 0x00C4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bHighDetailOnly:1;                                		// 0x00C8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bClientOnly:1;                                    		// 0x00C8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bKDoubleTickRate:1;                               		// 0x00C8 ( 0x0004 )  [0x00000004][ CPF_Edit | CPF_Const ]
	unsigned long                                      bKStayUpright:1;                                  		// 0x00C8 ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bKAllowRotate:1;                                  		// 0x00C8 ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bDestroyOnSimError:1;                             		// 0x00C8 ( 0x0004 )  [0x00000020]
	unsigned long                                      bDestroyOnWorldPenetrate:1;                       		// 0x00C8 ( 0x0004 )  [0x00000040][ CPF_Edit ]
	unsigned long                                      bDoSafetime:1;                                    		// 0x00C8 ( 0x0004 )  [0x00000080][ CPF_Edit ]
	float                                              StayUprightStiffness;                             		// 0x00CC ( 0x0004 ) [ CPF_Edit ]
	float                                              StayUprightDamping;                               		// 0x00D0 ( 0x0004 ) [ CPF_Edit ]
	class TArray< class AKRepulsor* >                  Repulsors;                                        		// 0x00D4 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]

	// Public Imports
	UKarmaParams(class UKarmaParams const &);
	UKarmaParams(void);
	class UKarmaParams &  operator=(class UKarmaParams const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0064

// Class Engine.KarmaParamsSkel
class DLL_IMPORT UKarmaParamsSkel : public UKarmaParams
{
public:
	struct FString                                     KSkeleton;                                        		// 0x00E0 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bKDoConvulsions:1;                                		// 0x00EC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bRubbery:1;                                       		// 0x00EC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	struct FRange                                      KConvulseSpacing;                                 		// 0x00F0 ( 0x0008 ) [ CPF_Edit ]
	struct FVector                                     KShotStart;                                       		// 0x00F8 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     KShotEnd;                                         		// 0x0104 ( 0x000C ) [ CPF_Transient ]
	float                                              KShotStrength;                                    		// 0x0110 ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      bKImportantRagdoll:1;                             		// 0x0114 ( 0x0004 )  [0x00000001][ CPF_Transient ]

	// Public Imports
	UKarmaParamsSkel(class UKarmaParamsSkel const &);
	class UKarmaParamsSkel &  operator=(class UKarmaParamsSkel const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.KarmaParamsRBFull
class DLL_IMPORT UKarmaParamsRBFull : public UKarmaParams
{
public:
	float                                              KInertiaTensor[ 0x06 ];                           		// 0x00E0 ( 0x0018 ) [ CPF_Edit ]
	struct FVector                                     KCOMOffset;                                       		// 0x00F8 ( 0x000C ) [ CPF_Edit ]

	// Public Imports
	UKarmaParamsRBFull(class UKarmaParamsRBFull const &);
	class UKarmaParamsRBFull &  operator=(class UKarmaParamsRBFull const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0024

// Class Engine.KMeshProps
class DLL_IMPORT UKMeshProps : public UObject
{
public:
	unsigned char                                      _0x002C[ 0x54 ];                                  		// 0x002C ( 0x0054 )

	// Public Imports
	UKMeshProps(class UKMeshProps const &);
	UKMeshProps(void);
	class UKMeshProps &  operator=(class UKMeshProps const &);
	void  Draw(class FRenderInterface *,int);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0054

// Class Engine.KConstraint
class DLL_IMPORT AKConstraint : public AKActor
{
public:
	void*                                              KConstraintData;                                  		// 0x03EC ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class AActor*                                      KConstraintActor1;                                		// 0x03F0 ( 0x0004 ) [ CPF_Edit | CPF_EdFindable ]
	class AActor*                                      KConstraintActor2;                                		// 0x03F4 ( 0x0004 ) [ CPF_Edit | CPF_EdFindable ]
	struct FName                                       KConstraintBone1;                                 		// 0x03F8 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       KConstraintBone2;                                 		// 0x03FC ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bKDisableCollision:1;                             		// 0x0400 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Const ]
	struct FVector                                     KPos1;                                            		// 0x0404 ( 0x000C ) 
	struct FVector                                     KPriAxis1;                                        		// 0x0410 ( 0x000C ) 
	struct FVector                                     KSecAxis1;                                        		// 0x041C ( 0x000C ) 
	struct FVector                                     KPos2;                                            		// 0x0428 ( 0x000C ) 
	struct FVector                                     KPriAxis2;                                        		// 0x0434 ( 0x000C ) 
	struct FVector                                     KSecAxis2;                                        		// 0x0440 ( 0x000C ) 
	unsigned long                                      bKForceFrameUpdate:1;                             		// 0x044C ( 0x0004 )  [0x00000001][ CPF_Const ]
	float                                              KForceThreshold;                                  		// 0x0450 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      eventKForceExceed ( float forceMag );             		// [ FUNC_Event ] Engine.KConstraint.KForceExceed
	 void                      KGetConstraintTorque ( struct FVector* Torque );  		// [ FUNC_Final | FUNC_Native ] Engine.KConstraint.KGetConstraintTorque
	 void                      KGetConstraintForce ( struct FVector* Force );    		// [ FUNC_Final | FUNC_Native ] Engine.KConstraint.KGetConstraintForce
	 void                      KUpdateConstraintParams (  );                     		// [ FUNC_Native ] Engine.KConstraint.KUpdateConstraintParams

	// Public Imports
	AKConstraint(class AKConstraint const &);
	AKConstraint(void);
	class AKConstraint &  operator=(class AKConstraint const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0068

// Class Engine.KCarWheelJoint
class DLL_IMPORT AKCarWheelJoint : public AKConstraint
{
public:
	float                                              KSteerAngle;                                      		// 0x0454 ( 0x0004 ) [ CPF_Edit ]
	float                                              KProportionalGap;                                 		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	float                                              KMaxSteerTorque;                                  		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	float                                              KMaxSteerSpeed;                                   		// 0x0460 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bKSteeringLocked:1;                               		// 0x0464 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              KMotorTorque;                                     		// 0x0468 ( 0x0004 ) [ CPF_Edit ]
	float                                              KMaxSpeed;                                        		// 0x046C ( 0x0004 ) [ CPF_Edit ]
	float                                              KBraking;                                         		// 0x0470 ( 0x0004 ) [ CPF_Edit ]
	float                                              KSuspLowLimit;                                    		// 0x0474 ( 0x0004 ) [ CPF_Edit ]
	float                                              KSuspHighLimit;                                   		// 0x0478 ( 0x0004 ) [ CPF_Edit ]
	float                                              KSuspStiffness;                                   		// 0x047C ( 0x0004 ) [ CPF_Edit ]
	float                                              KSuspDamping;                                     		// 0x0480 ( 0x0004 ) [ CPF_Edit ]
	float                                              KSuspRef;                                         		// 0x0484 ( 0x0004 ) [ CPF_Edit ]
	float                                              KWheelHeight;                                     		// 0x0488 ( 0x0004 ) [ CPF_Const ]

	// Public Imports
	AKCarWheelJoint(class AKCarWheelJoint const &);
	AKCarWheelJoint(void);
	class AKCarWheelJoint &  operator=(class AKCarWheelJoint const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0038

// Class Engine.KConeLimit
class DLL_IMPORT AKConeLimit : public AKConstraint
{
public:
	float                                              KHalfAngle;                                       		// 0x0454 ( 0x0004 ) [ CPF_Edit ]
	float                                              KStiffness;                                       		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	float                                              KDamping;                                         		// 0x045C ( 0x0004 ) [ CPF_Edit ]

	// Public Imports
	AKConeLimit(class AKConeLimit const &);
	AKConeLimit(void);
	class AKConeLimit &  operator=(class AKConeLimit const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x000C

// Class Engine.KHinge
class DLL_IMPORT AKHinge : public AKConstraint
{
public:
	unsigned char                                      KHingeType;                                       		// 0x0454 ( 0x0001 ) [ CPF_Edit ]
	float                                              KStiffness;                                       		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	float                                              KDamping;                                         		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	float                                              KDesiredAngVel;                                   		// 0x0460 ( 0x0004 ) [ CPF_Edit ]
	float                                              KMaxTorque;                                       		// 0x0464 ( 0x0004 ) [ CPF_Edit ]
	float                                              KDesiredAngle;                                    		// 0x0468 ( 0x0004 ) [ CPF_Edit ]
	float                                              KProportionalGap;                                 		// 0x046C ( 0x0004 ) [ CPF_Edit ]
	float                                              KAltDesiredAngle;                                 		// 0x0470 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      KUseAltDesired:1;                                 		// 0x0474 ( 0x0004 )  [0x00000001]
	float                                              KCurrentAngle;                                    		// 0x0478 ( 0x0004 ) [ CPF_Const ]

	// Public Imports
	AKHinge(class AKHinge const &);
	AKHinge(void);
	class AKHinge &  operator=(class AKHinge const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class Engine.KBSJoint
class DLL_IMPORT AKBSJoint : public AKConstraint
{
public:

	// Public Imports
	AKBSJoint(class AKBSJoint const &);
	class AKBSJoint &  operator=(class AKBSJoint const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0000

// Class Engine.wWeatherEffect
class DLL_IMPORT AwWeatherEffect : public AActor
{
public:
	unsigned char                                      WeatherType;                                      		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	int                                                numParticles;                                     		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	int                                                numActive;                                        		// 0x03D0 ( 0x0004 ) [ CPF_Transient ]
	struct FBox                                        Box;                                              		// 0x03D4 ( 0x001C ) [ CPF_Transient ]
	struct FVector                                     eyePos;                                           		// 0x03F0 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     eyeDir;                                           		// 0x03FC ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     spawnOrigin;                                      		// 0x0408 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     eyeMoveVec;                                       		// 0x0414 ( 0x000C ) [ CPF_Transient ]
	float                                              eyeVel;                                           		// 0x0420 ( 0x0004 ) [ CPF_Transient ]
	float                                              deviation;                                        		// 0x0424 ( 0x0004 ) [ CPF_Edit ]
	float                                              maxPclEyeDist;                                    		// 0x0428 ( 0x0004 ) [ CPF_Edit ]
	float                                              numCols;                                          		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	float                                              numRows;                                          		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	float                                              numFrames;                                        		// 0x0434 ( 0x0004 ) [ CPF_Transient ]
	float                                              texU;                                             		// 0x0438 ( 0x0004 ) [ CPF_Transient ]
	float                                              texV;                                             		// 0x043C ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      noReference:1;                                    		// 0x0440 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	struct FVector                                     spawnVecU;                                        		// 0x0444 ( 0x000C ) 
	struct FVector                                     spawnVecV;                                        		// 0x0450 ( 0x000C ) 
	struct FVector                                     spawnVel;                                         		// 0x045C ( 0x000C ) [ CPF_Edit ]
	struct FRangeVector                                Position;                                         		// 0x0468 ( 0x0018 ) [ CPF_Edit ]
	struct FRange                                      Speed;                                            		// 0x0480 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      Life;                                             		// 0x0488 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      Size;                                             		// 0x0490 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      EyeSizeClamp;                                     		// 0x0498 ( 0x0008 ) [ CPF_Edit ]
	unsigned long                                      bForceAffected:1;                                 		// 0x04A0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class TArray< struct FWeatherPcl >                 pcl;                                              		// 0x04A4 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< class AVolume* >                     pclBlockers;                                      		// 0x04B0 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]

	// Public Imports
	AwWeatherEffect(class AwWeatherEffect const &);
	AwWeatherEffect(void);
	class AwWeatherEffect &  operator=(class AwWeatherEffect const &);
	void  CacheBlockers(void);
	void  InitParticle(struct FWeatherPcl &);
	static void  InternalConstructor(void *);
	void  PreCalc(void);
	void  Render(class FLevelSceneNode *,class FRenderInterface *);
	static class UClass *  StaticClass(void);
	void  UpdateViewer(class FLevelSceneNode *);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x00F4

// Class Engine.wProcMesh
class DLL_IMPORT AwProcMesh : public AActor
{
public:
	class TArray< struct FProcMeshVertex >             Vertices;                                         		// 0x03C8 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	class TArray< int >                                SectionOffsets;                                   		// 0x03D4 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	float                                              Dampening;                                        		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	struct FRange                                      DampeningRange;                                   		// 0x03E4 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      MovementClamp;                                    		// 0x03EC ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      ForceClamp;                                       		// 0x03F4 ( 0x0008 ) [ CPF_Edit ]
	float                                              ForceAttenuation;                                 		// 0x03FC ( 0x0004 ) [ CPF_Edit ]
	float                                              Tension;                                          		// 0x0400 ( 0x0004 ) [ CPF_Edit ]
	float                                              RestTension;                                      		// 0x0404 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      CheckCollision:1;                                 		// 0x0408 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              Noise;                                            		// 0x040C ( 0x0004 ) [ CPF_Edit ]
	struct FRange                                      NoiseForce;                                       		// 0x0410 ( 0x0008 ) [ CPF_Edit ]
	struct FRange                                      NoiseTimer;                                       		// 0x0418 ( 0x0008 ) [ CPF_Edit ]
	float                                              NoiseCounter;                                     		// 0x0420 ( 0x0004 ) [ CPF_Transient ]
	unsigned char                                      ProcType;                                         		// 0x0424 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bForceAffected:1;                                 		// 0x0428 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bRigidEdges:1;                                    		// 0x0428 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	void*                                              pProcData;                                        		// 0x042C ( 0x0004 ) [ CPF_Const | CPF_Transient ]
	class UClass*                                      HitEffect;                                        		// 0x0430 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      BigHitEffect;                                     		// 0x0434 ( 0x0004 ) [ CPF_Edit ]
	float                                              BigMomentumThreshold;                             		// 0x0438 ( 0x0004 ) [ CPF_Edit ]
	float                                              BigTouchThreshold;                                		// 0x043C ( 0x0004 ) [ CPF_Edit ]
	float                                              ShootStrength;                                    		// 0x0440 ( 0x0004 ) [ CPF_Edit ]
	float                                              TouchStrength;                                    		// 0x0444 ( 0x0004 ) [ CPF_Edit ]
	float                                              InfluenceRadius;                                  		// 0x0448 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      Touch ( class AActor* Other );                    		// [ FUNC_Simulated ] Engine.wProcMesh.Touch
	 void                      TakeDamage ( int Damage, class APawn* instigatedBy, struct FVector HitLocation, struct FVector Momentum, class UClass* DamageType, int CollisionPart, int WeaponType, bool bWallShot );		// [ FUNC_Simulated ] Engine.wProcMesh.TakeDamage
	 void                      ProcPling ( struct FVector Position, float Strength, float Radius, struct FVector* EffectLocation, struct FVector* EffectNormal );		// [ FUNC_Final | FUNC_Native ] Engine.wProcMesh.ProcPling

	// Public Imports
	AwProcMesh(class AwProcMesh const &);
	AwProcMesh(void);
	class AwProcMesh &  operator=(class AwProcMesh const &);
	void  CalcMeshData(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0084

// Class Engine.wPickUpBase
class DLL_IMPORT AwPickUpBase : public AActor
{
public:
	class UClass*                                      PowerUp;                                          		// 0x03C8 ( 0x0004 ) [ CPF_Edit ]
	float                                              SpawnHeight;                                      		// 0x03CC ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      SpiralEmitter;                                    		// 0x03D0 ( 0x0004 ) [ CPF_Edit ]
	float                                              ExtraPathCost;                                    		// 0x03D4 ( 0x0004 ) [ CPF_Edit ]
	class APickup*                                     myPickUp;                                         		// 0x03D8 ( 0x0004 ) 
	class AEmitter*                                    myEmitter;                                        		// 0x03DC ( 0x0004 ) 
	class AInventorySpot*                              myMarker;                                         		// 0x03E0 ( 0x0004 ) 
	unsigned long                                      bDelayedSpawn:1;                                  		// 0x03E4 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class UStaticMesh*                                 NewStaticMesh;                                    		// 0x03E8 ( 0x0004 ) 
	struct FVector                                     NewPrePivot;                                      		// 0x03EC ( 0x000C ) 
	float                                              NewDrawScale;                                     		// 0x03F8 ( 0x0004 ) 

	// UScript Functions
	 void                      SpawnPickup (  );                                 		//  Engine.wPickUpBase.SpawnPickup
	 void                      TurnOn (  );                                      		//  Engine.wPickUpBase.TurnOn
	 unsigned char             GetInventoryGroup (  );                           		//  Engine.wPickUpBase.GetInventoryGroup
	 bool                      CheckForErrors (  );                              		//  Engine.wPickUpBase.CheckForErrors
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Simulated | FUNC_Event ] Engine.wPickUpBase.PostBeginPlay

	// Public Imports
	AwPickUpBase(class AwPickUpBase const &);
	AwPickUpBase(void);
	class AwPickUpBase &  operator=(class AwPickUpBase const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0034

// Class Engine.wGameStateStorageSender
class DLL_IMPORT AwGameStateStorageSender : public AActor
{
public:
	float                                              fElapsedTime;                                     		// 0x03C8 ( 0x0004 ) 
	int                                                UserID;                                           		// 0x03CC ( 0x0004 ) [ CPF_Net ]
	struct FString                                     OwnerName;                                        		// 0x03D0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class AwGameStateStorageSender*                    nextGSSS;                                         		// 0x03DC ( 0x0004 ) 
	unsigned long                                      bNoUpdateData:1;                                  		// 0x03E0 ( 0x0004 )  [0x00000001]
	class AGameReplicationInfo*                        GRI;                                              		// 0x03E4 ( 0x0004 ) 

	// UScript Functions
	 class APlayerController*  GetPlayerController (  );                         		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.GetPlayerController
	 void                      ClientInitialize ( int id, class APlayerController* PC );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientInitialize
	 void                      Initialize ( int id, class APlayerController* PC );		//  Engine.wGameStateStorageSender.Initialize
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] Engine.wGameStateStorageSender.Destroyed
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.wGameStateStorageSender.PreBeginPlay
	 void                      SetGameState_OnlyClient (  );                     		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.SetGameState_OnlyClient
	 void                      SetScoreState_OnlyClient (  );                    		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.SetScoreState_OnlyClient
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Simulated | FUNC_Event ] Engine.wGameStateStorageSender.Tick
	 void                      ClientTick ( float DeltaTime );                   		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientTick
	 void                      SetAllDataToInterventionUser ( class AwGameStateStorageSender* ToGSSS );		//  Engine.wGameStateStorageSender.SetAllDataToInterventionUser
	 void                      SetToStorage_AllUserData (  );                    		//  Engine.wGameStateStorageSender.SetToStorage_AllUserData
	 void                      ClientDeleteFromStorage_Weapon ( int UserID, struct FString strWeaponName );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientDeleteFromStorage_Weapon
	 void                      DeleteFromStorage_Weapon ( struct FString strWeaponName );		//  Engine.wGameStateStorageSender.DeleteFromStorage_Weapon
	 void                      ClientClearStorage ( struct FString sUserID );    		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientClearStorage
	 void                      ClearStorage (  );                                		//  Engine.wGameStateStorageSender.ClearStorage
	 void                      ClientDeleteFromStorage ( struct FString sUserID, struct FString Section, struct FString sName );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientDeleteFromStorage
	 void                      DeleteFromStorage ( struct FString Section, struct FString sName );		//  Engine.wGameStateStorageSender.DeleteFromStorage
	 void                      ClientSetToStorage3 ( struct FString sUserID, struct FString Section, struct FString sName, struct FString Type, struct FString Value, struct FString Section2, struct FString sName2, struct FString type2, struct FString value2, struct FString Section3, struct FString sName3, struct FString type3, struct FString value3 );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage3
	 void                      SetToStorage3 ( struct FString Section, struct FString sName, struct FString Type, struct FString Value, struct FString Section2, struct FString sName2, struct FString type2, struct FString value2, struct FString Section3, struct FString sName3, struct FString type3, struct FString value3 );		//  Engine.wGameStateStorageSender.SetToStorage3
	 void                      ClientSetToStorage_Vehicle_Leave ( int UserID );  		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Leave
	 void                      ClientSetToStorage_Vehicle_Enter ( int UserID, struct FString strClassName, float Pos_X, float Pos_Y, float Pos_Z );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_Vehicle_Enter
	 void                      ClientSetToStorage_Skill_UpdateCall ( int UserID, int nSkillID, bool bUpdateCall );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_Skill_UpdateCall
	 void                      ClientSetToStorage_Skill_AddCount ( int UserID, int nSkillID, unsigned char byAddCount );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_Skill_AddCount
	 void                      ClientSetToStorage_Skill_Used ( int UserID, int nSkillID, bool bUsed );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_Skill_Used
	 void                      ClientSetToStorage_Skill_IsEnable ( int UserID, int nSkillID, bool bIsEnable );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_Skill_IsEnable
	 void                      ClientSetToStorage_PlayerState ( int UserID, struct FString strName, unsigned char bPawnExistCondition );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_PlayerState
	 void                      ClientSetToStorage_WeaponAmmo ( int UserID, struct FString strName, int nTotalAmmo, int nCurrentAmmo );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_WeaponAmmo
	 void                      ClientSetToStorage_AddWeapon ( int UserID, struct FString strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_AddWeapon
	 void                      ClientSetToStorage_OldWeapon ( int UserID, int nWeaponID );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_OldWeapon
	 void                      ClientSetToStorage_CurrentWeapon ( int UserID, int nWeaponID );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage_CurrentWeapon
	 void                      SetToStorage_Vehicle_Leave (  );                  		//  Engine.wGameStateStorageSender.SetToStorage_Vehicle_Leave
	 void                      SetToStorage_Vehicle_Enter ( struct FString strClassName, float Pos_X, float Pos_Y, float Pos_Z );		//  Engine.wGameStateStorageSender.SetToStorage_Vehicle_Enter
	 void                      SetToStorage_Skill_UpdateCall ( int nSkillID, bool bUpdateCall );		//  Engine.wGameStateStorageSender.SetToStorage_Skill_UpdateCall
	 void                      SetToStorage_Skill_AddCount ( int nSkillID, unsigned char byAddCount );		//  Engine.wGameStateStorageSender.SetToStorage_Skill_AddCount
	 void                      SetToStorage_Skill_Used ( int nSkillID, bool bUsed );		//  Engine.wGameStateStorageSender.SetToStorage_Skill_Used
	 void                      SetToStorage_Skill_IsEnable ( int nSkillID, bool bIsEnable );		//  Engine.wGameStateStorageSender.SetToStorage_Skill_IsEnable
	 void                      SetToStorage_PlayerState ( struct FString strName, unsigned char bPawnExistCondition );		//  Engine.wGameStateStorageSender.SetToStorage_PlayerState
	 void                      SetToStorage_WeaponAmmo ( struct FString strName, int nTotalAmmo, int nCurrentAmmo );		//  Engine.wGameStateStorageSender.SetToStorage_WeaponAmmo
	 void                      SetToStorage_AddWeapon ( struct FString strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID );		//  Engine.wGameStateStorageSender.SetToStorage_AddWeapon
	 void                      SetToStorage_OldWeapon ( int nWeaponID );         		//  Engine.wGameStateStorageSender.SetToStorage_OldWeapon
	 void                      SetToStorage_CurrentWeapon ( int nWeaponID );     		//  Engine.wGameStateStorageSender.SetToStorage_CurrentWeapon
	 void                      LowWeapon_Delete ( int UserID, struct FString strWeaponName );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowWeapon_Delete
	 void                      LowVehicleLeave_Set ( int UserID );               		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowVehicleLeave_Set
	 void                      LowVehicleEnter_Set ( int UserID, struct FString strClassName, float Pos_X, float Pos_Y, float Pos_Z );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowVehicleEnter_Set
	 void                      LowSkill_UpdateCall_Set ( int UserID, int nSkillID, bool bUpdateCall );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowSkill_UpdateCall_Set
	 void                      LowSkill_AddCount_Set ( int UserID, int nSkillID, unsigned char byAddCount );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowSkill_AddCount_Set
	 void                      LowSkill_Used_Set ( int UserID, int nSkillID, bool bUsed );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowSkill_Used_Set
	 void                      LowSkill_IsEnable_Set ( int UserID, int nSkillID, bool bIsEnable );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowSkill_IsEnable_Set
	 void                      LowPlayerState_Set ( int UserID, struct FString strName, unsigned char bPawnExistCondition );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowPlayerState_Set
	 void                      LowWeaponAmmo_Set ( int UserID, struct FString strWeaponName, int nTotalAmmo, int nCurrentAmmo );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowWeaponAmmo_Set
	 void                      LowAddWeapon_Set ( int UserID, struct FString strWeaponName, int nWeaponID, int nAddPartID, bool bUniqueID, int iPainting_Item_ID );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowAddWeapon_Set
	 void                      LowOldWeapon_Set ( int UserID, int nWeaponID );   		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowOldWeapon_Set
	 void                      LowCurrentWeapon_Set ( int UserID, int nWeaponID );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.LowCurrentWeapon_Set
	 void                      ClientSetToStorage ( struct FString sUserID, struct FString Section, struct FString sName, struct FString Type, struct FString Value );		// [ FUNC_Simulated ] Engine.wGameStateStorageSender.ClientSetToStorage
	 void                      SetToStorage ( struct FString Section, struct FString sName, struct FString Type, struct FString Value );		//  Engine.wGameStateStorageSender.SetToStorage
	 bool                      GetValue ( struct FString Section, struct FString sName, struct FString Type, struct FString* Value );		// [ FUNC_Final | FUNC_Native ] Engine.wGameStateStorageSender.GetValue
	 void                      AllValues ( struct FString Section, struct FString sName, struct FString* Type, struct FString* Value );		// [ FUNC_Final | FUNC_Native ] Engine.wGameStateStorageSender.AllValues
	 void                      AllNames ( struct FString Section, struct FString* sName );		// [ FUNC_Final | FUNC_Native ] Engine.wGameStateStorageSender.AllNames
	 void                      LowClear ( struct FString sUserID );              		// [ FUNC_Final | FUNC_Native ] Engine.wGameStateStorageSender.LowClear
	 void                      LowDelete ( struct FString sUserID, struct FString Section, struct FString sName );		// [ FUNC_Final | FUNC_Native ] Engine.wGameStateStorageSender.LowDelete
	 void                      LowSet ( struct FString sUserID, struct FString Section, struct FString sName, struct FString Type, struct FString Value );		// [ FUNC_Final | FUNC_Native ] Engine.wGameStateStorageSender.LowSet
	 void                      RemoveGSSS (  );                                  		// [ FUNC_Native ] Engine.wGameStateStorageSender.RemoveGSSS
	 void                      AddGSSS (  );                                     		// [ FUNC_Native ] Engine.wGameStateStorageSender.AddGSSS
	 void                      ForceSetOwner ( class APlayerController* PC );    		// [ FUNC_Final | FUNC_Native ] Engine.wGameStateStorageSender.ForceSetOwner

	// Public Imports
	AwGameStateStorageSender(class AwGameStateStorageSender const &);
	class AwGameStateStorageSender &  operator=(class AwGameStateStorageSender const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0020

// Class Engine.wEmitter
class DLL_IMPORT AwEmitter : public AActor
{
public:
	unsigned char                                      mParticleType;                                    		// 0x03C8 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      mSpawningType;                                    		// 0x03C9 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      mRegen:1;                                         		// 0x03CC ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      mRegenPause:1;                                    		// 0x03CC ( 0x0004 )  [0x00000002][ CPF_Edit ]
	float                                              mRegenOnTime[ 0x02 ];                             		// 0x03D0 ( 0x0008 ) [ CPF_Edit ]
	float                                              mRegenOffTime[ 0x02 ];                            		// 0x03D8 ( 0x0008 ) [ CPF_Edit ]
	int                                                mStartParticles;                                  		// 0x03E0 ( 0x0004 ) [ CPF_Edit ]
	int                                                mMaxParticles;                                    		// 0x03E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              mDelayRange[ 0x02 ];                              		// 0x03E8 ( 0x0008 ) [ CPF_Edit ]
	float                                              mLifeRange[ 0x02 ];                               		// 0x03F0 ( 0x0008 ) [ CPF_Edit ]
	float                                              mRegenRange[ 0x02 ];                              		// 0x03F8 ( 0x0008 ) [ CPF_Edit ]
	float                                              mRegenDist;                                       		// 0x0400 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       mSourceActor;                                     		// 0x0404 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       mChildName;                                       		// 0x0408 ( 0x0004 ) [ CPF_Edit ]
	class AwEmitter*                                   mChildEmitter;                                    		// 0x040C ( 0x0004 ) 
	class AStaticMeshActor*                            SourceStaticMesh;                                 		// 0x0410 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bSuspendWhenNotVisible:1;                         		// 0x0414 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      mDistanceAtten:1;                                 		// 0x0414 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	struct FVector                                     mDirDev;                                          		// 0x0418 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     mPosDev;                                          		// 0x0424 ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     mSpawnVecA;                                       		// 0x0430 ( 0x000C ) [ CPF_Edit | CPF_Net ]
	struct FVector                                     mSpawnVecB;                                       		// 0x043C ( 0x000C ) [ CPF_Edit ]
	float                                              mSpeedRange[ 0x02 ];                              		// 0x0448 ( 0x0008 ) [ CPF_Edit ]
	unsigned long                                      mPosRelative:1;                                   		// 0x0450 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              mMassRange[ 0x02 ];                               		// 0x0454 ( 0x0008 ) [ CPF_Edit ]
	float                                              mAirResistance;                                   		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      mCollision:1;                                     		// 0x0460 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              mOwnerVelocityFactor;                             		// 0x0464 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      mRandOrient:1;                                    		// 0x0468 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              mSpinRange[ 0x02 ];                               		// 0x046C ( 0x0008 ) [ CPF_Edit ]
	float                                              mSizeRange[ 0x02 ];                               		// 0x0474 ( 0x0008 ) [ CPF_Edit ]
	float                                              mGrowthRate;                                      		// 0x047C ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       mColorRange[ 0x02 ];                              		// 0x0480 ( 0x0008 ) [ CPF_Edit ]
	unsigned long                                      mAttenuate:1;                                     		// 0x0488 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              mAttenKa;                                         		// 0x048C ( 0x0004 ) [ CPF_Edit ]
	float                                              mAttenKb;                                         		// 0x0490 ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      mAttenFunc;                                       		// 0x0494 ( 0x0001 ) [ CPF_Edit ]
	int                                                mpAttenFunc;                                      		// 0x0498 ( 0x0004 ) 
	unsigned long                                      mRandTextures:1;                                  		// 0x049C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      mTileAnimation:1;                                 		// 0x049C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                mNumTileColumns;                                  		// 0x04A0 ( 0x0004 ) [ CPF_Edit ]
	int                                                mNumTileRows;                                     		// 0x04A4 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      mUseMeshNodes:1;                                  		// 0x04A8 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      mRandMeshes:1;                                    		// 0x04A8 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	class UStaticMesh*                                 mMeshNodes[ 0x08 ];                               		// 0x04AC ( 0x0020 ) [ CPF_Edit ]
	class UTexture*                                    mPosColorMapXY;                                   		// 0x04CC ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    mPosColorMapXZ;                                   		// 0x04D0 ( 0x0004 ) [ CPF_Edit ]
	class UTexture*                                    mLifeColorMap;                                    		// 0x04D4 ( 0x0004 ) [ CPF_Edit ]
	float                                              springK;                                          		// 0x04D8 ( 0x0004 ) [ CPF_Edit ]
	float                                              springD;                                          		// 0x04DC ( 0x0004 ) [ CPF_Edit ]
	float                                              springMaxStretch;                                 		// 0x04E0 ( 0x0004 ) [ CPF_Edit ]
	float                                              springMaxCompress;                                		// 0x04E4 ( 0x0004 ) [ CPF_Edit ]
	float                                              mColElasticity;                                   		// 0x04E8 ( 0x0004 ) [ CPF_Edit ]
	float                                              mAttraction;                                      		// 0x04EC ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      mColMakeSound:1;                                  		// 0x04F0 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	float                                              mWaveFrequency;                                   		// 0x04F4 ( 0x0004 ) [ CPF_Edit ]
	float                                              mWaveAmplitude;                                   		// 0x04F8 ( 0x0004 ) [ CPF_Edit ]
	float                                              mWaveShift;                                       		// 0x04FC ( 0x0004 ) [ CPF_Edit ]
	float                                              mBendStrength;                                    		// 0x0500 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      mWaveLockEnd:1;                                   		// 0x0504 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bForceAffected:1;                                 		// 0x0504 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                SystemHandle;                                     		// 0x0508 ( 0x0004 ) [ CPF_Transient ]
	int                                                Expire;                                           		// 0x050C ( 0x0004 ) [ CPF_Transient ]
	void*                                              mpParticles;                                      		// 0x0510 ( 0x0004 ) [ CPF_Transient ]
	int                                                mNumActivePcl;                                    		// 0x0514 ( 0x0004 ) [ CPF_Transient ]
	void*                                              mpIterator;                                       		// 0x0518 ( 0x0004 ) [ CPF_Transient ]
	int                                                mbSpinningNodes;                                  		// 0x051C ( 0x0004 ) [ CPF_Transient ]
	struct FVector                                     mLastPos;                                         		// 0x0520 ( 0x000C ) [ CPF_Transient ]
	struct FVector                                     mLastVector;                                      		// 0x052C ( 0x000C ) [ CPF_Transient ]
	float                                              mTime;                                            		// 0x0538 ( 0x0004 ) [ CPF_Transient ]
	float                                              mT;                                               		// 0x053C ( 0x0004 ) [ CPF_Transient ]
	float                                              mRegenBias;                                       		// 0x0540 ( 0x0004 ) [ CPF_Transient ]
	float                                              mRegenTimer;                                      		// 0x0544 ( 0x0004 ) [ CPF_Transient ]
	float                                              mPauseTimer;                                      		// 0x0548 ( 0x0004 ) [ CPF_Transient ]
	struct FBox                                        mBounds;                                          		// 0x054C ( 0x001C ) [ CPF_Transient ]
	struct FPlane                                      mSphere;                                          		// 0x0568 ( 0x0010 ) [ CPF_Transient ]
	struct FVector                                     mDir;                                             		// 0x0578 ( 0x000C ) [ CPF_Transient ]
	int                                                mNumUpdates;                                      		// 0x0584 ( 0x0004 ) [ CPF_Transient ]
	int                                                mAtLeastOneFrame;                                 		// 0x0588 ( 0x0004 ) [ CPF_Transient ]
	int                                                mRenderableVerts;                                 		// 0x058C ( 0x0004 ) [ CPF_Transient ]
	float                                              mTexU;                                            		// 0x0590 ( 0x0004 ) [ CPF_Transient ]
	float                                              mTexV;                                            		// 0x0594 ( 0x0004 ) [ CPF_Transient ]
	float                                              mTotalTiles;                                      		// 0x0598 ( 0x0004 ) [ CPF_Transient ]
	float                                              mInvTileCols;                                     		// 0x059C ( 0x0004 ) [ CPF_Transient ]
	void*                                              mpSprings;                                        		// 0x05A0 ( 0x0004 ) [ CPF_Transient ]
	int                                                mNumSprings;                                      		// 0x05A4 ( 0x0004 ) [ CPF_Transient ]
	float                                              mWavePhaseA;                                      		// 0x05A8 ( 0x0004 ) [ CPF_Transient ]
	float                                              mWavePhaseB;                                      		// 0x05AC ( 0x0004 ) [ CPF_Transient ]
	unsigned long                                      blockOnNet:1;                                     		// 0x05B0 ( 0x0004 )  [0x00000001][ CPF_Net ]
	unsigned long                                      bCallPreSpawn:1;                                  		// 0x05B0 ( 0x0004 )  [0x00000002]
	int                                                mHeadIndex;                                       		// 0x05B4 ( 0x0004 ) [ CPF_Transient ]

	// UScript Functions
	 void                      PrecacheContent ( class ALevelInfo* Level );      		//  Engine.wEmitter.PrecacheContent
	 void                      UpdatePrecacheMaterials (  );                     		// [ FUNC_Simulated ] Engine.wEmitter.UpdatePrecacheMaterials
	 void                      eventTrigger ( class AActor* Other, class APawn* EventInstigator );		// [ FUNC_Event ] Engine.wEmitter.Trigger
	 float                     ClampToMaxParticles ( float InPart );             		// [ FUNC_Final | FUNC_Simulated ] Engine.wEmitter.ClampToMaxParticles
	 void                      eventPreSpawned (  );                             		// [ FUNC_Event ] Engine.wEmitter.PreSpawned
	 void                      eventCollisionSound (  );                         		// [ FUNC_Event ] Engine.wEmitter.CollisionSound

	// Public Imports
	AwEmitter(class AwEmitter const &);
	AwEmitter(void);
	class AwEmitter &  operator=(class AwEmitter const &);
	void  InitParticle(int);
	void  Initialize(void);
	static void  InternalConstructor(void *);
	int  IsForceAffected(void);
	void  PreCalc(void);
	void  Render(class FLevelSceneNode *,class FRenderInterface *);
	void  Reset(void);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x01F0

// Class Engine.SceneSubtitles
class DLL_IMPORT ASceneSubtitles : public AInfo
{
public:
	class TArray< struct FString >                     SubTitles;                                        		// 0x041C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	int                                                CurrentIndex;                                     		// 0x0428 ( 0x0004 ) 

	// UScript Functions
	 void                      eventReset (  );                                  		// [ FUNC_Event ] Engine.SceneSubtitles.Reset
	 struct FString            GetSubTitles (  );                                		//  Engine.SceneSubtitles.GetSubTitles
	 //void                      ProcessEvent ( unsigned char Mode );              		// [ FUNC_Final | FUNC_Native ] Engine.SceneSubtitles.ProcessEvent

	// Public Imports
	ASceneSubtitles(class ASceneSubtitles const &);
	ASceneSubtitles(void);
	class ASceneSubtitles &  operator=(class ASceneSubtitles const &);
	static void  InternalConstructor(void *);
	//void  ProcessEvent(enum ESST_Mode);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0010

// Class Engine.GameStats
class DLL_IMPORT AGameStats : public AInfo
{
public:
	class AFileLog*                                    TempLog;                                          		// 0x041C ( 0x0004 ) 
	class AGameReplicationInfo*                        GRI;                                              		// 0x0420 ( 0x0004 ) 
	unsigned long                                      bShowBots:1;                                      		// 0x0424 ( 0x0004 )  [0x00000001]
	struct FString                                     Tab;                                              		// 0x0428 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bLocalLog:1;                                      		// 0x0434 ( 0x0004 )  [0x00000001][ CPF_Config | CPF_GlobalConfig ]
	struct FString                                     LogFileName;                                      		// 0x0438 ( 0x000C ) [ CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            GetLogFilename (  );                              		//  Engine.GameStats.GetLogFilename
	 void                      GameEvent ( struct FString GEvent, struct FString Desc, class APlayerReplicationInfo* Who );		//  Engine.GameStats.GameEvent
	 void                      SpecialEvent ( class APlayerReplicationInfo* Who, struct FString Desc );		//  Engine.GameStats.SpecialEvent
	 void                      KillEvent ( struct FString KillType, class APlayerReplicationInfo* Killer, class APlayerReplicationInfo* Victim, class UClass* Damage );		//  Engine.GameStats.KillEvent
	 void                      TeamScoreEvent ( int Team, float Points, struct FString Desc );		//  Engine.GameStats.TeamScoreEvent
	 void                      ScoreEvent ( class APlayerReplicationInfo* Who, float Points, struct FString Desc );		//  Engine.GameStats.ScoreEvent
	 void                      DisconnectEvent ( class APlayerReplicationInfo* Who );		//  Engine.GameStats.DisconnectEvent
	 void                      ConnectEvent ( class APlayerReplicationInfo* Who );		//  Engine.GameStats.ConnectEvent
	 void                      EndGame ( struct FString Reason );                		//  Engine.GameStats.EndGame
	 void                      StartGame (  );                                   		//  Engine.GameStats.StartGame
	 void                      ServerInfo (  );                                  		//  Engine.GameStats.ServerInfo
	 void                      NewGame (  );                                     		//  Engine.GameStats.NewGame
	 struct FString            MapName (  );                                     		//  Engine.GameStats.MapName
	 struct FString            TimeZone (  );                                    		//  Engine.GameStats.TimeZone
	 struct FString            FullTimeDate (  );                                		//  Engine.GameStats.FullTimeDate
	 struct FString            Header (  );                                      		//  Engine.GameStats.Header
	 struct FString            TimeStamp (  );                                   		//  Engine.GameStats.TimeStamp
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] Engine.GameStats.Destroyed
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.GameStats.PostBeginPlay
	 void                      Logf ( struct FString LogString );                		//  Engine.GameStats.Logf
	 void                      Shutdown (  );                                    		//  Engine.GameStats.Shutdown
	 void                      Init (  );                                        		//  Engine.GameStats.Init
	 struct FString            GetMapFileName (  );                              		// [ FUNC_Final | FUNC_Native ] Engine.GameStats.GetMapFileName
	 struct FString            GetStatsIdentifier ( class AController* C );      		// [ FUNC_Final | FUNC_Native ] Engine.GameStats.GetStatsIdentifier

	// Public Imports
	AGameStats(class AGameStats const &);
	class AGameStats &  operator=(class AGameStats const &);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x0028

// Class Engine.FileLog
class DLL_IMPORT AFileLog : public AInfo
{
public:
	void*                                              LogAr;                                            		// 0x041C ( 0x0004 ) [ CPF_Transient ]
	struct FString                                     LogFileName;                                      		// 0x0420 ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]
	struct FString                                     TempFileName;                                     		// 0x042C ( 0x000C ) [ CPF_Const | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      Logf ( struct FString LogString );                		// [ FUNC_Final | FUNC_Native ] Engine.FileLog.Logf
	 void                      CloseLog (  );                                    		// [ FUNC_Final | FUNC_Native ] Engine.FileLog.CloseLog
	 void                      OpenLog ( struct FString FName, struct FString FExt, bool bOverwrite );		// [ FUNC_Final | FUNC_Native ] Engine.FileLog.OpenLog

	// Public Imports
	AFileLog(class AFileLog const &);
	AFileLog(void);
	class AFileLog &  operator=(class AFileLog const &);
	void  FinishLog(void);
	static void  InternalConstructor(void *);
	static class UClass *  StaticClass(void);

	// Private Imports
private:
	static class UClass PrivateStaticClass;
}; // Size: 0x001C

// Class Engine.LocalMessage
class DLL_IMPORT ALocalMessage : public AInfo
{
public:
	unsigned long                                      bComplexString:1;                                 		// 0x041C ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bIsSpecial:1;                                     		// 0x041C ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bIsUnique:1;                                      		// 0x041C ( 0x0004 )  [0x00000004][ CPF_Edit ]
	unsigned long                                      bIsPartiallyUnique:1;                             		// 0x041C ( 0x0004 )  [0x00000008][ CPF_Edit ]
	unsigned long                                      bIsConsoleMessage:1;                              		// 0x041C ( 0x0004 )  [0x00000010][ CPF_Edit ]
	unsigned long                                      bFadeMessage:1;                                   		// 0x041C ( 0x0004 )  [0x00000020][ CPF_Edit ]
	unsigned long                                      bBeep:1;                                          		// 0x041C ( 0x0004 )  [0x00000040][ CPF_Edit ]
	int                                                Lifetime;                                         		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bDrawWithTexture:1;                               		// 0x0424 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	class UClass*                                      ChildMessage;                                     		// 0x0428 ( 0x0004 ) [ CPF_Edit ]
	class FColor                                       DrawColor;                                        		// 0x042C ( 0x0004 ) [ CPF_Edit ]
	unsigned char                                      DrawPivot;                                        		// 0x0430 ( 0x0001 ) [ CPF_Edit ]
	unsigned char                                      StackMode;                                        		// 0x0431 ( 0x0001 ) [ CPF_Edit ]
	float                                              PosX;                                             		// 0x0434 ( 0x0004 ) [ CPF_Edit ]
	float                                              PosY;                                             		// 0x0438 ( 0x0004 ) [ CPF_Edit ]
	int                                                FontSize;                                         		// 0x043C ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 bool                      IsConsoleMessage ( int Switch );                  		//  Engine.LocalMessage.IsConsoleMessage
	 float                     GetLifeTime ( int Switch );                       		//  Engine.LocalMessage.GetLifeTime
	 int                       GetFontSize ( int Switch, class APlayerReplicationInfo* RelatedPRI1, class APlayerReplicationInfo* RelatedPRI2, class APlayerReplicationInfo* LocalPlayer );		//  Engine.LocalMessage.GetFontSize
	 void                      GetPos ( int Switch, unsigned char* OutDrawPivot, unsigned char* OutStackMode, float* OutPosX, float* OutPosY );		//  Engine.LocalMessage.GetPos
	 class FColor              GetColor ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2 );		//  Engine.LocalMessage.GetColor
	 class FColor              GetConsoleColor ( class APlayerReplicationInfo* RelatedPRI_1 );		//  Engine.LocalMessage.GetConsoleColor
	 bool                      GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.LocalMessage.GotoBTConsole
	 bool                      GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.LocalMessage.GotoHud
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.LocalMessage.ClientReceive
	 struct FString            AssembleString ( class AHUD* myHUD, int Switch, class APlayerReplicationInfo* RelatedPRI_1, struct FString MessageString );		//  Engine.LocalMessage.AssembleString
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.LocalMessage.GetString
	 struct FString            GetRelatedString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.LocalMessage.GetRelatedString
	 void                      RenderComplexMessage ( class UCanvas* Canvas, struct FString MessageString, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject, float* XL, float* YL );		//  Engine.LocalMessage.RenderComplexMessage
}; // Size: 0x0024

// Class Engine.GameMessage
class DLL_IMPORT AGameMessage : public ALocalMessage
{
public:
	struct FString                                     SwitchLevelMessage;                               		// 0x0440 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     LeftMessage;                                      		// 0x044C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FailedTeamMessage;                                		// 0x0458 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FailedPlaceMessage;                               		// 0x0464 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     FailedSpawnMessage;                               		// 0x0470 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EnteredMessage;                                   		// 0x047C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MaxedOutMessage;                                  		// 0x0488 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     OvertimeMessage;                                  		// 0x0494 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     GlobalNameChange;                                 		// 0x04A0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NewTeamMessage;                                   		// 0x04AC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NewTeamMessageTrailer;                            		// 0x04B8 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NoNameChange;                                     		// 0x04C4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     VoteStarted;                                      		// 0x04D0 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     VotePassed;                                       		// 0x04DC ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MustHaveStats;                                    		// 0x04E8 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CantBeSpectator;                                  		// 0x04F4 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CantBePlayer;                                     		// 0x0500 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     CantBePlayerWaitNextRound;                        		// 0x050C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BecameSpectator;                                  		// 0x0518 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NewPlayerMessage;                                 		// 0x0524 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     KickWarning;                                      		// 0x0530 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NewSpecMessage;                                   		// 0x053C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SpecEnteredMessage;                               		// 0x0548 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.GameMessage.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.GameMessage.GetString
}; // Size: 0x0114

// Class Engine.VolumeTimer
class DLL_IMPORT AVolumeTimer : public AInfo
{
public:
	class AActor*                                      A;                                                		// 0x041C ( 0x0004 ) 
	float                                              TimerFrequency;                                   		// 0x0420 ( 0x0004 ) 

	// UScript Functions
	 void                      Timer (  );                                       		//  Engine.VolumeTimer.Timer
	 void                      PostBeginPlay (  );                               		//  Engine.VolumeTimer.PostBeginPlay
}; // Size: 0x0008

// Class Engine.wProjectile
class DLL_IMPORT AwProjectile : public AProjectile
{
public:
	class UClass*                                      ExplosionClass;                                   		// 0x041C ( 0x0004 ) 
	class UClass*                                      ExplosionClass_dirt;                              		// 0x0420 ( 0x0004 ) 
	class UClass*                                      ExplosionClass_grass;                             		// 0x0424 ( 0x0004 ) 
	class UClass*                                      ExplosionClass_metal;                             		// 0x0428 ( 0x0004 ) 
	class UClass*                                      ExplosionClass_snow;                              		// 0x042C ( 0x0004 ) 
	class UClass*                                      ExplosionClass_water;                             		// 0x0430 ( 0x0004 ) 
	class UClass*                                      ExplosionClass_wood;                              		// 0x0434 ( 0x0004 ) 
	int                                                iWeaponID;                                        		// 0x0438 ( 0x0004 ) [ CPF_Net ]
	class UwWeaponBaseParams*                          BaseParams;                                       		// 0x043C ( 0x0004 ) 
	class UClass*                                      ResParams;                                        		// 0x0440 ( 0x0004 ) 
	unsigned long                                      bExplodeCollide:1;                                		// 0x0444 ( 0x0004 )  [0x00000001]
	unsigned long                                      bTakeDamage:1;                                    		// 0x0444 ( 0x0004 )  [0x00000002]
	unsigned long                                      bMustExplode:1;                                   		// 0x0444 ( 0x0004 )  [0x00000004][ CPF_Net ]
	class UMaterial*                                   mHitMaterial;                                     		// 0x0448 ( 0x0004 ) 
	class AActor*                                      mHitActor;                                        		// 0x044C ( 0x0004 ) 
	int                                                Rotate_Pitch;                                     		// 0x0450 ( 0x0004 ) [ CPF_Net ]
	int                                                Rotate_Yaw;                                       		// 0x0454 ( 0x0004 ) [ CPF_Net ]
	int                                                Rotate_Roll;                                      		// 0x0458 ( 0x0004 ) [ CPF_Net ]
	struct FVector                                     vHostLocation;                                    		// 0x045C ( 0x000C ) [ CPF_Net ]
	unsigned long                                      bIncExplosion:1;                                  		// 0x0468 ( 0x0004 )  [0x00000001][ CPF_Net ]
	int                                                Team;                                             		// 0x046C ( 0x0004 ) [ CPF_Net ]
	struct FString                                     InstigatorName;                                   		// 0x0470 ( 0x000C ) [ CPF_Net | CPF_NeedCtorLink ]
	float                                              fMinFlashReduceRate;                              		// 0x047C ( 0x0004 ) 

	// UScript Functions
	 void                      RecoverFromHostChange (  );                       		//  Engine.wProjectile.RecoverFromHostChange
	 void                      RecoverInstigator (  );                           		//  Engine.wProjectile.RecoverInstigator
	 void                      RumbleRadius ( struct FVector HitLocation );      		// [ FUNC_Simulated ] Engine.wProjectile.RumbleRadius
	 void                      BlowUp ( struct FVector HitLocation );            		// [ FUNC_Simulated ] Engine.wProjectile.BlowUp
	 void                      wLoadOut ( int iID );                             		// [ FUNC_Simulated ] Engine.wProjectile.wLoadOut
	 class UClass*             GetExplosionClass (  );                           		// [ FUNC_Simulated ] Engine.wProjectile.GetExplosionClass
	 class UClass*             GetExplosionClassByMaterial (  );                 		// [ FUNC_Simulated ] Engine.wProjectile.GetExplosionClassByMaterial
	 class UClass*             GetExplosionClassByActor (  );                    		// [ FUNC_Simulated ] Engine.wProjectile.GetExplosionClassByActor
	 void                      DamageLog ( class APawn* Victim, float fDam, float fDist );		//  Engine.wProjectile.DamageLog
	 void                      SufferEffect ( class APawn* Victim, float fDist, float fReduceRate );		// [ FUNC_Simulated ] Engine.wProjectile.SufferEffect
	 void                      HurtRadiusTutorial ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation );		// [ FUNC_Simulated ] Engine.wProjectile.HurtRadiusTutorial
	 void                      HurtRadius ( float DamageAmount, float DamageRadius, class UClass* DamageType, float Momentum, struct FVector HitLocation );		// [ FUNC_Simulated ] Engine.wProjectile.HurtRadius
	 void                      eventTick ( float DeltaTime );                    		// [ FUNC_Simulated | FUNC_Event ] Engine.wProjectile.Tick
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wProjectile.PostBeginPlay
}; // Size: 0x0064

// Class Engine.wMessage_Quest
class DLL_IMPORT AwMessage_Quest : public ALocalMessage
{
public:
	int                                                Code_Quest_Kill;                                  		// 0x0440 ( 0x0004 ) 
	int                                                Code_Quest_AimedKill;                             		// 0x0444 ( 0x0004 ) 
	int                                                Code_Quest_HeadShotKill;                          		// 0x0448 ( 0x0004 ) 
	int                                                Code_Quest_MeeleAttackKill;                       		// 0x044C ( 0x0004 ) 
	int                                                Code_Quest_2Kill;                                 		// 0x0450 ( 0x0004 ) 
	int                                                Code_Quest_3Kill;                                 		// 0x0454 ( 0x0004 ) 
	int                                                Code_Quest_4Kill;                                 		// 0x0458 ( 0x0004 ) 
	int                                                Code_Quest_5Kill;                                 		// 0x045C ( 0x0004 ) 
	int                                                Code_Quest_6Kill;                                 		// 0x0460 ( 0x0004 ) 
	int                                                Code_Quest_7Kill;                                 		// 0x0464 ( 0x0004 ) 
	int                                                Code_Quest_8Kill;                                 		// 0x0468 ( 0x0004 ) 
	int                                                Code_Quest_9Kill;                                 		// 0x046C ( 0x0004 ) 
	int                                                Code_Quest_10Kill;                                		// 0x0470 ( 0x0004 ) 
	int                                                Code_Quest_15Kill;                                		// 0x0474 ( 0x0004 ) 
	int                                                Code_Quest_Assist;                                		// 0x0478 ( 0x0004 ) 
	int                                                Code_Quest_Death;                                 		// 0x047C ( 0x0004 ) 
	int                                                Code_Quest_CombatTime;                            		// 0x0480 ( 0x0004 ) 
	int                                                Code_Quest_MatchEnd;                              		// 0x0484 ( 0x0004 ) 
	int                                                Code_Quest_KillInBotMode;                         		// 0x0488 ( 0x0004 ) 
	int                                                Code_Quest_MatchEndInBotMode;                     		// 0x048C ( 0x0004 ) 
	int                                                Code_Quest_AcquireTrophy;                         		// 0x0490 ( 0x0004 ) 
	int                                                Code_Quest_SprintTime;                            		// 0x0494 ( 0x0004 ) 
	int                                                Code_Quest_RoundEndInBotMode;                     		// 0x0498 ( 0x0004 ) 
	int                                                Code_Quest_BestScoreInBotMode;                    		// 0x049C ( 0x0004 ) 
	int                                                Code_Quest_BestAssistInBotMode;                   		// 0x04A0 ( 0x0004 ) 
	int                                                Code_Quest_KillGrenade;                           		// 0x04A4 ( 0x0004 ) 
	struct FString                                     AMessageQuestSound;                               		// 0x04A8 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      PlaySoundMessageQuest ( class APlayerController* P );		// [ FUNC_Simulated ] Engine.wMessage_Quest.PlaySoundMessageQuest
	 void                      ClientReceive_Type3 ( class APlayerController* P, int Switch, int iRDifficult, int iRMap );		// [ FUNC_Simulated ] Engine.wMessage_Quest.ClientReceive_Type3
	 void                      ClientReceive_Type2 ( class APlayerController* P, int Switch, int iRMode, int iRMap, int iRMin, int iRSec );		// [ FUNC_Simulated ] Engine.wMessage_Quest.ClientReceive_Type2
	 void                      ClientReceive_Type1 ( class APlayerController* P, int Switch, int iRWeaponType, int iRweaponId );		// [ FUNC_Simulated ] Engine.wMessage_Quest.ClientReceive_Type1
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wMessage_Quest.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Quest.GetString
}; // Size: 0x0074

// Class Engine.wMessage_Game
class DLL_IMPORT AwMessage_Game : public ALocalMessage
{
public:
	struct FString                                     strCantProne;                                     		// 0x0440 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strWinMatch;                                      		// 0x044C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strLoseMatch;                                     		// 0x0458 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EnterSuddenDeath;                                 		// 0x0464 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     UAVOnlineEnemy;                                   		// 0x0470 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     UAVOnlineAlly;                                    		// 0x047C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strTakingLead;                                    		// 0x0488 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strFallingBehind;                                 		// 0x0494 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEndingWinning;                                 		// 0x04A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEndingLosing;                                  		// 0x04AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strContinueFromChangeHost;                        		// 0x04B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDAllyPlantedBomb;                             		// 0x04C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDEnemyPlantedBomb;                            		// 0x04D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDAllyDefusedBomb;                             		// 0x04DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDEnemyDefusedBomb;                            		// 0x04E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDAllyGotTheBomb;                              		// 0x04F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDAllyLostTheBomb;                             		// 0x0500 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDIGotTheBomb;                                 		// 0x050C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSDAllyThrowTheBomb;                            		// 0x0518 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTAllyGotTheBomb;                             		// 0x0524 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTEnemyGotTheBomb;                            		// 0x0530 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTIGotTheBomb;                                		// 0x053C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTAllyLostTheBomb;                            		// 0x0548 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTAllyPlantedBomb;                            		// 0x0554 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTEnemyPlantedBomb;                           		// 0x0560 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTAllyBombDefused;                            		// 0x056C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSBTEnemyBombDefused;                           		// 0x0578 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMAllyCapturedAll;                            		// 0x0584 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMEnemyCapturedAll;                           		// 0x0590 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMAllyCapturingA;                             		// 0x059C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMAllyCapturingB;                             		// 0x05A8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMAllyCapturingC;                             		// 0x05B4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMEnemyCapturingA;                            		// 0x05C0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMEnemyCapturingB;                            		// 0x05CC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMEnemyCapturingC;                            		// 0x05D8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMAllyCapturedA;                              		// 0x05E4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMAllyCapturedB;                              		// 0x05F0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMAllyCapturedC;                              		// 0x05FC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMEnemyCapturedA;                             		// 0x0608 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMEnemyCapturedB;                             		// 0x0614 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strDOMEnemyCapturedC;                             		// 0x0620 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strFFATakingLead;                                 		// 0x062C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strFFAFallingBehind;                              		// 0x0638 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strFFAEndingWinning;                              		// 0x0644 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strFFAEndingLosing;                               		// 0x0650 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strMouseSenseChange;                              		// 0x065C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strMouseSenseChangeAim;                           		// 0x0668 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGotMedal;                                      		// 0x0674 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGotMedalAlly;                                  		// 0x0680 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGotMedalEnemy;                                 		// 0x068C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyGreanade;                                  		// 0x0698 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyStunGreanade;                              		// 0x06A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllySmokeGreanade;                             		// 0x06B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyGasGreanade;                               		// 0x06BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyClaymore;                                  		// 0x06C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyTimeC4;                                    		// 0x06D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyIncGrenade;                                		// 0x06E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllySplitGrenade;                              		// 0x06EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEnemyMG;                                       		// 0x06F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEnemyTank;                                     		// 0x0704 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEnemyGreanade;                                 		// 0x0710 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEnemyRPG;                                      		// 0x071C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyReload;                                    		// 0x0728 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyDie;                                       		// 0x0734 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyKillEnemy;                                 		// 0x0740 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSelfHelicopter;                                		// 0x074C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSelfArtillery;                                 		// 0x0758 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strSelfUAV;                                       		// 0x0764 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyHelicopter;                                		// 0x0770 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyArtillery;                                 		// 0x077C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyUAV;                                       		// 0x0788 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyHelicopterGetBox;                          		// 0x0794 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyArtilleryGetBox;                           		// 0x07A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strAllyUAVGetBox;                                 		// 0x07AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEnemyHelicopter;                               		// 0x07B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEnemyArtillery;                                		// 0x07C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strEnemyUAV;                                      		// 0x07D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strMultiKills1;                                   		// 0x07DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strMultiKills2;                                   		// 0x07E8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strHeadShot;                                      		// 0x07F4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strRMC[ 0x09 ];                                   		// 0x0800 ( 0x006C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strRMS[ 0x07 ];                                   		// 0x086C ( 0x0054 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strRMR[ 0x08 ];                                   		// 0x08C0 ( 0x0060 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SoundEnemyMG;                                     		// 0x0920 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundEnemyTank;                                   		// 0x092C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundEnemyGreanade;                               		// 0x0938 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundEnemyRPG;                                    		// 0x0944 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundAllyReload;                                  		// 0x0950 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundAllyDie;                                     		// 0x095C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundAllyKillEnemy;                               		// 0x0968 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundHeadShot;                                    		// 0x0974 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Sound3Kill;                                       		// 0x0980 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Sound5Kill;                                       		// 0x098C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Sound7Kill;                                       		// 0x0998 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Sound10Kill;                                      		// 0x09A4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Sound15Kill;                                      		// 0x09B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundWhizby;                                      		// 0x09BC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSelfHelicopter;                           		// 0x09C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSelfArtillery;                            		// 0x09D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSelfUAV;                                  		// 0x09E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceAllyHelicopter;                           		// 0x09EC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceAllyArtillery;                            		// 0x09F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceAllyUAV;                                  		// 0x0A04 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceAllyHelicopterGetBox;                     		// 0x0A10 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceAllyArtilleryGetBox;                      		// 0x0A1C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceAllyUAVGetBox;                            		// 0x0A28 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceEnemyHelicopter;                          		// 0x0A34 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceEnemyArtillery;                           		// 0x0A40 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceEnemyUAV;                                 		// 0x0A4C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Code_AllyGreanade;                                		// 0x0A58 ( 0x0004 ) 
	int                                                Code_AllyStunGreanade;                            		// 0x0A5C ( 0x0004 ) 
	int                                                Code_AllySmokeGreanade;                           		// 0x0A60 ( 0x0004 ) 
	int                                                Code_AllyGasGreanade;                             		// 0x0A64 ( 0x0004 ) 
	int                                                Code_AllyClaymore;                                		// 0x0A68 ( 0x0004 ) 
	int                                                Code_AllyTimeC4;                                  		// 0x0A6C ( 0x0004 ) 
	int                                                Code_AllyIncGrenade;                              		// 0x0A70 ( 0x0004 ) 
	int                                                Code_AllySplitGrenade;                            		// 0x0A74 ( 0x0004 ) 
	int                                                Code_EnemyMG;                                     		// 0x0A78 ( 0x0004 ) 
	int                                                Code_EnemyTank;                                   		// 0x0A7C ( 0x0004 ) 
	int                                                Code_EnemyGreanade;                               		// 0x0A80 ( 0x0004 ) 
	int                                                Code_EnemyRPG;                                    		// 0x0A84 ( 0x0004 ) 
	int                                                Code_AllyReload;                                  		// 0x0A88 ( 0x0004 ) 
	int                                                Code_AllyDie;                                     		// 0x0A8C ( 0x0004 ) 
	int                                                Code_AllyKillEnemy;                               		// 0x0A90 ( 0x0004 ) 
	int                                                Code_SelfHelicopter;                              		// 0x0A94 ( 0x0004 ) 
	int                                                Code_SelfArtillery;                               		// 0x0A98 ( 0x0004 ) 
	int                                                Code_SelfUAV;                                     		// 0x0A9C ( 0x0004 ) 
	int                                                Code_AllyHelicopter;                              		// 0x0AA0 ( 0x0004 ) 
	int                                                Code_AllyArtillery;                               		// 0x0AA4 ( 0x0004 ) 
	int                                                Code_AllyUAV;                                     		// 0x0AA8 ( 0x0004 ) 
	int                                                Code_AllyHelicopterGetBox;                        		// 0x0AAC ( 0x0004 ) 
	int                                                Code_AllyArtilleryGetBox;                         		// 0x0AB0 ( 0x0004 ) 
	int                                                Code_AllyUAVGetBox;                               		// 0x0AB4 ( 0x0004 ) 
	int                                                Code_EnemyHelicopter;                             		// 0x0AB8 ( 0x0004 ) 
	int                                                Code_EnemyArtillery;                              		// 0x0ABC ( 0x0004 ) 
	int                                                Code_EnemyUAV;                                    		// 0x0AC0 ( 0x0004 ) 
	int                                                Code_HeadShot;                                    		// 0x0AC4 ( 0x0004 ) 
	int                                                Code_KillSuccession[ 0x0F ];                      		// 0x0AC8 ( 0x003C ) 
	int                                                Code_Whizby;                                      		// 0x0B04 ( 0x0004 ) 
	int                                                Code_GotMedal;                                    		// 0x0B08 ( 0x0004 ) 
	int                                                Code_GotMedalAlly;                                		// 0x0B0C ( 0x0004 ) 
	int                                                Code_GotMedalEnemy;                               		// 0x0B10 ( 0x0004 ) 
	int                                                Code_MouseSenseChange;                            		// 0x0B14 ( 0x0004 ) 
	int                                                Code_MouseSenseChangeAim;                         		// 0x0B18 ( 0x0004 ) 
	int                                                Code_WaitingCountDown;                            		// 0x0B1C ( 0x0004 ) 
	struct FString                                     AnnounceSuddenDeath;                              		// 0x0B20 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceTakingLead;                               		// 0x0B2C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceFallingBehind;                            		// 0x0B38 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceEndingWinning;                            		// 0x0B44 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceEndingLosing;                             		// 0x0B50 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceWin;                                      		// 0x0B5C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceLose;                                     		// 0x0B68 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSDAllyGotTheBomb;                         		// 0x0B74 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSDAllyLostTheBomb;                        		// 0x0B80 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSDIGotTheBomb;                            		// 0x0B8C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSDAllyBombDefused;                        		// 0x0B98 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSDEnemyBombDefused;                       		// 0x0BA4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSDAllyThrowTheBomb;                       		// 0x0BB0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTAllyGotTheBomb;                        		// 0x0BBC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTEnemyGotTheBomb;                       		// 0x0BC8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTIGotTheBomb;                           		// 0x0BD4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTAllyLostTheBomb;                       		// 0x0BE0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTAllyBombPlanted;                       		// 0x0BEC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTEnemyBombPlanted;                      		// 0x0BF8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTAllyBombDefused;                       		// 0x0C04 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceSBTEnemyBombDefused;                      		// 0x0C10 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMAllyCapturedAll;                       		// 0x0C1C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMEnemyCapturedAll;                      		// 0x0C28 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMAllyCapturingA;                        		// 0x0C34 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMAllyCapturingB;                        		// 0x0C40 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMAllyCapturingC;                        		// 0x0C4C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMEnemyCapturingA;                       		// 0x0C58 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMEnemyCapturingB;                       		// 0x0C64 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMEnemyCapturingC;                       		// 0x0C70 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMAllyCapturedA;                         		// 0x0C7C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMAllyCapturedB;                         		// 0x0C88 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMAllyCapturedC;                         		// 0x0C94 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMEnemyCapturedA;                        		// 0x0CA0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMEnemyCapturedB;                        		// 0x0CAC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceDOMEnemyCapturedC;                        		// 0x0CB8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceFFATakingLead;                            		// 0x0CC4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceFFAFallingBehind;                         		// 0x0CD0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceFFAEndingWinning;                         		// 0x0CDC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceFFAEndingLosing;                          		// 0x0CE8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceFFAWin;                                   		// 0x0CF4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceFFALose;                                  		// 0x0D00 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceRMC[ 0x09 ];                              		// 0x0D0C ( 0x006C ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceRMS[ 0x07 ];                              		// 0x0D78 ( 0x0054 ) [ CPF_NeedCtorLink ]
	struct FString                                     AnnounceRMR[ 0x08 ];                              		// 0x0DCC ( 0x0060 ) [ CPF_NeedCtorLink ]
	int                                                Code_RMC[ 0x09 ];                                 		// 0x0E2C ( 0x0024 ) 
	int                                                Code_RMS[ 0x07 ];                                 		// 0x0E50 ( 0x001C ) 
	int                                                Code_RMR[ 0x08 ];                                 		// 0x0E6C ( 0x0020 ) 
	int                                                Code_CantProne;                                   		// 0x0E8C ( 0x0004 ) 
	int                                                Code_PlayerWalking;                               		// 0x0E90 ( 0x0004 ) 
	int                                                Code_WinMatch;                                    		// 0x0E94 ( 0x0004 ) 
	int                                                Code_LoseMatch;                                   		// 0x0E98 ( 0x0004 ) 
	int                                                Code_SuddenDeath;                                 		// 0x0E9C ( 0x0004 ) 
	int                                                Code_OurUAVOnline;                                		// 0x0EA0 ( 0x0004 ) 
	int                                                Code_EnemyUAVOnline;                              		// 0x0EA4 ( 0x0004 ) 
	int                                                Code_TakingLead;                                  		// 0x0EA8 ( 0x0004 ) 
	int                                                Code_FallingBehind;                               		// 0x0EAC ( 0x0004 ) 
	int                                                Code_EndingWinning;                               		// 0x0EB0 ( 0x0004 ) 
	int                                                Code_EndingLosing;                                		// 0x0EB4 ( 0x0004 ) 
	int                                                Code_ContinueFromChangeHost;                      		// 0x0EB8 ( 0x0004 ) 
	int                                                Code_KilledHelicopter;                            		// 0x0EBC ( 0x0004 ) 
	int                                                Code_KilledFlyingDefeceBot;                       		// 0x0EC0 ( 0x0004 ) 
	int                                                Code_Win;                                         		// 0x0EC4 ( 0x0004 ) 
	int                                                Code_Lose;                                        		// 0x0EC8 ( 0x0004 ) 
	int                                                Code_SDAllyBombPlanted;                           		// 0x0ECC ( 0x0004 ) 
	int                                                Code_SDEnemyBombPlanted;                          		// 0x0ED0 ( 0x0004 ) 
	int                                                Code_SDAllyBombDefused;                           		// 0x0ED4 ( 0x0004 ) 
	int                                                Code_SDEnemyBombDefused;                          		// 0x0ED8 ( 0x0004 ) 
	int                                                Code_SDAllyGotTheBomb;                            		// 0x0EDC ( 0x0004 ) 
	int                                                Code_SDIGotTheBomb;                               		// 0x0EE0 ( 0x0004 ) 
	int                                                Code_SDAllyLostTheBomb;                           		// 0x0EE4 ( 0x0004 ) 
	int                                                Code_SBTAllyGotTheBomb;                           		// 0x0EE8 ( 0x0004 ) 
	int                                                Code_SBTEnemyGotTheBomb;                          		// 0x0EEC ( 0x0004 ) 
	int                                                Code_SBTIGotTheBomb;                              		// 0x0EF0 ( 0x0004 ) 
	int                                                Code_SBTAllyLostTheBomb;                          		// 0x0EF4 ( 0x0004 ) 
	int                                                Code_SBTAllyBombPlanted;                          		// 0x0EF8 ( 0x0004 ) 
	int                                                Code_SBTEnemyBombPlanted;                         		// 0x0EFC ( 0x0004 ) 
	int                                                Code_SBTAllyBombDefused;                          		// 0x0F00 ( 0x0004 ) 
	int                                                Code_SBTEnemyBombDefused;                         		// 0x0F04 ( 0x0004 ) 
	int                                                Code_SDAllyThrowTheBomb;                          		// 0x0F08 ( 0x0004 ) 
	int                                                Code_DOMAllyCapturedAll;                          		// 0x0F0C ( 0x0004 ) 
	int                                                Code_DOMEnemyCapturedAll;                         		// 0x0F10 ( 0x0004 ) 
	int                                                Code_DOMAllyCapturingA;                           		// 0x0F14 ( 0x0004 ) 
	int                                                Code_DOMAllyCapturingB;                           		// 0x0F18 ( 0x0004 ) 
	int                                                Code_DOMAllyCapturingC;                           		// 0x0F1C ( 0x0004 ) 
	int                                                Code_DOMEnemyCapturingA;                          		// 0x0F20 ( 0x0004 ) 
	int                                                Code_DOMEnemyCapturingB;                          		// 0x0F24 ( 0x0004 ) 
	int                                                Code_DOMEnemyCapturingC;                          		// 0x0F28 ( 0x0004 ) 
	int                                                Code_DOMAllyCapturedA;                            		// 0x0F2C ( 0x0004 ) 
	int                                                Code_DOMAllyCapturedB;                            		// 0x0F30 ( 0x0004 ) 
	int                                                Code_DOMAllyCapturedC;                            		// 0x0F34 ( 0x0004 ) 
	int                                                Code_DOMEnemyCapturedA;                           		// 0x0F38 ( 0x0004 ) 
	int                                                Code_DOMEnemyCapturedB;                           		// 0x0F3C ( 0x0004 ) 
	int                                                Code_DOMEnemyCapturedC;                           		// 0x0F40 ( 0x0004 ) 
	int                                                Code_FFATakingLead;                               		// 0x0F44 ( 0x0004 ) 
	int                                                Code_FFAFallingBehind;                            		// 0x0F48 ( 0x0004 ) 
	int                                                Code_FFAEndingWinning;                            		// 0x0F4C ( 0x0004 ) 
	int                                                Code_FFAEndingLosing;                             		// 0x0F50 ( 0x0004 ) 
	int                                                Code_FFAWin;                                      		// 0x0F54 ( 0x0004 ) 
	int                                                Code_FFALose;                                     		// 0x0F58 ( 0x0004 ) 
	struct FString                                     SoundOurTeamPlantedBomb;                          		// 0x0F5C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundEnemyPlantedBomb;                            		// 0x0F68 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSDAllyGotTheBomb;                            		// 0x0F74 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSDIGotTheBomb;                               		// 0x0F80 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSBTAllyGotTheBomb;                           		// 0x0F8C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSBTEnemyGotTheBomb;                          		// 0x0F98 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSBTIGotTheBomb;                              		// 0x0FA4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSBTAllyPlantedBomb;                          		// 0x0FB0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSBTEnemyPlantedBomb;                         		// 0x0FBC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSBTAllyBombDefused;                          		// 0x0FC8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundSBTEnemyBombDefused;                         		// 0x0FD4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundDOMAllyCaptured;                             		// 0x0FE0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundDOMEnemyCaptured;                            		// 0x0FEC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundWin;                                         		// 0x0FF8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SoundLose;                                        		// 0x1004 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PackageKor_AF;                                    		// 0x1010 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PackageKor_RSA;                                   		// 0x101C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PackageEng_AF;                                    		// 0x1028 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     PackageRus_RSA;                                   		// 0x1034 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              MessageRange;                                     		// 0x1040 ( 0x0004 ) 

	// UScript Functions
	 struct FString            GetSoundPackageByTeam ( int iTeam, int iLang );   		//  Engine.wMessage_Game.GetSoundPackageByTeam
	 bool                      GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game.GotoBTConsole
	 bool                      GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game.GotoHud
	 struct FString            GetPopMessageStr ( int Switch );                  		//  Engine.wMessage_Game.GetPopMessageStr
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wMessage_Game.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game.GetString
}; // Size: 0x0C04

// Class Engine.wGun
class DLL_IMPORT AwGun : public AwWeapon
{
public:
	struct FName                                       ReloadBeginAnim;                                  		// 0x0758 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       ReloadEndAnim;                                    		// 0x075C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       ReloadAnim;                                       		// 0x0760 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       ReloadEmptyAnim;                                  		// 0x0764 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bRechamber:1;                                     		// 0x0768 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	struct FName                                       RechamberAnim;                                    		// 0x076C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_RechamberAnim;                                		// 0x0770 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_UpAnim;                                       		// 0x0774 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_DownAnim;                                     		// 0x0778 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_IdleAnim;                                     		// 0x077C ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_Up_SprintAnim;                                		// 0x0780 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       Aim_Down_SprintAnim;                              		// 0x0784 ( 0x0004 ) [ CPF_Edit ]
	struct FName                                       PreAnim;                                          		// 0x0788 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     vPrePartsOffset;                                  		// 0x078C ( 0x000C ) [ CPF_Transient ]
	float                                              ReloadBeginAnimRate;                              		// 0x0798 ( 0x0004 ) [ CPF_Edit ]
	float                                              ReloadEndAnimRate;                                		// 0x079C ( 0x0004 ) [ CPF_Edit ]
	float                                              ReloadAnimRate;                                   		// 0x07A0 ( 0x0004 ) [ CPF_Edit ]
	float                                              ReloadEmptyAnimRate;                              		// 0x07A4 ( 0x0004 ) [ CPF_Edit ]
	float                                              RechamberAnimRate;                                		// 0x07A8 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_RechamberAnimRate;                            		// 0x07AC ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_UpAnimRate;                                   		// 0x07B0 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_DownAnimRate;                                 		// 0x07B4 ( 0x0004 ) [ CPF_Edit ]
	float                                              Aim_IdleAnimRate;                                 		// 0x07B8 ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      ShellCaseEmitterClass;                            		// 0x07BC ( 0x0004 ) 
	class AwEmitter*                                   ShellCaseEmitter;                                 		// 0x07C0 ( 0x0004 ) 
	class UClass*                                      ClipEmitterClass;                                 		// 0x07C4 ( 0x0004 ) 
	class AwEmitter*                                   ClipEmitter;                                      		// 0x07C8 ( 0x0004 ) 
	struct FVector                                     vDir_Aim;                                         		// 0x07CC ( 0x000C ) 
	unsigned long                                      bAimPending:1;                                    		// 0x07D8 ( 0x0004 )  [0x00000001]
	float                                              fFixedTime;                                       		// 0x07DC ( 0x0004 ) 
	unsigned char                                      AimState;                                         		// 0x07E0 ( 0x0001 ) 
	unsigned long                                      bSilencer:1;                                      		// 0x07E4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bHasDotSight:1;                                   		// 0x07E4 ( 0x0004 )  [0x00000002]
	unsigned char                                      ActionType;                                       		// 0x07E8 ( 0x0001 ) [ CPF_Edit ]
	unsigned long                                      bActioned:1;                                      		// 0x07EC ( 0x0004 )  [0x00000001]
	int                                                iMode_Magazine;                                   		// 0x07F0 ( 0x0004 ) 
	int                                                AmmoCharge_CurLoaded;                             		// 0x07F4 ( 0x0004 ) [ CPF_Net ]
	int                                                AmmoCharge_MaxLoaded;                             		// 0x07F8 ( 0x0004 ) 
	int                                                AmmoCharge_Reload;                                		// 0x07FC ( 0x0004 ) 
	int                                                AmmoCharge_CurAmmo;                               		// 0x0800 ( 0x0004 ) 
	unsigned char                                      ReloadState;                                      		// 0x0804 ( 0x0001 ) 
	struct FRotator                                    rBreathRot;                                       		// 0x0808 ( 0x000C ) 
	unsigned long                                      bBreathRotXLeft:1;                                		// 0x0814 ( 0x0004 )  [0x00000001]
	unsigned long                                      bBreathRotYUp:1;                                  		// 0x0814 ( 0x0004 )  [0x00000002]
	float                                              fBreathLastTime;                                  		// 0x0818 ( 0x0004 ) 
	unsigned long                                      bUseBreathRot:1;                                  		// 0x081C ( 0x0004 )  [0x00000001]
	float                                              wSwayDeltaTime;                                   		// 0x0820 ( 0x0004 ) 
	int                                                StateRechamber;                                   		// 0x0824 ( 0x0004 ) 
	struct FRotator                                    rSwayDestRot_Aim;                                 		// 0x0828 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rSwayRot_Aim;                                     		// 0x0834 ( 0x000C ) [ CPF_Transient ]
	struct FRotator                                    rSway_LastCameraRot_Aim;                          		// 0x0840 ( 0x000C ) [ CPF_Transient ]
	float                                              fSwayAccumTime_Pitch_Aim;                         		// 0x084C ( 0x0004 ) [ CPF_Transient ]
	float                                              fSwayAccumTime_Yaw_Aim;                           		// 0x0850 ( 0x0004 ) [ CPF_Transient ]
	struct FRotator                                    tmBone;                                           		// 0x0854 ( 0x000C ) 
	unsigned long                                      IsReadyFirebulletType:1;                          		// 0x0860 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 int                       GetCurMagazineAmmoCount (  );                     		// [ FUNC_Simulated ] Engine.wGun.GetCurMagazineAmmoCount
	 int                       GetCurTotalAmmoCount (  );                        		// [ FUNC_Simulated ] Engine.wGun.GetCurTotalAmmoCount
	 void                      ClientAddMagazine (  );                           		// [ FUNC_Simulated ] Engine.wGun.ClientAddMagazine
	 void                      ServerAddMagazine (  );                           		//  Engine.wGun.ServerAddMagazine
	 void                      Change3DScopeMesh (  );                           		// [ FUNC_Simulated ] Engine.wGun.Change3DScopeMesh
	 void                      CheckPartsSet (  );                               		// [ FUNC_Simulated ] Engine.wGun.CheckPartsSet
	 void                      SetAmmoAmount ( int Mode, int CurrentAmmo );      		//  Engine.wGun.SetAmmoAmount
	 void                      SetAmmoTotal ( int Mode, int TotalAmmo );         		//  Engine.wGun.SetAmmoTotal
	 void                      ClientWeaponThrown (  );                          		// [ FUNC_Simulated ] Engine.wGun.ClientWeaponThrown
	 void                      CalcBreathRot (  );                               		// [ FUNC_Simulated ] Engine.wGun.CalcBreathRot
	 void                      CalcBreathOffset (  );                            		// [ FUNC_Simulated ] Engine.wGun.CalcBreathOffset
	 void                      SetSprint ( bool bValue );                        		// [ FUNC_Simulated ] Engine.wGun.SetSprint
	 bool                      StartFire ( int Mode );                           		// [ FUNC_Simulated ] Engine.wGun.StartFire
	 void                      eventClientStartFire ( int Mode );                		// [ FUNC_Simulated | FUNC_Event ] Engine.wGun.ClientStartFire
	 struct FVector            GetEffectStart (  );                              		// [ FUNC_Simulated ] Engine.wGun.GetEffectStart
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.wGun.DisplayDebug
	 void                      SpawnShell (  );                                  		// [ FUNC_Simulated ] Engine.wGun.SpawnShell
	 void                      ServerSilencerAttached ( bool bEnabled );         		//  Engine.wGun.ServerSilencerAttached
	 void                      SilencerAttached ( bool bEnabled );               		// [ FUNC_Simulated ] Engine.wGun.SilencerAttached
	 void                      ApplyPartsParam ( struct FString strOption, struct FString strValue );		// [ FUNC_Simulated ] Engine.wGun.ApplyPartsParam
	 void                      SetAddPartsParams (  );                           		// [ FUNC_Simulated ] Engine.wGun.SetAddPartsParams
	 void                      ScopeAttached ( bool bEnabled );                  		// [ FUNC_Simulated ] Engine.wGun.ScopeAttached
	 void                      CalcSwayRot ( float fDeltaTime );                 		// [ FUNC_Simulated ] Engine.wGun.CalcSwayRot
	 void                      CalcSwayRot_Aim ( float fDeltaTime );             		// [ FUNC_Simulated ] Engine.wGun.CalcSwayRot_Aim
	 void                      CalcFiringSwayRot ( float fDeltaTime );           		// [ FUNC_Simulated ] Engine.wGun.CalcFiringSwayRot
	 void                      CalcFiringSwayRot_Aim ( float fDeltaTime );       		// [ FUNC_Simulated ] Engine.wGun.CalcFiringSwayRot_Aim
	 void                      CalcStanceOffset ( float fDelta );                		// [ FUNC_Simulated ] Engine.wGun.CalcStanceOffset
	 float                     CalcDestPivot (  );                               		// [ FUNC_Simulated ] Engine.wGun.CalcDestPivot
	 void                      CalcPartsOffset (  );                             		// [ FUNC_Simulated ] Engine.wGun.CalcPartsOffset
	 void                      SetAimDiff ( float InX, float InY, float InZ );   		// [ FUNC_Simulated ] Engine.wGun.SetAimDiff
	 bool                      HasDotSight (  );                                 		// [ FUNC_Simulated ] Engine.wGun.HasDotSight
	 void                      ApplyOffset (  );                                 		// [ FUNC_Simulated ] Engine.wGun.ApplyOffset
	 void                      ApplyOffset_Trans (  );                           		// [ FUNC_Simulated ] Engine.wGun.ApplyOffset_Trans
	 void                      ApplyOffset_Rot (  );                             		// [ FUNC_Simulated ] Engine.wGun.ApplyOffset_Rot
	 bool                      IsAiming (  );                                    		// [ FUNC_Simulated ] Engine.wGun.IsAiming
	 void                      eventRenderOverlays ( class UCanvas* Canvas );    		// [ FUNC_Simulated | FUNC_Event ] Engine.wGun.RenderOverlays
	 void                      RenderScope ( class UCanvas* Canv );              		// [ FUNC_Simulated ] Engine.wGun.RenderScope
	 void                      ForceRenderOverlays ( class UCanvas* Canv );      		// [ FUNC_Simulated ] Engine.wGun.ForceRenderOverlays
	 void                      FireOne ( int iFireMode );                        		// [ FUNC_Simulated ] Engine.wGun.FireOne
	 bool                      PutDown (  );                                     		// [ FUNC_Simulated ] Engine.wGun.PutDown
	 void                      BringUp ( class AwWeapon* PrevWeapon );           		// [ FUNC_Simulated ] Engine.wGun.BringUp
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.wGun.Destroyed
	 void                      SetResParams ( class UClass* wRes );              		// [ FUNC_Simulated ] Engine.wGun.SetResParams
	 void                      SetBaseParams ( class UwWeaponBaseParams* wBase );		// [ FUNC_Simulated ] Engine.wGun.SetBaseParams
	 void                      FillToDefaultAmmo (  );                           		// [ FUNC_Simulated ] Engine.wGun.FillToDefaultAmmo
	 void                      FillToInitialAmmo (  );                           		// [ FUNC_Simulated ] Engine.wGun.FillToInitialAmmo
	 void                      ReloadComplete (  );                              		// [ FUNC_Simulated ] Engine.wGun.ReloadComplete
	 void                      eventNotifyReloaded (  );                         		// [ FUNC_Simulated | FUNC_Event ] Engine.wGun.NotifyReloaded
	 void                      GetAmmoCount ( float* MaxAmmoPrimary, float* CurAmmoPrimary );		// [ FUNC_Simulated ] Engine.wGun.GetAmmoCount
	 void                      StoreAmmo (  );                                   		//  Engine.wGun.StoreAmmo
	 void                      ServerReload (  );                                		//  Engine.wGun.ServerReload
	 bool                      Reload (  );                                      		// [ FUNC_Simulated ] Engine.wGun.Reload
	 void                      ProcessMoveAni (  );                              		// [ FUNC_Simulated ] Engine.wGun.ProcessMoveAni
	 void                      PlayIdle (  );                                    		// [ FUNC_Simulated ] Engine.wGun.PlayIdle
	 void                      ForcePlayIdle (  );                               		// [ FUNC_Simulated ] Engine.wGun.ForcePlayIdle
	 void                      AnimEnd ( int Channel );                          		// [ FUNC_Simulated ] Engine.wGun.AnimEnd
	 void                      OutOfAmmo (  );                                   		// [ FUNC_Simulated ] Engine.wGun.OutOfAmmo
	 bool                      CheckOutOfAmmo (  );                              		// [ FUNC_Simulated ] Engine.wGun.CheckOutOfAmmo
	 bool                      CheckActioned (  );                               		// [ FUNC_Simulated ] Engine.wGun.CheckActioned
	 bool                      SeverConsumeAmmo ( int Mode, float Load, bool bAmountNeededIsMax );		//  Engine.wGun.SeverConsumeAmmo
	 void                      ClientForceAmmoUpdate ( int Mode, int NewAmount );		// [ FUNC_Simulated ] Engine.wGun.ClientForceAmmoUpdate
	 int                       AmmoAmount ( int Mode );                          		// [ FUNC_Simulated ] Engine.wGun.AmmoAmount
	 bool                      IsReloading (  );                                 		// [ FUNC_Simulated ] Engine.wGun.IsReloading
	 unsigned char             IsRechambering (  );                              		// [ FUNC_Simulated ] Engine.wGun.IsRechambering
	 void                      ServerAim ( bool bValue );                        		//  Engine.wGun.ServerAim
	 void                      PlayAim ( bool bUpOrDown );                       		// [ FUNC_Simulated ] Engine.wGun.PlayAim
	 bool                      eventReadyToFire ( int Mode );                    		// [ FUNC_Simulated | FUNC_Event ] Engine.wGun.ReadyToFire
	 bool                      CheckAim (  );                                    		// [ FUNC_Simulated ] Engine.wGun.CheckAim
	 void                      SetAim ( bool bAim );                             		// [ FUNC_Simulated ] Engine.wGun.SetAim
	 void                      eventWeaponTick ( float dt );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.wGun.WeaponTick
	 void                      ServerMeleeFire (  );                             		//  Engine.wGun.ServerMeleeFire
	 void                      ResetAim (  );                                    		// [ FUNC_Simulated ] Engine.wGun.ResetAim
	 void                      ClientMeleeFire (  );                             		// [ FUNC_Simulated ] Engine.wGun.ClientMeleeFire
	 void                      ActiveMeleeDelay (  );                            		// [ FUNC_Simulated ] Engine.wGun.ActiveMeleeDelay
	 void                      SetActioned (  );                                 		// [ FUNC_Simulated ] Engine.wGun.SetActioned
	 void                      SetUnactioned (  );                               		// [ FUNC_Simulated ] Engine.wGun.SetUnactioned
}; // Size: 0x010C

// Class Engine.wSkillBase
class DLL_IMPORT UwSkillBase : public UObject
{
public:
	class TArray< class UwSkill* >                     Skills;                                           		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	class AController*                                 Owner;                                            		// 0x0038 ( 0x0004 ) 
	unsigned long                                      bAddStamina:1;                                    		// 0x003C ( 0x0004 )  [0x00000001]
	unsigned long                                      bIncExplosion:1;                                  		// 0x003C ( 0x0004 )  [0x00000002]
	unsigned long                                      bQuickRespawn:1;                                  		// 0x003C ( 0x0004 )  [0x00000004]
	unsigned long                                      bQuickDemolition:1;                               		// 0x003C ( 0x0004 )  [0x00000008]
	unsigned long                                      bBombDetection:1;                                 		// 0x003C ( 0x0004 )  [0x00000010]
	unsigned long                                      bIncHealthPack:1;                                 		// 0x003C ( 0x0004 )  [0x00000020]

	// UScript Functions
	 void                      UseSupplyItem ( unsigned char byType );           		// [ FUNC_Simulated ] Engine.wSkillBase.UseSupplyItem
	 void                      AddSupplyItem ( unsigned char byType );           		// [ FUNC_Simulated ] Engine.wSkillBase.AddSupplyItem
	 void                      UsedbyWeapon ( int iWeaponID );                   		// [ FUNC_Simulated ] Engine.wSkillBase.UsedbyWeapon
	 void                      RemoveSkill ( int iSkillID, class UwGameManager* gm );		// [ FUNC_Simulated ] Engine.wSkillBase.RemoveSkill
	 void                      AddSkill ( int iSkillID, class UwGameManager* gm );		// [ FUNC_Simulated ] Engine.wSkillBase.AddSkill
	 void                      ResetSkillState (  );                             		// [ FUNC_Simulated ] Engine.wSkillBase.ResetSkillState
	 void                      DeadPlayer (  );                                  		// [ FUNC_Simulated ] Engine.wSkillBase.DeadPlayer
	 void                      UpdateProcess (  );                               		// [ FUNC_Simulated ] Engine.wSkillBase.UpdateProcess
	 void                      ForceResetSkillUpdateCall (  );                   		// [ FUNC_Simulated ] Engine.wSkillBase.ForceResetSkillUpdateCall
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wSkillBase.PostBeginPlay
}; // Size: 0x0014

// Class Engine.BroadcastHandler
class DLL_IMPORT ABroadcastHandler : public AInfo
{
public:
	class ABroadcastHandler*                           NextBroadcastHandler;                             		// 0x041C ( 0x0004 ) 
	class UClass*                                      NextBroadcastHandlerClass;                        		// 0x0420 ( 0x0004 ) 
	int                                                SentText;                                         		// 0x0424 ( 0x0004 ) 
	unsigned long                                      bMuteSpectators:1;                                		// 0x0428 ( 0x0004 )  [0x00000001]
	unsigned long                                      bPartitionSpectators:1;                           		// 0x0428 ( 0x0004 )  [0x00000002]
	struct FString                                     BHDisplayText[ 0x02 ];                            		// 0x042C ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BHDescText[ 0x02 ];                               		// 0x0444 ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] Engine.BroadcastHandler.Destroyed
	 bool                      AcceptBroadcastVoice ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI );		//  Engine.BroadcastHandler.AcceptBroadcastVoice
	 bool                      AcceptBroadcastSpeech ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI );		//  Engine.BroadcastHandler.AcceptBroadcastSpeech
	 bool                      AcceptBroadcastLocalized ( class APlayerController* Receiver, class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* obj );		//  Engine.BroadcastHandler.AcceptBroadcastLocalized
	 bool                      AcceptBroadcastText ( class APlayerController* Receiver, class APlayerReplicationInfo* SenderPRI, struct FName Type, struct FString* Msg );		//  Engine.BroadcastHandler.AcceptBroadcastText
	 void                      RegisterBroadcastHandler ( class ABroadcastHandler* NewBH );		//  Engine.BroadcastHandler.RegisterBroadcastHandler
	 void                      eventAllowBroadcastLocalized ( class AActor* Sender, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Event ] Engine.BroadcastHandler.AllowBroadcastLocalized
	 void                      BroadcastTeam ( class AController* Sender, struct FString Msg, struct FName Type, unsigned char mType );		//  Engine.BroadcastHandler.BroadcastTeam
	 void                      Broadcast ( class AActor* Sender, struct FString Msg, struct FName Type, unsigned char mType );		//  Engine.BroadcastHandler.Broadcast
	 void                      BroadcastLocalized ( class AActor* Sender, class APlayerController* Receiver, class UClass* Message, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.BroadcastHandler.BroadcastLocalized
	 void                      BroadcastText ( class APlayerReplicationInfo* SenderPRI, class APlayerController* Receiver, struct FString Msg, struct FName Type );		//  Engine.BroadcastHandler.BroadcastText
	 bool                      HandlerAllowsBroadcast ( class AActor* broadcaster, int SentTextNum );		//  Engine.BroadcastHandler.HandlerAllowsBroadcast
	 bool                      AllowsBroadcast ( class AActor* broadcaster, int Len );		//  Engine.BroadcastHandler.AllowsBroadcast
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] Engine.BroadcastHandler.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  Engine.BroadcastHandler.FillPlayInfo
	 void                      UpdateSentText (  );                              		//  Engine.BroadcastHandler.UpdateSentText
}; // Size: 0x0040

// Class Engine.wDamageType
class DLL_IMPORT AwDamageType : public ADamageType
{
public:
}; // Size: 0x0000

// Class Engine.wDamageAirStrike
class DLL_IMPORT AwDamageAirStrike : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.wDamageHelicopter
class DLL_IMPORT AwDamageHelicopter : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.VotingReplicationInfoBase
class DLL_IMPORT AVotingReplicationInfoBase : public AReplicationInfo
{
public:
	struct FScriptDelegate                             __ProcessCommand__Delegate;                       		// 0x041C ( 0x0008 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __ProcessResponse__Delegate;                      		// 0x0424 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      MatchSetupEnabled (  );                           		// [ FUNC_Simulated ] Engine.VotingReplicationInfoBase.MatchSetupEnabled
	 bool                      KickVoteEnabled (  );                             		// [ FUNC_Simulated ] Engine.VotingReplicationInfoBase.KickVoteEnabled
	 bool                      MapVoteEnabled (  );                              		// [ FUNC_Simulated ] Engine.VotingReplicationInfoBase.MapVoteEnabled
	 bool                      MatchSetupLocked (  );                            		// [ FUNC_Simulated ] Engine.VotingReplicationInfoBase.MatchSetupLocked
	 void                      SendResponse ( struct FString Response );         		// [ FUNC_Simulated ] Engine.VotingReplicationInfoBase.SendResponse
	 void                      SendCommand ( struct FString Cmd );               		//  Engine.VotingReplicationInfoBase.SendCommand
	 void                      ProcessResponse ( struct FString Response );      		//  Engine.VotingReplicationInfoBase.ProcessResponse
	 void                      ProcessCommand ( struct FString Command );        		//  Engine.VotingReplicationInfoBase.ProcessCommand
}; // Size: 0x0010

// Class Engine.ScoreBoard
class DLL_IMPORT AScoreBoard : public AInfo
{
public:
	class AGameReplicationInfo*                        GRI;                                              		// 0x041C ( 0x0004 ) [ CPF_Edit ]
	class UClass*                                      HudClass;                                         		// 0x0420 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      bDisplayMessages:1;                               		// 0x0424 ( 0x0004 )  [0x00000001]
	class AHUD*                                        HudOwner;                                         		// 0x0428 ( 0x0004 ) 

	// UScript Functions
	 void                      NextStats (  );                                   		//  Engine.ScoreBoard.NextStats
	 void                      SortPRIArray (  );                                		// [ FUNC_Simulated ] Engine.ScoreBoard.SortPRIArray
	 bool                      InOrder ( class APlayerReplicationInfo* P1, class APlayerReplicationInfo* P2 );		// [ FUNC_Simulated ] Engine.ScoreBoard.InOrder
	 void                      UpdateScoreBoard ( class UCanvas* Canvas );       		// [ FUNC_Simulated ] Engine.ScoreBoard.UpdateScoreBoard
	 struct FString            FormatTime ( int Seconds );                       		// [ FUNC_Simulated ] Engine.ScoreBoard.FormatTime
	 bool                      UpdateGRI (  );                                   		//  Engine.ScoreBoard.UpdateGRI
	 void                      eventDrawMiniMap ( class UCanvas* C );            		// [ FUNC_Simulated | FUNC_Event ] Engine.ScoreBoard.DrawMiniMap
	 void                      eventDrawGMUserBoard ( class UCanvas* C );        		// [ FUNC_Simulated | FUNC_Event ] Engine.ScoreBoard.DrawGMUserBoard
	 void                      eventDrawScoreboard ( class UCanvas* C );         		// [ FUNC_Simulated | FUNC_Event ] Engine.ScoreBoard.DrawScoreboard
	 void                      Init (  );                                        		// [ FUNC_Simulated ] Engine.ScoreBoard.Init
	 struct FString            InitTitle (  );                                   		// [ FUNC_Simulated ] Engine.ScoreBoard.InitTitle
	 void                      InitGRI (  );                                     		// [ FUNC_Simulated ] Engine.ScoreBoard.InitGRI
	 class UFont*              GetSmallFontFor ( int ScreenWidth, int offset );  		//  Engine.ScoreBoard.GetSmallFontFor
	 bool                      HaveHalfFont ( class UCanvas* Canvas, int offset );		//  Engine.ScoreBoard.HaveHalfFont
	 class UFont*              GetSmallerFontFor ( class UCanvas* Canvas, int offset );		//  Engine.ScoreBoard.GetSmallerFontFor
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.ScoreBoard.PostBeginPlay
}; // Size: 0x0010

// Class Engine.AccessControl
class DLL_IMPORT AAccessControl : public AInfo
{
public:
	class UwAdminUserList*                             Users;                                            		// 0x041C ( 0x0004 ) 
	class UwAdminGroupList*                            Groups;                                           		// 0x0420 ( 0x0004 ) 
	class TArray< struct FAdminPlayer >                LoggedAdmins;                                     		// 0x0424 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UClass* >                      PrivClasses;                                      		// 0x0430 ( 0x000C ) [ CPF_Config | CPF_NeedCtorLink ]
	class TArray< class UwPrivilegeBase* >             PrivManagers;                                     		// 0x043C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AllPrivs;                                         		// 0x0448 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     IPPolicies;                                       		// 0x0454 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     IPBanned;                                         		// 0x0460 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WrongPassword;                                    		// 0x046C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     NeedPassword;                                     		// 0x0478 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SessionBanned;                                    		// 0x0484 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     KickedMsg;                                        		// 0x0490 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DefaultKickReason;                                		// 0x049C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     IdleKickReason;                                   		// 0x04A8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class UClass*                                      AdminClass;                                       		// 0x04B4 ( 0x0004 ) 
	unsigned long                                      bReplyToGUI:1;                                    		// 0x04B8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bDontAddDefaultAdmin:1;                           		// 0x04B8 ( 0x0004 )  [0x00000002]
	struct FString                                     AdminName;                                        		// 0x04BC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AdminPassword;                                    		// 0x04C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GamePassword;                                     		// 0x04D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              LoginDelaySeconds;                                		// 0x04E0 ( 0x0004 ) 
	unsigned long                                      bBanByID:1;                                       		// 0x04E4 ( 0x0004 )  [0x00000001]
	class TArray< struct FString >                     BannedIDs;                                        		// 0x04E8 ( 0x000C ) [ CPF_Config | CPF_GlobalConfig | CPF_NeedCtorLink ]
	class TArray< struct FString >                     SessionIPPolicies;                                		// 0x04F4 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	class TArray< struct FString >                     SessionBannedIDs;                                 		// 0x0500 ( 0x000C ) [ CPF_Transient | CPF_NeedCtorLink ]
	struct FString                                     ACDisplayText[ 0x04 ];                            		// 0x050C ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ACDescText[ 0x04 ];                               		// 0x053C ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 int                       CheckID ( struct FString CDHash );                		//  Engine.AccessControl.CheckID
	 struct FString            eventGetDescriptionText ( struct FString PropName );		// [ FUNC_Event ] Engine.AccessControl.GetDescriptionText
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  Engine.AccessControl.FillPlayInfo
	 bool                      AllowPriv ( struct FString priv );                		//  Engine.AccessControl.AllowPriv
	 bool                      CanPerform ( class APlayerController* P, struct FString Action );		//  Engine.AccessControl.CanPerform
	 int                       CheckIPPolicy ( struct FString Address, bool bSilent );		//  Engine.AccessControl.CheckIPPolicy
	 void                      eventPreLogin ( struct FString Options, struct FString Address, struct FString PlayerID, bool bSpectator, struct FString* Error, struct FString* FailCode );		// [ FUNC_Event ] Engine.AccessControl.PreLogin
	 class UwAdminUser*        GetUser ( struct FString uname );                 		//  Engine.AccessControl.GetUser
	 class UwAdminUser*        GetLoggedAdmin ( class APlayerController* P );    		//  Engine.AccessControl.GetLoggedAdmin
	 bool                      ValidLogin ( struct FString UserName, struct FString Password );		//  Engine.AccessControl.ValidLogin
	 bool                      CheckOptionsAdmin ( struct FString Options );     		//  Engine.AccessControl.CheckOptionsAdmin
	 bool                      KickBanPlayer ( class APlayerController* P );     		//  Engine.AccessControl.KickBanPlayer
	 bool                      BanPlayer ( class APlayerController* C, bool bSession );		//  Engine.AccessControl.BanPlayer
	 bool                      KickPlayer ( class APlayerController* C );        		//  Engine.AccessControl.KickPlayer
	 void                      KickBan ( struct FString S );                     		//  Engine.AccessControl.KickBan
	 void                      SessionKickBan ( struct FString S );              		//  Engine.AccessControl.SessionKickBan
	 void                      Kick ( struct FString S );                        		//  Engine.AccessControl.Kick
	 struct FString            GetAdminName ( class APlayerController* PC );     		//  Engine.AccessControl.GetAdminName
	 class UwAdminUser*        GetAdmin ( class APlayerController* PC );         		//  Engine.AccessControl.GetAdmin
	 bool                      RequiresPassword (  );                            		//  Engine.AccessControl.RequiresPassword
	 void                      SetGamePassword ( struct FString P );             		//  Engine.AccessControl.SetGamePassword
	 bool                      SetAdminPassword ( struct FString P );            		//  Engine.AccessControl.SetAdminPassword
	 void                      SetAdminFromURL ( struct FString N, struct FString P );		//  Engine.AccessControl.SetAdminFromURL
	 bool                      IsAdmin ( class APlayerController* P );           		//  Engine.AccessControl.IsAdmin
	 void                      AdminExited ( class APlayerController* P );       		//  Engine.AccessControl.AdminExited
	 void                      AdminEntered ( class APlayerController* P, struct FString UserName );		//  Engine.AccessControl.AdminEntered
	 bool                      AdminLogout ( class APlayerController* P );       		//  Engine.AccessControl.AdminLogout
	 bool                      AdminLogin ( class APlayerController* P, struct FString UserName, struct FString Password );		//  Engine.AccessControl.AdminLogin
	 void                      SaveAdmins (  );                                  		//  Engine.AccessControl.SaveAdmins
	 void                      InitPrivs (  );                                   		//  Engine.AccessControl.InitPrivs
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.AccessControl.PreBeginPlay
}; // Size: 0x0150

// Class Engine.XBoxPlayerInput
class DLL_IMPORT UXBoxPlayerInput : public UPlayerInput
{
public:
	float                                              HScale;                                           		// 0x0090 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	float                                              HExponent;                                        		// 0x0094 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	float                                              HLookRateMax;                                     		// 0x0098 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	float                                              VScale;                                           		// 0x009C ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	float                                              VExponent;                                        		// 0x00A0 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	float                                              VLookRateMax;                                     		// 0x00A4 ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	unsigned long                                      bInvertVLook:1;                                   		// 0x00A8 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Config ]
	unsigned long                                      bLookSpring:1;                                    		// 0x00A8 ( 0x0004 )  [0x00000002][ CPF_Edit | CPF_Config ]
	float                                              HLook;                                            		// 0x00AC ( 0x0004 ) [ CPF_Edit ]
	float                                              VLook;                                            		// 0x00B0 ( 0x0004 ) [ CPF_Edit ]
	float                                              abx;                                              		// 0x00B4 ( 0x0004 ) [ CPF_Edit ]
	float                                              abz;                                              		// 0x00B8 ( 0x0004 ) [ CPF_Edit ]
	float                                              wfor;                                             		// 0x00BC ( 0x0004 ) [ CPF_Edit ]
	float                                              wstr;                                             		// 0x00C0 ( 0x0004 ) [ CPF_Edit ]
	float                                              wafor;                                            		// 0x00C4 ( 0x0004 ) [ CPF_Edit ]
	float                                              wastr;                                            		// 0x00C8 ( 0x0004 ) [ CPF_Edit ]
	struct FLookPreset                                 LookPresets[ 0x04 ];                              		// 0x00CC ( 0x0070 ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	struct FString                                     SelectedPresetName;                               		// 0x013C ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	float                                              VelScale;                                         		// 0x0148 ( 0x0004 ) [ CPF_Edit ]
	float                                              AccelScale;                                       		// 0x014C ( 0x0004 ) [ CPF_Edit ]
	float                                              DampeningFactor;                                  		// 0x0150 ( 0x0004 ) [ CPF_Edit ]
	float                                              MinAccelComponent;                                		// 0x0154 ( 0x0004 ) [ CPF_Edit ]
	float                                              ForwardFilter[ 0x04 ];                            		// 0x0158 ( 0x0010 ) [ CPF_Edit ]
	float                                              StrafeFilter[ 0x04 ];                             		// 0x0168 ( 0x0010 ) [ CPF_Edit ]

	// UScript Functions
	 bool                      InvertLook (  );                                  		//  Engine.XBoxPlayerInput.InvertLook
	 float                     FilterOutput ( float output, float* filter );     		//  Engine.XBoxPlayerInput.FilterOutput
	 float                     sign ( float in );                                		//  Engine.XBoxPlayerInput.sign
	 float                     GetComponentAccel ( float Input, struct FVector Dir, float dt, bool blog, float* filter );		//  Engine.XBoxPlayerInput.GetComponentAccel
	 void                      VelToAccel ( float dt );                          		//  Engine.XBoxPlayerInput.VelToAccel
	 float                     Remap ( float in, float Scale, float Exp, float ratemax );		//  Engine.XBoxPlayerInput.Remap
	 void                      PlayerInput ( float DeltaTime );                  		//  Engine.XBoxPlayerInput.PlayerInput
}; // Size: 0x00E8

// Class Engine.wGameStateStorageGetter
class DLL_IMPORT UwGameStateStorageGetter : public UObject
{
public:

	// UScript Functions
	 void                      GetUserSkillState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC );		//  Engine.wGameStateStorageGetter.GetUserSkillState
	 void                      GetUserWeaponState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC );		//  Engine.wGameStateStorageGetter.GetUserWeaponState
	 void                      GetUserVehicle ( class AwGameStateStorageSender* GSSS, class APlayerController* PC );		//  Engine.wGameStateStorageGetter.GetUserVehicle
	 void                      GetUserScoreState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC );		//  Engine.wGameStateStorageGetter.GetUserScoreState
	 void                      GetUserState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC );		//  Engine.wGameStateStorageGetter.GetUserState
	 void                      GetUserSupplyState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC );		//  Engine.wGameStateStorageGetter.GetUserSupplyState
	 void                      GetUserQSlotState ( class AwGameStateStorageSender* GSSS, class APlayerController* PC );		//  Engine.wGameStateStorageGetter.GetUserQSlotState
}; // Size: 0x0000

// Class Engine.wGameSettings
class DLL_IMPORT UwGameSettings : public UObject
{
public:
	struct FString                                     TeamGame_UserFriendlyName;                        		// 0x002C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TeamGame_ModeDescription;                         		// 0x0038 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     TeamGame_TimeLimits;                              		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     TeamGame_Scores;                                  		// 0x0050 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     TeamGame_Scores_DefaultTimeLimits;                		// 0x005C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     TeamGame_ScoreDefault;                            		// 0x0068 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_TeamGame_TimeLimits;                          		// 0x0074 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_TeamGame_Scores;                              		// 0x0080 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_TeamGame_Scores_DefaultTimeLimits;            		// 0x008C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Bot_TeamGame_ScoreDefault;                        		// 0x0098 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Domination_UserFriendlyName;                      		// 0x00A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Domination_ModeDescription;                       		// 0x00B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Domination_TimeLimits;                            		// 0x00BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Domination_Scores;                                		// 0x00C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Domination_Scores_DefaultTimeLimits;              		// 0x00D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Domination_ScoreDefault;                          		// 0x00E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_Domination_TimeLimits;                        		// 0x00EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_Domination_Scores;                            		// 0x00F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_Domination_Scores_DefaultTimeLimits;          		// 0x0104 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Bot_Domination_ScoreDefault;                      		// 0x0110 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SD_UserFriendlyName;                              		// 0x011C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SD_ModeDescription;                               		// 0x0128 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     SD_TimeLimits;                                    		// 0x0134 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     SD_Scores;                                        		// 0x0140 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     SD_Scores_DefaultTimeLimits;                      		// 0x014C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SD_ScoreDefault;                                  		// 0x0158 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DOA_UserFriendlyName;                             		// 0x0164 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DOA_ModeDescription;                              		// 0x0170 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     DOA_TimeLimits;                                   		// 0x017C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     DOA_Scores;                                       		// 0x0188 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     DOA_Scores_DefaultTimeLimits;                     		// 0x0194 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DOA_ScoreDefault;                                 		// 0x01A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                DOA_UserCount;                                    		// 0x01AC ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                DOA_UserCount_Default;                            		// 0x01B8 ( 0x0004 ) 
	struct FString                                     SBT_UserFriendlyName;                             		// 0x01BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SBT_ModeDescription;                              		// 0x01C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     SBT_TimeLimits;                                   		// 0x01D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     SBT_Scores;                                       		// 0x01E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     SBT_Scores_DefaultTimeLimits;                     		// 0x01EC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SBT_ScoreDefault;                                 		// 0x01F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     COL_UserFriendlyName;                             		// 0x0204 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     COL_ModeDescription;                              		// 0x0210 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     COL_TimeLimits;                                   		// 0x021C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     COL_Scores;                                       		// 0x0228 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     COL_Scores_DefaultTimeLimits;                     		// 0x0234 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     COL_ScoreDefault;                                 		// 0x0240 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Medal_UserFriendlyName;                           		// 0x024C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Medal_ModeDescription;                            		// 0x0258 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Medal_TimeLimits;                                 		// 0x0264 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Medal_Scores;                                     		// 0x0270 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Medal_Scores_DefaultTimeLimits;                   		// 0x027C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Medal_ScoreDefault;                               		// 0x0288 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Medal_UserCount;                                  		// 0x0294 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Medal_UserCount_Default;                          		// 0x02A0 ( 0x0004 ) 
	struct FString                                     Deathmatch_UserFriendlyName;                      		// 0x02A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DeathMatch_ModeDescription;                       		// 0x02B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Deathmatch_TimeLimits;                            		// 0x02BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Deathmatch_Scores;                                		// 0x02C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Deathmatch_Scores_DefaultTimeLimits;              		// 0x02D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Deathmatch_ScoreDefault;                          		// 0x02E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_Deathmatch_TimeLimits;                        		// 0x02EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_Deathmatch_Scores;                            		// 0x02F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Bot_Deathmatch_Scores_DefaultTimeLimits;          		// 0x0304 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Bot_Deathmatch_ScoreDefault;                      		// 0x0310 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     TeamGameAI_UserFriendlyName;                      		// 0x031C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DominationAI_UserFriendlyName;                    		// 0x0328 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DeathMatchAI_UserFriendlyName;                    		// 0x0334 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TeamGameBeginnerAI_UserFriendlyName;              		// 0x0340 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     TeamGameBeginner_ModeDescription;                 		// 0x034C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Tutorial_UserFriendlyName;                        		// 0x0358 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Tutorial_ModeDescription;                         		// 0x0364 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Tutorial_TimeLimits;                              		// 0x0370 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Tutorial_Scores;                                  		// 0x037C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Tutorial_Scores_DefaultTimeLimits;                		// 0x0388 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Tutorial_ScoreDefault;                            		// 0x0394 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Tutorial_UserCount;                               		// 0x03A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Tutorial_UserCount_Default;                       		// 0x03AC ( 0x0004 ) 
	struct FString                                     Defence_UserFriendlyName;                         		// 0x03B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Defence_ModeDescription;                          		// 0x03BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Defence_TimeLimits;                               		// 0x03C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Defence_Scores;                                   		// 0x03D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Defence_Scores_DefaultTimeLimits;                 		// 0x03E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Defence_ScoreDefault;                             		// 0x03EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Defence_UserCount;                                		// 0x03F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Defence_UserCount_Default;                        		// 0x0404 ( 0x0004 ) 
	struct FString                                     Invader_UserFriendlyName;                         		// 0x0408 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     Invader_ModeDescription;                          		// 0x0414 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Invader_TimeLimits;                               		// 0x0420 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Invader_Scores;                                   		// 0x042C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Invader_Scores_DefaultTimeLimits;                 		// 0x0438 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Invader_ScoreDefault;                             		// 0x0444 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Invader_UserCount;                                		// 0x0450 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Invader_UserCount_Default;                        		// 0x045C ( 0x0004 ) 
	class TArray< struct FString >                     Capacities;                                       		// 0x0460 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     CapacityDefault;                                  		// 0x046C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                UserCount;                                        		// 0x0478 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                UserCount_Default;                                		// 0x0484 ( 0x0004 ) 
	class TArray< int >                                Domination_UserCount;                             		// 0x0488 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Domination_UserCount_Default;                     		// 0x0494 ( 0x0004 ) 
	class TArray< int >                                SD_UserCount;                                     		// 0x0498 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                SD_UserCount_Default;                             		// 0x04A4 ( 0x0004 ) 
	class TArray< int >                                DeathMatch_UserCount;                             		// 0x04A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                DeathMatch_UserCount_Default;                     		// 0x04B4 ( 0x0004 ) 
	class TArray< int >                                Bot_UserCount;                                    		// 0x04B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Bot_UserCount_Default;                            		// 0x04C4 ( 0x0004 ) 
	class TArray< int >                                Bot_DeathMatch_UserCount;                         		// 0x04C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Bot_DeathMatch_UserCount_Default;                 		// 0x04D4 ( 0x0004 ) 
	class TArray< struct FString >                     Hardcores;                                        		// 0x04D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     HardcoreDefault;                                  		// 0x04E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DefaultMap;                                       		// 0x04F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DefaultGameModeClass;                             		// 0x04FC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SBTGameModeClass;                                 		// 0x0508 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SDGameModeClass;                                  		// 0x0514 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     TeamDeathGameModeClass;                           		// 0x0520 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DominationGameModeClass;                          		// 0x052C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FreeForAllGameModeClass;                          		// 0x0538 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     COLGameModeClass;                                 		// 0x0544 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Bot_TeamDeathModeClass;                           		// 0x0550 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Bot_DominationGameModeClass;                      		// 0x055C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Bot_FreeForAllGameModeClass;                      		// 0x0568 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DefenceGameModeClass;                             		// 0x0574 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     BotModeDesc_AF;                                   		// 0x0580 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BotModeDesc_RSA;                                  		// 0x058C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     BotModeDesc_AFvsRSA;                              		// 0x0598 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< int >                                BotNum0_Default;                                  		// 0x05A4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                BotNum1_Default;                                  		// 0x05B0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                BotUserTeam_Default;                              		// 0x05BC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                BotDifficulty_Default;                            		// 0x05C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_All;                            		// 0x05D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_KnifeOnly;                      		// 0x05E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_PistolOnly;                     		// 0x05EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_GrenadeOnly;                    		// 0x05F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_RPGOnly;                        		// 0x0604 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_SROnly;                         		// 0x0610 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_SRBan;                          		// 0x061C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_FlameThrower;                   		// 0x0628 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_ShotgunOnly;                    		// 0x0634 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     WeaponRestriction_MGOnly;                         		// 0x0640 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     RespawnType[ 0x02 ];                              		// 0x064C ( 0x0018 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            GetRespawnTypeByIndex ( int Index );              		//  Engine.wGameSettings.GetRespawnTypeByIndex
	 class TArray< int >       GetGameModeDispOrder (  );                        		//  Engine.wGameSettings.GetGameModeDispOrder
	 bool                      IsAllowedWeaponRest ( int Index );                		//  Engine.wGameSettings.IsAllowedWeaponRest
	 class TArray< struct FString > GetWeaponRestrictions (  );                       		//  Engine.wGameSettings.GetWeaponRestrictions
	 class TArray< struct FString > GetBotModeTeam ( int BotModeIdx );                		//  Engine.wGameSettings.GetBotModeTeam
	 struct FString            GetBotModeTeamByIndex ( int Index );              		//  Engine.wGameSettings.GetBotModeTeamByIndex
	 struct FString            GetWeaponRestrictionByIndex ( int Index );        		//  Engine.wGameSettings.GetWeaponRestrictionByIndex
	 struct FString            GetDefaultScore ( struct FString ClassName );     		//  Engine.wGameSettings.GetDefaultScore
	 struct FString            GetDefaultScore_ModeNum ( int ModeNum );          		//  Engine.wGameSettings.GetDefaultScore_ModeNum
	 struct FString            GetDefaultTimeLimit ( struct FString ClassName, struct FString Score );		//  Engine.wGameSettings.GetDefaultTimeLimit
	 struct FString            GetDefaultTimeLimit_ModeNum ( int ModeNum, struct FString Score );		//  Engine.wGameSettings.GetDefaultTimeLimit_ModeNum
	 class TArray< struct FGameModeInfo > GetAllGameModesAtServiceBuild (  );               		//  Engine.wGameSettings.GetAllGameModesAtServiceBuild
	 class TArray< struct FGameModeInfo > GetAllGameModes (  );                             		//  Engine.wGameSettings.GetAllGameModes
	 int                       GetModeCount (  );                                		//  Engine.wGameSettings.GetModeCount
	 int                       GetModeIndex_Alien (  );                          		//  Engine.wGameSettings.GetModeIndex_Alien
	 int                       GetModeIndex_DOA (  );                            		//  Engine.wGameSettings.GetModeIndex_DOA
	 int                       GetModeIndex_Defence (  );                        		//  Engine.wGameSettings.GetModeIndex_Defence
	 int                       GetModeIndex_BotTeamDeathBeginner (  );           		//  Engine.wGameSettings.GetModeIndex_BotTeamDeathBeginner
	 int                       GetModeIndex_COL (  );                            		//  Engine.wGameSettings.GetModeIndex_COL
	 int                       GetModeIndex_Medal (  );                          		//  Engine.wGameSettings.GetModeIndex_Medal
	 int                       GetModeIndex_BotTutorial (  );                    		//  Engine.wGameSettings.GetModeIndex_BotTutorial
	 int                       GetModeIndex_BotDeathMatch (  );                  		//  Engine.wGameSettings.GetModeIndex_BotDeathMatch
	 int                       GetModeIndex_BotDomination (  );                  		//  Engine.wGameSettings.GetModeIndex_BotDomination
	 int                       GetModeIndex_BotTeamDeath (  );                   		//  Engine.wGameSettings.GetModeIndex_BotTeamDeath
	 int                       GetModeIndex_Sabotage (  );                       		//  Engine.wGameSettings.GetModeIndex_Sabotage
	 int                       GetModeIndex_Domination (  );                     		//  Engine.wGameSettings.GetModeIndex_Domination
	 int                       GetModeIndex_DeathMatch (  );                     		//  Engine.wGameSettings.GetModeIndex_DeathMatch
	 int                       GetModeIndex_SD (  );                             		//  Engine.wGameSettings.GetModeIndex_SD
	 int                       GetModeIndex_TeamDeath (  );                      		//  Engine.wGameSettings.GetModeIndex_TeamDeath
	 bool                      IsBotModeIndex ( int Index );                     		//  Engine.wGameSettings.IsBotModeIndex
	 struct FGameModeInfo      GetGameModeByIndex ( int Index );                 		//  Engine.wGameSettings.GetGameModeByIndex
	 struct FGameModeInfo      GetGameModeByClass ( struct FString ClassName );  		//  Engine.wGameSettings.GetGameModeByClass
}; // Size: 0x0638

// Class Engine.Suicided
class DLL_IMPORT ASuicided : public ADamageType
{
public:
}; // Size: 0x0000

// Class Engine.wMessage_Game_ImpSystem
class DLL_IMPORT AwMessage_Game_ImpSystem : public AwMessage_Game
{
public:
	float                                              PosY1;                                            		// 0x1044 ( 0x0004 ) 
	float                                              PosY2;                                            		// 0x1048 ( 0x0004 ) 
	float                                              fFadeOutTime;                                     		// 0x104C ( 0x0004 ) 
	int                                                Code_NoWeapon;                                    		// 0x1050 ( 0x0004 ) 
	int                                                Code_NoThrowingGreanade;                          		// 0x1054 ( 0x0004 ) 
	int                                                Code_NoThrowingStun;                              		// 0x1058 ( 0x0004 ) 
	int                                                Code_NoThrowingSmoke;                             		// 0x105C ( 0x0004 ) 
	int                                                Code_NoThrowingC4;                                		// 0x1060 ( 0x0004 ) 
	int                                                Code_NotHasAmmoRPG7;                              		// 0x1064 ( 0x0004 ) 
	int                                                Code_NotHasAmmoIncen;                             		// 0x1068 ( 0x0004 ) 
	int                                                Code_NotHasAmmoHellFire;                          		// 0x106C ( 0x0004 ) 
	int                                                Code_NotHasPinpointBomb;                          		// 0x1070 ( 0x0004 ) 
	int                                                Code_NotHasAmmoSpiltGrenade;                      		// 0x1074 ( 0x0004 ) 
	int                                                Code_ChangeQS_0;                                  		// 0x1078 ( 0x0004 ) 
	int                                                Code_ChangeQS_1;                                  		// 0x107C ( 0x0004 ) 
	int                                                Code_ChangeQS_2;                                  		// 0x1080 ( 0x0004 ) 
	int                                                Code_ChangeQS_3;                                  		// 0x1084 ( 0x0004 ) 
	int                                                Code_ChangeQS_4;                                  		// 0x1088 ( 0x0004 ) 
	int                                                Code_ChangeQS_5;                                  		// 0x108C ( 0x0004 ) 
	int                                                Code_QuickSlotChangeFailed;                       		// 0x1090 ( 0x0004 ) 
	int                                                Code_ChangeQSInPlayerWalking;                     		// 0x1094 ( 0x0004 ) 
	int                                                Code_CloseQSTime;                                 		// 0x1098 ( 0x0004 ) 
	int                                                Code_CloseQSDistance;                             		// 0x109C ( 0x0004 ) 
	int                                                Code_CloseQSWindow;                               		// 0x10A0 ( 0x0004 ) 
	struct FString                                     strGameMode_TD;                                   		// 0x10A4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameMode_FFA;                                  		// 0x10B0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameMode_DOM;                                  		// 0x10BC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameMode_SD;                                   		// 0x10C8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameMode_SBT;                                  		// 0x10D4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNoWeapon;                                      		// 0x10E0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNoThrowingGreanade;                            		// 0x10EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNoThrowingSturn;                               		// 0x10F8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNoThrowingSmoke;                               		// 0x1104 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNoThrowingC4;                                  		// 0x1110 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNotHasAmmoRPG7;                                		// 0x111C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strChangeQS[ 0x06 ];                              		// 0x1128 ( 0x0048 ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strChangeQSInPlayerWalking;                       		// 0x1170 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCloseQSTime;                                   		// 0x117C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCloseQSDistance;                               		// 0x1188 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strQuickSlotChangeFailed;                         		// 0x1194 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strCloseQSWindow;                                 		// 0x11A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNotHasAmmoIncen;                               		// 0x11AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNotHasAmmoPinpointBomb;                        		// 0x11B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strNotHasAmmoHellFire;                            		// 0x11C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     StrNotHasAmmoSpiltGrenade;                        		// 0x11D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strHoldWeapon;                                    		// 0x11DC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                Code_HoldWeapon;                                  		// 0x11E8 ( 0x0004 ) 
	struct FString                                     strHoldFireByOverHeat;                            		// 0x11EC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                Code_HoldFireOverHeat;                            		// 0x11F8 ( 0x0004 ) 
	struct FString                                     SoundNotReady;                                    		// 0x11FC ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Code_DFSupplyAmmo;                                		// 0x1208 ( 0x0004 ) 
	struct FString                                     strDFSupplyAmmo;                                  		// 0x120C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wMessage_Game_ImpSystem.ClientReceive
	 bool                      IsMessageSystem ( int iCode );                    		//  Engine.wMessage_Game_ImpSystem.IsMessageSystem
	 bool                      IsMessageMode ( int iCode );                      		//  Engine.wMessage_Game_ImpSystem.IsMessageMode
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game_ImpSystem.GetString
	 bool                      GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game_ImpSystem.GotoBTConsole
	 bool                      GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game_ImpSystem.GotoHud
	 float                     GetLifeTime ( int Switch );                       		//  Engine.wMessage_Game_ImpSystem.GetLifeTime
}; // Size: 0x01D4

// Class Engine.AnnouncerQueueManager
class DLL_IMPORT AAnnouncerQueueManager : public AInfo
{
public:
	class TArray< struct FQueueItem >                  Queue;                                            		// 0x041C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              LastTimerCheck;                                   		// 0x0428 ( 0x0004 ) 
	float                                              GapTime;                                          		// 0x042C ( 0x0004 ) 
	class APlayerController*                           Receiver;                                         		// 0x0430 ( 0x0004 ) 
	float                                              LastPlayEndsAt;                                   		// 0x0434 ( 0x0004 ) 

	// UScript Functions
	 void                      ProcessQueueItem ( struct FQueueItem Item );      		//  Engine.AnnouncerQueueManager.ProcessQueueItem
	 void                      Timer (  );                                       		//  Engine.AnnouncerQueueManager.Timer
	 float                     GetQueueWaitTime (  );                            		// [ FUNC_Final ] Engine.AnnouncerQueueManager.GetQueueWaitTime
	 bool                      IsQueueingSwitch ( unsigned char Switch );        		// [ FUNC_Final ] Engine.AnnouncerQueueManager.IsQueueingSwitch
	 bool                      IsQueueing (  );                                  		// [ FUNC_Final ] Engine.AnnouncerQueueManager.IsQueueing
	 bool                      RemoveSound ( struct FString soundName );         		// [ FUNC_Final ] Engine.AnnouncerQueueManager.RemoveSound
	 bool                      CanFindSoundInQueue ( struct FString DaSoundName );		// [ FUNC_Final ] Engine.AnnouncerQueueManager.CanFindSoundInQueue
	 bool                      AddItemToQueue ( struct FString ASound, unsigned char Priority, unsigned char Switch );		//  Engine.AnnouncerQueueManager.AddItemToQueue
	 void                      InitFor ( class APlayerController* PC );          		// [ FUNC_Simulated ] Engine.AnnouncerQueueManager.InitFor
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.AnnouncerQueueManager.PostBeginPlay
}; // Size: 0x001C

// Class Engine.RunTestsBase
class DLL_IMPORT ARunTestsBase : public AActor
{
public:
	class TArray< class UClass* >                      TestClasses;                                      		// 0x03C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class UClass* >                      FailClasses;                                      		// 0x03D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                FailCase;                                         		// 0x03E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     FailMsg;                                          		// 0x03EC ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      RunTestClass ( class UClass* TestClass, int* passes, int* fails );		//  Engine.RunTestsBase.RunTestClass
	 void                      Run (  );                                         		//  Engine.RunTestsBase.Run
}; // Size: 0x0030

// Class Engine.ChatRoomMessage
class DLL_IMPORT AChatRoomMessage : public ALocalMessage
{
public:
	struct FString                                     AnonText;                                         		// 0x0440 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ChatRoomString[ 0x10 ];                           		// 0x044C ( 0x00C0 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 bool                      IsConsoleMessage ( int Index );                   		//  Engine.ChatRoomMessage.IsConsoleMessage
	 struct FString            AssembleMessage ( int Index, struct FString ChannelTitle, class APlayerReplicationInfo* RelatedPRI );		//  Engine.ChatRoomMessage.AssembleMessage
}; // Size: 0x00CC

// Class Engine.wMapSettings
class DLL_IMPORT UwMapSettings : public UObject
{
public:
	class UwMatchMaker*                                MatchMaker;                                       		// 0x002C ( 0x0004 ) 
	class UwGameManager*                               gm;                                               		// 0x0030 ( 0x0004 ) 

	// UScript Functions
	 class UwMapInfo*          GetMapInfo ( struct FString dfile );              		//  Engine.wMapSettings.GetMapInfo
	 class UwMapInfo*          GetMapInfoByID ( int MapID );                     		//  Engine.wMapSettings.GetMapInfoByID
	 int                       GetWeaponRestriction ( int MapID, int weaponID ); 		//  Engine.wMapSettings.GetWeaponRestriction
	 int                       GetMaxUserCount ( int MapID, int GameModeIdx );   		//  Engine.wMapSettings.GetMaxUserCount
	 int                       IsDOMI_RandomRespawn ( int MapID, int GameModeIdx );		//  Engine.wMapSettings.IsDOMI_RandomRespawn
	 int                       IsTDM_RandomRespawn ( int MapID, int GameModeIdx );		//  Engine.wMapSettings.IsTDM_RandomRespawn
	 int                       IsGameModeEnable ( int MapID, int GameModeIdx );  		//  Engine.wMapSettings.IsGameModeEnable
	 class UwMapInfo*          GetMapInfoByMapNum ( class TArray< class UwMapInfo* > infos, int MapNum );		//  Engine.wMapSettings.GetMapInfoByMapNum
	 class TArray< class UwMapInfo* > GetAllMapInfos ( bool bServiceBuild );            		//  Engine.wMapSettings.GetAllMapInfos
	 bool                      IsValidMap_THAILAND ( struct FString LocStr, bool bServiceBuild );		//  Engine.wMapSettings.IsValidMap_THAILAND
	 bool                      IsValidMap_GP ( struct FString LocStr, bool bServiceBuild );		//  Engine.wMapSettings.IsValidMap_GP
	 bool                      IsValidMap_CHINA ( struct FString LocStr, bool bServiceBuild );		//  Engine.wMapSettings.IsValidMap_CHINA
	 bool                      _isValidMap ( struct FString fileName, bool bServiceBuild );		//  Engine.wMapSettings._isValidMap
	 void                      Initialize ( class UwMatchMaker* MM );            		//  Engine.wMapSettings.Initialize
}; // Size: 0x0008

// Class Engine.wItemBoxHK
class DLL_IMPORT UwItemBoxHK : public UObject
{
public:
	int                                                ItemID;                                           		// 0x002C ( 0x0004 ) 
	int                                                ItemType;                                         		// 0x0030 ( 0x0004 ) 
	struct FString                                     ItemName;                                         		// 0x0034 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ItemDescription;                                  		// 0x0040 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ResourceID;                                       		// 0x004C ( 0x0004 ) 
	int                                                ShopDisplayOrder;                                 		// 0x0050 ( 0x0004 ) 
	int                                                InvenDisplayOrder;                                		// 0x0054 ( 0x0004 ) 
	class UTexture*                                    ItemImage;                                        		// 0x0058 ( 0x0004 ) 
	int                                                Grade;                                            		// 0x005C ( 0x0004 ) 
	int                                                EquipLevel;                                       		// 0x0060 ( 0x0004 ) 
	int                                                EquipTeam;                                        		// 0x0064 ( 0x0004 ) 
	class UTexture*                                    EquipLevelImage;                                  		// 0x0068 ( 0x0004 ) 
	int                                                EquipSlot;                                        		// 0x006C ( 0x0004 ) 
	int                                                CostType;                                         		// 0x0070 ( 0x0004 ) 
	int                                                PurchaseType;                                     		// 0x0074 ( 0x0004 ) 
	unsigned long                                      bOverlap:1;                                       		// 0x0078 ( 0x0004 )  [0x00000001]
	unsigned long                                      bRepair:1;                                        		// 0x0078 ( 0x0004 )  [0x00000002]
	unsigned long                                      bSellAuction:1;                                   		// 0x0078 ( 0x0004 )  [0x00000004]
	int                                                AuctionMaxPrice;                                  		// 0x007C ( 0x0004 ) 
	int                                                AuctionMinPrice;                                  		// 0x0080 ( 0x0004 ) 
	unsigned long                                      bBuyShop:1;                                       		// 0x0084 ( 0x0004 )  [0x00000001]
	unsigned long                                      bSellShop:1;                                      		// 0x0084 ( 0x0004 )  [0x00000002]
	int                                                Period[ 0x05 ];                                   		// 0x0088 ( 0x0014 ) 
	int                                                PointPrice[ 0x05 ];                               		// 0x009C ( 0x0014 ) 
	int                                                CashPrice[ 0x05 ];                                		// 0x00B0 ( 0x0014 ) 
	unsigned long                                      bParts:1;                                         		// 0x00C4 ( 0x0004 )  [0x00000001]
	struct FString                                     PartGroupID;                                      		// 0x00C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FPartInfo >                   PartGroupList;                                    		// 0x00D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FCustomPartInfo >             PartAllList;                                      		// 0x00E0 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                PartSightIndices;                                 		// 0x00EC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                PartSilencerIndices;                              		// 0x00F8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                PartBarrelIndices;                                		// 0x0104 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                PartGusstockIndices;                              		// 0x0110 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FVector                                     vDisplay_3d;                                      		// 0x011C ( 0x000C ) 
	float                                              fDisplay_3d_rot_y;                                		// 0x0128 ( 0x0004 ) 
	struct FVector                                     vBootyitem_3d;                                    		// 0x012C ( 0x000C ) 
	float                                              fBootyitem_3d_rot_y;                              		// 0x0138 ( 0x0004 ) 
	unsigned long                                      bPaints:1;                                        		// 0x013C ( 0x0004 )  [0x00000001]
	struct FString                                     PaintGroupID;                                     		// 0x0140 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FPaintInfo >                  PaintGroupList;                                   		// 0x014C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bSkill:1;                                         		// 0x0158 ( 0x0004 )  [0x00000001]
	int                                                SkillUseType;                                     		// 0x015C ( 0x0004 ) 
	int                                                AdType;                                           		// 0x0160 ( 0x0004 ) 
	int                                                start_ammo;                                       		// 0x0164 ( 0x0004 ) 
	int                                                clip_size;                                        		// 0x0168 ( 0x0004 ) 
	int                                                ui_damage;                                        		// 0x016C ( 0x0004 ) 
	int                                                ui_spread;                                        		// 0x0170 ( 0x0004 ) 
	int                                                ui_view_kick;                                     		// 0x0174 ( 0x0004 ) 
	int                                                ui_rate_of_fire;                                  		// 0x0178 ( 0x0004 ) 
	int                                                ui_move;                                          		// 0x017C ( 0x0004 ) 
	int                                                ui_range;                                         		// 0x0180 ( 0x0004 ) 

	// UScript Functions
	 bool                      IsCashItem (  );                                  		//  Engine.wItemBoxHK.IsCashItem
	 struct FString            GetPartSkillName ( int PartID );                  		//  Engine.wItemBoxHK.GetPartSkillName
	 int                       GetUIDamage ( int PartID );                       		//  Engine.wItemBoxHK.GetUIDamage
	 int                       GetUISpread ( int PartID );                       		//  Engine.wItemBoxHK.GetUISpread
	 int                       GetUIViewKick ( int PartID );                     		//  Engine.wItemBoxHK.GetUIViewKick
	 int                       GetUIRateOfFire ( int PartID );                   		//  Engine.wItemBoxHK.GetUIRateOfFire
	 int                       GetUIMove ( int PartID );                         		//  Engine.wItemBoxHK.GetUIMove
	 int                       GetUIRange ( int PartID );                        		//  Engine.wItemBoxHK.GetUIRange
	 struct FString            GetPartName ( int PartID );                       		//  Engine.wItemBoxHK.GetPartName
	 int                       FindPartGroupIndex ( int PartID );                		//  Engine.wItemBoxHK.FindPartGroupIndex
	 void                      SortPartList (  );                                		//  Engine.wItemBoxHK.SortPartList
}; // Size: 0x0158

// Class Engine.wMatchUserInfo
class DLL_IMPORT UwMatchUserInfo : public UObject
{
public:
	int                                                UID;                                              		// 0x002C ( 0x0004 ) 
	struct FString                                     UserName;                                         		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                TeamNum;                                          		// 0x003C ( 0x0004 ) 
	struct FString                                     ClanName;                                         		// 0x0040 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                ClanMark;                                         		// 0x004C ( 0x0004 ) 
	int                                                ClanBG;                                           		// 0x0050 ( 0x0004 ) 
	int                                                ClanBL;                                           		// 0x0054 ( 0x0004 ) 
	int                                                IsLookingFor;                                     		// 0x0058 ( 0x0004 ) 
	int                                                ClanLevel;                                        		// 0x005C ( 0x0004 ) 
	struct FString                                     UserIP;                                           		// 0x0060 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Grade;                                            		// 0x006C ( 0x0004 ) 
	class TArray< struct FEquippedItemInfo >           EquippedItems;                                    		// 0x0070 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FEquippedSkillInfo >          EquippedSkills;                                   		// 0x007C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FEquippedQSlotInfo >          EquippedQSlots;                                   		// 0x0088 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      IsHost:1;                                         		// 0x0094 ( 0x0004 )  [0x00000001]
	unsigned char                                      bLoadingState;                                    		// 0x0098 ( 0x0001 ) 
	int                                                RoundPlayed;                                      		// 0x009C ( 0x0004 ) 
	int                                                TimePlayed;                                       		// 0x00A0 ( 0x0004 ) 
	unsigned long                                      bSendPing:1;                                      		// 0x00A4 ( 0x0004 )  [0x00000001]
	unsigned long                                      bReceivedPing:1;                                  		// 0x00A4 ( 0x0004 )  [0x00000002]
	int                                                iReceivedPing;                                    		// 0x00A8 ( 0x0004 ) 
	int                                                LevelMarkID;                                      		// 0x00AC ( 0x0004 ) 
	int                                                TitleMarkID;                                      		// 0x00B0 ( 0x0004 ) 
	int                                                Reserved1;                                        		// 0x00B4 ( 0x0004 ) 
	int                                                Reserved2;                                        		// 0x00B8 ( 0x0004 ) 
	int                                                Reserved3;                                        		// 0x00BC ( 0x0004 ) 

	// UScript Functions
	 void                      LogUsedStatus (  );                               		//  Engine.wMatchUserInfo.LogUsedStatus
	 int                       GetPaintIDEquippedItems ( int weaponID );         		//  Engine.wMatchUserInfo.GetPaintIDEquippedItems
	 void                      ResetQSlotItemUse ( int i, int j, float Time );   		//  Engine.wMatchUserInfo.ResetQSlotItemUse
	 void                      ResetItemUse ( int i, float Time );               		//  Engine.wMatchUserInfo.ResetItemUse
	 void                      SetItemUse ( int i );                             		//  Engine.wMatchUserInfo.SetItemUse
	 float                     ExtractBonusPoint ( int ItemID, class UwGameManager* GameMgr );		//  Engine.wMatchUserInfo.ExtractBonusPoint
	 float                     ExtractBonusExp ( int ItemID, class UwGameManager* GameMgr );		//  Engine.wMatchUserInfo.ExtractBonusExp
	 float                     GetBonusPoint ( class UwGameManager* GameMgr );   		//  Engine.wMatchUserInfo.GetBonusPoint
	 float                     GetBonusExP ( class UwGameManager* GameMgr );     		//  Engine.wMatchUserInfo.GetBonusExP
}; // Size: 0x0094

// Class Engine.wGameManagerScriptPart
class DLL_IMPORT UwGameManagerScriptPart : public UObject
{
public:
	struct FImage                                      kClanPattern_Img;                                 		// 0x002C ( 0x0020 ) 
	struct FImage                                      kClanBG_Img;                                      		// 0x004C ( 0x0020 ) 
	struct FImage                                      kClanBL_Img;                                      		// 0x006C ( 0x0020 ) 
	class TArray< struct FImage >                      ClanMarkImg32;                                    		// 0x008C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FImage >                      ClanMarkImg128;                                   		// 0x0098 ( 0x000C ) [ CPF_NeedCtorLink ]
}; // Size: 0x0078

// Class Engine.BTCustomDrawHK
class DLL_IMPORT UBTCustomDrawHK : public UObject
{
public:

	// UScript Functions
	 struct FString            Get_0x0A_RemoveString ( struct FString S );       		//  Engine.BTCustomDrawHK.Get_0x0A_RemoveString
	 struct FString            GetNumberString ( int Num, bool fixedsize, int fixedlen );		//  Engine.BTCustomDrawHK.GetNumberString
	 bool                      IsInBox ( float boxx1, float boxx2, float boxy1, float boxy2, float X, float Y );		//  Engine.BTCustomDrawHK.IsInBox
	 bool                      IsInFloatBox ( struct FFloatBox Box, float X, float Y );		//  Engine.BTCustomDrawHK.IsInFloatBox
	 int                       GetRatioIndex ( int width, int Height );          		//  Engine.BTCustomDrawHK.GetRatioIndex
	 class UIntClass*          MakeIntClass ( int A );                           		//  Engine.BTCustomDrawHK.MakeIntClass
	 class TArray< struct FString > FormatStringDiviedArray ( struct FString original, class TArray< struct FString > args );		//  Engine.BTCustomDrawHK.FormatStringDiviedArray
	 bool                      SplitString ( struct FString original, int ExceptDivideMode, struct FString divider1, struct FString divider2, struct FString divider3, class TArray< struct FString >* temp );		//  Engine.BTCustomDrawHK.SplitString
	 struct FString            FormatStringArray ( struct FString original, class TArray< struct FString > args );		//  Engine.BTCustomDrawHK.FormatStringArray
	 struct FString            FormatString ( struct FString original, struct FString arg0, struct FString arg1, struct FString arg2, struct FString arg3, struct FString arg4, struct FString arg5, struct FString arg6, struct FString arg7, struct FString arg8 );		//  Engine.BTCustomDrawHK.FormatString
	 struct FFloatBox          MakeResizeBox ( struct FFloatBox inBox, int resizeX, int resizeY );		//  Engine.BTCustomDrawHK.MakeResizeBox
	 struct FFloatBox          MakeEmptyBox (  );                                		//  Engine.BTCustomDrawHK.MakeEmptyBox
	 struct FFloatBox          MakeFloatBox ( float X1, float Y1, float X2, float Y2 );		//  Engine.BTCustomDrawHK.MakeFloatBox
	 bool                      HasString ( struct FString Check, struct FString word );		//  Engine.BTCustomDrawHK.HasString
	 void                      SplitTextBounds ( class UCanvas* C, struct FString Text, int FontSize, float clientWidth, class TArray< struct FString >* tarray );		//  Engine.BTCustomDrawHK.SplitTextBounds
	 void                      DrawImageStretchedHK ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageStretchedHK
	 void                      DrawImageStretchedCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageStretchedCache
	 void                      DrawImageStretched ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageStretched
	 void                      DrawImageStretchedWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageStretchedWithClipArea
	 void                      DrawImageScaleCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageScaleCache
	 void                      DrawImageScale ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageScale
	 void                      DrawImageScaleWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageScaleWithClipArea
	 void                      DrawImageOriginalWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageOriginalWithClipArea
	 void                      DrawImageWithClipArea ( class UCanvas* C, float tL, float tT, float tR, float tB, float cL, float ct, float cR, float cb, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageWithClipArea
	 void                      DrawImageOriginalCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageOriginalCache
	 void                      DrawImageOriginal ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageOriginal
	 void                      DrawImageCache ( class UCanvas* C, float tL, float tT, float tR, float tB, int Level, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageCache
	 void                      DrawImage_Alpha ( class UCanvas* C, float tL, float tT, float tR, float tB, float Alpha, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImage_Alpha
	 void                      DrawImage ( class UCanvas* C, float tL, float tT, float tR, float tB, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImage
	 void                      DrawImagePaddingCache ( class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, int Level, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImagePaddingCache
	 void                      DrawImagePadding ( class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImagePadding
	 void                      DrawImagePaddingOffset ( class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImagePaddingOffset
	 void                      DrawImageScaleAllAndPaddingOffsetAndClipping ( class UCanvas* C, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, float cL, float ct, float cR, float cb, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingOffsetAndClipping
	 void                      DrawImageScaleAllAndPaddingAndClipping ( class UCanvas* C, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, float cL, float ct, float cR, float cb, struct FImage* img );		//  Engine.BTCustomDrawHK.DrawImageScaleAllAndPaddingAndClipping
	 void                      DrawEllipsisStringPaddingOffset ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, class FColor BackShadowColor, int Level );		//  Engine.BTCustomDrawHK.DrawEllipsisStringPaddingOffset
	 void                      DrawEllipsisStringPadding ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float widthPerc, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, class FColor BackShadowColor, int Level );		//  Engine.BTCustomDrawHK.DrawEllipsisStringPadding
	 void                      DrawEllipsisString ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float widthPerc, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int Level );		//  Engine.BTCustomDrawHK.DrawEllipsisString
	 struct FFloatBox          GetDrawStringFloatBoxOLD ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor );		//  Engine.BTCustomDrawHK.GetDrawStringFloatBoxOLD
	 struct FFloatBox          GetDrawStringFloatBoxLH ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor );		//  Engine.BTCustomDrawHK.GetDrawStringFloatBoxLH
	 struct FFloatBox          GetDrawStringFloatBox ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor );		//  Engine.BTCustomDrawHK.GetDrawStringFloatBox
	 void                      DrawStringCache ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int Level );		//  Engine.BTCustomDrawHK.DrawStringCache
	 void                      DrawString ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont );		//  Engine.BTCustomDrawHK.DrawString
	 void                      DrawStringModulateAlpha ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont );		//  Engine.BTCustomDrawHK.DrawStringModulateAlpha
	 void                      DrawString_UseModulateColor ( class UCanvas* C, struct FString Text, unsigned char dt, float fntSize, float tL, float tT, float tR, float tB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, struct FPlane mColor );		//  Engine.BTCustomDrawHK.DrawString_UseModulateColor
	 void                      DrawStringPaddingOffset ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB, class FColor BackShadowColor, int PresetIndex, bool bUseD3DFont );		//  Engine.BTCustomDrawHK.DrawStringPaddingOffset
	 void                      DrawStringPadding ( class UCanvas* C, struct FString Text, unsigned char dt, float FontSize, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB, class FColor BackShadowColor, int Level );		//  Engine.BTCustomDrawHK.DrawStringPadding
	 float                     DrawTextArray ( class UCanvas* C, class TArray< struct FText > textArray, unsigned char dt, unsigned char tadt, float tL, float tT, float tR, float tB, int Level );		//  Engine.BTCustomDrawHK.DrawTextArray
	 void                      DrawTextCache ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int Level );		//  Engine.BTCustomDrawHK.DrawTextCache
	 void                      DrawText_UseModulateColor ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont, bool bUseModulateColor, struct FPlane mColor );		//  Engine.BTCustomDrawHK.DrawText_UseModulateColor
	 void                      DrawText ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int PresetIndex, bool bUseD3DFont );		//  Engine.BTCustomDrawHK.DrawText
	 void                      DrawTextPaddingOffset ( class UCanvas* C, struct FText Text, float tL, float tT, float tR, float tB, int pL, int pT, int pR, int pB );		//  Engine.BTCustomDrawHK.DrawTextPaddingOffset
	 void                      DrawTextArrayPadding ( class UCanvas* C, class TArray< struct FText > textArray, unsigned char dt, unsigned char tadt, float tL, float tT, float tR, float tB, float pL, float pT, float pR, float pB );		//  Engine.BTCustomDrawHK.DrawTextArrayPadding
	 struct FString            ToDollarString ( struct FString money );          		//  Engine.BTCustomDrawHK.ToDollarString
	 struct FString            ToWonString ( struct FString money );             		//  Engine.BTCustomDrawHK.ToWonString
	 class FColor              MakeColorRGB ( unsigned char R, unsigned char G, unsigned char B );		//  Engine.BTCustomDrawHK.MakeColorRGB
	 struct FImage             MakeImageColor ( int width, int Height, unsigned char dt, class UMaterial* img, class FColor frontColor, class FColor BackShadowColor );		//  Engine.BTCustomDrawHK.MakeImageColor
	 struct FImage             MakeImage ( int width, int Height, unsigned char dt, class UMaterial* img );		//  Engine.BTCustomDrawHK.MakeImage
	 struct FText              MakeTextColor ( int fntSize, unsigned char fntDrawType, struct FString txt, class FColor frontColor, class FColor BackShadowColor );		//  Engine.BTCustomDrawHK.MakeTextColor
	 struct FText              MakeText ( int fntSize, unsigned char fntDrawType, struct FString txt );		//  Engine.BTCustomDrawHK.MakeText
}; // Size: 0x0000

// Class Engine.wItemBoxInstanceHK
class DLL_IMPORT UwItemBoxInstanceHK : public UObject
{
public:
	class UwItemBoxCashHK*                             CashItemInfo;                                     		// 0x002C ( 0x0004 ) 
	int                                                ItemID;                                           		// 0x0030 ( 0x0004 ) 
	struct FBtrDouble                                  UniqueID;                                         		// 0x0034 ( 0x0008 ) 
	int                                                UniqueSkillID;                                    		// 0x003C ( 0x0004 ) 
	struct FBtrDouble                                  UntilTime;                                        		// 0x0040 ( 0x0008 ) 
	struct FBtrTime                                    LeftTime;                                         		// 0x0048 ( 0x0020 ) 
	int                                                Durability;                                       		// 0x0068 ( 0x0004 ) 
	int                                                DamageDegree;                                     		// 0x006C ( 0x0004 ) 
	int                                                SlotPosition;                                     		// 0x0070 ( 0x0004 ) 
	int                                                PartID;                                           		// 0x0074 ( 0x0004 ) 
	int                                                ItemState;                                        		// 0x0078 ( 0x0004 ) 
	int                                                OverlapCount;                                     		// 0x007C ( 0x0004 ) 
	int                                                PaintID;                                          		// 0x0080 ( 0x0004 ) 
	int                                                TradeCount;                                       		// 0x0084 ( 0x0004 ) 
	int                                                Extra;                                            		// 0x0088 ( 0x0004 ) 
}; // Size: 0x0060

// Class Engine.wItemBoxCashHK
class DLL_IMPORT UwItemBoxCashHK : public UObject
{
public:
	struct FString                                     WZItemName;                                       		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                WZPurchaseType;                                   		// 0x0038 ( 0x0004 ) 
	struct FString                                     WZItemDescription;                                		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                WZLeftCount;                                      		// 0x0048 ( 0x0004 ) 
	struct FString                                     WZEndDate;                                        		// 0x004C ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned long                                      bWZPackage:1;                                     		// 0x0058 ( 0x0004 )  [0x00000001]
	unsigned long                                      bWZCanBuy:1;                                      		// 0x0058 ( 0x0004 )  [0x00000002]
	unsigned long                                      bWZCanGift:1;                                     		// 0x0058 ( 0x0004 )  [0x00000004]
	unsigned long                                      bWZCapsuleItem:1;                                 		// 0x0058 ( 0x0004 )  [0x00000008]
	int                                                WZPackageType;                                    		// 0x005C ( 0x0004 ) 
	class TArray< int >                                WZPackageSeq;                                     		// 0x0060 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                WZCategorySeq;                                    		// 0x006C ( 0x0004 ) 
	int                                                WZPeriod[ 0x05 ];                                 		// 0x0070 ( 0x0014 ) 
	int                                                WZCashPrice[ 0x05 ];                              		// 0x0084 ( 0x0014 ) 
	int                                                WZPriceSeq[ 0x05 ];                               		// 0x0098 ( 0x0014 ) 
	int                                                WZStoreSeq;                                       		// 0x00AC ( 0x0004 ) 
	int                                                WZStoreItemSeq;                                   		// 0x00B0 ( 0x0004 ) 
	int                                                WZStoreItemType;                                  		// 0x00B4 ( 0x0004 ) 
	int                                                ProductType;                                      		// 0x00B8 ( 0x0004 ) 
	int                                                ProductCount;                                     		// 0x00BC ( 0x0004 ) 
	unsigned long                                      EnablePCoin:1;                                    		// 0x00C0 ( 0x0004 )  [0x00000001]
	unsigned long                                      EnableCCoin:1;                                    		// 0x00C0 ( 0x0004 )  [0x00000002]

	// UScript Functions
	 void                      SetCashItemInfo ( class UwItemBoxHK* ItemInfo, struct FGP20Product GP20Product, struct FString strEndDate );		//  Engine.wItemBoxCashHK.SetCashItemInfo
	 void                      SetProductType ( struct FString proType );        		//  Engine.wItemBoxCashHK.SetProductType
	 bool                      IsShowStore ( struct FGP20Product GP20Product );  		//  Engine.wItemBoxCashHK.IsShowStore
	 unsigned char             CCoinType (  );                                   		//  Engine.wItemBoxCashHK.CCoinType
	 unsigned char             PCoinType (  );                                   		//  Engine.wItemBoxCashHK.PCoinType
}; // Size: 0x0098

// Class Engine.ClanMarkManager
class DLL_IMPORT UClanMarkManager : public UObject
{
public:
	class TArray< class UClanNameAndMark* >            ClanMarkList;                                     		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              Phase;                                            		// 0x0038 ( 0x0004 ) 
	float                                              AccumDelta;                                       		// 0x003C ( 0x0004 ) 
	float                                              BlendingFadeIn;                                   		// 0x0040 ( 0x0004 ) 
	float                                              BlendingFadeOut;                                  		// 0x0044 ( 0x0004 ) 
	class UwGameManager*                               GameMgr;                                          		// 0x0048 ( 0x0004 ) 
	struct FImage                                      ex_clanmark;                                      		// 0x004C ( 0x0020 ) 
	struct FImage                                      ex_clanmark_01;                                   		// 0x006C ( 0x0020 ) 
	struct FImage                                      ex_clanmark_02;                                   		// 0x008C ( 0x0020 ) 

	// UScript Functions
	 void                      Render ( class UCanvas* C, int X1, int Y1, int X2, int Y2, struct FString ClanName );		//  Engine.ClanMarkManager.Render
	 int                       FindClanMark_Inner ( struct FString ClanName, int Left, int Right );		//  Engine.ClanMarkManager.FindClanMark_Inner
	 int                       FindClanMark ( struct FString ClanName );         		//  Engine.ClanMarkManager.FindClanMark
	 int                       FindClanMark_ForInsertLocation ( struct FString ClanName );		//  Engine.ClanMarkManager.FindClanMark_ForInsertLocation
	 bool                      RemoveClanMark ( struct FString ClanName );       		//  Engine.ClanMarkManager.RemoveClanMark
	 bool                      SetClanLevel ( struct FString ClanName, int ClanLevel );		//  Engine.ClanMarkManager.SetClanLevel
	 bool                      AddClanMark ( struct FString ClanName, int Pattern, int BG, int BL, bool bSetClanState, bool bClanLF );		//  Engine.ClanMarkManager.AddClanMark
	 bool                      SetClanState ( struct FString ClanName, bool bClanLF );		//  Engine.ClanMarkManager.SetClanState
	 void                      Init ( class UwGameManager* gm );                 		//  Engine.ClanMarkManager.Init
	 void                      Tick ( float Delta );                             		//  Engine.ClanMarkManager.Tick
}; // Size: 0x0080

// Class Engine.wSkillBoxHK
class DLL_IMPORT UwSkillBoxHK : public UObject
{
public:
	unsigned char                                      SlotPos;                                          		// 0x002C ( 0x0001 ) 
	int                                                SkillID;                                          		// 0x0030 ( 0x0004 ) 
	int                                                UniqueSkillID;                                    		// 0x0034 ( 0x0004 ) 
	struct FBtrDouble                                  UntilTime;                                        		// 0x0038 ( 0x0008 ) 
}; // Size: 0x0014

// Class Engine.wQuickSlotBoxHK
class DLL_IMPORT UwQuickSlotBoxHK : public UObject
{
public:
	struct FString                                     QuickSlotName;                                    		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                QuickSlotID;                                      		// 0x0038 ( 0x0004 ) 
	int                                                ItemID[ 0x04 ];                                   		// 0x003C ( 0x0010 ) 
	struct FBtrDouble                                  UniqueID[ 0x04 ];                                 		// 0x004C ( 0x0020 ) 
	int                                                SkillID[ 0x04 ];                                  		// 0x006C ( 0x0010 ) 
	int                                                UniqueSkillID[ 0x04 ];                            		// 0x007C ( 0x0010 ) 
}; // Size: 0x0060

// Class Engine.ClanNameAndMark
class DLL_IMPORT UClanNameAndMark : public UObject
{
public:
	struct FString                                     ClanName;                                         		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Pattern;                                          		// 0x0038 ( 0x0004 ) 
	int                                                BG;                                               		// 0x003C ( 0x0004 ) 
	int                                                BL;                                               		// 0x0040 ( 0x0004 ) 
	unsigned long                                      bClanLF:1;                                        		// 0x0044 ( 0x0004 )  [0x00000001]
	int                                                ClanLevel;                                        		// 0x0048 ( 0x0004 ) 
	struct FImage                                      Pattern_Img;                                      		// 0x004C ( 0x0020 ) 
	struct FImage                                      BG_Img;                                           		// 0x006C ( 0x0020 ) 
	struct FImage                                      BL_Img;                                           		// 0x008C ( 0x0020 ) 
	struct FImage                                      ClanLevel_Img;                                    		// 0x00AC ( 0x0020 ) 
}; // Size: 0x00A0

// Class Engine.DelegateObject
class DLL_IMPORT UDelegateObject : public UObject
{
public:
}; // Size: 0x0000

// Class Engine.DelegateEventTimer
class DLL_IMPORT UDelegateEventTimer : public UDelegateObject
{
public:
	int                                                Data_Int[ 0x03 ];                                 		// 0x002C ( 0x000C ) 
	struct FString                                     Data_String[ 0x03 ];                              		// 0x0038 ( 0x0024 ) [ CPF_NeedCtorLink ]
	struct FScriptDelegate                             __OnEventTimer__Delegate;                         		// 0x005C ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      OnEventTimer ( int Index );                       		//  Engine.DelegateEventTimer.OnEventTimer
}; // Size: 0x0038

// Class Engine.wWeaponRes_Base
class DLL_IMPORT AwWeaponRes_Base : public ADamageType
{
public:
	int                                                iResourceID;                                      		// 0x0494 ( 0x0004 ) 
	struct FString                                     szName;                                           		// 0x0498 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UStaticMesh*                                 stProj;                                           		// 0x04A4 ( 0x0004 ) 
	struct FString                                     szClass_Shell;                                    		// 0x04A8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Shell_3rd;                                		// 0x04B4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Clip;                                     		// 0x04C0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Tracer;                                   		// 0x04CC ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              fTracerPop;                                       		// 0x04D8 ( 0x0004 ) 
	struct FString                                     szClass_Muzz_1st;                                 		// 0x04DC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Muzz_3rd;                                 		// 0x04E8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Smoke_1st;                                		// 0x04F4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Smoke_3rd;                                		// 0x0500 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Smoke_Silencer_1st;                       		// 0x050C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szClass_Smoke_Silencer_3rd;                       		// 0x0518 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UClass*                                      effect_Explosion;                                 		// 0x0524 ( 0x0004 ) 
	class UClass*                                      effect_Explosion_dirt;                            		// 0x0528 ( 0x0004 ) 
	class UClass*                                      effect_Explosion_grass;                           		// 0x052C ( 0x0004 ) 
	class UClass*                                      effect_Explosion_metal;                           		// 0x0530 ( 0x0004 ) 
	class UClass*                                      effect_Explosion_snow;                            		// 0x0534 ( 0x0004 ) 
	class UClass*                                      effect_Explosion_water;                           		// 0x0538 ( 0x0004 ) 
	class UClass*                                      effect_Explosion_wood;                            		// 0x053C ( 0x0004 ) 
	class UClass*                                      effect_Explosion_enemy;                           		// 0x0540 ( 0x0004 ) 
	class UClass*                                      effect_PointMark;                                 		// 0x0544 ( 0x0004 ) 
	class UClass*                                      Proj_Smoke;                                       		// 0x0548 ( 0x0004 ) 
	class UClass*                                      Proj_Corona;                                      		// 0x054C ( 0x0004 ) 
	class UClass*                                      Proj_ExplosionCrap;                               		// 0x0550 ( 0x0004 ) 
	class UClass*                                      Proj_ExplosionDecal;                              		// 0x0554 ( 0x0004 ) 
	struct FString                                     szIcon_HUD;                                       		// 0x0558 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szIcon_Kill;                                      		// 0x0564 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FIntBoxWH                                   ibIcon_Kill;                                      		// 0x0570 ( 0x0010 ) 
	struct FString                                     szIcon_Ammo;                                      		// 0x0580 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     szType_DisplayAmmo;                               		// 0x058C ( 0x000C ) [ CPF_NeedCtorLink ]
	class USound*                                      sound_Ready;                                      		// 0x0598 ( 0x0004 ) 
	class USound*                                      sound_Fire;                                       		// 0x059C ( 0x0004 ) 
	class USound*                                      sound_Fire_Stereo;                                		// 0x05A0 ( 0x0004 ) 
	class USound*                                      sound_Fire_Silencer;                              		// 0x05A4 ( 0x0004 ) 
	class USound*                                      sound_Fire_Silencer_Stereo;                       		// 0x05A8 ( 0x0004 ) 
	class USound*                                      sound_Fire_Far;                                   		// 0x05AC ( 0x0004 ) 
	class USound*                                      sound_Fire_Stop;                                  		// 0x05B0 ( 0x0004 ) 
	class USound*                                      sound_Fire_Shell;                                 		// 0x05B4 ( 0x0004 ) 
	class USound*                                      sound_Fire_Empty;                                 		// 0x05B8 ( 0x0004 ) 
	class USound*                                      sound_Explosion;                                  		// 0x05BC ( 0x0004 ) 
	class USound*                                      sound_Melee_Ok;                                   		// 0x05C0 ( 0x0004 ) 
	class USound*                                      sound_Melee_Miss;                                 		// 0x05C4 ( 0x0004 ) 
	class USound*                                      sound_Rechamber;                                  		// 0x05C8 ( 0x0004 ) 
	class USound*                                      sound_Reload;                                     		// 0x05CC ( 0x0004 ) 
	class USound*                                      sound_ReloadEmpty;                                		// 0x05D0 ( 0x0004 ) 
	class USound*                                      sound_ReloadBegin;                                		// 0x05D4 ( 0x0004 ) 
	class USound*                                      sound_ReloadEnd;                                  		// 0x05D8 ( 0x0004 ) 
	class USound*                                      sound_Select;                                     		// 0x05DC ( 0x0004 ) 
	class USound*                                      sound_Pickup;                                     		// 0x05E0 ( 0x0004 ) 
	class USound*                                      sound_Bullet_Impact;                              		// 0x05E4 ( 0x0004 ) 
	class USound*                                      sound_Bullet_Move;                                		// 0x05E8 ( 0x0004 ) 
	class USound*                                      sound_Select_New;                                 		// 0x05EC ( 0x0004 ) 
	struct FString                                     sound_Select_PackType;                            		// 0x05F0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     str_sound_Grenade;                                		// 0x05FC ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              rad_Fire;                                         		// 0x0608 ( 0x0004 ) 
	float                                              rad_MeleeFire;                                    		// 0x060C ( 0x0004 ) 
	float                                              rad_Fire_Silencer;                                		// 0x0610 ( 0x0004 ) 
	float                                              rad_Fire_Far;                                     		// 0x0614 ( 0x0004 ) 
	float                                              rad_Fire_Stop;                                    		// 0x0618 ( 0x0004 ) 
	float                                              rad_Reload;                                       		// 0x061C ( 0x0004 ) 
	float                                              rad_Explosion;                                    		// 0x0620 ( 0x0004 ) 
	float                                              rad_Bullet_Move;                                  		// 0x0624 ( 0x0004 ) 
	unsigned long                                      UseWarhead:1;                                     		// 0x0628 ( 0x0004 )  [0x00000001]
	int                                                iCollisionRadius;                                 		// 0x062C ( 0x0004 ) 
	int                                                iCollisionHeight;                                 		// 0x0630 ( 0x0004 ) 

	// UScript Functions
	 void                      PrecacheSound (  );                               		//  Engine.wWeaponRes_Base.PrecacheSound
	 void                      PrecacheMaterials ( class ALevelInfo* Level );    		//  Engine.wWeaponRes_Base.PrecacheMaterials
	 void                      PrecacheClasses (  );                             		//  Engine.wWeaponRes_Base.PrecacheClasses
}; // Size: 0x01A0

// Class Engine.GameInfoScriptPart
class DLL_IMPORT UGameInfoScriptPart : public UObject
{
public:
	struct FKillDeathLog                               KDLog;                                            		// 0x002C ( 0x004C ) 
	unsigned long                                      KDLogSaved:1;                                     		// 0x0078 ( 0x0004 )  [0x00000001]
	float                                              RespawnFailDuration;                              		// 0x007C ( 0x0004 ) 
	float                                              SafeSpawn_DAMAGE_DEAL_TIME;                       		// 0x0080 ( 0x0004 ) 
	float                                              SafeSpawn_DAMAGE_RECEIVE_TIME;                    		// 0x0084 ( 0x0004 ) 
	float                                              SafeSpawn_DISABLE_DISTANCE;                       		// 0x0088 ( 0x0004 ) 
	class TArray< int >                                AssistUIDs;                                       		// 0x008C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< unsigned char >                      AssistType;                                       		// 0x0098 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                KillWeaponType;                                   		// 0x00A4 ( 0x0004 ) 
	unsigned long                                      IsWeaponAiming:1;                                 		// 0x00A8 ( 0x0004 )  [0x00000001]
}; // Size: 0x0080

// Class Engine.wDamageStepOn
class DLL_IMPORT AwDamageStepOn : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.Crushed
class DLL_IMPORT ACrushed : public ADamageType
{
public:
}; // Size: 0x0000

// Class Engine.fell
class DLL_IMPORT Afell : public ADamageType
{
public:
}; // Size: 0x0000

// Class Engine.FellLava
class DLL_IMPORT AFellLava : public Afell
{
public:
}; // Size: 0x0000

// Class Engine.wWeaponAcce
class DLL_IMPORT AwWeaponAcce : public AActor
{
public:
	struct FString                                     szName;                                           		// 0x03C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      AcceType;                                         		// 0x03D4 ( 0x0001 ) 
	struct FVector                                     vAimDiff;                                         		// 0x03D8 ( 0x000C ) 
	int                                                PartsItemID;                                      		// 0x03E4 ( 0x0004 ) 
	int                                                PartsGroupID;                                     		// 0x03E8 ( 0x0004 ) 
	class UStaticMesh*                                 BaseStaticMesh;                                   		// 0x03EC ( 0x0004 ) 
	class UStaticMesh*                                 Scope3DAimMesh;                                   		// 0x03F0 ( 0x0004 ) 
	unsigned long                                      bIsAiming:1;                                      		// 0x03F4 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 bool                      IsAiming (  );                                    		// [ FUNC_Simulated ] Engine.wWeaponAcce.IsAiming
	 void                      Switch3DScope ( bool bAiming );                   		// [ FUNC_Simulated ] Engine.wWeaponAcce.Switch3DScope
	 bool                      Set ( unsigned char Type, struct FString szMesh, struct FVector AimDiff, int iPartsItemID, int iPartsGroupID, bool bUseMeshString );		// [ FUNC_Simulated ] Engine.wWeaponAcce.Set
}; // Size: 0x0030

// Class Engine.Effects
class DLL_IMPORT AEffects : public AActor
{
public:
}; // Size: 0x0000

// Class Engine.wMessage_Score
class DLL_IMPORT AwMessage_Score : public ALocalMessage
{
public:
	struct FString                                     strScore_Default;                                 		// 0x0440 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strScore_Assist;                                  		// 0x044C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strScore_Capture;                                 		// 0x0458 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strScore_BombSetted;                              		// 0x0464 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strScore_BombDiffused;                            		// 0x0470 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	int                                                Code_MessageScore_Normal;                         		// 0x047C ( 0x0004 ) 
	int                                                Code_MessageScore_Heli_Killed;                    		// 0x0480 ( 0x0004 ) 
	int                                                Code_MessageScore_Assist;                         		// 0x0484 ( 0x0004 ) 
	int                                                Code_MessageScore_Assist4;                        		// 0x0488 ( 0x0004 ) 
	int                                                Code_MessageScore_Assist5;                        		// 0x048C ( 0x0004 ) 
	int                                                Code_MessageScore_Assist_Special;                 		// 0x0490 ( 0x0004 ) 
	int                                                Code_MessageScore_Capture;                        		// 0x0494 ( 0x0004 ) 
	int                                                Code_MessageScore_BombSetted;                     		// 0x0498 ( 0x0004 ) 
	int                                                Code_MessageScore_BombDiffused;                   		// 0x049C ( 0x0004 ) 
	int                                                GainPoint_Three;                                  		// 0x04A0 ( 0x0004 ) 
	int                                                GainPoint_Four;                                   		// 0x04A4 ( 0x0004 ) 
	int                                                GainPoint_Five;                                   		// 0x04A8 ( 0x0004 ) 
	int                                                GainPoint_Six;                                    		// 0x04AC ( 0x0004 ) 
	int                                                GainPoint_Ten;                                    		// 0x04B0 ( 0x0004 ) 
	int                                                GainPoint_Twenty;                                 		// 0x04B4 ( 0x0004 ) 
	float                                              TextPosX;                                         		// 0x04B8 ( 0x0004 ) 
	float                                              TextPosY;                                         		// 0x04BC ( 0x0004 ) 
	float                                              fTotalEffectRunTime;                              		// 0x04C0 ( 0x0004 ) 
	float                                              fEffectRunTime1;                                  		// 0x04C4 ( 0x0004 ) 
	float                                              fEffectRunTime2;                                  		// 0x04C8 ( 0x0004 ) 
	float                                              fFadeOutTime;                                     		// 0x04CC ( 0x0004 ) 
	float                                              StartScale;                                       		// 0x04D0 ( 0x0004 ) 
	float                                              ScaleStep;                                        		// 0x04D4 ( 0x0004 ) 
	float                                              ScaleStepMultiplier;                              		// 0x04D8 ( 0x0004 ) 
	struct FString                                     AMessageScoreSound;                               		// 0x04DC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMessageHeadshotSound;                            		// 0x04E8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMessageScoreChainSound;                          		// 0x04F4 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMsgHeliKillSound;                                		// 0x0500 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMsgArtilleryKillSound;                           		// 0x050C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMsgMeleeKillSound;                               		// 0x0518 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMsgGrenadeKillSound;                             		// 0x0524 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMsgStepOnKillSound;                              		// 0x0530 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     AMsgSpecialETCKillSound;                          		// 0x053C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                iMaxDisplayMessage;                               		// 0x0548 ( 0x0004 ) 

	// UScript Functions
	 int                       GetGainPoint ( int Code_MessageScore );           		// [ FUNC_Simulated ] Engine.wMessage_Score.GetGainPoint
	 void                      PlaySoundMessageScore ( class APlayerController* P, struct FString SoundKind );		// [ FUNC_Simulated ] Engine.wMessage_Score.PlaySoundMessageScore
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wMessage_Score.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Score.GetString
}; // Size: 0x010C

// Class Engine.wDamageMelee
class DLL_IMPORT AwDamageMelee : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.DamTypeTelefragged
class DLL_IMPORT ADamTypeTelefragged : public ADamageType
{
public:
}; // Size: 0x0000

// Class Engine.Gibbed
class DLL_IMPORT AGibbed : public ADamageType
{
public:
}; // Size: 0x0000

// Class Engine.PrecacheInterface
class DLL_IMPORT UPrecacheInterface : public UObject
{
public:

	// UScript Functions
	 void                      PrecacheGameSkeletalMeshes ( class ALevelInfo* myLevel );		//  Engine.PrecacheInterface.PrecacheGameSkeletalMeshes
	 void                      PrecacheGameStaticMeshes ( class ALevelInfo* myLevel );		//  Engine.PrecacheInterface.PrecacheGameStaticMeshes
	 void                      PrecacheGameTextures ( class ALevelInfo* myLevel );		//  Engine.PrecacheInterface.PrecacheGameTextures
}; // Size: 0x0000

// Class Engine.Armor
class DLL_IMPORT AArmor : public APowerups
{
public:
	class UClass*                                      ProtectionType;                                   		// 0x0458 ( 0x0004 ) [ CPF_Edit ]
	int                                                ArmorAbsorption;                                  		// 0x045C ( 0x0004 ) [ CPF_Edit ]
	int                                                AbsorptionPriority;                               		// 0x0460 ( 0x0004 ) [ CPF_Edit ]
	class AArmor*                                      NextArmor;                                        		// 0x0464 ( 0x0004 ) 

	// UScript Functions
	 class AArmor*             PrioritizeArmor ( int Damage, class UClass* DamageType, struct FVector HitLocation );		//  Engine.Armor.PrioritizeArmor
	 void                      ArmorImpactEffect ( struct FVector HitLocation ); 		//  Engine.Armor.ArmorImpactEffect
	 int                       ArmorPriority ( class UClass* DamageType );       		//  Engine.Armor.ArmorPriority
	 int                       ArmorAbsorbDamage ( int Damage, class UClass* DamageType, struct FVector HitLocation );		//  Engine.Armor.ArmorAbsorbDamage
}; // Size: 0x0010

// Class Engine.wSkinShell
class DLL_IMPORT AwSkinShell : public AActor
{
public:
	struct FVector                                     vAimDiff;                                         		// 0x03C8 ( 0x000C ) 
}; // Size: 0x000C

// Class Engine.WeaponPickup
class DLL_IMPORT AWeaponPickup : public APickup
{
public:
	unsigned long                                      bWeaponStay:1;                                    		// 0x0424 ( 0x0004 )  [0x00000001]
	unsigned long                                      bThrown:1;                                        		// 0x0424 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	int                                                AmmoAmount[ 0x02 ];                               		// 0x0428 ( 0x0008 ) [ CPF_Edit ]

	// UScript Functions
	 void                      Reset (  );                                       		//  Engine.WeaponPickup.Reset
	 void                      InitDroppedPickupFor ( class AInventory* Inv );   		//  Engine.WeaponPickup.InitDroppedPickupFor
	 float                     GetRespawnTime (  );                              		//  Engine.WeaponPickup.GetRespawnTime
	 float                     BotDesireability ( class APawn* Bot );            		//  Engine.WeaponPickup.BotDesireability
	 float                     DetourWeight ( class APawn* Other, float PathWeight );		//  Engine.WeaponPickup.DetourWeight
	 bool                      AllowRepeatPickup (  );                           		//  Engine.WeaponPickup.AllowRepeatPickup
	 void                      StartSleeping (  );                               		//  Engine.WeaponPickup.StartSleeping
	 void                      UpdateHUD ( class AHUD* H );                      		// [ FUNC_Simulated ] Engine.WeaponPickup.UpdateHUD
	 void                      SetWeaponStay (  );                               		//  Engine.WeaponPickup.SetWeaponStay
	 void                      PostBeginPlay (  );                               		//  Engine.WeaponPickup.PostBeginPlay
}; // Size: 0x000C

// Class Engine.wMeleeFire
class DLL_IMPORT UwMeleeFire : public UwWeaponFire
{
public:
	float                                              frange;                                           		// 0x018C ( 0x0004 ) 
	float                                              fDegree_InsideAngle;                              		// 0x0190 ( 0x0004 ) 
	class AwWeapon*                                    weapon_Old;                                       		// 0x0194 ( 0x0004 ) 
	class USound*                                      sound_Hit;                                        		// 0x0198 ( 0x0004 ) 
	class USound*                                      sound_Miss;                                       		// 0x019C ( 0x0004 ) 
	int                                                tempCount;                                        		// 0x01A0 ( 0x0004 ) 
	unsigned long                                      bApplyMeleeAttackDelay:1;                         		// 0x01A4 ( 0x0004 )  [0x00000001]
	unsigned char                                      ExpressType;                                      		// 0x01A8 ( 0x0001 ) 

	// UScript Functions
	 void                      SetFireAnim (  );                                 		// [ FUNC_Simulated ] Engine.wMeleeFire.SetFireAnim
	 void                      wLoadOut (  );                                    		// [ FUNC_Simulated ] Engine.wMeleeFire.wLoadOut
	 void                      DoTraceTutorial ( struct FVector Start, struct FRotator Dir );		//  Engine.wMeleeFire.DoTraceTutorial
	 void                      DoTrace ( struct FVector Start, struct FRotator Dir );		//  Engine.wMeleeFire.DoTrace
	 float                     GetDamagePerc ( unsigned char HitPart );          		//  Engine.wMeleeFire.GetDamagePerc
	 bool                      FindTarget4 ( struct FVector Start, struct FRotator Dir, class AActor** rTarget, struct FVector* HitLocation );		//  Engine.wMeleeFire.FindTarget4
	 bool                      FindTarget ( struct FVector Start, struct FRotator Dir, class APawn** rTarget, struct FVector* HitLocation );		//  Engine.wMeleeFire.FindTarget
	 bool                      FindTarget3 ( struct FVector Start, struct FRotator Dir, class AActor** rTarget, struct FVector* HitLocation );		//  Engine.wMeleeFire.FindTarget3
	 bool                      FindTarget2 ( struct FVector Start, struct FRotator Dir, class APawn** rTarget, struct FVector* HitLocation, unsigned char* HitCollisionPart );		//  Engine.wMeleeFire.FindTarget2
	 void                      DoFireEffect (  );                                		//  Engine.wMeleeFire.DoFireEffect
	 void                      PlayFiring (  );                                  		//  Engine.wMeleeFire.PlayFiring
	 void                      eventModeDoFire (  );                             		// [ FUNC_Event ] Engine.wMeleeFire.ModeDoFire
}; // Size: 0x0020

// Class Engine.IntClass
class DLL_IMPORT UIntClass : public UObject
{
public:
	int                                                Index;                                            		// 0x002C ( 0x0004 ) 
}; // Size: 0x0004

// Class Engine.wNPCActions
class DLL_IMPORT UwNPCActions : public UObject
{
public:
	unsigned long                                      Fire:1;                                           		// 0x002C ( 0x0004 )  [0x00000001]
	unsigned long                                      FireHelicopter:1;                                 		// 0x002C ( 0x0004 )  [0x00000002]
	unsigned long                                      Reload:1;                                         		// 0x002C ( 0x0004 )  [0x00000004]
	unsigned long                                      Explore:1;                                        		// 0x002C ( 0x0004 )  [0x00000008]
	unsigned long                                      ExploreTutorial:1;                                		// 0x002C ( 0x0004 )  [0x00000010]
	unsigned long                                      IdleHands:1;                                      		// 0x002C ( 0x0004 )  [0x00000020]
	unsigned long                                      ApproachAndMelee:1;                               		// 0x002C ( 0x0004 )  [0x00000040]
	unsigned long                                      MoveToEnemyInfluence:1;                           		// 0x002C ( 0x0004 )  [0x00000080]
	unsigned long                                      MoveToSeeTarget:1;                                		// 0x002C ( 0x0004 )  [0x00000100]
	unsigned long                                      LookAround:1;                                     		// 0x002C ( 0x0004 )  [0x00000200]
	unsigned long                                      UseHelicopter:1;                                  		// 0x002C ( 0x0004 )  [0x00000400]
	unsigned long                                      UseAirstrikeRealTime:1;                           		// 0x002C ( 0x0004 )  [0x00000800]
	unsigned long                                      UseUAV:1;                                         		// 0x002C ( 0x0004 )  [0x00001000]
	unsigned long                                      MeleeNoTarget:1;                                  		// 0x002C ( 0x0004 )  [0x00002000]
	unsigned long                                      ThrowGrenadeRealTime:1;                           		// 0x002C ( 0x0004 )  [0x00004000]
	unsigned long                                      SwitchWeapon:1;                                   		// 0x002C ( 0x0004 )  [0x00008000]
	unsigned long                                      PickHealth:1;                                     		// 0x002C ( 0x0004 )  [0x00010000]
	unsigned long                                      PickHelicopter:1;                                 		// 0x002C ( 0x0004 )  [0x00020000]
	unsigned long                                      PickAirstrike:1;                                  		// 0x002C ( 0x0004 )  [0x00040000]
	unsigned long                                      PickUAV:1;                                        		// 0x002C ( 0x0004 )  [0x00080000]
	unsigned long                                      GotoFlag:1;                                       		// 0x002C ( 0x0004 )  [0x00100000]
	unsigned long                                      CaptureFlag:1;                                    		// 0x002C ( 0x0004 )  [0x00200000]
}; // Size: 0x0004

// Class Engine.wSpecialKillMessage
class DLL_IMPORT AwSpecialKillMessage : public ALocalMessage
{
public:
	struct FString                                     strScore_Heli;                                    		// 0x0440 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_Artillery;                               		// 0x044C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_Headshot;                                		// 0x0458 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_Headshot_Aim;                            		// 0x0464 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_FragGrenade;                             		// 0x0470 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_Melee;                                   		// 0x047C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_StepOn;                                  		// 0x0488 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_SpecialETC;                              		// 0x0494 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_Normal;                                  		// 0x04A0 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_Normal_Aim;                              		// 0x04AC ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     strScore_WallShot;                                		// 0x04B8 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Code_MessageScore_Heli_Killer;                    		// 0x04C4 ( 0x0004 ) 
	int                                                Code_MessageScore_Artillery;                      		// 0x04C8 ( 0x0004 ) 
	int                                                Code_MessageScore_Headshot;                       		// 0x04CC ( 0x0004 ) 
	int                                                Code_MessageScore_Headshot_Aim;                   		// 0x04D0 ( 0x0004 ) 
	int                                                Code_MessageScore_FragGrenade;                    		// 0x04D4 ( 0x0004 ) 
	int                                                Code_MessageScore_Melee;                          		// 0x04D8 ( 0x0004 ) 
	int                                                Code_MessageScore_StepOn;                         		// 0x04DC ( 0x0004 ) 
	int                                                Code_MessageScore_SpecialETC;                     		// 0x04E0 ( 0x0004 ) 
	int                                                Code_MessageScore_Normal;                         		// 0x04E4 ( 0x0004 ) 
	int                                                Code_MessageScore_Normal_Aim;                     		// 0x04E8 ( 0x0004 ) 
	int                                                Code_MessageScore_WallShot;                       		// 0x04EC ( 0x0004 ) 
	float                                              fTotalEffectRunTime;                              		// 0x04F0 ( 0x0004 ) 
	float                                              fEffectRunTime1;                                  		// 0x04F4 ( 0x0004 ) 
	float                                              fEffectRunTime2;                                  		// 0x04F8 ( 0x0004 ) 
	float                                              fFadeOutTime;                                     		// 0x04FC ( 0x0004 ) 
	class USound*                                      HeadShotSound;                                    		// 0x0500 ( 0x0004 ) 
	struct FName                                       AHeadShotSound;                                   		// 0x0504 ( 0x0004 ) 

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wSpecialKillMessage.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wSpecialKillMessage.GetString
}; // Size: 0x00C8

// Class Engine.MapList
class DLL_IMPORT AMapList : public AInfo
{
public:
	class TArray< struct FMapRecord >                  CachedMaps;                                       		// 0x041C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Maps;                                             		// 0x0428 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	int                                                MapNum;                                           		// 0x0434 ( 0x0004 ) 

	// UScript Functions
	 bool                      SetMaplist ( int CurrentNum, class TArray< struct FString > NewMaps );		//  Engine.MapList.SetMaplist
	 bool                      StaticHasInvalidMaps ( bool bReadOnly );          		//  Engine.MapList.StaticHasInvalidMaps
	 bool                      HasInvalidMaps ( bool bReadOnly );                		//  Engine.MapList.HasInvalidMaps
	 class TArray< struct FString > StaticGetMaps (  );                               		//  Engine.MapList.StaticGetMaps
	 class TArray< struct FString > GetMaps (  );                                     		//  Engine.MapList.GetMaps
	 struct FString            GetMap ( int MapIndex );                          		//  Engine.MapList.GetMap
	 int                       FindCacheIndex ( struct FString MapName );        		//  Engine.MapList.FindCacheIndex
	 struct FString            UpdateMapNum ( int NewMapNum );                   		//  Engine.MapList.UpdateMapNum
	 struct FString            GetNextMap (  );                                  		//  Engine.MapList.GetNextMap
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.MapList.PostBeginPlay
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.MapList.PreBeginPlay
}; // Size: 0x001C

// Class Engine.wDamageFlameThrower
class DLL_IMPORT AwDamageFlameThrower : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.wDamageGR
class DLL_IMPORT AwDamageGR : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.wDamageRPG
class DLL_IMPORT AwDamageRPG : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.wDamageChangedHost
class DLL_IMPORT AwDamageChangedHost : public AwDamageType
{
public:
}; // Size: 0x0000

// Class Engine.wMultiKillMessage
class DLL_IMPORT AwMultiKillMessage : public ALocalMessage
{
public:
	struct FString                                     KillString[ 0x0F ];                               		// 0x0440 ( 0x00B4 ) [ CPF_NeedCtorLink ]
	class USound*                                      KillSound[ 0x07 ];                                		// 0x04F4 ( 0x001C ) 
	struct FString                                     KillSoundName[ 0x07 ];                            		// 0x0510 ( 0x0054 ) [ CPF_NeedCtorLink ]
	struct FName                                       MuliKillSoundName[ 0x05 ];                        		// 0x0564 ( 0x0014 ) 

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wMultiKillMessage.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMultiKillMessage.GetString
}; // Size: 0x0138

// Class Engine.wMessage_BGM
class DLL_IMPORT AwMessage_BGM : public ALocalMessage
{
public:
	int                                                Code_Start;                                       		// 0x0440 ( 0x0004 ) 
	int                                                Code_Combat;                                      		// 0x0444 ( 0x0004 ) 
	int                                                Code_WinAF;                                       		// 0x0448 ( 0x0004 ) 
	int                                                Code_WinRSA;                                      		// 0x044C ( 0x0004 ) 
	int                                                Code_LoseAF;                                      		// 0x0450 ( 0x0004 ) 
	int                                                Code_LoseRSA;                                     		// 0x0454 ( 0x0004 ) 
	int                                                Code_AlmostOverLead;                              		// 0x0458 ( 0x0004 ) 
	int                                                Code_AlmostOverFallBehind;                        		// 0x045C ( 0x0004 ) 
	int                                                BGMDuration;                                      		// 0x0460 ( 0x0004 ) 
	int                                                BGMInterval;                                      		// 0x0464 ( 0x0004 ) 

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_BGM.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_BGM.GetString
}; // Size: 0x0028

// Class Engine.WaitView
class DLL_IMPORT AWaitView : public ASmallNavigationPoint
{
public:
}; // Size: 0x0000

// Class Engine.WaitViewNoTeam
class DLL_IMPORT AWaitViewNoTeam : public AWaitView
{
public:
}; // Size: 0x0000

// Class Engine.GameRules
class DLL_IMPORT AGameRules : public AInfo
{
public:
	class AGameRules*                                  NextGameRules;                                    		// 0x041C ( 0x0004 ) 

	// UScript Functions
	 int                       NetDamage ( int OriginalDamage, int Damage, class APawn* injured, class APawn* instigatedBy, struct FVector HitLocation, class UClass* DamageType, struct FVector* Momentum );		//  Engine.GameRules.NetDamage
	 bool                      CriticalPlayer ( class AController* Other );      		//  Engine.GameRules.CriticalPlayer
	 void                      ScoreKill ( class AController* Killer, class AController* Killed );		//  Engine.GameRules.ScoreKill
	 void                      ScoreObjective ( class APlayerReplicationInfo* Scorer, int Score );		//  Engine.GameRules.ScoreObjective
	 bool                      PreventSever ( class APawn* Killed, struct FName BoneName, int Damage, class UClass* DamageType );		//  Engine.GameRules.PreventSever
	 bool                      PreventDeath ( class APawn* Killed, class AController* Killer, class UClass* DamageType, struct FVector HitLocation );		//  Engine.GameRules.PreventDeath
	 bool                      OverridePickupQuery ( class APawn* Other, class APickup* Item, unsigned char* bAllowPickup );		//  Engine.GameRules.OverridePickupQuery
	 bool                      CheckScore ( class APlayerReplicationInfo* Scorer );		//  Engine.GameRules.CheckScore
	 bool                      CheckEndGame ( class APlayerReplicationInfo* Winner, struct FString Reason );		//  Engine.GameRules.CheckEndGame
	 bool                      HandleRestartGame (  );                           		//  Engine.GameRules.HandleRestartGame
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  Engine.GameRules.GetServerDetails
	 struct FString            GetRules (  );                                    		//  Engine.GameRules.GetRules
	 class ANavigationPoint*   FindPlayerStart ( class AController* Player, unsigned char inTeam, struct FString incomingName );		//  Engine.GameRules.FindPlayerStart
	 void                      AddGameRules ( class AGameRules* GR );            		//  Engine.GameRules.AddGameRules
}; // Size: 0x0004

// Class Engine.MessagingSpectator
class DLL_IMPORT AMessagingSpectator : public APlayerController
{
public:

	// UScript Functions
	 void                      InitPlayerReplicationInfo (  );                   		//  Engine.MessagingSpectator.InitPlayerReplicationInfo
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.MessagingSpectator.PostBeginPlay
}; // Size: 0x0000

// Class Engine.PlayerStart_Defence
class DLL_IMPORT APlayerStart_Defence : public APlayerStart
{
public:
	unsigned char                                      eTeamType;                                        		// 0x04B4 ( 0x0001 ) [ CPF_Edit ]
	int                                                RegenLoc;                                         		// 0x04B8 ( 0x0004 ) [ CPF_Edit ]
}; // Size: 0x0008

// Class Engine.VotingHandler
class DLL_IMPORT AVotingHandler : public AInfo
{
public:

	// UScript Functions
	 void                      GetServerDetails ( struct FServerResponseLine* ServerState );		//  Engine.VotingHandler.GetServerDetails
	 void                      ReloadAll ( bool bParam );                        		//  Engine.VotingHandler.ReloadAll
	 bool                      IsEnabled (  );                                   		//  Engine.VotingHandler.IsEnabled
	 void                      FillPlayInfo ( class UPlayInfo* PlayInfo );       		//  Engine.VotingHandler.FillPlayInfo
	 int                       GetConfigArrayItemCount ( struct FString ConfigArrayName );		//  Engine.VotingHandler.GetConfigArrayItemCount
	 void                      UpdateConfigArrayItem ( struct FString ConfigArrayName, int RowIndex, int ColumnIndex, struct FString NewValue );		//  Engine.VotingHandler.UpdateConfigArrayItem
	 int                       AddConfigArrayItem ( struct FString ConfigArrayName );		//  Engine.VotingHandler.AddConfigArrayItem
	 void                      DeleteConfigArrayItem ( struct FString ConfigArrayName, int RowIndex );		//  Engine.VotingHandler.DeleteConfigArrayItem
	 struct FString            GetConfigArrayColumnTitle ( struct FString ConfigArrayName, int ColumnIndex );		//  Engine.VotingHandler.GetConfigArrayColumnTitle
	 struct FString            GetConfigArrayData ( struct FString ConfigArrayName, int RowIndex, int ColumnIndex );		//  Engine.VotingHandler.GetConfigArrayData
	 bool                      HandleRestartGame (  );                           		//  Engine.VotingHandler.HandleRestartGame
	 void                      PlayerExit ( class AController* Exiting );        		//  Engine.VotingHandler.PlayerExit
	 void                      PlayerJoin ( class APlayerController* Player );   		//  Engine.VotingHandler.PlayerJoin
}; // Size: 0x0000

// Class Engine.Satellite
class DLL_IMPORT ASatellite : public ASmallNavigationPoint
{
public:
}; // Size: 0x0000

// Class Engine.MaplistManager
class DLL_IMPORT AMaplistManager : public AMaplistManagerBase
{
public:
	class TArray< struct FGameRecordGroup >            Games;                                            		// 0x041C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     MaplistRecordNames;                               		// 0x0428 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FGameRecord >                 CachedGames;                                      		// 0x0434 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FMaplistRecordGroup >         Groups;                                           		// 0x0440 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DefaultListName;                                  		// 0x044C ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     InvalidGameType;                                  		// 0x0458 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     ReallyInvalidGameType;                            		// 0x0464 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     DefaultListExists;                                		// 0x0470 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	unsigned long                                      bDirty:1;                                         		// 0x047C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 bool                      MaplistDirty ( int GameIndex, int RecordIndex );  		//  Engine.MaplistManager.MaplistDirty
	 bool                      ValidName ( struct FString S );                   		//  Engine.MaplistManager.ValidName
	 bool                      ValidGameType ( struct FString GameType );        		//  Engine.MaplistManager.ValidGameType
	 bool                      ValidGameIndex ( int i );                         		//  Engine.MaplistManager.ValidGameIndex
	 bool                      ValidCacheGameIndex ( int i );                    		//  Engine.MaplistManager.ValidCacheGameIndex
	 int                       GetActiveMap ( int GameIndex, int RecordIndex );  		//  Engine.MaplistManager.GetActiveMap
	 int                       GetActiveList ( int GameIndex );                  		//  Engine.MaplistManager.GetActiveList
	 struct FString            GetMapListTitle ( int GameIndex, int RecordIndex );		//  Engine.MaplistManager.GetMapListTitle
	 int                       GetRecordIndex ( int GameIndex, struct FString MapListName );		//  Engine.MaplistManager.GetRecordIndex
	 int                       GetMapIndex ( int GameIndex, int RecordIndex, struct FString MapName );		//  Engine.MaplistManager.GetMapIndex
	 int                       FindMaplistContaining ( int GameIndex, struct FString MapName );		//  Engine.MaplistManager.FindMaplistContaining
	 class TArray< struct FString > GetCacheMapList ( struct FString Acronym );       		//  Engine.MaplistManager.GetCacheMapList
	 bool                      GetAvailableMaps ( int GameIndex, class TArray< struct FMapItem >* AR );		//  Engine.MaplistManager.GetAvailableMaps
	 class TArray< struct FString > GetMapList ( int GameIndex, int RecordIndex );    		//  Engine.MaplistManager.GetMapList
	 struct FString            GetMapURL ( int GameIndex, int RecordIndex, int MapIndex );		//  Engine.MaplistManager.GetMapURL
	 struct FString            GetMapTitle ( int GameIndex, int RecordIndex, int MapIndex );		//  Engine.MaplistManager.GetMapTitle
	 struct FString            GetActiveMapName ( int GameIndex, int RecordIndex );		//  Engine.MaplistManager.GetActiveMapName
	 class TArray< struct FString > GetCurrentMapRotation (  );                       		//  Engine.MaplistManager.GetCurrentMapRotation
	 class TArray< struct FString > GetMapListNames ( int GameIndex );                		//  Engine.MaplistManager.GetMapListNames
	 int                       GetCacheGameIndex ( struct FString GameType );    		//  Engine.MaplistManager.GetCacheGameIndex
	 int                       GetGameIndex ( struct FString GameType );         		//  Engine.MaplistManager.GetGameIndex
	 int                       SetActiveMap ( int GameIndex, int RecordIndex, int MapIndex );		//  Engine.MaplistManager.SetActiveMap
	 void                      ShiftMap ( int GameIndex, int RecordIndex, struct FString MapName, int Count );		//  Engine.MaplistManager.ShiftMap
	 bool                      RemoveMap ( int GameIndex, int RecordIndex, struct FString MapName );		//  Engine.MaplistManager.RemoveMap
	 bool                      InsertMap ( int GameIndex, int RecordIndex, struct FString MapName, int ListIndex );		//  Engine.MaplistManager.InsertMap
	 bool                      AddMap ( int GameIndex, int RecordIndex, struct FString MapName );		//  Engine.MaplistManager.AddMap
	 bool                      SetActiveList ( int GameIndex, int NewActive );   		//  Engine.MaplistManager.SetActiveList
	 bool                      ApplyMapList ( int GameIndex, int RecordIndex );  		//  Engine.MaplistManager.ApplyMapList
	 void                      ResetGame ( int GameIndex );                      		//  Engine.MaplistManager.ResetGame
	 bool                      SaveGame ( int GameIndex );                       		//  Engine.MaplistManager.SaveGame
	 void                      ResetList ( int GameIndex, int RecordIndex );     		//  Engine.MaplistManager.ResetList
	 bool                      ClearList ( int GameIndex, int RecordIndex );     		//  Engine.MaplistManager.ClearList
	 bool                      SaveMapList ( int GameIndex, int RecordIndex );   		//  Engine.MaplistManager.SaveMapList
	 int                       RemoveList ( int GameIndex, int RecordIndex );    		//  Engine.MaplistManager.RemoveList
	 int                       RenameList ( int GameIndex, int RecordIndex, struct FString NewName );		//  Engine.MaplistManager.RenameList
	 int                       AddList ( struct FString GameType, struct FString NewName, class TArray< struct FString > Maps );		//  Engine.MaplistManager.AddList
	 void                      MapChange ( struct FString NewMap );              		//  Engine.MaplistManager.MapChange
	 bool                      ValidRecordIndex ( int GameIndex, int MapListIndex );		//  Engine.MaplistManager.ValidRecordIndex
	 class TArray< class UMaplistRecord* > GetRecords ( int GameIndex );                     		//  Engine.MaplistManager.GetRecords
	 bool                      IsNewGameType ( struct FString GameClassName );   		//  Engine.MaplistManager.IsNewGameType
	 class UMaplistRecord*     CreateRecord ( struct FString RecordName );       		//  Engine.MaplistManager.CreateRecord
	 void                      Save (  );                                        		//  Engine.MaplistManager.Save
	 int                       GetStoredGameIndex ( struct FString GameType );   		//  Engine.MaplistManager.GetStoredGameIndex
	 int                       RemoveRecord ( int GameIndex, int RecordIndex );  		//  Engine.MaplistManager.RemoveRecord
	 bool                      RemoveGame ( int i );                             		//  Engine.MaplistManager.RemoveGame
	 void                      GenerateGroupMaplist ( int GroupIndex );          		//  Engine.MaplistManager.GenerateGroupMaplist
	 int                       AddGameType ( struct FString NewGameType );       		//  Engine.MaplistManager.AddGameType
	 int                       AddGroup ( struct FString GameType );             		//  Engine.MaplistManager.AddGroup
	 int                       AddMaplistRecord ( class UMaplistRecord* Rec );   		//  Engine.MaplistManager.AddMaplistRecord
	 void                      InitializeActiveLists (  );                       		//  Engine.MaplistManager.InitializeActiveLists
	 void                      InitializeMaplistRecords (  );                    		//  Engine.MaplistManager.InitializeMaplistRecords
	 bool                      GetDefaultMaps ( struct FString MapListClassName, class TArray< struct FString >* Maps );		//  Engine.MaplistManager.GetDefaultMaps
	 void                      CreateDefaultList ( int i );                      		//  Engine.MaplistManager.CreateDefaultList
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] Engine.MaplistManager.Destroyed
	 void                      eventPreBeginPlay (  );                           		// [ FUNC_Event ] Engine.MaplistManager.PreBeginPlay
}; // Size: 0x0064

// Class Engine.EmitterFirstPerson
class DLL_IMPORT AEmitterFirstPerson : public AEmitter
{
public:

	// UScript Functions
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Event ] Engine.EmitterFirstPerson.PostNetBeginPlay
	 void                      DestroyIfThirdPerson (  );                        		// [ FUNC_Simulated ] Engine.EmitterFirstPerson.DestroyIfThirdPerson
}; // Size: 0x0000

// Class Engine.DamRanOver
class DLL_IMPORT ADamRanOver : public ADamageType
{
public:
}; // Size: 0x0000

// Class Engine.ShadowProjector
class DLL_IMPORT AShadowProjector : public AProjector
{
public:
	class AActor*                                      ShadowActor;                                      		// 0x0558 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     LightLocation;                                    		// 0x055C ( 0x000C ) [ CPF_Edit ]
	struct FVector                                     LightDirection;                                   		// 0x0568 ( 0x000C ) [ CPF_Edit ]
	float                                              LightDistance;                                    		// 0x0574 ( 0x0004 ) [ CPF_Edit ]
	unsigned long                                      RootMotion:1;                                     		// 0x0578 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bBlobShadow:1;                                    		// 0x0578 ( 0x0004 )  [0x00000002][ CPF_Edit ]
	unsigned long                                      bShadowActive:1;                                  		// 0x0578 ( 0x0004 )  [0x00000004][ CPF_Edit ]
	class UShadowBitmapMaterial*                       ShadowTexture;                                    		// 0x057C ( 0x0004 ) 

	// UScript Functions
	 void                      LightUpdate ( class TArray< class AActor* > LightSources );		// [ FUNC_Simulated ] Engine.ShadowProjector.LightUpdate
	 void                      UpdateSunLight ( struct FVector SunDir );         		// [ FUNC_Simulated ] Engine.ShadowProjector.UpdateSunLight
	 void                      Tick ( float DeltaTime );                         		//  Engine.ShadowProjector.Tick
	 void                      UpdateShadow (  );                                		//  Engine.ShadowProjector.UpdateShadow
	 void                      InitShadow (  );                                  		//  Engine.ShadowProjector.InitShadow
	 void                      eventDestroyed (  );                              		// [ FUNC_Event ] Engine.ShadowProjector.Destroyed
	 void                      eventPostBeginPlay (  );                          		// [ FUNC_Event ] Engine.ShadowProjector.PostBeginPlay
}; // Size: 0x0028

// Class Engine.HudOverlay
class DLL_IMPORT AHudOverlay : public AActor
{
public:

	// UScript Functions
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.HudOverlay.Destroyed
	 void                      Render ( class UCanvas* C );                      		// [ FUNC_Simulated ] Engine.HudOverlay.Render
}; // Size: 0x0000

// Class Engine.FailedConnect
class DLL_IMPORT AFailedConnect : public ALocalMessage
{
public:
	struct FString                                     FailMessage[ 0x04 ];                              		// 0x0440 ( 0x0030 ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.FailedConnect.GetString
	 int                       GetFailSwitch ( struct FString FailString );      		//  Engine.FailedConnect.GetFailSwitch
}; // Size: 0x0030

// Class Engine.wSkill
class DLL_IMPORT UwSkill : public UObject
{
public:
	class UwSkillBase*                                 Base;                                             		// 0x002C ( 0x0004 ) 
	int                                                SkillID;                                          		// 0x0030 ( 0x0004 ) 
	int                                                AttachWeaponID;                                   		// 0x0034 ( 0x0004 ) 
	unsigned long                                      IsEnable:1;                                       		// 0x0038 ( 0x0004 )  [0x00000001]
	unsigned long                                      bUsed:1;                                          		// 0x0038 ( 0x0004 )  [0x00000002]
	unsigned char                                      byAddCount;                                       		// 0x003C ( 0x0001 ) 
	unsigned long                                      bUpdateCall:1;                                    		// 0x0040 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      SetbUpdateCall ( bool bValue );                   		// [ FUNC_Simulated ] Engine.wSkill.SetbUpdateCall
	 void                      SetbyAddCount ( unsigned char byValue );          		// [ FUNC_Simulated ] Engine.wSkill.SetbyAddCount
	 void                      SetbUsed ( bool bValue );                         		// [ FUNC_Simulated ] Engine.wSkill.SetbUsed
	 void                      SetIsEnable ( bool bValue );                      		// [ FUNC_Simulated ] Engine.wSkill.SetIsEnable
	 void                      UsedbyWeapon (  );                                		// [ FUNC_Simulated ] Engine.wSkill.UsedbyWeapon
	 void                      Initialize ( class UwSkillBase* SkillBase, class UwSkillBaseParam* Param );		// [ FUNC_Simulated ] Engine.wSkill.Initialize
	 void                      DeadPlayer (  );                                  		// [ FUNC_Simulated ] Engine.wSkill.DeadPlayer
	 void                      RemoveSkill (  );                                 		// [ FUNC_Simulated ] Engine.wSkill.RemoveSkill
	 void                      UpdateProcess (  );                               		// [ FUNC_Simulated ] Engine.wSkill.UpdateProcess
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wSkill.PostBeginPlay
}; // Size: 0x0018

// Class Engine.wSkill_RestoreSupply
class DLL_IMPORT UwSkill_RestoreSupply : public UwSkill
{
public:
	unsigned long                                      bAirStrike:1;                                     		// 0x0044 ( 0x0004 )  [0x00000001]
	unsigned long                                      bHeli:1;                                          		// 0x0044 ( 0x0004 )  [0x00000002]
	unsigned long                                      bUAV:1;                                           		// 0x0044 ( 0x0004 )  [0x00000004]
	int                                                iAirWeaponID;                                     		// 0x0048 ( 0x0004 ) 
	int                                                iHeliWeaponID;                                    		// 0x004C ( 0x0004 ) 
	int                                                iUAVWeaponID;                                     		// 0x0050 ( 0x0004 ) 

	// UScript Functions
	 void                      UpdateProcess (  );                               		// [ FUNC_Simulated ] Engine.wSkill_RestoreSupply.UpdateProcess
	 void                      RemoveSupplyItem ( unsigned char byType );        		// [ FUNC_Simulated ] Engine.wSkill_RestoreSupply.RemoveSupplyItem
	 void                      SetSupplyItem ( unsigned char byType );           		// [ FUNC_Simulated ] Engine.wSkill_RestoreSupply.SetSupplyItem
	 void                      RemoveSkill (  );                                 		// [ FUNC_Simulated ] Engine.wSkill_RestoreSupply.RemoveSkill
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wSkill_RestoreSupply.PostBeginPlay
}; // Size: 0x0010

// Class Engine.wAimFire
class DLL_IMPORT UwAimFire : public UwWeaponFire
{
public:
	float                                              fZoomFOV;                                         		// 0x018C ( 0x0004 ) 
	unsigned long                                      bCurrAim:1;                                       		// 0x0190 ( 0x0004 )  [0x00000001][ CPF_Transient ]
	unsigned long                                      bInstantFOV:1;                                    		// 0x0190 ( 0x0004 )  [0x00000002]

	// UScript Functions
	 void                      eventModeDoFire (  );                             		// [ FUNC_Event ] Engine.wAimFire.ModeDoFire
	 void                      PlayFireEnd (  );                                 		//  Engine.wAimFire.PlayFireEnd
	 void                      SetFOV ( bool bFOV );                             		//  Engine.wAimFire.SetFOV
	 void                      SetAim ( bool bAim );                             		//  Engine.wAimFire.SetAim
	 void                      ShakeView (  );                                   		//  Engine.wAimFire.ShakeView
	 bool                      RenderOverlays ( class UCanvas* Canv );           		// [ FUNC_Simulated ] Engine.wAimFire.RenderOverlays
	 void                      wLoadOut (  );                                    		// [ FUNC_Simulated ] Engine.wAimFire.wLoadOut
	 void                      StartMuzzleSmoke (  );                            		//  Engine.wAimFire.StartMuzzleSmoke
	 void                      FlashMuzzleFlash (  );                            		//  Engine.wAimFire.FlashMuzzleFlash
	 void                      PlayFiring (  );                                  		//  Engine.wAimFire.PlayFiring
}; // Size: 0x0008

// Class Engine.wZoomFire3D
class DLL_IMPORT UwZoomFire3D : public UwAimFire
{
public:
	struct FString                                     szTexZoomName;                                    		// 0x0194 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UTexture*                                    TexZoom;                                          		// 0x01A0 ( 0x0004 ) 
	class AwGun*                                       Gun;                                              		// 0x01A4 ( 0x0004 ) 
	float                                              fBlendTime;                                       		// 0x01A8 ( 0x0004 ) 
	float                                              fBlendCurr;                                       		// 0x01AC ( 0x0004 ) 
	float                                              fLastBlend;                                       		// 0x01B0 ( 0x0004 ) 
	unsigned char                                      FormerWAS;                                        		// 0x01B4 ( 0x0001 ) 

	// UScript Functions
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.wZoomFire3D.DisplayDebug
	 bool                      RenderOverlays ( class UCanvas* Canv );           		// [ FUNC_Simulated ] Engine.wZoomFire3D.RenderOverlays
	 void                      eventModeTick ( float dt );                       		// [ FUNC_Event ] Engine.wZoomFire3D.ModeTick
	 void                      PlayFireEnd (  );                                 		//  Engine.wZoomFire3D.PlayFireEnd
	 void                      Switch3DScope ( bool bAiming );                   		//  Engine.wZoomFire3D.Switch3DScope
	 void                      SetFOV ( bool bFOV );                             		//  Engine.wZoomFire3D.SetFOV
	 void                      SetAim ( bool bAim );                             		//  Engine.wZoomFire3D.SetAim
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wZoomFire3D.PostBeginPlay
}; // Size: 0x0024

// Class Engine.EFFECT_WaterVolume
class DLL_IMPORT UEFFECT_WaterVolume : public UI3DL2Listener
{
public:
}; // Size: 0x0000

// Class Engine.wAdminBase
class DLL_IMPORT UwAdminBase : public UObject
{
public:
}; // Size: 0x0000

// Class Engine.wAdminUser
class DLL_IMPORT UwAdminUser : public UwAdminBase
{
public:
	struct FString                                     UserName;                                         		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Password;                                         		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Privileges;                                       		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MergedPrivs;                                      		// 0x0050 ( 0x000C ) [ CPF_NeedCtorLink ]
	class UwAdminGroupList*                            Groups;                                           		// 0x005C ( 0x0004 ) 
	class UwAdminGroupList*                            ManagedGroups;                                    		// 0x0060 ( 0x0004 ) 
	unsigned long                                      bMasterAdmin:1;                                   		// 0x0064 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      UnlinkGroups (  );                                		//  Engine.wAdminUser.UnlinkGroups
	 class UwAdminUserList*    GetManagedUsers ( class UwAdminGroupList* uAllGroups );		//  Engine.wAdminUser.GetManagedUsers
	 class UwAdminGroup*       GetManagedGroup ( struct FString GroupName );     		//  Engine.wAdminUser.GetManagedGroup
	 class UwAdminGroup*       GetGroup ( struct FString GroupName );            		//  Engine.wAdminUser.GetGroup
	 int                       MaxSecLevel (  );                                 		//  Engine.wAdminUser.MaxSecLevel
	 bool                      ValidName ( struct FString uname );               		//  Engine.wAdminUser.ValidName
	 bool                      ValidPass ( struct FString upass );               		//  Engine.wAdminUser.ValidPass
	 bool                      CanManageUser ( class UwAdminUser* User );        		//  Engine.wAdminUser.CanManageUser
	 bool                      CanManageGroup ( class UwAdminGroup* Group );     		//  Engine.wAdminUser.CanManageGroup
	 void                      MergePrivs ( struct FString newprivs );           		//  Engine.wAdminUser.MergePrivs
	 void                      RedoMergedPrivs (  );                             		//  Engine.wAdminUser.RedoMergedPrivs
	 bool                      HasPrivilege ( struct FString priv );             		//  Engine.wAdminUser.HasPrivilege
	 void                      AddManagedGroupsByName ( class UwAdminGroupList* lGroups, class TArray< struct FString > aGroupNames );		//  Engine.wAdminUser.AddManagedGroupsByName
	 void                      AddGroupsByName ( class UwAdminGroupList* lGroups, class TArray< struct FString > aGroupNames );		//  Engine.wAdminUser.AddGroupsByName
	 void                      RemoveManagedGroup ( class UwAdminGroup* Group ); 		//  Engine.wAdminUser.RemoveManagedGroup
	 void                      AddManagedGroup ( class UwAdminGroup* Group );    		//  Engine.wAdminUser.AddManagedGroup
	 void                      RemoveGroup ( class UwAdminGroup* Group );        		//  Engine.wAdminUser.RemoveGroup
	 void                      AddGroup ( class UwAdminGroup* Group );           		//  Engine.wAdminUser.AddGroup
	 void                      Init ( struct FString uname, struct FString PASS, struct FString privs );		//  Engine.wAdminUser.Init
	 void                      Created (  );                                     		//  Engine.wAdminUser.Created
}; // Size: 0x003C

// Class Engine.wAdminGroup
class DLL_IMPORT UwAdminGroup : public UwAdminBase
{
public:
	struct FString                                     GroupName;                                        		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     Privileges;                                       		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]
	unsigned char                                      GameSecLevel;                                     		// 0x0044 ( 0x0001 ) 
	class UwAdminUserList*                             Users;                                            		// 0x0048 ( 0x0004 ) 
	class UwAdminUserList*                             Managers;                                         		// 0x004C ( 0x0004 ) 
	unsigned long                                      bMasterAdmin:1;                                   		// 0x0050 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 bool                      HasPrivilege ( struct FString priv );             		//  Engine.wAdminGroup.HasPrivilege
	 void                      RemoveUser ( class UwAdminUser* User );           		//  Engine.wAdminGroup.RemoveUser
	 void                      UnlinkUsers (  );                                 		//  Engine.wAdminGroup.UnlinkUsers
	 bool                      ValidName ( struct FString uname );               		//  Engine.wAdminGroup.ValidName
	 void                      SetPrivs ( struct FString privs );                		//  Engine.wAdminGroup.SetPrivs
	 void                      Init ( struct FString sGroupName, struct FString sPrivileges, unsigned char nGameSecLevel );		//  Engine.wAdminGroup.Init
	 void                      Created (  );                                     		//  Engine.wAdminGroup.Created
}; // Size: 0x0028

// Class Engine.wAdminUserList
class DLL_IMPORT UwAdminUserList : public UwAdminBase
{
public:
	class TArray< class UwAdminUser* >                 Users;                                            		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 class UwAdminUser*        FindByName ( struct FString UserName );           		//  Engine.wAdminUserList.FindByName
	 bool                      Contains ( class UwAdminUser* User );             		//  Engine.wAdminUserList.Contains
	 void                      Clear (  );                                       		//  Engine.wAdminUserList.Clear
	 void                      Remove ( class UwAdminUser* User );               		//  Engine.wAdminUserList.Remove
	 class UwAdminUser*        Get ( int i );                                    		//  Engine.wAdminUserList.Get
	 void                      Add ( class UwAdminUser* NewUser );               		//  Engine.wAdminUserList.Add
	 class UwAdminUser*        Create ( struct FString UserName, struct FString Password, struct FString Privileges );		//  Engine.wAdminUserList.Create
	 int                       Count (  );                                       		//  Engine.wAdminUserList.Count
}; // Size: 0x000C

// Class Engine.wAdminGroupList
class DLL_IMPORT UwAdminGroupList : public UwAdminBase
{
public:
	class TArray< class UwAdminGroup* >                Groups;                                           		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      Clear (  );                                       		//  Engine.wAdminGroupList.Clear
	 class UwAdminGroup*       FindMasterGroup (  );                             		//  Engine.wAdminGroupList.FindMasterGroup
	 bool                      Contains ( class UwAdminGroup* Group );           		//  Engine.wAdminGroupList.Contains
	 class UwAdminGroup*       FindByName ( struct FString GroupName );          		//  Engine.wAdminGroupList.FindByName
	 class UwAdminGroup*       Get ( int Index );                                		//  Engine.wAdminGroupList.Get
	 void                      Remove ( class UwAdminGroup* Group );             		//  Engine.wAdminGroupList.Remove
	 void                      Add ( class UwAdminGroup* Group );                		//  Engine.wAdminGroupList.Add
	 class UwAdminGroup*       CreateGroup ( struct FString GroupName, struct FString Privileges, unsigned char GameSecLevel );		//  Engine.wAdminGroupList.CreateGroup
	 int                       Count (  );                                       		//  Engine.wAdminGroupList.Count
}; // Size: 0x000C

// Class Engine.wPrivilegeBase
class DLL_IMPORT UwPrivilegeBase : public UObject
{
public:
	struct FString                                     LoadMsg;                                          		// 0x002C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     MainPrivs;                                        		// 0x0038 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     SubPrivs;                                         		// 0x0044 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FString >                     Tags;                                             		// 0x0050 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      eventCreated (  );                                		// [ FUNC_Event ] Engine.wPrivilegeBase.Created
}; // Size: 0x0030

// Class Engine.Admin
class DLL_IMPORT UAdmin : public UAdminBase
{
public:

	// UScript Functions
	 void                      DoLogout (  );                                    		//  Engine.Admin.DoLogout
	 void                      DoLogin ( struct FString UserName, struct FString Password );		//  Engine.Admin.DoLogin
}; // Size: 0x0000

// Class Engine.Fragment
class DLL_IMPORT AFragment : public AEffects
{
public:
	class UMesh*                                       Fragments[ 0x0B ];                                		// 0x03C8 ( 0x002C ) [ CPF_Edit ]
	int                                                numFragmentTypes;                                 		// 0x03F4 ( 0x0004 ) 
	unsigned long                                      bFirstHit:1;                                      		// 0x03F8 ( 0x0004 )  [0x00000001]
	class USound*                                      ImpactSound;                                      		// 0x03FC ( 0x0004 ) [ CPF_Edit ]
	class USound*                                      AltImpactSound;                                   		// 0x0400 ( 0x0004 ) [ CPF_Edit ]
	float                                              SplashTime;                                       		// 0x0404 ( 0x0004 ) [ CPF_Edit ]

	// UScript Functions
	 void                      RandSpin ( float spinRate );                      		// [ FUNC_Final | FUNC_Simulated ] Engine.Fragment.RandSpin
	 void                      HitWall ( struct FVector HitNormal, class AActor* HitWall, class UMaterial* HitMaterial );		// [ FUNC_Simulated ] Engine.Fragment.HitWall
	 void                      CalcVelocity ( struct FVector Momentum );         		// [ FUNC_Simulated ] Engine.Fragment.CalcVelocity
	 bool                      CanSplash (  );                                   		//  Engine.Fragment.CanSplash
}; // Size: 0x0040

// Class Engine.UnitTest
class DLL_IMPORT AUnitTest : public AActor
{
public:
	struct FString                                     PASS;                                             		// 0x03C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     FAIL;                                             		// 0x03D4 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                MinFunc;                                          		// 0x03E0 ( 0x0004 ) 
	int                                                MaxFunc;                                          		// 0x03E4 ( 0x0004 ) 
	class TArray< class AActor* >                      PendingDestroyQ;                                  		// 0x03E8 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      DQ (  );                                          		//  Engine.UnitTest.DQ
	 class AActor*             EQ ( class AActor* A );                           		//  Engine.UnitTest.EQ
	 struct FString            Check ( bool Valid, struct FString Msg );         		//  Engine.UnitTest.Check
	 struct FString            RunUnitTest ( int SW );                           		//  Engine.UnitTest.RunUnitTest
	 void                      TestTearOff (  );                                 		//  Engine.UnitTest.TestTearOff
	 void                      TestSetup (  );                                   		//  Engine.UnitTest.TestSetup
	 void                      FixtureTearOff (  );                              		//  Engine.UnitTest.FixtureTearOff
	 void                      FixtureSetup (  );                                		//  Engine.UnitTest.FixtureSetup
}; // Size: 0x002C

// Class Engine.wFPWeaponAttachment
class DLL_IMPORT AwFPWeaponAttachment : public AActor
{
public:
	class TArray< class AwWeaponAcce* >                Parts;                                            		// 0x03C8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class AwSkinShell*                                 Hands;                                            		// 0x03D4 ( 0x0004 ) 
	class AwSkinShell*                                 wWarhead;                                         		// 0x03D8 ( 0x0004 ) 
	class APawn*                                       OwnerPawn;                                        		// 0x03DC ( 0x0004 ) 
	class APlayerController*                           OwnerPlayer;                                      		// 0x03E0 ( 0x0004 ) 
	unsigned long                                      bSilencer:1;                                      		// 0x03E4 ( 0x0004 )  [0x00000001]
	int                                                iSavedWID;                                        		// 0x03E8 ( 0x0004 ) 
	int                                                iSavedPartsID;                                    		// 0x03EC ( 0x0004 ) 
	unsigned long                                      bOldAiming:1;                                     		// 0x03F0 ( 0x0004 )  [0x00000001]
	unsigned char                                      byOldFlashCount;                                  		// 0x03F4 ( 0x0001 ) 
	unsigned long                                      bDemopack:1;                                      		// 0x03F8 ( 0x0004 )  [0x00000001]
	unsigned long                                      bUseFlashEffect:1;                                		// 0x03F8 ( 0x0004 )  [0x00000002]
	unsigned long                                      bUseWarhead:1;                                    		// 0x03F8 ( 0x0004 )  [0x00000004]
	class UwWeaponBaseParams*                          BaseParams;                                       		// 0x03FC ( 0x0004 ) 
	class UClass*                                      ResParams;                                        		// 0x0400 ( 0x0004 ) 
	struct FVector                                     vPartsOffset;                                     		// 0x0404 ( 0x000C ) 
	struct FVector                                     vFPOffset;                                        		// 0x0410 ( 0x000C ) 
	struct FVector                                     vStanceOffset;                                    		// 0x041C ( 0x000C ) 
	float                                              fStancePivot;                                     		// 0x0428 ( 0x0004 ) 
	unsigned long                                      bWeaponBob:1;                                     		// 0x042C ( 0x0004 )  [0x00000001]
	float                                              Bob;                                              		// 0x0430 ( 0x0004 ) 
	float                                              LandBob;                                          		// 0x0434 ( 0x0004 ) 
	float                                              AppliedBob;                                       		// 0x0438 ( 0x0004 ) 
	float                                              bobtime;                                          		// 0x043C ( 0x0004 ) 
	struct FVector                                     WalkBob;                                          		// 0x0440 ( 0x000C ) 
	struct FVector                                     WalkBobCamera;                                    		// 0x044C ( 0x000C ) 
	float                                              WalkZDamp;                                        		// 0x0458 ( 0x0004 ) 
	float                                              LastFootStepTime;                                 		// 0x045C ( 0x0004 ) 
	struct FVector                                     dbgWalkBob;                                       		// 0x0460 ( 0x000C ) 
	float                                              fZoomFOV;                                         		// 0x046C ( 0x0004 ) 
	unsigned long                                      bInstantFOV:1;                                    		// 0x0470 ( 0x0004 )  [0x00000001]
	unsigned long                                      bNoAiming:1;                                      		// 0x0470 ( 0x0004 )  [0x00000002]
	float                                              Spread;                                           		// 0x0474 ( 0x0004 ) 
	float                                              fSpread_Min;                                      		// 0x0478 ( 0x0004 ) 
	float                                              fSpread_Max;                                      		// 0x047C ( 0x0004 ) 
	float                                              fSpreadReduce;                                    		// 0x0480 ( 0x0004 ) 
	float                                              fSpreadReduce_Normal;                             		// 0x0484 ( 0x0004 ) 
	float                                              fLastRecoilReduceTime;                            		// 0x0488 ( 0x0004 ) 
	int                                                mCurrentWeaponID;                                 		// 0x048C ( 0x0004 ) 
	class UwWeaponBaseParams*                          mWBP;                                             		// 0x0490 ( 0x0004 ) 
	class APawn*                                       mViewTarget;                                      		// 0x0494 ( 0x0004 ) 
	unsigned char                                      FPAimState;                                       		// 0x0498 ( 0x0001 ) 
	class UClass*                                      ShellCaseEmitterClass;                            		// 0x049C ( 0x0004 ) 
	class AwEmitter*                                   ShellCaseEmitter;                                 		// 0x04A0 ( 0x0004 ) 
	class UClass*                                      ClipEmitterClass;                                 		// 0x04A4 ( 0x0004 ) 
	class AwEmitter*                                   ClipEmitter;                                      		// 0x04A8 ( 0x0004 ) 
	class UClass*                                      FlashEmitterClass;                                		// 0x04AC ( 0x0004 ) 
	class AwEmitter*                                   FlashEmitter;                                     		// 0x04B0 ( 0x0004 ) 
	class UClass*                                      FlashFirstPersonEmitterClass;                     		// 0x04B4 ( 0x0004 ) 
	class UClass*                                      SmokeEmitterClass;                                		// 0x04B8 ( 0x0004 ) 
	class AwEmitter*                                   SmokeEmitter;                                     		// 0x04BC ( 0x0004 ) 
	class UClass*                                      SmokeFirstPersonEmitterClass;                     		// 0x04C0 ( 0x0004 ) 
	class UClass*                                      SilencerSmokeEmitterClass;                        		// 0x04C4 ( 0x0004 ) 
	class AwEmitter*                                   SilencerSmokeEmitter;                             		// 0x04C8 ( 0x0004 ) 
	struct FName                                       IdleAnim;                                         		// 0x04CC ( 0x0004 ) 
	struct FName                                       RestAnim;                                         		// 0x04D0 ( 0x0004 ) 
	struct FName                                       RunAnim;                                          		// 0x04D4 ( 0x0004 ) 
	struct FName                                       SprintAnim;                                       		// 0x04D8 ( 0x0004 ) 
	struct FName                                       SelectAnim;                                       		// 0x04DC ( 0x0004 ) 
	struct FName                                       SelectNewAnim;                                    		// 0x04E0 ( 0x0004 ) 
	struct FName                                       PutDownAnim;                                      		// 0x04E4 ( 0x0004 ) 
	struct FName                                       PutdownQuickAnim;                                 		// 0x04E8 ( 0x0004 ) 
	struct FName                                       ProneMoveAnim;                                    		// 0x04EC ( 0x0004 ) 
	struct FName                                       SprintUpAnim;                                     		// 0x04F0 ( 0x0004 ) 
	struct FName                                       ReloadBeginAnim;                                  		// 0x04F4 ( 0x0004 ) 
	struct FName                                       ReloadEndAnim;                                    		// 0x04F8 ( 0x0004 ) 
	struct FName                                       ReloadAnim;                                       		// 0x04FC ( 0x0004 ) 
	struct FName                                       ReloadEmptyAnim;                                  		// 0x0500 ( 0x0004 ) 
	struct FName                                       RechamberAnim;                                    		// 0x0504 ( 0x0004 ) 
	struct FName                                       Aim_RechamberAnim;                                		// 0x0508 ( 0x0004 ) 
	struct FName                                       Aim_UpAnim;                                       		// 0x050C ( 0x0004 ) 
	struct FName                                       Aim_DownAnim;                                     		// 0x0510 ( 0x0004 ) 
	struct FName                                       Aim_IdleAnim;                                     		// 0x0514 ( 0x0004 ) 
	struct FName                                       Aim_FireAnim;                                     		// 0x0518 ( 0x0004 ) 
	struct FName                                       Aim_FireLoopAnim;                                 		// 0x051C ( 0x0004 ) 
	struct FName                                       FireAnim;                                         		// 0x0520 ( 0x0004 ) 
	struct FName                                       FireLoopAnim;                                     		// 0x0524 ( 0x0004 ) 
	struct FName                                       FireEndAnim;                                      		// 0x0528 ( 0x0004 ) 
	struct FName                                       Melee_FireAnim;                                   		// 0x052C ( 0x0004 ) 
	struct FName                                       PlantAni;                                         		// 0x0530 ( 0x0004 ) 
	struct FName                                       DefuseAni;                                        		// 0x0534 ( 0x0004 ) 
	struct FName                                       BombThrow;                                        		// 0x0538 ( 0x0004 ) 
	struct FName                                       Anim_Plant_PutDown;                               		// 0x053C ( 0x0004 ) 
	struct FName                                       Anim_Defuse_PutDown;                              		// 0x0540 ( 0x0004 ) 
	struct FName                                       Anim_Throw;                                       		// 0x0544 ( 0x0004 ) 
	float                                              IdleAnimRate;                                     		// 0x0548 ( 0x0004 ) 
	float                                              RestAnimRate;                                     		// 0x054C ( 0x0004 ) 
	float                                              RunAnimRate;                                      		// 0x0550 ( 0x0004 ) 
	float                                              SprintAnimRate;                                   		// 0x0554 ( 0x0004 ) 
	float                                              SelectAnimRate;                                   		// 0x0558 ( 0x0004 ) 
	float                                              SelectNewAnimRate;                                		// 0x055C ( 0x0004 ) 
	float                                              PutDownAnimRate;                                  		// 0x0560 ( 0x0004 ) 
	float                                              PutDownQuickAnimRate;                             		// 0x0564 ( 0x0004 ) 
	float                                              ReloadBeginAnimRate;                              		// 0x0568 ( 0x0004 ) 
	float                                              ReloadEndAnimRate;                                		// 0x056C ( 0x0004 ) 
	float                                              ReloadAnimRate;                                   		// 0x0570 ( 0x0004 ) 
	float                                              ReloadEmptyAnimRate;                              		// 0x0574 ( 0x0004 ) 
	float                                              RechamberAnimRate;                                		// 0x0578 ( 0x0004 ) 
	float                                              Aim_RechamberAnimRate;                            		// 0x057C ( 0x0004 ) 
	float                                              Aim_UpAnimRate;                                   		// 0x0580 ( 0x0004 ) 
	float                                              Aim_DownAnimRate;                                 		// 0x0584 ( 0x0004 ) 
	float                                              Aim_IdleAnimRate;                                 		// 0x0588 ( 0x0004 ) 
	float                                              Aim_FireAnimRate;                                 		// 0x058C ( 0x0004 ) 
	float                                              Aim_FireLoopAnimRate;                             		// 0x0590 ( 0x0004 ) 
	float                                              FireAnimRate;                                     		// 0x0594 ( 0x0004 ) 
	float                                              FireLoopAnimRate;                                 		// 0x0598 ( 0x0004 ) 
	float                                              FireEndAnimRate;                                  		// 0x059C ( 0x0004 ) 

	// UScript Functions
	 void                      DisplayDebug ( class UCanvas* Canvas, float* YL, float* YPos );		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.DisplayDebug
	 void                      eventRenderOverlays ( class UCanvas* Canvas );    		// [ FUNC_Simulated | FUNC_Event ] Engine.wFPWeaponAttachment.RenderOverlays
	 void                      FPCalcSpread (  );                                		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.FPCalcSpread
	 void                      FPModeDoFire (  );                                		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.FPModeDoFire
	 void                      TickFPWeapon ( float DeltaTime );                 		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.TickFPWeapon
	 void                      RefreshState (  );                                		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.RefreshState
	 bool                      IsActive (  );                                    		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.IsActive
	 void                      ShakeView (  );                                   		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.ShakeView
	 void                      CheckBob ( float DeltaTime );                     		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.CheckBob
	 struct FVector            WeaponBob ( float BobDamping );                   		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.WeaponBob
	 void                      CalcStanceOffset ( float fDelta );                		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.CalcStanceOffset
	 float                     CalcDestPivot (  );                               		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.CalcDestPivot
	 void                      CalcPartsOffset (  );                             		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.CalcPartsOffset
	 void                      SetAnimAction ( unsigned char byType, bool Opt1 );		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.SetAnimAction
	 void                      PlayIdle (  );                                    		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.PlayIdle
	 void                      AnimEnd ( int Channel );                          		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.AnimEnd
	 void                      SetQuickFOV ( bool bFOV );                        		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.SetQuickFOV
	 void                      SetFOV ( bool bFOV, bool bQuick );                		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.SetFOV
	 void                      Change3DScopeMesh ( bool bAiming );               		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.Change3DScopeMesh
	 void                      StartMuzzleSmoke (  );                            		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.StartMuzzleSmoke
	 void                      FlashMuzzleFlash (  );                            		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.FlashMuzzleFlash
	 void                      DrawMuzzleFlash ( class UCanvas* Canvas );        		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.DrawMuzzleFlash
	 void                      SpawnShell (  );                                  		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.SpawnShell
	 void                      LoadWarhead ( class UStaticMesh* stProj );        		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.LoadWarhead
	 void                      SetResParams ( class UClass* wRes );              		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.SetResParams
	 void                      SetBaseParams ( class UwWeaponBaseParams* wBase );		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.SetBaseParams
	 void                      AttWarhead ( bool bAttOrDtt );                    		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.AttWarhead
	 void                      AddParts ( unsigned char Type, struct FString szName, struct FString szSkinName, struct FString strHaveDotName, struct FVector AimDiff, int iItemID, int iPartsGroupID, bool bSecondSight );		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.AddParts
	 void                      SetWeaponPaint ( int iPaintID );                  		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.SetWeaponPaint
	 void                      AddPartsGroup ( int iWeaponID, int iAddPartsID ); 		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.AddPartsGroup
	 void                      wLoadOut ( int iID, int iAddPartsID, int iPaintID, class APawn* Pawn );		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.wLoadOut
	 void                      ResetBase (  );                                   		// [ FUNC_Simulated ] Engine.wFPWeaponAttachment.ResetBase
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.wFPWeaponAttachment.Destroyed
}; // Size: 0x01D8

// Class Engine.MatchInfo
class DLL_IMPORT UMatchInfo : public UObject
{
public:
	struct FString                                     LevelName;                                        		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MenuName;                                         		// 0x0038 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     EnemyTeamName;                                    		// 0x0044 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     SpecialEvent;                                     		// 0x0050 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              DifficultyModifier;                               		// 0x005C ( 0x0004 ) 
	float                                              GoalScore;                                        		// 0x0060 ( 0x0004 ) 
	struct FString                                     URLString;                                        		// 0x0064 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     MenuDescription;                                  		// 0x0070 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                NumBots;                                          		// 0x007C ( 0x0004 ) 
	struct FString                                     GameType;                                         		// 0x0080 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     ThumbName;                                        		// 0x008C ( 0x000C ) [ CPF_NeedCtorLink ]
}; // Size: 0x006C

// Class Engine.LadderInfo
class DLL_IMPORT ULadderInfo : public UObject
{
public:
	class TArray< class UMatchInfo* >                  DMMatches;                                        		// 0x002C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UMatchInfo* >                  TDMMatches;                                       		// 0x0038 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UMatchInfo* >                  DOMMatches;                                       		// 0x0044 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UMatchInfo* >                  CTFMatches;                                       		// 0x0050 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UMatchInfo* >                  BRMatches;                                        		// 0x005C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline ]
	class TArray< class UMatchInfo* >                  ChampionshipMatches;                              		// 0x0068 ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink | CPF_EditInline ]
	int                                                OpenNextLadderAtRung[ 0x05 ];                     		// 0x0074 ( 0x0014 ) 

	// UScript Functions
	 int                       LengthOfLadder ( int Ladder );                    		//  Engine.LadderInfo.LengthOfLadder
	 struct FString            GetMatchDescription ( class UGameProfile* G );    		//  Engine.LadderInfo.GetMatchDescription
	 struct FString            MakeURLFor ( class UGameProfile* G );             		//  Engine.LadderInfo.MakeURLFor
	 class UMatchInfo*         GetCurrentMatchInfo ( class UGameProfile* G );    		//  Engine.LadderInfo.GetCurrentMatchInfo
	 class UMatchInfo*         GetMatchInfo ( int Ladder, int rung );            		//  Engine.LadderInfo.GetMatchInfo
	 struct FString            UpdateLadders ( class UGameProfile* G, int CurrentLadder );		//  Engine.LadderInfo.UpdateLadders
}; // Size: 0x005C

// Class Engine.MaplistRecord
class DLL_IMPORT UMaplistRecord : public UObject
{
public:
	unsigned long                                      bDirty:1;                                         		// 0x002C ( 0x0004 )  [0x00000001]
	struct FString                                     Title;                                            		// 0x0030 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     GameType;                                         		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                Active;                                           		// 0x0048 ( 0x0004 ) 
	class TArray< struct FMapItem >                    Maps;                                             		// 0x004C ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DefaultTitle;                                     		// 0x0058 ( 0x000C ) [ CPF_NeedCtorLink ]
	struct FString                                     DefaultGameType;                                  		// 0x0064 ( 0x000C ) [ CPF_NeedCtorLink ]
	int                                                DefaultActive;                                    		// 0x0070 ( 0x0004 ) 
	class TArray< struct FString >                     DefaultMaps;                                      		// 0x0074 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FMapItem >                    CachedMaps;                                       		// 0x0080 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      CreateMapItemList ( class TArray< struct FString > MapURLs, class TArray< struct FMapItem >* MapItems );		//  Engine.MaplistRecord.CreateMapItemList
	 bool                      CreateMapItem ( struct FString FullMapURL, struct FMapItem* Item );		//  Engine.MaplistRecord.CreateMapItem
	 struct FKeyValuePair      CreateMapOption ( struct FString* MapOptionString );		//  Engine.MaplistRecord.CreateMapOption
	 struct FString            GetBaseMapName ( struct FString* FullMapURL );    		//  Engine.MaplistRecord.GetBaseMapName
	 bool                      ItemHasOption ( struct FMapItem Item, struct FKeyValuePair Option );		//  Engine.MaplistRecord.ItemHasOption
	 bool                      MapHasOption ( int MapIndex, struct FKeyValuePair Option );		//  Engine.MaplistRecord.MapHasOption
	 bool                      ValidOptionIndex ( int MapIndex, int OptionIndex );		//  Engine.MaplistRecord.ValidOptionIndex
	 bool                      ValidIndex ( int i );                             		//  Engine.MaplistRecord.ValidIndex
	 bool                      ValidMap ( struct FString MapName );              		//  Engine.MaplistRecord.ValidMap
	 int                       GetOptionIndex ( int MapIndex, struct FKeyValuePair Option );		//  Engine.MaplistRecord.GetOptionIndex
	 int                       GetMapItemIndex ( struct FMapItem Item );         		//  Engine.MaplistRecord.GetMapItemIndex
	 int                       GetMapIndex ( struct FString MapName );           		//  Engine.MaplistRecord.GetMapIndex
	 int                       GetActiveMapIndex (  );                           		//  Engine.MaplistRecord.GetActiveMapIndex
	 int                       GetCacheIndex ( struct FString MapName );         		//  Engine.MaplistRecord.GetCacheIndex
	 bool                      IsDirty (  );                                     		//  Engine.MaplistRecord.IsDirty
	 class TArray< struct FString > GetAllMapURL (  );                                		//  Engine.MaplistRecord.GetAllMapURL
	 class TArray< struct FMapItem > GetMaps (  );                                     		//  Engine.MaplistRecord.GetMaps
	 struct FString            GetMapURL ( int Index );                          		//  Engine.MaplistRecord.GetMapURL
	 struct FString            GetMapName ( int i );                             		//  Engine.MaplistRecord.GetMapName
	 struct FString            GetActiveMapURL (  );                             		//  Engine.MaplistRecord.GetActiveMapURL
	 struct FString            GetActiveMapName (  );                            		//  Engine.MaplistRecord.GetActiveMapName
	 struct FString            GetGameType (  );                                 		//  Engine.MaplistRecord.GetGameType
	 struct FString            GetTitle (  );                                    		//  Engine.MaplistRecord.GetTitle
	 bool                      SetMapOptions ( int MapIndex, struct FString OptionString );		//  Engine.MaplistRecord.SetMapOptions
	 bool                      RemoveMap ( struct FString MapName );             		//  Engine.MaplistRecord.RemoveMap
	 bool                      InsertMap ( struct FString MapName, int Index );  		//  Engine.MaplistRecord.InsertMap
	 bool                      AddMap ( struct FString MapName );                		//  Engine.MaplistRecord.AddMap
	 void                      RefreshMapItem ( int MapIndex );                  		//  Engine.MaplistRecord.RefreshMapItem
	 bool                      RemoveOptionItem ( int MapIndex, struct FKeyValuePair Option );		//  Engine.MaplistRecord.RemoveOptionItem
	 bool                      RemoveOptionString ( int MapIndex, struct FString OptionString );		//  Engine.MaplistRecord.RemoveOptionString
	 bool                      AddOptionItem ( int MapIndex, struct FKeyValuePair Option );		//  Engine.MaplistRecord.AddOptionItem
	 bool                      AddOptionString ( int MapIndex, struct FString OptionString );		//  Engine.MaplistRecord.AddOptionString
	 void                      Clear ( bool bReset );                            		//  Engine.MaplistRecord.Clear
	 void                      CancelChanges (  );                               		//  Engine.MaplistRecord.CancelChanges
	 void                      VerifyMaps (  );                                  		//  Engine.MaplistRecord.VerifyMaps
	 void                      Save (  );                                        		//  Engine.MaplistRecord.Save
	 void                      SetMapItemList ( class TArray< struct FMapItem > NewMaps );		//  Engine.MaplistRecord.SetMapItemList
	 void                      SetMaplist ( class TArray< struct FString > NewMaps );		//  Engine.MaplistRecord.SetMaplist
	 int                       SetActiveMap ( int i );                           		//  Engine.MaplistRecord.SetActiveMap
	 bool                      SetGameType ( struct FString NewGameType );       		//  Engine.MaplistRecord.SetGameType
	 bool                      SetTitle ( struct FString NewTitle );             		//  Engine.MaplistRecord.SetTitle
	 void                      SetCacheMaps ( class TArray< struct FMapItem > CacheMaps );		//  Engine.MaplistRecord.SetCacheMaps
	 void                      eventCreated (  );                                		// [ FUNC_Event ] Engine.MaplistRecord.Created
	 bool                      CompareItemsSlow ( struct FMapItem A, struct FMapItem B );		//  Engine.MaplistRecord.CompareItemsSlow
	 bool                      CompareItems ( struct FMapItem A, struct FMapItem B );		//  Engine.MaplistRecord.CompareItems
	 bool                      EqualEqual_MapItemMapItem ( struct FMapItem A, struct FMapItem B );		// [ FUNC_Final ] Engine.MaplistRecord.EqualEqual_MapItemMapItem
	 bool                      EqualEqual_KeyValuePairKeyValuePair ( struct FKeyValuePair A, struct FKeyValuePair B );		// [ FUNC_Final ] Engine.MaplistRecord.EqualEqual_KeyValuePairKeyValuePair
}; // Size: 0x0060

// Class Engine.Effect_ShadowBitmapMaterialLow
class DLL_IMPORT UEffect_ShadowBitmapMaterialLow : public UShadowBitmapMaterial
{
public:
}; // Size: 0x0000

// Class Engine.Effect_ShadowBitmapMaterialHigh
class DLL_IMPORT UEffect_ShadowBitmapMaterialHigh : public UEffect_ShadowBitmapMaterialLow
{
public:
}; // Size: 0x0000

// Class Engine.StreamPlaylistManager
class DLL_IMPORT UStreamPlaylistManager : public UStreamBase
{
public:
	int                                                CurrentPlaylist;                                  		// 0x002C ( 0x0004 ) [ CPF_Edit | CPF_Config | CPF_EditConst ]
	class UStreamInterface*                            FileManager;                                      		// 0x0030 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport | CPF_EditInline ]
	class TArray< class UStreamPlaylist* >             Playlists;                                        		// 0x0034 ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_NeedCtorLink | CPF_EditInline ]
	unsigned long                                      bDisableNotification:1;                           		// 0x0040 ( 0x0004 )  [0x00000001][ CPF_Edit ]
	unsigned long                                      bDirty:1;                                         		// 0x0040 ( 0x0004 )  [0x00000002][ CPF_Edit | CPF_Transient | CPF_NoExport ]
	unsigned long                                      bShuffle:1;                                       		// 0x0040 ( 0x0004 )  [0x00000004][ CPF_Edit | CPF_Config ]
	unsigned long                                      bShuffleAll:1;                                    		// 0x0040 ( 0x0004 )  [0x00000008][ CPF_Edit | CPF_Config ]
	unsigned long                                      bRepeat:1;                                        		// 0x0040 ( 0x0004 )  [0x00000010][ CPF_Edit | CPF_Config ]
	unsigned long                                      bRepeatAll:1;                                     		// 0x0040 ( 0x0004 )  [0x00000020][ CPF_Edit | CPF_Config ]
	struct FString                                     DefaultPlaylistName;                              		// 0x0044 ( 0x000C ) [ CPF_Edit | CPF_Localized | CPF_NeedCtorLink ]
	class TArray< struct FPlaylistParser >             ParserType;                                       		// 0x0050 ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	class TArray< class UPlaylistParserBase* >         Parsers;                                          		// 0x005C ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	struct FScriptDelegate                             __ChangedActivePlaylist__Delegate;                		// 0x0068 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            GetCurrentTitle (  );                             		//  Engine.StreamPlaylistManager.GetCurrentTitle
	 void                      Save (  );                                        		//  Engine.StreamPlaylistManager.Save
	 bool                      HandleDebugExec ( struct FString Command, struct FString Param );		//  Engine.StreamPlaylistManager.HandleDebugExec
	 class UStreamPlaylist*    CreatePlaylist ( struct FString PlaylistName );   		//  Engine.StreamPlaylistManager.CreatePlaylist
	 void                      SetRepeatAll ( bool bEnable );                    		//  Engine.StreamPlaylistManager.SetRepeatAll
	 void                      SetRepeat ( bool bEnable );                       		//  Engine.StreamPlaylistManager.SetRepeat
	 void                      SetShuffleAll ( bool bEnable );                   		//  Engine.StreamPlaylistManager.SetShuffleAll
	 void                      SetShuffle ( bool bEnable );                      		//  Engine.StreamPlaylistManager.SetShuffle
	 bool                      GetRepeatAll (  );                                		//  Engine.StreamPlaylistManager.GetRepeatAll
	 bool                      GetRepeat (  );                                   		//  Engine.StreamPlaylistManager.GetRepeat
	 bool                      GetShuffleAll (  );                               		//  Engine.StreamPlaylistManager.GetShuffleAll
	 bool                      GetShuffle (  );                                  		//  Engine.StreamPlaylistManager.GetShuffle
	 bool                      ValidName ( struct FString Test );                		//  Engine.StreamPlaylistManager.ValidName
	 int                       FindPlaylistIndex ( class UStreamPlaylist* Playlist );		//  Engine.StreamPlaylistManager.FindPlaylistIndex
	 int                       FindNameIndex ( struct FString PlaylistName );    		//  Engine.StreamPlaylistManager.FindNameIndex
	 bool                      ValidIndex ( int Index );                         		//  Engine.StreamPlaylistManager.ValidIndex
	 int                       GetPlaylistCount (  );                            		//  Engine.StreamPlaylistManager.GetPlaylistCount
	 class UStreamPlaylist*    GetPlaylistAt ( int idx );                        		//  Engine.StreamPlaylistManager.GetPlaylistAt
	 class UStreamPlaylist*    GetRandomPlaylist (  );                           		//  Engine.StreamPlaylistManager.GetRandomPlaylist
	 class UStreamPlaylist*    GetCurrentPlaylist (  );                          		//  Engine.StreamPlaylistManager.GetCurrentPlaylist
	 int                       GetCurrentIndex (  );                             		//  Engine.StreamPlaylistManager.GetCurrentIndex
	 struct FString            GetRandomSong (  );                               		//  Engine.StreamPlaylistManager.GetRandomSong
	 struct FString            PrevSong ( bool bForce );                         		//  Engine.StreamPlaylistManager.PrevSong
	 struct FString            NextSong ( bool bForce );                         		//  Engine.StreamPlaylistManager.NextSong
	 bool                      ImportPlaylist ( int PlaylistIndex, int InsertPosition, struct FString Path );		//  Engine.StreamPlaylistManager.ImportPlaylist
	 bool                      AddDirectory ( int PlaylistIndex, int InsertPosition, struct FString Path, bool bRecurseDirectories );		//  Engine.StreamPlaylistManager.AddDirectory
	 unsigned char             GetPlaylistType ( struct FString Path );          		//  Engine.StreamPlaylistManager.GetPlaylistType
	 bool                      ClearCurrentPlaylist (  );                        		//  Engine.StreamPlaylistManager.ClearCurrentPlaylist
	 bool                      RemoveFromCurrentPlaylist ( struct FString Path, bool bSkipNotification );		//  Engine.StreamPlaylistManager.RemoveFromCurrentPlaylist
	 bool                      InsertInPlaylist ( int PlaylistIndex, int InsertPosition, struct FString Path, bool bSkipNotification );		//  Engine.StreamPlaylistManager.InsertInPlaylist
	 bool                      AddToPlaylist ( int PlaylistIndex, struct FString Path, bool bSkipNotification );		//  Engine.StreamPlaylistManager.AddToPlaylist
	 bool                      RenamePlaylist ( int Index, struct FString* NewName );		//  Engine.StreamPlaylistManager.RenamePlaylist
	 bool                      RemovePlaylistAt ( int Index );                   		//  Engine.StreamPlaylistManager.RemovePlaylistAt
	 bool                      RemovePlaylist ( struct FString PlaylistName );   		//  Engine.StreamPlaylistManager.RemovePlaylist
	 int                       AppendPlaylist ( class UStreamPlaylist* Playlist );		//  Engine.StreamPlaylistManager.AppendPlaylist
	 int                       AddPlaylist ( struct FString* NewPlaylistName );  		//  Engine.StreamPlaylistManager.AddPlaylist
	 bool                      ActivatePlaylist ( int ListIndex, bool bNoFail ); 		//  Engine.StreamPlaylistManager.ActivatePlaylist
	 class UStreamPlaylist*    CreateDefaultPlaylist (  );                       		//  Engine.StreamPlaylistManager.CreateDefaultPlaylist
	 void                      InitializeParsers (  );                           		//  Engine.StreamPlaylistManager.InitializeParsers
	 void                      InitializePlaylists (  );                         		//  Engine.StreamPlaylistManager.InitializePlaylists
	 void                      Initialize ( class UStreamInterface* InFileManager );		//  Engine.StreamPlaylistManager.Initialize
	 void                      ChangedActivePlaylist ( class UStreamPlaylist* NewPlaylist );		//  Engine.StreamPlaylistManager.ChangedActivePlaylist
}; // Size: 0x0044

// Class Engine.StreamPlaylist
class DLL_IMPORT UStreamPlaylist : public UStreamBase
{
public:
	int                                                Current;                                          		// 0x002C ( 0x0004 ) [ CPF_Edit | CPF_Config ]
	class TArray< struct FString >                     Playlist;                                         		// 0x0030 ( 0x000C ) [ CPF_Edit | CPF_Config | CPF_NeedCtorLink ]
	struct FString                                     Title;                                            		// 0x003C ( 0x000C ) [ CPF_Edit | CPF_NeedCtorLink ]
	unsigned long                                      bNeedSave:1;                                      		// 0x0048 ( 0x0004 )  [0x00000001][ CPF_Edit | CPF_Config ]
	class TArray< int >                                RandomPool;                                       		// 0x004C ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_Transient | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	class UStreamInterface*                            FileManager;                                      		// 0x0058 ( 0x0004 ) [ CPF_Edit | CPF_EditConst | CPF_NoExport | CPF_EditInline ]
	class TArray< class UStream* >                     Songs;                                            		// 0x005C ( 0x000C ) [ CPF_Edit | CPF_ConstRef | CPF_EditConst | CPF_NeedCtorLink | CPF_NoExport | CPF_EditInline ]
	struct FScriptDelegate                             __OnPlaylistChanged__Delegate;                    		// 0x0068 ( 0x0008 ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 void                      Save (  );                                        		//  Engine.StreamPlaylist.Save
	 bool                      HandleDebugExec ( struct FString Command, struct FString Param );		//  Engine.StreamPlaylist.HandleDebugExec
	 void                      DebugInfo (  );                                   		//  Engine.StreamPlaylist.DebugInfo
	 bool                      ValidStreamIndex ( int Index );                   		//  Engine.StreamPlaylist.ValidStreamIndex
	 bool                      ValidStreamName ( struct FString fileName );      		//  Engine.StreamPlaylist.ValidStreamName
	 int                       FindIndexByFileName ( struct FString Test );      		//  Engine.StreamPlaylist.FindIndexByFileName
	 int                       FindIndexByFullName ( struct FString Test );      		//  Engine.StreamPlaylist.FindIndexByFullName
	 int                       FindIndexByPath ( struct FString Test );          		//  Engine.StreamPlaylist.FindIndexByPath
	 int                       FindIndexByName ( struct FString Test );          		//  Engine.StreamPlaylist.FindIndexByName
	 int                       GetPlaylistLength (  );                           		//  Engine.StreamPlaylist.GetPlaylistLength
	 class UStream*            GetStreamAt ( int Index );                        		//  Engine.StreamPlaylist.GetStreamAt
	 class UStream*            GetStream ( struct FString StreamName );          		//  Engine.StreamPlaylist.GetStream
	 class UStream*            GetCurrentStream (  );                            		//  Engine.StreamPlaylist.GetCurrentStream
	 void                      GetSongs ( class TArray< class UStream* >* SongArray );		//  Engine.StreamPlaylist.GetSongs
	 int                       GetCurrent (  );                                  		//  Engine.StreamPlaylist.GetCurrent
	 struct FString            GetTitle (  );                                    		//  Engine.StreamPlaylist.GetTitle
	 bool                      IsInitialized (  );                               		//  Engine.StreamPlaylist.IsInitialized
	 bool                      SetSongs ( class TArray< class UStream* > NewSongs );		//  Engine.StreamPlaylist.SetSongs
	 bool                      SetCurrent ( int Index );                         		//  Engine.StreamPlaylist.SetCurrent
	 bool                      SetTitle ( struct FString NewTitle );             		//  Engine.StreamPlaylist.SetTitle
	 void                      ResetRandomPool (  );                             		//  Engine.StreamPlaylist.ResetRandomPool
	 struct FString            GetRandomSong (  );                               		//  Engine.StreamPlaylist.GetRandomSong
	 bool                      ClearPlaylist (  );                               		//  Engine.StreamPlaylist.ClearPlaylist
	 void                      ReplaceWith ( class UStreamPlaylist* Other );     		//  Engine.StreamPlaylist.ReplaceWith
	 struct FString            PrevSong ( bool bMayRepeat );                     		//  Engine.StreamPlaylist.PrevSong
	 struct FString            NextSong ( bool bMayRepeat );                     		//  Engine.StreamPlaylist.NextSong
	 bool                      RemoveSongAt ( int idx, bool bSkipNotification ); 		//  Engine.StreamPlaylist.RemoveSongAt
	 bool                      RemoveSong ( struct FString SongFileName, bool bSkipNotification );		//  Engine.StreamPlaylist.RemoveSong
	 int                       InsertSong ( int idx, struct FString Path, bool bSkipNotification );		//  Engine.StreamPlaylist.InsertSong
	 int                       AddStream ( int Index, class UStream* NewStream, bool bSkipNotification );		//  Engine.StreamPlaylist.AddStream
	 int                       AddSong ( struct FString SongFileName, bool bSkipNotification );		//  Engine.StreamPlaylist.AddSong
	 class UStream*            CreateStream ( struct FString fileName );         		//  Engine.StreamPlaylist.CreateStream
	 bool                      LoadPlaylist (  );                                		//  Engine.StreamPlaylist.LoadPlaylist
	 bool                      InitializePlaylist ( class UStreamInterface* InManager );		//  Engine.StreamPlaylist.InitializePlaylist
	 void                      OnPlaylistChanged (  );                           		//  Engine.StreamPlaylist.OnPlaylistChanged
}; // Size: 0x0044

// Class Engine.PlaylistParserBase
class DLL_IMPORT UPlaylistParserBase : public UStreamInterface
{
public:
	unsigned char                                      Type;                                             		// 0x0038 ( 0x0001 ) 
	struct FString                                     PlaylistName;                                     		// 0x003C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Paths;                                            		// 0x0048 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FString >                     Lines;                                            		// 0x0054 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FHtmlChar >                   SpecialChars;                                     		// 0x0060 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            HtmlDecode ( struct FString Src );                		//  Engine.PlaylistParserBase.HtmlDecode
	 struct FString            GetTagged ( struct FString* Text );               		//  Engine.PlaylistParserBase.GetTagged
	 struct FString            GetValue ( struct FString KeyValuePair, bool bAllowSpaces );		//  Engine.PlaylistParserBase.GetValue
	 void                      ParseLines (  );                                  		//  Engine.PlaylistParserBase.ParseLines
	 void                      ImportedPlaylist ( int PlaylistIndex, int InsertPosition );		//  Engine.PlaylistParserBase.ImportedPlaylist
	 bool                      Import ( int PlaylistIndex, int InsertPosition, struct FString Path );		//  Engine.PlaylistParserBase.Import
	 void                      SetType ( unsigned char InType );                 		//  Engine.PlaylistParserBase.SetType
	 unsigned char             GetType (  );                                     		//  Engine.PlaylistParserBase.GetType
}; // Size: 0x0034

// Class Engine.ZoneTrigger
class DLL_IMPORT AZoneTrigger : public ATrigger
{
public:

	// UScript Functions
	 void                      UnTouch ( class AActor* Other );                  		//  Engine.ZoneTrigger.UnTouch
	 void                      Touch ( class AActor* Other );                    		//  Engine.ZoneTrigger.Touch
}; // Size: 0x0000

// Class Engine.WaitViewAF
class DLL_IMPORT AWaitViewAF : public AWaitView
{
public:
}; // Size: 0x0000

// Class Engine.WaitViewRSA
class DLL_IMPORT AWaitViewRSA : public AWaitView
{
public:
}; // Size: 0x0000

// Class Engine.wMessage_NoWeapon
class DLL_IMPORT AwMessage_NoWeapon : public ALocalMessage
{
public:
	struct FString                                     strNoWeapon;                                      		// 0x0440 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wMessage_NoWeapon.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_NoWeapon.GetString
}; // Size: 0x000C

// Class Engine.Effect_ShadowController
class DLL_IMPORT AEffect_ShadowController : public AActor
{
public:
	class UClass*                                      ShadowClass;                                      		// 0x03C8 ( 0x0004 ) 
	class TArray< class AEffect_ShadowProjector* >     Shadows;                                          		// 0x03CC ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< class ALight* >                      LightList;                                        		// 0x03D8 ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< struct FLightGroup >                 Lights;                                           		// 0x03E4 ( 0x000C ) [ CPF_NeedCtorLink ]
	float                                              MaxLightDistance;                                 		// 0x03F0 ( 0x0004 ) 
	float                                              UpdateFrequency;                                  		// 0x03F4 ( 0x0004 ) 
	class ALight*                                      SunLightActor;                                    		// 0x03F8 ( 0x0004 ) 
	struct FVector                                     SunDirection;                                     		// 0x03FC ( 0x000C ) 
	unsigned long                                      bShadowActive:1;                                  		// 0x0408 ( 0x0004 )  [0x00000001]
	int                                                MaxShadows;                                       		// 0x040C ( 0x0004 ) [ CPF_Config | CPF_GlobalConfig ]
	unsigned char                                      ShadowCrispness;                                  		// 0x0410 ( 0x0001 ) [ CPF_Config | CPF_GlobalConfig ]

	// UScript Functions
	 void                      SunLightDirectionUpdate ( struct FVector direction );		// [ FUNC_Simulated ] Engine.Effect_ShadowController.SunLightDirectionUpdate
	 void                      Destroyed (  );                                   		//  Engine.Effect_ShadowController.Destroyed
	 class AEffect_ShadowProjector* SpawnShadow ( struct FRotator LightRotation );    		//  Engine.Effect_ShadowController.SpawnShadow
	 void                      UpdateShadows ( float dt );                       		//  Engine.Effect_ShadowController.UpdateShadows
	 void                      Tick ( float dt );                                		//  Engine.Effect_ShadowController.Tick
	 bool                      IsVisible ( struct FVector loc );                 		//  Engine.Effect_ShadowController.IsVisible
	 float                     LightPriority ( float Brightness, float Radius, float Distance );		//  Engine.Effect_ShadowController.LightPriority
	 void                      FillLights (  );                                  		//  Engine.Effect_ShadowController.FillLights
	 void                      Timer (  );                                       		//  Engine.Effect_ShadowController.Timer
	 void                      Initialize (  );                                  		//  Engine.Effect_ShadowController.Initialize
}; // Size: 0x004C

// Class Engine.Effect_ShadowProjector
class DLL_IMPORT AEffect_ShadowProjector : public AProjector
{
public:
	struct FVector                                     LightDirection;                                   		// 0x0558 ( 0x000C ) [ CPF_Edit ]
	float                                              LightDistance;                                    		// 0x0564 ( 0x0004 ) [ CPF_Edit ]
	float                                              InterpolationRate;                                		// 0x0568 ( 0x0004 ) [ CPF_Edit ]
	float                                              MaxFOV;                                           		// 0x056C ( 0x0004 ) [ CPF_Edit ]
	float                                              FadeSpeed;                                        		// 0x0570 ( 0x0004 ) [ CPF_Edit ]
	float                                              DarknessScale;                                    		// 0x0574 ( 0x0004 ) [ CPF_Edit ]
	class UShadowBitmapMaterial*                       ShadowTexture;                                    		// 0x0578 ( 0x0004 ) 
	unsigned long                                      bFadeIn:1;                                        		// 0x057C ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      Destroyed (  );                                   		//  Engine.Effect_ShadowProjector.Destroyed
	 void                      UpdateShadow ( float dt, int LN, class AEffect_ShadowController* ShadowController );		//  Engine.Effect_ShadowProjector.UpdateShadow
	 void                      InitializeFor ( class AEffect_ShadowController* ShadowController );		//  Engine.Effect_ShadowProjector.InitializeFor
	 void                      DisableShadow (  );                               		//  Engine.Effect_ShadowProjector.DisableShadow
	 void                      Tick ( float dt );                                		//  Engine.Effect_ShadowProjector.Tick
	 void                      PostBeginPlay (  );                               		//  Engine.Effect_ShadowProjector.PostBeginPlay
}; // Size: 0x0028

// Class Engine.Effect_ShadowBitmapMaterialMedium
class DLL_IMPORT UEffect_ShadowBitmapMaterialMedium : public UEffect_ShadowBitmapMaterialLow
{
public:
}; // Size: 0x0000

// Class Engine.Effect_ShadowBitmapMaterialMax
class DLL_IMPORT UEffect_ShadowBitmapMaterialMax : public UEffect_ShadowBitmapMaterialLow
{
public:
}; // Size: 0x0000

// Class Engine.wRocket
class DLL_IMPORT AwRocket : public AwProjectile
{
public:
	unsigned long                                      bRing:1;                                          		// 0x0480 ( 0x0004 )  [0x00000001]
	unsigned long                                      bHitWater:1;                                      		// 0x0480 ( 0x0004 )  [0x00000002]
	unsigned long                                      bWaterStart:1;                                    		// 0x0480 ( 0x0004 )  [0x00000004]
	int                                                NumExtraRockets;                                  		// 0x0484 ( 0x0004 ) 
	class AEmitter*                                    SmokeTrail;                                       		// 0x0488 ( 0x0004 ) 
	class AEffects*                                    Corona;                                           		// 0x048C ( 0x0004 ) 
	float                                              AccelerationAddPerSec;                            		// 0x0490 ( 0x0004 ) 
	float                                              FlockRadius;                                      		// 0x0494 ( 0x0004 ) [ CPF_Edit ]
	float                                              FlockStiffness;                                   		// 0x0498 ( 0x0004 ) [ CPF_Edit ]
	float                                              FlockMaxForce;                                    		// 0x049C ( 0x0004 ) [ CPF_Edit ]
	float                                              FlockCurlForce;                                   		// 0x04A0 ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     Dir;                                              		// 0x04A4 ( 0x000C ) 
	class UClass*                                      class_Smoke;                                      		// 0x04B0 ( 0x0004 ) 
	class UClass*                                      class_Corona;                                     		// 0x04B4 ( 0x0004 ) 
	class UClass*                                      class_ExplosionCrap;                              		// 0x04B8 ( 0x0004 ) 
	unsigned long                                      bExploded:1;                                      		// 0x04BC ( 0x0004 )  [0x00000001]
	struct FVector                                     vHitNormal;                                       		// 0x04C0 ( 0x000C ) [ CPF_Net ]

	// UScript Functions
	 void                      wLoadOut ( int iID );                             		// [ FUNC_Simulated ] Engine.wRocket.wLoadOut
	 void                      Tick ( float DeltaTime );                         		// [ FUNC_Simulated ] Engine.wRocket.Tick
	 void                      Explode ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] Engine.wRocket.Explode
	 void                      HitWall ( struct FVector HitNormal, class AActor* Wall, class UMaterial* HitMaterial );		// [ FUNC_Simulated ] Engine.wRocket.HitWall
	 void                      ProcessTouch ( class AActor* Other, struct FVector HitLocation );		// [ FUNC_Simulated ] Engine.wRocket.ProcessTouch
	 void                      Landed ( struct FVector HitNormal );              		// [ FUNC_Simulated ] Engine.wRocket.Landed
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] Engine.wRocket.PostNetBeginPlay
	 void                      SetSpeed ( float fSpeed );                        		//  Engine.wRocket.SetSpeed
	 void                      Destroyed (  );                                   		// [ FUNC_Simulated ] Engine.wRocket.Destroyed
}; // Size: 0x004C

// Class Engine.BGMTable
class DLL_IMPORT UBGMTable : public UObject
{
public:
	class TArray< struct FString >                     Files;                                            		// 0x002C ( 0x000C ) [ CPF_NeedCtorLink ]
	class TArray< int >                                Durations;                                        		// 0x0038 ( 0x000C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 int                       GetDuration ( struct FString File );              		//  Engine.BGMTable.GetDuration
}; // Size: 0x0018

// Class Engine.wMessage_Game_Mode
class DLL_IMPORT AwMessage_Game_Mode : public AwMessage_Game
{
public:
	int                                                Code_GameMode_TD;                                 		// 0x1044 ( 0x0004 ) 
	int                                                Code_GameMode_DOM;                                		// 0x1048 ( 0x0004 ) 
	int                                                Code_GameMode_FFA;                                		// 0x104C ( 0x0004 ) 
	int                                                Code_GameMode_SDAttack;                           		// 0x1050 ( 0x0004 ) 
	int                                                Code_GameMode_SDDefense;                          		// 0x1054 ( 0x0004 ) 
	int                                                Code_GameMode_SBT;                                		// 0x1058 ( 0x0004 ) 
	int                                                Code_GameMode_SBTGetBomb;                         		// 0x105C ( 0x0004 ) 
	int                                                Code_GameMode_DOA;                                		// 0x1060 ( 0x0004 ) 
	struct FString                                     strGameModeTD;                                    		// 0x1064 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeDOM;                                   		// 0x1070 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeFFA;                                   		// 0x107C ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeSDAttack;                              		// 0x1088 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeSDDefense;                             		// 0x1094 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeSBT;                                   		// 0x10A0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeSBTGetBomb;                            		// 0x10AC ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeSDAttackObjectivePlanted;              		// 0x10B8 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeSDDefenseObjectivePlanted;             		// 0x10C4 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]
	struct FString                                     strGameModeDOA;                                   		// 0x10D0 ( 0x000C ) [ CPF_Localized | CPF_NeedCtorLink ]

	// UScript Functions
	 void                      ClientReceive ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		// [ FUNC_Simulated ] Engine.wMessage_Game_Mode.ClientReceive
	 struct FString            GetString ( int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game_Mode.GetString
	 bool                      GotoBTConsole ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game_Mode.GotoBTConsole
	 bool                      GotoHud ( class APlayerController* P, int Switch, class APlayerReplicationInfo* RelatedPRI_1, class APlayerReplicationInfo* RelatedPRI_2, class UObject* OptionalObject );		//  Engine.wMessage_Game_Mode.GotoHud
}; // Size: 0x0098

// Class Engine.WinBox
class DLL_IMPORT UWinBox : public UObject
{
public:
	struct FFloatBox                                   P;                                                		// 0x002C ( 0x0010 ) 
	struct FFloatBox                                   B;                                                		// 0x003C ( 0x0010 ) 

	// UScript Functions
	 float                     H (  );                                           		//  Engine.WinBox.H
	 float                     W (  );                                           		//  Engine.WinBox.W
	 float                     Y (  );                                           		//  Engine.WinBox.Y
	 float                     X (  );                                           		//  Engine.WinBox.X
}; // Size: 0x0020

// Class Engine.WinFrameChanger
class DLL_IMPORT UWinFrameChanger : public UObject
{
public:
	float                                              X;                                                		// 0x002C ( 0x0004 ) 
	float                                              Y;                                                		// 0x0030 ( 0x0004 ) 
	float                                              W;                                                		// 0x0034 ( 0x0004 ) 
	float                                              H;                                                		// 0x0038 ( 0x0004 ) 

	// UScript Functions
	 void                      WinBoxToFloatBoxWH_OUT ( class UWinBox* B, struct FFloatBoxWH* fb );		//  Engine.WinFrameChanger.WinBoxToFloatBoxWH_OUT
	 struct FFloatBoxWH        WinBoxToFloatBoxWH ( class UWinBox* B );          		//  Engine.WinFrameChanger.WinBoxToFloatBoxWH
	 void                      SetFrameByFloatBox ( struct FFloatBox B );        		//  Engine.WinFrameChanger.SetFrameByFloatBox
	 void                      SetFrame ( float nx, float ny, float nw, float nh );		//  Engine.WinFrameChanger.SetFrame
}; // Size: 0x0010

// Class Engine.wProjectileFire
class DLL_IMPORT UwProjectileFire : public UwWeaponFire
{
public:
	int                                                ProjPerFire;                                      		// 0x018C ( 0x0004 ) [ CPF_Edit ]
	struct FVector                                     ProjSpawnOffset;                                  		// 0x0190 ( 0x000C ) [ CPF_Edit ]

	// UScript Functions
	 struct FVector            GetFireStart ( struct FVector X, struct FVector Y, struct FVector Z );		// [ FUNC_Simulated ] Engine.wProjectileFire.GetFireStart
	 class AwProjectile*       SpawnProjectile ( struct FVector Start, struct FRotator Dir );		//  Engine.wProjectileFire.SpawnProjectile
	 void                      DoFireEffect (  );                                		//  Engine.wProjectileFire.DoFireEffect
}; // Size: 0x0010

// Class Engine.B4SParser
class DLL_IMPORT UB4SParser : public UPlaylistParserBase
{
public:

	// UScript Functions
	 void                      ParseLines (  );                                  		//  Engine.B4SParser.ParseLines
}; // Size: 0x0000

// Class Engine.M3UParser
class DLL_IMPORT UM3UParser : public UPlaylistParserBase
{
public:
	struct FFilePath                                   ParsedPath;                                       		// 0x006C ( 0x003C ) [ CPF_NeedCtorLink ]

	// UScript Functions
	 struct FString            MatchPath ( struct FString str );                 		//  Engine.M3UParser.MatchPath
	 void                      ParseLines (  );                                  		//  Engine.M3UParser.ParseLines
	 bool                      Import ( int PlaylistIndex, int InsertPosition, struct FString Path );		//  Engine.M3UParser.Import
}; // Size: 0x003C

// Class Engine.PLSParser
class DLL_IMPORT UPLSParser : public UPlaylistParserBase
{
public:

	// UScript Functions
	 void                      ParseLines (  );                                  		//  Engine.PLSParser.ParseLines
}; // Size: 0x0000

// Class Engine.PlayerStart_SD_ATTACKER
class DLL_IMPORT APlayerStart_SD_ATTACKER : public APlayerStart_SD
{
public:
}; // Size: 0x0000

// Class Engine.PlayerStart_SD_PROTECTOR
class DLL_IMPORT APlayerStart_SD_PROTECTOR : public APlayerStart_SD
{
public:
}; // Size: 0x0000

// Class Engine.PlayerStart_DOM
class DLL_IMPORT APlayerStart_DOM : public APlayerStart
{
public:
	unsigned char                                      eApplyFlagType;                                   		// 0x04B4 ( 0x0001 ) [ CPF_Edit ]
}; // Size: 0x0004

// Class Engine.EAXSoundVolume
class DLL_IMPORT AEAXSoundVolume : public APhysicsVolume
{
public:

	// UScript Functions
	 void                      eventTouch ( class AActor* Other );               		// [ FUNC_Simulated | FUNC_Event ] Engine.EAXSoundVolume.Touch
	 void                      eventPawnLeavingVolume ( class APawn* P );        		// [ FUNC_Simulated | FUNC_Event ] Engine.EAXSoundVolume.PawnLeavingVolume
	 void                      eventPawnEnteredVolume ( class APawn* P );        		// [ FUNC_Simulated | FUNC_Event ] Engine.EAXSoundVolume.PawnEnteredVolume
}; // Size: 0x0000

// Class Engine.PlayerStart_SBT
class DLL_IMPORT APlayerStart_SBT : public APlayerStart
{
public:
}; // Size: 0x0000

// Class Engine.PlayerStart_SBT_AF
class DLL_IMPORT APlayerStart_SBT_AF : public APlayerStart_SBT
{
public:
}; // Size: 0x0000

// Class Engine.PlayerStart_SBT_RSA
class DLL_IMPORT APlayerStart_SBT_RSA : public APlayerStart_SBT
{
public:
}; // Size: 0x0000

// Class Engine.PlayerStart_FFA
class DLL_IMPORT APlayerStart_FFA : public APlayerStart
{
public:
}; // Size: 0x0000

// Class Engine.ClientMover
class DLL_IMPORT AClientMover : public AMover
{
public:

	// UScript Functions
	 void                      PostBeginPlay (  );                               		//  Engine.ClientMover.PostBeginPlay
}; // Size: 0x0000

// Class Engine.wC4Explosive
class DLL_IMPORT AwC4Explosive : public AwProjectile
{
public:
	unsigned long                                      Inited:1;                                         		// 0x0480 ( 0x0004 )  [0x00000001]

	// UScript Functions
	 void                      Explode2 ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] Engine.wC4Explosive.Explode2
	 void                      Explode ( struct FVector HitLocation, struct FVector HitNormal );		// [ FUNC_Simulated ] Engine.wC4Explosive.Explode
	 void                      Touch ( class AActor* Other );                    		// [ FUNC_Simulated ] Engine.wC4Explosive.Touch
	 void                      Reset (  );                                       		//  Engine.wC4Explosive.Reset
	 void                      OnEndRound (  );                                  		//  Engine.wC4Explosive.OnEndRound
	 void                      OnBeginRound (  );                                		//  Engine.wC4Explosive.OnBeginRound
	 void                      Go (  );                                          		// [ FUNC_Simulated ] Engine.wC4Explosive.Go
	 void                      eventDestroyed (  );                              		// [ FUNC_Simulated | FUNC_Event ] Engine.wC4Explosive.Destroyed
	 void                      PostNetBeginPlay (  );                            		// [ FUNC_Simulated ] Engine.wC4Explosive.PostNetBeginPlay
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wC4Explosive.PostBeginPlay
}; // Size: 0x0004

// Class Engine.wMeleeWeapon
class DLL_IMPORT AwMeleeWeapon : public AwWeapon
{
public:
	class AwWeapon*                                    MyOldWeapon;                                      		// 0x0758 ( 0x0004 ) 

	// UScript Functions
	 void                      ServerMeleeFire (  );                             		//  Engine.wMeleeWeapon.ServerMeleeFire
	 void                      ClientMeleeFire (  );                             		// [ FUNC_Simulated ] Engine.wMeleeWeapon.ClientMeleeFire
	 void                      ActiveMeleeDelay (  );                            		// [ FUNC_Simulated ] Engine.wMeleeWeapon.ActiveMeleeDelay
	 void                      eventWeaponTick ( float dt );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.wMeleeWeapon.WeaponTick
	 class AwWeapon*           RecommendWeapon ( float* rating );                		// [ FUNC_Simulated ] Engine.wMeleeWeapon.RecommendWeapon
	 class AwWeapon*           NextWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon );		// [ FUNC_Simulated ] Engine.wMeleeWeapon.NextWeapon
	 class AwWeapon*           PrevWeapon ( class AwWeapon* CurrentChoice, class AwWeapon* CurrentWeapon );		// [ FUNC_Simulated ] Engine.wMeleeWeapon.PrevWeapon
	 class AwWeapon*           WeaponChange ( unsigned char f, bool bSilent );   		// [ FUNC_Simulated ] Engine.wMeleeWeapon.WeaponChange
	 void                      SetBaseParams ( class UwWeaponBaseParams* wBase );		// [ FUNC_Simulated ] Engine.wMeleeWeapon.SetBaseParams
	 void                      eventAnimEnd ( int Channel );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.wMeleeWeapon.AnimEnd
	 void                      BringUp ( class AwWeapon* PrevWeapon );           		// [ FUNC_Simulated ] Engine.wMeleeWeapon.BringUp
}; // Size: 0x0004

// Class Engine.wKnife
class DLL_IMPORT AwKnife : public AwWeapon
{
public:

	// UScript Functions
	 void                      ServerMeleeFire (  );                             		//  Engine.wKnife.ServerMeleeFire
	 void                      ClientMeleeFire (  );                             		// [ FUNC_Simulated ] Engine.wKnife.ClientMeleeFire
	 void                      ActiveMeleeDelay (  );                            		// [ FUNC_Simulated ] Engine.wKnife.ActiveMeleeDelay
	 void                      eventWeaponTick ( float dt );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.wKnife.WeaponTick
	 void                      DropFrom ( struct FVector StartLocation, struct FRotator StartRotation );		//  Engine.wKnife.DropFrom
	 void                      ForcePlayIdle (  );                               		// [ FUNC_Simulated ] Engine.wKnife.ForcePlayIdle
	 void                      eventAnimEnd ( int Channel );                     		// [ FUNC_Simulated | FUNC_Event ] Engine.wKnife.AnimEnd
	 void                      BringUp ( class AwWeapon* PrevWeapon );           		// [ FUNC_Simulated ] Engine.wKnife.BringUp
	 void                      SetBaseParams ( class UwWeaponBaseParams* wBase );		// [ FUNC_Simulated ] Engine.wKnife.SetBaseParams
	 void                      wLoadOut ( int iID, int iAddPartsID );            		// [ FUNC_Simulated ] Engine.wKnife.wLoadOut
}; // Size: 0x0000

// Class Engine.wKnifeFire
class DLL_IMPORT UwKnifeFire : public UwMeleeFire
{
public:

	// UScript Functions
	 void                      PlayFiring (  );                                  		//  Engine.wKnifeFire.PlayFiring
	 void                      SetFireAnim (  );                                 		// [ FUNC_Simulated ] Engine.wKnifeFire.SetFireAnim
}; // Size: 0x0000

// Class Engine.wSkill_QuickDemolition
class DLL_IMPORT UwSkill_QuickDemolition : public UwSkill
{
public:

	// UScript Functions
	 void                      RemoveSkill (  );                                 		// [ FUNC_Simulated ] Engine.wSkill_QuickDemolition.RemoveSkill
	 void                      PostBeginPlay (  );                               		// [ FUNC_Simulated ] Engine.wSkill_QuickDemolition.PostBeginPlay
}; // Size: 0x0000

// Class Engine.EmitterThirdPerson
class DLL_IMPORT AEmitterThirdPerson : public AEmitter
{
public:

	// UScript Functions
	 void                      eventPostNetBeginPlay (  );                       		// [ FUNC_Event ] Engine.EmitterThirdPerson.PostNetBeginPlay
	 void                      DestroyIfFirstPerson (  );                        		// [ FUNC_Simulated ] Engine.EmitterThirdPerson.DestroyIfFirstPerson
}; // Size: 0x0000

// Class Engine.EFFECT_BTR_Flash
class DLL_IMPORT UEFFECT_BTR_Flash : public UI3DL2Listener
{
public:
}; // Size: 0x0000

#ifdef _MSC_VER
#pragma pack ( pop )
#endif

